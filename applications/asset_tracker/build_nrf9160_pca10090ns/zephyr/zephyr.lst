
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00018200 <_vector_table>:
   18200:	2002eaf0 	.word	0x2002eaf0
   18204:	00022871 	.word	0x00022871
   18208:	00046a37 	.word	0x00046a37
   1820c:	000224ad 	.word	0x000224ad
   18210:	000224ad 	.word	0x000224ad
   18214:	000224ad 	.word	0x000224ad
   18218:	000224ad 	.word	0x000224ad
   1821c:	000224ad 	.word	0x000224ad
   18220:	000224ad 	.word	0x000224ad
   18224:	000224ad 	.word	0x000224ad
   18228:	000224ad 	.word	0x000224ad
   1822c:	00022475 	.word	0x00022475
   18230:	000224ad 	.word	0x000224ad
   18234:	000224ad 	.word	0x000224ad
   18238:	000223b1 	.word	0x000223b1
   1823c:	00021d8d 	.word	0x00021d8d

00018240 <_irq_vector_table>:
   18240:	000224d9 000224d9 000224d9 000224d9     .$...$...$...$..
   18250:	000224d9 000224d9 000224d9 000224d9     .$...$...$...$..
   18260:	000224d9 000224d9 000224d9 000224d9     .$...$...$...$..
   18270:	000224d9 000224d9 000224d9 000224d9     .$...$...$...$..
   18280:	000224d9 000224d9 000224d9 000224d9     .$...$...$...$..
   18290:	000224d9 000224d9 000224d9 000224d9     .$...$...$...$..
   182a0:	000224d9 000224d9 000224d9 000224d9     .$...$...$...$..
   182b0:	00024fed 00047b0d 000224d9 000224d9     .O...{...$...$..
   182c0:	000224d9 000224d9 000224d9 000224d9     .$...$...$...$..
   182d0:	000224d9 000224d9 000224d9 000224d9     .$...$...$...$..
   182e0:	000224d9 000224d9 00047b2f 000224d9     .$...$../{...$..
   182f0:	000224d9 000224d9 000224d9 000224d9     .$...$...$...$..
   18300:	000224d9 000224d9 000224d9 000224d9     .$...$...$...$..
   18310:	000224d9 000224d9 000224d9 000224d9     .$...$...$...$..
   18320:	000224d9 000224d9 000224d9 000224d9     .$...$...$...$..
   18330:	000224d9 000224d9 000224d9 000224d9     .$...$...$...$..
   18340:	000224d9                                .$..

00018344 <_vector_end>:
	...

00018400 <m_firmware_info>:
   18400:	281ee6de 8fcebb4c 00005b01 00039ae8     ...(L....[......
   18410:	00000001 00018200 2002fc30 0002b105     ........0.. ....

Disassembly of section _TEXT_SECTION_NAME_2:

00018420 <__aeabi_drsub>:
   18420:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   18424:	e002      	b.n	1842c <__adddf3>
   18426:	bf00      	nop

00018428 <__aeabi_dsub>:
   18428:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001842c <__adddf3>:
   1842c:	b530      	push	{r4, r5, lr}
   1842e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   18432:	ea4f 0543 	mov.w	r5, r3, lsl #1
   18436:	ea94 0f05 	teq	r4, r5
   1843a:	bf08      	it	eq
   1843c:	ea90 0f02 	teqeq	r0, r2
   18440:	bf1f      	itttt	ne
   18442:	ea54 0c00 	orrsne.w	ip, r4, r0
   18446:	ea55 0c02 	orrsne.w	ip, r5, r2
   1844a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1844e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   18452:	f000 80e2 	beq.w	1861a <__adddf3+0x1ee>
   18456:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1845a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1845e:	bfb8      	it	lt
   18460:	426d      	neglt	r5, r5
   18462:	dd0c      	ble.n	1847e <__adddf3+0x52>
   18464:	442c      	add	r4, r5
   18466:	ea80 0202 	eor.w	r2, r0, r2
   1846a:	ea81 0303 	eor.w	r3, r1, r3
   1846e:	ea82 0000 	eor.w	r0, r2, r0
   18472:	ea83 0101 	eor.w	r1, r3, r1
   18476:	ea80 0202 	eor.w	r2, r0, r2
   1847a:	ea81 0303 	eor.w	r3, r1, r3
   1847e:	2d36      	cmp	r5, #54	; 0x36
   18480:	bf88      	it	hi
   18482:	bd30      	pophi	{r4, r5, pc}
   18484:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18488:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1848c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   18490:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   18494:	d002      	beq.n	1849c <__adddf3+0x70>
   18496:	4240      	negs	r0, r0
   18498:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1849c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   184a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   184a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   184a8:	d002      	beq.n	184b0 <__adddf3+0x84>
   184aa:	4252      	negs	r2, r2
   184ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   184b0:	ea94 0f05 	teq	r4, r5
   184b4:	f000 80a7 	beq.w	18606 <__adddf3+0x1da>
   184b8:	f1a4 0401 	sub.w	r4, r4, #1
   184bc:	f1d5 0e20 	rsbs	lr, r5, #32
   184c0:	db0d      	blt.n	184de <__adddf3+0xb2>
   184c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   184c6:	fa22 f205 	lsr.w	r2, r2, r5
   184ca:	1880      	adds	r0, r0, r2
   184cc:	f141 0100 	adc.w	r1, r1, #0
   184d0:	fa03 f20e 	lsl.w	r2, r3, lr
   184d4:	1880      	adds	r0, r0, r2
   184d6:	fa43 f305 	asr.w	r3, r3, r5
   184da:	4159      	adcs	r1, r3
   184dc:	e00e      	b.n	184fc <__adddf3+0xd0>
   184de:	f1a5 0520 	sub.w	r5, r5, #32
   184e2:	f10e 0e20 	add.w	lr, lr, #32
   184e6:	2a01      	cmp	r2, #1
   184e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   184ec:	bf28      	it	cs
   184ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   184f2:	fa43 f305 	asr.w	r3, r3, r5
   184f6:	18c0      	adds	r0, r0, r3
   184f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   184fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18500:	d507      	bpl.n	18512 <__adddf3+0xe6>
   18502:	f04f 0e00 	mov.w	lr, #0
   18506:	f1dc 0c00 	rsbs	ip, ip, #0
   1850a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1850e:	eb6e 0101 	sbc.w	r1, lr, r1
   18512:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   18516:	d31b      	bcc.n	18550 <__adddf3+0x124>
   18518:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1851c:	d30c      	bcc.n	18538 <__adddf3+0x10c>
   1851e:	0849      	lsrs	r1, r1, #1
   18520:	ea5f 0030 	movs.w	r0, r0, rrx
   18524:	ea4f 0c3c 	mov.w	ip, ip, rrx
   18528:	f104 0401 	add.w	r4, r4, #1
   1852c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   18530:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   18534:	f080 809a 	bcs.w	1866c <__adddf3+0x240>
   18538:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1853c:	bf08      	it	eq
   1853e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18542:	f150 0000 	adcs.w	r0, r0, #0
   18546:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1854a:	ea41 0105 	orr.w	r1, r1, r5
   1854e:	bd30      	pop	{r4, r5, pc}
   18550:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   18554:	4140      	adcs	r0, r0
   18556:	eb41 0101 	adc.w	r1, r1, r1
   1855a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1855e:	f1a4 0401 	sub.w	r4, r4, #1
   18562:	d1e9      	bne.n	18538 <__adddf3+0x10c>
   18564:	f091 0f00 	teq	r1, #0
   18568:	bf04      	itt	eq
   1856a:	4601      	moveq	r1, r0
   1856c:	2000      	moveq	r0, #0
   1856e:	fab1 f381 	clz	r3, r1
   18572:	bf08      	it	eq
   18574:	3320      	addeq	r3, #32
   18576:	f1a3 030b 	sub.w	r3, r3, #11
   1857a:	f1b3 0220 	subs.w	r2, r3, #32
   1857e:	da0c      	bge.n	1859a <__adddf3+0x16e>
   18580:	320c      	adds	r2, #12
   18582:	dd08      	ble.n	18596 <__adddf3+0x16a>
   18584:	f102 0c14 	add.w	ip, r2, #20
   18588:	f1c2 020c 	rsb	r2, r2, #12
   1858c:	fa01 f00c 	lsl.w	r0, r1, ip
   18590:	fa21 f102 	lsr.w	r1, r1, r2
   18594:	e00c      	b.n	185b0 <__adddf3+0x184>
   18596:	f102 0214 	add.w	r2, r2, #20
   1859a:	bfd8      	it	le
   1859c:	f1c2 0c20 	rsble	ip, r2, #32
   185a0:	fa01 f102 	lsl.w	r1, r1, r2
   185a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   185a8:	bfdc      	itt	le
   185aa:	ea41 010c 	orrle.w	r1, r1, ip
   185ae:	4090      	lslle	r0, r2
   185b0:	1ae4      	subs	r4, r4, r3
   185b2:	bfa2      	ittt	ge
   185b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   185b8:	4329      	orrge	r1, r5
   185ba:	bd30      	popge	{r4, r5, pc}
   185bc:	ea6f 0404 	mvn.w	r4, r4
   185c0:	3c1f      	subs	r4, #31
   185c2:	da1c      	bge.n	185fe <__adddf3+0x1d2>
   185c4:	340c      	adds	r4, #12
   185c6:	dc0e      	bgt.n	185e6 <__adddf3+0x1ba>
   185c8:	f104 0414 	add.w	r4, r4, #20
   185cc:	f1c4 0220 	rsb	r2, r4, #32
   185d0:	fa20 f004 	lsr.w	r0, r0, r4
   185d4:	fa01 f302 	lsl.w	r3, r1, r2
   185d8:	ea40 0003 	orr.w	r0, r0, r3
   185dc:	fa21 f304 	lsr.w	r3, r1, r4
   185e0:	ea45 0103 	orr.w	r1, r5, r3
   185e4:	bd30      	pop	{r4, r5, pc}
   185e6:	f1c4 040c 	rsb	r4, r4, #12
   185ea:	f1c4 0220 	rsb	r2, r4, #32
   185ee:	fa20 f002 	lsr.w	r0, r0, r2
   185f2:	fa01 f304 	lsl.w	r3, r1, r4
   185f6:	ea40 0003 	orr.w	r0, r0, r3
   185fa:	4629      	mov	r1, r5
   185fc:	bd30      	pop	{r4, r5, pc}
   185fe:	fa21 f004 	lsr.w	r0, r1, r4
   18602:	4629      	mov	r1, r5
   18604:	bd30      	pop	{r4, r5, pc}
   18606:	f094 0f00 	teq	r4, #0
   1860a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1860e:	bf06      	itte	eq
   18610:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   18614:	3401      	addeq	r4, #1
   18616:	3d01      	subne	r5, #1
   18618:	e74e      	b.n	184b8 <__adddf3+0x8c>
   1861a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1861e:	bf18      	it	ne
   18620:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   18624:	d029      	beq.n	1867a <__adddf3+0x24e>
   18626:	ea94 0f05 	teq	r4, r5
   1862a:	bf08      	it	eq
   1862c:	ea90 0f02 	teqeq	r0, r2
   18630:	d005      	beq.n	1863e <__adddf3+0x212>
   18632:	ea54 0c00 	orrs.w	ip, r4, r0
   18636:	bf04      	itt	eq
   18638:	4619      	moveq	r1, r3
   1863a:	4610      	moveq	r0, r2
   1863c:	bd30      	pop	{r4, r5, pc}
   1863e:	ea91 0f03 	teq	r1, r3
   18642:	bf1e      	ittt	ne
   18644:	2100      	movne	r1, #0
   18646:	2000      	movne	r0, #0
   18648:	bd30      	popne	{r4, r5, pc}
   1864a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1864e:	d105      	bne.n	1865c <__adddf3+0x230>
   18650:	0040      	lsls	r0, r0, #1
   18652:	4149      	adcs	r1, r1
   18654:	bf28      	it	cs
   18656:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1865a:	bd30      	pop	{r4, r5, pc}
   1865c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   18660:	bf3c      	itt	cc
   18662:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   18666:	bd30      	popcc	{r4, r5, pc}
   18668:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1866c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   18670:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18674:	f04f 0000 	mov.w	r0, #0
   18678:	bd30      	pop	{r4, r5, pc}
   1867a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1867e:	bf1a      	itte	ne
   18680:	4619      	movne	r1, r3
   18682:	4610      	movne	r0, r2
   18684:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   18688:	bf1c      	itt	ne
   1868a:	460b      	movne	r3, r1
   1868c:	4602      	movne	r2, r0
   1868e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18692:	bf06      	itte	eq
   18694:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   18698:	ea91 0f03 	teqeq	r1, r3
   1869c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   186a0:	bd30      	pop	{r4, r5, pc}
   186a2:	bf00      	nop

000186a4 <__aeabi_ui2d>:
   186a4:	f090 0f00 	teq	r0, #0
   186a8:	bf04      	itt	eq
   186aa:	2100      	moveq	r1, #0
   186ac:	4770      	bxeq	lr
   186ae:	b530      	push	{r4, r5, lr}
   186b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   186b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   186b8:	f04f 0500 	mov.w	r5, #0
   186bc:	f04f 0100 	mov.w	r1, #0
   186c0:	e750      	b.n	18564 <__adddf3+0x138>
   186c2:	bf00      	nop

000186c4 <__aeabi_i2d>:
   186c4:	f090 0f00 	teq	r0, #0
   186c8:	bf04      	itt	eq
   186ca:	2100      	moveq	r1, #0
   186cc:	4770      	bxeq	lr
   186ce:	b530      	push	{r4, r5, lr}
   186d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   186d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   186d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   186dc:	bf48      	it	mi
   186de:	4240      	negmi	r0, r0
   186e0:	f04f 0100 	mov.w	r1, #0
   186e4:	e73e      	b.n	18564 <__adddf3+0x138>
   186e6:	bf00      	nop

000186e8 <__aeabi_f2d>:
   186e8:	0042      	lsls	r2, r0, #1
   186ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   186ee:	ea4f 0131 	mov.w	r1, r1, rrx
   186f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   186f6:	bf1f      	itttt	ne
   186f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   186fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   18700:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   18704:	4770      	bxne	lr
   18706:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1870a:	bf08      	it	eq
   1870c:	4770      	bxeq	lr
   1870e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   18712:	bf04      	itt	eq
   18714:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   18718:	4770      	bxeq	lr
   1871a:	b530      	push	{r4, r5, lr}
   1871c:	f44f 7460 	mov.w	r4, #896	; 0x380
   18720:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   18728:	e71c      	b.n	18564 <__adddf3+0x138>
   1872a:	bf00      	nop

0001872c <__aeabi_ul2d>:
   1872c:	ea50 0201 	orrs.w	r2, r0, r1
   18730:	bf08      	it	eq
   18732:	4770      	bxeq	lr
   18734:	b530      	push	{r4, r5, lr}
   18736:	f04f 0500 	mov.w	r5, #0
   1873a:	e00a      	b.n	18752 <__aeabi_l2d+0x16>

0001873c <__aeabi_l2d>:
   1873c:	ea50 0201 	orrs.w	r2, r0, r1
   18740:	bf08      	it	eq
   18742:	4770      	bxeq	lr
   18744:	b530      	push	{r4, r5, lr}
   18746:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1874a:	d502      	bpl.n	18752 <__aeabi_l2d+0x16>
   1874c:	4240      	negs	r0, r0
   1874e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18752:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18756:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1875a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1875e:	f43f aed8 	beq.w	18512 <__adddf3+0xe6>
   18762:	f04f 0203 	mov.w	r2, #3
   18766:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1876a:	bf18      	it	ne
   1876c:	3203      	addne	r2, #3
   1876e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18772:	bf18      	it	ne
   18774:	3203      	addne	r2, #3
   18776:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1877a:	f1c2 0320 	rsb	r3, r2, #32
   1877e:	fa00 fc03 	lsl.w	ip, r0, r3
   18782:	fa20 f002 	lsr.w	r0, r0, r2
   18786:	fa01 fe03 	lsl.w	lr, r1, r3
   1878a:	ea40 000e 	orr.w	r0, r0, lr
   1878e:	fa21 f102 	lsr.w	r1, r1, r2
   18792:	4414      	add	r4, r2
   18794:	e6bd      	b.n	18512 <__adddf3+0xe6>
   18796:	bf00      	nop

00018798 <__aeabi_dmul>:
   18798:	b570      	push	{r4, r5, r6, lr}
   1879a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1879e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   187a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   187a6:	bf1d      	ittte	ne
   187a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   187ac:	ea94 0f0c 	teqne	r4, ip
   187b0:	ea95 0f0c 	teqne	r5, ip
   187b4:	f000 f8de 	bleq	18974 <__aeabi_dmul+0x1dc>
   187b8:	442c      	add	r4, r5
   187ba:	ea81 0603 	eor.w	r6, r1, r3
   187be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   187c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   187c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   187ca:	bf18      	it	ne
   187cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   187d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   187d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   187d8:	d038      	beq.n	1884c <__aeabi_dmul+0xb4>
   187da:	fba0 ce02 	umull	ip, lr, r0, r2
   187de:	f04f 0500 	mov.w	r5, #0
   187e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   187e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   187ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   187ee:	f04f 0600 	mov.w	r6, #0
   187f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   187f6:	f09c 0f00 	teq	ip, #0
   187fa:	bf18      	it	ne
   187fc:	f04e 0e01 	orrne.w	lr, lr, #1
   18800:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   18804:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   18808:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1880c:	d204      	bcs.n	18818 <__aeabi_dmul+0x80>
   1880e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   18812:	416d      	adcs	r5, r5
   18814:	eb46 0606 	adc.w	r6, r6, r6
   18818:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1881c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   18820:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   18824:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   18828:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1882c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   18830:	bf88      	it	hi
   18832:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18836:	d81e      	bhi.n	18876 <__aeabi_dmul+0xde>
   18838:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1883c:	bf08      	it	eq
   1883e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   18842:	f150 0000 	adcs.w	r0, r0, #0
   18846:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1884a:	bd70      	pop	{r4, r5, r6, pc}
   1884c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   18850:	ea46 0101 	orr.w	r1, r6, r1
   18854:	ea40 0002 	orr.w	r0, r0, r2
   18858:	ea81 0103 	eor.w	r1, r1, r3
   1885c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   18860:	bfc2      	ittt	gt
   18862:	ebd4 050c 	rsbsgt	r5, r4, ip
   18866:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1886a:	bd70      	popgt	{r4, r5, r6, pc}
   1886c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18870:	f04f 0e00 	mov.w	lr, #0
   18874:	3c01      	subs	r4, #1
   18876:	f300 80ab 	bgt.w	189d0 <__aeabi_dmul+0x238>
   1887a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1887e:	bfde      	ittt	le
   18880:	2000      	movle	r0, #0
   18882:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   18886:	bd70      	pople	{r4, r5, r6, pc}
   18888:	f1c4 0400 	rsb	r4, r4, #0
   1888c:	3c20      	subs	r4, #32
   1888e:	da35      	bge.n	188fc <__aeabi_dmul+0x164>
   18890:	340c      	adds	r4, #12
   18892:	dc1b      	bgt.n	188cc <__aeabi_dmul+0x134>
   18894:	f104 0414 	add.w	r4, r4, #20
   18898:	f1c4 0520 	rsb	r5, r4, #32
   1889c:	fa00 f305 	lsl.w	r3, r0, r5
   188a0:	fa20 f004 	lsr.w	r0, r0, r4
   188a4:	fa01 f205 	lsl.w	r2, r1, r5
   188a8:	ea40 0002 	orr.w	r0, r0, r2
   188ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   188b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   188b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   188b8:	fa21 f604 	lsr.w	r6, r1, r4
   188bc:	eb42 0106 	adc.w	r1, r2, r6
   188c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   188c4:	bf08      	it	eq
   188c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   188ca:	bd70      	pop	{r4, r5, r6, pc}
   188cc:	f1c4 040c 	rsb	r4, r4, #12
   188d0:	f1c4 0520 	rsb	r5, r4, #32
   188d4:	fa00 f304 	lsl.w	r3, r0, r4
   188d8:	fa20 f005 	lsr.w	r0, r0, r5
   188dc:	fa01 f204 	lsl.w	r2, r1, r4
   188e0:	ea40 0002 	orr.w	r0, r0, r2
   188e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   188e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   188ec:	f141 0100 	adc.w	r1, r1, #0
   188f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   188f4:	bf08      	it	eq
   188f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   188fa:	bd70      	pop	{r4, r5, r6, pc}
   188fc:	f1c4 0520 	rsb	r5, r4, #32
   18900:	fa00 f205 	lsl.w	r2, r0, r5
   18904:	ea4e 0e02 	orr.w	lr, lr, r2
   18908:	fa20 f304 	lsr.w	r3, r0, r4
   1890c:	fa01 f205 	lsl.w	r2, r1, r5
   18910:	ea43 0302 	orr.w	r3, r3, r2
   18914:	fa21 f004 	lsr.w	r0, r1, r4
   18918:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1891c:	fa21 f204 	lsr.w	r2, r1, r4
   18920:	ea20 0002 	bic.w	r0, r0, r2
   18924:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   18928:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1892c:	bf08      	it	eq
   1892e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18932:	bd70      	pop	{r4, r5, r6, pc}
   18934:	f094 0f00 	teq	r4, #0
   18938:	d10f      	bne.n	1895a <__aeabi_dmul+0x1c2>
   1893a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1893e:	0040      	lsls	r0, r0, #1
   18940:	eb41 0101 	adc.w	r1, r1, r1
   18944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18948:	bf08      	it	eq
   1894a:	3c01      	subeq	r4, #1
   1894c:	d0f7      	beq.n	1893e <__aeabi_dmul+0x1a6>
   1894e:	ea41 0106 	orr.w	r1, r1, r6
   18952:	f095 0f00 	teq	r5, #0
   18956:	bf18      	it	ne
   18958:	4770      	bxne	lr
   1895a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1895e:	0052      	lsls	r2, r2, #1
   18960:	eb43 0303 	adc.w	r3, r3, r3
   18964:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   18968:	bf08      	it	eq
   1896a:	3d01      	subeq	r5, #1
   1896c:	d0f7      	beq.n	1895e <__aeabi_dmul+0x1c6>
   1896e:	ea43 0306 	orr.w	r3, r3, r6
   18972:	4770      	bx	lr
   18974:	ea94 0f0c 	teq	r4, ip
   18978:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1897c:	bf18      	it	ne
   1897e:	ea95 0f0c 	teqne	r5, ip
   18982:	d00c      	beq.n	1899e <__aeabi_dmul+0x206>
   18984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18988:	bf18      	it	ne
   1898a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1898e:	d1d1      	bne.n	18934 <__aeabi_dmul+0x19c>
   18990:	ea81 0103 	eor.w	r1, r1, r3
   18994:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18998:	f04f 0000 	mov.w	r0, #0
   1899c:	bd70      	pop	{r4, r5, r6, pc}
   1899e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   189a2:	bf06      	itte	eq
   189a4:	4610      	moveq	r0, r2
   189a6:	4619      	moveq	r1, r3
   189a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   189ac:	d019      	beq.n	189e2 <__aeabi_dmul+0x24a>
   189ae:	ea94 0f0c 	teq	r4, ip
   189b2:	d102      	bne.n	189ba <__aeabi_dmul+0x222>
   189b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   189b8:	d113      	bne.n	189e2 <__aeabi_dmul+0x24a>
   189ba:	ea95 0f0c 	teq	r5, ip
   189be:	d105      	bne.n	189cc <__aeabi_dmul+0x234>
   189c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   189c4:	bf1c      	itt	ne
   189c6:	4610      	movne	r0, r2
   189c8:	4619      	movne	r1, r3
   189ca:	d10a      	bne.n	189e2 <__aeabi_dmul+0x24a>
   189cc:	ea81 0103 	eor.w	r1, r1, r3
   189d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   189d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   189d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   189dc:	f04f 0000 	mov.w	r0, #0
   189e0:	bd70      	pop	{r4, r5, r6, pc}
   189e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   189e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   189ea:	bd70      	pop	{r4, r5, r6, pc}

000189ec <__aeabi_ddiv>:
   189ec:	b570      	push	{r4, r5, r6, lr}
   189ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   189f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   189f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   189fa:	bf1d      	ittte	ne
   189fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18a00:	ea94 0f0c 	teqne	r4, ip
   18a04:	ea95 0f0c 	teqne	r5, ip
   18a08:	f000 f8a7 	bleq	18b5a <__aeabi_ddiv+0x16e>
   18a0c:	eba4 0405 	sub.w	r4, r4, r5
   18a10:	ea81 0e03 	eor.w	lr, r1, r3
   18a14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18a18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18a1c:	f000 8088 	beq.w	18b30 <__aeabi_ddiv+0x144>
   18a20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18a24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   18a28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   18a2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   18a30:	ea4f 2202 	mov.w	r2, r2, lsl #8
   18a34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   18a38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   18a3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   18a40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   18a44:	429d      	cmp	r5, r3
   18a46:	bf08      	it	eq
   18a48:	4296      	cmpeq	r6, r2
   18a4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   18a4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   18a52:	d202      	bcs.n	18a5a <__aeabi_ddiv+0x6e>
   18a54:	085b      	lsrs	r3, r3, #1
   18a56:	ea4f 0232 	mov.w	r2, r2, rrx
   18a5a:	1ab6      	subs	r6, r6, r2
   18a5c:	eb65 0503 	sbc.w	r5, r5, r3
   18a60:	085b      	lsrs	r3, r3, #1
   18a62:	ea4f 0232 	mov.w	r2, r2, rrx
   18a66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   18a6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   18a6e:	ebb6 0e02 	subs.w	lr, r6, r2
   18a72:	eb75 0e03 	sbcs.w	lr, r5, r3
   18a76:	bf22      	ittt	cs
   18a78:	1ab6      	subcs	r6, r6, r2
   18a7a:	4675      	movcs	r5, lr
   18a7c:	ea40 000c 	orrcs.w	r0, r0, ip
   18a80:	085b      	lsrs	r3, r3, #1
   18a82:	ea4f 0232 	mov.w	r2, r2, rrx
   18a86:	ebb6 0e02 	subs.w	lr, r6, r2
   18a8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   18a8e:	bf22      	ittt	cs
   18a90:	1ab6      	subcs	r6, r6, r2
   18a92:	4675      	movcs	r5, lr
   18a94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18a98:	085b      	lsrs	r3, r3, #1
   18a9a:	ea4f 0232 	mov.w	r2, r2, rrx
   18a9e:	ebb6 0e02 	subs.w	lr, r6, r2
   18aa2:	eb75 0e03 	sbcs.w	lr, r5, r3
   18aa6:	bf22      	ittt	cs
   18aa8:	1ab6      	subcs	r6, r6, r2
   18aaa:	4675      	movcs	r5, lr
   18aac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18ab0:	085b      	lsrs	r3, r3, #1
   18ab2:	ea4f 0232 	mov.w	r2, r2, rrx
   18ab6:	ebb6 0e02 	subs.w	lr, r6, r2
   18aba:	eb75 0e03 	sbcs.w	lr, r5, r3
   18abe:	bf22      	ittt	cs
   18ac0:	1ab6      	subcs	r6, r6, r2
   18ac2:	4675      	movcs	r5, lr
   18ac4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18ac8:	ea55 0e06 	orrs.w	lr, r5, r6
   18acc:	d018      	beq.n	18b00 <__aeabi_ddiv+0x114>
   18ace:	ea4f 1505 	mov.w	r5, r5, lsl #4
   18ad2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   18ad6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   18ada:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   18ade:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   18ae2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   18ae6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   18aea:	d1c0      	bne.n	18a6e <__aeabi_ddiv+0x82>
   18aec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18af0:	d10b      	bne.n	18b0a <__aeabi_ddiv+0x11e>
   18af2:	ea41 0100 	orr.w	r1, r1, r0
   18af6:	f04f 0000 	mov.w	r0, #0
   18afa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   18afe:	e7b6      	b.n	18a6e <__aeabi_ddiv+0x82>
   18b00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18b04:	bf04      	itt	eq
   18b06:	4301      	orreq	r1, r0
   18b08:	2000      	moveq	r0, #0
   18b0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   18b0e:	bf88      	it	hi
   18b10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18b14:	f63f aeaf 	bhi.w	18876 <__aeabi_dmul+0xde>
   18b18:	ebb5 0c03 	subs.w	ip, r5, r3
   18b1c:	bf04      	itt	eq
   18b1e:	ebb6 0c02 	subseq.w	ip, r6, r2
   18b22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18b26:	f150 0000 	adcs.w	r0, r0, #0
   18b2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   18b2e:	bd70      	pop	{r4, r5, r6, pc}
   18b30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   18b34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   18b38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   18b3c:	bfc2      	ittt	gt
   18b3e:	ebd4 050c 	rsbsgt	r5, r4, ip
   18b42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18b46:	bd70      	popgt	{r4, r5, r6, pc}
   18b48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18b4c:	f04f 0e00 	mov.w	lr, #0
   18b50:	3c01      	subs	r4, #1
   18b52:	e690      	b.n	18876 <__aeabi_dmul+0xde>
   18b54:	ea45 0e06 	orr.w	lr, r5, r6
   18b58:	e68d      	b.n	18876 <__aeabi_dmul+0xde>
   18b5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18b5e:	ea94 0f0c 	teq	r4, ip
   18b62:	bf08      	it	eq
   18b64:	ea95 0f0c 	teqeq	r5, ip
   18b68:	f43f af3b 	beq.w	189e2 <__aeabi_dmul+0x24a>
   18b6c:	ea94 0f0c 	teq	r4, ip
   18b70:	d10a      	bne.n	18b88 <__aeabi_ddiv+0x19c>
   18b72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18b76:	f47f af34 	bne.w	189e2 <__aeabi_dmul+0x24a>
   18b7a:	ea95 0f0c 	teq	r5, ip
   18b7e:	f47f af25 	bne.w	189cc <__aeabi_dmul+0x234>
   18b82:	4610      	mov	r0, r2
   18b84:	4619      	mov	r1, r3
   18b86:	e72c      	b.n	189e2 <__aeabi_dmul+0x24a>
   18b88:	ea95 0f0c 	teq	r5, ip
   18b8c:	d106      	bne.n	18b9c <__aeabi_ddiv+0x1b0>
   18b8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18b92:	f43f aefd 	beq.w	18990 <__aeabi_dmul+0x1f8>
   18b96:	4610      	mov	r0, r2
   18b98:	4619      	mov	r1, r3
   18b9a:	e722      	b.n	189e2 <__aeabi_dmul+0x24a>
   18b9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18ba0:	bf18      	it	ne
   18ba2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18ba6:	f47f aec5 	bne.w	18934 <__aeabi_dmul+0x19c>
   18baa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18bae:	f47f af0d 	bne.w	189cc <__aeabi_dmul+0x234>
   18bb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18bb6:	f47f aeeb 	bne.w	18990 <__aeabi_dmul+0x1f8>
   18bba:	e712      	b.n	189e2 <__aeabi_dmul+0x24a>

00018bbc <__gedf2>:
   18bbc:	f04f 3cff 	mov.w	ip, #4294967295
   18bc0:	e006      	b.n	18bd0 <__cmpdf2+0x4>
   18bc2:	bf00      	nop

00018bc4 <__ledf2>:
   18bc4:	f04f 0c01 	mov.w	ip, #1
   18bc8:	e002      	b.n	18bd0 <__cmpdf2+0x4>
   18bca:	bf00      	nop

00018bcc <__cmpdf2>:
   18bcc:	f04f 0c01 	mov.w	ip, #1
   18bd0:	f84d cd04 	str.w	ip, [sp, #-4]!
   18bd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18bd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18bdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18be0:	bf18      	it	ne
   18be2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   18be6:	d01b      	beq.n	18c20 <__cmpdf2+0x54>
   18be8:	b001      	add	sp, #4
   18bea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   18bee:	bf0c      	ite	eq
   18bf0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   18bf4:	ea91 0f03 	teqne	r1, r3
   18bf8:	bf02      	ittt	eq
   18bfa:	ea90 0f02 	teqeq	r0, r2
   18bfe:	2000      	moveq	r0, #0
   18c00:	4770      	bxeq	lr
   18c02:	f110 0f00 	cmn.w	r0, #0
   18c06:	ea91 0f03 	teq	r1, r3
   18c0a:	bf58      	it	pl
   18c0c:	4299      	cmppl	r1, r3
   18c0e:	bf08      	it	eq
   18c10:	4290      	cmpeq	r0, r2
   18c12:	bf2c      	ite	cs
   18c14:	17d8      	asrcs	r0, r3, #31
   18c16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   18c1a:	f040 0001 	orr.w	r0, r0, #1
   18c1e:	4770      	bx	lr
   18c20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18c24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18c28:	d102      	bne.n	18c30 <__cmpdf2+0x64>
   18c2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   18c2e:	d107      	bne.n	18c40 <__cmpdf2+0x74>
   18c30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18c34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18c38:	d1d6      	bne.n	18be8 <__cmpdf2+0x1c>
   18c3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   18c3e:	d0d3      	beq.n	18be8 <__cmpdf2+0x1c>
   18c40:	f85d 0b04 	ldr.w	r0, [sp], #4
   18c44:	4770      	bx	lr
   18c46:	bf00      	nop

00018c48 <__aeabi_cdrcmple>:
   18c48:	4684      	mov	ip, r0
   18c4a:	4610      	mov	r0, r2
   18c4c:	4662      	mov	r2, ip
   18c4e:	468c      	mov	ip, r1
   18c50:	4619      	mov	r1, r3
   18c52:	4663      	mov	r3, ip
   18c54:	e000      	b.n	18c58 <__aeabi_cdcmpeq>
   18c56:	bf00      	nop

00018c58 <__aeabi_cdcmpeq>:
   18c58:	b501      	push	{r0, lr}
   18c5a:	f7ff ffb7 	bl	18bcc <__cmpdf2>
   18c5e:	2800      	cmp	r0, #0
   18c60:	bf48      	it	mi
   18c62:	f110 0f00 	cmnmi.w	r0, #0
   18c66:	bd01      	pop	{r0, pc}

00018c68 <__aeabi_dcmpeq>:
   18c68:	f84d ed08 	str.w	lr, [sp, #-8]!
   18c6c:	f7ff fff4 	bl	18c58 <__aeabi_cdcmpeq>
   18c70:	bf0c      	ite	eq
   18c72:	2001      	moveq	r0, #1
   18c74:	2000      	movne	r0, #0
   18c76:	f85d fb08 	ldr.w	pc, [sp], #8
   18c7a:	bf00      	nop

00018c7c <__aeabi_dcmplt>:
   18c7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18c80:	f7ff ffea 	bl	18c58 <__aeabi_cdcmpeq>
   18c84:	bf34      	ite	cc
   18c86:	2001      	movcc	r0, #1
   18c88:	2000      	movcs	r0, #0
   18c8a:	f85d fb08 	ldr.w	pc, [sp], #8
   18c8e:	bf00      	nop

00018c90 <__aeabi_dcmple>:
   18c90:	f84d ed08 	str.w	lr, [sp, #-8]!
   18c94:	f7ff ffe0 	bl	18c58 <__aeabi_cdcmpeq>
   18c98:	bf94      	ite	ls
   18c9a:	2001      	movls	r0, #1
   18c9c:	2000      	movhi	r0, #0
   18c9e:	f85d fb08 	ldr.w	pc, [sp], #8
   18ca2:	bf00      	nop

00018ca4 <__aeabi_dcmpge>:
   18ca4:	f84d ed08 	str.w	lr, [sp, #-8]!
   18ca8:	f7ff ffce 	bl	18c48 <__aeabi_cdrcmple>
   18cac:	bf94      	ite	ls
   18cae:	2001      	movls	r0, #1
   18cb0:	2000      	movhi	r0, #0
   18cb2:	f85d fb08 	ldr.w	pc, [sp], #8
   18cb6:	bf00      	nop

00018cb8 <__aeabi_dcmpgt>:
   18cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   18cbc:	f7ff ffc4 	bl	18c48 <__aeabi_cdrcmple>
   18cc0:	bf34      	ite	cc
   18cc2:	2001      	movcc	r0, #1
   18cc4:	2000      	movcs	r0, #0
   18cc6:	f85d fb08 	ldr.w	pc, [sp], #8
   18cca:	bf00      	nop

00018ccc <__aeabi_d2iz>:
   18ccc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18cd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18cd4:	d215      	bcs.n	18d02 <__aeabi_d2iz+0x36>
   18cd6:	d511      	bpl.n	18cfc <__aeabi_d2iz+0x30>
   18cd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18cdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18ce0:	d912      	bls.n	18d08 <__aeabi_d2iz+0x3c>
   18ce2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18ce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18cea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18cee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18cf2:	fa23 f002 	lsr.w	r0, r3, r2
   18cf6:	bf18      	it	ne
   18cf8:	4240      	negne	r0, r0
   18cfa:	4770      	bx	lr
   18cfc:	f04f 0000 	mov.w	r0, #0
   18d00:	4770      	bx	lr
   18d02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   18d06:	d105      	bne.n	18d14 <__aeabi_d2iz+0x48>
   18d08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   18d0c:	bf08      	it	eq
   18d0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18d12:	4770      	bx	lr
   18d14:	f04f 0000 	mov.w	r0, #0
   18d18:	4770      	bx	lr
   18d1a:	bf00      	nop

00018d1c <__aeabi_ldivmod>:
   18d1c:	b97b      	cbnz	r3, 18d3e <__aeabi_ldivmod+0x22>
   18d1e:	b972      	cbnz	r2, 18d3e <__aeabi_ldivmod+0x22>
   18d20:	2900      	cmp	r1, #0
   18d22:	bfbe      	ittt	lt
   18d24:	2000      	movlt	r0, #0
   18d26:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   18d2a:	e006      	blt.n	18d3a <__aeabi_ldivmod+0x1e>
   18d2c:	bf08      	it	eq
   18d2e:	2800      	cmpeq	r0, #0
   18d30:	bf1c      	itt	ne
   18d32:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   18d36:	f04f 30ff 	movne.w	r0, #4294967295
   18d3a:	f000 b9c7 	b.w	190cc <__aeabi_idiv0>
   18d3e:	f1ad 0c08 	sub.w	ip, sp, #8
   18d42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   18d46:	2900      	cmp	r1, #0
   18d48:	db09      	blt.n	18d5e <__aeabi_ldivmod+0x42>
   18d4a:	2b00      	cmp	r3, #0
   18d4c:	db1a      	blt.n	18d84 <__aeabi_ldivmod+0x68>
   18d4e:	f000 f84d 	bl	18dec <__udivmoddi4>
   18d52:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d5a:	b004      	add	sp, #16
   18d5c:	4770      	bx	lr
   18d5e:	4240      	negs	r0, r0
   18d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18d64:	2b00      	cmp	r3, #0
   18d66:	db1b      	blt.n	18da0 <__aeabi_ldivmod+0x84>
   18d68:	f000 f840 	bl	18dec <__udivmoddi4>
   18d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d74:	b004      	add	sp, #16
   18d76:	4240      	negs	r0, r0
   18d78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18d7c:	4252      	negs	r2, r2
   18d7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18d82:	4770      	bx	lr
   18d84:	4252      	negs	r2, r2
   18d86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18d8a:	f000 f82f 	bl	18dec <__udivmoddi4>
   18d8e:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d96:	b004      	add	sp, #16
   18d98:	4240      	negs	r0, r0
   18d9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18d9e:	4770      	bx	lr
   18da0:	4252      	negs	r2, r2
   18da2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18da6:	f000 f821 	bl	18dec <__udivmoddi4>
   18daa:	f8dd e004 	ldr.w	lr, [sp, #4]
   18dae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18db2:	b004      	add	sp, #16
   18db4:	4252      	negs	r2, r2
   18db6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18dba:	4770      	bx	lr

00018dbc <__aeabi_uldivmod>:
   18dbc:	b953      	cbnz	r3, 18dd4 <__aeabi_uldivmod+0x18>
   18dbe:	b94a      	cbnz	r2, 18dd4 <__aeabi_uldivmod+0x18>
   18dc0:	2900      	cmp	r1, #0
   18dc2:	bf08      	it	eq
   18dc4:	2800      	cmpeq	r0, #0
   18dc6:	bf1c      	itt	ne
   18dc8:	f04f 31ff 	movne.w	r1, #4294967295
   18dcc:	f04f 30ff 	movne.w	r0, #4294967295
   18dd0:	f000 b97c 	b.w	190cc <__aeabi_idiv0>
   18dd4:	f1ad 0c08 	sub.w	ip, sp, #8
   18dd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   18ddc:	f000 f806 	bl	18dec <__udivmoddi4>
   18de0:	f8dd e004 	ldr.w	lr, [sp, #4]
   18de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18de8:	b004      	add	sp, #16
   18dea:	4770      	bx	lr

00018dec <__udivmoddi4>:
   18dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18df0:	468c      	mov	ip, r1
   18df2:	9d08      	ldr	r5, [sp, #32]
   18df4:	4604      	mov	r4, r0
   18df6:	468a      	mov	sl, r1
   18df8:	2b00      	cmp	r3, #0
   18dfa:	d14a      	bne.n	18e92 <__udivmoddi4+0xa6>
   18dfc:	428a      	cmp	r2, r1
   18dfe:	4617      	mov	r7, r2
   18e00:	d962      	bls.n	18ec8 <__udivmoddi4+0xdc>
   18e02:	fab2 f682 	clz	r6, r2
   18e06:	b14e      	cbz	r6, 18e1c <__udivmoddi4+0x30>
   18e08:	f1c6 0e20 	rsb	lr, r6, #32
   18e0c:	fa01 f306 	lsl.w	r3, r1, r6
   18e10:	40b7      	lsls	r7, r6
   18e12:	40b4      	lsls	r4, r6
   18e14:	fa20 fe0e 	lsr.w	lr, r0, lr
   18e18:	ea4e 0a03 	orr.w	sl, lr, r3
   18e1c:	ea4f 4817 	mov.w	r8, r7, lsr #16
   18e20:	0c23      	lsrs	r3, r4, #16
   18e22:	fa1f f987 	uxth.w	r9, r7
   18e26:	fbba fef8 	udiv	lr, sl, r8
   18e2a:	fb08 aa1e 	mls	sl, r8, lr, sl
   18e2e:	fb0e f209 	mul.w	r2, lr, r9
   18e32:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   18e36:	429a      	cmp	r2, r3
   18e38:	d90b      	bls.n	18e52 <__udivmoddi4+0x66>
   18e3a:	18fb      	adds	r3, r7, r3
   18e3c:	f10e 31ff 	add.w	r1, lr, #4294967295
   18e40:	bf2c      	ite	cs
   18e42:	2001      	movcs	r0, #1
   18e44:	2000      	movcc	r0, #0
   18e46:	429a      	cmp	r2, r3
   18e48:	d902      	bls.n	18e50 <__udivmoddi4+0x64>
   18e4a:	2800      	cmp	r0, #0
   18e4c:	f000 812a 	beq.w	190a4 <__udivmoddi4+0x2b8>
   18e50:	468e      	mov	lr, r1
   18e52:	1a9a      	subs	r2, r3, r2
   18e54:	b2a3      	uxth	r3, r4
   18e56:	fbb2 f0f8 	udiv	r0, r2, r8
   18e5a:	fb08 2210 	mls	r2, r8, r0, r2
   18e5e:	fb00 f909 	mul.w	r9, r0, r9
   18e62:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
   18e66:	45a1      	cmp	r9, r4
   18e68:	d907      	bls.n	18e7a <__udivmoddi4+0x8e>
   18e6a:	193c      	adds	r4, r7, r4
   18e6c:	f100 33ff 	add.w	r3, r0, #4294967295
   18e70:	d202      	bcs.n	18e78 <__udivmoddi4+0x8c>
   18e72:	45a1      	cmp	r9, r4
   18e74:	f200 8110 	bhi.w	19098 <__udivmoddi4+0x2ac>
   18e78:	4618      	mov	r0, r3
   18e7a:	eba4 0409 	sub.w	r4, r4, r9
   18e7e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   18e82:	2100      	movs	r1, #0
   18e84:	b11d      	cbz	r5, 18e8e <__udivmoddi4+0xa2>
   18e86:	40f4      	lsrs	r4, r6
   18e88:	2300      	movs	r3, #0
   18e8a:	e9c5 4300 	strd	r4, r3, [r5]
   18e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18e92:	428b      	cmp	r3, r1
   18e94:	d908      	bls.n	18ea8 <__udivmoddi4+0xbc>
   18e96:	2d00      	cmp	r5, #0
   18e98:	f000 80f2 	beq.w	19080 <__udivmoddi4+0x294>
   18e9c:	2100      	movs	r1, #0
   18e9e:	e9c5 0c00 	strd	r0, ip, [r5]
   18ea2:	4608      	mov	r0, r1
   18ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18ea8:	fab3 f183 	clz	r1, r3
   18eac:	2900      	cmp	r1, #0
   18eae:	d14e      	bne.n	18f4e <__udivmoddi4+0x162>
   18eb0:	4563      	cmp	r3, ip
   18eb2:	f0c0 80e8 	bcc.w	19086 <__udivmoddi4+0x29a>
   18eb6:	4282      	cmp	r2, r0
   18eb8:	f240 80e5 	bls.w	19086 <__udivmoddi4+0x29a>
   18ebc:	4608      	mov	r0, r1
   18ebe:	2d00      	cmp	r5, #0
   18ec0:	d0e5      	beq.n	18e8e <__udivmoddi4+0xa2>
   18ec2:	e9c5 4a00 	strd	r4, sl, [r5]
   18ec6:	e7e2      	b.n	18e8e <__udivmoddi4+0xa2>
   18ec8:	b902      	cbnz	r2, 18ecc <__udivmoddi4+0xe0>
   18eca:	deff      	udf	#255	; 0xff
   18ecc:	fab2 f682 	clz	r6, r2
   18ed0:	2e00      	cmp	r6, #0
   18ed2:	f040 8099 	bne.w	19008 <__udivmoddi4+0x21c>
   18ed6:	1a8b      	subs	r3, r1, r2
   18ed8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   18edc:	fa1f f882 	uxth.w	r8, r2
   18ee0:	2101      	movs	r1, #1
   18ee2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   18ee6:	fbb3 f2fe 	udiv	r2, r3, lr
   18eea:	fb0e 3012 	mls	r0, lr, r2, r3
   18eee:	fb08 f902 	mul.w	r9, r8, r2
   18ef2:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
   18ef6:	45e1      	cmp	r9, ip
   18ef8:	d908      	bls.n	18f0c <__udivmoddi4+0x120>
   18efa:	eb17 0c0c 	adds.w	ip, r7, ip
   18efe:	f102 33ff 	add.w	r3, r2, #4294967295
   18f02:	d202      	bcs.n	18f0a <__udivmoddi4+0x11e>
   18f04:	45e1      	cmp	r9, ip
   18f06:	f200 80ca 	bhi.w	1909e <__udivmoddi4+0x2b2>
   18f0a:	461a      	mov	r2, r3
   18f0c:	ebac 0c09 	sub.w	ip, ip, r9
   18f10:	b2a3      	uxth	r3, r4
   18f12:	fbbc f0fe 	udiv	r0, ip, lr
   18f16:	fb0e cc10 	mls	ip, lr, r0, ip
   18f1a:	fb08 f800 	mul.w	r8, r8, r0
   18f1e:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
   18f22:	45a0      	cmp	r8, r4
   18f24:	d90e      	bls.n	18f44 <__udivmoddi4+0x158>
   18f26:	193c      	adds	r4, r7, r4
   18f28:	f100 33ff 	add.w	r3, r0, #4294967295
   18f2c:	bf2c      	ite	cs
   18f2e:	f04f 0c01 	movcs.w	ip, #1
   18f32:	f04f 0c00 	movcc.w	ip, #0
   18f36:	45a0      	cmp	r8, r4
   18f38:	d903      	bls.n	18f42 <__udivmoddi4+0x156>
   18f3a:	f1bc 0f00 	cmp.w	ip, #0
   18f3e:	f000 80a8 	beq.w	19092 <__udivmoddi4+0x2a6>
   18f42:	4618      	mov	r0, r3
   18f44:	eba4 0408 	sub.w	r4, r4, r8
   18f48:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   18f4c:	e79a      	b.n	18e84 <__udivmoddi4+0x98>
   18f4e:	f1c1 0420 	rsb	r4, r1, #32
   18f52:	408b      	lsls	r3, r1
   18f54:	fa02 fe01 	lsl.w	lr, r2, r1
   18f58:	fa0c f601 	lsl.w	r6, ip, r1
   18f5c:	40e2      	lsrs	r2, r4
   18f5e:	fa20 f704 	lsr.w	r7, r0, r4
   18f62:	fa2c fc04 	lsr.w	ip, ip, r4
   18f66:	fa00 f801 	lsl.w	r8, r0, r1
   18f6a:	4313      	orrs	r3, r2
   18f6c:	433e      	orrs	r6, r7
   18f6e:	0c1f      	lsrs	r7, r3, #16
   18f70:	0c32      	lsrs	r2, r6, #16
   18f72:	fa1f f983 	uxth.w	r9, r3
   18f76:	fbbc f0f7 	udiv	r0, ip, r7
   18f7a:	fb07 cc10 	mls	ip, r7, r0, ip
   18f7e:	fb00 fa09 	mul.w	sl, r0, r9
   18f82:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
   18f86:	45e2      	cmp	sl, ip
   18f88:	d908      	bls.n	18f9c <__udivmoddi4+0x1b0>
   18f8a:	eb13 0c0c 	adds.w	ip, r3, ip
   18f8e:	f100 32ff 	add.w	r2, r0, #4294967295
   18f92:	d202      	bcs.n	18f9a <__udivmoddi4+0x1ae>
   18f94:	45e2      	cmp	sl, ip
   18f96:	f200 8089 	bhi.w	190ac <__udivmoddi4+0x2c0>
   18f9a:	4610      	mov	r0, r2
   18f9c:	ebac 0c0a 	sub.w	ip, ip, sl
   18fa0:	b2b6      	uxth	r6, r6
   18fa2:	fbbc faf7 	udiv	sl, ip, r7
   18fa6:	fb07 cc1a 	mls	ip, r7, sl, ip
   18faa:	fb0a f909 	mul.w	r9, sl, r9
   18fae:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
   18fb2:	4591      	cmp	r9, r2
   18fb4:	d906      	bls.n	18fc4 <__udivmoddi4+0x1d8>
   18fb6:	189a      	adds	r2, r3, r2
   18fb8:	f10a 36ff 	add.w	r6, sl, #4294967295
   18fbc:	d201      	bcs.n	18fc2 <__udivmoddi4+0x1d6>
   18fbe:	4591      	cmp	r9, r2
   18fc0:	d87a      	bhi.n	190b8 <__udivmoddi4+0x2cc>
   18fc2:	46b2      	mov	sl, r6
   18fc4:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
   18fc8:	eba2 0209 	sub.w	r2, r2, r9
   18fcc:	fba0 670e 	umull	r6, r7, r0, lr
   18fd0:	42ba      	cmp	r2, r7
   18fd2:	46b4      	mov	ip, r6
   18fd4:	46b9      	mov	r9, r7
   18fd6:	d302      	bcc.n	18fde <__udivmoddi4+0x1f2>
   18fd8:	d107      	bne.n	18fea <__udivmoddi4+0x1fe>
   18fda:	45b0      	cmp	r8, r6
   18fdc:	d205      	bcs.n	18fea <__udivmoddi4+0x1fe>
   18fde:	ebb6 0c0e 	subs.w	ip, r6, lr
   18fe2:	eb67 0303 	sbc.w	r3, r7, r3
   18fe6:	3801      	subs	r0, #1
   18fe8:	4699      	mov	r9, r3
   18fea:	2d00      	cmp	r5, #0
   18fec:	d06b      	beq.n	190c6 <__udivmoddi4+0x2da>
   18fee:	ebb8 030c 	subs.w	r3, r8, ip
   18ff2:	eb62 0209 	sbc.w	r2, r2, r9
   18ff6:	fa02 f404 	lsl.w	r4, r2, r4
   18ffa:	40cb      	lsrs	r3, r1
   18ffc:	40ca      	lsrs	r2, r1
   18ffe:	2100      	movs	r1, #0
   19000:	431c      	orrs	r4, r3
   19002:	e9c5 4200 	strd	r4, r2, [r5]
   19006:	e742      	b.n	18e8e <__udivmoddi4+0xa2>
   19008:	40b7      	lsls	r7, r6
   1900a:	f1c6 0220 	rsb	r2, r6, #32
   1900e:	fa01 f306 	lsl.w	r3, r1, r6
   19012:	40b4      	lsls	r4, r6
   19014:	fa21 fc02 	lsr.w	ip, r1, r2
   19018:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1901c:	fa20 f202 	lsr.w	r2, r0, r2
   19020:	fa1f f887 	uxth.w	r8, r7
   19024:	fbbc f1fe 	udiv	r1, ip, lr
   19028:	431a      	orrs	r2, r3
   1902a:	fb0e cc11 	mls	ip, lr, r1, ip
   1902e:	fb01 f008 	mul.w	r0, r1, r8
   19032:	0c13      	lsrs	r3, r2, #16
   19034:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
   19038:	4560      	cmp	r0, ip
   1903a:	d907      	bls.n	1904c <__udivmoddi4+0x260>
   1903c:	eb17 0c0c 	adds.w	ip, r7, ip
   19040:	f101 33ff 	add.w	r3, r1, #4294967295
   19044:	d201      	bcs.n	1904a <__udivmoddi4+0x25e>
   19046:	4560      	cmp	r0, ip
   19048:	d833      	bhi.n	190b2 <__udivmoddi4+0x2c6>
   1904a:	4619      	mov	r1, r3
   1904c:	ebac 0c00 	sub.w	ip, ip, r0
   19050:	b292      	uxth	r2, r2
   19052:	fbbc f0fe 	udiv	r0, ip, lr
   19056:	fb0e cc10 	mls	ip, lr, r0, ip
   1905a:	fb00 f308 	mul.w	r3, r0, r8
   1905e:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
   19062:	4563      	cmp	r3, ip
   19064:	d907      	bls.n	19076 <__udivmoddi4+0x28a>
   19066:	eb17 0c0c 	adds.w	ip, r7, ip
   1906a:	f100 32ff 	add.w	r2, r0, #4294967295
   1906e:	d201      	bcs.n	19074 <__udivmoddi4+0x288>
   19070:	4563      	cmp	r3, ip
   19072:	d825      	bhi.n	190c0 <__udivmoddi4+0x2d4>
   19074:	4610      	mov	r0, r2
   19076:	ebac 0303 	sub.w	r3, ip, r3
   1907a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1907e:	e730      	b.n	18ee2 <__udivmoddi4+0xf6>
   19080:	4629      	mov	r1, r5
   19082:	4628      	mov	r0, r5
   19084:	e703      	b.n	18e8e <__udivmoddi4+0xa2>
   19086:	1a84      	subs	r4, r0, r2
   19088:	eb6c 0303 	sbc.w	r3, ip, r3
   1908c:	2001      	movs	r0, #1
   1908e:	469a      	mov	sl, r3
   19090:	e715      	b.n	18ebe <__udivmoddi4+0xd2>
   19092:	3802      	subs	r0, #2
   19094:	443c      	add	r4, r7
   19096:	e755      	b.n	18f44 <__udivmoddi4+0x158>
   19098:	3802      	subs	r0, #2
   1909a:	443c      	add	r4, r7
   1909c:	e6ed      	b.n	18e7a <__udivmoddi4+0x8e>
   1909e:	3a02      	subs	r2, #2
   190a0:	44bc      	add	ip, r7
   190a2:	e733      	b.n	18f0c <__udivmoddi4+0x120>
   190a4:	f1ae 0e02 	sub.w	lr, lr, #2
   190a8:	443b      	add	r3, r7
   190aa:	e6d2      	b.n	18e52 <__udivmoddi4+0x66>
   190ac:	3802      	subs	r0, #2
   190ae:	449c      	add	ip, r3
   190b0:	e774      	b.n	18f9c <__udivmoddi4+0x1b0>
   190b2:	3902      	subs	r1, #2
   190b4:	44bc      	add	ip, r7
   190b6:	e7c9      	b.n	1904c <__udivmoddi4+0x260>
   190b8:	f1aa 0a02 	sub.w	sl, sl, #2
   190bc:	441a      	add	r2, r3
   190be:	e781      	b.n	18fc4 <__udivmoddi4+0x1d8>
   190c0:	3802      	subs	r0, #2
   190c2:	44bc      	add	ip, r7
   190c4:	e7d7      	b.n	19076 <__udivmoddi4+0x28a>
   190c6:	4629      	mov	r1, r5
   190c8:	e6e1      	b.n	18e8e <__udivmoddi4+0xa2>
   190ca:	bf00      	nop

000190cc <__aeabi_idiv0>:
   190cc:	4770      	bx	lr
   190ce:	bf00      	nop

000190d0 <ocrypto_bigint_add128>:
   190d0:	b470      	push	{r4, r5, r6}
   190d2:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
   190d6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   190da:	185b      	adds	r3, r3, r1
   190dc:	eb54 040c 	adcs.w	r4, r4, ip
   190e0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   190e4:	414d      	adcs	r5, r1
   190e6:	eb56 060c 	adcs.w	r6, r6, ip
   190ea:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
   190ee:	4180      	sbcs	r0, r0
   190f0:	3001      	adds	r0, #1
   190f2:	bc70      	pop	{r4, r5, r6}
   190f4:	4770      	bx	lr

000190f6 <ocrypto_bigint_sub128>:
   190f6:	b470      	push	{r4, r5, r6}
   190f8:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
   190fc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19100:	1a5b      	subs	r3, r3, r1
   19102:	eb74 040c 	sbcs.w	r4, r4, ip
   19106:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1910a:	418d      	sbcs	r5, r1
   1910c:	eb76 060c 	sbcs.w	r6, r6, ip
   19110:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
   19114:	4180      	sbcs	r0, r0
   19116:	4240      	negs	r0, r0
   19118:	bc70      	pop	{r4, r5, r6}
   1911a:	4770      	bx	lr

0001911c <ocrypto_bigint_add256>:
   1911c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19120:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   19124:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19128:	185b      	adds	r3, r3, r1
   1912a:	eb54 040c 	adcs.w	r4, r4, ip
   1912e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19132:	414d      	adcs	r5, r1
   19134:	eb56 060c 	adcs.w	r6, r6, ip
   19138:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1913c:	414f      	adcs	r7, r1
   1913e:	eb58 080c 	adcs.w	r8, r8, ip
   19142:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19146:	eb59 0901 	adcs.w	r9, r9, r1
   1914a:	eb5a 0a0c 	adcs.w	sl, sl, ip
   1914e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   19152:	4180      	sbcs	r0, r0
   19154:	3001      	adds	r0, #1
   19156:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   1915a:	4770      	bx	lr

0001915c <ocrypto_bigint_sub256>:
   1915c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19160:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   19164:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19168:	1a5b      	subs	r3, r3, r1
   1916a:	eb74 040c 	sbcs.w	r4, r4, ip
   1916e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19172:	418d      	sbcs	r5, r1
   19174:	eb76 060c 	sbcs.w	r6, r6, ip
   19178:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1917c:	418f      	sbcs	r7, r1
   1917e:	eb78 080c 	sbcs.w	r8, r8, ip
   19182:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19186:	eb79 0901 	sbcs.w	r9, r9, r1
   1918a:	eb7a 0a0c 	sbcs.w	sl, sl, ip
   1918e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   19192:	4180      	sbcs	r0, r0
   19194:	4240      	negs	r0, r0
   19196:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   1919a:	4770      	bx	lr

0001919c <ocrypto_bigint_cadd256>:
   1919c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   191a0:	4252      	negs	r2, r2
   191a2:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   191a6:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   191aa:	4017      	ands	r7, r2
   191ac:	19db      	adds	r3, r3, r7
   191ae:	ea18 0802 	ands.w	r8, r8, r2
   191b2:	eb54 0408 	adcs.w	r4, r4, r8
   191b6:	ea19 0902 	ands.w	r9, r9, r2
   191ba:	eb55 0509 	adcs.w	r5, r5, r9
   191be:	ea1a 0a02 	ands.w	sl, sl, r2
   191c2:	eb56 060a 	adcs.w	r6, r6, sl
   191c6:	c078      	stmia	r0!, {r3, r4, r5, r6}
   191c8:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   191cc:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   191d0:	4017      	ands	r7, r2
   191d2:	417b      	adcs	r3, r7
   191d4:	ea18 0802 	ands.w	r8, r8, r2
   191d8:	eb54 0408 	adcs.w	r4, r4, r8
   191dc:	ea19 0902 	ands.w	r9, r9, r2
   191e0:	eb55 0509 	adcs.w	r5, r5, r9
   191e4:	ea1a 0a02 	ands.w	sl, sl, r2
   191e8:	eb56 060a 	adcs.w	r6, r6, sl
   191ec:	c078      	stmia	r0!, {r3, r4, r5, r6}
   191ee:	4180      	sbcs	r0, r0
   191f0:	3001      	adds	r0, #1
   191f2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   191f6:	4770      	bx	lr

000191f8 <ocrypto_bigint_csub256>:
   191f8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   191fc:	4252      	negs	r2, r2
   191fe:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   19202:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   19206:	4017      	ands	r7, r2
   19208:	1bdb      	subs	r3, r3, r7
   1920a:	ea18 0802 	ands.w	r8, r8, r2
   1920e:	eb74 0408 	sbcs.w	r4, r4, r8
   19212:	ea19 0902 	ands.w	r9, r9, r2
   19216:	eb75 0509 	sbcs.w	r5, r5, r9
   1921a:	ea1a 0a02 	ands.w	sl, sl, r2
   1921e:	eb76 060a 	sbcs.w	r6, r6, sl
   19222:	c078      	stmia	r0!, {r3, r4, r5, r6}
   19224:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   19228:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   1922c:	4017      	ands	r7, r2
   1922e:	41bb      	sbcs	r3, r7
   19230:	ea18 0802 	ands.w	r8, r8, r2
   19234:	eb74 0408 	sbcs.w	r4, r4, r8
   19238:	ea19 0902 	ands.w	r9, r9, r2
   1923c:	eb75 0509 	sbcs.w	r5, r5, r9
   19240:	ea1a 0a02 	ands.w	sl, sl, r2
   19244:	eb76 060a 	sbcs.w	r6, r6, sl
   19248:	c078      	stmia	r0!, {r3, r4, r5, r6}
   1924a:	4180      	sbcs	r0, r0
   1924c:	4240      	negs	r0, r0
   1924e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19252:	4770      	bx	lr

00019254 <cswap64>:
   19254:	e890 0030 	ldmia.w	r0, {r4, r5}
   19258:	e891 00c0 	ldmia.w	r1, {r6, r7}
   1925c:	1ba3      	subs	r3, r4, r6
   1925e:	4013      	ands	r3, r2
   19260:	1ae4      	subs	r4, r4, r3
   19262:	18f6      	adds	r6, r6, r3
   19264:	1beb      	subs	r3, r5, r7
   19266:	4013      	ands	r3, r2
   19268:	1aed      	subs	r5, r5, r3
   1926a:	18ff      	adds	r7, r7, r3
   1926c:	c030      	stmia	r0!, {r4, r5}
   1926e:	c1c0      	stmia	r1!, {r6, r7}
   19270:	4770      	bx	lr

00019272 <ocrypto_bigint_cswap256>:
   19272:	b5f0      	push	{r4, r5, r6, r7, lr}
   19274:	4252      	negs	r2, r2
   19276:	f7ff ffed 	bl	19254 <cswap64>
   1927a:	f7ff ffeb 	bl	19254 <cswap64>
   1927e:	f7ff ffe9 	bl	19254 <cswap64>
   19282:	f7ff ffe7 	bl	19254 <cswap64>
   19286:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019288 <ocrypto_bigint_mul128>:
   19288:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   1928c:	c93a      	ldmia	r1, {r1, r3, r4, r5}
   1928e:	6816      	ldr	r6, [r2, #0]
   19290:	fba1 9a06 	umull	r9, sl, r1, r6
   19294:	f04f 0c00 	mov.w	ip, #0
   19298:	fbe3 ac06 	umlal	sl, ip, r3, r6
   1929c:	f04f 0700 	mov.w	r7, #0
   192a0:	fbe4 c706 	umlal	ip, r7, r4, r6
   192a4:	f04f 0800 	mov.w	r8, #0
   192a8:	fbe5 7806 	umlal	r7, r8, r5, r6
   192ac:	f840 9b04 	str.w	r9, [r0], #4
   192b0:	6856      	ldr	r6, [r2, #4]
   192b2:	f04f 0900 	mov.w	r9, #0
   192b6:	fbe1 a906 	umlal	sl, r9, r1, r6
   192ba:	eb1c 0c09 	adds.w	ip, ip, r9
   192be:	f04f 0900 	mov.w	r9, #0
   192c2:	eb49 0909 	adc.w	r9, r9, r9
   192c6:	fbe3 c906 	umlal	ip, r9, r3, r6
   192ca:	eb17 0709 	adds.w	r7, r7, r9
   192ce:	f04f 0900 	mov.w	r9, #0
   192d2:	eb49 0909 	adc.w	r9, r9, r9
   192d6:	fbe4 7906 	umlal	r7, r9, r4, r6
   192da:	eb18 0809 	adds.w	r8, r8, r9
   192de:	f04f 0900 	mov.w	r9, #0
   192e2:	eb49 0909 	adc.w	r9, r9, r9
   192e6:	fbe5 8906 	umlal	r8, r9, r5, r6
   192ea:	f840 ab04 	str.w	sl, [r0], #4
   192ee:	6896      	ldr	r6, [r2, #8]
   192f0:	f04f 0a00 	mov.w	sl, #0
   192f4:	fbe1 ca06 	umlal	ip, sl, r1, r6
   192f8:	eb17 070a 	adds.w	r7, r7, sl
   192fc:	f04f 0a00 	mov.w	sl, #0
   19300:	eb4a 0a0a 	adc.w	sl, sl, sl
   19304:	fbe3 7a06 	umlal	r7, sl, r3, r6
   19308:	eb18 080a 	adds.w	r8, r8, sl
   1930c:	f04f 0a00 	mov.w	sl, #0
   19310:	eb4a 0a0a 	adc.w	sl, sl, sl
   19314:	fbe4 8a06 	umlal	r8, sl, r4, r6
   19318:	eb19 090a 	adds.w	r9, r9, sl
   1931c:	f04f 0a00 	mov.w	sl, #0
   19320:	eb4a 0a0a 	adc.w	sl, sl, sl
   19324:	fbe5 9a06 	umlal	r9, sl, r5, r6
   19328:	f840 cb04 	str.w	ip, [r0], #4
   1932c:	68d6      	ldr	r6, [r2, #12]
   1932e:	f04f 0c00 	mov.w	ip, #0
   19332:	fbe1 7c06 	umlal	r7, ip, r1, r6
   19336:	eb18 080c 	adds.w	r8, r8, ip
   1933a:	f04f 0c00 	mov.w	ip, #0
   1933e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19342:	fbe3 8c06 	umlal	r8, ip, r3, r6
   19346:	eb19 090c 	adds.w	r9, r9, ip
   1934a:	f04f 0c00 	mov.w	ip, #0
   1934e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19352:	fbe4 9c06 	umlal	r9, ip, r4, r6
   19356:	eb1a 0a0c 	adds.w	sl, sl, ip
   1935a:	f04f 0c00 	mov.w	ip, #0
   1935e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19362:	fbe5 ac06 	umlal	sl, ip, r5, r6
   19366:	e880 1780 	stmia.w	r0, {r7, r8, r9, sl, ip}
   1936a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   1936e:	4770      	bx	lr

00019370 <ocrypto_bigint_sqr256>:
   19370:	460a      	mov	r2, r1

00019372 <ocrypto_bigint_mul256>:
   19372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19376:	ec41 0a14 	vmov	s8, s9, r0, r1
   1937a:	ec92 0a08 	vldmia	r2, {s0-s7}
   1937e:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   19380:	ee10 0a10 	vmov	r0, s0
   19384:	fba1 7800 	umull	r7, r8, r1, r0
   19388:	f04f 0900 	mov.w	r9, #0
   1938c:	fbe2 8900 	umlal	r8, r9, r2, r0
   19390:	f04f 0a00 	mov.w	sl, #0
   19394:	fbe3 9a00 	umlal	r9, sl, r3, r0
   19398:	f04f 0b00 	mov.w	fp, #0
   1939c:	fbe4 ab00 	umlal	sl, fp, r4, r0
   193a0:	ee12 0a10 	vmov	r0, s4
   193a4:	f04f 0c00 	mov.w	ip, #0
   193a8:	fbe1 bc00 	umlal	fp, ip, r1, r0
   193ac:	f04f 0e00 	mov.w	lr, #0
   193b0:	fbe2 ce00 	umlal	ip, lr, r2, r0
   193b4:	f04f 0500 	mov.w	r5, #0
   193b8:	fbe3 e500 	umlal	lr, r5, r3, r0
   193bc:	f04f 0600 	mov.w	r6, #0
   193c0:	fbe4 5600 	umlal	r5, r6, r4, r0
   193c4:	ee05 7a10 	vmov	s10, r7
   193c8:	ee10 0a90 	vmov	r0, s1
   193cc:	f04f 0700 	mov.w	r7, #0
   193d0:	fbe1 8700 	umlal	r8, r7, r1, r0
   193d4:	eb19 0907 	adds.w	r9, r9, r7
   193d8:	f04f 0700 	mov.w	r7, #0
   193dc:	eb47 0707 	adc.w	r7, r7, r7
   193e0:	fbe2 9700 	umlal	r9, r7, r2, r0
   193e4:	eb1a 0a07 	adds.w	sl, sl, r7
   193e8:	f04f 0700 	mov.w	r7, #0
   193ec:	eb47 0707 	adc.w	r7, r7, r7
   193f0:	fbe3 a700 	umlal	sl, r7, r3, r0
   193f4:	eb1b 0b07 	adds.w	fp, fp, r7
   193f8:	f04f 0700 	mov.w	r7, #0
   193fc:	eb47 0707 	adc.w	r7, r7, r7
   19400:	fbe4 b700 	umlal	fp, r7, r4, r0
   19404:	ee12 0a90 	vmov	r0, s5
   19408:	eb1c 0c07 	adds.w	ip, ip, r7
   1940c:	f04f 0700 	mov.w	r7, #0
   19410:	eb47 0707 	adc.w	r7, r7, r7
   19414:	fbe1 c700 	umlal	ip, r7, r1, r0
   19418:	eb1e 0e07 	adds.w	lr, lr, r7
   1941c:	f04f 0700 	mov.w	r7, #0
   19420:	eb47 0707 	adc.w	r7, r7, r7
   19424:	fbe2 e700 	umlal	lr, r7, r2, r0
   19428:	19ed      	adds	r5, r5, r7
   1942a:	f04f 0700 	mov.w	r7, #0
   1942e:	eb47 0707 	adc.w	r7, r7, r7
   19432:	fbe3 5700 	umlal	r5, r7, r3, r0
   19436:	19f6      	adds	r6, r6, r7
   19438:	f04f 0700 	mov.w	r7, #0
   1943c:	eb47 0707 	adc.w	r7, r7, r7
   19440:	fbe4 6700 	umlal	r6, r7, r4, r0
   19444:	ee05 8a90 	vmov	s11, r8
   19448:	ee11 0a10 	vmov	r0, s2
   1944c:	f04f 0800 	mov.w	r8, #0
   19450:	fbe1 9800 	umlal	r9, r8, r1, r0
   19454:	eb1a 0a08 	adds.w	sl, sl, r8
   19458:	f04f 0800 	mov.w	r8, #0
   1945c:	eb48 0808 	adc.w	r8, r8, r8
   19460:	fbe2 a800 	umlal	sl, r8, r2, r0
   19464:	eb1b 0b08 	adds.w	fp, fp, r8
   19468:	f04f 0800 	mov.w	r8, #0
   1946c:	eb48 0808 	adc.w	r8, r8, r8
   19470:	fbe3 b800 	umlal	fp, r8, r3, r0
   19474:	eb1c 0c08 	adds.w	ip, ip, r8
   19478:	f04f 0800 	mov.w	r8, #0
   1947c:	eb48 0808 	adc.w	r8, r8, r8
   19480:	fbe4 c800 	umlal	ip, r8, r4, r0
   19484:	ee13 0a10 	vmov	r0, s6
   19488:	eb1e 0e08 	adds.w	lr, lr, r8
   1948c:	f04f 0800 	mov.w	r8, #0
   19490:	eb48 0808 	adc.w	r8, r8, r8
   19494:	fbe1 e800 	umlal	lr, r8, r1, r0
   19498:	eb15 0508 	adds.w	r5, r5, r8
   1949c:	f04f 0800 	mov.w	r8, #0
   194a0:	eb48 0808 	adc.w	r8, r8, r8
   194a4:	fbe2 5800 	umlal	r5, r8, r2, r0
   194a8:	eb16 0608 	adds.w	r6, r6, r8
   194ac:	f04f 0800 	mov.w	r8, #0
   194b0:	eb48 0808 	adc.w	r8, r8, r8
   194b4:	fbe3 6800 	umlal	r6, r8, r3, r0
   194b8:	eb17 0708 	adds.w	r7, r7, r8
   194bc:	f04f 0800 	mov.w	r8, #0
   194c0:	eb48 0808 	adc.w	r8, r8, r8
   194c4:	fbe4 7800 	umlal	r7, r8, r4, r0
   194c8:	ee06 9a10 	vmov	s12, r9
   194cc:	ee11 0a90 	vmov	r0, s3
   194d0:	f04f 0900 	mov.w	r9, #0
   194d4:	fbe1 a900 	umlal	sl, r9, r1, r0
   194d8:	eb1b 0b09 	adds.w	fp, fp, r9
   194dc:	f04f 0900 	mov.w	r9, #0
   194e0:	eb49 0909 	adc.w	r9, r9, r9
   194e4:	fbe2 b900 	umlal	fp, r9, r2, r0
   194e8:	eb1c 0c09 	adds.w	ip, ip, r9
   194ec:	f04f 0900 	mov.w	r9, #0
   194f0:	eb49 0909 	adc.w	r9, r9, r9
   194f4:	fbe3 c900 	umlal	ip, r9, r3, r0
   194f8:	eb1e 0e09 	adds.w	lr, lr, r9
   194fc:	f04f 0900 	mov.w	r9, #0
   19500:	eb49 0909 	adc.w	r9, r9, r9
   19504:	fbe4 e900 	umlal	lr, r9, r4, r0
   19508:	ee13 0a90 	vmov	r0, s7
   1950c:	eb15 0509 	adds.w	r5, r5, r9
   19510:	f04f 0900 	mov.w	r9, #0
   19514:	eb49 0909 	adc.w	r9, r9, r9
   19518:	fbe1 5900 	umlal	r5, r9, r1, r0
   1951c:	eb16 0609 	adds.w	r6, r6, r9
   19520:	f04f 0900 	mov.w	r9, #0
   19524:	eb49 0909 	adc.w	r9, r9, r9
   19528:	fbe2 6900 	umlal	r6, r9, r2, r0
   1952c:	eb17 0709 	adds.w	r7, r7, r9
   19530:	f04f 0900 	mov.w	r9, #0
   19534:	eb49 0909 	adc.w	r9, r9, r9
   19538:	fbe3 7900 	umlal	r7, r9, r3, r0
   1953c:	eb18 0809 	adds.w	r8, r8, r9
   19540:	f04f 0900 	mov.w	r9, #0
   19544:	eb49 0909 	adc.w	r9, r9, r9
   19548:	fbe4 8900 	umlal	r8, r9, r4, r0
   1954c:	ee06 aa90 	vmov	s13, sl
   19550:	ee14 1a90 	vmov	r1, s9
   19554:	f101 0110 	add.w	r1, r1, #16
   19558:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   1955a:	ee10 0a10 	vmov	r0, s0
   1955e:	f04f 0a00 	mov.w	sl, #0
   19562:	fbe1 ba00 	umlal	fp, sl, r1, r0
   19566:	eb1c 0c0a 	adds.w	ip, ip, sl
   1956a:	f04f 0a00 	mov.w	sl, #0
   1956e:	eb4a 0a0a 	adc.w	sl, sl, sl
   19572:	fbe2 ca00 	umlal	ip, sl, r2, r0
   19576:	eb1e 0e0a 	adds.w	lr, lr, sl
   1957a:	f04f 0a00 	mov.w	sl, #0
   1957e:	eb4a 0a0a 	adc.w	sl, sl, sl
   19582:	fbe3 ea00 	umlal	lr, sl, r3, r0
   19586:	eb15 050a 	adds.w	r5, r5, sl
   1958a:	f04f 0a00 	mov.w	sl, #0
   1958e:	eb4a 0a0a 	adc.w	sl, sl, sl
   19592:	fbe4 5a00 	umlal	r5, sl, r4, r0
   19596:	ee12 0a10 	vmov	r0, s4
   1959a:	eb16 060a 	adds.w	r6, r6, sl
   1959e:	f04f 0a00 	mov.w	sl, #0
   195a2:	eb4a 0a0a 	adc.w	sl, sl, sl
   195a6:	fbe1 6a00 	umlal	r6, sl, r1, r0
   195aa:	eb17 070a 	adds.w	r7, r7, sl
   195ae:	f04f 0a00 	mov.w	sl, #0
   195b2:	eb4a 0a0a 	adc.w	sl, sl, sl
   195b6:	fbe2 7a00 	umlal	r7, sl, r2, r0
   195ba:	eb18 080a 	adds.w	r8, r8, sl
   195be:	f04f 0a00 	mov.w	sl, #0
   195c2:	eb4a 0a0a 	adc.w	sl, sl, sl
   195c6:	fbe3 8a00 	umlal	r8, sl, r3, r0
   195ca:	eb19 090a 	adds.w	r9, r9, sl
   195ce:	f04f 0a00 	mov.w	sl, #0
   195d2:	eb4a 0a0a 	adc.w	sl, sl, sl
   195d6:	fbe4 9a00 	umlal	r9, sl, r4, r0
   195da:	ee07 ba10 	vmov	s14, fp
   195de:	ee10 0a90 	vmov	r0, s1
   195e2:	f04f 0b00 	mov.w	fp, #0
   195e6:	fbe1 cb00 	umlal	ip, fp, r1, r0
   195ea:	eb1e 0e0b 	adds.w	lr, lr, fp
   195ee:	f04f 0b00 	mov.w	fp, #0
   195f2:	eb4b 0b0b 	adc.w	fp, fp, fp
   195f6:	fbe2 eb00 	umlal	lr, fp, r2, r0
   195fa:	eb15 050b 	adds.w	r5, r5, fp
   195fe:	f04f 0b00 	mov.w	fp, #0
   19602:	eb4b 0b0b 	adc.w	fp, fp, fp
   19606:	fbe3 5b00 	umlal	r5, fp, r3, r0
   1960a:	eb16 060b 	adds.w	r6, r6, fp
   1960e:	f04f 0b00 	mov.w	fp, #0
   19612:	eb4b 0b0b 	adc.w	fp, fp, fp
   19616:	fbe4 6b00 	umlal	r6, fp, r4, r0
   1961a:	ee12 0a90 	vmov	r0, s5
   1961e:	eb17 070b 	adds.w	r7, r7, fp
   19622:	f04f 0b00 	mov.w	fp, #0
   19626:	eb4b 0b0b 	adc.w	fp, fp, fp
   1962a:	fbe1 7b00 	umlal	r7, fp, r1, r0
   1962e:	eb18 080b 	adds.w	r8, r8, fp
   19632:	f04f 0b00 	mov.w	fp, #0
   19636:	eb4b 0b0b 	adc.w	fp, fp, fp
   1963a:	fbe2 8b00 	umlal	r8, fp, r2, r0
   1963e:	eb19 090b 	adds.w	r9, r9, fp
   19642:	f04f 0b00 	mov.w	fp, #0
   19646:	eb4b 0b0b 	adc.w	fp, fp, fp
   1964a:	fbe3 9b00 	umlal	r9, fp, r3, r0
   1964e:	eb1a 0a0b 	adds.w	sl, sl, fp
   19652:	f04f 0b00 	mov.w	fp, #0
   19656:	eb4b 0b0b 	adc.w	fp, fp, fp
   1965a:	fbe4 ab00 	umlal	sl, fp, r4, r0
   1965e:	ee07 ca90 	vmov	s15, ip
   19662:	ee11 0a10 	vmov	r0, s2
   19666:	f04f 0c00 	mov.w	ip, #0
   1966a:	fbe1 ec00 	umlal	lr, ip, r1, r0
   1966e:	eb15 050c 	adds.w	r5, r5, ip
   19672:	f04f 0c00 	mov.w	ip, #0
   19676:	eb4c 0c0c 	adc.w	ip, ip, ip
   1967a:	fbe2 5c00 	umlal	r5, ip, r2, r0
   1967e:	eb16 060c 	adds.w	r6, r6, ip
   19682:	f04f 0c00 	mov.w	ip, #0
   19686:	eb4c 0c0c 	adc.w	ip, ip, ip
   1968a:	fbe3 6c00 	umlal	r6, ip, r3, r0
   1968e:	eb17 070c 	adds.w	r7, r7, ip
   19692:	f04f 0c00 	mov.w	ip, #0
   19696:	eb4c 0c0c 	adc.w	ip, ip, ip
   1969a:	fbe4 7c00 	umlal	r7, ip, r4, r0
   1969e:	ee13 0a10 	vmov	r0, s6
   196a2:	eb18 080c 	adds.w	r8, r8, ip
   196a6:	f04f 0c00 	mov.w	ip, #0
   196aa:	eb4c 0c0c 	adc.w	ip, ip, ip
   196ae:	fbe1 8c00 	umlal	r8, ip, r1, r0
   196b2:	eb19 090c 	adds.w	r9, r9, ip
   196b6:	f04f 0c00 	mov.w	ip, #0
   196ba:	eb4c 0c0c 	adc.w	ip, ip, ip
   196be:	fbe2 9c00 	umlal	r9, ip, r2, r0
   196c2:	eb1a 0a0c 	adds.w	sl, sl, ip
   196c6:	f04f 0c00 	mov.w	ip, #0
   196ca:	eb4c 0c0c 	adc.w	ip, ip, ip
   196ce:	fbe3 ac00 	umlal	sl, ip, r3, r0
   196d2:	eb1b 0b0c 	adds.w	fp, fp, ip
   196d6:	f04f 0c00 	mov.w	ip, #0
   196da:	eb4c 0c0c 	adc.w	ip, ip, ip
   196de:	fbe4 bc00 	umlal	fp, ip, r4, r0
   196e2:	ee08 ea10 	vmov	s16, lr
   196e6:	ee11 0a90 	vmov	r0, s3
   196ea:	f04f 0e00 	mov.w	lr, #0
   196ee:	fbe1 5e00 	umlal	r5, lr, r1, r0
   196f2:	eb16 060e 	adds.w	r6, r6, lr
   196f6:	f04f 0e00 	mov.w	lr, #0
   196fa:	eb4e 0e0e 	adc.w	lr, lr, lr
   196fe:	fbe2 6e00 	umlal	r6, lr, r2, r0
   19702:	eb17 070e 	adds.w	r7, r7, lr
   19706:	f04f 0e00 	mov.w	lr, #0
   1970a:	eb4e 0e0e 	adc.w	lr, lr, lr
   1970e:	fbe3 7e00 	umlal	r7, lr, r3, r0
   19712:	eb18 080e 	adds.w	r8, r8, lr
   19716:	f04f 0e00 	mov.w	lr, #0
   1971a:	eb4e 0e0e 	adc.w	lr, lr, lr
   1971e:	fbe4 8e00 	umlal	r8, lr, r4, r0
   19722:	ee13 0a90 	vmov	r0, s7
   19726:	eb19 090e 	adds.w	r9, r9, lr
   1972a:	f04f 0e00 	mov.w	lr, #0
   1972e:	eb4e 0e0e 	adc.w	lr, lr, lr
   19732:	fbe1 9e00 	umlal	r9, lr, r1, r0
   19736:	eb1a 0a0e 	adds.w	sl, sl, lr
   1973a:	f04f 0e00 	mov.w	lr, #0
   1973e:	eb4e 0e0e 	adc.w	lr, lr, lr
   19742:	fbe2 ae00 	umlal	sl, lr, r2, r0
   19746:	eb1b 0b0e 	adds.w	fp, fp, lr
   1974a:	f04f 0e00 	mov.w	lr, #0
   1974e:	eb4e 0e0e 	adc.w	lr, lr, lr
   19752:	fbe3 be00 	umlal	fp, lr, r3, r0
   19756:	eb1c 0c0e 	adds.w	ip, ip, lr
   1975a:	f04f 0e00 	mov.w	lr, #0
   1975e:	eb4e 0e0e 	adc.w	lr, lr, lr
   19762:	fbe4 ce00 	umlal	ip, lr, r4, r0
   19766:	ee14 0a10 	vmov	r0, s8
   1976a:	eca0 5a07 	vstmia	r0!, {s10-s16}
   1976e:	e880 5fe0 	stmia.w	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
   19772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19776:	bf00      	nop

00019778 <ocrypto_constant_time_equal>:
   19778:	b430      	push	{r4, r5}
   1977a:	f04f 0300 	mov.w	r3, #0

0001977e <constant_time_equal_loop>:
   1977e:	f810 4b01 	ldrb.w	r4, [r0], #1
   19782:	f811 5b01 	ldrb.w	r5, [r1], #1
   19786:	3a01      	subs	r2, #1
   19788:	ea84 0405 	eor.w	r4, r4, r5
   1978c:	ea43 0304 	orr.w	r3, r3, r4
   19790:	d1f5      	bne.n	1977e <constant_time_equal_loop>
   19792:	f1a3 0301 	sub.w	r3, r3, #1
   19796:	ea4f 70d3 	mov.w	r0, r3, lsr #31
   1979a:	bc30      	pop	{r4, r5}
   1979c:	4770      	bx	lr

0001979e <ocrypto_constant_time_is_zero>:
   1979e:	f04f 0300 	mov.w	r3, #0

000197a2 <constant_time_is_zero_loop>:
   197a2:	f810 2b01 	ldrb.w	r2, [r0], #1
   197a6:	3901      	subs	r1, #1
   197a8:	ea43 0302 	orr.w	r3, r3, r2
   197ac:	d1f9      	bne.n	197a2 <constant_time_is_zero_loop>
   197ae:	f1a3 0301 	sub.w	r3, r3, #1
   197b2:	ea4f 70d3 	mov.w	r0, r3, lsr #31
   197b6:	4770      	bx	lr

000197b8 <ocrypto_constant_time_copy>:
   197b8:	f811 3b01 	ldrb.w	r3, [r1], #1
   197bc:	f800 3b01 	strb.w	r3, [r0], #1
   197c0:	3a01      	subs	r2, #1
   197c2:	d1f9      	bne.n	197b8 <ocrypto_constant_time_copy>
   197c4:	4770      	bx	lr

000197c6 <ocrypto_constant_time_fill_zero>:
   197c6:	2200      	movs	r2, #0

000197c8 <constant_time_fill_zero_loop>:
   197c8:	f800 2b01 	strb.w	r2, [r0], #1
   197cc:	3901      	subs	r1, #1
   197ce:	d1fb      	bne.n	197c8 <constant_time_fill_zero_loop>
   197d0:	4770      	bx	lr
   197d2:	bf00      	nop

000197d4 <ocrypto_mod_p256_add>:
   197d4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   197d8:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   197dc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   197e0:	185b      	adds	r3, r3, r1
   197e2:	eb54 040c 	adcs.w	r4, r4, ip
   197e6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   197ea:	414d      	adcs	r5, r1
   197ec:	eb56 060c 	adcs.w	r6, r6, ip
   197f0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   197f4:	414f      	adcs	r7, r1
   197f6:	eb58 080c 	adcs.w	r8, r8, ip
   197fa:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   197fe:	eb59 0901 	adcs.w	r9, r9, r1
   19802:	eb5a 0a0c 	adcs.w	sl, sl, ip
   19806:	4189      	sbcs	r1, r1
   19808:	f1b3 33ff 	subs.w	r3, r3, #4294967295
   1980c:	f174 34ff 	sbcs.w	r4, r4, #4294967295
   19810:	f175 35ff 	sbcs.w	r5, r5, #4294967295
   19814:	f176 0600 	sbcs.w	r6, r6, #0
   19818:	f177 0700 	sbcs.w	r7, r7, #0
   1981c:	f178 0800 	sbcs.w	r8, r8, #0
   19820:	f179 0901 	sbcs.w	r9, r9, #1
   19824:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
   19828:	f151 0100 	adcs.w	r1, r1, #0
   1982c:	424a      	negs	r2, r1
   1982e:	185b      	adds	r3, r3, r1
   19830:	414c      	adcs	r4, r1
   19832:	414d      	adcs	r5, r1
   19834:	f156 0600 	adcs.w	r6, r6, #0
   19838:	f157 0700 	adcs.w	r7, r7, #0
   1983c:	f158 0800 	adcs.w	r8, r8, #0
   19840:	eb59 0902 	adcs.w	r9, r9, r2
   19844:	eb5a 0a01 	adcs.w	sl, sl, r1
   19848:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   1984c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19850:	4770      	bx	lr

00019852 <ocrypto_mod_p256_sub>:
   19852:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19856:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   1985a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1985e:	1a5b      	subs	r3, r3, r1
   19860:	eb74 040c 	sbcs.w	r4, r4, ip
   19864:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19868:	418d      	sbcs	r5, r1
   1986a:	eb76 060c 	sbcs.w	r6, r6, ip
   1986e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19872:	418f      	sbcs	r7, r1
   19874:	eb78 080c 	sbcs.w	r8, r8, ip
   19878:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1987c:	eb79 0901 	sbcs.w	r9, r9, r1
   19880:	eb7a 0a0c 	sbcs.w	sl, sl, ip
   19884:	4189      	sbcs	r1, r1
   19886:	424a      	negs	r2, r1
   19888:	185b      	adds	r3, r3, r1
   1988a:	414c      	adcs	r4, r1
   1988c:	414d      	adcs	r5, r1
   1988e:	f156 0600 	adcs.w	r6, r6, #0
   19892:	f157 0700 	adcs.w	r7, r7, #0
   19896:	f158 0800 	adcs.w	r8, r8, #0
   1989a:	eb59 0902 	adcs.w	r9, r9, r2
   1989e:	eb5a 0a01 	adcs.w	sl, sl, r1
   198a2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   198a6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   198aa:	4770      	bx	lr

000198ac <ocrypto_mod_p256_square>:
   198ac:	460a      	mov	r2, r1

000198ae <ocrypto_mod_p256_mul>:
   198ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198b2:	ec41 0a14 	vmov	s8, s9, r0, r1
   198b6:	ec92 0a08 	vldmia	r2, {s0-s7}
   198ba:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   198bc:	ee10 0a10 	vmov	r0, s0
   198c0:	fba1 7800 	umull	r7, r8, r1, r0
   198c4:	f04f 0900 	mov.w	r9, #0
   198c8:	fbe2 8900 	umlal	r8, r9, r2, r0
   198cc:	f04f 0a00 	mov.w	sl, #0
   198d0:	fbe3 9a00 	umlal	r9, sl, r3, r0
   198d4:	f04f 0b00 	mov.w	fp, #0
   198d8:	fbe4 ab00 	umlal	sl, fp, r4, r0
   198dc:	ee12 0a10 	vmov	r0, s4
   198e0:	f04f 0c00 	mov.w	ip, #0
   198e4:	fbe1 bc00 	umlal	fp, ip, r1, r0
   198e8:	f04f 0e00 	mov.w	lr, #0
   198ec:	fbe2 ce00 	umlal	ip, lr, r2, r0
   198f0:	f04f 0500 	mov.w	r5, #0
   198f4:	fbe3 e500 	umlal	lr, r5, r3, r0
   198f8:	f04f 0600 	mov.w	r6, #0
   198fc:	fbe4 5600 	umlal	r5, r6, r4, r0
   19900:	ee05 7a10 	vmov	s10, r7
   19904:	ee10 0a90 	vmov	r0, s1
   19908:	f04f 0700 	mov.w	r7, #0
   1990c:	fbe1 8700 	umlal	r8, r7, r1, r0
   19910:	eb19 0907 	adds.w	r9, r9, r7
   19914:	f04f 0700 	mov.w	r7, #0
   19918:	eb47 0707 	adc.w	r7, r7, r7
   1991c:	fbe2 9700 	umlal	r9, r7, r2, r0
   19920:	eb1a 0a07 	adds.w	sl, sl, r7
   19924:	f04f 0700 	mov.w	r7, #0
   19928:	eb47 0707 	adc.w	r7, r7, r7
   1992c:	fbe3 a700 	umlal	sl, r7, r3, r0
   19930:	eb1b 0b07 	adds.w	fp, fp, r7
   19934:	f04f 0700 	mov.w	r7, #0
   19938:	eb47 0707 	adc.w	r7, r7, r7
   1993c:	fbe4 b700 	umlal	fp, r7, r4, r0
   19940:	ee12 0a90 	vmov	r0, s5
   19944:	eb1c 0c07 	adds.w	ip, ip, r7
   19948:	f04f 0700 	mov.w	r7, #0
   1994c:	eb47 0707 	adc.w	r7, r7, r7
   19950:	fbe1 c700 	umlal	ip, r7, r1, r0
   19954:	eb1e 0e07 	adds.w	lr, lr, r7
   19958:	f04f 0700 	mov.w	r7, #0
   1995c:	eb47 0707 	adc.w	r7, r7, r7
   19960:	fbe2 e700 	umlal	lr, r7, r2, r0
   19964:	19ed      	adds	r5, r5, r7
   19966:	f04f 0700 	mov.w	r7, #0
   1996a:	eb47 0707 	adc.w	r7, r7, r7
   1996e:	fbe3 5700 	umlal	r5, r7, r3, r0
   19972:	19f6      	adds	r6, r6, r7
   19974:	f04f 0700 	mov.w	r7, #0
   19978:	eb47 0707 	adc.w	r7, r7, r7
   1997c:	fbe4 6700 	umlal	r6, r7, r4, r0
   19980:	ee05 8a90 	vmov	s11, r8
   19984:	ee11 0a10 	vmov	r0, s2
   19988:	f04f 0800 	mov.w	r8, #0
   1998c:	fbe1 9800 	umlal	r9, r8, r1, r0
   19990:	eb1a 0a08 	adds.w	sl, sl, r8
   19994:	f04f 0800 	mov.w	r8, #0
   19998:	eb48 0808 	adc.w	r8, r8, r8
   1999c:	fbe2 a800 	umlal	sl, r8, r2, r0
   199a0:	eb1b 0b08 	adds.w	fp, fp, r8
   199a4:	f04f 0800 	mov.w	r8, #0
   199a8:	eb48 0808 	adc.w	r8, r8, r8
   199ac:	fbe3 b800 	umlal	fp, r8, r3, r0
   199b0:	eb1c 0c08 	adds.w	ip, ip, r8
   199b4:	f04f 0800 	mov.w	r8, #0
   199b8:	eb48 0808 	adc.w	r8, r8, r8
   199bc:	fbe4 c800 	umlal	ip, r8, r4, r0
   199c0:	ee13 0a10 	vmov	r0, s6
   199c4:	eb1e 0e08 	adds.w	lr, lr, r8
   199c8:	f04f 0800 	mov.w	r8, #0
   199cc:	eb48 0808 	adc.w	r8, r8, r8
   199d0:	fbe1 e800 	umlal	lr, r8, r1, r0
   199d4:	eb15 0508 	adds.w	r5, r5, r8
   199d8:	f04f 0800 	mov.w	r8, #0
   199dc:	eb48 0808 	adc.w	r8, r8, r8
   199e0:	fbe2 5800 	umlal	r5, r8, r2, r0
   199e4:	eb16 0608 	adds.w	r6, r6, r8
   199e8:	f04f 0800 	mov.w	r8, #0
   199ec:	eb48 0808 	adc.w	r8, r8, r8
   199f0:	fbe3 6800 	umlal	r6, r8, r3, r0
   199f4:	eb17 0708 	adds.w	r7, r7, r8
   199f8:	f04f 0800 	mov.w	r8, #0
   199fc:	eb48 0808 	adc.w	r8, r8, r8
   19a00:	fbe4 7800 	umlal	r7, r8, r4, r0
   19a04:	ee06 9a10 	vmov	s12, r9
   19a08:	ee11 0a90 	vmov	r0, s3
   19a0c:	f04f 0900 	mov.w	r9, #0
   19a10:	fbe1 a900 	umlal	sl, r9, r1, r0
   19a14:	eb1b 0b09 	adds.w	fp, fp, r9
   19a18:	f04f 0900 	mov.w	r9, #0
   19a1c:	eb49 0909 	adc.w	r9, r9, r9
   19a20:	fbe2 b900 	umlal	fp, r9, r2, r0
   19a24:	eb1c 0c09 	adds.w	ip, ip, r9
   19a28:	f04f 0900 	mov.w	r9, #0
   19a2c:	eb49 0909 	adc.w	r9, r9, r9
   19a30:	fbe3 c900 	umlal	ip, r9, r3, r0
   19a34:	eb1e 0e09 	adds.w	lr, lr, r9
   19a38:	f04f 0900 	mov.w	r9, #0
   19a3c:	eb49 0909 	adc.w	r9, r9, r9
   19a40:	fbe4 e900 	umlal	lr, r9, r4, r0
   19a44:	ee13 0a90 	vmov	r0, s7
   19a48:	eb15 0509 	adds.w	r5, r5, r9
   19a4c:	f04f 0900 	mov.w	r9, #0
   19a50:	eb49 0909 	adc.w	r9, r9, r9
   19a54:	fbe1 5900 	umlal	r5, r9, r1, r0
   19a58:	eb16 0609 	adds.w	r6, r6, r9
   19a5c:	f04f 0900 	mov.w	r9, #0
   19a60:	eb49 0909 	adc.w	r9, r9, r9
   19a64:	fbe2 6900 	umlal	r6, r9, r2, r0
   19a68:	eb17 0709 	adds.w	r7, r7, r9
   19a6c:	f04f 0900 	mov.w	r9, #0
   19a70:	eb49 0909 	adc.w	r9, r9, r9
   19a74:	fbe3 7900 	umlal	r7, r9, r3, r0
   19a78:	eb18 0809 	adds.w	r8, r8, r9
   19a7c:	f04f 0900 	mov.w	r9, #0
   19a80:	eb49 0909 	adc.w	r9, r9, r9
   19a84:	fbe4 8900 	umlal	r8, r9, r4, r0
   19a88:	ee06 aa90 	vmov	s13, sl
   19a8c:	ee14 1a90 	vmov	r1, s9
   19a90:	f101 0110 	add.w	r1, r1, #16
   19a94:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   19a96:	ee10 0a10 	vmov	r0, s0
   19a9a:	f04f 0a00 	mov.w	sl, #0
   19a9e:	fbe1 ba00 	umlal	fp, sl, r1, r0
   19aa2:	eb1c 0c0a 	adds.w	ip, ip, sl
   19aa6:	f04f 0a00 	mov.w	sl, #0
   19aaa:	eb4a 0a0a 	adc.w	sl, sl, sl
   19aae:	fbe2 ca00 	umlal	ip, sl, r2, r0
   19ab2:	eb1e 0e0a 	adds.w	lr, lr, sl
   19ab6:	f04f 0a00 	mov.w	sl, #0
   19aba:	eb4a 0a0a 	adc.w	sl, sl, sl
   19abe:	fbe3 ea00 	umlal	lr, sl, r3, r0
   19ac2:	eb15 050a 	adds.w	r5, r5, sl
   19ac6:	f04f 0a00 	mov.w	sl, #0
   19aca:	eb4a 0a0a 	adc.w	sl, sl, sl
   19ace:	fbe4 5a00 	umlal	r5, sl, r4, r0
   19ad2:	ee12 0a10 	vmov	r0, s4
   19ad6:	eb16 060a 	adds.w	r6, r6, sl
   19ada:	f04f 0a00 	mov.w	sl, #0
   19ade:	eb4a 0a0a 	adc.w	sl, sl, sl
   19ae2:	fbe1 6a00 	umlal	r6, sl, r1, r0
   19ae6:	eb17 070a 	adds.w	r7, r7, sl
   19aea:	f04f 0a00 	mov.w	sl, #0
   19aee:	eb4a 0a0a 	adc.w	sl, sl, sl
   19af2:	fbe2 7a00 	umlal	r7, sl, r2, r0
   19af6:	eb18 080a 	adds.w	r8, r8, sl
   19afa:	f04f 0a00 	mov.w	sl, #0
   19afe:	eb4a 0a0a 	adc.w	sl, sl, sl
   19b02:	fbe3 8a00 	umlal	r8, sl, r3, r0
   19b06:	eb19 090a 	adds.w	r9, r9, sl
   19b0a:	f04f 0a00 	mov.w	sl, #0
   19b0e:	eb4a 0a0a 	adc.w	sl, sl, sl
   19b12:	fbe4 9a00 	umlal	r9, sl, r4, r0
   19b16:	ee07 ba10 	vmov	s14, fp
   19b1a:	ee10 0a90 	vmov	r0, s1
   19b1e:	f04f 0b00 	mov.w	fp, #0
   19b22:	fbe1 cb00 	umlal	ip, fp, r1, r0
   19b26:	eb1e 0e0b 	adds.w	lr, lr, fp
   19b2a:	f04f 0b00 	mov.w	fp, #0
   19b2e:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b32:	fbe2 eb00 	umlal	lr, fp, r2, r0
   19b36:	eb15 050b 	adds.w	r5, r5, fp
   19b3a:	f04f 0b00 	mov.w	fp, #0
   19b3e:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b42:	fbe3 5b00 	umlal	r5, fp, r3, r0
   19b46:	eb16 060b 	adds.w	r6, r6, fp
   19b4a:	f04f 0b00 	mov.w	fp, #0
   19b4e:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b52:	fbe4 6b00 	umlal	r6, fp, r4, r0
   19b56:	ee12 0a90 	vmov	r0, s5
   19b5a:	eb17 070b 	adds.w	r7, r7, fp
   19b5e:	f04f 0b00 	mov.w	fp, #0
   19b62:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b66:	fbe1 7b00 	umlal	r7, fp, r1, r0
   19b6a:	eb18 080b 	adds.w	r8, r8, fp
   19b6e:	f04f 0b00 	mov.w	fp, #0
   19b72:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b76:	fbe2 8b00 	umlal	r8, fp, r2, r0
   19b7a:	eb19 090b 	adds.w	r9, r9, fp
   19b7e:	f04f 0b00 	mov.w	fp, #0
   19b82:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b86:	fbe3 9b00 	umlal	r9, fp, r3, r0
   19b8a:	eb1a 0a0b 	adds.w	sl, sl, fp
   19b8e:	f04f 0b00 	mov.w	fp, #0
   19b92:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b96:	fbe4 ab00 	umlal	sl, fp, r4, r0
   19b9a:	ee07 ca90 	vmov	s15, ip
   19b9e:	ee11 0a10 	vmov	r0, s2
   19ba2:	f04f 0c00 	mov.w	ip, #0
   19ba6:	fbe1 ec00 	umlal	lr, ip, r1, r0
   19baa:	eb15 050c 	adds.w	r5, r5, ip
   19bae:	f04f 0c00 	mov.w	ip, #0
   19bb2:	eb4c 0c0c 	adc.w	ip, ip, ip
   19bb6:	fbe2 5c00 	umlal	r5, ip, r2, r0
   19bba:	eb16 060c 	adds.w	r6, r6, ip
   19bbe:	f04f 0c00 	mov.w	ip, #0
   19bc2:	eb4c 0c0c 	adc.w	ip, ip, ip
   19bc6:	fbe3 6c00 	umlal	r6, ip, r3, r0
   19bca:	eb17 070c 	adds.w	r7, r7, ip
   19bce:	f04f 0c00 	mov.w	ip, #0
   19bd2:	eb4c 0c0c 	adc.w	ip, ip, ip
   19bd6:	fbe4 7c00 	umlal	r7, ip, r4, r0
   19bda:	ee13 0a10 	vmov	r0, s6
   19bde:	eb18 080c 	adds.w	r8, r8, ip
   19be2:	f04f 0c00 	mov.w	ip, #0
   19be6:	eb4c 0c0c 	adc.w	ip, ip, ip
   19bea:	fbe1 8c00 	umlal	r8, ip, r1, r0
   19bee:	eb19 090c 	adds.w	r9, r9, ip
   19bf2:	f04f 0c00 	mov.w	ip, #0
   19bf6:	eb4c 0c0c 	adc.w	ip, ip, ip
   19bfa:	fbe2 9c00 	umlal	r9, ip, r2, r0
   19bfe:	eb1a 0a0c 	adds.w	sl, sl, ip
   19c02:	f04f 0c00 	mov.w	ip, #0
   19c06:	eb4c 0c0c 	adc.w	ip, ip, ip
   19c0a:	fbe3 ac00 	umlal	sl, ip, r3, r0
   19c0e:	eb1b 0b0c 	adds.w	fp, fp, ip
   19c12:	f04f 0c00 	mov.w	ip, #0
   19c16:	eb4c 0c0c 	adc.w	ip, ip, ip
   19c1a:	fbe4 bc00 	umlal	fp, ip, r4, r0
   19c1e:	ee08 ea10 	vmov	s16, lr
   19c22:	ee11 0a90 	vmov	r0, s3
   19c26:	f04f 0e00 	mov.w	lr, #0
   19c2a:	fbe1 5e00 	umlal	r5, lr, r1, r0
   19c2e:	eb16 060e 	adds.w	r6, r6, lr
   19c32:	f04f 0e00 	mov.w	lr, #0
   19c36:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c3a:	fbe2 6e00 	umlal	r6, lr, r2, r0
   19c3e:	eb17 070e 	adds.w	r7, r7, lr
   19c42:	f04f 0e00 	mov.w	lr, #0
   19c46:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c4a:	fbe3 7e00 	umlal	r7, lr, r3, r0
   19c4e:	eb18 080e 	adds.w	r8, r8, lr
   19c52:	f04f 0e00 	mov.w	lr, #0
   19c56:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c5a:	fbe4 8e00 	umlal	r8, lr, r4, r0
   19c5e:	ee13 0a90 	vmov	r0, s7
   19c62:	eb19 090e 	adds.w	r9, r9, lr
   19c66:	f04f 0e00 	mov.w	lr, #0
   19c6a:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c6e:	fbe1 9e00 	umlal	r9, lr, r1, r0
   19c72:	eb1a 0a0e 	adds.w	sl, sl, lr
   19c76:	f04f 0e00 	mov.w	lr, #0
   19c7a:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c7e:	fbe2 ae00 	umlal	sl, lr, r2, r0
   19c82:	eb1b 0b0e 	adds.w	fp, fp, lr
   19c86:	f04f 0e00 	mov.w	lr, #0
   19c8a:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c8e:	fbe3 be00 	umlal	fp, lr, r3, r0
   19c92:	eb1c 0c0e 	adds.w	ip, ip, lr
   19c96:	f04f 0e00 	mov.w	lr, #0
   19c9a:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c9e:	fbe4 ce00 	umlal	ip, lr, r4, r0
   19ca2:	ec53 2a17 	vmov	r2, r3, s14, s15
   19ca6:	ee18 4a10 	vmov	r4, s16
   19caa:	eb12 020a 	adds.w	r2, r2, sl
   19cae:	eb53 030b 	adcs.w	r3, r3, fp
   19cb2:	eb54 040c 	adcs.w	r4, r4, ip
   19cb6:	eb55 050e 	adcs.w	r5, r5, lr
   19cba:	2000      	movs	r0, #0
   19cbc:	f140 0000 	adc.w	r0, r0, #0
   19cc0:	eb12 020b 	adds.w	r2, r2, fp
   19cc4:	eb53 030c 	adcs.w	r3, r3, ip
   19cc8:	eb54 040e 	adcs.w	r4, r4, lr
   19ccc:	eb55 050e 	adcs.w	r5, r5, lr
   19cd0:	4146      	adcs	r6, r0
   19cd2:	2000      	movs	r0, #0
   19cd4:	4147      	adcs	r7, r0
   19cd6:	eb58 0800 	adcs.w	r8, r8, r0
   19cda:	eb59 090a 	adcs.w	r9, r9, sl
   19cde:	f140 0000 	adc.w	r0, r0, #0
   19ce2:	ebb2 020e 	subs.w	r2, r2, lr
   19ce6:	f173 0300 	sbcs.w	r3, r3, #0
   19cea:	f174 0400 	sbcs.w	r4, r4, #0
   19cee:	eb75 050a 	sbcs.w	r5, r5, sl
   19cf2:	eb76 060b 	sbcs.w	r6, r6, fp
   19cf6:	eb77 070c 	sbcs.w	r7, r7, ip
   19cfa:	eb78 080a 	sbcs.w	r8, r8, sl
   19cfe:	eb79 090c 	sbcs.w	r9, r9, ip
   19d02:	f160 0000 	sbc.w	r0, r0, #0
   19d06:	ebb5 050b 	subs.w	r5, r5, fp
   19d0a:	eb76 060c 	sbcs.w	r6, r6, ip
   19d0e:	eb77 070e 	sbcs.w	r7, r7, lr
   19d12:	eb78 080b 	sbcs.w	r8, r8, fp
   19d16:	eb79 090e 	sbcs.w	r9, r9, lr
   19d1a:	f160 0000 	sbc.w	r0, r0, #0
   19d1e:	ea5f 7ce0 	movs.w	ip, r0, asr #31
   19d22:	ea7f 0c0c 	mvns.w	ip, ip
   19d26:	f1dc 0e00 	rsbs	lr, ip, #0
   19d2a:	ebb2 020c 	subs.w	r2, r2, ip
   19d2e:	eb73 030c 	sbcs.w	r3, r3, ip
   19d32:	eb74 040c 	sbcs.w	r4, r4, ip
   19d36:	f175 0500 	sbcs.w	r5, r5, #0
   19d3a:	f176 0600 	sbcs.w	r6, r6, #0
   19d3e:	f177 0700 	sbcs.w	r7, r7, #0
   19d42:	eb78 080e 	sbcs.w	r8, r8, lr
   19d46:	eb79 090c 	sbcs.w	r9, r9, ip
   19d4a:	f160 0000 	sbc.w	r0, r0, #0
   19d4e:	ea5f 7ce0 	movs.w	ip, r0, asr #31
   19d52:	f1dc 0e00 	rsbs	lr, ip, #0
   19d56:	eb12 020c 	adds.w	r2, r2, ip
   19d5a:	eb53 030c 	adcs.w	r3, r3, ip
   19d5e:	eb54 040c 	adcs.w	r4, r4, ip
   19d62:	f155 0500 	adcs.w	r5, r5, #0
   19d66:	f156 0600 	adcs.w	r6, r6, #0
   19d6a:	f157 0700 	adcs.w	r7, r7, #0
   19d6e:	eb58 080e 	adcs.w	r8, r8, lr
   19d72:	eb59 090c 	adcs.w	r9, r9, ip
   19d76:	f140 0000 	adc.w	r0, r0, #0
   19d7a:	ea5f 7ce0 	movs.w	ip, r0, asr #31
   19d7e:	f1dc 0e00 	rsbs	lr, ip, #0
   19d82:	eb12 020c 	adds.w	r2, r2, ip
   19d86:	eb53 030c 	adcs.w	r3, r3, ip
   19d8a:	eb54 040c 	adcs.w	r4, r4, ip
   19d8e:	f155 0500 	adcs.w	r5, r5, #0
   19d92:	f156 0600 	adcs.w	r6, r6, #0
   19d96:	f157 0700 	adcs.w	r7, r7, #0
   19d9a:	eb58 080e 	adcs.w	r8, r8, lr
   19d9e:	eb59 090c 	adcs.w	r9, r9, ip
   19da2:	ec5b aa15 	vmov	sl, fp, s10, s11
   19da6:	ec51 0a16 	vmov	r0, r1, s12, s13
   19daa:	eb1a 0a06 	adds.w	sl, sl, r6
   19dae:	eb5b 0b07 	adcs.w	fp, fp, r7
   19db2:	eb50 0008 	adcs.w	r0, r0, r8
   19db6:	eb51 0109 	adcs.w	r1, r1, r9
   19dba:	f05f 0c00 	movs.w	ip, #0
   19dbe:	f14c 0c00 	adc.w	ip, ip, #0
   19dc2:	eb1a 0a07 	adds.w	sl, sl, r7
   19dc6:	eb5b 0b08 	adcs.w	fp, fp, r8
   19dca:	eb50 0009 	adcs.w	r0, r0, r9
   19dce:	eb51 0109 	adcs.w	r1, r1, r9
   19dd2:	eb52 020c 	adcs.w	r2, r2, ip
   19dd6:	f05f 0c00 	movs.w	ip, #0
   19dda:	eb53 030c 	adcs.w	r3, r3, ip
   19dde:	eb54 040c 	adcs.w	r4, r4, ip
   19de2:	4175      	adcs	r5, r6
   19de4:	f14c 0c00 	adc.w	ip, ip, #0
   19de8:	ebba 0a09 	subs.w	sl, sl, r9
   19dec:	f17b 0b00 	sbcs.w	fp, fp, #0
   19df0:	f170 0000 	sbcs.w	r0, r0, #0
   19df4:	41b1      	sbcs	r1, r6
   19df6:	41ba      	sbcs	r2, r7
   19df8:	eb73 0308 	sbcs.w	r3, r3, r8
   19dfc:	41b4      	sbcs	r4, r6
   19dfe:	eb75 0508 	sbcs.w	r5, r5, r8
   19e02:	f16c 0c00 	sbc.w	ip, ip, #0
   19e06:	1bc9      	subs	r1, r1, r7
   19e08:	eb72 0208 	sbcs.w	r2, r2, r8
   19e0c:	eb73 0309 	sbcs.w	r3, r3, r9
   19e10:	41bc      	sbcs	r4, r7
   19e12:	eb75 0509 	sbcs.w	r5, r5, r9
   19e16:	f16c 0c00 	sbc.w	ip, ip, #0
   19e1a:	ea5f 78ec 	movs.w	r8, ip, asr #31
   19e1e:	ea7f 0808 	mvns.w	r8, r8
   19e22:	f1d8 0900 	rsbs	r9, r8, #0
   19e26:	ebba 0a08 	subs.w	sl, sl, r8
   19e2a:	eb7b 0b08 	sbcs.w	fp, fp, r8
   19e2e:	eb70 0008 	sbcs.w	r0, r0, r8
   19e32:	f171 0100 	sbcs.w	r1, r1, #0
   19e36:	f172 0200 	sbcs.w	r2, r2, #0
   19e3a:	f173 0300 	sbcs.w	r3, r3, #0
   19e3e:	eb74 0409 	sbcs.w	r4, r4, r9
   19e42:	eb75 0508 	sbcs.w	r5, r5, r8
   19e46:	f16c 0c00 	sbc.w	ip, ip, #0
   19e4a:	ea5f 78ec 	movs.w	r8, ip, asr #31
   19e4e:	f1d8 0900 	rsbs	r9, r8, #0
   19e52:	eb1a 0a08 	adds.w	sl, sl, r8
   19e56:	eb5b 0b08 	adcs.w	fp, fp, r8
   19e5a:	eb50 0008 	adcs.w	r0, r0, r8
   19e5e:	f151 0100 	adcs.w	r1, r1, #0
   19e62:	f152 0200 	adcs.w	r2, r2, #0
   19e66:	f153 0300 	adcs.w	r3, r3, #0
   19e6a:	eb54 0409 	adcs.w	r4, r4, r9
   19e6e:	eb55 0508 	adcs.w	r5, r5, r8
   19e72:	f14c 0c00 	adc.w	ip, ip, #0
   19e76:	ea5f 78ec 	movs.w	r8, ip, asr #31
   19e7a:	f1d8 0900 	rsbs	r9, r8, #0
   19e7e:	eb1a 0a08 	adds.w	sl, sl, r8
   19e82:	eb5b 0b08 	adcs.w	fp, fp, r8
   19e86:	eb50 0008 	adcs.w	r0, r0, r8
   19e8a:	f151 0100 	adcs.w	r1, r1, #0
   19e8e:	f152 0200 	adcs.w	r2, r2, #0
   19e92:	f153 0300 	adcs.w	r3, r3, #0
   19e96:	eb54 0409 	adcs.w	r4, r4, r9
   19e9a:	eb55 0508 	adcs.w	r5, r5, r8
   19e9e:	ee14 7a10 	vmov	r7, s8
   19ea2:	e8a7 0c00 	stmia.w	r7!, {sl, fp}
   19ea6:	e887 003f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5}
   19eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19eae:	bf00      	nop

00019eb0 <memcpy>:
   19eb0:	4684      	mov	ip, r0
   19eb2:	ea41 0300 	orr.w	r3, r1, r0
   19eb6:	f013 0303 	ands.w	r3, r3, #3
   19eba:	d149      	bne.n	19f50 <memcpy+0xa0>
   19ebc:	3a40      	subs	r2, #64	; 0x40
   19ebe:	d323      	bcc.n	19f08 <memcpy+0x58>
   19ec0:	680b      	ldr	r3, [r1, #0]
   19ec2:	6003      	str	r3, [r0, #0]
   19ec4:	684b      	ldr	r3, [r1, #4]
   19ec6:	6043      	str	r3, [r0, #4]
   19ec8:	688b      	ldr	r3, [r1, #8]
   19eca:	6083      	str	r3, [r0, #8]
   19ecc:	68cb      	ldr	r3, [r1, #12]
   19ece:	60c3      	str	r3, [r0, #12]
   19ed0:	690b      	ldr	r3, [r1, #16]
   19ed2:	6103      	str	r3, [r0, #16]
   19ed4:	694b      	ldr	r3, [r1, #20]
   19ed6:	6143      	str	r3, [r0, #20]
   19ed8:	698b      	ldr	r3, [r1, #24]
   19eda:	6183      	str	r3, [r0, #24]
   19edc:	69cb      	ldr	r3, [r1, #28]
   19ede:	61c3      	str	r3, [r0, #28]
   19ee0:	6a0b      	ldr	r3, [r1, #32]
   19ee2:	6203      	str	r3, [r0, #32]
   19ee4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   19ee6:	6243      	str	r3, [r0, #36]	; 0x24
   19ee8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   19eea:	6283      	str	r3, [r0, #40]	; 0x28
   19eec:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   19eee:	62c3      	str	r3, [r0, #44]	; 0x2c
   19ef0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   19ef2:	6303      	str	r3, [r0, #48]	; 0x30
   19ef4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   19ef6:	6343      	str	r3, [r0, #52]	; 0x34
   19ef8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   19efa:	6383      	str	r3, [r0, #56]	; 0x38
   19efc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   19efe:	63c3      	str	r3, [r0, #60]	; 0x3c
   19f00:	3040      	adds	r0, #64	; 0x40
   19f02:	3140      	adds	r1, #64	; 0x40
   19f04:	3a40      	subs	r2, #64	; 0x40
   19f06:	d2db      	bcs.n	19ec0 <memcpy+0x10>
   19f08:	3230      	adds	r2, #48	; 0x30
   19f0a:	d30b      	bcc.n	19f24 <memcpy+0x74>
   19f0c:	680b      	ldr	r3, [r1, #0]
   19f0e:	6003      	str	r3, [r0, #0]
   19f10:	684b      	ldr	r3, [r1, #4]
   19f12:	6043      	str	r3, [r0, #4]
   19f14:	688b      	ldr	r3, [r1, #8]
   19f16:	6083      	str	r3, [r0, #8]
   19f18:	68cb      	ldr	r3, [r1, #12]
   19f1a:	60c3      	str	r3, [r0, #12]
   19f1c:	3010      	adds	r0, #16
   19f1e:	3110      	adds	r1, #16
   19f20:	3a10      	subs	r2, #16
   19f22:	d2f3      	bcs.n	19f0c <memcpy+0x5c>
   19f24:	320c      	adds	r2, #12
   19f26:	d305      	bcc.n	19f34 <memcpy+0x84>
   19f28:	f851 3b04 	ldr.w	r3, [r1], #4
   19f2c:	f840 3b04 	str.w	r3, [r0], #4
   19f30:	3a04      	subs	r2, #4
   19f32:	d2f9      	bcs.n	19f28 <memcpy+0x78>
   19f34:	3204      	adds	r2, #4
   19f36:	d008      	beq.n	19f4a <memcpy+0x9a>
   19f38:	07d2      	lsls	r2, r2, #31
   19f3a:	bf1c      	itt	ne
   19f3c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   19f40:	f800 3b01 	strbne.w	r3, [r0], #1
   19f44:	d301      	bcc.n	19f4a <memcpy+0x9a>
   19f46:	880b      	ldrh	r3, [r1, #0]
   19f48:	8003      	strh	r3, [r0, #0]
   19f4a:	4660      	mov	r0, ip
   19f4c:	4770      	bx	lr
   19f4e:	bf00      	nop
   19f50:	2a08      	cmp	r2, #8
   19f52:	d313      	bcc.n	19f7c <memcpy+0xcc>
   19f54:	078b      	lsls	r3, r1, #30
   19f56:	d0b1      	beq.n	19ebc <memcpy+0xc>
   19f58:	f010 0303 	ands.w	r3, r0, #3
   19f5c:	d0ae      	beq.n	19ebc <memcpy+0xc>
   19f5e:	f1c3 0304 	rsb	r3, r3, #4
   19f62:	1ad2      	subs	r2, r2, r3
   19f64:	07db      	lsls	r3, r3, #31
   19f66:	bf1c      	itt	ne
   19f68:	f811 3b01 	ldrbne.w	r3, [r1], #1
   19f6c:	f800 3b01 	strbne.w	r3, [r0], #1
   19f70:	d3a4      	bcc.n	19ebc <memcpy+0xc>
   19f72:	f831 3b02 	ldrh.w	r3, [r1], #2
   19f76:	f820 3b02 	strh.w	r3, [r0], #2
   19f7a:	e79f      	b.n	19ebc <memcpy+0xc>
   19f7c:	3a04      	subs	r2, #4
   19f7e:	d3d9      	bcc.n	19f34 <memcpy+0x84>
   19f80:	3a01      	subs	r2, #1
   19f82:	f811 3b01 	ldrb.w	r3, [r1], #1
   19f86:	f800 3b01 	strb.w	r3, [r0], #1
   19f8a:	d2f9      	bcs.n	19f80 <memcpy+0xd0>
   19f8c:	780b      	ldrb	r3, [r1, #0]
   19f8e:	7003      	strb	r3, [r0, #0]
   19f90:	784b      	ldrb	r3, [r1, #1]
   19f92:	7043      	strb	r3, [r0, #1]
   19f94:	788b      	ldrb	r3, [r1, #2]
   19f96:	7083      	strb	r3, [r0, #2]
   19f98:	4660      	mov	r0, ip
   19f9a:	4770      	bx	lr

00019f9c <strcmp>:
   19f9c:	ea80 0c01 	eor.w	ip, r0, r1
   19fa0:	f01c 0f03 	tst.w	ip, #3
   19fa4:	d137      	bne.n	1a016 <strcmp+0x7a>
   19fa6:	f010 0c03 	ands.w	ip, r0, #3
   19faa:	f020 0003 	bic.w	r0, r0, #3
   19fae:	f021 0103 	bic.w	r1, r1, #3
   19fb2:	f850 2b04 	ldr.w	r2, [r0], #4
   19fb6:	bf08      	it	eq
   19fb8:	f851 3b04 	ldreq.w	r3, [r1], #4
   19fbc:	d00e      	beq.n	19fdc <strcmp+0x40>
   19fbe:	f08c 0c03 	eor.w	ip, ip, #3
   19fc2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   19fc6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   19fca:	fa23 fc0c 	lsr.w	ip, r3, ip
   19fce:	f851 3b04 	ldr.w	r3, [r1], #4
   19fd2:	ea42 020c 	orr.w	r2, r2, ip
   19fd6:	ea43 030c 	orr.w	r3, r3, ip
   19fda:	bf00      	nop
   19fdc:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
   19fe0:	429a      	cmp	r2, r3
   19fe2:	bf01      	itttt	eq
   19fe4:	ea2c 0c02 	biceq.w	ip, ip, r2
   19fe8:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
   19fec:	f850 2b04 	ldreq.w	r2, [r0], #4
   19ff0:	f851 3b04 	ldreq.w	r3, [r1], #4
   19ff4:	d0f2      	beq.n	19fdc <strcmp+0x40>
   19ff6:	ea4f 6002 	mov.w	r0, r2, lsl #24
   19ffa:	ea4f 2212 	mov.w	r2, r2, lsr #8
   19ffe:	2801      	cmp	r0, #1
   1a000:	bf28      	it	cs
   1a002:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
   1a006:	bf08      	it	eq
   1a008:	0a1b      	lsreq	r3, r3, #8
   1a00a:	d0f4      	beq.n	19ff6 <strcmp+0x5a>
   1a00c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1a010:	0e00      	lsrs	r0, r0, #24
   1a012:	1ac0      	subs	r0, r0, r3
   1a014:	4770      	bx	lr
   1a016:	f010 0f03 	tst.w	r0, #3
   1a01a:	d00a      	beq.n	1a032 <strcmp+0x96>
   1a01c:	f810 2b01 	ldrb.w	r2, [r0], #1
   1a020:	f811 3b01 	ldrb.w	r3, [r1], #1
   1a024:	2a01      	cmp	r2, #1
   1a026:	bf28      	it	cs
   1a028:	429a      	cmpcs	r2, r3
   1a02a:	d0f4      	beq.n	1a016 <strcmp+0x7a>
   1a02c:	eba2 0003 	sub.w	r0, r2, r3
   1a030:	4770      	bx	lr
   1a032:	f84d 5d04 	str.w	r5, [sp, #-4]!
   1a036:	f850 2b04 	ldr.w	r2, [r0], #4
   1a03a:	f001 0503 	and.w	r5, r1, #3
   1a03e:	f021 0103 	bic.w	r1, r1, #3
   1a042:	f851 3b04 	ldr.w	r3, [r1], #4
   1a046:	2d02      	cmp	r5, #2
   1a048:	d026      	beq.n	1a098 <strcmp+0xfc>
   1a04a:	d84d      	bhi.n	1a0e8 <strcmp+0x14c>
   1a04c:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
   1a050:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
   1a054:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
   1a058:	ea2c 0c02 	bic.w	ip, ip, r2
   1a05c:	d10d      	bne.n	1a07a <strcmp+0xde>
   1a05e:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
   1a062:	bf08      	it	eq
   1a064:	f851 3b04 	ldreq.w	r3, [r1], #4
   1a068:	d10a      	bne.n	1a080 <strcmp+0xe4>
   1a06a:	ea85 0502 	eor.w	r5, r5, r2
   1a06e:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
   1a072:	d10c      	bne.n	1a08e <strcmp+0xf2>
   1a074:	f850 2b04 	ldr.w	r2, [r0], #4
   1a078:	e7e8      	b.n	1a04c <strcmp+0xb0>
   1a07a:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1a07e:	e05b      	b.n	1a138 <strcmp+0x19c>
   1a080:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
   1a084:	d154      	bne.n	1a130 <strcmp+0x194>
   1a086:	780b      	ldrb	r3, [r1, #0]
   1a088:	ea4f 6512 	mov.w	r5, r2, lsr #24
   1a08c:	e054      	b.n	1a138 <strcmp+0x19c>
   1a08e:	ea4f 6512 	mov.w	r5, r2, lsr #24
   1a092:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1a096:	e04f      	b.n	1a138 <strcmp+0x19c>
   1a098:	ea4f 4502 	mov.w	r5, r2, lsl #16
   1a09c:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
   1a0a0:	ea4f 4515 	mov.w	r5, r5, lsr #16
   1a0a4:	ea2c 0c02 	bic.w	ip, ip, r2
   1a0a8:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
   1a0ac:	d118      	bne.n	1a0e0 <strcmp+0x144>
   1a0ae:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
   1a0b2:	bf08      	it	eq
   1a0b4:	f851 3b04 	ldreq.w	r3, [r1], #4
   1a0b8:	d107      	bne.n	1a0ca <strcmp+0x12e>
   1a0ba:	ea85 0502 	eor.w	r5, r5, r2
   1a0be:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
   1a0c2:	d109      	bne.n	1a0d8 <strcmp+0x13c>
   1a0c4:	f850 2b04 	ldr.w	r2, [r0], #4
   1a0c8:	e7e6      	b.n	1a098 <strcmp+0xfc>
   1a0ca:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
   1a0ce:	d12f      	bne.n	1a130 <strcmp+0x194>
   1a0d0:	880b      	ldrh	r3, [r1, #0]
   1a0d2:	ea4f 4512 	mov.w	r5, r2, lsr #16
   1a0d6:	e02f      	b.n	1a138 <strcmp+0x19c>
   1a0d8:	ea4f 4303 	mov.w	r3, r3, lsl #16
   1a0dc:	ea4f 4512 	mov.w	r5, r2, lsr #16
   1a0e0:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1a0e4:	e028      	b.n	1a138 <strcmp+0x19c>
   1a0e6:	bf00      	nop
   1a0e8:	f002 05ff 	and.w	r5, r2, #255	; 0xff
   1a0ec:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
   1a0f0:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
   1a0f4:	ea2c 0c02 	bic.w	ip, ip, r2
   1a0f8:	d10d      	bne.n	1a116 <strcmp+0x17a>
   1a0fa:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
   1a0fe:	bf08      	it	eq
   1a100:	f851 3b04 	ldreq.w	r3, [r1], #4
   1a104:	d10a      	bne.n	1a11c <strcmp+0x180>
   1a106:	ea85 0502 	eor.w	r5, r5, r2
   1a10a:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
   1a10e:	d10a      	bne.n	1a126 <strcmp+0x18a>
   1a110:	f850 2b04 	ldr.w	r2, [r0], #4
   1a114:	e7e8      	b.n	1a0e8 <strcmp+0x14c>
   1a116:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1a11a:	e00d      	b.n	1a138 <strcmp+0x19c>
   1a11c:	f012 0fff 	tst.w	r2, #255	; 0xff
   1a120:	d006      	beq.n	1a130 <strcmp+0x194>
   1a122:	f851 3b04 	ldr.w	r3, [r1], #4
   1a126:	ea4f 2512 	mov.w	r5, r2, lsr #8
   1a12a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1a12e:	e003      	b.n	1a138 <strcmp+0x19c>
   1a130:	f04f 0000 	mov.w	r0, #0
   1a134:	bc20      	pop	{r5}
   1a136:	4770      	bx	lr
   1a138:	f005 02ff 	and.w	r2, r5, #255	; 0xff
   1a13c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1a140:	2801      	cmp	r0, #1
   1a142:	bf28      	it	cs
   1a144:	4290      	cmpcs	r0, r2
   1a146:	bf04      	itt	eq
   1a148:	0a2d      	lsreq	r5, r5, #8
   1a14a:	0a1b      	lsreq	r3, r3, #8
   1a14c:	d0f4      	beq.n	1a138 <strcmp+0x19c>
   1a14e:	eba2 0000 	sub.w	r0, r2, r0
   1a152:	bc20      	pop	{r5}
   1a154:	4770      	bx	lr
   1a156:	bf00      	nop

0001a158 <__aeabi_dcmpun>:
   1a158:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1a15c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1a160:	d102      	bne.n	1a168 <__aeabi_dcmpun+0x10>
   1a162:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1a166:	d10a      	bne.n	1a17e <__aeabi_dcmpun+0x26>
   1a168:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1a16c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1a170:	d102      	bne.n	1a178 <__aeabi_dcmpun+0x20>
   1a172:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1a176:	d102      	bne.n	1a17e <__aeabi_dcmpun+0x26>
   1a178:	f04f 0000 	mov.w	r0, #0
   1a17c:	4770      	bx	lr
   1a17e:	f04f 0001 	mov.w	r0, #1
   1a182:	4770      	bx	lr

0001a184 <__aeabi_d2uiz>:
   1a184:	004a      	lsls	r2, r1, #1
   1a186:	d211      	bcs.n	1a1ac <__aeabi_d2uiz+0x28>
   1a188:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1a18c:	d211      	bcs.n	1a1b2 <__aeabi_d2uiz+0x2e>
   1a18e:	d50d      	bpl.n	1a1ac <__aeabi_d2uiz+0x28>
   1a190:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1a194:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1a198:	d40e      	bmi.n	1a1b8 <__aeabi_d2uiz+0x34>
   1a19a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1a19e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a1a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1a1a6:	fa23 f002 	lsr.w	r0, r3, r2
   1a1aa:	4770      	bx	lr
   1a1ac:	f04f 0000 	mov.w	r0, #0
   1a1b0:	4770      	bx	lr
   1a1b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1a1b6:	d102      	bne.n	1a1be <__aeabi_d2uiz+0x3a>
   1a1b8:	f04f 30ff 	mov.w	r0, #4294967295
   1a1bc:	4770      	bx	lr
   1a1be:	f04f 0000 	mov.w	r0, #0
   1a1c2:	4770      	bx	lr

0001a1c4 <__aeabi_d2f>:
   1a1c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1a1c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1a1cc:	bf24      	itt	cs
   1a1ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1a1d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1a1d6:	d90d      	bls.n	1a1f4 <__aeabi_d2f+0x30>
   1a1d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1a1dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1a1e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1a1e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1a1e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1a1ec:	bf08      	it	eq
   1a1ee:	f020 0001 	biceq.w	r0, r0, #1
   1a1f2:	4770      	bx	lr
   1a1f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1a1f8:	d121      	bne.n	1a23e <__aeabi_d2f+0x7a>
   1a1fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1a1fe:	bfbc      	itt	lt
   1a200:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1a204:	4770      	bxlt	lr
   1a206:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1a20a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1a20e:	f1c2 0218 	rsb	r2, r2, #24
   1a212:	f1c2 0c20 	rsb	ip, r2, #32
   1a216:	fa10 f30c 	lsls.w	r3, r0, ip
   1a21a:	fa20 f002 	lsr.w	r0, r0, r2
   1a21e:	bf18      	it	ne
   1a220:	f040 0001 	orrne.w	r0, r0, #1
   1a224:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1a228:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1a22c:	fa03 fc0c 	lsl.w	ip, r3, ip
   1a230:	ea40 000c 	orr.w	r0, r0, ip
   1a234:	fa23 f302 	lsr.w	r3, r3, r2
   1a238:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1a23c:	e7cc      	b.n	1a1d8 <__aeabi_d2f+0x14>
   1a23e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1a242:	d107      	bne.n	1a254 <__aeabi_d2f+0x90>
   1a244:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1a248:	bf1e      	ittt	ne
   1a24a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1a24e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1a252:	4770      	bxne	lr
   1a254:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1a258:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1a25c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a260:	4770      	bx	lr
   1a262:	bf00      	nop
   1a264:	0000      	movs	r0, r0
	...

0001a268 <orientation_detector_poll>:
static struct device *dev;
static double accel_offset[3];

int orientation_detector_poll(
	struct orientation_detector_sensor_data *sensor_data)
{
   1a268:	b5f0      	push	{r4, r5, r6, r7, lr}
		/* If using the ADXL362 driver, all channels must be fetched */
		if (IS_ENABLED(CONFIG_ADXL362)) {
			err = sensor_sample_fetch_chan(dev,
						       SENSOR_CHAN_ALL);
		} else {
			err = sensor_sample_fetch_chan(dev,
   1a26a:	4e29      	ldr	r6, [pc, #164]	; (1a310 <orientation_detector_poll+0xa8>)
{
   1a26c:	4605      	mov	r5, r0
   1a26e:	b087      	sub	sp, #28
			err = sensor_sample_fetch_chan(dev,
   1a270:	6830      	ldr	r0, [r6, #0]
static inline int z_impl_sensor_sample_fetch_chan(struct device *dev,
						 enum sensor_channel type)
{
	const struct sensor_driver_api *api = dev->driver_api;

	return api->sample_fetch(dev, type);
   1a272:	6843      	ldr	r3, [r0, #4]
   1a274:	2102      	movs	r1, #2
   1a276:	689b      	ldr	r3, [r3, #8]
   1a278:	4798      	blx	r3
						       SENSOR_CHAN_ACCEL_Z);
		}

		if (err) {
   1a27a:	4604      	mov	r4, r0
   1a27c:	b128      	cbz	r0, 1a28a <orientation_detector_poll+0x22>
			printk("sensor_sample_fetch failed\n");
   1a27e:	4825      	ldr	r0, [pc, #148]	; (1a314 <orientation_detector_poll+0xac>)

		err = sensor_channel_get(dev,
				SENSOR_CHAN_ACCEL_Z, &accel_data[2]);

		if (err) {
			printk("sensor_channel_get failed\n");
   1a280:	f02c f9ec 	bl	4665c <printk>
	}

	sensor_data->orientation = current_orientation;

	return 0;
}
   1a284:	4620      	mov	r0, r4
   1a286:	b007      	add	sp, #28
   1a288:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sensor_channel_get(dev,
   1a28a:	6830      	ldr	r0, [r6, #0]
					   enum sensor_channel chan,
					   struct sensor_value *val)
{
	const struct sensor_driver_api *api = dev->driver_api;

	return api->channel_get(dev, chan, val);
   1a28c:	6843      	ldr	r3, [r0, #4]
   1a28e:	aa04      	add	r2, sp, #16
   1a290:	68db      	ldr	r3, [r3, #12]
   1a292:	2102      	movs	r1, #2
   1a294:	4798      	blx	r3
		if (err) {
   1a296:	4604      	mov	r4, r0
   1a298:	b108      	cbz	r0, 1a29e <orientation_detector_poll+0x36>
			printk("sensor_channel_get failed\n");
   1a29a:	481f      	ldr	r0, [pc, #124]	; (1a318 <orientation_detector_poll+0xb0>)
   1a29c:	e7f0      	b.n	1a280 <orientation_detector_poll+0x18>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
   1a29e:	9805      	ldr	r0, [sp, #20]
   1a2a0:	f7fe fa10 	bl	186c4 <__aeabi_i2d>
   1a2a4:	a318      	add	r3, pc, #96	; (adr r3, 1a308 <orientation_detector_poll+0xa0>)
   1a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a2aa:	f7fe fb9f 	bl	189ec <__aeabi_ddiv>
   1a2ae:	4606      	mov	r6, r0
   1a2b0:	9804      	ldr	r0, [sp, #16]
   1a2b2:	460f      	mov	r7, r1
   1a2b4:	f7fe fa06 	bl	186c4 <__aeabi_i2d>
   1a2b8:	4602      	mov	r2, r0
   1a2ba:	460b      	mov	r3, r1
   1a2bc:	4630      	mov	r0, r6
   1a2be:	4639      	mov	r1, r7
   1a2c0:	f7fe f8b4 	bl	1842c <__adddf3>
		aggregated_data[2] += sensor_value_to_double(&accel_data[2]);
   1a2c4:	2200      	movs	r2, #0
   1a2c6:	2300      	movs	r3, #0
   1a2c8:	f7fe f8b0 	bl	1842c <__adddf3>
				accel_offset[2];
   1a2cc:	4b13      	ldr	r3, [pc, #76]	; (1a31c <orientation_detector_poll+0xb4>)
	sensor_data->z = (aggregated_data[2] / (double)MEASUREMENT_ITERATIONS) -
   1a2ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   1a2d2:	f7fe f8a9 	bl	18428 <__aeabi_dsub>
   1a2d6:	4606      	mov	r6, r0
   1a2d8:	460f      	mov	r7, r1
	if (sensor_data->z >= FLIP_ACCELERATION_THRESHOLD) {
   1a2da:	2200      	movs	r2, #0
	sensor_data->z = (aggregated_data[2] / (double)MEASUREMENT_ITERATIONS) -
   1a2dc:	e9c5 6704 	strd	r6, r7, [r5, #16]
	if (sensor_data->z >= FLIP_ACCELERATION_THRESHOLD) {
   1a2e0:	4b0f      	ldr	r3, [pc, #60]	; (1a320 <orientation_detector_poll+0xb8>)
   1a2e2:	f7fe fcdf 	bl	18ca4 <__aeabi_dcmpge>
   1a2e6:	b958      	cbnz	r0, 1a300 <orientation_detector_poll+0x98>
	} else if (sensor_data->z <= -FLIP_ACCELERATION_THRESHOLD) {
   1a2e8:	4b0e      	ldr	r3, [pc, #56]	; (1a324 <orientation_detector_poll+0xbc>)
   1a2ea:	2200      	movs	r2, #0
   1a2ec:	4630      	mov	r0, r6
   1a2ee:	4639      	mov	r1, r7
   1a2f0:	f7fe fcce 	bl	18c90 <__aeabi_dcmple>
   1a2f4:	2800      	cmp	r0, #0
		current_orientation = ORIENTATION_ON_SIDE;
   1a2f6:	bf14      	ite	ne
   1a2f8:	2302      	movne	r3, #2
   1a2fa:	2303      	moveq	r3, #3
	sensor_data->orientation = current_orientation;
   1a2fc:	762b      	strb	r3, [r5, #24]
	return 0;
   1a2fe:	e7c1      	b.n	1a284 <orientation_detector_poll+0x1c>
			current_orientation = ORIENTATION_NORMAL;
   1a300:	2301      	movs	r3, #1
   1a302:	e7fb      	b.n	1a2fc <orientation_detector_poll+0x94>
   1a304:	f3af 8000 	nop.w
   1a308:	00000000 	.word	0x00000000
   1a30c:	412e8480 	.word	0x412e8480
   1a310:	200238dc 	.word	0x200238dc
   1a314:	0004ba8b 	.word	0x0004ba8b
   1a318:	0004baa7 	.word	0x0004baa7
   1a31c:	20020958 	.word	0x20020958
   1a320:	40140000 	.word	0x40140000
   1a324:	c0140000 	.word	0xc0140000

0001a328 <env_sensors_poll_fn>:
};

static struct k_delayed_work env_sensors_poller;

static void env_sensors_poll_fn(struct k_work *work)
{
   1a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a32c:	2500      	movs	r5, #0
   1a32e:	4c40      	ldr	r4, [pc, #256]	; (1a430 <env_sensors_poll_fn+0x108>)
	for (int i = 0; i < num_sensors; i++) {
		if (!(IS_ENABLED(CONFIG_BME680))) {
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
				env_sensors[i]->channel);
			if (err) {
				printk("Failed to fetch data from %s, error: %d\n",
   1a330:	4f40      	ldr	r7, [pc, #256]	; (1a434 <env_sensors_poll_fn+0x10c>)
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1a332:	4e41      	ldr	r6, [pc, #260]	; (1a438 <env_sensors_poll_fn+0x110>)
{
   1a334:	b087      	sub	sp, #28
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
   1a336:	6823      	ldr	r3, [r4, #0]
   1a338:	6998      	ldr	r0, [r3, #24]
   1a33a:	8a19      	ldrh	r1, [r3, #16]
	return api->sample_fetch(dev, type);
   1a33c:	6843      	ldr	r3, [r0, #4]
   1a33e:	689b      	ldr	r3, [r3, #8]
   1a340:	4798      	blx	r3
			if (err) {
   1a342:	4602      	mov	r2, r0
   1a344:	b120      	cbz	r0, 1a350 <env_sensors_poll_fn+0x28>
				printk("Failed to fetch data from %s, error: %d\n",
   1a346:	6823      	ldr	r3, [r4, #0]
   1a348:	4638      	mov	r0, r7
   1a34a:	6959      	ldr	r1, [r3, #20]
   1a34c:	f02c f986 	bl	4665c <printk>
					env_sensors[i]->dev_name, err);
			}
		}
		err = sensor_channel_get(env_sensors[i]->dev,
   1a350:	6823      	ldr	r3, [r4, #0]
   1a352:	6998      	ldr	r0, [r3, #24]
   1a354:	8a19      	ldrh	r1, [r3, #16]
	return api->channel_get(dev, chan, val);
   1a356:	6843      	ldr	r3, [r0, #4]
   1a358:	eb0d 0205 	add.w	r2, sp, r5
   1a35c:	68db      	ldr	r3, [r3, #12]
   1a35e:	4798      	blx	r3
   1a360:	6823      	ldr	r3, [r4, #0]
			env_sensors[i]->channel, &data[i]);
		if (err) {
   1a362:	4602      	mov	r2, r0
   1a364:	b188      	cbz	r0, 1a38a <env_sensors_poll_fn+0x62>
			printk("Failed to fetch data from %s, error: %d\n",
   1a366:	6959      	ldr	r1, [r3, #20]
   1a368:	4638      	mov	r0, r7
   1a36a:	f02c f977 	bl	4665c <printk>
   1a36e:	3508      	adds	r5, #8
	for (int i = 0; i < num_sensors; i++) {
   1a370:	2d18      	cmp	r5, #24
   1a372:	f104 0404 	add.w	r4, r4, #4
   1a376:	d1de      	bne.n	1a336 <env_sensors_poll_fn+0xe>
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1a378:	f242 7210 	movw	r2, #10000	; 0x2710
   1a37c:	492f      	ldr	r1, [pc, #188]	; (1a43c <env_sensors_poll_fn+0x114>)
   1a37e:	4830      	ldr	r0, [pc, #192]	; (1a440 <env_sensors_poll_fn+0x118>)
   1a380:	f023 ff5c 	bl	3e23c <k_delayed_work_submit_to_queue>
			k_spin_unlock(&(env_sensors[i]->lock), key);
		}
	}

	 k_delayed_work_submit(&env_sensors_poller, K_SECONDS(10));
}
   1a384:	b007      	add	sp, #28
   1a386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			k_spinlock_key_t key = k_spin_lock(&(env_sensors[i]->lock));
   1a38a:	f103 081c 	add.w	r8, r3, #28
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1a38e:	f04f 0320 	mov.w	r3, #32
   1a392:	f3ef 8b11 	mrs	fp, BASEPRI
   1a396:	f383 8811 	msr	BASEPRI, r3
   1a39a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1a39e:	4640      	mov	r0, r8
   1a3a0:	f023 fcee 	bl	3dd80 <z_spin_lock_valid>
   1a3a4:	b960      	cbnz	r0, 1a3c0 <env_sensors_poll_fn+0x98>
   1a3a6:	4927      	ldr	r1, [pc, #156]	; (1a444 <env_sensors_poll_fn+0x11c>)
   1a3a8:	235f      	movs	r3, #95	; 0x5f
   1a3aa:	4632      	mov	r2, r6
   1a3ac:	4826      	ldr	r0, [pc, #152]	; (1a448 <env_sensors_poll_fn+0x120>)
   1a3ae:	f02c f955 	bl	4665c <printk>
   1a3b2:	4826      	ldr	r0, [pc, #152]	; (1a44c <env_sensors_poll_fn+0x124>)
   1a3b4:	f02c f952 	bl	4665c <printk>
   1a3b8:	215f      	movs	r1, #95	; 0x5f
   1a3ba:	4630      	mov	r0, r6
   1a3bc:	f02c f95b 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a3c0:	4640      	mov	r0, r8
   1a3c2:	f023 fcfb 	bl	3ddbc <z_spin_lock_set_owner>
	return (double)val->val1 + (double)val->val2 / 1000000;
   1a3c6:	eb0d 0305 	add.w	r3, sp, r5
   1a3ca:	6858      	ldr	r0, [r3, #4]
   1a3cc:	f7fe f97a 	bl	186c4 <__aeabi_i2d>
   1a3d0:	a315      	add	r3, pc, #84	; (adr r3, 1a428 <env_sensors_poll_fn+0x100>)
   1a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a3d6:	f7fe fb09 	bl	189ec <__aeabi_ddiv>
   1a3da:	4680      	mov	r8, r0
   1a3dc:	f85d 0005 	ldr.w	r0, [sp, r5]
   1a3e0:	4689      	mov	r9, r1
   1a3e2:	f7fe f96f 	bl	186c4 <__aeabi_i2d>
   1a3e6:	4602      	mov	r2, r0
   1a3e8:	460b      	mov	r3, r1
   1a3ea:	4640      	mov	r0, r8
   1a3ec:	4649      	mov	r1, r9
   1a3ee:	f7fe f81d 	bl	1842c <__adddf3>
			env_sensors[i]->sensor.value = sensor_value_to_double(&data[i]);
   1a3f2:	f8d4 a000 	ldr.w	sl, [r4]
   1a3f6:	e9ca 0102 	strd	r0, r1, [sl, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1a3fa:	f10a 001c 	add.w	r0, sl, #28
   1a3fe:	f023 fccd 	bl	3dd9c <z_spin_unlock_valid>
   1a402:	b960      	cbnz	r0, 1a41e <env_sensors_poll_fn+0xf6>
   1a404:	4912      	ldr	r1, [pc, #72]	; (1a450 <env_sensors_poll_fn+0x128>)
   1a406:	2372      	movs	r3, #114	; 0x72
   1a408:	4632      	mov	r2, r6
   1a40a:	480f      	ldr	r0, [pc, #60]	; (1a448 <env_sensors_poll_fn+0x120>)
   1a40c:	f02c f926 	bl	4665c <printk>
   1a410:	4810      	ldr	r0, [pc, #64]	; (1a454 <env_sensors_poll_fn+0x12c>)
   1a412:	f02c f923 	bl	4665c <printk>
   1a416:	2172      	movs	r1, #114	; 0x72
   1a418:	4630      	mov	r0, r6
   1a41a:	f02c f92c 	bl	46676 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1a41e:	f38b 8811 	msr	BASEPRI, fp
   1a422:	f3bf 8f6f 	isb	sy
   1a426:	e7a2      	b.n	1a36e <env_sensors_poll_fn+0x46>
   1a428:	00000000 	.word	0x00000000
   1a42c:	412e8480 	.word	0x412e8480
   1a430:	00049318 	.word	0x00049318
   1a434:	0004bfa2 	.word	0x0004bfa2
   1a438:	0004bfcb 	.word	0x0004bfcb
   1a43c:	20023938 	.word	0x20023938
   1a440:	2002a324 	.word	0x2002a324
   1a444:	0004bff2 	.word	0x0004bff2
   1a448:	0004b5bf 	.word	0x0004b5bf
   1a44c:	0004c007 	.word	0x0004c007
   1a450:	0004c01c 	.word	0x0004c01c
   1a454:	0004c033 	.word	0x0004c033

0001a458 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
   1a458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a45c:	4605      	mov	r5, r0
   1a45e:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1a460:	460c      	mov	r4, r1
   1a462:	b909      	cbnz	r1, 1a468 <parse_value+0x10>
    if (head != NULL)
    {
        cJSON_Delete(head);
    }

    return false;
   1a464:	2000      	movs	r0, #0
   1a466:	e024      	b.n	1a4b2 <parse_value+0x5a>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1a468:	6808      	ldr	r0, [r1, #0]
   1a46a:	2800      	cmp	r0, #0
   1a46c:	d0fa      	beq.n	1a464 <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1a46e:	688b      	ldr	r3, [r1, #8]
   1a470:	6862      	ldr	r2, [r4, #4]
   1a472:	1d19      	adds	r1, r3, #4
   1a474:	4291      	cmp	r1, r2
   1a476:	d80b      	bhi.n	1a490 <parse_value+0x38>
   1a478:	2204      	movs	r2, #4
   1a47a:	49b1      	ldr	r1, [pc, #708]	; (1a740 <parse_value+0x2e8>)
   1a47c:	4418      	add	r0, r3
   1a47e:	f026 f8af 	bl	405e0 <strncmp>
   1a482:	b928      	cbnz	r0, 1a490 <parse_value+0x38>
        item->type = cJSON_NULL;
   1a484:	2304      	movs	r3, #4
   1a486:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1a488:	68a3      	ldr	r3, [r4, #8]
   1a48a:	3304      	adds	r3, #4
    input_buffer->offset++;
   1a48c:	60a3      	str	r3, [r4, #8]
   1a48e:	e073      	b.n	1a578 <parse_value+0x120>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1a490:	68a3      	ldr	r3, [r4, #8]
   1a492:	6862      	ldr	r2, [r4, #4]
   1a494:	1d59      	adds	r1, r3, #5
   1a496:	4291      	cmp	r1, r2
   1a498:	d80e      	bhi.n	1a4b8 <parse_value+0x60>
   1a49a:	6820      	ldr	r0, [r4, #0]
   1a49c:	2205      	movs	r2, #5
   1a49e:	49a9      	ldr	r1, [pc, #676]	; (1a744 <parse_value+0x2ec>)
   1a4a0:	4418      	add	r0, r3
   1a4a2:	f026 f89d 	bl	405e0 <strncmp>
   1a4a6:	b938      	cbnz	r0, 1a4b8 <parse_value+0x60>
        item->type = cJSON_False;
   1a4a8:	2001      	movs	r0, #1
        input_buffer->offset += 5;
   1a4aa:	68a3      	ldr	r3, [r4, #8]
        item->type = cJSON_False;
   1a4ac:	60e8      	str	r0, [r5, #12]
        input_buffer->offset += 5;
   1a4ae:	3305      	adds	r3, #5
        input_buffer->offset += 4;
   1a4b0:	60a3      	str	r3, [r4, #8]
}
   1a4b2:	b013      	add	sp, #76	; 0x4c
   1a4b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1a4b8:	68a3      	ldr	r3, [r4, #8]
   1a4ba:	6862      	ldr	r2, [r4, #4]
   1a4bc:	1d19      	adds	r1, r3, #4
   1a4be:	4291      	cmp	r1, r2
   1a4c0:	d80d      	bhi.n	1a4de <parse_value+0x86>
   1a4c2:	6820      	ldr	r0, [r4, #0]
   1a4c4:	2204      	movs	r2, #4
   1a4c6:	49a0      	ldr	r1, [pc, #640]	; (1a748 <parse_value+0x2f0>)
   1a4c8:	4418      	add	r0, r3
   1a4ca:	f026 f889 	bl	405e0 <strncmp>
   1a4ce:	b930      	cbnz	r0, 1a4de <parse_value+0x86>
        item->type = cJSON_True;
   1a4d0:	2302      	movs	r3, #2
        item->valueint = 1;
   1a4d2:	2001      	movs	r0, #1
        item->type = cJSON_True;
   1a4d4:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1a4d6:	68a3      	ldr	r3, [r4, #8]
        item->valueint = 1;
   1a4d8:	6168      	str	r0, [r5, #20]
        input_buffer->offset += 4;
   1a4da:	3304      	adds	r3, #4
   1a4dc:	e7e8      	b.n	1a4b0 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1a4de:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
   1a4e2:	4282      	cmp	r2, r0
   1a4e4:	d2be      	bcs.n	1a464 <parse_value+0xc>
   1a4e6:	6821      	ldr	r1, [r4, #0]
   1a4e8:	5c8b      	ldrb	r3, [r1, r2]
   1a4ea:	188f      	adds	r7, r1, r2
   1a4ec:	2b22      	cmp	r3, #34	; 0x22
   1a4ee:	d104      	bne.n	1a4fa <parse_value+0xa2>
        return parse_string(item, input_buffer);
   1a4f0:	4621      	mov	r1, r4
   1a4f2:	4628      	mov	r0, r5
   1a4f4:	f00a f8a2 	bl	2463c <parse_string>
   1a4f8:	e7db      	b.n	1a4b2 <parse_value+0x5a>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1a4fa:	2b2d      	cmp	r3, #45	; 0x2d
   1a4fc:	d003      	beq.n	1a506 <parse_value+0xae>
   1a4fe:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   1a502:	2e09      	cmp	r6, #9
   1a504:	d84e      	bhi.n	1a5a4 <parse_value+0x14c>
    unsigned char *after_end = NULL;
   1a506:	2300      	movs	r3, #0
   1a508:	9301      	str	r3, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1a50a:	2900      	cmp	r1, #0
   1a50c:	d0aa      	beq.n	1a464 <parse_value+0xc>
   1a50e:	1a82      	subs	r2, r0, r2
   1a510:	ae02      	add	r6, sp, #8
        switch (buffer_at_offset(input_buffer)[i])
   1a512:	5cf9      	ldrb	r1, [r7, r3]
   1a514:	2939      	cmp	r1, #57	; 0x39
   1a516:	d831      	bhi.n	1a57c <parse_value+0x124>
   1a518:	2930      	cmp	r1, #48	; 0x30
   1a51a:	d205      	bcs.n	1a528 <parse_value+0xd0>
   1a51c:	292d      	cmp	r1, #45	; 0x2d
   1a51e:	d003      	beq.n	1a528 <parse_value+0xd0>
   1a520:	292e      	cmp	r1, #46	; 0x2e
   1a522:	d001      	beq.n	1a528 <parse_value+0xd0>
   1a524:	292b      	cmp	r1, #43	; 0x2b
   1a526:	d105      	bne.n	1a534 <parse_value+0xdc>
                number_c_string[i] = decimal_point;
   1a528:	54f1      	strb	r1, [r6, r3]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1a52a:	3301      	adds	r3, #1
   1a52c:	2b3f      	cmp	r3, #63	; 0x3f
   1a52e:	d001      	beq.n	1a534 <parse_value+0xdc>
   1a530:	429a      	cmp	r2, r3
   1a532:	d1ee      	bne.n	1a512 <parse_value+0xba>
    number_c_string[i] = '\0';
   1a534:	aa12      	add	r2, sp, #72	; 0x48
   1a536:	4413      	add	r3, r2
   1a538:	2200      	movs	r2, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1a53a:	a901      	add	r1, sp, #4
   1a53c:	4630      	mov	r0, r6
    number_c_string[i] = '\0';
   1a53e:	f803 2c40 	strb.w	r2, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1a542:	f026 fb43 	bl	40bcc <strtod>
    if (number_c_string == after_end)
   1a546:	9f01      	ldr	r7, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1a548:	ec59 8b10 	vmov	r8, r9, d0
    if (number_c_string == after_end)
   1a54c:	42b7      	cmp	r7, r6
   1a54e:	d089      	beq.n	1a464 <parse_value+0xc>
    if (number >= INT_MAX)
   1a550:	a379      	add	r3, pc, #484	; (adr r3, 1a738 <parse_value+0x2e0>)
   1a552:	e9d3 2300 	ldrd	r2, r3, [r3]
    item->valuedouble = number;
   1a556:	ed85 0b06 	vstr	d0, [r5, #24]
    if (number >= INT_MAX)
   1a55a:	ee10 0a10 	vmov	r0, s0
   1a55e:	4649      	mov	r1, r9
   1a560:	f7fe fba0 	bl	18ca4 <__aeabi_dcmpge>
   1a564:	b170      	cbz	r0, 1a584 <parse_value+0x12c>
        item->valueint = INT_MAX;
   1a566:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   1a56a:	616b      	str	r3, [r5, #20]
    item->type = cJSON_Number;
   1a56c:	2308      	movs	r3, #8
   1a56e:	60eb      	str	r3, [r5, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1a570:	68a3      	ldr	r3, [r4, #8]
   1a572:	1bb8      	subs	r0, r7, r6
   1a574:	4418      	add	r0, r3
   1a576:	60a0      	str	r0, [r4, #8]
    return true;
   1a578:	2001      	movs	r0, #1
   1a57a:	e79a      	b.n	1a4b2 <parse_value+0x5a>
        switch (buffer_at_offset(input_buffer)[i])
   1a57c:	2945      	cmp	r1, #69	; 0x45
   1a57e:	d0d3      	beq.n	1a528 <parse_value+0xd0>
   1a580:	2965      	cmp	r1, #101	; 0x65
   1a582:	e7d0      	b.n	1a526 <parse_value+0xce>
    else if (number <= (double)INT_MIN)
   1a584:	2200      	movs	r2, #0
   1a586:	4b71      	ldr	r3, [pc, #452]	; (1a74c <parse_value+0x2f4>)
   1a588:	4640      	mov	r0, r8
   1a58a:	4649      	mov	r1, r9
   1a58c:	f7fe fb80 	bl	18c90 <__aeabi_dcmple>
   1a590:	b110      	cbz	r0, 1a598 <parse_value+0x140>
        item->valueint = INT_MIN;
   1a592:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1a596:	e7e8      	b.n	1a56a <parse_value+0x112>
        item->valueint = (int)number;
   1a598:	4640      	mov	r0, r8
   1a59a:	4649      	mov	r1, r9
   1a59c:	f7fe fb96 	bl	18ccc <__aeabi_d2iz>
   1a5a0:	6168      	str	r0, [r5, #20]
   1a5a2:	e7e3      	b.n	1a56c <parse_value+0x114>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1a5a4:	2b5b      	cmp	r3, #91	; 0x5b
   1a5a6:	d153      	bne.n	1a650 <parse_value+0x1f8>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1a5a8:	68e3      	ldr	r3, [r4, #12]
   1a5aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1a5ae:	f4bf af59 	bcs.w	1a464 <parse_value+0xc>
    input_buffer->depth++;
   1a5b2:	3301      	adds	r3, #1
   1a5b4:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   1a5b6:	5c8b      	ldrb	r3, [r1, r2]
   1a5b8:	2b5b      	cmp	r3, #91	; 0x5b
   1a5ba:	f47f af53 	bne.w	1a464 <parse_value+0xc>
    input_buffer->offset++;
   1a5be:	3201      	adds	r2, #1
   1a5c0:	60a2      	str	r2, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1a5c2:	4620      	mov	r0, r4
   1a5c4:	f02d f97c 	bl	478c0 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   1a5c8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a5cc:	4293      	cmp	r3, r2
   1a5ce:	d25c      	bcs.n	1a68a <parse_value+0x232>
   1a5d0:	6822      	ldr	r2, [r4, #0]
   1a5d2:	5cd2      	ldrb	r2, [r2, r3]
   1a5d4:	2a5d      	cmp	r2, #93	; 0x5d
   1a5d6:	d101      	bne.n	1a5dc <parse_value+0x184>
    cJSON *head = NULL; /* head of the linked list */
   1a5d8:	2600      	movs	r6, #0
   1a5da:	e027      	b.n	1a62c <parse_value+0x1d4>
    cJSON *current_item = NULL;
   1a5dc:	f04f 0800 	mov.w	r8, #0
    cJSON *head = NULL; /* head of the linked list */
   1a5e0:	4646      	mov	r6, r8
    input_buffer->offset--;
   1a5e2:	3b01      	subs	r3, #1
   1a5e4:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1a5e6:	6920      	ldr	r0, [r4, #16]
   1a5e8:	f02d f9f8 	bl	479dc <cJSON_New_Item.isra.1>
        if (new_item == NULL)
   1a5ec:	4607      	mov	r7, r0
   1a5ee:	b340      	cbz	r0, 1a642 <parse_value+0x1ea>
        if (head == NULL)
   1a5f0:	b32e      	cbz	r6, 1a63e <parse_value+0x1e6>
            current_item->next = new_item;
   1a5f2:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1a5f6:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1a5fa:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a5fc:	4620      	mov	r0, r4
        input_buffer->offset++;
   1a5fe:	3301      	adds	r3, #1
   1a600:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a602:	f02d f95d 	bl	478c0 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1a606:	4621      	mov	r1, r4
   1a608:	4638      	mov	r0, r7
   1a60a:	f7ff ff25 	bl	1a458 <parse_value>
   1a60e:	b1d8      	cbz	r0, 1a648 <parse_value+0x1f0>
        buffer_skip_whitespace(input_buffer);
   1a610:	4620      	mov	r0, r4
   1a612:	f02d f955 	bl	478c0 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1a616:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a61a:	4293      	cmp	r3, r2
   1a61c:	d214      	bcs.n	1a648 <parse_value+0x1f0>
   1a61e:	6822      	ldr	r2, [r4, #0]
   1a620:	46b8      	mov	r8, r7
   1a622:	5cd3      	ldrb	r3, [r2, r3]
   1a624:	2b2c      	cmp	r3, #44	; 0x2c
   1a626:	d0de      	beq.n	1a5e6 <parse_value+0x18e>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1a628:	2b5d      	cmp	r3, #93	; 0x5d
   1a62a:	d10d      	bne.n	1a648 <parse_value+0x1f0>
    input_buffer->depth--;
   1a62c:	68e3      	ldr	r3, [r4, #12]
   1a62e:	3b01      	subs	r3, #1
   1a630:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
   1a632:	2320      	movs	r3, #32
    item->child = head;
   1a634:	e9c5 6302 	strd	r6, r3, [r5, #8]
    input_buffer->offset++;
   1a638:	68a3      	ldr	r3, [r4, #8]
   1a63a:	3301      	adds	r3, #1
   1a63c:	e726      	b.n	1a48c <parse_value+0x34>
        if (head == NULL)
   1a63e:	4606      	mov	r6, r0
   1a640:	e7db      	b.n	1a5fa <parse_value+0x1a2>
    if (head != NULL)
   1a642:	2e00      	cmp	r6, #0
   1a644:	f43f af0e 	beq.w	1a464 <parse_value+0xc>
        cJSON_Delete(head);
   1a648:	4630      	mov	r0, r6
        cJSON_Delete(head);
   1a64a:	f00a fbb9 	bl	24dc0 <cJSON_Delete>
   1a64e:	e709      	b.n	1a464 <parse_value+0xc>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1a650:	2b7b      	cmp	r3, #123	; 0x7b
   1a652:	f47f af07 	bne.w	1a464 <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1a656:	68e3      	ldr	r3, [r4, #12]
   1a658:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1a65c:	f4bf af02 	bcs.w	1a464 <parse_value+0xc>
    input_buffer->depth++;
   1a660:	3301      	adds	r3, #1
   1a662:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   1a664:	5c8b      	ldrb	r3, [r1, r2]
   1a666:	2b7b      	cmp	r3, #123	; 0x7b
   1a668:	f47f aefc 	bne.w	1a464 <parse_value+0xc>
    input_buffer->offset++;
   1a66c:	3201      	adds	r2, #1
   1a66e:	60a2      	str	r2, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1a670:	4620      	mov	r0, r4
   1a672:	f02d f925 	bl	478c0 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   1a676:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a67a:	4293      	cmp	r3, r2
   1a67c:	d205      	bcs.n	1a68a <parse_value+0x232>
   1a67e:	6822      	ldr	r2, [r4, #0]
   1a680:	5cd2      	ldrb	r2, [r2, r3]
   1a682:	2a7d      	cmp	r2, #125	; 0x7d
   1a684:	d104      	bne.n	1a690 <parse_value+0x238>
    cJSON *head = NULL; /* linked list head */
   1a686:	2700      	movs	r7, #0
   1a688:	e046      	b.n	1a718 <parse_value+0x2c0>
        input_buffer->offset--;
   1a68a:	3b01      	subs	r3, #1
   1a68c:	60a3      	str	r3, [r4, #8]
   1a68e:	e6e9      	b.n	1a464 <parse_value+0xc>
    cJSON *current_item = NULL;
   1a690:	f04f 0800 	mov.w	r8, #0
    cJSON *head = NULL; /* linked list head */
   1a694:	4647      	mov	r7, r8
        current_item->valuestring = NULL;
   1a696:	46c1      	mov	r9, r8
    input_buffer->offset--;
   1a698:	3b01      	subs	r3, #1
   1a69a:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1a69c:	6920      	ldr	r0, [r4, #16]
   1a69e:	f02d f99d 	bl	479dc <cJSON_New_Item.isra.1>
        if (new_item == NULL)
   1a6a2:	4606      	mov	r6, r0
   1a6a4:	2800      	cmp	r0, #0
   1a6a6:	d040      	beq.n	1a72a <parse_value+0x2d2>
        if (head == NULL)
   1a6a8:	2f00      	cmp	r7, #0
   1a6aa:	d03c      	beq.n	1a726 <parse_value+0x2ce>
            current_item->next = new_item;
   1a6ac:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1a6b0:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1a6b4:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a6b6:	4620      	mov	r0, r4
        input_buffer->offset++;
   1a6b8:	3301      	adds	r3, #1
   1a6ba:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a6bc:	f02d f900 	bl	478c0 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   1a6c0:	4621      	mov	r1, r4
   1a6c2:	4630      	mov	r0, r6
   1a6c4:	f009 ffba 	bl	2463c <parse_string>
   1a6c8:	b390      	cbz	r0, 1a730 <parse_value+0x2d8>
        buffer_skip_whitespace(input_buffer);
   1a6ca:	4620      	mov	r0, r4
   1a6cc:	f02d f8f8 	bl	478c0 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   1a6d0:	6933      	ldr	r3, [r6, #16]
        current_item->valuestring = NULL;
   1a6d2:	f8c6 9010 	str.w	r9, [r6, #16]
        current_item->string = current_item->valuestring;
   1a6d6:	6233      	str	r3, [r6, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   1a6d8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a6dc:	4293      	cmp	r3, r2
   1a6de:	d227      	bcs.n	1a730 <parse_value+0x2d8>
   1a6e0:	6822      	ldr	r2, [r4, #0]
   1a6e2:	5cd2      	ldrb	r2, [r2, r3]
   1a6e4:	2a3a      	cmp	r2, #58	; 0x3a
   1a6e6:	d123      	bne.n	1a730 <parse_value+0x2d8>
        input_buffer->offset++;
   1a6e8:	3301      	adds	r3, #1
   1a6ea:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a6ec:	4620      	mov	r0, r4
   1a6ee:	f02d f8e7 	bl	478c0 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1a6f2:	4621      	mov	r1, r4
   1a6f4:	4630      	mov	r0, r6
   1a6f6:	f7ff feaf 	bl	1a458 <parse_value>
   1a6fa:	b1c8      	cbz	r0, 1a730 <parse_value+0x2d8>
        buffer_skip_whitespace(input_buffer);
   1a6fc:	4620      	mov	r0, r4
   1a6fe:	f02d f8df 	bl	478c0 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1a702:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a706:	4293      	cmp	r3, r2
   1a708:	d212      	bcs.n	1a730 <parse_value+0x2d8>
   1a70a:	6822      	ldr	r2, [r4, #0]
   1a70c:	46b0      	mov	r8, r6
   1a70e:	5cd3      	ldrb	r3, [r2, r3]
   1a710:	2b2c      	cmp	r3, #44	; 0x2c
   1a712:	d0c3      	beq.n	1a69c <parse_value+0x244>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1a714:	2b7d      	cmp	r3, #125	; 0x7d
   1a716:	d10b      	bne.n	1a730 <parse_value+0x2d8>
    input_buffer->depth--;
   1a718:	68e3      	ldr	r3, [r4, #12]
   1a71a:	3b01      	subs	r3, #1
   1a71c:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
   1a71e:	2340      	movs	r3, #64	; 0x40
    item->child = head;
   1a720:	e9c5 7302 	strd	r7, r3, [r5, #8]
   1a724:	e788      	b.n	1a638 <parse_value+0x1e0>
        if (head == NULL)
   1a726:	4607      	mov	r7, r0
   1a728:	e7c4      	b.n	1a6b4 <parse_value+0x25c>
    if (head != NULL)
   1a72a:	2f00      	cmp	r7, #0
   1a72c:	f43f ae9a 	beq.w	1a464 <parse_value+0xc>
        cJSON_Delete(head);
   1a730:	4638      	mov	r0, r7
   1a732:	e78a      	b.n	1a64a <parse_value+0x1f2>
   1a734:	f3af 8000 	nop.w
   1a738:	ffc00000 	.word	0xffc00000
   1a73c:	41dfffff 	.word	0x41dfffff
   1a740:	0004d28e 	.word	0x0004d28e
   1a744:	0004d2a5 	.word	0x0004d2a5
   1a748:	0004d2ab 	.word	0x0004d2ab
   1a74c:	c1e00000 	.word	0xc1e00000

0001a750 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
   1a750:	4b17      	ldr	r3, [pc, #92]	; (1a7b0 <cJSON_CreateNumber+0x60>)
{
   1a752:	b5d0      	push	{r4, r6, r7, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1a754:	6818      	ldr	r0, [r3, #0]
{
   1a756:	ec57 6b10 	vmov	r6, r7, d0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1a75a:	f02d f93f 	bl	479dc <cJSON_New_Item.isra.1>
    if(item)
   1a75e:	4604      	mov	r4, r0
   1a760:	b170      	cbz	r0, 1a780 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
   1a762:	2308      	movs	r3, #8
        item->valuedouble = num;
   1a764:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
   1a768:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   1a76a:	4639      	mov	r1, r7
   1a76c:	a30e      	add	r3, pc, #56	; (adr r3, 1a7a8 <cJSON_CreateNumber+0x58>)
   1a76e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a772:	4630      	mov	r0, r6
   1a774:	f7fe fa96 	bl	18ca4 <__aeabi_dcmpge>
   1a778:	b120      	cbz	r0, 1a784 <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
   1a77a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
   1a77e:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   1a780:	4620      	mov	r0, r4
   1a782:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
   1a784:	2200      	movs	r2, #0
   1a786:	4b0b      	ldr	r3, [pc, #44]	; (1a7b4 <cJSON_CreateNumber+0x64>)
   1a788:	4630      	mov	r0, r6
   1a78a:	4639      	mov	r1, r7
   1a78c:	f7fe fa80 	bl	18c90 <__aeabi_dcmple>
   1a790:	b110      	cbz	r0, 1a798 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   1a792:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1a796:	e7f2      	b.n	1a77e <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   1a798:	4630      	mov	r0, r6
   1a79a:	4639      	mov	r1, r7
   1a79c:	f7fe fa96 	bl	18ccc <__aeabi_d2iz>
   1a7a0:	6160      	str	r0, [r4, #20]
    return item;
   1a7a2:	e7ed      	b.n	1a780 <cJSON_CreateNumber+0x30>
   1a7a4:	f3af 8000 	nop.w
   1a7a8:	ffc00000 	.word	0xffc00000
   1a7ac:	41dfffff 	.word	0x41dfffff
   1a7b0:	20031bc8 	.word	0x20031bc8
   1a7b4:	c1e00000 	.word	0xc1e00000

0001a7b8 <double_to_sensor_value>:
 * @param val Sensor value to convert.
 * @param sense_val Pointer to sensor_value to store the converted data.
 */
static void double_to_sensor_value(double val,
				struct sensor_value *sense_val)
{
   1a7b8:	b5d0      	push	{r4, r6, r7, lr}
   1a7ba:	4614      	mov	r4, r2
   1a7bc:	460f      	mov	r7, r1
   1a7be:	4606      	mov	r6, r0
	sense_val->val1 = (int)val;
   1a7c0:	f7fe fa84 	bl	18ccc <__aeabi_d2iz>
   1a7c4:	6020      	str	r0, [r4, #0]
	sense_val->val2 = (val - (int)val) * 1000000;
   1a7c6:	f7fd ff7d 	bl	186c4 <__aeabi_i2d>
   1a7ca:	4602      	mov	r2, r0
   1a7cc:	460b      	mov	r3, r1
   1a7ce:	4630      	mov	r0, r6
   1a7d0:	4639      	mov	r1, r7
   1a7d2:	f7fd fe29 	bl	18428 <__aeabi_dsub>
   1a7d6:	a304      	add	r3, pc, #16	; (adr r3, 1a7e8 <double_to_sensor_value+0x30>)
   1a7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a7dc:	f7fd ffdc 	bl	18798 <__aeabi_dmul>
   1a7e0:	f7fe fa74 	bl	18ccc <__aeabi_d2iz>
   1a7e4:	6060      	str	r0, [r4, #4]
}
   1a7e6:	bdd0      	pop	{r4, r6, r7, pc}
   1a7e8:	00000000 	.word	0x00000000
   1a7ec:	412e8480 	.word	0x412e8480

0001a7f0 <sensor_sim_sample_fetch>:
	return 0;
}

static int sensor_sim_sample_fetch(struct device *dev,
				enum sensor_channel chan)
{
   1a7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (chan) {
   1a7f2:	2910      	cmp	r1, #16
   1a7f4:	f200 80a6 	bhi.w	1a944 <sensor_sim_sample_fetch+0x154>
   1a7f8:	e8df f001 	tbb	[pc, r1]
   1a7fc:	40302009 	.word	0x40302009
   1a800:	a4a4a4a4 	.word	0xa4a4a4a4
   1a804:	a4a4a4a4 	.word	0xa4a4a4a4
   1a808:	a49068a4 	.word	0xa49068a4
   1a80c:	7d          	.byte	0x7d
   1a80d:	00          	.byte	0x00
			accel_samples[0] = static_val_coeff * max_variation;
   1a80e:	4c54      	ldr	r4, [pc, #336]	; (1a960 <sensor_sim_sample_fetch+0x170>)
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1a810:	f011 fa10 	bl	2bc34 <generate_sine.constprop.2>
			accel_samples[0] = static_val_coeff * max_variation;
   1a814:	6820      	ldr	r0, [r4, #0]
   1a816:	f7fd ff55 	bl	186c4 <__aeabi_i2d>
   1a81a:	4b52      	ldr	r3, [pc, #328]	; (1a964 <sensor_sim_sample_fetch+0x174>)
   1a81c:	2200      	movs	r2, #0
   1a81e:	4606      	mov	r6, r0
   1a820:	460f      	mov	r7, r1
   1a822:	f7fd ffb9 	bl	18798 <__aeabi_dmul>
   1a826:	4b50      	ldr	r3, [pc, #320]	; (1a968 <sensor_sim_sample_fetch+0x178>)
   1a828:	e9c3 0100 	strd	r0, r1, [r3]
		static_val_coeff *= -1.0;
   1a82c:	4630      	mov	r0, r6
   1a82e:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1a832:	f7fe fa4b 	bl	18ccc <__aeabi_d2iz>
   1a836:	6020      	str	r0, [r4, #0]
	return 0;
   1a838:	2000      	movs	r0, #0
	return sensor_sim_generate_data(chan);
}
   1a83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			accel_samples[1] = static_val_coeff * max_variation;
   1a83c:	4c48      	ldr	r4, [pc, #288]	; (1a960 <sensor_sim_sample_fetch+0x170>)
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1a83e:	f011 f9f9 	bl	2bc34 <generate_sine.constprop.2>
			accel_samples[1] = static_val_coeff * max_variation;
   1a842:	6820      	ldr	r0, [r4, #0]
   1a844:	f7fd ff3e 	bl	186c4 <__aeabi_i2d>
   1a848:	4b46      	ldr	r3, [pc, #280]	; (1a964 <sensor_sim_sample_fetch+0x174>)
   1a84a:	2200      	movs	r2, #0
   1a84c:	4606      	mov	r6, r0
   1a84e:	460f      	mov	r7, r1
   1a850:	f7fd ffa2 	bl	18798 <__aeabi_dmul>
   1a854:	4b44      	ldr	r3, [pc, #272]	; (1a968 <sensor_sim_sample_fetch+0x178>)
   1a856:	e9c3 0102 	strd	r0, r1, [r3, #8]
   1a85a:	e7e7      	b.n	1a82c <sensor_sim_sample_fetch+0x3c>
			accel_samples[2] = static_val_coeff * max_variation;
   1a85c:	4c40      	ldr	r4, [pc, #256]	; (1a960 <sensor_sim_sample_fetch+0x170>)
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1a85e:	f011 f9e9 	bl	2bc34 <generate_sine.constprop.2>
			accel_samples[2] = static_val_coeff * max_variation;
   1a862:	6820      	ldr	r0, [r4, #0]
   1a864:	f7fd ff2e 	bl	186c4 <__aeabi_i2d>
   1a868:	4b3e      	ldr	r3, [pc, #248]	; (1a964 <sensor_sim_sample_fetch+0x174>)
   1a86a:	2200      	movs	r2, #0
   1a86c:	4606      	mov	r6, r0
   1a86e:	460f      	mov	r7, r1
   1a870:	f7fd ff92 	bl	18798 <__aeabi_dmul>
   1a874:	4b3c      	ldr	r3, [pc, #240]	; (1a968 <sensor_sim_sample_fetch+0x178>)
   1a876:	e9c3 0104 	strd	r0, r1, [r3, #16]
   1a87a:	e7d7      	b.n	1a82c <sensor_sim_sample_fetch+0x3c>
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1a87c:	f011 f9da 	bl	2bc34 <generate_sine.constprop.2>
   1a880:	4c39      	ldr	r4, [pc, #228]	; (1a968 <sensor_sim_sample_fetch+0x178>)
   1a882:	e9c4 0100 	strd	r0, r1, [r4]
	if (z_syscall_trap()) {
		return (s32_t) z_arch_syscall_invoke1(*(u32_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
   1a886:	2001      	movs	r0, #1
   1a888:	f02e f91f 	bl	48aca <z_impl_k_sleep>
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1a88c:	f011 f9d2 	bl	2bc34 <generate_sine.constprop.2>
   1a890:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[0] = static_val_coeff * max_variation;
   1a894:	4d32      	ldr	r5, [pc, #200]	; (1a960 <sensor_sim_sample_fetch+0x170>)
   1a896:	2001      	movs	r0, #1
   1a898:	f02e f917 	bl	48aca <z_impl_k_sleep>
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1a89c:	f011 f9ca 	bl	2bc34 <generate_sine.constprop.2>
			accel_samples[0] = static_val_coeff * max_variation;
   1a8a0:	6828      	ldr	r0, [r5, #0]
   1a8a2:	f7fd ff0f 	bl	186c4 <__aeabi_i2d>
   1a8a6:	2200      	movs	r2, #0
   1a8a8:	4b2e      	ldr	r3, [pc, #184]	; (1a964 <sensor_sim_sample_fetch+0x174>)
   1a8aa:	4606      	mov	r6, r0
   1a8ac:	460f      	mov	r7, r1
   1a8ae:	f7fd ff73 	bl	18798 <__aeabi_dmul>
   1a8b2:	e9c4 0100 	strd	r0, r1, [r4]
			accel_samples[1] = static_val_coeff * max_variation;
   1a8b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[2] = static_val_coeff * max_variation;
   1a8ba:	e9c4 0104 	strd	r0, r1, [r4, #16]
		static_val_coeff *= -1.0;
   1a8be:	4630      	mov	r0, r6
   1a8c0:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1a8c4:	f7fe fa02 	bl	18ccc <__aeabi_d2iz>
   1a8c8:	6028      	str	r0, [r5, #0]
   1a8ca:	e7b5      	b.n	1a838 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1a8cc:	f025 fa9c 	bl	3fe08 <rand>
   1a8d0:	f7fd fef8 	bl	186c4 <__aeabi_i2d>
   1a8d4:	a31e      	add	r3, pc, #120	; (adr r3, 1a950 <sensor_sim_sample_fetch+0x160>)
   1a8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a8da:	f7fe f887 	bl	189ec <__aeabi_ddiv>
   1a8de:	2200      	movs	r2, #0
   1a8e0:	4b22      	ldr	r3, [pc, #136]	; (1a96c <sensor_sim_sample_fetch+0x17c>)
   1a8e2:	f7fd fda1 	bl	18428 <__aeabi_dsub>
	temp_sample = base_temp_sample + generate_pseudo_random();
   1a8e6:	4b22      	ldr	r3, [pc, #136]	; (1a970 <sensor_sim_sample_fetch+0x180>)
   1a8e8:	2200      	movs	r2, #0
   1a8ea:	f7fd fd9f 	bl	1842c <__adddf3>
   1a8ee:	4b21      	ldr	r3, [pc, #132]	; (1a974 <sensor_sim_sample_fetch+0x184>)
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1a8f0:	e9c3 0100 	strd	r0, r1, [r3]
   1a8f4:	e7a0      	b.n	1a838 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1a8f6:	f025 fa87 	bl	3fe08 <rand>
   1a8fa:	f7fd fee3 	bl	186c4 <__aeabi_i2d>
   1a8fe:	a314      	add	r3, pc, #80	; (adr r3, 1a950 <sensor_sim_sample_fetch+0x160>)
   1a900:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a904:	f7fe f872 	bl	189ec <__aeabi_ddiv>
   1a908:	2200      	movs	r2, #0
   1a90a:	4b18      	ldr	r3, [pc, #96]	; (1a96c <sensor_sim_sample_fetch+0x17c>)
   1a90c:	f7fd fd8c 	bl	18428 <__aeabi_dsub>
	humidity_sample = base_humidity_sample + generate_pseudo_random();
   1a910:	4b19      	ldr	r3, [pc, #100]	; (1a978 <sensor_sim_sample_fetch+0x188>)
   1a912:	2200      	movs	r2, #0
   1a914:	f7fd fd8a 	bl	1842c <__adddf3>
   1a918:	4b18      	ldr	r3, [pc, #96]	; (1a97c <sensor_sim_sample_fetch+0x18c>)
   1a91a:	e7e9      	b.n	1a8f0 <sensor_sim_sample_fetch+0x100>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1a91c:	f025 fa74 	bl	3fe08 <rand>
   1a920:	f7fd fed0 	bl	186c4 <__aeabi_i2d>
   1a924:	a30a      	add	r3, pc, #40	; (adr r3, 1a950 <sensor_sim_sample_fetch+0x160>)
   1a926:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a92a:	f7fe f85f 	bl	189ec <__aeabi_ddiv>
   1a92e:	2200      	movs	r2, #0
   1a930:	4b0e      	ldr	r3, [pc, #56]	; (1a96c <sensor_sim_sample_fetch+0x17c>)
   1a932:	f7fd fd79 	bl	18428 <__aeabi_dsub>
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1a936:	a308      	add	r3, pc, #32	; (adr r3, 1a958 <sensor_sim_sample_fetch+0x168>)
   1a938:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a93c:	f7fd fd76 	bl	1842c <__adddf3>
   1a940:	4b0f      	ldr	r3, [pc, #60]	; (1a980 <sensor_sim_sample_fetch+0x190>)
   1a942:	e7d5      	b.n	1a8f0 <sensor_sim_sample_fetch+0x100>
		return -ENOTSUP;
   1a944:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return sensor_sim_generate_data(chan);
   1a948:	e777      	b.n	1a83a <sensor_sim_sample_fetch+0x4a>
   1a94a:	bf00      	nop
   1a94c:	f3af 8000 	nop.w
   1a950:	ffc00000 	.word	0xffc00000
   1a954:	41cfffff 	.word	0x41cfffff
   1a958:	cccccccd 	.word	0xcccccccd
   1a95c:	40588ccc 	.word	0x40588ccc
   1a960:	20031bf0 	.word	0x20031bf0
   1a964:	40340000 	.word	0x40340000
   1a968:	20022a68 	.word	0x20022a68
   1a96c:	3ff00000 	.word	0x3ff00000
   1a970:	40350000 	.word	0x40350000
   1a974:	20022d78 	.word	0x20022d78
   1a978:	404a0000 	.word	0x404a0000
   1a97c:	20022a80 	.word	0x20022a80
   1a980:	20022a88 	.word	0x20022a88
   1a984:	00000000 	.word	0x00000000

0001a988 <_strtod_l>:
   1a988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a98c:	461d      	mov	r5, r3
   1a98e:	b0a3      	sub	sp, #140	; 0x8c
   1a990:	2300      	movs	r3, #0
   1a992:	4683      	mov	fp, r0
   1a994:	4628      	mov	r0, r5
   1a996:	4688      	mov	r8, r1
   1a998:	9206      	str	r2, [sp, #24]
   1a99a:	2400      	movs	r4, #0
   1a99c:	931e      	str	r3, [sp, #120]	; 0x78
   1a99e:	f029 fed9 	bl	44754 <__localeconv_l>
   1a9a2:	2300      	movs	r3, #0
   1a9a4:	4606      	mov	r6, r0
   1a9a6:	6800      	ldr	r0, [r0, #0]
   1a9a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1a9ac:	f025 fdea 	bl	40584 <strlen>
   1a9b0:	4643      	mov	r3, r8
   1a9b2:	4681      	mov	r9, r0
   1a9b4:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1a9b8:	461a      	mov	r2, r3
   1a9ba:	f813 4b01 	ldrb.w	r4, [r3], #1
   1a9be:	2c2d      	cmp	r4, #45	; 0x2d
   1a9c0:	f200 8109 	bhi.w	1abd6 <_strtod_l+0x24e>
   1a9c4:	e8df f014 	tbh	[pc, r4, lsl #1]
   1a9c8:	010700c9 	.word	0x010700c9
   1a9cc:	01070107 	.word	0x01070107
   1a9d0:	01070107 	.word	0x01070107
   1a9d4:	01070107 	.word	0x01070107
   1a9d8:	00da0107 	.word	0x00da0107
   1a9dc:	00da00da 	.word	0x00da00da
   1a9e0:	00da00da 	.word	0x00da00da
   1a9e4:	01070107 	.word	0x01070107
   1a9e8:	01070107 	.word	0x01070107
   1a9ec:	01070107 	.word	0x01070107
   1a9f0:	01070107 	.word	0x01070107
   1a9f4:	01070107 	.word	0x01070107
   1a9f8:	01070107 	.word	0x01070107
   1a9fc:	01070107 	.word	0x01070107
   1aa00:	01070107 	.word	0x01070107
   1aa04:	01070107 	.word	0x01070107
   1aa08:	010700da 	.word	0x010700da
   1aa0c:	01070107 	.word	0x01070107
   1aa10:	01070107 	.word	0x01070107
   1aa14:	01070107 	.word	0x01070107
   1aa18:	01070107 	.word	0x01070107
   1aa1c:	002e0107 	.word	0x002e0107
   1aa20:	00d70107 	.word	0x00d70107
   1aa24:	2300      	movs	r3, #0
   1aa26:	9307      	str	r3, [sp, #28]
   1aa28:	f102 0a01 	add.w	sl, r2, #1
   1aa2c:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
   1aa30:	7854      	ldrb	r4, [r2, #1]
   1aa32:	2c00      	cmp	r4, #0
   1aa34:	f000 8091 	beq.w	1ab5a <_strtod_l+0x1d2>
   1aa38:	2c30      	cmp	r4, #48	; 0x30
   1aa3a:	f000 80d2 	beq.w	1abe2 <_strtod_l+0x25a>
   1aa3e:	2300      	movs	r3, #0
   1aa40:	930a      	str	r3, [sp, #40]	; 0x28
   1aa42:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1aa46:	6831      	ldr	r1, [r6, #0]
   1aa48:	2b09      	cmp	r3, #9
   1aa4a:	f200 82a2 	bhi.w	1af92 <_strtod_l+0x60a>
   1aa4e:	2600      	movs	r6, #0
   1aa50:	4650      	mov	r0, sl
   1aa52:	4637      	mov	r7, r6
   1aa54:	4635      	mov	r5, r6
   1aa56:	2d08      	cmp	r5, #8
   1aa58:	eb07 0487 	add.w	r4, r7, r7, lsl #2
   1aa5c:	f100 0001 	add.w	r0, r0, #1
   1aa60:	eb06 0286 	add.w	r2, r6, r6, lsl #2
   1aa64:	bfd8      	it	le
   1aa66:	eb03 0744 	addle.w	r7, r3, r4, lsl #1
   1aa6a:	f105 0501 	add.w	r5, r5, #1
   1aa6e:	901d      	str	r0, [sp, #116]	; 0x74
   1aa70:	bfc8      	it	gt
   1aa72:	eb03 0642 	addgt.w	r6, r3, r2, lsl #1
   1aa76:	7804      	ldrb	r4, [r0, #0]
   1aa78:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1aa7c:	2b09      	cmp	r3, #9
   1aa7e:	d9ea      	bls.n	1aa56 <_strtod_l+0xce>
   1aa80:	464a      	mov	r2, r9
   1aa82:	f025 fdad 	bl	405e0 <strncmp>
   1aa86:	4601      	mov	r1, r0
   1aa88:	2800      	cmp	r0, #0
   1aa8a:	d079      	beq.n	1ab80 <_strtod_l+0x1f8>
   1aa8c:	2300      	movs	r3, #0
   1aa8e:	9508      	str	r5, [sp, #32]
   1aa90:	4619      	mov	r1, r3
   1aa92:	469c      	mov	ip, r3
   1aa94:	f024 0220 	bic.w	r2, r4, #32
   1aa98:	2a45      	cmp	r2, #69	; 0x45
   1aa9a:	f040 80b4 	bne.w	1ac06 <_strtod_l+0x27e>
   1aa9e:	ea45 0203 	orr.w	r2, r5, r3
   1aaa2:	980a      	ldr	r0, [sp, #40]	; 0x28
   1aaa4:	4302      	orrs	r2, r0
   1aaa6:	d058      	beq.n	1ab5a <_strtod_l+0x1d2>
   1aaa8:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   1aaac:	f108 0201 	add.w	r2, r8, #1
   1aab0:	921d      	str	r2, [sp, #116]	; 0x74
   1aab2:	f898 4001 	ldrb.w	r4, [r8, #1]
   1aab6:	2c2b      	cmp	r4, #43	; 0x2b
   1aab8:	f000 8408 	beq.w	1b2cc <_strtod_l+0x944>
   1aabc:	2c2d      	cmp	r4, #45	; 0x2d
   1aabe:	f000 828b 	beq.w	1afd8 <_strtod_l+0x650>
   1aac2:	f04f 0900 	mov.w	r9, #0
   1aac6:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
   1aaca:	2a09      	cmp	r2, #9
   1aacc:	f200 8396 	bhi.w	1b1fc <_strtod_l+0x874>
   1aad0:	2c30      	cmp	r4, #48	; 0x30
   1aad2:	d105      	bne.n	1aae0 <_strtod_l+0x158>
   1aad4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1aad6:	3201      	adds	r2, #1
   1aad8:	921d      	str	r2, [sp, #116]	; 0x74
   1aada:	7814      	ldrb	r4, [r2, #0]
   1aadc:	2c30      	cmp	r4, #48	; 0x30
   1aade:	d0fa      	beq.n	1aad6 <_strtod_l+0x14e>
   1aae0:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
   1aae4:	2a08      	cmp	r2, #8
   1aae6:	f200 808e 	bhi.w	1ac06 <_strtod_l+0x27e>
   1aaea:	981d      	ldr	r0, [sp, #116]	; 0x74
   1aaec:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
   1aaf0:	900c      	str	r0, [sp, #48]	; 0x30
   1aaf2:	4604      	mov	r4, r0
   1aaf4:	3001      	adds	r0, #1
   1aaf6:	920b      	str	r2, [sp, #44]	; 0x2c
   1aaf8:	901d      	str	r0, [sp, #116]	; 0x74
   1aafa:	7864      	ldrb	r4, [r4, #1]
   1aafc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   1ab00:	f1be 0f09 	cmp.w	lr, #9
   1ab04:	d80d      	bhi.n	1ab22 <_strtod_l+0x19a>
   1ab06:	3001      	adds	r0, #1
   1ab08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1ab0c:	901d      	str	r0, [sp, #116]	; 0x74
   1ab0e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   1ab12:	7804      	ldrb	r4, [r0, #0]
   1ab14:	3a30      	subs	r2, #48	; 0x30
   1ab16:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   1ab1a:	f1be 0f09 	cmp.w	lr, #9
   1ab1e:	d9f2      	bls.n	1ab06 <_strtod_l+0x17e>
   1ab20:	920b      	str	r2, [sp, #44]	; 0x2c
   1ab22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ab24:	1a80      	subs	r0, r0, r2
   1ab26:	2808      	cmp	r0, #8
   1ab28:	dc04      	bgt.n	1ab34 <_strtod_l+0x1ac>
   1ab2a:	f644 601f 	movw	r0, #19999	; 0x4e1f
   1ab2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ab30:	4282      	cmp	r2, r0
   1ab32:	dd02      	ble.n	1ab3a <_strtod_l+0x1b2>
   1ab34:	f644 621f 	movw	r2, #19999	; 0x4e1f
   1ab38:	920b      	str	r2, [sp, #44]	; 0x2c
   1ab3a:	f1b9 0f00 	cmp.w	r9, #0
   1ab3e:	d002      	beq.n	1ab46 <_strtod_l+0x1be>
   1ab40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ab42:	4252      	negs	r2, r2
   1ab44:	920b      	str	r2, [sp, #44]	; 0x2c
   1ab46:	2d00      	cmp	r5, #0
   1ab48:	d161      	bne.n	1ac0e <_strtod_l+0x286>
   1ab4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ab4c:	4313      	orrs	r3, r2
   1ab4e:	f040 8097 	bne.w	1ac80 <_strtod_l+0x2f8>
   1ab52:	f1bc 0f00 	cmp.w	ip, #0
   1ab56:	f000 8256 	beq.w	1b006 <_strtod_l+0x67e>
   1ab5a:	9b06      	ldr	r3, [sp, #24]
   1ab5c:	b113      	cbz	r3, 1ab64 <_strtod_l+0x1dc>
   1ab5e:	9b06      	ldr	r3, [sp, #24]
   1ab60:	f8c3 8000 	str.w	r8, [r3]
   1ab64:	f04f 0800 	mov.w	r8, #0
   1ab68:	f04f 0900 	mov.w	r9, #0
   1ab6c:	ec49 8b10 	vmov	d0, r8, r9
   1ab70:	b023      	add	sp, #140	; 0x8c
   1ab72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab76:	2301      	movs	r3, #1
   1ab78:	9307      	str	r3, [sp, #28]
   1ab7a:	e755      	b.n	1aa28 <_strtod_l+0xa0>
   1ab7c:	931d      	str	r3, [sp, #116]	; 0x74
   1ab7e:	e71b      	b.n	1a9b8 <_strtod_l+0x30>
   1ab80:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1ab82:	460b      	mov	r3, r1
   1ab84:	9508      	str	r5, [sp, #32]
   1ab86:	eb02 0009 	add.w	r0, r2, r9
   1ab8a:	901d      	str	r0, [sp, #116]	; 0x74
   1ab8c:	f812 4009 	ldrb.w	r4, [r2, r9]
   1ab90:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
   1ab94:	2a09      	cmp	r2, #9
   1ab96:	f200 80a0 	bhi.w	1acda <_strtod_l+0x352>
   1ab9a:	1c58      	adds	r0, r3, #1
   1ab9c:	4696      	mov	lr, r2
   1ab9e:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
   1aba2:	2a00      	cmp	r2, #0
   1aba4:	f000 867c 	beq.w	1b8a0 <_strtod_l+0xf18>
   1aba8:	2801      	cmp	r0, #1
   1abaa:	4401      	add	r1, r0
   1abac:	f000 8672 	beq.w	1b894 <_strtod_l+0xf0c>
   1abb0:	442b      	add	r3, r5
   1abb2:	e004      	b.n	1abbe <_strtod_l+0x236>
   1abb4:	0067      	lsls	r7, r4, #1
   1abb6:	4283      	cmp	r3, r0
   1abb8:	4605      	mov	r5, r0
   1abba:	f000 8460 	beq.w	1b47e <_strtod_l+0xaf6>
   1abbe:	2d08      	cmp	r5, #8
   1abc0:	f105 0001 	add.w	r0, r5, #1
   1abc4:	eb07 0487 	add.w	r4, r7, r7, lsl #2
   1abc8:	ddf4      	ble.n	1abb4 <_strtod_l+0x22c>
   1abca:	eb06 0486 	add.w	r4, r6, r6, lsl #2
   1abce:	2810      	cmp	r0, #16
   1abd0:	bfd8      	it	le
   1abd2:	0066      	lslle	r6, r4, #1
   1abd4:	e7ef      	b.n	1abb6 <_strtod_l+0x22e>
   1abd6:	2300      	movs	r3, #0
   1abd8:	2c30      	cmp	r4, #48	; 0x30
   1abda:	4692      	mov	sl, r2
   1abdc:	9307      	str	r3, [sp, #28]
   1abde:	f47f af2e 	bne.w	1aa3e <_strtod_l+0xb6>
   1abe2:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1abe6:	2b58      	cmp	r3, #88	; 0x58
   1abe8:	d03a      	beq.n	1ac60 <_strtod_l+0x2d8>
   1abea:	2b78      	cmp	r3, #120	; 0x78
   1abec:	d038      	beq.n	1ac60 <_strtod_l+0x2d8>
   1abee:	4653      	mov	r3, sl
   1abf0:	3301      	adds	r3, #1
   1abf2:	931d      	str	r3, [sp, #116]	; 0x74
   1abf4:	781c      	ldrb	r4, [r3, #0]
   1abf6:	2c30      	cmp	r4, #48	; 0x30
   1abf8:	d0fa      	beq.n	1abf0 <_strtod_l+0x268>
   1abfa:	469a      	mov	sl, r3
   1abfc:	2c00      	cmp	r4, #0
   1abfe:	d03f      	beq.n	1ac80 <_strtod_l+0x2f8>
   1ac00:	2301      	movs	r3, #1
   1ac02:	930a      	str	r3, [sp, #40]	; 0x28
   1ac04:	e71d      	b.n	1aa42 <_strtod_l+0xba>
   1ac06:	2200      	movs	r2, #0
   1ac08:	920b      	str	r2, [sp, #44]	; 0x2c
   1ac0a:	2d00      	cmp	r5, #0
   1ac0c:	d09d      	beq.n	1ab4a <_strtod_l+0x1c2>
   1ac0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ac10:	4638      	mov	r0, r7
   1ac12:	462c      	mov	r4, r5
   1ac14:	1a5b      	subs	r3, r3, r1
   1ac16:	930b      	str	r3, [sp, #44]	; 0x2c
   1ac18:	9b08      	ldr	r3, [sp, #32]
   1ac1a:	461a      	mov	r2, r3
   1ac1c:	2b00      	cmp	r3, #0
   1ac1e:	bf08      	it	eq
   1ac20:	462a      	moveq	r2, r5
   1ac22:	9208      	str	r2, [sp, #32]
   1ac24:	f7fd fd3e 	bl	186a4 <__aeabi_ui2d>
   1ac28:	2d10      	cmp	r5, #16
   1ac2a:	bfa8      	it	ge
   1ac2c:	2410      	movge	r4, #16
   1ac2e:	2d09      	cmp	r5, #9
   1ac30:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ac34:	dc54      	bgt.n	1ace0 <_strtod_l+0x358>
   1ac36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ac38:	2b00      	cmp	r3, #0
   1ac3a:	d04b      	beq.n	1acd4 <_strtod_l+0x34c>
   1ac3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ac3e:	f340 84c4 	ble.w	1b5ca <_strtod_l+0xc42>
   1ac42:	2b16      	cmp	r3, #22
   1ac44:	f300 84e1 	bgt.w	1b60a <_strtod_l+0xc82>
   1ac48:	494a      	ldr	r1, [pc, #296]	; (1ad74 <_strtod_l+0x3ec>)
   1ac4a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1ac4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ac52:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ac56:	f7fd fd9f 	bl	18798 <__aeabi_dmul>
   1ac5a:	4680      	mov	r8, r0
   1ac5c:	4689      	mov	r9, r1
   1ac5e:	e013      	b.n	1ac88 <_strtod_l+0x300>
   1ac60:	9b07      	ldr	r3, [sp, #28]
   1ac62:	aa1e      	add	r2, sp, #120	; 0x78
   1ac64:	9502      	str	r5, [sp, #8]
   1ac66:	a91d      	add	r1, sp, #116	; 0x74
   1ac68:	9301      	str	r3, [sp, #4]
   1ac6a:	4658      	mov	r0, fp
   1ac6c:	9200      	str	r2, [sp, #0]
   1ac6e:	ab1f      	add	r3, sp, #124	; 0x7c
   1ac70:	4a41      	ldr	r2, [pc, #260]	; (1ad78 <_strtod_l+0x3f0>)
   1ac72:	f029 f9f7 	bl	44064 <__gethex>
   1ac76:	f010 0507 	ands.w	r5, r0, #7
   1ac7a:	4604      	mov	r4, r0
   1ac7c:	f040 81b4 	bne.w	1afe8 <_strtod_l+0x660>
   1ac80:	f04f 0800 	mov.w	r8, #0
   1ac84:	f04f 0900 	mov.w	r9, #0
   1ac88:	9a06      	ldr	r2, [sp, #24]
   1ac8a:	b10a      	cbz	r2, 1ac90 <_strtod_l+0x308>
   1ac8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1ac8e:	6013      	str	r3, [r2, #0]
   1ac90:	9b07      	ldr	r3, [sp, #28]
   1ac92:	2b00      	cmp	r3, #0
   1ac94:	f43f af6a 	beq.w	1ab6c <_strtod_l+0x1e4>
   1ac98:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   1ac9c:	4699      	mov	r9, r3
   1ac9e:	ec49 8b10 	vmov	d0, r8, r9
   1aca2:	b023      	add	sp, #140	; 0x8c
   1aca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aca8:	4934      	ldr	r1, [pc, #208]	; (1ad7c <_strtod_l+0x3f4>)
   1acaa:	a81d      	add	r0, sp, #116	; 0x74
   1acac:	f029 fc6c 	bl	44588 <__match>
   1acb0:	2800      	cmp	r0, #0
   1acb2:	f43f af52 	beq.w	1ab5a <_strtod_l+0x1d2>
   1acb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1acb8:	a81d      	add	r0, sp, #116	; 0x74
   1acba:	4931      	ldr	r1, [pc, #196]	; (1ad80 <_strtod_l+0x3f8>)
   1acbc:	3b01      	subs	r3, #1
   1acbe:	931d      	str	r3, [sp, #116]	; 0x74
   1acc0:	f029 fc62 	bl	44588 <__match>
   1acc4:	b910      	cbnz	r0, 1accc <_strtod_l+0x344>
   1acc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1acc8:	3301      	adds	r3, #1
   1acca:	931d      	str	r3, [sp, #116]	; 0x74
   1accc:	2300      	movs	r3, #0
   1acce:	4c2d      	ldr	r4, [pc, #180]	; (1ad84 <_strtod_l+0x3fc>)
   1acd0:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1acd4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   1acd8:	e7d6      	b.n	1ac88 <_strtod_l+0x300>
   1acda:	f04f 0c01 	mov.w	ip, #1
   1acde:	e6d9      	b.n	1aa94 <_strtod_l+0x10c>
   1ace0:	4b24      	ldr	r3, [pc, #144]	; (1ad74 <_strtod_l+0x3ec>)
   1ace2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1ace6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   1acea:	f7fd fd55 	bl	18798 <__aeabi_dmul>
   1acee:	4680      	mov	r8, r0
   1acf0:	4689      	mov	r9, r1
   1acf2:	4630      	mov	r0, r6
   1acf4:	f7fd fcd6 	bl	186a4 <__aeabi_ui2d>
   1acf8:	4602      	mov	r2, r0
   1acfa:	460b      	mov	r3, r1
   1acfc:	4640      	mov	r0, r8
   1acfe:	4649      	mov	r1, r9
   1ad00:	f7fd fb94 	bl	1842c <__adddf3>
   1ad04:	2d0f      	cmp	r5, #15
   1ad06:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ad0a:	dd94      	ble.n	1ac36 <_strtod_l+0x2ae>
   1ad0c:	1b2c      	subs	r4, r5, r4
   1ad0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ad10:	441c      	add	r4, r3
   1ad12:	2c00      	cmp	r4, #0
   1ad14:	f340 830b 	ble.w	1b32e <_strtod_l+0x9a6>
   1ad18:	f014 030f 	ands.w	r3, r4, #15
   1ad1c:	d00a      	beq.n	1ad34 <_strtod_l+0x3ac>
   1ad1e:	4915      	ldr	r1, [pc, #84]	; (1ad74 <_strtod_l+0x3ec>)
   1ad20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1ad24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ad28:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ad2c:	f7fd fd34 	bl	18798 <__aeabi_dmul>
   1ad30:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ad34:	f034 040f 	bics.w	r4, r4, #15
   1ad38:	f040 81c0 	bne.w	1b0bc <_strtod_l+0x734>
   1ad3c:	2300      	movs	r3, #0
   1ad3e:	930a      	str	r3, [sp, #40]	; 0x28
   1ad40:	9700      	str	r7, [sp, #0]
   1ad42:	462b      	mov	r3, r5
   1ad44:	9a08      	ldr	r2, [sp, #32]
   1ad46:	4651      	mov	r1, sl
   1ad48:	4658      	mov	r0, fp
   1ad4a:	f029 feab 	bl	44aa4 <__s2b>
   1ad4e:	9012      	str	r0, [sp, #72]	; 0x48
   1ad50:	2800      	cmp	r0, #0
   1ad52:	f000 83ea 	beq.w	1b52a <_strtod_l+0xba2>
   1ad56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ad58:	2100      	movs	r1, #0
   1ad5a:	2a00      	cmp	r2, #0
   1ad5c:	f1c2 0300 	rsb	r3, r2, #0
   1ad60:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   1ad64:	460f      	mov	r7, r1
   1ad66:	bfa8      	it	ge
   1ad68:	460b      	movge	r3, r1
   1ad6a:	4689      	mov	r9, r1
   1ad6c:	9213      	str	r2, [sp, #76]	; 0x4c
   1ad6e:	930e      	str	r3, [sp, #56]	; 0x38
   1ad70:	e0d0      	b.n	1af14 <_strtod_l+0x58c>
   1ad72:	bf00      	nop
   1ad74:	000491d8 	.word	0x000491d8
   1ad78:	0004add4 	.word	0x0004add4
   1ad7c:	0004adc4 	.word	0x0004adc4
   1ad80:	0004adc8 	.word	0x0004adc8
   1ad84:	7ff00000 	.word	0x7ff00000
   1ad88:	1ad2      	subs	r2, r2, r3
   1ad8a:	2a1f      	cmp	r2, #31
   1ad8c:	eba4 0402 	sub.w	r4, r4, r2
   1ad90:	f300 8239 	bgt.w	1b206 <_strtod_l+0x87e>
   1ad94:	2301      	movs	r3, #1
   1ad96:	2100      	movs	r1, #0
   1ad98:	4093      	lsls	r3, r2
   1ad9a:	9110      	str	r1, [sp, #64]	; 0x40
   1ad9c:	930c      	str	r3, [sp, #48]	; 0x30
   1ad9e:	4425      	add	r5, r4
   1ada0:	4434      	add	r4, r6
   1ada2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ada4:	42a6      	cmp	r6, r4
   1ada6:	441d      	add	r5, r3
   1ada8:	4633      	mov	r3, r6
   1adaa:	bfa8      	it	ge
   1adac:	4623      	movge	r3, r4
   1adae:	42ab      	cmp	r3, r5
   1adb0:	bfa8      	it	ge
   1adb2:	462b      	movge	r3, r5
   1adb4:	2b00      	cmp	r3, #0
   1adb6:	dd02      	ble.n	1adbe <_strtod_l+0x436>
   1adb8:	1ae4      	subs	r4, r4, r3
   1adba:	1aed      	subs	r5, r5, r3
   1adbc:	1af6      	subs	r6, r6, r3
   1adbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1adc0:	2b00      	cmp	r3, #0
   1adc2:	f040 8198 	bne.w	1b0f6 <_strtod_l+0x76e>
   1adc6:	2c00      	cmp	r4, #0
   1adc8:	f300 81c2 	bgt.w	1b150 <_strtod_l+0x7c8>
   1adcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1adce:	2b00      	cmp	r3, #0
   1add0:	f300 81e6 	bgt.w	1b1a0 <_strtod_l+0x818>
   1add4:	2d00      	cmp	r5, #0
   1add6:	f300 81ef 	bgt.w	1b1b8 <_strtod_l+0x830>
   1adda:	2e00      	cmp	r6, #0
   1addc:	dd08      	ble.n	1adf0 <_strtod_l+0x468>
   1adde:	4639      	mov	r1, r7
   1ade0:	4632      	mov	r2, r6
   1ade2:	4658      	mov	r0, fp
   1ade4:	f029 fffc 	bl	44de0 <__lshift>
   1ade8:	4607      	mov	r7, r0
   1adea:	2800      	cmp	r0, #0
   1adec:	f000 81e1 	beq.w	1b1b2 <_strtod_l+0x82a>
   1adf0:	4652      	mov	r2, sl
   1adf2:	991e      	ldr	r1, [sp, #120]	; 0x78
   1adf4:	4658      	mov	r0, fp
   1adf6:	f02a f86b 	bl	44ed0 <__mdiff>
   1adfa:	4681      	mov	r9, r0
   1adfc:	2800      	cmp	r0, #0
   1adfe:	f000 81d8 	beq.w	1b1b2 <_strtod_l+0x82a>
   1ae02:	2300      	movs	r3, #0
   1ae04:	68c2      	ldr	r2, [r0, #12]
   1ae06:	4639      	mov	r1, r7
   1ae08:	60c3      	str	r3, [r0, #12]
   1ae0a:	920f      	str	r2, [sp, #60]	; 0x3c
   1ae0c:	f02a f844 	bl	44e98 <__mcmp>
   1ae10:	2800      	cmp	r0, #0
   1ae12:	f2c0 842a 	blt.w	1b66a <_strtod_l+0xce2>
   1ae16:	9e05      	ldr	r6, [sp, #20]
   1ae18:	f000 84b6 	beq.w	1b788 <_strtod_l+0xe00>
   1ae1c:	4639      	mov	r1, r7
   1ae1e:	4648      	mov	r0, r9
   1ae20:	f02a f9be 	bl	451a0 <__ratio>
   1ae24:	2200      	movs	r2, #0
   1ae26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ae2a:	ee10 0a10 	vmov	r0, s0
   1ae2e:	ec55 4b10 	vmov	r4, r5, d0
   1ae32:	4629      	mov	r1, r5
   1ae34:	f7fd ff2c 	bl	18c90 <__aeabi_dcmple>
   1ae38:	2800      	cmp	r0, #0
   1ae3a:	f000 81c7 	beq.w	1b1cc <_strtod_l+0x844>
   1ae3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ae40:	2b00      	cmp	r3, #0
   1ae42:	f000 81e8 	beq.w	1b216 <_strtod_l+0x88e>
   1ae46:	2300      	movs	r3, #0
   1ae48:	4cbb      	ldr	r4, [pc, #748]	; (1b138 <_strtod_l+0x7b0>)
   1ae4a:	ed9f 7bb7 	vldr	d7, [pc, #732]	; 1b128 <_strtod_l+0x7a0>
   1ae4e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   1ae52:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1ae56:	4db9      	ldr	r5, [pc, #740]	; (1b13c <_strtod_l+0x7b4>)
   1ae58:	4bb9      	ldr	r3, [pc, #740]	; (1b140 <_strtod_l+0x7b8>)
   1ae5a:	ea06 0405 	and.w	r4, r6, r5
   1ae5e:	429c      	cmp	r4, r3
   1ae60:	f000 8202 	beq.w	1b268 <_strtod_l+0x8e0>
   1ae64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ae66:	b353      	cbz	r3, 1aebe <_strtod_l+0x536>
   1ae68:	f1b4 6fd4 	cmp.w	r4, #111149056	; 0x6a00000
   1ae6c:	d827      	bhi.n	1aebe <_strtod_l+0x536>
   1ae6e:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
   1ae72:	a3af      	add	r3, pc, #700	; (adr r3, 1b130 <_strtod_l+0x7a8>)
   1ae74:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ae78:	4628      	mov	r0, r5
   1ae7a:	4631      	mov	r1, r6
   1ae7c:	f7fd ff08 	bl	18c90 <__aeabi_dcmple>
   1ae80:	b1c0      	cbz	r0, 1aeb4 <_strtod_l+0x52c>
   1ae82:	4628      	mov	r0, r5
   1ae84:	4631      	mov	r1, r6
   1ae86:	f7ff f97d 	bl	1a184 <__aeabi_d2uiz>
   1ae8a:	2800      	cmp	r0, #0
   1ae8c:	f000 830f 	beq.w	1b4ae <_strtod_l+0xb26>
   1ae90:	f7fd fc08 	bl	186a4 <__aeabi_ui2d>
   1ae94:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1ae98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ae9a:	2b00      	cmp	r3, #0
   1ae9c:	f040 8302 	bne.w	1b4a4 <_strtod_l+0xb1c>
   1aea0:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   1aea4:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   1aea8:	9116      	str	r1, [sp, #88]	; 0x58
   1aeaa:	9317      	str	r3, [sp, #92]	; 0x5c
   1aeac:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   1aeb0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1aeb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1aeb6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   1aeba:	1b1b      	subs	r3, r3, r4
   1aebc:	930d      	str	r3, [sp, #52]	; 0x34
   1aebe:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
   1aec2:	ed9d 0b08 	vldr	d0, [sp, #32]
   1aec6:	f02a f883 	bl	44fd0 <__ulp>
   1aeca:	4628      	mov	r0, r5
   1aecc:	4631      	mov	r1, r6
   1aece:	ec53 2b10 	vmov	r2, r3, d0
   1aed2:	f7fd fc61 	bl	18798 <__aeabi_dmul>
   1aed6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1aeda:	f7fd faa7 	bl	1842c <__adddf3>
   1aede:	460d      	mov	r5, r1
   1aee0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1aee4:	4b95      	ldr	r3, [pc, #596]	; (1b13c <_strtod_l+0x7b4>)
   1aee6:	402b      	ands	r3, r5
   1aee8:	42a3      	cmp	r3, r4
   1aeea:	d103      	bne.n	1aef4 <_strtod_l+0x56c>
   1aeec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1aeee:	2b00      	cmp	r3, #0
   1aef0:	f000 81f8 	beq.w	1b2e4 <_strtod_l+0x95c>
   1aef4:	991e      	ldr	r1, [sp, #120]	; 0x78
   1aef6:	4658      	mov	r0, fp
   1aef8:	f029 fd88 	bl	44a0c <_Bfree>
   1aefc:	4651      	mov	r1, sl
   1aefe:	4658      	mov	r0, fp
   1af00:	f029 fd84 	bl	44a0c <_Bfree>
   1af04:	4639      	mov	r1, r7
   1af06:	4658      	mov	r0, fp
   1af08:	f029 fd80 	bl	44a0c <_Bfree>
   1af0c:	4649      	mov	r1, r9
   1af0e:	4658      	mov	r0, fp
   1af10:	f029 fd7c 	bl	44a0c <_Bfree>
   1af14:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1af16:	4658      	mov	r0, fp
   1af18:	6861      	ldr	r1, [r4, #4]
   1af1a:	f029 fd51 	bl	449c0 <_Balloc>
   1af1e:	4682      	mov	sl, r0
   1af20:	2800      	cmp	r0, #0
   1af22:	f000 8146 	beq.w	1b1b2 <_strtod_l+0x82a>
   1af26:	6922      	ldr	r2, [r4, #16]
   1af28:	f104 010c 	add.w	r1, r4, #12
   1af2c:	300c      	adds	r0, #12
   1af2e:	3202      	adds	r2, #2
   1af30:	ed9d 7b04 	vldr	d7, [sp, #16]
   1af34:	0092      	lsls	r2, r2, #2
   1af36:	ed8d 7b08 	vstr	d7, [sp, #32]
   1af3a:	f7fe ffb9 	bl	19eb0 <memcpy>
   1af3e:	aa20      	add	r2, sp, #128	; 0x80
   1af40:	a91f      	add	r1, sp, #124	; 0x7c
   1af42:	4658      	mov	r0, fp
   1af44:	ed9d 0b08 	vldr	d0, [sp, #32]
   1af48:	f02a f8ca 	bl	450e0 <__d2b>
   1af4c:	901e      	str	r0, [sp, #120]	; 0x78
   1af4e:	2800      	cmp	r0, #0
   1af50:	f000 8107 	beq.w	1b162 <_strtod_l+0x7da>
   1af54:	2101      	movs	r1, #1
   1af56:	4658      	mov	r0, fp
   1af58:	f029 fe40 	bl	44bdc <__i2b>
   1af5c:	4607      	mov	r7, r0
   1af5e:	2800      	cmp	r0, #0
   1af60:	f000 8127 	beq.w	1b1b2 <_strtod_l+0x82a>
   1af64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1af66:	2b00      	cmp	r3, #0
   1af68:	f2c0 8144 	blt.w	1b1f4 <_strtod_l+0x86c>
   1af6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1af6e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   1af70:	189e      	adds	r6, r3, r2
   1af72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1af74:	9c20      	ldr	r4, [sp, #128]	; 0x80
   1af76:	1a9b      	subs	r3, r3, r2
   1af78:	4a72      	ldr	r2, [pc, #456]	; (1b144 <_strtod_l+0x7bc>)
   1af7a:	4423      	add	r3, r4
   1af7c:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
   1af80:	3b01      	subs	r3, #1
   1af82:	4293      	cmp	r3, r2
   1af84:	f6ff af00 	blt.w	1ad88 <_strtod_l+0x400>
   1af88:	2300      	movs	r3, #0
   1af8a:	9310      	str	r3, [sp, #64]	; 0x40
   1af8c:	2301      	movs	r3, #1
   1af8e:	930c      	str	r3, [sp, #48]	; 0x30
   1af90:	e705      	b.n	1ad9e <_strtod_l+0x416>
   1af92:	464a      	mov	r2, r9
   1af94:	4650      	mov	r0, sl
   1af96:	f025 fb23 	bl	405e0 <strncmp>
   1af9a:	9008      	str	r0, [sp, #32]
   1af9c:	2800      	cmp	r0, #0
   1af9e:	f040 8085 	bne.w	1b0ac <_strtod_l+0x724>
   1afa2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1afa4:	eb03 0209 	add.w	r2, r3, r9
   1afa8:	921d      	str	r2, [sp, #116]	; 0x74
   1afaa:	f813 4009 	ldrb.w	r4, [r3, r9]
   1afae:	9b08      	ldr	r3, [sp, #32]
   1afb0:	2c30      	cmp	r4, #48	; 0x30
   1afb2:	d105      	bne.n	1afc0 <_strtod_l+0x638>
   1afb4:	3201      	adds	r2, #1
   1afb6:	3301      	adds	r3, #1
   1afb8:	921d      	str	r2, [sp, #116]	; 0x74
   1afba:	7814      	ldrb	r4, [r2, #0]
   1afbc:	2c30      	cmp	r4, #48	; 0x30
   1afbe:	d0f9      	beq.n	1afb4 <_strtod_l+0x62c>
   1afc0:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
   1afc4:	2a08      	cmp	r2, #8
   1afc6:	f240 8311 	bls.w	1b5ec <_strtod_l+0xc64>
   1afca:	2100      	movs	r1, #0
   1afcc:	f04f 0c01 	mov.w	ip, #1
   1afd0:	460d      	mov	r5, r1
   1afd2:	460e      	mov	r6, r1
   1afd4:	460f      	mov	r7, r1
   1afd6:	e55d      	b.n	1aa94 <_strtod_l+0x10c>
   1afd8:	f04f 0901 	mov.w	r9, #1
   1afdc:	f108 0202 	add.w	r2, r8, #2
   1afe0:	921d      	str	r2, [sp, #116]	; 0x74
   1afe2:	f898 4002 	ldrb.w	r4, [r8, #2]
   1afe6:	e56e      	b.n	1aac6 <_strtod_l+0x13e>
   1afe8:	2d06      	cmp	r5, #6
   1afea:	f040 8269 	bne.w	1b4c0 <_strtod_l+0xb38>
   1afee:	9a06      	ldr	r2, [sp, #24]
   1aff0:	f10a 0301 	add.w	r3, sl, #1
   1aff4:	2a00      	cmp	r2, #0
   1aff6:	f43f adb5 	beq.w	1ab64 <_strtod_l+0x1dc>
   1affa:	6013      	str	r3, [r2, #0]
   1affc:	f04f 0800 	mov.w	r8, #0
   1b000:	f04f 0900 	mov.w	r9, #0
   1b004:	e5b2      	b.n	1ab6c <_strtod_l+0x1e4>
   1b006:	3c49      	subs	r4, #73	; 0x49
   1b008:	2c25      	cmp	r4, #37	; 0x25
   1b00a:	f63f ada6 	bhi.w	1ab5a <_strtod_l+0x1d2>
   1b00e:	a301      	add	r3, pc, #4	; (adr r3, 1b014 <_strtod_l+0x68c>)
   1b010:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   1b014:	0001aca9 	.word	0x0001aca9
   1b018:	0001ab5b 	.word	0x0001ab5b
   1b01c:	0001ab5b 	.word	0x0001ab5b
   1b020:	0001ab5b 	.word	0x0001ab5b
   1b024:	0001ab5b 	.word	0x0001ab5b
   1b028:	0001b0d5 	.word	0x0001b0d5
   1b02c:	0001ab5b 	.word	0x0001ab5b
   1b030:	0001ab5b 	.word	0x0001ab5b
   1b034:	0001ab5b 	.word	0x0001ab5b
   1b038:	0001ab5b 	.word	0x0001ab5b
   1b03c:	0001ab5b 	.word	0x0001ab5b
   1b040:	0001ab5b 	.word	0x0001ab5b
   1b044:	0001ab5b 	.word	0x0001ab5b
   1b048:	0001ab5b 	.word	0x0001ab5b
   1b04c:	0001ab5b 	.word	0x0001ab5b
   1b050:	0001ab5b 	.word	0x0001ab5b
   1b054:	0001ab5b 	.word	0x0001ab5b
   1b058:	0001ab5b 	.word	0x0001ab5b
   1b05c:	0001ab5b 	.word	0x0001ab5b
   1b060:	0001ab5b 	.word	0x0001ab5b
   1b064:	0001ab5b 	.word	0x0001ab5b
   1b068:	0001ab5b 	.word	0x0001ab5b
   1b06c:	0001ab5b 	.word	0x0001ab5b
   1b070:	0001ab5b 	.word	0x0001ab5b
   1b074:	0001ab5b 	.word	0x0001ab5b
   1b078:	0001ab5b 	.word	0x0001ab5b
   1b07c:	0001ab5b 	.word	0x0001ab5b
   1b080:	0001ab5b 	.word	0x0001ab5b
   1b084:	0001ab5b 	.word	0x0001ab5b
   1b088:	0001ab5b 	.word	0x0001ab5b
   1b08c:	0001ab5b 	.word	0x0001ab5b
   1b090:	0001ab5b 	.word	0x0001ab5b
   1b094:	0001aca9 	.word	0x0001aca9
   1b098:	0001ab5b 	.word	0x0001ab5b
   1b09c:	0001ab5b 	.word	0x0001ab5b
   1b0a0:	0001ab5b 	.word	0x0001ab5b
   1b0a4:	0001ab5b 	.word	0x0001ab5b
   1b0a8:	0001b0d5 	.word	0x0001b0d5
   1b0ac:	2300      	movs	r3, #0
   1b0ae:	9308      	str	r3, [sp, #32]
   1b0b0:	461e      	mov	r6, r3
   1b0b2:	469c      	mov	ip, r3
   1b0b4:	461f      	mov	r7, r3
   1b0b6:	4619      	mov	r1, r3
   1b0b8:	461d      	mov	r5, r3
   1b0ba:	e4eb      	b.n	1aa94 <_strtod_l+0x10c>
   1b0bc:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   1b0c0:	f340 823c 	ble.w	1b53c <_strtod_l+0xbb4>
   1b0c4:	4b1d      	ldr	r3, [pc, #116]	; (1b13c <_strtod_l+0x7b4>)
   1b0c6:	9305      	str	r3, [sp, #20]
   1b0c8:	2322      	movs	r3, #34	; 0x22
   1b0ca:	2200      	movs	r2, #0
   1b0cc:	f8cb 3000 	str.w	r3, [fp]
   1b0d0:	9204      	str	r2, [sp, #16]
   1b0d2:	e5ff      	b.n	1acd4 <_strtod_l+0x34c>
   1b0d4:	491c      	ldr	r1, [pc, #112]	; (1b148 <_strtod_l+0x7c0>)
   1b0d6:	a81d      	add	r0, sp, #116	; 0x74
   1b0d8:	f029 fa56 	bl	44588 <__match>
   1b0dc:	2800      	cmp	r0, #0
   1b0de:	f43f ad3c 	beq.w	1ab5a <_strtod_l+0x1d2>
   1b0e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1b0e4:	781b      	ldrb	r3, [r3, #0]
   1b0e6:	2b28      	cmp	r3, #40	; 0x28
   1b0e8:	f000 838e 	beq.w	1b808 <_strtod_l+0xe80>
   1b0ec:	2300      	movs	r3, #0
   1b0ee:	4817      	ldr	r0, [pc, #92]	; (1b14c <_strtod_l+0x7c4>)
   1b0f0:	e9cd 3004 	strd	r3, r0, [sp, #16]
   1b0f4:	e5ee      	b.n	1acd4 <_strtod_l+0x34c>
   1b0f6:	4639      	mov	r1, r7
   1b0f8:	461a      	mov	r2, r3
   1b0fa:	4658      	mov	r0, fp
   1b0fc:	f029 fe20 	bl	44d40 <__pow5mult>
   1b100:	4607      	mov	r7, r0
   1b102:	2800      	cmp	r0, #0
   1b104:	d055      	beq.n	1b1b2 <_strtod_l+0x82a>
   1b106:	4601      	mov	r1, r0
   1b108:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1b10a:	4658      	mov	r0, fp
   1b10c:	f029 fd70 	bl	44bf0 <__multiply>
   1b110:	2800      	cmp	r0, #0
   1b112:	d04e      	beq.n	1b1b2 <_strtod_l+0x82a>
   1b114:	900f      	str	r0, [sp, #60]	; 0x3c
   1b116:	4658      	mov	r0, fp
   1b118:	991e      	ldr	r1, [sp, #120]	; 0x78
   1b11a:	f029 fc77 	bl	44a0c <_Bfree>
   1b11e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b120:	931e      	str	r3, [sp, #120]	; 0x78
   1b122:	e650      	b.n	1adc6 <_strtod_l+0x43e>
   1b124:	f3af 8000 	nop.w
   1b128:	00000000 	.word	0x00000000
   1b12c:	3ff00000 	.word	0x3ff00000
   1b130:	ffc00000 	.word	0xffc00000
   1b134:	41dfffff 	.word	0x41dfffff
   1b138:	3ff00000 	.word	0x3ff00000
   1b13c:	7ff00000 	.word	0x7ff00000
   1b140:	7fe00000 	.word	0x7fe00000
   1b144:	fffffc02 	.word	0xfffffc02
   1b148:	0004add0 	.word	0x0004add0
   1b14c:	fff80000 	.word	0xfff80000
   1b150:	4622      	mov	r2, r4
   1b152:	991e      	ldr	r1, [sp, #120]	; 0x78
   1b154:	4658      	mov	r0, fp
   1b156:	f029 fe43 	bl	44de0 <__lshift>
   1b15a:	901e      	str	r0, [sp, #120]	; 0x78
   1b15c:	2800      	cmp	r0, #0
   1b15e:	f47f ae35 	bne.w	1adcc <_strtod_l+0x444>
   1b162:	464c      	mov	r4, r9
   1b164:	4bb4      	ldr	r3, [pc, #720]	; (1b438 <_strtod_l+0xab0>)
   1b166:	2200      	movs	r2, #0
   1b168:	9305      	str	r3, [sp, #20]
   1b16a:	2322      	movs	r3, #34	; 0x22
   1b16c:	9204      	str	r2, [sp, #16]
   1b16e:	f8cb 3000 	str.w	r3, [fp]
   1b172:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   1b176:	4601      	mov	r1, r0
   1b178:	4658      	mov	r0, fp
   1b17a:	f029 fc47 	bl	44a0c <_Bfree>
   1b17e:	4651      	mov	r1, sl
   1b180:	4658      	mov	r0, fp
   1b182:	f029 fc43 	bl	44a0c <_Bfree>
   1b186:	4639      	mov	r1, r7
   1b188:	4658      	mov	r0, fp
   1b18a:	f029 fc3f 	bl	44a0c <_Bfree>
   1b18e:	9912      	ldr	r1, [sp, #72]	; 0x48
   1b190:	4658      	mov	r0, fp
   1b192:	f029 fc3b 	bl	44a0c <_Bfree>
   1b196:	4621      	mov	r1, r4
   1b198:	4658      	mov	r0, fp
   1b19a:	f029 fc37 	bl	44a0c <_Bfree>
   1b19e:	e573      	b.n	1ac88 <_strtod_l+0x300>
   1b1a0:	4651      	mov	r1, sl
   1b1a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b1a4:	4658      	mov	r0, fp
   1b1a6:	f029 fdcb 	bl	44d40 <__pow5mult>
   1b1aa:	4682      	mov	sl, r0
   1b1ac:	2800      	cmp	r0, #0
   1b1ae:	f47f ae11 	bne.w	1add4 <_strtod_l+0x44c>
   1b1b2:	464c      	mov	r4, r9
   1b1b4:	981e      	ldr	r0, [sp, #120]	; 0x78
   1b1b6:	e7d5      	b.n	1b164 <_strtod_l+0x7dc>
   1b1b8:	4651      	mov	r1, sl
   1b1ba:	462a      	mov	r2, r5
   1b1bc:	4658      	mov	r0, fp
   1b1be:	f029 fe0f 	bl	44de0 <__lshift>
   1b1c2:	4682      	mov	sl, r0
   1b1c4:	2800      	cmp	r0, #0
   1b1c6:	f47f ae08 	bne.w	1adda <_strtod_l+0x452>
   1b1ca:	e7f2      	b.n	1b1b2 <_strtod_l+0x82a>
   1b1cc:	4b9b      	ldr	r3, [pc, #620]	; (1b43c <_strtod_l+0xab4>)
   1b1ce:	4620      	mov	r0, r4
   1b1d0:	4629      	mov	r1, r5
   1b1d2:	2200      	movs	r2, #0
   1b1d4:	f7fd fae0 	bl	18798 <__aeabi_dmul>
   1b1d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b1da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1b1de:	2b00      	cmp	r3, #0
   1b1e0:	d13d      	bne.n	1b25e <_strtod_l+0x8d6>
   1b1e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1b1e6:	9014      	str	r0, [sp, #80]	; 0x50
   1b1e8:	9315      	str	r3, [sp, #84]	; 0x54
   1b1ea:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   1b1ee:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   1b1f2:	e630      	b.n	1ae56 <_strtod_l+0x4ce>
   1b1f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b1f6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1b1f8:	1ad5      	subs	r5, r2, r3
   1b1fa:	e6ba      	b.n	1af72 <_strtod_l+0x5ea>
   1b1fc:	2200      	movs	r2, #0
   1b1fe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1b202:	920b      	str	r2, [sp, #44]	; 0x2c
   1b204:	e49f      	b.n	1ab46 <_strtod_l+0x1be>
   1b206:	498e      	ldr	r1, [pc, #568]	; (1b440 <_strtod_l+0xab8>)
   1b208:	2201      	movs	r2, #1
   1b20a:	1acb      	subs	r3, r1, r3
   1b20c:	920c      	str	r2, [sp, #48]	; 0x30
   1b20e:	fa02 f303 	lsl.w	r3, r2, r3
   1b212:	9310      	str	r3, [sp, #64]	; 0x40
   1b214:	e5c3      	b.n	1ad9e <_strtod_l+0x416>
   1b216:	9b04      	ldr	r3, [sp, #16]
   1b218:	2b00      	cmp	r3, #0
   1b21a:	f040 811f 	bne.w	1b45c <_strtod_l+0xad4>
   1b21e:	f3c6 0313 	ubfx	r3, r6, #0, #20
   1b222:	2b00      	cmp	r3, #0
   1b224:	d155      	bne.n	1b2d2 <_strtod_l+0x94a>
   1b226:	2200      	movs	r2, #0
   1b228:	4b86      	ldr	r3, [pc, #536]	; (1b444 <_strtod_l+0xabc>)
   1b22a:	4620      	mov	r0, r4
   1b22c:	4629      	mov	r1, r5
   1b22e:	f7fd fd25 	bl	18c7c <__aeabi_dcmplt>
   1b232:	2800      	cmp	r0, #0
   1b234:	f040 8210 	bne.w	1b658 <_strtod_l+0xcd0>
   1b238:	2200      	movs	r2, #0
   1b23a:	4b80      	ldr	r3, [pc, #512]	; (1b43c <_strtod_l+0xab4>)
   1b23c:	4620      	mov	r0, r4
   1b23e:	4629      	mov	r1, r5
   1b240:	f7fd faaa 	bl	18798 <__aeabi_dmul>
   1b244:	460a      	mov	r2, r1
   1b246:	4601      	mov	r1, r0
   1b248:	901a      	str	r0, [sp, #104]	; 0x68
   1b24a:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   1b24e:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
   1b252:	931b      	str	r3, [sp, #108]	; 0x6c
   1b254:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   1b258:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   1b25c:	e5fb      	b.n	1ae56 <_strtod_l+0x4ce>
   1b25e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   1b262:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
   1b266:	e7c0      	b.n	1b1ea <_strtod_l+0x862>
   1b268:	f1a6 7354 	sub.w	r3, r6, #55574528	; 0x3500000
   1b26c:	4e76      	ldr	r6, [pc, #472]	; (1b448 <_strtod_l+0xac0>)
   1b26e:	9305      	str	r3, [sp, #20]
   1b270:	ed9d 7b04 	vldr	d7, [sp, #16]
   1b274:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1b278:	eeb0 0a47 	vmov.f32	s0, s14
   1b27c:	eef0 0a67 	vmov.f32	s1, s15
   1b280:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1b284:	f029 fea4 	bl	44fd0 <__ulp>
   1b288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1b28c:	ec53 2b10 	vmov	r2, r3, d0
   1b290:	f7fd fa82 	bl	18798 <__aeabi_dmul>
   1b294:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b298:	f7fd f8c8 	bl	1842c <__adddf3>
   1b29c:	468c      	mov	ip, r1
   1b29e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b2a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1b2a6:	460b      	mov	r3, r1
   1b2a8:	4602      	mov	r2, r0
   1b2aa:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
   1b2ae:	ea0c 0305 	and.w	r3, ip, r5
   1b2b2:	42b3      	cmp	r3, r6
   1b2b4:	f240 8100 	bls.w	1b4b8 <_strtod_l+0xb30>
   1b2b8:	4a64      	ldr	r2, [pc, #400]	; (1b44c <_strtod_l+0xac4>)
   1b2ba:	4291      	cmp	r1, r2
   1b2bc:	f000 81c1 	beq.w	1b642 <_strtod_l+0xcba>
   1b2c0:	f04f 33ff 	mov.w	r3, #4294967295
   1b2c4:	4961      	ldr	r1, [pc, #388]	; (1b44c <_strtod_l+0xac4>)
   1b2c6:	e9cd 3104 	strd	r3, r1, [sp, #16]
   1b2ca:	e613      	b.n	1aef4 <_strtod_l+0x56c>
   1b2cc:	f04f 0900 	mov.w	r9, #0
   1b2d0:	e684      	b.n	1afdc <_strtod_l+0x654>
   1b2d2:	ed9f 7b51 	vldr	d7, [pc, #324]	; 1b418 <_strtod_l+0xa90>
   1b2d6:	2300      	movs	r3, #0
   1b2d8:	4c5d      	ldr	r4, [pc, #372]	; (1b450 <_strtod_l+0xac8>)
   1b2da:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1b2de:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   1b2e2:	e5b8      	b.n	1ae56 <_strtod_l+0x4ce>
   1b2e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1b2e8:	f7fd fcf0 	bl	18ccc <__aeabi_d2iz>
   1b2ec:	f7fd f9ea 	bl	186c4 <__aeabi_i2d>
   1b2f0:	460b      	mov	r3, r1
   1b2f2:	4602      	mov	r2, r0
   1b2f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1b2f8:	f7fd f896 	bl	18428 <__aeabi_dsub>
   1b2fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b2fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1b302:	2b00      	cmp	r3, #0
   1b304:	d173      	bne.n	1b3ee <_strtod_l+0xa66>
   1b306:	9b04      	ldr	r3, [sp, #16]
   1b308:	2b00      	cmp	r3, #0
   1b30a:	d170      	bne.n	1b3ee <_strtod_l+0xa66>
   1b30c:	f3c5 0513 	ubfx	r5, r5, #0, #20
   1b310:	2d00      	cmp	r5, #0
   1b312:	d16c      	bne.n	1b3ee <_strtod_l+0xa66>
   1b314:	a342      	add	r3, pc, #264	; (adr r3, 1b420 <_strtod_l+0xa98>)
   1b316:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b31a:	f7fd fcaf 	bl	18c7c <__aeabi_dcmplt>
   1b31e:	2800      	cmp	r0, #0
   1b320:	f43f ade8 	beq.w	1aef4 <_strtod_l+0x56c>
   1b324:	464c      	mov	r4, r9
   1b326:	981e      	ldr	r0, [sp, #120]	; 0x78
   1b328:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   1b32c:	e723      	b.n	1b176 <_strtod_l+0x7ee>
   1b32e:	f43f ad05 	beq.w	1ad3c <_strtod_l+0x3b4>
   1b332:	4264      	negs	r4, r4
   1b334:	f014 020f 	ands.w	r2, r4, #15
   1b338:	d00a      	beq.n	1b350 <_strtod_l+0x9c8>
   1b33a:	4b46      	ldr	r3, [pc, #280]	; (1b454 <_strtod_l+0xacc>)
   1b33c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1b340:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b344:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b348:	f7fd fb50 	bl	189ec <__aeabi_ddiv>
   1b34c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b350:	1124      	asrs	r4, r4, #4
   1b352:	f43f acf3 	beq.w	1ad3c <_strtod_l+0x3b4>
   1b356:	2c1f      	cmp	r4, #31
   1b358:	dc41      	bgt.n	1b3de <_strtod_l+0xa56>
   1b35a:	f014 0310 	ands.w	r3, r4, #16
   1b35e:	930a      	str	r3, [sp, #40]	; 0x28
   1b360:	f040 8249 	bne.w	1b7f6 <_strtod_l+0xe6e>
   1b364:	2c00      	cmp	r4, #0
   1b366:	f340 824c 	ble.w	1b802 <_strtod_l+0xe7a>
   1b36a:	4e3b      	ldr	r6, [pc, #236]	; (1b458 <_strtod_l+0xad0>)
   1b36c:	f04f 0c00 	mov.w	ip, #0
   1b370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b374:	f014 0f01 	tst.w	r4, #1
   1b378:	4610      	mov	r0, r2
   1b37a:	4619      	mov	r1, r3
   1b37c:	d007      	beq.n	1b38e <_strtod_l+0xa06>
   1b37e:	e9d6 2300 	ldrd	r2, r3, [r6]
   1b382:	f7fd fa09 	bl	18798 <__aeabi_dmul>
   1b386:	f04f 0c01 	mov.w	ip, #1
   1b38a:	4602      	mov	r2, r0
   1b38c:	460b      	mov	r3, r1
   1b38e:	1064      	asrs	r4, r4, #1
   1b390:	f106 0608 	add.w	r6, r6, #8
   1b394:	d1ee      	bne.n	1b374 <_strtod_l+0x9ec>
   1b396:	f1bc 0f00 	cmp.w	ip, #0
   1b39a:	f040 8283 	bne.w	1b8a4 <_strtod_l+0xf1c>
   1b39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b3a0:	2b00      	cmp	r3, #0
   1b3a2:	f000 822e 	beq.w	1b802 <_strtod_l+0xe7a>
   1b3a6:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1b3aa:	f3c2 530a 	ubfx	r3, r2, #20, #11
   1b3ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1b3b2:	2b00      	cmp	r3, #0
   1b3b4:	dd0a      	ble.n	1b3cc <_strtod_l+0xa44>
   1b3b6:	2b1f      	cmp	r3, #31
   1b3b8:	f340 825c 	ble.w	1b874 <_strtod_l+0xeec>
   1b3bc:	2100      	movs	r1, #0
   1b3be:	2b34      	cmp	r3, #52	; 0x34
   1b3c0:	9104      	str	r1, [sp, #16]
   1b3c2:	f340 825f 	ble.w	1b884 <_strtod_l+0xefc>
   1b3c6:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
   1b3ca:	9305      	str	r3, [sp, #20]
   1b3cc:	2200      	movs	r2, #0
   1b3ce:	2300      	movs	r3, #0
   1b3d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b3d4:	f7fd fc48 	bl	18c68 <__aeabi_dcmpeq>
   1b3d8:	2800      	cmp	r0, #0
   1b3da:	f43f acb1 	beq.w	1ad40 <_strtod_l+0x3b8>
   1b3de:	2322      	movs	r3, #34	; 0x22
   1b3e0:	f04f 0800 	mov.w	r8, #0
   1b3e4:	f04f 0900 	mov.w	r9, #0
   1b3e8:	f8cb 3000 	str.w	r3, [fp]
   1b3ec:	e44c      	b.n	1ac88 <_strtod_l+0x300>
   1b3ee:	a30e      	add	r3, pc, #56	; (adr r3, 1b428 <_strtod_l+0xaa0>)
   1b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b3f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1b3f8:	f7fd fc40 	bl	18c7c <__aeabi_dcmplt>
   1b3fc:	2800      	cmp	r0, #0
   1b3fe:	d191      	bne.n	1b324 <_strtod_l+0x99c>
   1b400:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1b404:	a30a      	add	r3, pc, #40	; (adr r3, 1b430 <_strtod_l+0xaa8>)
   1b406:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b40a:	f7fd fc55 	bl	18cb8 <__aeabi_dcmpgt>
   1b40e:	2800      	cmp	r0, #0
   1b410:	f43f ad70 	beq.w	1aef4 <_strtod_l+0x56c>
   1b414:	e786      	b.n	1b324 <_strtod_l+0x99c>
   1b416:	bf00      	nop
   1b418:	00000000 	.word	0x00000000
   1b41c:	3ff00000 	.word	0x3ff00000
   1b420:	94a03595 	.word	0x94a03595
   1b424:	3fcfffff 	.word	0x3fcfffff
   1b428:	94a03595 	.word	0x94a03595
   1b42c:	3fdfffff 	.word	0x3fdfffff
   1b430:	35afe535 	.word	0x35afe535
   1b434:	3fe00000 	.word	0x3fe00000
   1b438:	7ff00000 	.word	0x7ff00000
   1b43c:	3fe00000 	.word	0x3fe00000
   1b440:	fffffbe2 	.word	0xfffffbe2
   1b444:	3ff00000 	.word	0x3ff00000
   1b448:	7c9fffff 	.word	0x7c9fffff
   1b44c:	7fefffff 	.word	0x7fefffff
   1b450:	bff00000 	.word	0xbff00000
   1b454:	000491d8 	.word	0x000491d8
   1b458:	00049188 	.word	0x00049188
   1b45c:	9b04      	ldr	r3, [sp, #16]
   1b45e:	2b01      	cmp	r3, #1
   1b460:	f47f af37 	bne.w	1b2d2 <_strtod_l+0x94a>
   1b464:	2e00      	cmp	r6, #0
   1b466:	f47f af34 	bne.w	1b2d2 <_strtod_l+0x94a>
   1b46a:	464c      	mov	r4, r9
   1b46c:	2322      	movs	r3, #34	; 0x22
   1b46e:	981e      	ldr	r0, [sp, #120]	; 0x78
   1b470:	f04f 0800 	mov.w	r8, #0
   1b474:	f04f 0900 	mov.w	r9, #0
   1b478:	f8cb 3000 	str.w	r3, [fp]
   1b47c:	e67b      	b.n	1b176 <_strtod_l+0x7ee>
   1b47e:	1c5d      	adds	r5, r3, #1
   1b480:	2b08      	cmp	r3, #8
   1b482:	f340 80bc 	ble.w	1b5fe <_strtod_l+0xc76>
   1b486:	2d10      	cmp	r5, #16
   1b488:	f300 80e4 	bgt.w	1b654 <_strtod_l+0xccc>
   1b48c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   1b490:	2300      	movs	r3, #0
   1b492:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   1b496:	f10c 0201 	add.w	r2, ip, #1
   1b49a:	921d      	str	r2, [sp, #116]	; 0x74
   1b49c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1b4a0:	f7ff bb76 	b.w	1ab90 <_strtod_l+0x208>
   1b4a4:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   1b4a8:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
   1b4ac:	e4fe      	b.n	1aeac <_strtod_l+0x524>
   1b4ae:	ed9f 7baa 	vldr	d7, [pc, #680]	; 1b758 <_strtod_l+0xdd0>
   1b4b2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1b4b6:	e4ef      	b.n	1ae98 <_strtod_l+0x510>
   1b4b8:	f10c 7554 	add.w	r5, ip, #55574528	; 0x3500000
   1b4bc:	9505      	str	r5, [sp, #20]
   1b4be:	e511      	b.n	1aee4 <_strtod_l+0x55c>
   1b4c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1b4c2:	b13a      	cbz	r2, 1b4d4 <_strtod_l+0xb4c>
   1b4c4:	2135      	movs	r1, #53	; 0x35
   1b4c6:	a820      	add	r0, sp, #128	; 0x80
   1b4c8:	f029 fe9a 	bl	45200 <__copybits>
   1b4cc:	4658      	mov	r0, fp
   1b4ce:	991e      	ldr	r1, [sp, #120]	; 0x78
   1b4d0:	f029 fa9c 	bl	44a0c <_Bfree>
   1b4d4:	3d01      	subs	r5, #1
   1b4d6:	2d04      	cmp	r5, #4
   1b4d8:	d806      	bhi.n	1b4e8 <_strtod_l+0xb60>
   1b4da:	e8df f005 	tbb	[pc, r5]
   1b4de:	210e      	.short	0x210e
   1b4e0:	1a03      	.short	0x1a03
   1b4e2:	0e          	.byte	0x0e
   1b4e3:	00          	.byte	0x00
   1b4e4:	4ba2      	ldr	r3, [pc, #648]	; (1b770 <_strtod_l+0xde8>)
   1b4e6:	9305      	str	r3, [sp, #20]
   1b4e8:	0725      	lsls	r5, r4, #28
   1b4ea:	f57f abf3 	bpl.w	1acd4 <_strtod_l+0x34c>
   1b4ee:	9b05      	ldr	r3, [sp, #20]
   1b4f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1b4f4:	9305      	str	r3, [sp, #20]
   1b4f6:	f7ff bbed 	b.w	1acd4 <_strtod_l+0x34c>
   1b4fa:	e9dd 1320 	ldrd	r1, r3, [sp, #128]	; 0x80
   1b4fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1b500:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1b504:	9104      	str	r1, [sp, #16]
   1b506:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1b50a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   1b50e:	9305      	str	r3, [sp, #20]
   1b510:	e7ea      	b.n	1b4e8 <_strtod_l+0xb60>
   1b512:	f04f 33ff 	mov.w	r3, #4294967295
   1b516:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1b51a:	e9cd 3604 	strd	r3, r6, [sp, #16]
   1b51e:	e7e3      	b.n	1b4e8 <_strtod_l+0xb60>
   1b520:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1b522:	9304      	str	r3, [sp, #16]
   1b524:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1b526:	9305      	str	r3, [sp, #20]
   1b528:	e7de      	b.n	1b4e8 <_strtod_l+0xb60>
   1b52a:	4b91      	ldr	r3, [pc, #580]	; (1b770 <_strtod_l+0xde8>)
   1b52c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1b52e:	9305      	str	r3, [sp, #20]
   1b530:	2322      	movs	r3, #34	; 0x22
   1b532:	9204      	str	r2, [sp, #16]
   1b534:	f8cb 3000 	str.w	r3, [fp]
   1b538:	f7ff bbcc 	b.w	1acd4 <_strtod_l+0x34c>
   1b53c:	1124      	asrs	r4, r4, #4
   1b53e:	2c01      	cmp	r4, #1
   1b540:	f340 8149 	ble.w	1b7d6 <_strtod_l+0xe4e>
   1b544:	f8df 923c 	ldr.w	r9, [pc, #572]	; 1b784 <_strtod_l+0xdfc>
   1b548:	f04f 0c00 	mov.w	ip, #0
   1b54c:	464e      	mov	r6, r9
   1b54e:	46e0      	mov	r8, ip
   1b550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b554:	f014 0f01 	tst.w	r4, #1
   1b558:	4610      	mov	r0, r2
   1b55a:	4619      	mov	r1, r3
   1b55c:	ea4f 0464 	mov.w	r4, r4, asr #1
   1b560:	f108 0801 	add.w	r8, r8, #1
   1b564:	d007      	beq.n	1b576 <_strtod_l+0xbee>
   1b566:	e9d6 2300 	ldrd	r2, r3, [r6]
   1b56a:	f7fd f915 	bl	18798 <__aeabi_dmul>
   1b56e:	f04f 0c01 	mov.w	ip, #1
   1b572:	4602      	mov	r2, r0
   1b574:	460b      	mov	r3, r1
   1b576:	2c01      	cmp	r4, #1
   1b578:	f106 0608 	add.w	r6, r6, #8
   1b57c:	d1ea      	bne.n	1b554 <_strtod_l+0xbcc>
   1b57e:	f1bc 0f00 	cmp.w	ip, #0
   1b582:	f040 818a 	bne.w	1b89a <_strtod_l+0xf12>
   1b586:	9b05      	ldr	r3, [sp, #20]
   1b588:	eb09 08c8 	add.w	r8, r9, r8, lsl #3
   1b58c:	4e79      	ldr	r6, [pc, #484]	; (1b774 <_strtod_l+0xdec>)
   1b58e:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   1b592:	9305      	str	r3, [sp, #20]
   1b594:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b598:	e9d8 0100 	ldrd	r0, r1, [r8]
   1b59c:	f7fd f8fc 	bl	18798 <__aeabi_dmul>
   1b5a0:	4a73      	ldr	r2, [pc, #460]	; (1b770 <_strtod_l+0xde8>)
   1b5a2:	ea01 0302 	and.w	r3, r1, r2
   1b5a6:	42b3      	cmp	r3, r6
   1b5a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b5ac:	d850      	bhi.n	1b650 <_strtod_l+0xcc8>
   1b5ae:	f1a2 7258 	sub.w	r2, r2, #56623104	; 0x3600000
   1b5b2:	4293      	cmp	r3, r2
   1b5b4:	f240 8108 	bls.w	1b7c8 <_strtod_l+0xe40>
   1b5b8:	4b6f      	ldr	r3, [pc, #444]	; (1b778 <_strtod_l+0xdf0>)
   1b5ba:	9305      	str	r3, [sp, #20]
   1b5bc:	2300      	movs	r3, #0
   1b5be:	930a      	str	r3, [sp, #40]	; 0x28
   1b5c0:	f04f 33ff 	mov.w	r3, #4294967295
   1b5c4:	9304      	str	r3, [sp, #16]
   1b5c6:	f7ff bbbb 	b.w	1ad40 <_strtod_l+0x3b8>
   1b5ca:	f113 0216 	adds.w	r2, r3, #22
   1b5ce:	f6ff ab9d 	blt.w	1ad0c <_strtod_l+0x384>
   1b5d2:	4a6a      	ldr	r2, [pc, #424]	; (1b77c <_strtod_l+0xdf4>)
   1b5d4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
   1b5d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b5dc:	e9d2 2300 	ldrd	r2, r3, [r2]
   1b5e0:	f7fd fa04 	bl	189ec <__aeabi_ddiv>
   1b5e4:	4680      	mov	r8, r0
   1b5e6:	4689      	mov	r9, r1
   1b5e8:	f7ff bb4e 	b.w	1ac88 <_strtod_l+0x300>
   1b5ec:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
   1b5f0:	2700      	movs	r7, #0
   1b5f2:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   1b5f6:	1c59      	adds	r1, r3, #1
   1b5f8:	46d4      	mov	ip, sl
   1b5fa:	463e      	mov	r6, r7
   1b5fc:	2501      	movs	r5, #1
   1b5fe:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   1b602:	2300      	movs	r3, #0
   1b604:	eb0e 0747 	add.w	r7, lr, r7, lsl #1
   1b608:	e745      	b.n	1b496 <_strtod_l+0xb0e>
   1b60a:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   1b60e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1b610:	42b3      	cmp	r3, r6
   1b612:	f6ff ab7b 	blt.w	1ad0c <_strtod_l+0x384>
   1b616:	f1c5 050f 	rsb	r5, r5, #15
   1b61a:	4c58      	ldr	r4, [pc, #352]	; (1b77c <_strtod_l+0xdf4>)
   1b61c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   1b620:	1b75      	subs	r5, r6, r5
   1b622:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1b626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b62a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1b62e:	f7fd f8b3 	bl	18798 <__aeabi_dmul>
   1b632:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b636:	f7fd f8af 	bl	18798 <__aeabi_dmul>
   1b63a:	4680      	mov	r8, r0
   1b63c:	4689      	mov	r9, r1
   1b63e:	f7ff bb23 	b.w	1ac88 <_strtod_l+0x300>
   1b642:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1b646:	f1b8 3fff 	cmp.w	r8, #4294967295
   1b64a:	f47f ae39 	bne.w	1b2c0 <_strtod_l+0x938>
   1b64e:	e5b0      	b.n	1b1b2 <_strtod_l+0x82a>
   1b650:	9205      	str	r2, [sp, #20]
   1b652:	e539      	b.n	1b0c8 <_strtod_l+0x740>
   1b654:	2300      	movs	r3, #0
   1b656:	e71e      	b.n	1b496 <_strtod_l+0xb0e>
   1b658:	ed9f 7b41 	vldr	d7, [pc, #260]	; 1b760 <_strtod_l+0xdd8>
   1b65c:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
   1b660:	ed9f 7b41 	vldr	d7, [pc, #260]	; 1b768 <_strtod_l+0xde0>
   1b664:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1b668:	e5f4      	b.n	1b254 <_strtod_l+0x8cc>
   1b66a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b66c:	4648      	mov	r0, r9
   1b66e:	464c      	mov	r4, r9
   1b670:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1b674:	2b00      	cmp	r3, #0
   1b676:	d168      	bne.n	1b74a <_strtod_l+0xdc2>
   1b678:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1b67c:	2900      	cmp	r1, #0
   1b67e:	d164      	bne.n	1b74a <_strtod_l+0xdc2>
   1b680:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1b684:	2b00      	cmp	r3, #0
   1b686:	d160      	bne.n	1b74a <_strtod_l+0xdc2>
   1b688:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1b68c:	0d1b      	lsrs	r3, r3, #20
   1b68e:	051b      	lsls	r3, r3, #20
   1b690:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1b694:	d959      	bls.n	1b74a <_strtod_l+0xdc2>
   1b696:	6943      	ldr	r3, [r0, #20]
   1b698:	b913      	cbnz	r3, 1b6a0 <_strtod_l+0xd18>
   1b69a:	6903      	ldr	r3, [r0, #16]
   1b69c:	2b01      	cmp	r3, #1
   1b69e:	dd54      	ble.n	1b74a <_strtod_l+0xdc2>
   1b6a0:	4621      	mov	r1, r4
   1b6a2:	2201      	movs	r2, #1
   1b6a4:	4658      	mov	r0, fp
   1b6a6:	f029 fb9b 	bl	44de0 <__lshift>
   1b6aa:	4639      	mov	r1, r7
   1b6ac:	4604      	mov	r4, r0
   1b6ae:	f029 fbf3 	bl	44e98 <__mcmp>
   1b6b2:	2800      	cmp	r0, #0
   1b6b4:	dd49      	ble.n	1b74a <_strtod_l+0xdc2>
   1b6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b6b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b6bc:	460a      	mov	r2, r1
   1b6be:	2b00      	cmp	r3, #0
   1b6c0:	f000 80c9 	beq.w	1b856 <_strtod_l+0xece>
   1b6c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1b6c8:	0d1b      	lsrs	r3, r3, #20
   1b6ca:	051b      	lsls	r3, r3, #20
   1b6cc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1b6d0:	f300 80c1 	bgt.w	1b856 <_strtod_l+0xece>
   1b6d4:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   1b6d8:	f77f aec8 	ble.w	1b46c <_strtod_l+0xae4>
   1b6dc:	2300      	movs	r3, #0
   1b6de:	4a28      	ldr	r2, [pc, #160]	; (1b780 <_strtod_l+0xdf8>)
   1b6e0:	4640      	mov	r0, r8
   1b6e2:	4649      	mov	r1, r9
   1b6e4:	e9cd 3218 	strd	r3, r2, [sp, #96]	; 0x60
   1b6e8:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
   1b6ec:	f7fd f854 	bl	18798 <__aeabi_dmul>
   1b6f0:	4680      	mov	r8, r0
   1b6f2:	4689      	mov	r9, r1
   1b6f4:	bb61      	cbnz	r1, 1b750 <_strtod_l+0xdc8>
   1b6f6:	bb58      	cbnz	r0, 1b750 <_strtod_l+0xdc8>
   1b6f8:	2322      	movs	r3, #34	; 0x22
   1b6fa:	981e      	ldr	r0, [sp, #120]	; 0x78
   1b6fc:	f8cb 3000 	str.w	r3, [fp]
   1b700:	e539      	b.n	1b176 <_strtod_l+0x7ee>
   1b702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b704:	9904      	ldr	r1, [sp, #16]
   1b706:	2b00      	cmp	r3, #0
   1b708:	f000 8090 	beq.w	1b82c <_strtod_l+0xea4>
   1b70c:	4b18      	ldr	r3, [pc, #96]	; (1b770 <_strtod_l+0xde8>)
   1b70e:	4033      	ands	r3, r6
   1b710:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1b714:	f200 808a 	bhi.w	1b82c <_strtod_l+0xea4>
   1b718:	0d1b      	lsrs	r3, r3, #20
   1b71a:	f04f 32ff 	mov.w	r2, #4294967295
   1b71e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1b722:	fa02 f303 	lsl.w	r3, r2, r3
   1b726:	4299      	cmp	r1, r3
   1b728:	d139      	bne.n	1b79e <_strtod_l+0xe16>
   1b72a:	3101      	adds	r1, #1
   1b72c:	d103      	bne.n	1b736 <_strtod_l+0xdae>
   1b72e:	4b12      	ldr	r3, [pc, #72]	; (1b778 <_strtod_l+0xdf0>)
   1b730:	4298      	cmp	r0, r3
   1b732:	f43f ad3f 	beq.w	1b1b4 <_strtod_l+0x82c>
   1b736:	4b0e      	ldr	r3, [pc, #56]	; (1b770 <_strtod_l+0xde8>)
   1b738:	4602      	mov	r2, r0
   1b73a:	401a      	ands	r2, r3
   1b73c:	f502 1380 	add.w	r3, r2, #1048576	; 0x100000
   1b740:	9305      	str	r3, [sp, #20]
   1b742:	2300      	movs	r3, #0
   1b744:	9304      	str	r3, [sp, #16]
   1b746:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   1b74a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b74c:	2b00      	cmp	r3, #0
   1b74e:	d1c5      	bne.n	1b6dc <_strtod_l+0xd54>
   1b750:	981e      	ldr	r0, [sp, #120]	; 0x78
   1b752:	e510      	b.n	1b176 <_strtod_l+0x7ee>
   1b754:	f3af 8000 	nop.w
   1b758:	00000000 	.word	0x00000000
   1b75c:	3ff00000 	.word	0x3ff00000
   1b760:	00000000 	.word	0x00000000
   1b764:	bfe00000 	.word	0xbfe00000
   1b768:	00000000 	.word	0x00000000
   1b76c:	3fe00000 	.word	0x3fe00000
   1b770:	7ff00000 	.word	0x7ff00000
   1b774:	7ca00000 	.word	0x7ca00000
   1b778:	7fefffff 	.word	0x7fefffff
   1b77c:	000491d8 	.word	0x000491d8
   1b780:	39500000 	.word	0x39500000
   1b784:	000491b0 	.word	0x000491b0
   1b788:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1b78a:	464c      	mov	r4, r9
   1b78c:	4630      	mov	r0, r6
   1b78e:	4a47      	ldr	r2, [pc, #284]	; (1b8ac <_strtod_l+0xf24>)
   1b790:	f3c6 0313 	ubfx	r3, r6, #0, #20
   1b794:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1b798:	b311      	cbz	r1, 1b7e0 <_strtod_l+0xe58>
   1b79a:	4293      	cmp	r3, r2
   1b79c:	d0b1      	beq.n	1b702 <_strtod_l+0xd7a>
   1b79e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b7a0:	b323      	cbz	r3, 1b7ec <_strtod_l+0xe64>
   1b7a2:	4203      	tst	r3, r0
   1b7a4:	d0d1      	beq.n	1b74a <_strtod_l+0xdc2>
   1b7a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b7a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b7aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b7ae:	2b00      	cmp	r3, #0
   1b7b0:	d03f      	beq.n	1b832 <_strtod_l+0xeaa>
   1b7b2:	f02d fa83 	bl	48cbc <sulp>
   1b7b6:	4602      	mov	r2, r0
   1b7b8:	460b      	mov	r3, r1
   1b7ba:	4640      	mov	r0, r8
   1b7bc:	4649      	mov	r1, r9
   1b7be:	f7fc fe35 	bl	1842c <__adddf3>
   1b7c2:	4680      	mov	r8, r0
   1b7c4:	4689      	mov	r9, r1
   1b7c6:	e7c0      	b.n	1b74a <_strtod_l+0xdc2>
   1b7c8:	f101 7354 	add.w	r3, r1, #55574528	; 0x3500000
   1b7cc:	9305      	str	r3, [sp, #20]
   1b7ce:	2300      	movs	r3, #0
   1b7d0:	930a      	str	r3, [sp, #40]	; 0x28
   1b7d2:	f7ff bab5 	b.w	1ad40 <_strtod_l+0x3b8>
   1b7d6:	f04f 0800 	mov.w	r8, #0
   1b7da:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 1b8b8 <_strtod_l+0xf30>
   1b7de:	e6d2      	b.n	1b586 <_strtod_l+0xbfe>
   1b7e0:	2b00      	cmp	r3, #0
   1b7e2:	d1dc      	bne.n	1b79e <_strtod_l+0xe16>
   1b7e4:	9b04      	ldr	r3, [sp, #16]
   1b7e6:	2b00      	cmp	r3, #0
   1b7e8:	d1d9      	bne.n	1b79e <_strtod_l+0xe16>
   1b7ea:	e764      	b.n	1b6b6 <_strtod_l+0xd2e>
   1b7ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b7ee:	9a04      	ldr	r2, [sp, #16]
   1b7f0:	4213      	tst	r3, r2
   1b7f2:	d0aa      	beq.n	1b74a <_strtod_l+0xdc2>
   1b7f4:	e7d7      	b.n	1b7a6 <_strtod_l+0xe1e>
   1b7f6:	236a      	movs	r3, #106	; 0x6a
   1b7f8:	2c00      	cmp	r4, #0
   1b7fa:	930a      	str	r3, [sp, #40]	; 0x28
   1b7fc:	f73f adb5 	bgt.w	1b36a <_strtod_l+0x9e2>
   1b800:	e5d1      	b.n	1b3a6 <_strtod_l+0xa1e>
   1b802:	2300      	movs	r3, #0
   1b804:	930a      	str	r3, [sp, #40]	; 0x28
   1b806:	e5e1      	b.n	1b3cc <_strtod_l+0xa44>
   1b808:	a81d      	add	r0, sp, #116	; 0x74
   1b80a:	aa20      	add	r2, sp, #128	; 0x80
   1b80c:	4928      	ldr	r1, [pc, #160]	; (1b8b0 <_strtod_l+0xf28>)
   1b80e:	f028 fed3 	bl	445b8 <__hexnan>
   1b812:	2805      	cmp	r0, #5
   1b814:	f47f ac6a 	bne.w	1b0ec <_strtod_l+0x764>
   1b818:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1b81a:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
   1b81e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   1b822:	9305      	str	r3, [sp, #20]
   1b824:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1b826:	9304      	str	r3, [sp, #16]
   1b828:	f7ff ba54 	b.w	1acd4 <_strtod_l+0x34c>
   1b82c:	f04f 33ff 	mov.w	r3, #4294967295
   1b830:	e779      	b.n	1b726 <_strtod_l+0xd9e>
   1b832:	f02d fa43 	bl	48cbc <sulp>
   1b836:	4602      	mov	r2, r0
   1b838:	460b      	mov	r3, r1
   1b83a:	4640      	mov	r0, r8
   1b83c:	4649      	mov	r1, r9
   1b83e:	f7fc fdf3 	bl	18428 <__aeabi_dsub>
   1b842:	2200      	movs	r2, #0
   1b844:	2300      	movs	r3, #0
   1b846:	4680      	mov	r8, r0
   1b848:	4689      	mov	r9, r1
   1b84a:	f7fd fa0d 	bl	18c68 <__aeabi_dcmpeq>
   1b84e:	2800      	cmp	r0, #0
   1b850:	f47f ae0c 	bne.w	1b46c <_strtod_l+0xae4>
   1b854:	e779      	b.n	1b74a <_strtod_l+0xdc2>
   1b856:	4b17      	ldr	r3, [pc, #92]	; (1b8b4 <_strtod_l+0xf2c>)
   1b858:	4013      	ands	r3, r2
   1b85a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1b85e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
   1b862:	ea6f 5303 	mvn.w	r3, r3, lsl #20
   1b866:	9305      	str	r3, [sp, #20]
   1b868:	f04f 33ff 	mov.w	r3, #4294967295
   1b86c:	9304      	str	r3, [sp, #16]
   1b86e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   1b872:	e76a      	b.n	1b74a <_strtod_l+0xdc2>
   1b874:	f04f 32ff 	mov.w	r2, #4294967295
   1b878:	fa02 f303 	lsl.w	r3, r2, r3
   1b87c:	9a04      	ldr	r2, [sp, #16]
   1b87e:	401a      	ands	r2, r3
   1b880:	9204      	str	r2, [sp, #16]
   1b882:	e5a3      	b.n	1b3cc <_strtod_l+0xa44>
   1b884:	3b20      	subs	r3, #32
   1b886:	f04f 31ff 	mov.w	r1, #4294967295
   1b88a:	fa01 f303 	lsl.w	r3, r1, r3
   1b88e:	4013      	ands	r3, r2
   1b890:	9305      	str	r3, [sp, #20]
   1b892:	e59b      	b.n	1b3cc <_strtod_l+0xa44>
   1b894:	462b      	mov	r3, r5
   1b896:	3501      	adds	r5, #1
   1b898:	e5f2      	b.n	1b480 <_strtod_l+0xaf8>
   1b89a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1b89e:	e672      	b.n	1b586 <_strtod_l+0xbfe>
   1b8a0:	4603      	mov	r3, r0
   1b8a2:	e5f8      	b.n	1b496 <_strtod_l+0xb0e>
   1b8a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1b8a8:	e579      	b.n	1b39e <_strtod_l+0xa16>
   1b8aa:	bf00      	nop
   1b8ac:	000fffff 	.word	0x000fffff
   1b8b0:	0004ade8 	.word	0x0004ade8
   1b8b4:	7ff00000 	.word	0x7ff00000
   1b8b8:	000491b0 	.word	0x000491b0
   1b8bc:	00000000 	.word	0x00000000

0001b8c0 <_svfprintf_r>:
   1b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8c4:	b0d5      	sub	sp, #340	; 0x154
   1b8c6:	460c      	mov	r4, r1
   1b8c8:	4690      	mov	r8, r2
   1b8ca:	9104      	str	r1, [sp, #16]
   1b8cc:	930c      	str	r3, [sp, #48]	; 0x30
   1b8ce:	9003      	str	r0, [sp, #12]
   1b8d0:	f028 ff42 	bl	44758 <_localeconv_r>
   1b8d4:	6803      	ldr	r3, [r0, #0]
   1b8d6:	4618      	mov	r0, r3
   1b8d8:	9316      	str	r3, [sp, #88]	; 0x58
   1b8da:	f024 fe53 	bl	40584 <strlen>
   1b8de:	89a3      	ldrh	r3, [r4, #12]
   1b8e0:	9014      	str	r0, [sp, #80]	; 0x50
   1b8e2:	0619      	lsls	r1, r3, #24
   1b8e4:	d503      	bpl.n	1b8ee <_svfprintf_r+0x2e>
   1b8e6:	6923      	ldr	r3, [r4, #16]
   1b8e8:	2b00      	cmp	r3, #0
   1b8ea:	f000 876a 	beq.w	1c7c2 <_svfprintf_r+0xf02>
   1b8ee:	2300      	movs	r3, #0
   1b8f0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1b8f4:	4647      	mov	r7, r8
   1b8f6:	930f      	str	r3, [sp, #60]	; 0x3c
   1b8f8:	9315      	str	r3, [sp, #84]	; 0x54
   1b8fa:	931a      	str	r3, [sp, #104]	; 0x68
   1b8fc:	9319      	str	r3, [sp, #100]	; 0x64
   1b8fe:	9307      	str	r3, [sp, #28]
   1b900:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
   1b904:	ed9f 7b90 	vldr	d7, [pc, #576]	; 1bb48 <_svfprintf_r+0x288>
   1b908:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
   1b90c:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
   1b910:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
   1b914:	783b      	ldrb	r3, [r7, #0]
   1b916:	463c      	mov	r4, r7
   1b918:	b1db      	cbz	r3, 1b952 <_svfprintf_r+0x92>
   1b91a:	2b25      	cmp	r3, #37	; 0x25
   1b91c:	d102      	bne.n	1b924 <_svfprintf_r+0x64>
   1b91e:	e018      	b.n	1b952 <_svfprintf_r+0x92>
   1b920:	2b25      	cmp	r3, #37	; 0x25
   1b922:	d003      	beq.n	1b92c <_svfprintf_r+0x6c>
   1b924:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1b928:	2b00      	cmp	r3, #0
   1b92a:	d1f9      	bne.n	1b920 <_svfprintf_r+0x60>
   1b92c:	1be5      	subs	r5, r4, r7
   1b92e:	d010      	beq.n	1b952 <_svfprintf_r+0x92>
   1b930:	f8c9 7000 	str.w	r7, [r9]
   1b934:	f8c9 5004 	str.w	r5, [r9, #4]
   1b938:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   1b93c:	3301      	adds	r3, #1
   1b93e:	442a      	add	r2, r5
   1b940:	2b07      	cmp	r3, #7
   1b942:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   1b946:	dc7d      	bgt.n	1ba44 <_svfprintf_r+0x184>
   1b948:	f109 0908 	add.w	r9, r9, #8
   1b94c:	9b07      	ldr	r3, [sp, #28]
   1b94e:	442b      	add	r3, r5
   1b950:	9307      	str	r3, [sp, #28]
   1b952:	7823      	ldrb	r3, [r4, #0]
   1b954:	2b00      	cmp	r3, #0
   1b956:	f001 806c 	beq.w	1ca32 <_svfprintf_r+0x1172>
   1b95a:	2300      	movs	r3, #0
   1b95c:	f04f 32ff 	mov.w	r2, #4294967295
   1b960:	f104 0b01 	add.w	fp, r4, #1
   1b964:	7866      	ldrb	r6, [r4, #1]
   1b966:	4698      	mov	r8, r3
   1b968:	252b      	movs	r5, #43	; 0x2b
   1b96a:	9206      	str	r2, [sp, #24]
   1b96c:	930a      	str	r3, [sp, #40]	; 0x28
   1b96e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   1b972:	f10b 0b01 	add.w	fp, fp, #1
   1b976:	f1a6 0320 	sub.w	r3, r6, #32
   1b97a:	2b5a      	cmp	r3, #90	; 0x5a
   1b97c:	f200 83b0 	bhi.w	1c0e0 <_svfprintf_r+0x820>
   1b980:	e8df f013 	tbh	[pc, r3, lsl #1]
   1b984:	03ae02c5 	.word	0x03ae02c5
   1b988:	02c003ae 	.word	0x02c003ae
   1b98c:	03ae03ae 	.word	0x03ae03ae
   1b990:	02a103ae 	.word	0x02a103ae
   1b994:	03ae03ae 	.word	0x03ae03ae
   1b998:	02910296 	.word	0x02910296
   1b99c:	028c03ae 	.word	0x028c03ae
   1b9a0:	03ae0272 	.word	0x03ae0272
   1b9a4:	0250025f 	.word	0x0250025f
   1b9a8:	02500250 	.word	0x02500250
   1b9ac:	02500250 	.word	0x02500250
   1b9b0:	02500250 	.word	0x02500250
   1b9b4:	02500250 	.word	0x02500250
   1b9b8:	03ae03ae 	.word	0x03ae03ae
   1b9bc:	03ae03ae 	.word	0x03ae03ae
   1b9c0:	03ae03ae 	.word	0x03ae03ae
   1b9c4:	036c03ae 	.word	0x036c03ae
   1b9c8:	035803ae 	.word	0x035803ae
   1b9cc:	036c033f 	.word	0x036c033f
   1b9d0:	036c036c 	.word	0x036c036c
   1b9d4:	03ae03ae 	.word	0x03ae03ae
   1b9d8:	03ae03ae 	.word	0x03ae03ae
   1b9dc:	03ae033a 	.word	0x03ae033a
   1b9e0:	01de03ae 	.word	0x01de03ae
   1b9e4:	03ae03ae 	.word	0x03ae03ae
   1b9e8:	031603ae 	.word	0x031603ae
   1b9ec:	008403ae 	.word	0x008403ae
   1b9f0:	03ae03ae 	.word	0x03ae03ae
   1b9f4:	03ae0300 	.word	0x03ae0300
   1b9f8:	03ae03ae 	.word	0x03ae03ae
   1b9fc:	03ae03ae 	.word	0x03ae03ae
   1ba00:	03ae03ae 	.word	0x03ae03ae
   1ba04:	036c03ae 	.word	0x036c03ae
   1ba08:	035803ae 	.word	0x035803ae
   1ba0c:	036c020b 	.word	0x036c020b
   1ba10:	036c036c 	.word	0x036c036c
   1ba14:	020b0264 	.word	0x020b0264
   1ba18:	03ae005b 	.word	0x03ae005b
   1ba1c:	03ae02e8 	.word	0x03ae02e8
   1ba20:	01e002d0 	.word	0x01e002d0
   1ba24:	005b02f0 	.word	0x005b02f0
   1ba28:	031603ae 	.word	0x031603ae
   1ba2c:	0086005d 	.word	0x0086005d
   1ba30:	03ae03ae 	.word	0x03ae03ae
   1ba34:	03ae01f1 	.word	0x03ae01f1
   1ba38:	005d      	.short	0x005d
   1ba3a:	f048 0820 	orr.w	r8, r8, #32
   1ba3e:	f89b 6000 	ldrb.w	r6, [fp]
   1ba42:	e796      	b.n	1b972 <_svfprintf_r+0xb2>
   1ba44:	aa28      	add	r2, sp, #160	; 0xa0
   1ba46:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1ba4a:	f029 fed3 	bl	457f4 <__ssprint_r>
   1ba4e:	b980      	cbnz	r0, 1ba72 <_svfprintf_r+0x1b2>
   1ba50:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1ba54:	e77a      	b.n	1b94c <_svfprintf_r+0x8c>
   1ba56:	aa28      	add	r2, sp, #160	; 0xa0
   1ba58:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1ba5c:	f029 feca 	bl	457f4 <__ssprint_r>
   1ba60:	2800      	cmp	r0, #0
   1ba62:	f000 8161 	beq.w	1bd28 <_svfprintf_r+0x468>
   1ba66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ba68:	b11b      	cbz	r3, 1ba72 <_svfprintf_r+0x1b2>
   1ba6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ba6c:	9803      	ldr	r0, [sp, #12]
   1ba6e:	f027 fffb 	bl	43a68 <_free_r>
   1ba72:	9b04      	ldr	r3, [sp, #16]
   1ba74:	899b      	ldrh	r3, [r3, #12]
   1ba76:	f013 0f40 	tst.w	r3, #64	; 0x40
   1ba7a:	9b07      	ldr	r3, [sp, #28]
   1ba7c:	bf18      	it	ne
   1ba7e:	f04f 33ff 	movne.w	r3, #4294967295
   1ba82:	9307      	str	r3, [sp, #28]
   1ba84:	9807      	ldr	r0, [sp, #28]
   1ba86:	b055      	add	sp, #340	; 0x154
   1ba88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba8c:	f048 0810 	orr.w	r8, r8, #16
   1ba90:	f018 0f20 	tst.w	r8, #32
   1ba94:	f000 8500 	beq.w	1c498 <_svfprintf_r+0xbd8>
   1ba98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1ba9a:	46c2      	mov	sl, r8
   1ba9c:	2301      	movs	r3, #1
   1ba9e:	3407      	adds	r4, #7
   1baa0:	f024 0207 	bic.w	r2, r4, #7
   1baa4:	f102 0108 	add.w	r1, r2, #8
   1baa8:	e9d2 4500 	ldrd	r4, r5, [r2]
   1baac:	910c      	str	r1, [sp, #48]	; 0x30
   1baae:	2200      	movs	r2, #0
   1bab0:	a954      	add	r1, sp, #336	; 0x150
   1bab2:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   1bab6:	9a06      	ldr	r2, [sp, #24]
   1bab8:	9105      	str	r1, [sp, #20]
   1baba:	3201      	adds	r2, #1
   1babc:	f000 8197 	beq.w	1bdee <_svfprintf_r+0x52e>
   1bac0:	ea54 0205 	orrs.w	r2, r4, r5
   1bac4:	f02a 0880 	bic.w	r8, sl, #128	; 0x80
   1bac8:	f040 8190 	bne.w	1bdec <_svfprintf_r+0x52c>
   1bacc:	9a06      	ldr	r2, [sp, #24]
   1bace:	3200      	adds	r2, #0
   1bad0:	bf18      	it	ne
   1bad2:	2201      	movne	r2, #1
   1bad4:	2a00      	cmp	r2, #0
   1bad6:	f040 8189 	bne.w	1bdec <_svfprintf_r+0x52c>
   1bada:	2b00      	cmp	r3, #0
   1badc:	f040 844f 	bne.w	1c37e <_svfprintf_r+0xabe>
   1bae0:	f01a 0201 	ands.w	r2, sl, #1
   1bae4:	9208      	str	r2, [sp, #32]
   1bae6:	f000 8499 	beq.w	1c41c <_svfprintf_r+0xb5c>
   1baea:	2230      	movs	r2, #48	; 0x30
   1baec:	af54      	add	r7, sp, #336	; 0x150
   1baee:	9306      	str	r3, [sp, #24]
   1baf0:	f807 2d01 	strb.w	r2, [r7, #-1]!
   1baf4:	9906      	ldr	r1, [sp, #24]
   1baf6:	2300      	movs	r3, #0
   1baf8:	9808      	ldr	r0, [sp, #32]
   1bafa:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1bafe:	4281      	cmp	r1, r0
   1bb00:	930b      	str	r3, [sp, #44]	; 0x2c
   1bb02:	930e      	str	r3, [sp, #56]	; 0x38
   1bb04:	bfb8      	it	lt
   1bb06:	4601      	movlt	r1, r0
   1bb08:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
   1bb0c:	9105      	str	r1, [sp, #20]
   1bb0e:	b112      	cbz	r2, 1bb16 <_svfprintf_r+0x256>
   1bb10:	9b05      	ldr	r3, [sp, #20]
   1bb12:	3301      	adds	r3, #1
   1bb14:	9305      	str	r3, [sp, #20]
   1bb16:	f018 0302 	ands.w	r3, r8, #2
   1bb1a:	d002      	beq.n	1bb22 <_svfprintf_r+0x262>
   1bb1c:	9905      	ldr	r1, [sp, #20]
   1bb1e:	3102      	adds	r1, #2
   1bb20:	9105      	str	r1, [sp, #20]
   1bb22:	f018 0184 	ands.w	r1, r8, #132	; 0x84
   1bb26:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1bb28:	910d      	str	r1, [sp, #52]	; 0x34
   1bb2a:	d143      	bne.n	1bbb4 <_svfprintf_r+0x2f4>
   1bb2c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1bb2e:	9805      	ldr	r0, [sp, #20]
   1bb30:	1a0d      	subs	r5, r1, r0
   1bb32:	2d00      	cmp	r5, #0
   1bb34:	dd3e      	ble.n	1bbb4 <_svfprintf_r+0x2f4>
   1bb36:	2d10      	cmp	r5, #16
   1bb38:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1bb3a:	dd2b      	ble.n	1bb94 <_svfprintf_r+0x2d4>
   1bb3c:	4621      	mov	r1, r4
   1bb3e:	f04f 0a10 	mov.w	sl, #16
   1bb42:	462c      	mov	r4, r5
   1bb44:	461d      	mov	r5, r3
   1bb46:	e006      	b.n	1bb56 <_svfprintf_r+0x296>
	...
   1bb50:	3c10      	subs	r4, #16
   1bb52:	2c10      	cmp	r4, #16
   1bb54:	dd1b      	ble.n	1bb8e <_svfprintf_r+0x2ce>
   1bb56:	3201      	adds	r2, #1
   1bb58:	3110      	adds	r1, #16
   1bb5a:	4bc0      	ldr	r3, [pc, #768]	; (1be5c <_svfprintf_r+0x59c>)
   1bb5c:	f109 0908 	add.w	r9, r9, #8
   1bb60:	2a07      	cmp	r2, #7
   1bb62:	f849 ac04 	str.w	sl, [r9, #-4]
   1bb66:	f849 3c08 	str.w	r3, [r9, #-8]
   1bb6a:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   1bb6e:	ddef      	ble.n	1bb50 <_svfprintf_r+0x290>
   1bb70:	aa28      	add	r2, sp, #160	; 0xa0
   1bb72:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1bb76:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1bb7a:	f029 fe3b 	bl	457f4 <__ssprint_r>
   1bb7e:	2800      	cmp	r0, #0
   1bb80:	f47f af71 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1bb84:	3c10      	subs	r4, #16
   1bb86:	2c10      	cmp	r4, #16
   1bb88:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   1bb8c:	dce3      	bgt.n	1bb56 <_svfprintf_r+0x296>
   1bb8e:	462b      	mov	r3, r5
   1bb90:	4625      	mov	r5, r4
   1bb92:	460c      	mov	r4, r1
   1bb94:	3201      	adds	r2, #1
   1bb96:	442c      	add	r4, r5
   1bb98:	49b0      	ldr	r1, [pc, #704]	; (1be5c <_svfprintf_r+0x59c>)
   1bb9a:	2a07      	cmp	r2, #7
   1bb9c:	f8c9 5004 	str.w	r5, [r9, #4]
   1bba0:	f8c9 1000 	str.w	r1, [r9]
   1bba4:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   1bba8:	f300 865b 	bgt.w	1c862 <_svfprintf_r+0xfa2>
   1bbac:	f109 0908 	add.w	r9, r9, #8
   1bbb0:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1bbb4:	b182      	cbz	r2, 1bbd8 <_svfprintf_r+0x318>
   1bbb6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1bbb8:	2101      	movs	r1, #1
   1bbba:	3401      	adds	r4, #1
   1bbbc:	f10d 0083 	add.w	r0, sp, #131	; 0x83
   1bbc0:	440a      	add	r2, r1
   1bbc2:	f8c9 1004 	str.w	r1, [r9, #4]
   1bbc6:	942a      	str	r4, [sp, #168]	; 0xa8
   1bbc8:	2a07      	cmp	r2, #7
   1bbca:	f8c9 0000 	str.w	r0, [r9]
   1bbce:	9229      	str	r2, [sp, #164]	; 0xa4
   1bbd0:	f300 83da 	bgt.w	1c388 <_svfprintf_r+0xac8>
   1bbd4:	f109 0908 	add.w	r9, r9, #8
   1bbd8:	b17b      	cbz	r3, 1bbfa <_svfprintf_r+0x33a>
   1bbda:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1bbdc:	3402      	adds	r4, #2
   1bbde:	a921      	add	r1, sp, #132	; 0x84
   1bbe0:	2202      	movs	r2, #2
   1bbe2:	3301      	adds	r3, #1
   1bbe4:	942a      	str	r4, [sp, #168]	; 0xa8
   1bbe6:	f8c9 1000 	str.w	r1, [r9]
   1bbea:	2b07      	cmp	r3, #7
   1bbec:	9329      	str	r3, [sp, #164]	; 0xa4
   1bbee:	f8c9 2004 	str.w	r2, [r9, #4]
   1bbf2:	f300 83d7 	bgt.w	1c3a4 <_svfprintf_r+0xae4>
   1bbf6:	f109 0908 	add.w	r9, r9, #8
   1bbfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1bbfc:	2b80      	cmp	r3, #128	; 0x80
   1bbfe:	f000 82e3 	beq.w	1c1c8 <_svfprintf_r+0x908>
   1bc02:	9b06      	ldr	r3, [sp, #24]
   1bc04:	9a08      	ldr	r2, [sp, #32]
   1bc06:	1a9d      	subs	r5, r3, r2
   1bc08:	2d00      	cmp	r5, #0
   1bc0a:	dd35      	ble.n	1bc78 <_svfprintf_r+0x3b8>
   1bc0c:	2d10      	cmp	r5, #16
   1bc0e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1bc10:	4b93      	ldr	r3, [pc, #588]	; (1be60 <_svfprintf_r+0x5a0>)
   1bc12:	dd24      	ble.n	1bc5e <_svfprintf_r+0x39e>
   1bc14:	4621      	mov	r1, r4
   1bc16:	f04f 0a10 	mov.w	sl, #16
   1bc1a:	461c      	mov	r4, r3
   1bc1c:	e002      	b.n	1bc24 <_svfprintf_r+0x364>
   1bc1e:	3d10      	subs	r5, #16
   1bc20:	2d10      	cmp	r5, #16
   1bc22:	dd1a      	ble.n	1bc5a <_svfprintf_r+0x39a>
   1bc24:	3201      	adds	r2, #1
   1bc26:	3110      	adds	r1, #16
   1bc28:	f8c9 4000 	str.w	r4, [r9]
   1bc2c:	f109 0908 	add.w	r9, r9, #8
   1bc30:	2a07      	cmp	r2, #7
   1bc32:	f849 ac04 	str.w	sl, [r9, #-4]
   1bc36:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   1bc3a:	ddf0      	ble.n	1bc1e <_svfprintf_r+0x35e>
   1bc3c:	aa28      	add	r2, sp, #160	; 0xa0
   1bc3e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1bc42:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1bc46:	f029 fdd5 	bl	457f4 <__ssprint_r>
   1bc4a:	2800      	cmp	r0, #0
   1bc4c:	f47f af0b 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1bc50:	3d10      	subs	r5, #16
   1bc52:	2d10      	cmp	r5, #16
   1bc54:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   1bc58:	dce4      	bgt.n	1bc24 <_svfprintf_r+0x364>
   1bc5a:	4623      	mov	r3, r4
   1bc5c:	460c      	mov	r4, r1
   1bc5e:	3201      	adds	r2, #1
   1bc60:	442c      	add	r4, r5
   1bc62:	f8c9 3000 	str.w	r3, [r9]
   1bc66:	2a07      	cmp	r2, #7
   1bc68:	f8c9 5004 	str.w	r5, [r9, #4]
   1bc6c:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   1bc70:	f300 83c8 	bgt.w	1c404 <_svfprintf_r+0xb44>
   1bc74:	f109 0908 	add.w	r9, r9, #8
   1bc78:	f418 7f80 	tst.w	r8, #256	; 0x100
   1bc7c:	f040 8244 	bne.w	1c108 <_svfprintf_r+0x848>
   1bc80:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1bc82:	9a08      	ldr	r2, [sp, #32]
   1bc84:	3301      	adds	r3, #1
   1bc86:	f8c9 7000 	str.w	r7, [r9]
   1bc8a:	4414      	add	r4, r2
   1bc8c:	f8c9 2004 	str.w	r2, [r9, #4]
   1bc90:	2b07      	cmp	r3, #7
   1bc92:	9329      	str	r3, [sp, #164]	; 0xa4
   1bc94:	942a      	str	r4, [sp, #168]	; 0xa8
   1bc96:	f300 831a 	bgt.w	1c2ce <_svfprintf_r+0xa0e>
   1bc9a:	f109 0908 	add.w	r9, r9, #8
   1bc9e:	f018 0f04 	tst.w	r8, #4
   1bca2:	d036      	beq.n	1bd12 <_svfprintf_r+0x452>
   1bca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bca6:	9a05      	ldr	r2, [sp, #20]
   1bca8:	1a9d      	subs	r5, r3, r2
   1bcaa:	2d00      	cmp	r5, #0
   1bcac:	dd31      	ble.n	1bd12 <_svfprintf_r+0x452>
   1bcae:	2d10      	cmp	r5, #16
   1bcb0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1bcb2:	dd22      	ble.n	1bcfa <_svfprintf_r+0x43a>
   1bcb4:	2610      	movs	r6, #16
   1bcb6:	e9dd 7803 	ldrd	r7, r8, [sp, #12]
   1bcba:	e002      	b.n	1bcc2 <_svfprintf_r+0x402>
   1bcbc:	3d10      	subs	r5, #16
   1bcbe:	2d10      	cmp	r5, #16
   1bcc0:	dd1b      	ble.n	1bcfa <_svfprintf_r+0x43a>
   1bcc2:	3301      	adds	r3, #1
   1bcc4:	3410      	adds	r4, #16
   1bcc6:	4a65      	ldr	r2, [pc, #404]	; (1be5c <_svfprintf_r+0x59c>)
   1bcc8:	f109 0908 	add.w	r9, r9, #8
   1bccc:	2b07      	cmp	r3, #7
   1bcce:	f849 6c04 	str.w	r6, [r9, #-4]
   1bcd2:	f849 2c08 	str.w	r2, [r9, #-8]
   1bcd6:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   1bcda:	ddef      	ble.n	1bcbc <_svfprintf_r+0x3fc>
   1bcdc:	aa28      	add	r2, sp, #160	; 0xa0
   1bcde:	4641      	mov	r1, r8
   1bce0:	4638      	mov	r0, r7
   1bce2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1bce6:	f029 fd85 	bl	457f4 <__ssprint_r>
   1bcea:	2800      	cmp	r0, #0
   1bcec:	f47f aebb 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1bcf0:	3d10      	subs	r5, #16
   1bcf2:	2d10      	cmp	r5, #16
   1bcf4:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
   1bcf8:	dce3      	bgt.n	1bcc2 <_svfprintf_r+0x402>
   1bcfa:	3301      	adds	r3, #1
   1bcfc:	442c      	add	r4, r5
   1bcfe:	4a57      	ldr	r2, [pc, #348]	; (1be5c <_svfprintf_r+0x59c>)
   1bd00:	2b07      	cmp	r3, #7
   1bd02:	f8c9 5004 	str.w	r5, [r9, #4]
   1bd06:	f8c9 2000 	str.w	r2, [r9]
   1bd0a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   1bd0e:	f300 8449 	bgt.w	1c5a4 <_svfprintf_r+0xce4>
   1bd12:	9b07      	ldr	r3, [sp, #28]
   1bd14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1bd16:	9905      	ldr	r1, [sp, #20]
   1bd18:	428a      	cmp	r2, r1
   1bd1a:	bfac      	ite	ge
   1bd1c:	189b      	addge	r3, r3, r2
   1bd1e:	185b      	addlt	r3, r3, r1
   1bd20:	9307      	str	r3, [sp, #28]
   1bd22:	2c00      	cmp	r4, #0
   1bd24:	f47f ae97 	bne.w	1ba56 <_svfprintf_r+0x196>
   1bd28:	2300      	movs	r3, #0
   1bd2a:	9329      	str	r3, [sp, #164]	; 0xa4
   1bd2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1bd2e:	b11b      	cbz	r3, 1bd38 <_svfprintf_r+0x478>
   1bd30:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1bd32:	9803      	ldr	r0, [sp, #12]
   1bd34:	f027 fe98 	bl	43a68 <_free_r>
   1bd38:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1bd3c:	465f      	mov	r7, fp
   1bd3e:	e5e9      	b.n	1b914 <_svfprintf_r+0x54>
   1bd40:	f048 0810 	orr.w	r8, r8, #16
   1bd44:	f018 0f20 	tst.w	r8, #32
   1bd48:	f000 83b9 	beq.w	1c4be <_svfprintf_r+0xbfe>
   1bd4c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1bd4e:	3407      	adds	r4, #7
   1bd50:	f024 0307 	bic.w	r3, r4, #7
   1bd54:	f103 0208 	add.w	r2, r3, #8
   1bd58:	e9d3 4500 	ldrd	r4, r5, [r3]
   1bd5c:	920c      	str	r2, [sp, #48]	; 0x30
   1bd5e:	f428 6a80 	bic.w	sl, r8, #1024	; 0x400
   1bd62:	2300      	movs	r3, #0
   1bd64:	e6a3      	b.n	1baae <_svfprintf_r+0x1ee>
   1bd66:	4b3f      	ldr	r3, [pc, #252]	; (1be64 <_svfprintf_r+0x5a4>)
   1bd68:	f018 0f20 	tst.w	r8, #32
   1bd6c:	9315      	str	r3, [sp, #84]	; 0x54
   1bd6e:	f000 810f 	beq.w	1bf90 <_svfprintf_r+0x6d0>
   1bd72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1bd74:	3407      	adds	r4, #7
   1bd76:	f024 0307 	bic.w	r3, r4, #7
   1bd7a:	f103 0208 	add.w	r2, r3, #8
   1bd7e:	e9d3 4500 	ldrd	r4, r5, [r3]
   1bd82:	920c      	str	r2, [sp, #48]	; 0x30
   1bd84:	ea54 0305 	orrs.w	r3, r4, r5
   1bd88:	d003      	beq.n	1bd92 <_svfprintf_r+0x4d2>
   1bd8a:	f018 0f01 	tst.w	r8, #1
   1bd8e:	f040 8445 	bne.w	1c61c <_svfprintf_r+0xd5c>
   1bd92:	f428 6a80 	bic.w	sl, r8, #1024	; 0x400
   1bd96:	2302      	movs	r3, #2
   1bd98:	e689      	b.n	1baae <_svfprintf_r+0x1ee>
   1bd9a:	46c2      	mov	sl, r8
   1bd9c:	f01a 0f20 	tst.w	sl, #32
   1bda0:	f000 8135 	beq.w	1c00e <_svfprintf_r+0x74e>
   1bda4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1bda6:	3407      	adds	r4, #7
   1bda8:	f024 0407 	bic.w	r4, r4, #7
   1bdac:	e9d4 2300 	ldrd	r2, r3, [r4]
   1bdb0:	f104 0108 	add.w	r1, r4, #8
   1bdb4:	461d      	mov	r5, r3
   1bdb6:	4614      	mov	r4, r2
   1bdb8:	910c      	str	r1, [sp, #48]	; 0x30
   1bdba:	2a00      	cmp	r2, #0
   1bdbc:	f173 0300 	sbcs.w	r3, r3, #0
   1bdc0:	da06      	bge.n	1bdd0 <_svfprintf_r+0x510>
   1bdc2:	4264      	negs	r4, r4
   1bdc4:	f04f 032d 	mov.w	r3, #45	; 0x2d
   1bdc8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1bdcc:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   1bdd0:	ab54      	add	r3, sp, #336	; 0x150
   1bdd2:	9305      	str	r3, [sp, #20]
   1bdd4:	9b06      	ldr	r3, [sp, #24]
   1bdd6:	3301      	adds	r3, #1
   1bdd8:	f000 8324 	beq.w	1c424 <_svfprintf_r+0xb64>
   1bddc:	ea54 0205 	orrs.w	r2, r4, r5
   1bde0:	f04f 0301 	mov.w	r3, #1
   1bde4:	f02a 0880 	bic.w	r8, sl, #128	; 0x80
   1bde8:	f43f ae70 	beq.w	1bacc <_svfprintf_r+0x20c>
   1bdec:	46c2      	mov	sl, r8
   1bdee:	2b01      	cmp	r3, #1
   1bdf0:	f000 8318 	beq.w	1c424 <_svfprintf_r+0xb64>
   1bdf4:	2b02      	cmp	r3, #2
   1bdf6:	f040 82e1 	bne.w	1c3bc <_svfprintf_r+0xafc>
   1bdfa:	af54      	add	r7, sp, #336	; 0x150
   1bdfc:	9815      	ldr	r0, [sp, #84]	; 0x54
   1bdfe:	0923      	lsrs	r3, r4, #4
   1be00:	f004 010f 	and.w	r1, r4, #15
   1be04:	092a      	lsrs	r2, r5, #4
   1be06:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1be0a:	4615      	mov	r5, r2
   1be0c:	461c      	mov	r4, r3
   1be0e:	5c43      	ldrb	r3, [r0, r1]
   1be10:	f807 3d01 	strb.w	r3, [r7, #-1]!
   1be14:	ea54 0305 	orrs.w	r3, r4, r5
   1be18:	d1f1      	bne.n	1bdfe <_svfprintf_r+0x53e>
   1be1a:	9b05      	ldr	r3, [sp, #20]
   1be1c:	46d0      	mov	r8, sl
   1be1e:	1bdb      	subs	r3, r3, r7
   1be20:	9308      	str	r3, [sp, #32]
   1be22:	e667      	b.n	1baf4 <_svfprintf_r+0x234>
   1be24:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1be28:	2200      	movs	r2, #0
   1be2a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1be2e:	f81b 6b01 	ldrb.w	r6, [fp], #1
   1be32:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1be36:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1be3a:	2b09      	cmp	r3, #9
   1be3c:	d9f5      	bls.n	1be2a <_svfprintf_r+0x56a>
   1be3e:	920a      	str	r2, [sp, #40]	; 0x28
   1be40:	e599      	b.n	1b976 <_svfprintf_r+0xb6>
   1be42:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   1be46:	f89b 6000 	ldrb.w	r6, [fp]
   1be4a:	e592      	b.n	1b972 <_svfprintf_r+0xb2>
   1be4c:	f89b 6000 	ldrb.w	r6, [fp]
   1be50:	2e68      	cmp	r6, #104	; 0x68
   1be52:	f000 84e2 	beq.w	1c81a <_svfprintf_r+0xf5a>
   1be56:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   1be5a:	e58a      	b.n	1b972 <_svfprintf_r+0xb2>
   1be5c:	0004ae40 	.word	0x0004ae40
   1be60:	0004ae50 	.word	0x0004ae50
   1be64:	0004ae0c 	.word	0x0004ae0c
   1be68:	f89b 6000 	ldrb.w	r6, [fp]
   1be6c:	f10b 0201 	add.w	r2, fp, #1
   1be70:	2e2a      	cmp	r6, #42	; 0x2a
   1be72:	f001 81e9 	beq.w	1d248 <_svfprintf_r+0x1988>
   1be76:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1be7a:	2b09      	cmp	r3, #9
   1be7c:	f200 86bc 	bhi.w	1cbf8 <_svfprintf_r+0x1338>
   1be80:	2100      	movs	r1, #0
   1be82:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1be86:	f812 6b01 	ldrb.w	r6, [r2], #1
   1be8a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   1be8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1be92:	2b09      	cmp	r3, #9
   1be94:	d9f5      	bls.n	1be82 <_svfprintf_r+0x5c2>
   1be96:	9106      	str	r1, [sp, #24]
   1be98:	4693      	mov	fp, r2
   1be9a:	e56c      	b.n	1b976 <_svfprintf_r+0xb6>
   1be9c:	f89b 6000 	ldrb.w	r6, [fp]
   1bea0:	f048 0804 	orr.w	r8, r8, #4
   1bea4:	e565      	b.n	1b972 <_svfprintf_r+0xb2>
   1bea6:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
   1beaa:	f89b 6000 	ldrb.w	r6, [fp]
   1beae:	e560      	b.n	1b972 <_svfprintf_r+0xb2>
   1beb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1beb2:	f89b 6000 	ldrb.w	r6, [fp]
   1beb6:	681a      	ldr	r2, [r3, #0]
   1beb8:	3304      	adds	r3, #4
   1beba:	2a00      	cmp	r2, #0
   1bebc:	920a      	str	r2, [sp, #40]	; 0x28
   1bebe:	f2c0 848f 	blt.w	1c7e0 <_svfprintf_r+0xf20>
   1bec2:	930c      	str	r3, [sp, #48]	; 0x30
   1bec4:	e555      	b.n	1b972 <_svfprintf_r+0xb2>
   1bec6:	9e03      	ldr	r6, [sp, #12]
   1bec8:	4630      	mov	r0, r6
   1beca:	f028 fc45 	bl	44758 <_localeconv_r>
   1bece:	6843      	ldr	r3, [r0, #4]
   1bed0:	4618      	mov	r0, r3
   1bed2:	9319      	str	r3, [sp, #100]	; 0x64
   1bed4:	f024 fb56 	bl	40584 <strlen>
   1bed8:	9018      	str	r0, [sp, #96]	; 0x60
   1beda:	4604      	mov	r4, r0
   1bedc:	4630      	mov	r0, r6
   1bede:	f028 fc3b 	bl	44758 <_localeconv_r>
   1bee2:	6883      	ldr	r3, [r0, #8]
   1bee4:	9317      	str	r3, [sp, #92]	; 0x5c
   1bee6:	2c00      	cmp	r4, #0
   1bee8:	f43f ada9 	beq.w	1ba3e <_svfprintf_r+0x17e>
   1beec:	2b00      	cmp	r3, #0
   1beee:	f43f ada6 	beq.w	1ba3e <_svfprintf_r+0x17e>
   1bef2:	781b      	ldrb	r3, [r3, #0]
   1bef4:	f89b 6000 	ldrb.w	r6, [fp]
   1bef8:	2b00      	cmp	r3, #0
   1befa:	f43f ad3a 	beq.w	1b972 <_svfprintf_r+0xb2>
   1befe:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   1bf02:	e536      	b.n	1b972 <_svfprintf_r+0xb2>
   1bf04:	f048 0801 	orr.w	r8, r8, #1
   1bf08:	f89b 6000 	ldrb.w	r6, [fp]
   1bf0c:	e531      	b.n	1b972 <_svfprintf_r+0xb2>
   1bf0e:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
   1bf12:	f89b 6000 	ldrb.w	r6, [fp]
   1bf16:	2b00      	cmp	r3, #0
   1bf18:	f47f ad2b 	bne.w	1b972 <_svfprintf_r+0xb2>
   1bf1c:	2320      	movs	r3, #32
   1bf1e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   1bf22:	e526      	b.n	1b972 <_svfprintf_r+0xb2>
   1bf24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1bf26:	f018 0f20 	tst.w	r8, #32
   1bf2a:	f852 3b04 	ldr.w	r3, [r2], #4
   1bf2e:	920c      	str	r2, [sp, #48]	; 0x30
   1bf30:	f040 836c 	bne.w	1c60c <_svfprintf_r+0xd4c>
   1bf34:	f018 0f10 	tst.w	r8, #16
   1bf38:	f040 8576 	bne.w	1ca28 <_svfprintf_r+0x1168>
   1bf3c:	f018 0f40 	tst.w	r8, #64	; 0x40
   1bf40:	f040 8679 	bne.w	1cc36 <_svfprintf_r+0x1376>
   1bf44:	f418 7f00 	tst.w	r8, #512	; 0x200
   1bf48:	f000 856e 	beq.w	1ca28 <_svfprintf_r+0x1168>
   1bf4c:	9a07      	ldr	r2, [sp, #28]
   1bf4e:	465f      	mov	r7, fp
   1bf50:	701a      	strb	r2, [r3, #0]
   1bf52:	e4df      	b.n	1b914 <_svfprintf_r+0x54>
   1bf54:	f89b 6000 	ldrb.w	r6, [fp]
   1bf58:	2e6c      	cmp	r6, #108	; 0x6c
   1bf5a:	f000 8456 	beq.w	1c80a <_svfprintf_r+0xf4a>
   1bf5e:	f048 0810 	orr.w	r8, r8, #16
   1bf62:	e506      	b.n	1b972 <_svfprintf_r+0xb2>
   1bf64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1bf66:	f647 0330 	movw	r3, #30768	; 0x7830
   1bf6a:	f048 0a02 	orr.w	sl, r8, #2
   1bf6e:	2500      	movs	r5, #0
   1bf70:	6814      	ldr	r4, [r2, #0]
   1bf72:	3204      	adds	r2, #4
   1bf74:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
   1bf78:	2678      	movs	r6, #120	; 0x78
   1bf7a:	4bb2      	ldr	r3, [pc, #712]	; (1c244 <_svfprintf_r+0x984>)
   1bf7c:	920c      	str	r2, [sp, #48]	; 0x30
   1bf7e:	9315      	str	r3, [sp, #84]	; 0x54
   1bf80:	2302      	movs	r3, #2
   1bf82:	e594      	b.n	1baae <_svfprintf_r+0x1ee>
   1bf84:	4bb0      	ldr	r3, [pc, #704]	; (1c248 <_svfprintf_r+0x988>)
   1bf86:	f018 0f20 	tst.w	r8, #32
   1bf8a:	9315      	str	r3, [sp, #84]	; 0x54
   1bf8c:	f47f aef1 	bne.w	1bd72 <_svfprintf_r+0x4b2>
   1bf90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1bf92:	f018 0f10 	tst.w	r8, #16
   1bf96:	f102 0304 	add.w	r3, r2, #4
   1bf9a:	f040 8332 	bne.w	1c602 <_svfprintf_r+0xd42>
   1bf9e:	f018 0f40 	tst.w	r8, #64	; 0x40
   1bfa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1bfa4:	f000 8329 	beq.w	1c5fa <_svfprintf_r+0xd3a>
   1bfa8:	8814      	ldrh	r4, [r2, #0]
   1bfaa:	2500      	movs	r5, #0
   1bfac:	930c      	str	r3, [sp, #48]	; 0x30
   1bfae:	e6e9      	b.n	1bd84 <_svfprintf_r+0x4c4>
   1bfb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bfb2:	2500      	movs	r5, #0
   1bfb4:	681f      	ldr	r7, [r3, #0]
   1bfb6:	1d1c      	adds	r4, r3, #4
   1bfb8:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
   1bfbc:	2f00      	cmp	r7, #0
   1bfbe:	f000 8440 	beq.w	1c842 <_svfprintf_r+0xf82>
   1bfc2:	9a06      	ldr	r2, [sp, #24]
   1bfc4:	1c53      	adds	r3, r2, #1
   1bfc6:	f000 85f1 	beq.w	1cbac <_svfprintf_r+0x12ec>
   1bfca:	4629      	mov	r1, r5
   1bfcc:	4638      	mov	r0, r7
   1bfce:	f023 fe37 	bl	3fc40 <memchr>
   1bfd2:	900b      	str	r0, [sp, #44]	; 0x2c
   1bfd4:	2800      	cmp	r0, #0
   1bfd6:	f000 878e 	beq.w	1cef6 <_svfprintf_r+0x1636>
   1bfda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1bfdc:	9506      	str	r5, [sp, #24]
   1bfde:	1bd9      	subs	r1, r3, r7
   1bfe0:	940c      	str	r4, [sp, #48]	; 0x30
   1bfe2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1bfe6:	9108      	str	r1, [sp, #32]
   1bfe8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1bfec:	950b      	str	r5, [sp, #44]	; 0x2c
   1bfee:	9105      	str	r1, [sp, #20]
   1bff0:	950e      	str	r5, [sp, #56]	; 0x38
   1bff2:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   1bff6:	e58a      	b.n	1bb0e <_svfprintf_r+0x24e>
   1bff8:	f048 0808 	orr.w	r8, r8, #8
   1bffc:	f89b 6000 	ldrb.w	r6, [fp]
   1c000:	e4b7      	b.n	1b972 <_svfprintf_r+0xb2>
   1c002:	f048 0a10 	orr.w	sl, r8, #16
   1c006:	f01a 0f20 	tst.w	sl, #32
   1c00a:	f47f aecb 	bne.w	1bda4 <_svfprintf_r+0x4e4>
   1c00e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1c010:	f01a 0f10 	tst.w	sl, #16
   1c014:	f102 0304 	add.w	r3, r2, #4
   1c018:	f040 82e8 	bne.w	1c5ec <_svfprintf_r+0xd2c>
   1c01c:	f01a 0f40 	tst.w	sl, #64	; 0x40
   1c020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1c022:	f000 82df 	beq.w	1c5e4 <_svfprintf_r+0xd24>
   1c026:	f9b2 4000 	ldrsh.w	r4, [r2]
   1c02a:	930c      	str	r3, [sp, #48]	; 0x30
   1c02c:	17e5      	asrs	r5, r4, #31
   1c02e:	4622      	mov	r2, r4
   1c030:	462b      	mov	r3, r5
   1c032:	e6c2      	b.n	1bdba <_svfprintf_r+0x4fa>
   1c034:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1c036:	2300      	movs	r3, #0
   1c038:	2001      	movs	r0, #1
   1c03a:	af3b      	add	r7, sp, #236	; 0xec
   1c03c:	6811      	ldr	r1, [r2, #0]
   1c03e:	3204      	adds	r2, #4
   1c040:	9005      	str	r0, [sp, #20]
   1c042:	920c      	str	r2, [sp, #48]	; 0x30
   1c044:	461a      	mov	r2, r3
   1c046:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   1c04a:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
   1c04e:	9008      	str	r0, [sp, #32]
   1c050:	930b      	str	r3, [sp, #44]	; 0x2c
   1c052:	9306      	str	r3, [sp, #24]
   1c054:	930e      	str	r3, [sp, #56]	; 0x38
   1c056:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
   1c05a:	e55c      	b.n	1bb16 <_svfprintf_r+0x256>
   1c05c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1c05e:	f04f 32ff 	mov.w	r2, #4294967295
   1c062:	4b7a      	ldr	r3, [pc, #488]	; (1c24c <_svfprintf_r+0x98c>)
   1c064:	3407      	adds	r4, #7
   1c066:	f024 0407 	bic.w	r4, r4, #7
   1c06a:	ed94 7b00 	vldr	d7, [r4]
   1c06e:	f104 0108 	add.w	r1, r4, #8
   1c072:	ec55 4b17 	vmov	r4, r5, d7
   1c076:	910c      	str	r1, [sp, #48]	; 0x30
   1c078:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   1c07c:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
   1c080:	911d      	str	r1, [sp, #116]	; 0x74
   1c082:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
   1c086:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
   1c08a:	f7fe f865 	bl	1a158 <__aeabi_dcmpun>
   1c08e:	2800      	cmp	r0, #0
   1c090:	f040 82d0 	bne.w	1c634 <_svfprintf_r+0xd74>
   1c094:	f04f 32ff 	mov.w	r2, #4294967295
   1c098:	4b6c      	ldr	r3, [pc, #432]	; (1c24c <_svfprintf_r+0x98c>)
   1c09a:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
   1c09e:	f7fc fdf7 	bl	18c90 <__aeabi_dcmple>
   1c0a2:	2800      	cmp	r0, #0
   1c0a4:	f040 82c6 	bne.w	1c634 <_svfprintf_r+0xd74>
   1c0a8:	2200      	movs	r2, #0
   1c0aa:	2300      	movs	r3, #0
   1c0ac:	4620      	mov	r0, r4
   1c0ae:	4629      	mov	r1, r5
   1c0b0:	f7fc fde4 	bl	18c7c <__aeabi_dcmplt>
   1c0b4:	2800      	cmp	r0, #0
   1c0b6:	f040 863d 	bne.w	1cd34 <_svfprintf_r+0x1474>
   1c0ba:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1c0be:	2003      	movs	r0, #3
   1c0c0:	4f63      	ldr	r7, [pc, #396]	; (1c250 <_svfprintf_r+0x990>)
   1c0c2:	4b64      	ldr	r3, [pc, #400]	; (1c254 <_svfprintf_r+0x994>)
   1c0c4:	9005      	str	r0, [sp, #20]
   1c0c6:	2100      	movs	r1, #0
   1c0c8:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   1c0cc:	9008      	str	r0, [sp, #32]
   1c0ce:	2e47      	cmp	r6, #71	; 0x47
   1c0d0:	bfd8      	it	le
   1c0d2:	461f      	movle	r7, r3
   1c0d4:	910b      	str	r1, [sp, #44]	; 0x2c
   1c0d6:	9106      	str	r1, [sp, #24]
   1c0d8:	910e      	str	r1, [sp, #56]	; 0x38
   1c0da:	e9cd 1110 	strd	r1, r1, [sp, #64]	; 0x40
   1c0de:	e516      	b.n	1bb0e <_svfprintf_r+0x24e>
   1c0e0:	2e00      	cmp	r6, #0
   1c0e2:	f000 84a6 	beq.w	1ca32 <_svfprintf_r+0x1172>
   1c0e6:	2201      	movs	r2, #1
   1c0e8:	2300      	movs	r3, #0
   1c0ea:	f88d 60ec 	strb.w	r6, [sp, #236]	; 0xec
   1c0ee:	af3b      	add	r7, sp, #236	; 0xec
   1c0f0:	4611      	mov	r1, r2
   1c0f2:	9205      	str	r2, [sp, #20]
   1c0f4:	461a      	mov	r2, r3
   1c0f6:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   1c0fa:	9108      	str	r1, [sp, #32]
   1c0fc:	920b      	str	r2, [sp, #44]	; 0x2c
   1c0fe:	9206      	str	r2, [sp, #24]
   1c100:	920e      	str	r2, [sp, #56]	; 0x38
   1c102:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
   1c106:	e506      	b.n	1bb16 <_svfprintf_r+0x256>
   1c108:	2e65      	cmp	r6, #101	; 0x65
   1c10a:	f340 80ec 	ble.w	1c2e6 <_svfprintf_r+0xa26>
   1c10e:	2200      	movs	r2, #0
   1c110:	2300      	movs	r3, #0
   1c112:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   1c116:	f7fc fda7 	bl	18c68 <__aeabi_dcmpeq>
   1c11a:	2800      	cmp	r0, #0
   1c11c:	f000 80a0 	beq.w	1c260 <_svfprintf_r+0x9a0>
   1c120:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1c122:	2201      	movs	r2, #1
   1c124:	3401      	adds	r4, #1
   1c126:	494c      	ldr	r1, [pc, #304]	; (1c258 <_svfprintf_r+0x998>)
   1c128:	4413      	add	r3, r2
   1c12a:	f8c9 2004 	str.w	r2, [r9, #4]
   1c12e:	942a      	str	r4, [sp, #168]	; 0xa8
   1c130:	2b07      	cmp	r3, #7
   1c132:	f8c9 1000 	str.w	r1, [r9]
   1c136:	9329      	str	r3, [sp, #164]	; 0xa4
   1c138:	f300 8456 	bgt.w	1c9e8 <_svfprintf_r+0x1128>
   1c13c:	f109 0908 	add.w	r9, r9, #8
   1c140:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c142:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c144:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c146:	4293      	cmp	r3, r2
   1c148:	f280 8226 	bge.w	1c598 <_svfprintf_r+0xcd8>
   1c14c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1c14e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1c150:	3301      	adds	r3, #1
   1c152:	9916      	ldr	r1, [sp, #88]	; 0x58
   1c154:	4414      	add	r4, r2
   1c156:	f8c9 2004 	str.w	r2, [r9, #4]
   1c15a:	2b07      	cmp	r3, #7
   1c15c:	f8c9 1000 	str.w	r1, [r9]
   1c160:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   1c164:	f300 8361 	bgt.w	1c82a <_svfprintf_r+0xf6a>
   1c168:	f109 0908 	add.w	r9, r9, #8
   1c16c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c16e:	1e5d      	subs	r5, r3, #1
   1c170:	2d00      	cmp	r5, #0
   1c172:	f77f ad94 	ble.w	1bc9e <_svfprintf_r+0x3de>
   1c176:	2d10      	cmp	r5, #16
   1c178:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1c17a:	4b38      	ldr	r3, [pc, #224]	; (1c25c <_svfprintf_r+0x99c>)
   1c17c:	f340 841b 	ble.w	1c9b6 <_svfprintf_r+0x10f6>
   1c180:	4619      	mov	r1, r3
   1c182:	2610      	movs	r6, #16
   1c184:	4623      	mov	r3, r4
   1c186:	460c      	mov	r4, r1
   1c188:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
   1c18c:	e003      	b.n	1c196 <_svfprintf_r+0x8d6>
   1c18e:	3d10      	subs	r5, #16
   1c190:	2d10      	cmp	r5, #16
   1c192:	f340 840d 	ble.w	1c9b0 <_svfprintf_r+0x10f0>
   1c196:	3201      	adds	r2, #1
   1c198:	3310      	adds	r3, #16
   1c19a:	f8c9 4000 	str.w	r4, [r9]
   1c19e:	f109 0908 	add.w	r9, r9, #8
   1c1a2:	2a07      	cmp	r2, #7
   1c1a4:	f849 6c04 	str.w	r6, [r9, #-4]
   1c1a8:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
   1c1ac:	ddef      	ble.n	1c18e <_svfprintf_r+0x8ce>
   1c1ae:	aa28      	add	r2, sp, #160	; 0xa0
   1c1b0:	4651      	mov	r1, sl
   1c1b2:	4638      	mov	r0, r7
   1c1b4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c1b8:	f029 fb1c 	bl	457f4 <__ssprint_r>
   1c1bc:	2800      	cmp	r0, #0
   1c1be:	f47f ac52 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c1c2:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
   1c1c6:	e7e2      	b.n	1c18e <_svfprintf_r+0x8ce>
   1c1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c1ca:	9a05      	ldr	r2, [sp, #20]
   1c1cc:	1a9d      	subs	r5, r3, r2
   1c1ce:	2d00      	cmp	r5, #0
   1c1d0:	f77f ad17 	ble.w	1bc02 <_svfprintf_r+0x342>
   1c1d4:	2d10      	cmp	r5, #16
   1c1d6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1c1d8:	4b20      	ldr	r3, [pc, #128]	; (1c25c <_svfprintf_r+0x99c>)
   1c1da:	dd24      	ble.n	1c226 <_svfprintf_r+0x966>
   1c1dc:	4621      	mov	r1, r4
   1c1de:	f04f 0a10 	mov.w	sl, #16
   1c1e2:	461c      	mov	r4, r3
   1c1e4:	e002      	b.n	1c1ec <_svfprintf_r+0x92c>
   1c1e6:	3d10      	subs	r5, #16
   1c1e8:	2d10      	cmp	r5, #16
   1c1ea:	dd1a      	ble.n	1c222 <_svfprintf_r+0x962>
   1c1ec:	3201      	adds	r2, #1
   1c1ee:	3110      	adds	r1, #16
   1c1f0:	f8c9 4000 	str.w	r4, [r9]
   1c1f4:	f109 0908 	add.w	r9, r9, #8
   1c1f8:	2a07      	cmp	r2, #7
   1c1fa:	f849 ac04 	str.w	sl, [r9, #-4]
   1c1fe:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   1c202:	ddf0      	ble.n	1c1e6 <_svfprintf_r+0x926>
   1c204:	aa28      	add	r2, sp, #160	; 0xa0
   1c206:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c20a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c20e:	f029 faf1 	bl	457f4 <__ssprint_r>
   1c212:	2800      	cmp	r0, #0
   1c214:	f47f ac27 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c218:	3d10      	subs	r5, #16
   1c21a:	2d10      	cmp	r5, #16
   1c21c:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   1c220:	dce4      	bgt.n	1c1ec <_svfprintf_r+0x92c>
   1c222:	4623      	mov	r3, r4
   1c224:	460c      	mov	r4, r1
   1c226:	3201      	adds	r2, #1
   1c228:	442c      	add	r4, r5
   1c22a:	f8c9 3000 	str.w	r3, [r9]
   1c22e:	2a07      	cmp	r2, #7
   1c230:	f8c9 5004 	str.w	r5, [r9, #4]
   1c234:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   1c238:	f300 83c9 	bgt.w	1c9ce <_svfprintf_r+0x110e>
   1c23c:	f109 0908 	add.w	r9, r9, #8
   1c240:	e4df      	b.n	1bc02 <_svfprintf_r+0x342>
   1c242:	bf00      	nop
   1c244:	0004ae0c 	.word	0x0004ae0c
   1c248:	0004ae20 	.word	0x0004ae20
   1c24c:	7fefffff 	.word	0x7fefffff
   1c250:	0004ae00 	.word	0x0004ae00
   1c254:	0004adfc 	.word	0x0004adfc
   1c258:	0004ae3c 	.word	0x0004ae3c
   1c25c:	0004ae50 	.word	0x0004ae50
   1c260:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c262:	2b00      	cmp	r3, #0
   1c264:	f300 814c 	bgt.w	1c500 <_svfprintf_r+0xc40>
   1c268:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1c26a:	2101      	movs	r1, #1
   1c26c:	3401      	adds	r4, #1
   1c26e:	48c8      	ldr	r0, [pc, #800]	; (1c590 <_svfprintf_r+0xcd0>)
   1c270:	440a      	add	r2, r1
   1c272:	f8c9 1004 	str.w	r1, [r9, #4]
   1c276:	942a      	str	r4, [sp, #168]	; 0xa8
   1c278:	2a07      	cmp	r2, #7
   1c27a:	f8c9 0000 	str.w	r0, [r9]
   1c27e:	9229      	str	r2, [sp, #164]	; 0xa4
   1c280:	f300 862b 	bgt.w	1ceda <_svfprintf_r+0x161a>
   1c284:	f109 0908 	add.w	r9, r9, #8
   1c288:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c28a:	431a      	orrs	r2, r3
   1c28c:	f000 866a 	beq.w	1cf64 <_svfprintf_r+0x16a4>
   1c290:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1c292:	9914      	ldr	r1, [sp, #80]	; 0x50
   1c294:	3201      	adds	r2, #1
   1c296:	9816      	ldr	r0, [sp, #88]	; 0x58
   1c298:	440c      	add	r4, r1
   1c29a:	f8c9 1004 	str.w	r1, [r9, #4]
   1c29e:	2a07      	cmp	r2, #7
   1c2a0:	f8c9 0000 	str.w	r0, [r9]
   1c2a4:	942a      	str	r4, [sp, #168]	; 0xa8
   1c2a6:	9229      	str	r2, [sp, #164]	; 0xa4
   1c2a8:	f300 8631 	bgt.w	1cf0e <_svfprintf_r+0x164e>
   1c2ac:	f109 0908 	add.w	r9, r9, #8
   1c2b0:	2b00      	cmp	r3, #0
   1c2b2:	f2c0 86ca 	blt.w	1d04a <_svfprintf_r+0x178a>
   1c2b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c2b8:	3201      	adds	r2, #1
   1c2ba:	f8c9 7000 	str.w	r7, [r9]
   1c2be:	441c      	add	r4, r3
   1c2c0:	2a07      	cmp	r2, #7
   1c2c2:	f8c9 3004 	str.w	r3, [r9, #4]
   1c2c6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   1c2ca:	f77f ace6 	ble.w	1bc9a <_svfprintf_r+0x3da>
   1c2ce:	aa28      	add	r2, sp, #160	; 0xa0
   1c2d0:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c2d4:	f029 fa8e 	bl	457f4 <__ssprint_r>
   1c2d8:	2800      	cmp	r0, #0
   1c2da:	f47f abc4 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c2de:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c2e0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c2e4:	e4db      	b.n	1bc9e <_svfprintf_r+0x3de>
   1c2e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c2e8:	3401      	adds	r4, #1
   1c2ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1c2ec:	f109 0508 	add.w	r5, r9, #8
   1c2f0:	2a01      	cmp	r2, #1
   1c2f2:	f103 0601 	add.w	r6, r3, #1
   1c2f6:	f340 80f0 	ble.w	1c4da <_svfprintf_r+0xc1a>
   1c2fa:	2301      	movs	r3, #1
   1c2fc:	2e07      	cmp	r6, #7
   1c2fe:	f8c9 7000 	str.w	r7, [r9]
   1c302:	f8c9 3004 	str.w	r3, [r9, #4]
   1c306:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   1c30a:	f300 8345 	bgt.w	1c998 <_svfprintf_r+0x10d8>
   1c30e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1c310:	3601      	adds	r6, #1
   1c312:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1c314:	441c      	add	r4, r3
   1c316:	2e07      	cmp	r6, #7
   1c318:	602a      	str	r2, [r5, #0]
   1c31a:	606b      	str	r3, [r5, #4]
   1c31c:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   1c320:	f300 832e 	bgt.w	1c980 <_svfprintf_r+0x10c0>
   1c324:	3508      	adds	r5, #8
   1c326:	1c73      	adds	r3, r6, #1
   1c328:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c32a:	f105 0908 	add.w	r9, r5, #8
   1c32e:	9308      	str	r3, [sp, #32]
   1c330:	f102 3aff 	add.w	sl, r2, #4294967295
   1c334:	9306      	str	r3, [sp, #24]
   1c336:	2200      	movs	r2, #0
   1c338:	2300      	movs	r3, #0
   1c33a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   1c33e:	f7fc fc93 	bl	18c68 <__aeabi_dcmpeq>
   1c342:	2800      	cmp	r0, #0
   1c344:	d17c      	bne.n	1c440 <_svfprintf_r+0xb80>
   1c346:	9b06      	ldr	r3, [sp, #24]
   1c348:	3701      	adds	r7, #1
   1c34a:	4454      	add	r4, sl
   1c34c:	2b07      	cmp	r3, #7
   1c34e:	9329      	str	r3, [sp, #164]	; 0xa4
   1c350:	942a      	str	r4, [sp, #168]	; 0xa8
   1c352:	e9c5 7a00 	strd	r7, sl, [r5]
   1c356:	f300 8248 	bgt.w	1c7ea <_svfprintf_r+0xf2a>
   1c35a:	f105 0310 	add.w	r3, r5, #16
   1c35e:	1cb2      	adds	r2, r6, #2
   1c360:	464d      	mov	r5, r9
   1c362:	4699      	mov	r9, r3
   1c364:	9206      	str	r2, [sp, #24]
   1c366:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1c368:	ab24      	add	r3, sp, #144	; 0x90
   1c36a:	4414      	add	r4, r2
   1c36c:	606a      	str	r2, [r5, #4]
   1c36e:	9a06      	ldr	r2, [sp, #24]
   1c370:	942a      	str	r4, [sp, #168]	; 0xa8
   1c372:	2a07      	cmp	r2, #7
   1c374:	9229      	str	r2, [sp, #164]	; 0xa4
   1c376:	602b      	str	r3, [r5, #0]
   1c378:	f77f ac91 	ble.w	1bc9e <_svfprintf_r+0x3de>
   1c37c:	e7a7      	b.n	1c2ce <_svfprintf_r+0xa0e>
   1c37e:	9206      	str	r2, [sp, #24]
   1c380:	af54      	add	r7, sp, #336	; 0x150
   1c382:	9208      	str	r2, [sp, #32]
   1c384:	f7ff bbb6 	b.w	1baf4 <_svfprintf_r+0x234>
   1c388:	aa28      	add	r2, sp, #160	; 0xa0
   1c38a:	931b      	str	r3, [sp, #108]	; 0x6c
   1c38c:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c390:	f029 fa30 	bl	457f4 <__ssprint_r>
   1c394:	2800      	cmp	r0, #0
   1c396:	f47f ab66 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c39a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c39c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c3a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1c3a2:	e419      	b.n	1bbd8 <_svfprintf_r+0x318>
   1c3a4:	aa28      	add	r2, sp, #160	; 0xa0
   1c3a6:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c3aa:	f029 fa23 	bl	457f4 <__ssprint_r>
   1c3ae:	2800      	cmp	r0, #0
   1c3b0:	f47f ab59 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c3b4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c3b6:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c3ba:	e41e      	b.n	1bbfa <_svfprintf_r+0x33a>
   1c3bc:	a954      	add	r1, sp, #336	; 0x150
   1c3be:	e000      	b.n	1c3c2 <_svfprintf_r+0xb02>
   1c3c0:	4639      	mov	r1, r7
   1c3c2:	08e2      	lsrs	r2, r4, #3
   1c3c4:	f004 0307 	and.w	r3, r4, #7
   1c3c8:	08e8      	lsrs	r0, r5, #3
   1c3ca:	1e4f      	subs	r7, r1, #1
   1c3cc:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1c3d0:	3330      	adds	r3, #48	; 0x30
   1c3d2:	4605      	mov	r5, r0
   1c3d4:	4614      	mov	r4, r2
   1c3d6:	f801 3c01 	strb.w	r3, [r1, #-1]
   1c3da:	ea54 0205 	orrs.w	r2, r4, r5
   1c3de:	d1ef      	bne.n	1c3c0 <_svfprintf_r+0xb00>
   1c3e0:	2b30      	cmp	r3, #48	; 0x30
   1c3e2:	f43f ad1a 	beq.w	1be1a <_svfprintf_r+0x55a>
   1c3e6:	f01a 0f01 	tst.w	sl, #1
   1c3ea:	f43f ad16 	beq.w	1be1a <_svfprintf_r+0x55a>
   1c3ee:	3902      	subs	r1, #2
   1c3f0:	9a05      	ldr	r2, [sp, #20]
   1c3f2:	2330      	movs	r3, #48	; 0x30
   1c3f4:	46d0      	mov	r8, sl
   1c3f6:	1a52      	subs	r2, r2, r1
   1c3f8:	f807 3c01 	strb.w	r3, [r7, #-1]
   1c3fc:	460f      	mov	r7, r1
   1c3fe:	9208      	str	r2, [sp, #32]
   1c400:	f7ff bb78 	b.w	1baf4 <_svfprintf_r+0x234>
   1c404:	aa28      	add	r2, sp, #160	; 0xa0
   1c406:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c40a:	f029 f9f3 	bl	457f4 <__ssprint_r>
   1c40e:	2800      	cmp	r0, #0
   1c410:	f47f ab29 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c414:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c416:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c41a:	e42d      	b.n	1bc78 <_svfprintf_r+0x3b8>
   1c41c:	9306      	str	r3, [sp, #24]
   1c41e:	af54      	add	r7, sp, #336	; 0x150
   1c420:	f7ff bb68 	b.w	1baf4 <_svfprintf_r+0x234>
   1c424:	2d00      	cmp	r5, #0
   1c426:	bf08      	it	eq
   1c428:	2c0a      	cmpeq	r4, #10
   1c42a:	f080 8186 	bcs.w	1c73a <_svfprintf_r+0xe7a>
   1c42e:	3430      	adds	r4, #48	; 0x30
   1c430:	af54      	add	r7, sp, #336	; 0x150
   1c432:	2301      	movs	r3, #1
   1c434:	46d0      	mov	r8, sl
   1c436:	f807 4d01 	strb.w	r4, [r7, #-1]!
   1c43a:	9308      	str	r3, [sp, #32]
   1c43c:	f7ff bb5a 	b.w	1baf4 <_svfprintf_r+0x234>
   1c440:	f1ba 0f00 	cmp.w	sl, #0
   1c444:	dd8f      	ble.n	1c366 <_svfprintf_r+0xaa6>
   1c446:	f1ba 0f10 	cmp.w	sl, #16
   1c44a:	f340 86a9 	ble.w	1d1a0 <_svfprintf_r+0x18e0>
   1c44e:	4b51      	ldr	r3, [pc, #324]	; (1c594 <_svfprintf_r+0xcd4>)
   1c450:	4622      	mov	r2, r4
   1c452:	2710      	movs	r7, #16
   1c454:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1c458:	9908      	ldr	r1, [sp, #32]
   1c45a:	461c      	mov	r4, r3
   1c45c:	e006      	b.n	1c46c <_svfprintf_r+0xbac>
   1c45e:	f1aa 0a10 	sub.w	sl, sl, #16
   1c462:	1c71      	adds	r1, r6, #1
   1c464:	f1ba 0f10 	cmp.w	sl, #16
   1c468:	f340 82ca 	ble.w	1ca00 <_svfprintf_r+0x1140>
   1c46c:	3210      	adds	r2, #16
   1c46e:	2907      	cmp	r1, #7
   1c470:	602c      	str	r4, [r5, #0]
   1c472:	460e      	mov	r6, r1
   1c474:	606f      	str	r7, [r5, #4]
   1c476:	f105 0508 	add.w	r5, r5, #8
   1c47a:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
   1c47e:	ddee      	ble.n	1c45e <_svfprintf_r+0xb9e>
   1c480:	aa28      	add	r2, sp, #160	; 0xa0
   1c482:	9904      	ldr	r1, [sp, #16]
   1c484:	4648      	mov	r0, r9
   1c486:	ad2b      	add	r5, sp, #172	; 0xac
   1c488:	f029 f9b4 	bl	457f4 <__ssprint_r>
   1c48c:	2800      	cmp	r0, #0
   1c48e:	f47f aaea 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c492:	e9dd 6229 	ldrd	r6, r2, [sp, #164]	; 0xa4
   1c496:	e7e2      	b.n	1c45e <_svfprintf_r+0xb9e>
   1c498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c49a:	f018 0f10 	tst.w	r8, #16
   1c49e:	f103 0204 	add.w	r2, r3, #4
   1c4a2:	f040 8098 	bne.w	1c5d6 <_svfprintf_r+0xd16>
   1c4a6:	f018 0f40 	tst.w	r8, #64	; 0x40
   1c4aa:	f000 808f 	beq.w	1c5cc <_svfprintf_r+0xd0c>
   1c4ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c4b0:	46c2      	mov	sl, r8
   1c4b2:	2500      	movs	r5, #0
   1c4b4:	920c      	str	r2, [sp, #48]	; 0x30
   1c4b6:	881c      	ldrh	r4, [r3, #0]
   1c4b8:	2301      	movs	r3, #1
   1c4ba:	f7ff baf8 	b.w	1baae <_svfprintf_r+0x1ee>
   1c4be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1c4c0:	f018 0f10 	tst.w	r8, #16
   1c4c4:	f102 0304 	add.w	r3, r2, #4
   1c4c8:	d17b      	bne.n	1c5c2 <_svfprintf_r+0xd02>
   1c4ca:	f018 0f40 	tst.w	r8, #64	; 0x40
   1c4ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1c4d0:	d073      	beq.n	1c5ba <_svfprintf_r+0xcfa>
   1c4d2:	8814      	ldrh	r4, [r2, #0]
   1c4d4:	2500      	movs	r5, #0
   1c4d6:	930c      	str	r3, [sp, #48]	; 0x30
   1c4d8:	e441      	b.n	1bd5e <_svfprintf_r+0x49e>
   1c4da:	f018 0f01 	tst.w	r8, #1
   1c4de:	f47f af0c 	bne.w	1c2fa <_svfprintf_r+0xa3a>
   1c4e2:	2201      	movs	r2, #1
   1c4e4:	2e07      	cmp	r6, #7
   1c4e6:	f8c9 7000 	str.w	r7, [r9]
   1c4ea:	f8c9 2004 	str.w	r2, [r9, #4]
   1c4ee:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   1c4f2:	f300 817a 	bgt.w	1c7ea <_svfprintf_r+0xf2a>
   1c4f6:	3302      	adds	r3, #2
   1c4f8:	f109 0910 	add.w	r9, r9, #16
   1c4fc:	9306      	str	r3, [sp, #24]
   1c4fe:	e732      	b.n	1c366 <_svfprintf_r+0xaa6>
   1c500:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
   1c504:	4293      	cmp	r3, r2
   1c506:	bfa8      	it	ge
   1c508:	4613      	movge	r3, r2
   1c50a:	2b00      	cmp	r3, #0
   1c50c:	461d      	mov	r5, r3
   1c50e:	dd0d      	ble.n	1c52c <_svfprintf_r+0xc6c>
   1c510:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1c512:	442c      	add	r4, r5
   1c514:	f8c9 7000 	str.w	r7, [r9]
   1c518:	3301      	adds	r3, #1
   1c51a:	942a      	str	r4, [sp, #168]	; 0xa8
   1c51c:	f8c9 5004 	str.w	r5, [r9, #4]
   1c520:	2b07      	cmp	r3, #7
   1c522:	9329      	str	r3, [sp, #164]	; 0xa4
   1c524:	f300 841a 	bgt.w	1cd5c <_svfprintf_r+0x149c>
   1c528:	f109 0908 	add.w	r9, r9, #8
   1c52c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c52e:	2d00      	cmp	r5, #0
   1c530:	bfa8      	it	ge
   1c532:	1b5b      	subge	r3, r3, r5
   1c534:	2b00      	cmp	r3, #0
   1c536:	461d      	mov	r5, r3
   1c538:	f340 81bd 	ble.w	1c8b6 <_svfprintf_r+0xff6>
   1c53c:	2d10      	cmp	r5, #16
   1c53e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1c540:	4b14      	ldr	r3, [pc, #80]	; (1c594 <_svfprintf_r+0xcd4>)
   1c542:	f340 81a2 	ble.w	1c88a <_svfprintf_r+0xfca>
   1c546:	4621      	mov	r1, r4
   1c548:	9706      	str	r7, [sp, #24]
   1c54a:	2610      	movs	r6, #16
   1c54c:	461f      	mov	r7, r3
   1c54e:	e9dd a403 	ldrd	sl, r4, [sp, #12]
   1c552:	e003      	b.n	1c55c <_svfprintf_r+0xc9c>
   1c554:	3d10      	subs	r5, #16
   1c556:	2d10      	cmp	r5, #16
   1c558:	f340 8194 	ble.w	1c884 <_svfprintf_r+0xfc4>
   1c55c:	3201      	adds	r2, #1
   1c55e:	3110      	adds	r1, #16
   1c560:	f8c9 7000 	str.w	r7, [r9]
   1c564:	f109 0908 	add.w	r9, r9, #8
   1c568:	2a07      	cmp	r2, #7
   1c56a:	f849 6c04 	str.w	r6, [r9, #-4]
   1c56e:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   1c572:	ddef      	ble.n	1c554 <_svfprintf_r+0xc94>
   1c574:	aa28      	add	r2, sp, #160	; 0xa0
   1c576:	4621      	mov	r1, r4
   1c578:	4650      	mov	r0, sl
   1c57a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c57e:	f029 f939 	bl	457f4 <__ssprint_r>
   1c582:	2800      	cmp	r0, #0
   1c584:	f47f aa6f 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c588:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   1c58c:	e7e2      	b.n	1c554 <_svfprintf_r+0xc94>
   1c58e:	bf00      	nop
   1c590:	0004ae3c 	.word	0x0004ae3c
   1c594:	0004ae50 	.word	0x0004ae50
   1c598:	f018 0f01 	tst.w	r8, #1
   1c59c:	f47f add6 	bne.w	1c14c <_svfprintf_r+0x88c>
   1c5a0:	f7ff bb7d 	b.w	1bc9e <_svfprintf_r+0x3de>
   1c5a4:	aa28      	add	r2, sp, #160	; 0xa0
   1c5a6:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c5aa:	f029 f923 	bl	457f4 <__ssprint_r>
   1c5ae:	2800      	cmp	r0, #0
   1c5b0:	f47f aa59 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c5b4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c5b6:	f7ff bbac 	b.w	1bd12 <_svfprintf_r+0x452>
   1c5ba:	f418 7f00 	tst.w	r8, #512	; 0x200
   1c5be:	f040 8320 	bne.w	1cc02 <_svfprintf_r+0x1342>
   1c5c2:	6814      	ldr	r4, [r2, #0]
   1c5c4:	2500      	movs	r5, #0
   1c5c6:	930c      	str	r3, [sp, #48]	; 0x30
   1c5c8:	f7ff bbc9 	b.w	1bd5e <_svfprintf_r+0x49e>
   1c5cc:	f418 7f00 	tst.w	r8, #512	; 0x200
   1c5d0:	f040 831c 	bne.w	1cc0c <_svfprintf_r+0x134c>
   1c5d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c5d6:	681c      	ldr	r4, [r3, #0]
   1c5d8:	46c2      	mov	sl, r8
   1c5da:	920c      	str	r2, [sp, #48]	; 0x30
   1c5dc:	2301      	movs	r3, #1
   1c5de:	2500      	movs	r5, #0
   1c5e0:	f7ff ba65 	b.w	1baae <_svfprintf_r+0x1ee>
   1c5e4:	f41a 7f00 	tst.w	sl, #512	; 0x200
   1c5e8:	f040 831d 	bne.w	1cc26 <_svfprintf_r+0x1366>
   1c5ec:	6814      	ldr	r4, [r2, #0]
   1c5ee:	930c      	str	r3, [sp, #48]	; 0x30
   1c5f0:	17e5      	asrs	r5, r4, #31
   1c5f2:	4622      	mov	r2, r4
   1c5f4:	462b      	mov	r3, r5
   1c5f6:	f7ff bbe0 	b.w	1bdba <_svfprintf_r+0x4fa>
   1c5fa:	f418 7f00 	tst.w	r8, #512	; 0x200
   1c5fe:	f040 830d 	bne.w	1cc1c <_svfprintf_r+0x135c>
   1c602:	6814      	ldr	r4, [r2, #0]
   1c604:	2500      	movs	r5, #0
   1c606:	930c      	str	r3, [sp, #48]	; 0x30
   1c608:	f7ff bbbc 	b.w	1bd84 <_svfprintf_r+0x4c4>
   1c60c:	9a07      	ldr	r2, [sp, #28]
   1c60e:	465f      	mov	r7, fp
   1c610:	4610      	mov	r0, r2
   1c612:	17d1      	asrs	r1, r2, #31
   1c614:	e9c3 0100 	strd	r0, r1, [r3]
   1c618:	f7ff b97c 	b.w	1b914 <_svfprintf_r+0x54>
   1c61c:	2330      	movs	r3, #48	; 0x30
   1c61e:	f048 0802 	orr.w	r8, r8, #2
   1c622:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   1c626:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   1c62a:	f428 6a80 	bic.w	sl, r8, #1024	; 0x400
   1c62e:	2302      	movs	r3, #2
   1c630:	f7ff ba3d 	b.w	1baae <_svfprintf_r+0x1ee>
   1c634:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   1c638:	4602      	mov	r2, r0
   1c63a:	460b      	mov	r3, r1
   1c63c:	f7fd fd8c 	bl	1a158 <__aeabi_dcmpun>
   1c640:	2800      	cmp	r0, #0
   1c642:	f040 85a2 	bne.w	1d18a <_svfprintf_r+0x18ca>
   1c646:	f026 0a20 	bic.w	sl, r6, #32
   1c64a:	f1ba 0f41 	cmp.w	sl, #65	; 0x41
   1c64e:	f040 82be 	bne.w	1cbce <_svfprintf_r+0x130e>
   1c652:	2e61      	cmp	r6, #97	; 0x61
   1c654:	f04f 0230 	mov.w	r2, #48	; 0x30
   1c658:	bf14      	ite	ne
   1c65a:	2358      	movne	r3, #88	; 0x58
   1c65c:	2378      	moveq	r3, #120	; 0x78
   1c65e:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   1c662:	f048 0202 	orr.w	r2, r8, #2
   1c666:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
   1c66a:	9b06      	ldr	r3, [sp, #24]
   1c66c:	9205      	str	r2, [sp, #20]
   1c66e:	2b63      	cmp	r3, #99	; 0x63
   1c670:	f300 82ed 	bgt.w	1cc4e <_svfprintf_r+0x138e>
   1c674:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   1c678:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1c67a:	af3b      	add	r7, sp, #236	; 0xec
   1c67c:	900b      	str	r0, [sp, #44]	; 0x2c
   1c67e:	2b00      	cmp	r3, #0
   1c680:	f2c0 837d 	blt.w	1cd7e <_svfprintf_r+0x14be>
   1c684:	2300      	movs	r3, #0
   1c686:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
   1c68a:	930d      	str	r3, [sp, #52]	; 0x34
   1c68c:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
   1c690:	f1ba 0f41 	cmp.w	sl, #65	; 0x41
   1c694:	f000 837c 	beq.w	1cd90 <_svfprintf_r+0x14d0>
   1c698:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   1c69c:	f000 83f8 	beq.w	1ce90 <_svfprintf_r+0x15d0>
   1c6a0:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   1c6a4:	f040 8502 	bne.w	1d0ac <_svfprintf_r+0x17ec>
   1c6a8:	9b06      	ldr	r3, [sp, #24]
   1c6aa:	a826      	add	r0, sp, #152	; 0x98
   1c6ac:	a923      	add	r1, sp, #140	; 0x8c
   1c6ae:	1c5c      	adds	r4, r3, #1
   1c6b0:	ab22      	add	r3, sp, #136	; 0x88
   1c6b2:	e9cd 1000 	strd	r1, r0, [sp]
   1c6b6:	4622      	mov	r2, r4
   1c6b8:	2102      	movs	r1, #2
   1c6ba:	9803      	ldr	r0, [sp, #12]
   1c6bc:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
   1c6c0:	f000 fdee 	bl	1d2a0 <_dtoa_r>
   1c6c4:	4607      	mov	r7, r0
   1c6c6:	443c      	add	r4, r7
   1c6c8:	2200      	movs	r2, #0
   1c6ca:	2300      	movs	r3, #0
   1c6cc:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
   1c6d0:	f7fc faca 	bl	18c68 <__aeabi_dcmpeq>
   1c6d4:	2800      	cmp	r0, #0
   1c6d6:	f000 8456 	beq.w	1cf86 <_svfprintf_r+0x16c6>
   1c6da:	4623      	mov	r3, r4
   1c6dc:	1bdb      	subs	r3, r3, r7
   1c6de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   1c6e2:	930f      	str	r3, [sp, #60]	; 0x3c
   1c6e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c6e6:	930e      	str	r3, [sp, #56]	; 0x38
   1c6e8:	f000 82c6 	beq.w	1cc78 <_svfprintf_r+0x13b8>
   1c6ec:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   1c6f0:	f040 82ca 	bne.w	1cc88 <_svfprintf_r+0x13c8>
   1c6f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c6f6:	2b00      	cmp	r3, #0
   1c6f8:	9b06      	ldr	r3, [sp, #24]
   1c6fa:	f340 8560 	ble.w	1d1be <_svfprintf_r+0x18fe>
   1c6fe:	2b00      	cmp	r3, #0
   1c700:	f040 8537 	bne.w	1d172 <_svfprintf_r+0x18b2>
   1c704:	9b05      	ldr	r3, [sp, #20]
   1c706:	07dd      	lsls	r5, r3, #31
   1c708:	f100 8533 	bmi.w	1d172 <_svfprintf_r+0x18b2>
   1c70c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c70e:	2666      	movs	r6, #102	; 0x66
   1c710:	9308      	str	r3, [sp, #32]
   1c712:	9b05      	ldr	r3, [sp, #20]
   1c714:	055a      	lsls	r2, r3, #21
   1c716:	f100 8471 	bmi.w	1cffc <_svfprintf_r+0x173c>
   1c71a:	9b08      	ldr	r3, [sp, #32]
   1c71c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1c720:	9305      	str	r3, [sp, #20]
   1c722:	2300      	movs	r3, #0
   1c724:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
   1c728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c72a:	2b00      	cmp	r3, #0
   1c72c:	f040 829d 	bne.w	1cc6a <_svfprintf_r+0x13aa>
   1c730:	9306      	str	r3, [sp, #24]
   1c732:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1c736:	f7ff b9ea 	b.w	1bb0e <_svfprintf_r+0x24e>
   1c73a:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
   1c73e:	2200      	movs	r2, #0
   1c740:	f8cd b020 	str.w	fp, [sp, #32]
   1c744:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
   1c748:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   1c74c:	4693      	mov	fp, r2
   1c74e:	46b1      	mov	r9, r6
   1c750:	461e      	mov	r6, r3
   1c752:	220a      	movs	r2, #10
   1c754:	2300      	movs	r3, #0
   1c756:	4620      	mov	r0, r4
   1c758:	4629      	mov	r1, r5
   1c75a:	f7fc fb2f 	bl	18dbc <__aeabi_uldivmod>
   1c75e:	3230      	adds	r2, #48	; 0x30
   1c760:	f10b 0b01 	add.w	fp, fp, #1
   1c764:	f108 37ff 	add.w	r7, r8, #4294967295
   1c768:	f808 2c01 	strb.w	r2, [r8, #-1]
   1c76c:	b186      	cbz	r6, 1c790 <_svfprintf_r+0xed0>
   1c76e:	2d00      	cmp	r5, #0
   1c770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c772:	bf08      	it	eq
   1c774:	2c0a      	cmpeq	r4, #10
   1c776:	781a      	ldrb	r2, [r3, #0]
   1c778:	bf2c      	ite	cs
   1c77a:	2301      	movcs	r3, #1
   1c77c:	2300      	movcc	r3, #0
   1c77e:	2aff      	cmp	r2, #255	; 0xff
   1c780:	bf0c      	ite	eq
   1c782:	2300      	moveq	r3, #0
   1c784:	f003 0301 	andne.w	r3, r3, #1
   1c788:	b113      	cbz	r3, 1c790 <_svfprintf_r+0xed0>
   1c78a:	455a      	cmp	r2, fp
   1c78c:	f000 8423 	beq.w	1cfd6 <_svfprintf_r+0x1716>
   1c790:	4620      	mov	r0, r4
   1c792:	4629      	mov	r1, r5
   1c794:	2300      	movs	r3, #0
   1c796:	220a      	movs	r2, #10
   1c798:	f7fc fb10 	bl	18dbc <__aeabi_uldivmod>
   1c79c:	4604      	mov	r4, r0
   1c79e:	460d      	mov	r5, r1
   1c7a0:	46b8      	mov	r8, r7
   1c7a2:	ea54 0305 	orrs.w	r3, r4, r5
   1c7a6:	d1d4      	bne.n	1c752 <_svfprintf_r+0xe92>
   1c7a8:	9b05      	ldr	r3, [sp, #20]
   1c7aa:	464e      	mov	r6, r9
   1c7ac:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   1c7b0:	46d0      	mov	r8, sl
   1c7b2:	1bdb      	subs	r3, r3, r7
   1c7b4:	f8dd b020 	ldr.w	fp, [sp, #32]
   1c7b8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   1c7bc:	9308      	str	r3, [sp, #32]
   1c7be:	f7ff b999 	b.w	1baf4 <_svfprintf_r+0x234>
   1c7c2:	2140      	movs	r1, #64	; 0x40
   1c7c4:	9803      	ldr	r0, [sp, #12]
   1c7c6:	f022 ff77 	bl	3f6b8 <_malloc_r>
   1c7ca:	9b04      	ldr	r3, [sp, #16]
   1c7cc:	6018      	str	r0, [r3, #0]
   1c7ce:	6118      	str	r0, [r3, #16]
   1c7d0:	2800      	cmp	r0, #0
   1c7d2:	f000 854c 	beq.w	1d26e <_svfprintf_r+0x19ae>
   1c7d6:	2340      	movs	r3, #64	; 0x40
   1c7d8:	9a04      	ldr	r2, [sp, #16]
   1c7da:	6153      	str	r3, [r2, #20]
   1c7dc:	f7ff b887 	b.w	1b8ee <_svfprintf_r+0x2e>
   1c7e0:	4252      	negs	r2, r2
   1c7e2:	930c      	str	r3, [sp, #48]	; 0x30
   1c7e4:	920a      	str	r2, [sp, #40]	; 0x28
   1c7e6:	f7ff bb5b 	b.w	1bea0 <_svfprintf_r+0x5e0>
   1c7ea:	aa28      	add	r2, sp, #160	; 0xa0
   1c7ec:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c7f0:	f029 f800 	bl	457f4 <__ssprint_r>
   1c7f4:	2800      	cmp	r0, #0
   1c7f6:	f47f a936 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c7fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1c7fc:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
   1c800:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c802:	ad2b      	add	r5, sp, #172	; 0xac
   1c804:	3301      	adds	r3, #1
   1c806:	9306      	str	r3, [sp, #24]
   1c808:	e5ad      	b.n	1c366 <_svfprintf_r+0xaa6>
   1c80a:	f89b 6001 	ldrb.w	r6, [fp, #1]
   1c80e:	f048 0820 	orr.w	r8, r8, #32
   1c812:	f10b 0b01 	add.w	fp, fp, #1
   1c816:	f7ff b8ac 	b.w	1b972 <_svfprintf_r+0xb2>
   1c81a:	f89b 6001 	ldrb.w	r6, [fp, #1]
   1c81e:	f448 7800 	orr.w	r8, r8, #512	; 0x200
   1c822:	f10b 0b01 	add.w	fp, fp, #1
   1c826:	f7ff b8a4 	b.w	1b972 <_svfprintf_r+0xb2>
   1c82a:	aa28      	add	r2, sp, #160	; 0xa0
   1c82c:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c830:	f028 ffe0 	bl	457f4 <__ssprint_r>
   1c834:	2800      	cmp	r0, #0
   1c836:	f47f a916 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c83a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c83c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c840:	e494      	b.n	1c16c <_svfprintf_r+0x8ac>
   1c842:	9b06      	ldr	r3, [sp, #24]
   1c844:	463a      	mov	r2, r7
   1c846:	9706      	str	r7, [sp, #24]
   1c848:	2b06      	cmp	r3, #6
   1c84a:	970e      	str	r7, [sp, #56]	; 0x38
   1c84c:	bf28      	it	cs
   1c84e:	2306      	movcs	r3, #6
   1c850:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
   1c854:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
   1c858:	9305      	str	r3, [sp, #20]
   1c85a:	9308      	str	r3, [sp, #32]
   1c85c:	4fc1      	ldr	r7, [pc, #772]	; (1cb64 <_svfprintf_r+0x12a4>)
   1c85e:	f7ff b956 	b.w	1bb0e <_svfprintf_r+0x24e>
   1c862:	aa28      	add	r2, sp, #160	; 0xa0
   1c864:	931b      	str	r3, [sp, #108]	; 0x6c
   1c866:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c86a:	f028 ffc3 	bl	457f4 <__ssprint_r>
   1c86e:	2800      	cmp	r0, #0
   1c870:	f47f a8f9 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c874:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1c878:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c87c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c87e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1c880:	f7ff b998 	b.w	1bbb4 <_svfprintf_r+0x2f4>
   1c884:	463b      	mov	r3, r7
   1c886:	460c      	mov	r4, r1
   1c888:	9f06      	ldr	r7, [sp, #24]
   1c88a:	3201      	adds	r2, #1
   1c88c:	442c      	add	r4, r5
   1c88e:	f8c9 3000 	str.w	r3, [r9]
   1c892:	2a07      	cmp	r2, #7
   1c894:	f8c9 5004 	str.w	r5, [r9, #4]
   1c898:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   1c89c:	f340 81a9 	ble.w	1cbf2 <_svfprintf_r+0x1332>
   1c8a0:	aa28      	add	r2, sp, #160	; 0xa0
   1c8a2:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c8a6:	f028 ffa5 	bl	457f4 <__ssprint_r>
   1c8aa:	2800      	cmp	r0, #0
   1c8ac:	f47f a8db 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c8b0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c8b2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c8b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c8b8:	f418 6f80 	tst.w	r8, #1024	; 0x400
   1c8bc:	443b      	add	r3, r7
   1c8be:	469a      	mov	sl, r3
   1c8c0:	f040 80c4 	bne.w	1ca4c <_svfprintf_r+0x118c>
   1c8c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c8c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c8c8:	4293      	cmp	r3, r2
   1c8ca:	db48      	blt.n	1c95e <_svfprintf_r+0x109e>
   1c8cc:	f018 0f01 	tst.w	r8, #1
   1c8d0:	d145      	bne.n	1c95e <_svfprintf_r+0x109e>
   1c8d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c8d4:	18bd      	adds	r5, r7, r2
   1c8d6:	1ad3      	subs	r3, r2, r3
   1c8d8:	eba5 050a 	sub.w	r5, r5, sl
   1c8dc:	429d      	cmp	r5, r3
   1c8de:	bfa8      	it	ge
   1c8e0:	461d      	movge	r5, r3
   1c8e2:	2d00      	cmp	r5, #0
   1c8e4:	dd0d      	ble.n	1c902 <_svfprintf_r+0x1042>
   1c8e6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1c8e8:	442c      	add	r4, r5
   1c8ea:	f8c9 a000 	str.w	sl, [r9]
   1c8ee:	3201      	adds	r2, #1
   1c8f0:	942a      	str	r4, [sp, #168]	; 0xa8
   1c8f2:	f8c9 5004 	str.w	r5, [r9, #4]
   1c8f6:	2a07      	cmp	r2, #7
   1c8f8:	9229      	str	r2, [sp, #164]	; 0xa4
   1c8fa:	f300 8324 	bgt.w	1cf46 <_svfprintf_r+0x1686>
   1c8fe:	f109 0908 	add.w	r9, r9, #8
   1c902:	2d00      	cmp	r5, #0
   1c904:	bfac      	ite	ge
   1c906:	1b5d      	subge	r5, r3, r5
   1c908:	461d      	movlt	r5, r3
   1c90a:	2d00      	cmp	r5, #0
   1c90c:	f77f a9c7 	ble.w	1bc9e <_svfprintf_r+0x3de>
   1c910:	2d10      	cmp	r5, #16
   1c912:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1c914:	4b94      	ldr	r3, [pc, #592]	; (1cb68 <_svfprintf_r+0x12a8>)
   1c916:	dd4e      	ble.n	1c9b6 <_svfprintf_r+0x10f6>
   1c918:	4619      	mov	r1, r3
   1c91a:	2610      	movs	r6, #16
   1c91c:	4623      	mov	r3, r4
   1c91e:	460c      	mov	r4, r1
   1c920:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
   1c924:	e002      	b.n	1c92c <_svfprintf_r+0x106c>
   1c926:	3d10      	subs	r5, #16
   1c928:	2d10      	cmp	r5, #16
   1c92a:	dd41      	ble.n	1c9b0 <_svfprintf_r+0x10f0>
   1c92c:	3201      	adds	r2, #1
   1c92e:	3310      	adds	r3, #16
   1c930:	f8c9 4000 	str.w	r4, [r9]
   1c934:	f109 0908 	add.w	r9, r9, #8
   1c938:	2a07      	cmp	r2, #7
   1c93a:	f849 6c04 	str.w	r6, [r9, #-4]
   1c93e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
   1c942:	ddf0      	ble.n	1c926 <_svfprintf_r+0x1066>
   1c944:	aa28      	add	r2, sp, #160	; 0xa0
   1c946:	4651      	mov	r1, sl
   1c948:	4638      	mov	r0, r7
   1c94a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c94e:	f028 ff51 	bl	457f4 <__ssprint_r>
   1c952:	2800      	cmp	r0, #0
   1c954:	f47f a887 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c958:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
   1c95c:	e7e3      	b.n	1c926 <_svfprintf_r+0x1066>
   1c95e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1c960:	9914      	ldr	r1, [sp, #80]	; 0x50
   1c962:	3201      	adds	r2, #1
   1c964:	9816      	ldr	r0, [sp, #88]	; 0x58
   1c966:	440c      	add	r4, r1
   1c968:	f8c9 1004 	str.w	r1, [r9, #4]
   1c96c:	2a07      	cmp	r2, #7
   1c96e:	f8c9 0000 	str.w	r0, [r9]
   1c972:	942a      	str	r4, [sp, #168]	; 0xa8
   1c974:	9229      	str	r2, [sp, #164]	; 0xa4
   1c976:	f300 82d9 	bgt.w	1cf2c <_svfprintf_r+0x166c>
   1c97a:	f109 0908 	add.w	r9, r9, #8
   1c97e:	e7a8      	b.n	1c8d2 <_svfprintf_r+0x1012>
   1c980:	aa28      	add	r2, sp, #160	; 0xa0
   1c982:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c986:	f028 ff35 	bl	457f4 <__ssprint_r>
   1c98a:	2800      	cmp	r0, #0
   1c98c:	f47f a86b 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c990:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c992:	ad2b      	add	r5, sp, #172	; 0xac
   1c994:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   1c996:	e4c6      	b.n	1c326 <_svfprintf_r+0xa66>
   1c998:	aa28      	add	r2, sp, #160	; 0xa0
   1c99a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c99e:	f028 ff29 	bl	457f4 <__ssprint_r>
   1c9a2:	2800      	cmp	r0, #0
   1c9a4:	f47f a85f 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c9a8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c9aa:	ad2b      	add	r5, sp, #172	; 0xac
   1c9ac:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   1c9ae:	e4ae      	b.n	1c30e <_svfprintf_r+0xa4e>
   1c9b0:	4621      	mov	r1, r4
   1c9b2:	461c      	mov	r4, r3
   1c9b4:	460b      	mov	r3, r1
   1c9b6:	3201      	adds	r2, #1
   1c9b8:	442c      	add	r4, r5
   1c9ba:	f8c9 3000 	str.w	r3, [r9]
   1c9be:	2a07      	cmp	r2, #7
   1c9c0:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   1c9c4:	f8c9 5004 	str.w	r5, [r9, #4]
   1c9c8:	f77f a967 	ble.w	1bc9a <_svfprintf_r+0x3da>
   1c9cc:	e47f      	b.n	1c2ce <_svfprintf_r+0xa0e>
   1c9ce:	aa28      	add	r2, sp, #160	; 0xa0
   1c9d0:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c9d4:	f028 ff0e 	bl	457f4 <__ssprint_r>
   1c9d8:	2800      	cmp	r0, #0
   1c9da:	f47f a844 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c9de:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1c9e0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c9e4:	f7ff b90d 	b.w	1bc02 <_svfprintf_r+0x342>
   1c9e8:	aa28      	add	r2, sp, #160	; 0xa0
   1c9ea:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1c9ee:	f028 ff01 	bl	457f4 <__ssprint_r>
   1c9f2:	2800      	cmp	r0, #0
   1c9f4:	f47f a837 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1c9f8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1c9fc:	f7ff bba0 	b.w	1c140 <_svfprintf_r+0x880>
   1ca00:	4623      	mov	r3, r4
   1ca02:	4614      	mov	r4, r2
   1ca04:	f105 0208 	add.w	r2, r5, #8
   1ca08:	9106      	str	r1, [sp, #24]
   1ca0a:	4454      	add	r4, sl
   1ca0c:	e9c5 3a00 	strd	r3, sl, [r5]
   1ca10:	9b06      	ldr	r3, [sp, #24]
   1ca12:	942a      	str	r4, [sp, #168]	; 0xa8
   1ca14:	2b07      	cmp	r3, #7
   1ca16:	9329      	str	r3, [sp, #164]	; 0xa4
   1ca18:	f73f aee7 	bgt.w	1c7ea <_svfprintf_r+0xf2a>
   1ca1c:	3301      	adds	r3, #1
   1ca1e:	f102 0908 	add.w	r9, r2, #8
   1ca22:	4615      	mov	r5, r2
   1ca24:	9306      	str	r3, [sp, #24]
   1ca26:	e49e      	b.n	1c366 <_svfprintf_r+0xaa6>
   1ca28:	9a07      	ldr	r2, [sp, #28]
   1ca2a:	465f      	mov	r7, fp
   1ca2c:	601a      	str	r2, [r3, #0]
   1ca2e:	f7fe bf71 	b.w	1b914 <_svfprintf_r+0x54>
   1ca32:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1ca34:	2b00      	cmp	r3, #0
   1ca36:	f43f a81c 	beq.w	1ba72 <_svfprintf_r+0x1b2>
   1ca3a:	9c04      	ldr	r4, [sp, #16]
   1ca3c:	aa28      	add	r2, sp, #160	; 0xa0
   1ca3e:	9803      	ldr	r0, [sp, #12]
   1ca40:	4621      	mov	r1, r4
   1ca42:	f028 fed7 	bl	457f4 <__ssprint_r>
   1ca46:	89a3      	ldrh	r3, [r4, #12]
   1ca48:	f7ff b815 	b.w	1ba76 <_svfprintf_r+0x1b6>
   1ca4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ca4e:	2b00      	cmp	r3, #0
   1ca50:	dc0a      	bgt.n	1ca68 <_svfprintf_r+0x11a8>
   1ca52:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ca54:	2b00      	cmp	r3, #0
   1ca56:	dc07      	bgt.n	1ca68 <_svfprintf_r+0x11a8>
   1ca58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ca5a:	18fb      	adds	r3, r7, r3
   1ca5c:	9306      	str	r3, [sp, #24]
   1ca5e:	9b06      	ldr	r3, [sp, #24]
   1ca60:	459a      	cmp	sl, r3
   1ca62:	bf28      	it	cs
   1ca64:	469a      	movcs	sl, r3
   1ca66:	e72d      	b.n	1c8c4 <_svfprintf_r+0x1004>
   1ca68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ca6a:	4622      	mov	r2, r4
   1ca6c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   1ca70:	46d0      	mov	r8, sl
   1ca72:	18fb      	adds	r3, r7, r3
   1ca74:	970e      	str	r7, [sp, #56]	; 0x38
   1ca76:	4e3c      	ldr	r6, [pc, #240]	; (1cb68 <_svfprintf_r+0x12a8>)
   1ca78:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
   1ca7c:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1ca7e:	9308      	str	r3, [sp, #32]
   1ca80:	2f00      	cmp	r7, #0
   1ca82:	d073      	beq.n	1cb6c <_svfprintf_r+0x12ac>
   1ca84:	3f01      	subs	r7, #1
   1ca86:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1ca88:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1ca8a:	3101      	adds	r1, #1
   1ca8c:	9819      	ldr	r0, [sp, #100]	; 0x64
   1ca8e:	441a      	add	r2, r3
   1ca90:	f8c9 3004 	str.w	r3, [r9, #4]
   1ca94:	2907      	cmp	r1, #7
   1ca96:	f8c9 0000 	str.w	r0, [r9]
   1ca9a:	922a      	str	r2, [sp, #168]	; 0xa8
   1ca9c:	9129      	str	r1, [sp, #164]	; 0xa4
   1ca9e:	dc6b      	bgt.n	1cb78 <_svfprintf_r+0x12b8>
   1caa0:	f109 0908 	add.w	r9, r9, #8
   1caa4:	9b08      	ldr	r3, [sp, #32]
   1caa6:	f89a 1000 	ldrb.w	r1, [sl]
   1caaa:	eba3 0508 	sub.w	r5, r3, r8
   1caae:	9306      	str	r3, [sp, #24]
   1cab0:	428d      	cmp	r5, r1
   1cab2:	bfa8      	it	ge
   1cab4:	460d      	movge	r5, r1
   1cab6:	2d00      	cmp	r5, #0
   1cab8:	dd0e      	ble.n	1cad8 <_svfprintf_r+0x1218>
   1caba:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1cabc:	442a      	add	r2, r5
   1cabe:	f8c9 8000 	str.w	r8, [r9]
   1cac2:	3101      	adds	r1, #1
   1cac4:	922a      	str	r2, [sp, #168]	; 0xa8
   1cac6:	f8c9 5004 	str.w	r5, [r9, #4]
   1caca:	2907      	cmp	r1, #7
   1cacc:	9129      	str	r1, [sp, #164]	; 0xa4
   1cace:	dc5f      	bgt.n	1cb90 <_svfprintf_r+0x12d0>
   1cad0:	f109 0908 	add.w	r9, r9, #8
   1cad4:	f89a 1000 	ldrb.w	r1, [sl]
   1cad8:	2d00      	cmp	r5, #0
   1cada:	bfac      	ite	ge
   1cadc:	1b4d      	subge	r5, r1, r5
   1cade:	460d      	movlt	r5, r1
   1cae0:	2d00      	cmp	r5, #0
   1cae2:	dd31      	ble.n	1cb48 <_svfprintf_r+0x1288>
   1cae4:	2d10      	cmp	r5, #16
   1cae6:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1cae8:	dd1f      	ble.n	1cb2a <_svfprintf_r+0x126a>
   1caea:	2410      	movs	r4, #16
   1caec:	e002      	b.n	1caf4 <_svfprintf_r+0x1234>
   1caee:	3d10      	subs	r5, #16
   1caf0:	2d10      	cmp	r5, #16
   1caf2:	dd1a      	ble.n	1cb2a <_svfprintf_r+0x126a>
   1caf4:	3101      	adds	r1, #1
   1caf6:	3210      	adds	r2, #16
   1caf8:	f8c9 6000 	str.w	r6, [r9]
   1cafc:	f109 0908 	add.w	r9, r9, #8
   1cb00:	2907      	cmp	r1, #7
   1cb02:	f849 4c04 	str.w	r4, [r9, #-4]
   1cb06:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
   1cb0a:	ddf0      	ble.n	1caee <_svfprintf_r+0x122e>
   1cb0c:	aa28      	add	r2, sp, #160	; 0xa0
   1cb0e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1cb12:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1cb16:	f028 fe6d 	bl	457f4 <__ssprint_r>
   1cb1a:	2800      	cmp	r0, #0
   1cb1c:	f47e afa3 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1cb20:	3d10      	subs	r5, #16
   1cb22:	2d10      	cmp	r5, #16
   1cb24:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
   1cb28:	dce4      	bgt.n	1caf4 <_svfprintf_r+0x1234>
   1cb2a:	3101      	adds	r1, #1
   1cb2c:	442a      	add	r2, r5
   1cb2e:	f8c9 6000 	str.w	r6, [r9]
   1cb32:	2907      	cmp	r1, #7
   1cb34:	f8c9 5004 	str.w	r5, [r9, #4]
   1cb38:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
   1cb3c:	f300 8100 	bgt.w	1cd40 <_svfprintf_r+0x1480>
   1cb40:	f109 0908 	add.w	r9, r9, #8
   1cb44:	f89a 1000 	ldrb.w	r1, [sl]
   1cb48:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1cb4a:	4488      	add	r8, r1
   1cb4c:	2b00      	cmp	r3, #0
   1cb4e:	dc97      	bgt.n	1ca80 <_svfprintf_r+0x11c0>
   1cb50:	2f00      	cmp	r7, #0
   1cb52:	dc95      	bgt.n	1ca80 <_svfprintf_r+0x11c0>
   1cb54:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
   1cb58:	4614      	mov	r4, r2
   1cb5a:	46c2      	mov	sl, r8
   1cb5c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1cb5e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   1cb62:	e77c      	b.n	1ca5e <_svfprintf_r+0x119e>
   1cb64:	0004ae34 	.word	0x0004ae34
   1cb68:	0004ae50 	.word	0x0004ae50
   1cb6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1cb6e:	f10a 3aff 	add.w	sl, sl, #4294967295
   1cb72:	3b01      	subs	r3, #1
   1cb74:	9310      	str	r3, [sp, #64]	; 0x40
   1cb76:	e786      	b.n	1ca86 <_svfprintf_r+0x11c6>
   1cb78:	aa28      	add	r2, sp, #160	; 0xa0
   1cb7a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1cb7e:	f028 fe39 	bl	457f4 <__ssprint_r>
   1cb82:	2800      	cmp	r0, #0
   1cb84:	f47e af6f 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1cb88:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   1cb8a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1cb8e:	e789      	b.n	1caa4 <_svfprintf_r+0x11e4>
   1cb90:	aa28      	add	r2, sp, #160	; 0xa0
   1cb92:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1cb96:	f028 fe2d 	bl	457f4 <__ssprint_r>
   1cb9a:	2800      	cmp	r0, #0
   1cb9c:	f47e af63 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1cba0:	f89a 1000 	ldrb.w	r1, [sl]
   1cba4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1cba8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   1cbaa:	e795      	b.n	1cad8 <_svfprintf_r+0x1218>
   1cbac:	4638      	mov	r0, r7
   1cbae:	9506      	str	r5, [sp, #24]
   1cbb0:	f023 fce8 	bl	40584 <strlen>
   1cbb4:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
   1cbb8:	9008      	str	r0, [sp, #32]
   1cbba:	9205      	str	r2, [sp, #20]
   1cbbc:	940c      	str	r4, [sp, #48]	; 0x30
   1cbbe:	950b      	str	r5, [sp, #44]	; 0x2c
   1cbc0:	950e      	str	r5, [sp, #56]	; 0x38
   1cbc2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1cbc6:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   1cbca:	f7fe bfa0 	b.w	1bb0e <_svfprintf_r+0x24e>
   1cbce:	9906      	ldr	r1, [sp, #24]
   1cbd0:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   1cbd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cbd6:	1c4c      	adds	r4, r1, #1
   1cbd8:	d032      	beq.n	1cc40 <_svfprintf_r+0x1380>
   1cbda:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   1cbde:	f040 8279 	bne.w	1d0d4 <_svfprintf_r+0x1814>
   1cbe2:	f8cd 8014 	str.w	r8, [sp, #20]
   1cbe6:	2900      	cmp	r1, #0
   1cbe8:	f000 82fe 	beq.w	1d1e8 <_svfprintf_r+0x1928>
   1cbec:	900b      	str	r0, [sp, #44]	; 0x2c
   1cbee:	4690      	mov	r8, r2
   1cbf0:	e545      	b.n	1c67e <_svfprintf_r+0xdbe>
   1cbf2:	f109 0908 	add.w	r9, r9, #8
   1cbf6:	e65e      	b.n	1c8b6 <_svfprintf_r+0xff6>
   1cbf8:	2300      	movs	r3, #0
   1cbfa:	4693      	mov	fp, r2
   1cbfc:	9306      	str	r3, [sp, #24]
   1cbfe:	f7fe beba 	b.w	1b976 <_svfprintf_r+0xb6>
   1cc02:	7814      	ldrb	r4, [r2, #0]
   1cc04:	2500      	movs	r5, #0
   1cc06:	930c      	str	r3, [sp, #48]	; 0x30
   1cc08:	f7ff b8a9 	b.w	1bd5e <_svfprintf_r+0x49e>
   1cc0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1cc0e:	46c2      	mov	sl, r8
   1cc10:	2500      	movs	r5, #0
   1cc12:	920c      	str	r2, [sp, #48]	; 0x30
   1cc14:	781c      	ldrb	r4, [r3, #0]
   1cc16:	2301      	movs	r3, #1
   1cc18:	f7fe bf49 	b.w	1baae <_svfprintf_r+0x1ee>
   1cc1c:	7814      	ldrb	r4, [r2, #0]
   1cc1e:	2500      	movs	r5, #0
   1cc20:	930c      	str	r3, [sp, #48]	; 0x30
   1cc22:	f7ff b8af 	b.w	1bd84 <_svfprintf_r+0x4c4>
   1cc26:	f992 4000 	ldrsb.w	r4, [r2]
   1cc2a:	930c      	str	r3, [sp, #48]	; 0x30
   1cc2c:	17e5      	asrs	r5, r4, #31
   1cc2e:	4622      	mov	r2, r4
   1cc30:	462b      	mov	r3, r5
   1cc32:	f7ff b8c2 	b.w	1bdba <_svfprintf_r+0x4fa>
   1cc36:	9a07      	ldr	r2, [sp, #28]
   1cc38:	465f      	mov	r7, fp
   1cc3a:	801a      	strh	r2, [r3, #0]
   1cc3c:	f7fe be6a 	b.w	1b914 <_svfprintf_r+0x54>
   1cc40:	f8cd 8014 	str.w	r8, [sp, #20]
   1cc44:	4690      	mov	r8, r2
   1cc46:	2206      	movs	r2, #6
   1cc48:	900b      	str	r0, [sp, #44]	; 0x2c
   1cc4a:	9206      	str	r2, [sp, #24]
   1cc4c:	e517      	b.n	1c67e <_svfprintf_r+0xdbe>
   1cc4e:	9b06      	ldr	r3, [sp, #24]
   1cc50:	9803      	ldr	r0, [sp, #12]
   1cc52:	1c59      	adds	r1, r3, #1
   1cc54:	f022 fd30 	bl	3f6b8 <_malloc_r>
   1cc58:	4607      	mov	r7, r0
   1cc5a:	2800      	cmp	r0, #0
   1cc5c:	f000 830f 	beq.w	1d27e <_svfprintf_r+0x19be>
   1cc60:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   1cc64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cc66:	900b      	str	r0, [sp, #44]	; 0x2c
   1cc68:	e509      	b.n	1c67e <_svfprintf_r+0xdbe>
   1cc6a:	222d      	movs	r2, #45	; 0x2d
   1cc6c:	2300      	movs	r3, #0
   1cc6e:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   1cc72:	9306      	str	r3, [sp, #24]
   1cc74:	f7fe bf4c 	b.w	1bb10 <_svfprintf_r+0x250>
   1cc78:	9a06      	ldr	r2, [sp, #24]
   1cc7a:	429a      	cmp	r2, r3
   1cc7c:	db01      	blt.n	1cc82 <_svfprintf_r+0x13c2>
   1cc7e:	3303      	adds	r3, #3
   1cc80:	da3e      	bge.n	1cd00 <_svfprintf_r+0x1440>
   1cc82:	3e02      	subs	r6, #2
   1cc84:	f026 0a20 	bic.w	sl, r6, #32
   1cc88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cc8a:	f1ba 0f41 	cmp.w	sl, #65	; 0x41
   1cc8e:	b2f2      	uxtb	r2, r6
   1cc90:	f103 33ff 	add.w	r3, r3, #4294967295
   1cc94:	9322      	str	r3, [sp, #136]	; 0x88
   1cc96:	d101      	bne.n	1cc9c <_svfprintf_r+0x13dc>
   1cc98:	320f      	adds	r2, #15
   1cc9a:	b2d2      	uxtb	r2, r2
   1cc9c:	2b00      	cmp	r3, #0
   1cc9e:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
   1cca2:	f2c0 8280 	blt.w	1d1a6 <_svfprintf_r+0x18e6>
   1cca6:	222b      	movs	r2, #43	; 0x2b
   1cca8:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
   1ccac:	2b09      	cmp	r3, #9
   1ccae:	f300 8230 	bgt.w	1d112 <_svfprintf_r+0x1852>
   1ccb2:	f1ba 0f41 	cmp.w	sl, #65	; 0x41
   1ccb6:	f000 82a4 	beq.w	1d202 <_svfprintf_r+0x1942>
   1ccba:	2230      	movs	r2, #48	; 0x30
   1ccbc:	f10d 0193 	add.w	r1, sp, #147	; 0x93
   1ccc0:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
   1ccc4:	3330      	adds	r3, #48	; 0x30
   1ccc6:	1c4a      	adds	r2, r1, #1
   1ccc8:	700b      	strb	r3, [r1, #0]
   1ccca:	ab24      	add	r3, sp, #144	; 0x90
   1cccc:	1ad3      	subs	r3, r2, r3
   1ccce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ccd0:	931a      	str	r3, [sp, #104]	; 0x68
   1ccd2:	2a01      	cmp	r2, #1
   1ccd4:	4413      	add	r3, r2
   1ccd6:	9308      	str	r3, [sp, #32]
   1ccd8:	f340 826c 	ble.w	1d1b4 <_svfprintf_r+0x18f4>
   1ccdc:	9b08      	ldr	r3, [sp, #32]
   1ccde:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1cce0:	4413      	add	r3, r2
   1cce2:	9308      	str	r3, [sp, #32]
   1cce4:	9b05      	ldr	r3, [sp, #20]
   1cce6:	2200      	movs	r2, #0
   1cce8:	9908      	ldr	r1, [sp, #32]
   1ccea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   1ccee:	9211      	str	r2, [sp, #68]	; 0x44
   1ccf0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1ccf4:	9210      	str	r2, [sp, #64]	; 0x40
   1ccf6:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   1ccfa:	920e      	str	r2, [sp, #56]	; 0x38
   1ccfc:	9105      	str	r1, [sp, #20]
   1ccfe:	e513      	b.n	1c728 <_svfprintf_r+0xe68>
   1cd00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1cd02:	4619      	mov	r1, r3
   1cd04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cd06:	4299      	cmp	r1, r3
   1cd08:	f300 8132 	bgt.w	1cf70 <_svfprintf_r+0x16b0>
   1cd0c:	9a05      	ldr	r2, [sp, #20]
   1cd0e:	07d0      	lsls	r0, r2, #31
   1cd10:	f140 822c 	bpl.w	1d16c <_svfprintf_r+0x18ac>
   1cd14:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1cd16:	4413      	add	r3, r2
   1cd18:	9308      	str	r3, [sp, #32]
   1cd1a:	9b05      	ldr	r3, [sp, #20]
   1cd1c:	0559      	lsls	r1, r3, #21
   1cd1e:	d503      	bpl.n	1cd28 <_svfprintf_r+0x1468>
   1cd20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cd22:	2b00      	cmp	r3, #0
   1cd24:	f300 8169 	bgt.w	1cffa <_svfprintf_r+0x173a>
   1cd28:	9b08      	ldr	r3, [sp, #32]
   1cd2a:	2667      	movs	r6, #103	; 0x67
   1cd2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1cd30:	9305      	str	r3, [sp, #20]
   1cd32:	e4f6      	b.n	1c722 <_svfprintf_r+0xe62>
   1cd34:	232d      	movs	r3, #45	; 0x2d
   1cd36:	461a      	mov	r2, r3
   1cd38:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   1cd3c:	f7ff b9bf 	b.w	1c0be <_svfprintf_r+0x7fe>
   1cd40:	aa28      	add	r2, sp, #160	; 0xa0
   1cd42:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1cd46:	f028 fd55 	bl	457f4 <__ssprint_r>
   1cd4a:	2800      	cmp	r0, #0
   1cd4c:	f47e ae8b 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1cd50:	f89a 1000 	ldrb.w	r1, [sl]
   1cd54:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1cd58:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   1cd5a:	e6f5      	b.n	1cb48 <_svfprintf_r+0x1288>
   1cd5c:	aa28      	add	r2, sp, #160	; 0xa0
   1cd5e:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1cd62:	f028 fd47 	bl	457f4 <__ssprint_r>
   1cd66:	2800      	cmp	r0, #0
   1cd68:	f47e ae7d 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1cd6c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1cd6e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1cd72:	f7ff bbdb 	b.w	1c52c <_svfprintf_r+0xc6c>
   1cd76:	f8cd 8014 	str.w	r8, [sp, #20]
   1cd7a:	4690      	mov	r8, r2
   1cd7c:	900b      	str	r0, [sp, #44]	; 0x2c
   1cd7e:	232d      	movs	r3, #45	; 0x2d
   1cd80:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
   1cd84:	930d      	str	r3, [sp, #52]	; 0x34
   1cd86:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   1cd8a:	911e      	str	r1, [sp, #120]	; 0x78
   1cd8c:	931f      	str	r3, [sp, #124]	; 0x7c
   1cd8e:	e47f      	b.n	1c690 <_svfprintf_r+0xdd0>
   1cd90:	a822      	add	r0, sp, #136	; 0x88
   1cd92:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
   1cd96:	f028 fa99 	bl	452cc <frexp>
   1cd9a:	2200      	movs	r2, #0
   1cd9c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1cda0:	ec51 0b10 	vmov	r0, r1, d0
   1cda4:	f7fb fcf8 	bl	18798 <__aeabi_dmul>
   1cda8:	2200      	movs	r2, #0
   1cdaa:	2300      	movs	r3, #0
   1cdac:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1cdb0:	f7fb ff5a 	bl	18c68 <__aeabi_dcmpeq>
   1cdb4:	b108      	cbz	r0, 1cdba <_svfprintf_r+0x14fa>
   1cdb6:	2301      	movs	r3, #1
   1cdb8:	9322      	str	r3, [sp, #136]	; 0x88
   1cdba:	9b06      	ldr	r3, [sp, #24]
   1cdbc:	4639      	mov	r1, r7
   1cdbe:	4ab6      	ldr	r2, [pc, #728]	; (1d098 <_svfprintf_r+0x17d8>)
   1cdc0:	f103 38ff 	add.w	r8, r3, #4294967295
   1cdc4:	4bb5      	ldr	r3, [pc, #724]	; (1d09c <_svfprintf_r+0x17dc>)
   1cdc6:	9711      	str	r7, [sp, #68]	; 0x44
   1cdc8:	2e61      	cmp	r6, #97	; 0x61
   1cdca:	bf08      	it	eq
   1cdcc:	461a      	moveq	r2, r3
   1cdce:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   1cdd2:	e9cd b60e 	strd	fp, r6, [sp, #56]	; 0x38
   1cdd6:	9206      	str	r2, [sp, #24]
   1cdd8:	4693      	mov	fp, r2
   1cdda:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   1cdde:	f8cd a020 	str.w	sl, [sp, #32]
   1cde2:	468a      	mov	sl, r1
   1cde4:	e005      	b.n	1cdf2 <_svfprintf_r+0x1532>
   1cde6:	2200      	movs	r2, #0
   1cde8:	2300      	movs	r3, #0
   1cdea:	f7fb ff3d 	bl	18c68 <__aeabi_dcmpeq>
   1cdee:	bb00      	cbnz	r0, 1ce32 <_svfprintf_r+0x1572>
   1cdf0:	46a2      	mov	sl, r4
   1cdf2:	2200      	movs	r2, #0
   1cdf4:	4baa      	ldr	r3, [pc, #680]	; (1d0a0 <_svfprintf_r+0x17e0>)
   1cdf6:	4630      	mov	r0, r6
   1cdf8:	4639      	mov	r1, r7
   1cdfa:	f7fb fccd 	bl	18798 <__aeabi_dmul>
   1cdfe:	460d      	mov	r5, r1
   1ce00:	4604      	mov	r4, r0
   1ce02:	f7fb ff63 	bl	18ccc <__aeabi_d2iz>
   1ce06:	4681      	mov	r9, r0
   1ce08:	f7fb fc5c 	bl	186c4 <__aeabi_i2d>
   1ce0c:	460b      	mov	r3, r1
   1ce0e:	4602      	mov	r2, r0
   1ce10:	4629      	mov	r1, r5
   1ce12:	4620      	mov	r0, r4
   1ce14:	f7fb fb08 	bl	18428 <__aeabi_dsub>
   1ce18:	4654      	mov	r4, sl
   1ce1a:	f81b 3009 	ldrb.w	r3, [fp, r9]
   1ce1e:	f1b8 3fff 	cmp.w	r8, #4294967295
   1ce22:	4645      	mov	r5, r8
   1ce24:	4606      	mov	r6, r0
   1ce26:	460f      	mov	r7, r1
   1ce28:	f804 3b01 	strb.w	r3, [r4], #1
   1ce2c:	f108 38ff 	add.w	r8, r8, #4294967295
   1ce30:	d1d9      	bne.n	1cde6 <_svfprintf_r+0x1526>
   1ce32:	4630      	mov	r0, r6
   1ce34:	4639      	mov	r1, r7
   1ce36:	2200      	movs	r2, #0
   1ce38:	4b9a      	ldr	r3, [pc, #616]	; (1d0a4 <_svfprintf_r+0x17e4>)
   1ce3a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   1ce3e:	46c8      	mov	r8, r9
   1ce40:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   1ce44:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1ce46:	f8dd a020 	ldr.w	sl, [sp, #32]
   1ce4a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1ce4e:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1ce50:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1ce54:	f7fb ff30 	bl	18cb8 <__aeabi_dcmpgt>
   1ce58:	2800      	cmp	r0, #0
   1ce5a:	f040 80a1 	bne.w	1cfa0 <_svfprintf_r+0x16e0>
   1ce5e:	2200      	movs	r2, #0
   1ce60:	4b90      	ldr	r3, [pc, #576]	; (1d0a4 <_svfprintf_r+0x17e4>)
   1ce62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1ce66:	f7fb feff 	bl	18c68 <__aeabi_dcmpeq>
   1ce6a:	b118      	cbz	r0, 1ce74 <_svfprintf_r+0x15b4>
   1ce6c:	ea5f 72c8 	movs.w	r2, r8, lsl #31
   1ce70:	f100 8096 	bmi.w	1cfa0 <_svfprintf_r+0x16e0>
   1ce74:	2d00      	cmp	r5, #0
   1ce76:	db06      	blt.n	1ce86 <_svfprintf_r+0x15c6>
   1ce78:	1c6b      	adds	r3, r5, #1
   1ce7a:	2230      	movs	r2, #48	; 0x30
   1ce7c:	4423      	add	r3, r4
   1ce7e:	f804 2b01 	strb.w	r2, [r4], #1
   1ce82:	42a3      	cmp	r3, r4
   1ce84:	d1fb      	bne.n	1ce7e <_svfprintf_r+0x15be>
   1ce86:	1be3      	subs	r3, r4, r7
   1ce88:	930f      	str	r3, [sp, #60]	; 0x3c
   1ce8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1ce8c:	930e      	str	r3, [sp, #56]	; 0x38
   1ce8e:	e6fb      	b.n	1cc88 <_svfprintf_r+0x13c8>
   1ce90:	a926      	add	r1, sp, #152	; 0x98
   1ce92:	a823      	add	r0, sp, #140	; 0x8c
   1ce94:	ab22      	add	r3, sp, #136	; 0x88
   1ce96:	9a06      	ldr	r2, [sp, #24]
   1ce98:	9101      	str	r1, [sp, #4]
   1ce9a:	2103      	movs	r1, #3
   1ce9c:	9000      	str	r0, [sp, #0]
   1ce9e:	9803      	ldr	r0, [sp, #12]
   1cea0:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
   1cea4:	f000 f9fc 	bl	1d2a0 <_dtoa_r>
   1cea8:	7803      	ldrb	r3, [r0, #0]
   1ceaa:	4607      	mov	r7, r0
   1ceac:	2b30      	cmp	r3, #48	; 0x30
   1ceae:	d10e      	bne.n	1cece <_svfprintf_r+0x160e>
   1ceb0:	2200      	movs	r2, #0
   1ceb2:	2300      	movs	r3, #0
   1ceb4:	f04f 0401 	mov.w	r4, #1
   1ceb8:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
   1cebc:	f7fb fed4 	bl	18c68 <__aeabi_dcmpeq>
   1cec0:	b108      	cbz	r0, 1cec6 <_svfprintf_r+0x1606>
   1cec2:	f04f 0400 	mov.w	r4, #0
   1cec6:	f014 0fff 	tst.w	r4, #255	; 0xff
   1ceca:	f040 81b8 	bne.w	1d23e <_svfprintf_r+0x197e>
   1cece:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1ced0:	9a06      	ldr	r2, [sp, #24]
   1ced2:	4413      	add	r3, r2
   1ced4:	18fc      	adds	r4, r7, r3
   1ced6:	f7ff bbf7 	b.w	1c6c8 <_svfprintf_r+0xe08>
   1ceda:	aa28      	add	r2, sp, #160	; 0xa0
   1cedc:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1cee0:	f028 fc88 	bl	457f4 <__ssprint_r>
   1cee4:	2800      	cmp	r0, #0
   1cee6:	f47e adbe 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1ceea:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1ceec:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1cef0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1cef2:	f7ff b9c9 	b.w	1c288 <_svfprintf_r+0x9c8>
   1cef6:	9b06      	ldr	r3, [sp, #24]
   1cef8:	940c      	str	r4, [sp, #48]	; 0x30
   1cefa:	9305      	str	r3, [sp, #20]
   1cefc:	9308      	str	r3, [sp, #32]
   1cefe:	9006      	str	r0, [sp, #24]
   1cf00:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1cf04:	900e      	str	r0, [sp, #56]	; 0x38
   1cf06:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   1cf0a:	f7fe be00 	b.w	1bb0e <_svfprintf_r+0x24e>
   1cf0e:	aa28      	add	r2, sp, #160	; 0xa0
   1cf10:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1cf14:	f028 fc6e 	bl	457f4 <__ssprint_r>
   1cf18:	2800      	cmp	r0, #0
   1cf1a:	f47e ada4 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1cf1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cf20:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1cf24:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
   1cf28:	f7ff b9c2 	b.w	1c2b0 <_svfprintf_r+0x9f0>
   1cf2c:	aa28      	add	r2, sp, #160	; 0xa0
   1cf2e:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1cf32:	f028 fc5f 	bl	457f4 <__ssprint_r>
   1cf36:	2800      	cmp	r0, #0
   1cf38:	f47e ad95 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1cf3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cf3e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1cf42:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1cf44:	e4c5      	b.n	1c8d2 <_svfprintf_r+0x1012>
   1cf46:	aa28      	add	r2, sp, #160	; 0xa0
   1cf48:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1cf4c:	f028 fc52 	bl	457f4 <__ssprint_r>
   1cf50:	2800      	cmp	r0, #0
   1cf52:	f47e ad88 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1cf56:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cf58:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1cf5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1cf5e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1cf60:	1ad3      	subs	r3, r2, r3
   1cf62:	e4ce      	b.n	1c902 <_svfprintf_r+0x1042>
   1cf64:	f018 0f01 	tst.w	r8, #1
   1cf68:	f43e ae99 	beq.w	1bc9e <_svfprintf_r+0x3de>
   1cf6c:	f7ff b990 	b.w	1c290 <_svfprintf_r+0x9d0>
   1cf70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1cf72:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1cf74:	4413      	add	r3, r2
   1cf76:	9308      	str	r3, [sp, #32]
   1cf78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cf7a:	2b00      	cmp	r3, #0
   1cf7c:	f340 8129 	ble.w	1d1d2 <_svfprintf_r+0x1912>
   1cf80:	2667      	movs	r6, #103	; 0x67
   1cf82:	f7ff bbc6 	b.w	1c712 <_svfprintf_r+0xe52>
   1cf86:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1cf88:	42a3      	cmp	r3, r4
   1cf8a:	f4bf aba7 	bcs.w	1c6dc <_svfprintf_r+0xe1c>
   1cf8e:	2130      	movs	r1, #48	; 0x30
   1cf90:	1c5a      	adds	r2, r3, #1
   1cf92:	9226      	str	r2, [sp, #152]	; 0x98
   1cf94:	7019      	strb	r1, [r3, #0]
   1cf96:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1cf98:	429c      	cmp	r4, r3
   1cf9a:	d8f9      	bhi.n	1cf90 <_svfprintf_r+0x16d0>
   1cf9c:	f7ff bb9e 	b.w	1c6dc <_svfprintf_r+0xe1c>
   1cfa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cfa2:	9326      	str	r3, [sp, #152]	; 0x98
   1cfa4:	9b06      	ldr	r3, [sp, #24]
   1cfa6:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   1cfaa:	7bd9      	ldrb	r1, [r3, #15]
   1cfac:	4623      	mov	r3, r4
   1cfae:	4291      	cmp	r1, r2
   1cfb0:	d109      	bne.n	1cfc6 <_svfprintf_r+0x1706>
   1cfb2:	2030      	movs	r0, #48	; 0x30
   1cfb4:	f803 0c01 	strb.w	r0, [r3, #-1]
   1cfb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1cfba:	1e5a      	subs	r2, r3, #1
   1cfbc:	9226      	str	r2, [sp, #152]	; 0x98
   1cfbe:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   1cfc2:	4291      	cmp	r1, r2
   1cfc4:	d0f6      	beq.n	1cfb4 <_svfprintf_r+0x16f4>
   1cfc6:	2a39      	cmp	r2, #57	; 0x39
   1cfc8:	f000 8123 	beq.w	1d212 <_svfprintf_r+0x1952>
   1cfcc:	3201      	adds	r2, #1
   1cfce:	b2d2      	uxtb	r2, r2
   1cfd0:	f803 2c01 	strb.w	r2, [r3, #-1]
   1cfd4:	e757      	b.n	1ce86 <_svfprintf_r+0x15c6>
   1cfd6:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1cfd8:	f04f 0b00 	mov.w	fp, #0
   1cfdc:	9919      	ldr	r1, [sp, #100]	; 0x64
   1cfde:	1aff      	subs	r7, r7, r3
   1cfe0:	461a      	mov	r2, r3
   1cfe2:	4638      	mov	r0, r7
   1cfe4:	f023 fb42 	bl	4066c <strncpy>
   1cfe8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1cfea:	7853      	ldrb	r3, [r2, #1]
   1cfec:	2b00      	cmp	r3, #0
   1cfee:	f000 80c9 	beq.w	1d184 <_svfprintf_r+0x18c4>
   1cff2:	3201      	adds	r2, #1
   1cff4:	9217      	str	r2, [sp, #92]	; 0x5c
   1cff6:	f7ff bbcb 	b.w	1c790 <_svfprintf_r+0xed0>
   1cffa:	2667      	movs	r6, #103	; 0x67
   1cffc:	2200      	movs	r2, #0
   1cffe:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1d000:	9211      	str	r2, [sp, #68]	; 0x44
   1d002:	9210      	str	r2, [sp, #64]	; 0x40
   1d004:	7803      	ldrb	r3, [r0, #0]
   1d006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1d008:	2bff      	cmp	r3, #255	; 0xff
   1d00a:	d00b      	beq.n	1d024 <_svfprintf_r+0x1764>
   1d00c:	4293      	cmp	r3, r2
   1d00e:	da09      	bge.n	1d024 <_svfprintf_r+0x1764>
   1d010:	7841      	ldrb	r1, [r0, #1]
   1d012:	1ad2      	subs	r2, r2, r3
   1d014:	b1a9      	cbz	r1, 1d042 <_svfprintf_r+0x1782>
   1d016:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d018:	3001      	adds	r0, #1
   1d01a:	3301      	adds	r3, #1
   1d01c:	9310      	str	r3, [sp, #64]	; 0x40
   1d01e:	460b      	mov	r3, r1
   1d020:	2bff      	cmp	r3, #255	; 0xff
   1d022:	d1f3      	bne.n	1d00c <_svfprintf_r+0x174c>
   1d024:	920e      	str	r2, [sp, #56]	; 0x38
   1d026:	9908      	ldr	r1, [sp, #32]
   1d028:	9017      	str	r0, [sp, #92]	; 0x5c
   1d02a:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
   1d02e:	4413      	add	r3, r2
   1d030:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1d032:	fb02 1303 	mla	r3, r2, r3, r1
   1d036:	9308      	str	r3, [sp, #32]
   1d038:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1d03c:	9305      	str	r3, [sp, #20]
   1d03e:	f7ff bb73 	b.w	1c728 <_svfprintf_r+0xe68>
   1d042:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d044:	3101      	adds	r1, #1
   1d046:	9111      	str	r1, [sp, #68]	; 0x44
   1d048:	e7de      	b.n	1d008 <_svfprintf_r+0x1748>
   1d04a:	425d      	negs	r5, r3
   1d04c:	3310      	adds	r3, #16
   1d04e:	4b16      	ldr	r3, [pc, #88]	; (1d0a8 <_svfprintf_r+0x17e8>)
   1d050:	da50      	bge.n	1d0f4 <_svfprintf_r+0x1834>
   1d052:	4621      	mov	r1, r4
   1d054:	2610      	movs	r6, #16
   1d056:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1d05a:	461c      	mov	r4, r3
   1d05c:	e002      	b.n	1d064 <_svfprintf_r+0x17a4>
   1d05e:	3d10      	subs	r5, #16
   1d060:	2d10      	cmp	r5, #16
   1d062:	dd45      	ble.n	1d0f0 <_svfprintf_r+0x1830>
   1d064:	3201      	adds	r2, #1
   1d066:	3110      	adds	r1, #16
   1d068:	f8c9 4000 	str.w	r4, [r9]
   1d06c:	f109 0908 	add.w	r9, r9, #8
   1d070:	2a07      	cmp	r2, #7
   1d072:	f849 6c04 	str.w	r6, [r9, #-4]
   1d076:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   1d07a:	ddf0      	ble.n	1d05e <_svfprintf_r+0x179e>
   1d07c:	aa28      	add	r2, sp, #160	; 0xa0
   1d07e:	9904      	ldr	r1, [sp, #16]
   1d080:	4650      	mov	r0, sl
   1d082:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1d086:	f028 fbb5 	bl	457f4 <__ssprint_r>
   1d08a:	2800      	cmp	r0, #0
   1d08c:	f47e aceb 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1d090:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   1d094:	e7e3      	b.n	1d05e <_svfprintf_r+0x179e>
   1d096:	bf00      	nop
   1d098:	0004ae20 	.word	0x0004ae20
   1d09c:	0004ae0c 	.word	0x0004ae0c
   1d0a0:	40300000 	.word	0x40300000
   1d0a4:	3fe00000 	.word	0x3fe00000
   1d0a8:	0004ae50 	.word	0x0004ae50
   1d0ac:	a926      	add	r1, sp, #152	; 0x98
   1d0ae:	a823      	add	r0, sp, #140	; 0x8c
   1d0b0:	ab22      	add	r3, sp, #136	; 0x88
   1d0b2:	9a06      	ldr	r2, [sp, #24]
   1d0b4:	9101      	str	r1, [sp, #4]
   1d0b6:	2102      	movs	r1, #2
   1d0b8:	9000      	str	r0, [sp, #0]
   1d0ba:	9803      	ldr	r0, [sp, #12]
   1d0bc:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
   1d0c0:	f000 f8ee 	bl	1d2a0 <_dtoa_r>
   1d0c4:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   1d0c8:	4607      	mov	r7, r0
   1d0ca:	f000 8094 	beq.w	1d1f6 <_svfprintf_r+0x1936>
   1d0ce:	9c06      	ldr	r4, [sp, #24]
   1d0d0:	f7ff baf9 	b.w	1c6c6 <_svfprintf_r+0xe06>
   1d0d4:	2b00      	cmp	r3, #0
   1d0d6:	f6ff ae4e 	blt.w	1cd76 <_svfprintf_r+0x14b6>
   1d0da:	f8cd 8014 	str.w	r8, [sp, #20]
   1d0de:	4690      	mov	r8, r2
   1d0e0:	900d      	str	r0, [sp, #52]	; 0x34
   1d0e2:	900b      	str	r0, [sp, #44]	; 0x2c
   1d0e4:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
   1d0e8:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
   1d0ec:	f7ff bad4 	b.w	1c698 <_svfprintf_r+0xdd8>
   1d0f0:	4623      	mov	r3, r4
   1d0f2:	460c      	mov	r4, r1
   1d0f4:	3201      	adds	r2, #1
   1d0f6:	442c      	add	r4, r5
   1d0f8:	f8c9 3000 	str.w	r3, [r9]
   1d0fc:	2a07      	cmp	r2, #7
   1d0fe:	f8c9 5004 	str.w	r5, [r9, #4]
   1d102:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   1d106:	f300 808c 	bgt.w	1d222 <_svfprintf_r+0x1962>
   1d10a:	f109 0908 	add.w	r9, r9, #8
   1d10e:	f7ff b8d2 	b.w	1c2b6 <_svfprintf_r+0x9f6>
   1d112:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
   1d116:	4d5d      	ldr	r5, [pc, #372]	; (1d28c <_svfprintf_r+0x19cc>)
   1d118:	4660      	mov	r0, ip
   1d11a:	e000      	b.n	1d11e <_svfprintf_r+0x185e>
   1d11c:	4620      	mov	r0, r4
   1d11e:	fba5 2103 	umull	r2, r1, r5, r3
   1d122:	1e44      	subs	r4, r0, #1
   1d124:	08c9      	lsrs	r1, r1, #3
   1d126:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1d12a:	2909      	cmp	r1, #9
   1d12c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   1d130:	460b      	mov	r3, r1
   1d132:	f102 0230 	add.w	r2, r2, #48	; 0x30
   1d136:	f800 2c01 	strb.w	r2, [r0, #-1]
   1d13a:	dcef      	bgt.n	1d11c <_svfprintf_r+0x185c>
   1d13c:	3330      	adds	r3, #48	; 0x30
   1d13e:	3802      	subs	r0, #2
   1d140:	b2db      	uxtb	r3, r3
   1d142:	4584      	cmp	ip, r0
   1d144:	f804 3c01 	strb.w	r3, [r4, #-1]
   1d148:	f240 808a 	bls.w	1d260 <_svfprintf_r+0x19a0>
   1d14c:	4622      	mov	r2, r4
   1d14e:	f10d 0192 	add.w	r1, sp, #146	; 0x92
   1d152:	e001      	b.n	1d158 <_svfprintf_r+0x1898>
   1d154:	f812 3b01 	ldrb.w	r3, [r2], #1
   1d158:	4594      	cmp	ip, r2
   1d15a:	f801 3b01 	strb.w	r3, [r1], #1
   1d15e:	d1f9      	bne.n	1d154 <_svfprintf_r+0x1894>
   1d160:	aa28      	add	r2, sp, #160	; 0xa0
   1d162:	f10d 0392 	add.w	r3, sp, #146	; 0x92
   1d166:	1b12      	subs	r2, r2, r4
   1d168:	441a      	add	r2, r3
   1d16a:	e5ae      	b.n	1ccca <_svfprintf_r+0x140a>
   1d16c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d16e:	9308      	str	r3, [sp, #32]
   1d170:	e5d3      	b.n	1cd1a <_svfprintf_r+0x145a>
   1d172:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d174:	2666      	movs	r6, #102	; 0x66
   1d176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d178:	4413      	add	r3, r2
   1d17a:	9a06      	ldr	r2, [sp, #24]
   1d17c:	441a      	add	r2, r3
   1d17e:	9208      	str	r2, [sp, #32]
   1d180:	f7ff bac7 	b.w	1c712 <_svfprintf_r+0xe52>
   1d184:	469b      	mov	fp, r3
   1d186:	f7ff bb03 	b.w	1c790 <_svfprintf_r+0xed0>
   1d18a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1d18c:	2b00      	cmp	r3, #0
   1d18e:	db43      	blt.n	1d218 <_svfprintf_r+0x1958>
   1d190:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   1d194:	2003      	movs	r0, #3
   1d196:	4f3e      	ldr	r7, [pc, #248]	; (1d290 <_svfprintf_r+0x19d0>)
   1d198:	4b3e      	ldr	r3, [pc, #248]	; (1d294 <_svfprintf_r+0x19d4>)
   1d19a:	9005      	str	r0, [sp, #20]
   1d19c:	f7fe bf93 	b.w	1c0c6 <_svfprintf_r+0x806>
   1d1a0:	464a      	mov	r2, r9
   1d1a2:	4b3d      	ldr	r3, [pc, #244]	; (1d298 <_svfprintf_r+0x19d8>)
   1d1a4:	e431      	b.n	1ca0a <_svfprintf_r+0x114a>
   1d1a6:	222d      	movs	r2, #45	; 0x2d
   1d1a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d1aa:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
   1d1ae:	f1c3 0301 	rsb	r3, r3, #1
   1d1b2:	e57b      	b.n	1ccac <_svfprintf_r+0x13ec>
   1d1b4:	9b05      	ldr	r3, [sp, #20]
   1d1b6:	07db      	lsls	r3, r3, #31
   1d1b8:	f57f ad94 	bpl.w	1cce4 <_svfprintf_r+0x1424>
   1d1bc:	e58e      	b.n	1ccdc <_svfprintf_r+0x141c>
   1d1be:	bb1b      	cbnz	r3, 1d208 <_svfprintf_r+0x1948>
   1d1c0:	9b05      	ldr	r3, [sp, #20]
   1d1c2:	07dc      	lsls	r4, r3, #31
   1d1c4:	d420      	bmi.n	1d208 <_svfprintf_r+0x1948>
   1d1c6:	2301      	movs	r3, #1
   1d1c8:	2666      	movs	r6, #102	; 0x66
   1d1ca:	9305      	str	r3, [sp, #20]
   1d1cc:	9308      	str	r3, [sp, #32]
   1d1ce:	f7ff baa8 	b.w	1c722 <_svfprintf_r+0xe62>
   1d1d2:	f1c3 0301 	rsb	r3, r3, #1
   1d1d6:	2667      	movs	r6, #103	; 0x67
   1d1d8:	9a08      	ldr	r2, [sp, #32]
   1d1da:	441a      	add	r2, r3
   1d1dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1d1e0:	9208      	str	r2, [sp, #32]
   1d1e2:	9305      	str	r3, [sp, #20]
   1d1e4:	f7ff ba9d 	b.w	1c722 <_svfprintf_r+0xe62>
   1d1e8:	9906      	ldr	r1, [sp, #24]
   1d1ea:	4690      	mov	r8, r2
   1d1ec:	2201      	movs	r2, #1
   1d1ee:	910b      	str	r1, [sp, #44]	; 0x2c
   1d1f0:	9206      	str	r2, [sp, #24]
   1d1f2:	f7ff ba44 	b.w	1c67e <_svfprintf_r+0xdbe>
   1d1f6:	9b05      	ldr	r3, [sp, #20]
   1d1f8:	07db      	lsls	r3, r3, #31
   1d1fa:	d434      	bmi.n	1d266 <_svfprintf_r+0x19a6>
   1d1fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1d1fe:	f7ff ba6d 	b.w	1c6dc <_svfprintf_r+0xe1c>
   1d202:	f10d 0192 	add.w	r1, sp, #146	; 0x92
   1d206:	e55d      	b.n	1ccc4 <_svfprintf_r+0x1404>
   1d208:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1d20a:	2666      	movs	r6, #102	; 0x66
   1d20c:	9a06      	ldr	r2, [sp, #24]
   1d20e:	3301      	adds	r3, #1
   1d210:	e7e3      	b.n	1d1da <_svfprintf_r+0x191a>
   1d212:	9a06      	ldr	r2, [sp, #24]
   1d214:	7a92      	ldrb	r2, [r2, #10]
   1d216:	e6db      	b.n	1cfd0 <_svfprintf_r+0x1710>
   1d218:	232d      	movs	r3, #45	; 0x2d
   1d21a:	461a      	mov	r2, r3
   1d21c:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   1d220:	e7b8      	b.n	1d194 <_svfprintf_r+0x18d4>
   1d222:	aa28      	add	r2, sp, #160	; 0xa0
   1d224:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1d228:	f028 fae4 	bl	457f4 <__ssprint_r>
   1d22c:	2800      	cmp	r0, #0
   1d22e:	f47e ac1a 	bne.w	1ba66 <_svfprintf_r+0x1a6>
   1d232:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   1d234:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   1d238:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1d23a:	f7ff b83c 	b.w	1c2b6 <_svfprintf_r+0x9f6>
   1d23e:	9b06      	ldr	r3, [sp, #24]
   1d240:	f1c3 0301 	rsb	r3, r3, #1
   1d244:	9322      	str	r3, [sp, #136]	; 0x88
   1d246:	e643      	b.n	1ced0 <_svfprintf_r+0x1610>
   1d248:	990c      	ldr	r1, [sp, #48]	; 0x30
   1d24a:	f89b 6001 	ldrb.w	r6, [fp, #1]
   1d24e:	4693      	mov	fp, r2
   1d250:	680b      	ldr	r3, [r1, #0]
   1d252:	3104      	adds	r1, #4
   1d254:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   1d258:	910c      	str	r1, [sp, #48]	; 0x30
   1d25a:	9306      	str	r3, [sp, #24]
   1d25c:	f7fe bb89 	b.w	1b972 <_svfprintf_r+0xb2>
   1d260:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   1d264:	e531      	b.n	1ccca <_svfprintf_r+0x140a>
   1d266:	9b06      	ldr	r3, [sp, #24]
   1d268:	18fc      	adds	r4, r7, r3
   1d26a:	f7ff ba2d 	b.w	1c6c8 <_svfprintf_r+0xe08>
   1d26e:	f04f 32ff 	mov.w	r2, #4294967295
   1d272:	230c      	movs	r3, #12
   1d274:	9207      	str	r2, [sp, #28]
   1d276:	9a03      	ldr	r2, [sp, #12]
   1d278:	6013      	str	r3, [r2, #0]
   1d27a:	f7fe bc03 	b.w	1ba84 <_svfprintf_r+0x1c4>
   1d27e:	9a04      	ldr	r2, [sp, #16]
   1d280:	8993      	ldrh	r3, [r2, #12]
   1d282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d286:	8193      	strh	r3, [r2, #12]
   1d288:	f7fe bbf5 	b.w	1ba76 <_svfprintf_r+0x1b6>
   1d28c:	cccccccd 	.word	0xcccccccd
   1d290:	0004ae08 	.word	0x0004ae08
   1d294:	0004ae04 	.word	0x0004ae04
   1d298:	0004ae50 	.word	0x0004ae50
   1d29c:	00000000 	.word	0x00000000

0001d2a0 <_dtoa_r>:
   1d2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2a4:	b099      	sub	sp, #100	; 0x64
   1d2a6:	4604      	mov	r4, r0
   1d2a8:	ee10 aa10 	vmov	sl, s0
   1d2ac:	9100      	str	r1, [sp, #0]
   1d2ae:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1d2b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1d2b4:	ec57 6b10 	vmov	r6, r7, d0
   1d2b8:	46bb      	mov	fp, r7
   1d2ba:	b14b      	cbz	r3, 1d2d0 <_dtoa_r+0x30>
   1d2bc:	6c45      	ldr	r5, [r0, #68]	; 0x44
   1d2be:	2201      	movs	r2, #1
   1d2c0:	4619      	mov	r1, r3
   1d2c2:	40aa      	lsls	r2, r5
   1d2c4:	e9c3 5201 	strd	r5, r2, [r3, #4]
   1d2c8:	f027 fba0 	bl	44a0c <_Bfree>
   1d2cc:	2300      	movs	r3, #0
   1d2ce:	6423      	str	r3, [r4, #64]	; 0x40
   1d2d0:	f1b7 0900 	subs.w	r9, r7, #0
   1d2d4:	f2c0 80af 	blt.w	1d436 <_dtoa_r+0x196>
   1d2d8:	2300      	movs	r3, #0
   1d2da:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1d2dc:	6013      	str	r3, [r2, #0]
   1d2de:	4b7a      	ldr	r3, [pc, #488]	; (1d4c8 <_dtoa_r+0x228>)
   1d2e0:	ea33 0309 	bics.w	r3, r3, r9
   1d2e4:	f000 80b2 	beq.w	1d44c <_dtoa_r+0x1ac>
   1d2e8:	4650      	mov	r0, sl
   1d2ea:	4659      	mov	r1, fp
   1d2ec:	2200      	movs	r2, #0
   1d2ee:	2300      	movs	r3, #0
   1d2f0:	f7fb fcba 	bl	18c68 <__aeabi_dcmpeq>
   1d2f4:	4656      	mov	r6, sl
   1d2f6:	465f      	mov	r7, fp
   1d2f8:	4680      	mov	r8, r0
   1d2fa:	b168      	cbz	r0, 1d318 <_dtoa_r+0x78>
   1d2fc:	2301      	movs	r3, #1
   1d2fe:	9a03      	ldr	r2, [sp, #12]
   1d300:	6013      	str	r3, [r2, #0]
   1d302:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1d304:	2b00      	cmp	r3, #0
   1d306:	f000 80cc 	beq.w	1d4a2 <_dtoa_r+0x202>
   1d30a:	4f70      	ldr	r7, [pc, #448]	; (1d4cc <_dtoa_r+0x22c>)
   1d30c:	601f      	str	r7, [r3, #0]
   1d30e:	3f01      	subs	r7, #1
   1d310:	4638      	mov	r0, r7
   1d312:	b019      	add	sp, #100	; 0x64
   1d314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d318:	aa16      	add	r2, sp, #88	; 0x58
   1d31a:	a917      	add	r1, sp, #92	; 0x5c
   1d31c:	4620      	mov	r0, r4
   1d31e:	ec47 6b10 	vmov	d0, r6, r7
   1d322:	f027 fedd 	bl	450e0 <__d2b>
   1d326:	9009      	str	r0, [sp, #36]	; 0x24
   1d328:	ea5f 5519 	movs.w	r5, r9, lsr #20
   1d32c:	f040 80ac 	bne.w	1d488 <_dtoa_r+0x1e8>
   1d330:	e9dd 8516 	ldrd	r8, r5, [sp, #88]	; 0x58
   1d334:	4445      	add	r5, r8
   1d336:	f205 4332 	addw	r3, r5, #1074	; 0x432
   1d33a:	2b20      	cmp	r3, #32
   1d33c:	f340 8292 	ble.w	1d864 <_dtoa_r+0x5c4>
   1d340:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   1d344:	f205 4012 	addw	r0, r5, #1042	; 0x412
   1d348:	fa09 f903 	lsl.w	r9, r9, r3
   1d34c:	fa2a f000 	lsr.w	r0, sl, r0
   1d350:	ea49 0000 	orr.w	r0, r9, r0
   1d354:	f7fb f9a6 	bl	186a4 <__aeabi_ui2d>
   1d358:	3d01      	subs	r5, #1
   1d35a:	2201      	movs	r2, #1
   1d35c:	4606      	mov	r6, r0
   1d35e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
   1d362:	9214      	str	r2, [sp, #80]	; 0x50
   1d364:	4630      	mov	r0, r6
   1d366:	4639      	mov	r1, r7
   1d368:	2200      	movs	r2, #0
   1d36a:	4b59      	ldr	r3, [pc, #356]	; (1d4d0 <_dtoa_r+0x230>)
   1d36c:	f7fb f85c 	bl	18428 <__aeabi_dsub>
   1d370:	a34f      	add	r3, pc, #316	; (adr r3, 1d4b0 <_dtoa_r+0x210>)
   1d372:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d376:	f7fb fa0f 	bl	18798 <__aeabi_dmul>
   1d37a:	a34f      	add	r3, pc, #316	; (adr r3, 1d4b8 <_dtoa_r+0x218>)
   1d37c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d380:	f7fb f854 	bl	1842c <__adddf3>
   1d384:	4606      	mov	r6, r0
   1d386:	460f      	mov	r7, r1
   1d388:	4628      	mov	r0, r5
   1d38a:	f7fb f99b 	bl	186c4 <__aeabi_i2d>
   1d38e:	a34c      	add	r3, pc, #304	; (adr r3, 1d4c0 <_dtoa_r+0x220>)
   1d390:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d394:	f7fb fa00 	bl	18798 <__aeabi_dmul>
   1d398:	4602      	mov	r2, r0
   1d39a:	460b      	mov	r3, r1
   1d39c:	4630      	mov	r0, r6
   1d39e:	4639      	mov	r1, r7
   1d3a0:	f7fb f844 	bl	1842c <__adddf3>
   1d3a4:	4606      	mov	r6, r0
   1d3a6:	460f      	mov	r7, r1
   1d3a8:	f7fb fc90 	bl	18ccc <__aeabi_d2iz>
   1d3ac:	2200      	movs	r2, #0
   1d3ae:	4681      	mov	r9, r0
   1d3b0:	2300      	movs	r3, #0
   1d3b2:	4630      	mov	r0, r6
   1d3b4:	4639      	mov	r1, r7
   1d3b6:	f7fb fc61 	bl	18c7c <__aeabi_dcmplt>
   1d3ba:	2800      	cmp	r0, #0
   1d3bc:	f040 8245 	bne.w	1d84a <_dtoa_r+0x5aa>
   1d3c0:	f1b9 0f16 	cmp.w	r9, #22
   1d3c4:	f200 822e 	bhi.w	1d824 <_dtoa_r+0x584>
   1d3c8:	4942      	ldr	r1, [pc, #264]	; (1d4d4 <_dtoa_r+0x234>)
   1d3ca:	4652      	mov	r2, sl
   1d3cc:	465b      	mov	r3, fp
   1d3ce:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
   1d3d2:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d3d6:	f7fb fc6f 	bl	18cb8 <__aeabi_dcmpgt>
   1d3da:	2800      	cmp	r0, #0
   1d3dc:	f000 8249 	beq.w	1d872 <_dtoa_r+0x5d2>
   1d3e0:	2300      	movs	r3, #0
   1d3e2:	f109 39ff 	add.w	r9, r9, #4294967295
   1d3e6:	9310      	str	r3, [sp, #64]	; 0x40
   1d3e8:	eba8 0505 	sub.w	r5, r8, r5
   1d3ec:	1e6b      	subs	r3, r5, #1
   1d3ee:	9306      	str	r3, [sp, #24]
   1d3f0:	f100 8225 	bmi.w	1d83e <_dtoa_r+0x59e>
   1d3f4:	2300      	movs	r3, #0
   1d3f6:	9308      	str	r3, [sp, #32]
   1d3f8:	f1b9 0f00 	cmp.w	r9, #0
   1d3fc:	f2c0 8215 	blt.w	1d82a <_dtoa_r+0x58a>
   1d400:	9b06      	ldr	r3, [sp, #24]
   1d402:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   1d406:	444b      	add	r3, r9
   1d408:	9306      	str	r3, [sp, #24]
   1d40a:	2300      	movs	r3, #0
   1d40c:	930e      	str	r3, [sp, #56]	; 0x38
   1d40e:	9b00      	ldr	r3, [sp, #0]
   1d410:	2b09      	cmp	r3, #9
   1d412:	d867      	bhi.n	1d4e4 <_dtoa_r+0x244>
   1d414:	2b05      	cmp	r3, #5
   1d416:	f340 822a 	ble.w	1d86e <_dtoa_r+0x5ce>
   1d41a:	3b04      	subs	r3, #4
   1d41c:	2500      	movs	r5, #0
   1d41e:	9300      	str	r3, [sp, #0]
   1d420:	9b00      	ldr	r3, [sp, #0]
   1d422:	3b02      	subs	r3, #2
   1d424:	2b03      	cmp	r3, #3
   1d426:	f200 824b 	bhi.w	1d8c0 <_dtoa_r+0x620>
   1d42a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1d42e:	0283      	.short	0x0283
   1d430:	02ad02a1 	.word	0x02ad02a1
   1d434:	04a8      	.short	0x04a8
   1d436:	2301      	movs	r3, #1
   1d438:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1d43a:	f029 4900 	bic.w	r9, r9, #2147483648	; 0x80000000
   1d43e:	6013      	str	r3, [r2, #0]
   1d440:	4b21      	ldr	r3, [pc, #132]	; (1d4c8 <_dtoa_r+0x228>)
   1d442:	46cb      	mov	fp, r9
   1d444:	ea33 0309 	bics.w	r3, r3, r9
   1d448:	f47f af4e 	bne.w	1d2e8 <_dtoa_r+0x48>
   1d44c:	f242 730f 	movw	r3, #9999	; 0x270f
   1d450:	9a03      	ldr	r2, [sp, #12]
   1d452:	6013      	str	r3, [r2, #0]
   1d454:	f1ba 0f00 	cmp.w	sl, #0
   1d458:	d10f      	bne.n	1d47a <_dtoa_r+0x1da>
   1d45a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   1d45e:	b963      	cbnz	r3, 1d47a <_dtoa_r+0x1da>
   1d460:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1d462:	4f1d      	ldr	r7, [pc, #116]	; (1d4d8 <_dtoa_r+0x238>)
   1d464:	2b00      	cmp	r3, #0
   1d466:	f43f af53 	beq.w	1d310 <_dtoa_r+0x70>
   1d46a:	f107 0308 	add.w	r3, r7, #8
   1d46e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1d470:	4638      	mov	r0, r7
   1d472:	6013      	str	r3, [r2, #0]
   1d474:	b019      	add	sp, #100	; 0x64
   1d476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d47a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1d47c:	4f17      	ldr	r7, [pc, #92]	; (1d4dc <_dtoa_r+0x23c>)
   1d47e:	2b00      	cmp	r3, #0
   1d480:	f43f af46 	beq.w	1d310 <_dtoa_r+0x70>
   1d484:	1cfb      	adds	r3, r7, #3
   1d486:	e7f2      	b.n	1d46e <_dtoa_r+0x1ce>
   1d488:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1d48c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   1d490:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   1d494:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1d498:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
   1d49c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
   1d4a0:	e760      	b.n	1d364 <_dtoa_r+0xc4>
   1d4a2:	4f0f      	ldr	r7, [pc, #60]	; (1d4e0 <_dtoa_r+0x240>)
   1d4a4:	4638      	mov	r0, r7
   1d4a6:	b019      	add	sp, #100	; 0x64
   1d4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4ac:	f3af 8000 	nop.w
   1d4b0:	636f4361 	.word	0x636f4361
   1d4b4:	3fd287a7 	.word	0x3fd287a7
   1d4b8:	8b60c8b3 	.word	0x8b60c8b3
   1d4bc:	3fc68a28 	.word	0x3fc68a28
   1d4c0:	509f79fb 	.word	0x509f79fb
   1d4c4:	3fd34413 	.word	0x3fd34413
   1d4c8:	7ff00000 	.word	0x7ff00000
   1d4cc:	0004ae3d 	.word	0x0004ae3d
   1d4d0:	3ff80000 	.word	0x3ff80000
   1d4d4:	000491d8 	.word	0x000491d8
   1d4d8:	0004afe0 	.word	0x0004afe0
   1d4dc:	0004afec 	.word	0x0004afec
   1d4e0:	0004ae3c 	.word	0x0004ae3c
   1d4e4:	2300      	movs	r3, #0
   1d4e6:	2201      	movs	r2, #1
   1d4e8:	461d      	mov	r5, r3
   1d4ea:	920c      	str	r2, [sp, #48]	; 0x30
   1d4ec:	f04f 32ff 	mov.w	r2, #4294967295
   1d4f0:	9300      	str	r3, [sp, #0]
   1d4f2:	9304      	str	r3, [sp, #16]
   1d4f4:	9207      	str	r2, [sp, #28]
   1d4f6:	2100      	movs	r1, #0
   1d4f8:	9b07      	ldr	r3, [sp, #28]
   1d4fa:	6461      	str	r1, [r4, #68]	; 0x44
   1d4fc:	9311      	str	r3, [sp, #68]	; 0x44
   1d4fe:	4620      	mov	r0, r4
   1d500:	f027 fa5e 	bl	449c0 <_Balloc>
   1d504:	9005      	str	r0, [sp, #20]
   1d506:	6420      	str	r0, [r4, #64]	; 0x40
   1d508:	2d00      	cmp	r5, #0
   1d50a:	f000 80e5 	beq.w	1d6d8 <_dtoa_r+0x438>
   1d50e:	4650      	mov	r0, sl
   1d510:	4659      	mov	r1, fp
   1d512:	f1b9 0f00 	cmp.w	r9, #0
   1d516:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   1d51a:	f340 831a 	ble.w	1db52 <_dtoa_r+0x8b2>
   1d51e:	4abb      	ldr	r2, [pc, #748]	; (1d80c <_dtoa_r+0x56c>)
   1d520:	f009 030f 	and.w	r3, r9, #15
   1d524:	ea4f 1529 	mov.w	r5, r9, asr #4
   1d528:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1d52c:	e9d3 6700 	ldrd	r6, r7, [r3]
   1d530:	06eb      	lsls	r3, r5, #27
   1d532:	f140 81f8 	bpl.w	1d926 <_dtoa_r+0x686>
   1d536:	4bb6      	ldr	r3, [pc, #728]	; (1d810 <_dtoa_r+0x570>)
   1d538:	f005 050f 	and.w	r5, r5, #15
   1d53c:	f04f 0a03 	mov.w	sl, #3
   1d540:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1d544:	f7fb fa52 	bl	189ec <__aeabi_ddiv>
   1d548:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1d54c:	b195      	cbz	r5, 1d574 <_dtoa_r+0x2d4>
   1d54e:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 1d810 <_dtoa_r+0x570>
   1d552:	f015 0f01 	tst.w	r5, #1
   1d556:	4630      	mov	r0, r6
   1d558:	4639      	mov	r1, r7
   1d55a:	d007      	beq.n	1d56c <_dtoa_r+0x2cc>
   1d55c:	f10a 0a01 	add.w	sl, sl, #1
   1d560:	e9d8 2300 	ldrd	r2, r3, [r8]
   1d564:	f7fb f918 	bl	18798 <__aeabi_dmul>
   1d568:	4606      	mov	r6, r0
   1d56a:	460f      	mov	r7, r1
   1d56c:	106d      	asrs	r5, r5, #1
   1d56e:	f108 0808 	add.w	r8, r8, #8
   1d572:	d1ee      	bne.n	1d552 <_dtoa_r+0x2b2>
   1d574:	4632      	mov	r2, r6
   1d576:	463b      	mov	r3, r7
   1d578:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1d57c:	f7fb fa36 	bl	189ec <__aeabi_ddiv>
   1d580:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1d584:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d586:	b143      	cbz	r3, 1d59a <_dtoa_r+0x2fa>
   1d588:	2200      	movs	r2, #0
   1d58a:	4ba2      	ldr	r3, [pc, #648]	; (1d814 <_dtoa_r+0x574>)
   1d58c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1d590:	f7fb fb74 	bl	18c7c <__aeabi_dcmplt>
   1d594:	2800      	cmp	r0, #0
   1d596:	f040 84ad 	bne.w	1def4 <_dtoa_r+0xc54>
   1d59a:	4650      	mov	r0, sl
   1d59c:	f7fb f892 	bl	186c4 <__aeabi_i2d>
   1d5a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1d5a4:	f7fb f8f8 	bl	18798 <__aeabi_dmul>
   1d5a8:	4b9b      	ldr	r3, [pc, #620]	; (1d818 <_dtoa_r+0x578>)
   1d5aa:	2200      	movs	r2, #0
   1d5ac:	f7fa ff3e 	bl	1842c <__adddf3>
   1d5b0:	9b07      	ldr	r3, [sp, #28]
   1d5b2:	4682      	mov	sl, r0
   1d5b4:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
   1d5b8:	2b00      	cmp	r3, #0
   1d5ba:	f000 81f6 	beq.w	1d9aa <_dtoa_r+0x70a>
   1d5be:	9b07      	ldr	r3, [sp, #28]
   1d5c0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1d5c4:	9315      	str	r3, [sp, #84]	; 0x54
   1d5c6:	9b05      	ldr	r3, [sp, #20]
   1d5c8:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   1d5cc:	1c5d      	adds	r5, r3, #1
   1d5ce:	4639      	mov	r1, r7
   1d5d0:	4630      	mov	r0, r6
   1d5d2:	f7fb fb7b 	bl	18ccc <__aeabi_d2iz>
   1d5d6:	4680      	mov	r8, r0
   1d5d8:	f7fb f874 	bl	186c4 <__aeabi_i2d>
   1d5dc:	4602      	mov	r2, r0
   1d5de:	460b      	mov	r3, r1
   1d5e0:	4630      	mov	r0, r6
   1d5e2:	4639      	mov	r1, r7
   1d5e4:	f108 0830 	add.w	r8, r8, #48	; 0x30
   1d5e8:	f7fa ff1e 	bl	18428 <__aeabi_dsub>
   1d5ec:	4b87      	ldr	r3, [pc, #540]	; (1d80c <_dtoa_r+0x56c>)
   1d5ee:	460f      	mov	r7, r1
   1d5f0:	9915      	ldr	r1, [sp, #84]	; 0x54
   1d5f2:	4606      	mov	r6, r0
   1d5f4:	980c      	ldr	r0, [sp, #48]	; 0x30
   1d5f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1d5fa:	fa5f f888 	uxtb.w	r8, r8
   1d5fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1d602:	2800      	cmp	r0, #0
   1d604:	f000 8363 	beq.w	1dcce <_dtoa_r+0xa2e>
   1d608:	2000      	movs	r0, #0
   1d60a:	4984      	ldr	r1, [pc, #528]	; (1d81c <_dtoa_r+0x57c>)
   1d60c:	f7fb f9ee 	bl	189ec <__aeabi_ddiv>
   1d610:	4652      	mov	r2, sl
   1d612:	465b      	mov	r3, fp
   1d614:	f7fa ff08 	bl	18428 <__aeabi_dsub>
   1d618:	9a05      	ldr	r2, [sp, #20]
   1d61a:	463b      	mov	r3, r7
   1d61c:	4682      	mov	sl, r0
   1d61e:	f882 8000 	strb.w	r8, [r2]
   1d622:	4632      	mov	r2, r6
   1d624:	468b      	mov	fp, r1
   1d626:	f7fb fb47 	bl	18cb8 <__aeabi_dcmpgt>
   1d62a:	2800      	cmp	r0, #0
   1d62c:	d14d      	bne.n	1d6ca <_dtoa_r+0x42a>
   1d62e:	4632      	mov	r2, r6
   1d630:	463b      	mov	r3, r7
   1d632:	2000      	movs	r0, #0
   1d634:	4977      	ldr	r1, [pc, #476]	; (1d814 <_dtoa_r+0x574>)
   1d636:	f7fa fef7 	bl	18428 <__aeabi_dsub>
   1d63a:	4652      	mov	r2, sl
   1d63c:	465b      	mov	r3, fp
   1d63e:	f7fb fb1d 	bl	18c7c <__aeabi_dcmplt>
   1d642:	2800      	cmp	r0, #0
   1d644:	f040 84f9 	bne.w	1e03a <_dtoa_r+0xd9a>
   1d648:	9915      	ldr	r1, [sp, #84]	; 0x54
   1d64a:	2901      	cmp	r1, #1
   1d64c:	d042      	beq.n	1d6d4 <_dtoa_r+0x434>
   1d64e:	9a05      	ldr	r2, [sp, #20]
   1d650:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   1d654:	4411      	add	r1, r2
   1d656:	4689      	mov	r9, r1
   1d658:	e00e      	b.n	1d678 <_dtoa_r+0x3d8>
   1d65a:	4632      	mov	r2, r6
   1d65c:	463b      	mov	r3, r7
   1d65e:	2000      	movs	r0, #0
   1d660:	496c      	ldr	r1, [pc, #432]	; (1d814 <_dtoa_r+0x574>)
   1d662:	f7fa fee1 	bl	18428 <__aeabi_dsub>
   1d666:	4652      	mov	r2, sl
   1d668:	465b      	mov	r3, fp
   1d66a:	f7fb fb07 	bl	18c7c <__aeabi_dcmplt>
   1d66e:	2800      	cmp	r0, #0
   1d670:	f040 84e3 	bne.w	1e03a <_dtoa_r+0xd9a>
   1d674:	454d      	cmp	r5, r9
   1d676:	d02b      	beq.n	1d6d0 <_dtoa_r+0x430>
   1d678:	4650      	mov	r0, sl
   1d67a:	4659      	mov	r1, fp
   1d67c:	2200      	movs	r2, #0
   1d67e:	4b68      	ldr	r3, [pc, #416]	; (1d820 <_dtoa_r+0x580>)
   1d680:	f7fb f88a 	bl	18798 <__aeabi_dmul>
   1d684:	2200      	movs	r2, #0
   1d686:	4b66      	ldr	r3, [pc, #408]	; (1d820 <_dtoa_r+0x580>)
   1d688:	4682      	mov	sl, r0
   1d68a:	468b      	mov	fp, r1
   1d68c:	4630      	mov	r0, r6
   1d68e:	4639      	mov	r1, r7
   1d690:	f7fb f882 	bl	18798 <__aeabi_dmul>
   1d694:	460f      	mov	r7, r1
   1d696:	4606      	mov	r6, r0
   1d698:	f7fb fb18 	bl	18ccc <__aeabi_d2iz>
   1d69c:	4680      	mov	r8, r0
   1d69e:	f7fb f811 	bl	186c4 <__aeabi_i2d>
   1d6a2:	4602      	mov	r2, r0
   1d6a4:	460b      	mov	r3, r1
   1d6a6:	f108 0830 	add.w	r8, r8, #48	; 0x30
   1d6aa:	4630      	mov	r0, r6
   1d6ac:	4639      	mov	r1, r7
   1d6ae:	fa5f f888 	uxtb.w	r8, r8
   1d6b2:	f7fa feb9 	bl	18428 <__aeabi_dsub>
   1d6b6:	4652      	mov	r2, sl
   1d6b8:	465b      	mov	r3, fp
   1d6ba:	f805 8b01 	strb.w	r8, [r5], #1
   1d6be:	4606      	mov	r6, r0
   1d6c0:	460f      	mov	r7, r1
   1d6c2:	f7fb fadb 	bl	18c7c <__aeabi_dcmplt>
   1d6c6:	2800      	cmp	r0, #0
   1d6c8:	d0c7      	beq.n	1d65a <_dtoa_r+0x3ba>
   1d6ca:	9f05      	ldr	r7, [sp, #20]
   1d6cc:	9505      	str	r5, [sp, #20]
   1d6ce:	e089      	b.n	1d7e4 <_dtoa_r+0x544>
   1d6d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1d6d4:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   1d6d8:	f1b9 0f0e 	cmp.w	r9, #14
   1d6dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1d6de:	dc02      	bgt.n	1d6e6 <_dtoa_r+0x446>
   1d6e0:	2b00      	cmp	r3, #0
   1d6e2:	f280 80ff 	bge.w	1d8e4 <_dtoa_r+0x644>
   1d6e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d6e8:	2a00      	cmp	r2, #0
   1d6ea:	f040 80cc 	bne.w	1d886 <_dtoa_r+0x5e6>
   1d6ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d6f0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1d6f2:	9f08      	ldr	r7, [sp, #32]
   1d6f4:	930a      	str	r3, [sp, #40]	; 0x28
   1d6f6:	2f00      	cmp	r7, #0
   1d6f8:	dd0c      	ble.n	1d714 <_dtoa_r+0x474>
   1d6fa:	9a06      	ldr	r2, [sp, #24]
   1d6fc:	2a00      	cmp	r2, #0
   1d6fe:	dd09      	ble.n	1d714 <_dtoa_r+0x474>
   1d700:	42ba      	cmp	r2, r7
   1d702:	4613      	mov	r3, r2
   1d704:	9908      	ldr	r1, [sp, #32]
   1d706:	bfa8      	it	ge
   1d708:	463b      	movge	r3, r7
   1d70a:	1ac9      	subs	r1, r1, r3
   1d70c:	1aff      	subs	r7, r7, r3
   1d70e:	1ad3      	subs	r3, r2, r3
   1d710:	9108      	str	r1, [sp, #32]
   1d712:	9306      	str	r3, [sp, #24]
   1d714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d716:	b16b      	cbz	r3, 1d734 <_dtoa_r+0x494>
   1d718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d71a:	2a00      	cmp	r2, #0
   1d71c:	f000 83db 	beq.w	1ded6 <_dtoa_r+0xc36>
   1d720:	1b9d      	subs	r5, r3, r6
   1d722:	2e00      	cmp	r6, #0
   1d724:	f040 840d 	bne.w	1df42 <_dtoa_r+0xca2>
   1d728:	462a      	mov	r2, r5
   1d72a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d72c:	4620      	mov	r0, r4
   1d72e:	f027 fb07 	bl	44d40 <__pow5mult>
   1d732:	9009      	str	r0, [sp, #36]	; 0x24
   1d734:	2101      	movs	r1, #1
   1d736:	4620      	mov	r0, r4
   1d738:	f027 fa50 	bl	44bdc <__i2b>
   1d73c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1d73e:	4606      	mov	r6, r0
   1d740:	2a00      	cmp	r2, #0
   1d742:	f040 8157 	bne.w	1d9f4 <_dtoa_r+0x754>
   1d746:	9b00      	ldr	r3, [sp, #0]
   1d748:	2b01      	cmp	r3, #1
   1d74a:	f340 8501 	ble.w	1e150 <_dtoa_r+0xeb0>
   1d74e:	2001      	movs	r0, #1
   1d750:	9a06      	ldr	r2, [sp, #24]
   1d752:	4410      	add	r0, r2
   1d754:	f010 001f 	ands.w	r0, r0, #31
   1d758:	f000 8143 	beq.w	1d9e2 <_dtoa_r+0x742>
   1d75c:	f1c0 0320 	rsb	r3, r0, #32
   1d760:	2b04      	cmp	r3, #4
   1d762:	f340 84fb 	ble.w	1e15c <_dtoa_r+0xebc>
   1d766:	f1c0 001c 	rsb	r0, r0, #28
   1d76a:	9b08      	ldr	r3, [sp, #32]
   1d76c:	4402      	add	r2, r0
   1d76e:	4403      	add	r3, r0
   1d770:	4407      	add	r7, r0
   1d772:	9308      	str	r3, [sp, #32]
   1d774:	9206      	str	r2, [sp, #24]
   1d776:	9b08      	ldr	r3, [sp, #32]
   1d778:	2b00      	cmp	r3, #0
   1d77a:	dd05      	ble.n	1d788 <_dtoa_r+0x4e8>
   1d77c:	461a      	mov	r2, r3
   1d77e:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d780:	4620      	mov	r0, r4
   1d782:	f027 fb2d 	bl	44de0 <__lshift>
   1d786:	9009      	str	r0, [sp, #36]	; 0x24
   1d788:	9b06      	ldr	r3, [sp, #24]
   1d78a:	2b00      	cmp	r3, #0
   1d78c:	dd05      	ble.n	1d79a <_dtoa_r+0x4fa>
   1d78e:	4631      	mov	r1, r6
   1d790:	461a      	mov	r2, r3
   1d792:	4620      	mov	r0, r4
   1d794:	f027 fb24 	bl	44de0 <__lshift>
   1d798:	4606      	mov	r6, r0
   1d79a:	9b00      	ldr	r3, [sp, #0]
   1d79c:	2b02      	cmp	r3, #2
   1d79e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d7a0:	bfd4      	ite	le
   1d7a2:	f04f 0800 	movle.w	r8, #0
   1d7a6:	f04f 0801 	movgt.w	r8, #1
   1d7aa:	2b00      	cmp	r3, #0
   1d7ac:	f040 821c 	bne.w	1dbe8 <_dtoa_r+0x948>
   1d7b0:	9b07      	ldr	r3, [sp, #28]
   1d7b2:	2b00      	cmp	r3, #0
   1d7b4:	f300 814a 	bgt.w	1da4c <_dtoa_r+0x7ac>
   1d7b8:	f1b8 0f00 	cmp.w	r8, #0
   1d7bc:	f000 8146 	beq.w	1da4c <_dtoa_r+0x7ac>
   1d7c0:	9b07      	ldr	r3, [sp, #28]
   1d7c2:	2b00      	cmp	r3, #0
   1d7c4:	f000 8379 	beq.w	1deba <_dtoa_r+0xc1a>
   1d7c8:	9b04      	ldr	r3, [sp, #16]
   1d7ca:	9f05      	ldr	r7, [sp, #20]
   1d7cc:	43db      	mvns	r3, r3
   1d7ce:	930d      	str	r3, [sp, #52]	; 0x34
   1d7d0:	4631      	mov	r1, r6
   1d7d2:	4620      	mov	r0, r4
   1d7d4:	f027 f91a 	bl	44a0c <_Bfree>
   1d7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d7da:	b11b      	cbz	r3, 1d7e4 <_dtoa_r+0x544>
   1d7dc:	990a      	ldr	r1, [sp, #40]	; 0x28
   1d7de:	4620      	mov	r0, r4
   1d7e0:	f027 f914 	bl	44a0c <_Bfree>
   1d7e4:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d7e6:	4620      	mov	r0, r4
   1d7e8:	f027 f910 	bl	44a0c <_Bfree>
   1d7ec:	2200      	movs	r2, #0
   1d7ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d7f0:	9905      	ldr	r1, [sp, #20]
   1d7f2:	3301      	adds	r3, #1
   1d7f4:	700a      	strb	r2, [r1, #0]
   1d7f6:	9a03      	ldr	r2, [sp, #12]
   1d7f8:	6013      	str	r3, [r2, #0]
   1d7fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1d7fc:	2b00      	cmp	r3, #0
   1d7fe:	f43f ad87 	beq.w	1d310 <_dtoa_r+0x70>
   1d802:	4638      	mov	r0, r7
   1d804:	6019      	str	r1, [r3, #0]
   1d806:	b019      	add	sp, #100	; 0x64
   1d808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d80c:	000491d8 	.word	0x000491d8
   1d810:	000491b0 	.word	0x000491b0
   1d814:	3ff00000 	.word	0x3ff00000
   1d818:	401c0000 	.word	0x401c0000
   1d81c:	3fe00000 	.word	0x3fe00000
   1d820:	40240000 	.word	0x40240000
   1d824:	2301      	movs	r3, #1
   1d826:	9310      	str	r3, [sp, #64]	; 0x40
   1d828:	e5de      	b.n	1d3e8 <_dtoa_r+0x148>
   1d82a:	9b08      	ldr	r3, [sp, #32]
   1d82c:	eba3 0309 	sub.w	r3, r3, r9
   1d830:	9308      	str	r3, [sp, #32]
   1d832:	f1c9 0300 	rsb	r3, r9, #0
   1d836:	930e      	str	r3, [sp, #56]	; 0x38
   1d838:	2300      	movs	r3, #0
   1d83a:	930f      	str	r3, [sp, #60]	; 0x3c
   1d83c:	e5e7      	b.n	1d40e <_dtoa_r+0x16e>
   1d83e:	f1c5 0301 	rsb	r3, r5, #1
   1d842:	9308      	str	r3, [sp, #32]
   1d844:	2300      	movs	r3, #0
   1d846:	9306      	str	r3, [sp, #24]
   1d848:	e5d6      	b.n	1d3f8 <_dtoa_r+0x158>
   1d84a:	4648      	mov	r0, r9
   1d84c:	f7fa ff3a 	bl	186c4 <__aeabi_i2d>
   1d850:	4632      	mov	r2, r6
   1d852:	463b      	mov	r3, r7
   1d854:	f7fb fa08 	bl	18c68 <__aeabi_dcmpeq>
   1d858:	2800      	cmp	r0, #0
   1d85a:	f47f adb1 	bne.w	1d3c0 <_dtoa_r+0x120>
   1d85e:	f109 39ff 	add.w	r9, r9, #4294967295
   1d862:	e5ad      	b.n	1d3c0 <_dtoa_r+0x120>
   1d864:	f1c3 0920 	rsb	r9, r3, #32
   1d868:	fa0a f009 	lsl.w	r0, sl, r9
   1d86c:	e572      	b.n	1d354 <_dtoa_r+0xb4>
   1d86e:	2501      	movs	r5, #1
   1d870:	e5d6      	b.n	1d420 <_dtoa_r+0x180>
   1d872:	9010      	str	r0, [sp, #64]	; 0x40
   1d874:	e5b8      	b.n	1d3e8 <_dtoa_r+0x148>
   1d876:	2101      	movs	r1, #1
   1d878:	f04f 32ff 	mov.w	r2, #4294967295
   1d87c:	910c      	str	r1, [sp, #48]	; 0x30
   1d87e:	2100      	movs	r1, #0
   1d880:	9211      	str	r2, [sp, #68]	; 0x44
   1d882:	9104      	str	r1, [sp, #16]
   1d884:	9207      	str	r2, [sp, #28]
   1d886:	9a00      	ldr	r2, [sp, #0]
   1d888:	2a01      	cmp	r2, #1
   1d88a:	f340 8372 	ble.w	1df72 <_dtoa_r+0xcd2>
   1d88e:	9b07      	ldr	r3, [sp, #28]
   1d890:	1e5e      	subs	r6, r3, #1
   1d892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d894:	42b3      	cmp	r3, r6
   1d896:	f2c0 837b 	blt.w	1df90 <_dtoa_r+0xcf0>
   1d89a:	1b9e      	subs	r6, r3, r6
   1d89c:	9b07      	ldr	r3, [sp, #28]
   1d89e:	2b00      	cmp	r3, #0
   1d8a0:	f2c0 8398 	blt.w	1dfd4 <_dtoa_r+0xd34>
   1d8a4:	9a06      	ldr	r2, [sp, #24]
   1d8a6:	4611      	mov	r1, r2
   1d8a8:	9a08      	ldr	r2, [sp, #32]
   1d8aa:	4419      	add	r1, r3
   1d8ac:	4617      	mov	r7, r2
   1d8ae:	441a      	add	r2, r3
   1d8b0:	9106      	str	r1, [sp, #24]
   1d8b2:	9208      	str	r2, [sp, #32]
   1d8b4:	2101      	movs	r1, #1
   1d8b6:	4620      	mov	r0, r4
   1d8b8:	f027 f990 	bl	44bdc <__i2b>
   1d8bc:	900a      	str	r0, [sp, #40]	; 0x28
   1d8be:	e71a      	b.n	1d6f6 <_dtoa_r+0x456>
   1d8c0:	2500      	movs	r5, #0
   1d8c2:	4620      	mov	r0, r4
   1d8c4:	6465      	str	r5, [r4, #68]	; 0x44
   1d8c6:	4629      	mov	r1, r5
   1d8c8:	f027 f87a 	bl	449c0 <_Balloc>
   1d8cc:	f1b9 0f0e 	cmp.w	r9, #14
   1d8d0:	9005      	str	r0, [sp, #20]
   1d8d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1d8d4:	6420      	str	r0, [r4, #64]	; 0x40
   1d8d6:	dcce      	bgt.n	1d876 <_dtoa_r+0x5d6>
   1d8d8:	42ab      	cmp	r3, r5
   1d8da:	dbcc      	blt.n	1d876 <_dtoa_r+0x5d6>
   1d8dc:	f04f 33ff 	mov.w	r3, #4294967295
   1d8e0:	9504      	str	r5, [sp, #16]
   1d8e2:	9307      	str	r3, [sp, #28]
   1d8e4:	4bbc      	ldr	r3, [pc, #752]	; (1dbd8 <_dtoa_r+0x938>)
   1d8e6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1d8ea:	ed93 7b00 	vldr	d7, [r3]
   1d8ee:	9b04      	ldr	r3, [sp, #16]
   1d8f0:	2b00      	cmp	r3, #0
   1d8f2:	ed8d 7b00 	vstr	d7, [sp]
   1d8f6:	f280 8245 	bge.w	1dd84 <_dtoa_r+0xae4>
   1d8fa:	9e07      	ldr	r6, [sp, #28]
   1d8fc:	2e00      	cmp	r6, #0
   1d8fe:	f300 8241 	bgt.w	1dd84 <_dtoa_r+0xae4>
   1d902:	2e00      	cmp	r6, #0
   1d904:	d16a      	bne.n	1d9dc <_dtoa_r+0x73c>
   1d906:	2200      	movs	r2, #0
   1d908:	4bb4      	ldr	r3, [pc, #720]	; (1dbdc <_dtoa_r+0x93c>)
   1d90a:	ec51 0b17 	vmov	r0, r1, d7
   1d90e:	f7fa ff43 	bl	18798 <__aeabi_dmul>
   1d912:	4652      	mov	r2, sl
   1d914:	465b      	mov	r3, fp
   1d916:	f7fb f9c5 	bl	18ca4 <__aeabi_dcmpge>
   1d91a:	2800      	cmp	r0, #0
   1d91c:	f000 8150 	beq.w	1dbc0 <_dtoa_r+0x920>
   1d920:	9e07      	ldr	r6, [sp, #28]
   1d922:	960a      	str	r6, [sp, #40]	; 0x28
   1d924:	e750      	b.n	1d7c8 <_dtoa_r+0x528>
   1d926:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
   1d92a:	f04f 0a02 	mov.w	sl, #2
   1d92e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1d932:	e60b      	b.n	1d54c <_dtoa_r+0x2ac>
   1d934:	2300      	movs	r3, #0
   1d936:	930c      	str	r3, [sp, #48]	; 0x30
   1d938:	9e04      	ldr	r6, [sp, #16]
   1d93a:	2e00      	cmp	r6, #0
   1d93c:	f340 821a 	ble.w	1dd74 <_dtoa_r+0xad4>
   1d940:	9611      	str	r6, [sp, #68]	; 0x44
   1d942:	9607      	str	r6, [sp, #28]
   1d944:	9b07      	ldr	r3, [sp, #28]
   1d946:	2100      	movs	r1, #0
   1d948:	2b0e      	cmp	r3, #14
   1d94a:	bf8c      	ite	hi
   1d94c:	2500      	movhi	r5, #0
   1d94e:	f005 0501 	andls.w	r5, r5, #1
   1d952:	2e17      	cmp	r6, #23
   1d954:	6461      	str	r1, [r4, #68]	; 0x44
   1d956:	f77f add2 	ble.w	1d4fe <_dtoa_r+0x25e>
   1d95a:	2201      	movs	r2, #1
   1d95c:	2304      	movs	r3, #4
   1d95e:	005b      	lsls	r3, r3, #1
   1d960:	4611      	mov	r1, r2
   1d962:	3201      	adds	r2, #1
   1d964:	f103 0014 	add.w	r0, r3, #20
   1d968:	42b0      	cmp	r0, r6
   1d96a:	d9f8      	bls.n	1d95e <_dtoa_r+0x6be>
   1d96c:	6461      	str	r1, [r4, #68]	; 0x44
   1d96e:	e5c6      	b.n	1d4fe <_dtoa_r+0x25e>
   1d970:	2300      	movs	r3, #0
   1d972:	930c      	str	r3, [sp, #48]	; 0x30
   1d974:	9b04      	ldr	r3, [sp, #16]
   1d976:	444b      	add	r3, r9
   1d978:	9311      	str	r3, [sp, #68]	; 0x44
   1d97a:	3301      	adds	r3, #1
   1d97c:	2b01      	cmp	r3, #1
   1d97e:	461e      	mov	r6, r3
   1d980:	9307      	str	r3, [sp, #28]
   1d982:	bfb8      	it	lt
   1d984:	2601      	movlt	r6, #1
   1d986:	e7dd      	b.n	1d944 <_dtoa_r+0x6a4>
   1d988:	2301      	movs	r3, #1
   1d98a:	930c      	str	r3, [sp, #48]	; 0x30
   1d98c:	e7d4      	b.n	1d938 <_dtoa_r+0x698>
   1d98e:	4650      	mov	r0, sl
   1d990:	f7fa fe98 	bl	186c4 <__aeabi_i2d>
   1d994:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1d998:	f7fa fefe 	bl	18798 <__aeabi_dmul>
   1d99c:	2200      	movs	r2, #0
   1d99e:	4b90      	ldr	r3, [pc, #576]	; (1dbe0 <_dtoa_r+0x940>)
   1d9a0:	f7fa fd44 	bl	1842c <__adddf3>
   1d9a4:	4682      	mov	sl, r0
   1d9a6:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
   1d9aa:	2200      	movs	r2, #0
   1d9ac:	4b8b      	ldr	r3, [pc, #556]	; (1dbdc <_dtoa_r+0x93c>)
   1d9ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1d9b2:	f7fa fd39 	bl	18428 <__aeabi_dsub>
   1d9b6:	4652      	mov	r2, sl
   1d9b8:	465b      	mov	r3, fp
   1d9ba:	4606      	mov	r6, r0
   1d9bc:	460f      	mov	r7, r1
   1d9be:	f7fb f97b 	bl	18cb8 <__aeabi_dcmpgt>
   1d9c2:	2800      	cmp	r0, #0
   1d9c4:	f040 80fb 	bne.w	1dbbe <_dtoa_r+0x91e>
   1d9c8:	4630      	mov	r0, r6
   1d9ca:	4639      	mov	r1, r7
   1d9cc:	4652      	mov	r2, sl
   1d9ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   1d9d2:	f7fb f953 	bl	18c7c <__aeabi_dcmplt>
   1d9d6:	2800      	cmp	r0, #0
   1d9d8:	f43f ae7c 	beq.w	1d6d4 <_dtoa_r+0x434>
   1d9dc:	2600      	movs	r6, #0
   1d9de:	960a      	str	r6, [sp, #40]	; 0x28
   1d9e0:	e6f2      	b.n	1d7c8 <_dtoa_r+0x528>
   1d9e2:	201c      	movs	r0, #28
   1d9e4:	9b08      	ldr	r3, [sp, #32]
   1d9e6:	4407      	add	r7, r0
   1d9e8:	4403      	add	r3, r0
   1d9ea:	9308      	str	r3, [sp, #32]
   1d9ec:	9b06      	ldr	r3, [sp, #24]
   1d9ee:	4403      	add	r3, r0
   1d9f0:	9306      	str	r3, [sp, #24]
   1d9f2:	e6c0      	b.n	1d776 <_dtoa_r+0x4d6>
   1d9f4:	4601      	mov	r1, r0
   1d9f6:	4620      	mov	r0, r4
   1d9f8:	f027 f9a2 	bl	44d40 <__pow5mult>
   1d9fc:	9b00      	ldr	r3, [sp, #0]
   1d9fe:	4606      	mov	r6, r0
   1da00:	2b01      	cmp	r3, #1
   1da02:	f300 8161 	bgt.w	1dcc8 <_dtoa_r+0xa28>
   1da06:	f1ba 0f00 	cmp.w	sl, #0
   1da0a:	f040 815d 	bne.w	1dcc8 <_dtoa_r+0xa28>
   1da0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1da12:	2b00      	cmp	r3, #0
   1da14:	f040 8313 	bne.w	1e03e <_dtoa_r+0xd9e>
   1da18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1da1c:	0d1b      	lsrs	r3, r3, #20
   1da1e:	051b      	lsls	r3, r3, #20
   1da20:	b133      	cbz	r3, 1da30 <_dtoa_r+0x790>
   1da22:	9b08      	ldr	r3, [sp, #32]
   1da24:	3301      	adds	r3, #1
   1da26:	9308      	str	r3, [sp, #32]
   1da28:	9b06      	ldr	r3, [sp, #24]
   1da2a:	3301      	adds	r3, #1
   1da2c:	9306      	str	r3, [sp, #24]
   1da2e:	2301      	movs	r3, #1
   1da30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1da32:	930f      	str	r3, [sp, #60]	; 0x3c
   1da34:	2a00      	cmp	r2, #0
   1da36:	f43f ae8a 	beq.w	1d74e <_dtoa_r+0x4ae>
   1da3a:	6933      	ldr	r3, [r6, #16]
   1da3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1da40:	6918      	ldr	r0, [r3, #16]
   1da42:	f027 f879 	bl	44b38 <__hi0bits>
   1da46:	f1c0 0020 	rsb	r0, r0, #32
   1da4a:	e681      	b.n	1d750 <_dtoa_r+0x4b0>
   1da4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1da4e:	2b00      	cmp	r3, #0
   1da50:	f000 80e9 	beq.w	1dc26 <_dtoa_r+0x986>
   1da54:	2f00      	cmp	r7, #0
   1da56:	dd05      	ble.n	1da64 <_dtoa_r+0x7c4>
   1da58:	463a      	mov	r2, r7
   1da5a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1da5c:	4620      	mov	r0, r4
   1da5e:	f027 f9bf 	bl	44de0 <__lshift>
   1da62:	900a      	str	r0, [sp, #40]	; 0x28
   1da64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1da66:	2b00      	cmp	r3, #0
   1da68:	f040 82f2 	bne.w	1e050 <_dtoa_r+0xdb0>
   1da6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1da6e:	9306      	str	r3, [sp, #24]
   1da70:	f00a 0201 	and.w	r2, sl, #1
   1da74:	9f05      	ldr	r7, [sp, #20]
   1da76:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   1da7a:	46b0      	mov	r8, r6
   1da7c:	1e7b      	subs	r3, r7, #1
   1da7e:	9208      	str	r2, [sp, #32]
   1da80:	9a07      	ldr	r2, [sp, #28]
   1da82:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1da86:	441a      	add	r2, r3
   1da88:	f8dd a018 	ldr.w	sl, [sp, #24]
   1da8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1da8e:	9207      	str	r2, [sp, #28]
   1da90:	4641      	mov	r1, r8
   1da92:	4630      	mov	r0, r6
   1da94:	f025 fd38 	bl	43508 <quorem>
   1da98:	4649      	mov	r1, r9
   1da9a:	4683      	mov	fp, r0
   1da9c:	4630      	mov	r0, r6
   1da9e:	f027 f9fb 	bl	44e98 <__mcmp>
   1daa2:	4652      	mov	r2, sl
   1daa4:	4605      	mov	r5, r0
   1daa6:	4641      	mov	r1, r8
   1daa8:	4620      	mov	r0, r4
   1daaa:	f027 fa11 	bl	44ed0 <__mdiff>
   1daae:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   1dab2:	4602      	mov	r2, r0
   1dab4:	9304      	str	r3, [sp, #16]
   1dab6:	68c3      	ldr	r3, [r0, #12]
   1dab8:	2b00      	cmp	r3, #0
   1daba:	d17e      	bne.n	1dbba <_dtoa_r+0x91a>
   1dabc:	4601      	mov	r1, r0
   1dabe:	9006      	str	r0, [sp, #24]
   1dac0:	4630      	mov	r0, r6
   1dac2:	f027 f9e9 	bl	44e98 <__mcmp>
   1dac6:	9a06      	ldr	r2, [sp, #24]
   1dac8:	4603      	mov	r3, r0
   1daca:	4611      	mov	r1, r2
   1dacc:	4620      	mov	r0, r4
   1dace:	9306      	str	r3, [sp, #24]
   1dad0:	f026 ff9c 	bl	44a0c <_Bfree>
   1dad4:	9b00      	ldr	r3, [sp, #0]
   1dad6:	461a      	mov	r2, r3
   1dad8:	9b06      	ldr	r3, [sp, #24]
   1dada:	431a      	orrs	r2, r3
   1dadc:	d103      	bne.n	1dae6 <_dtoa_r+0x846>
   1dade:	9a08      	ldr	r2, [sp, #32]
   1dae0:	2a00      	cmp	r2, #0
   1dae2:	f000 8305 	beq.w	1e0f0 <_dtoa_r+0xe50>
   1dae6:	2d00      	cmp	r5, #0
   1dae8:	f2c0 8288 	blt.w	1dffc <_dtoa_r+0xd5c>
   1daec:	9a00      	ldr	r2, [sp, #0]
   1daee:	432a      	orrs	r2, r5
   1daf0:	d103      	bne.n	1dafa <_dtoa_r+0x85a>
   1daf2:	9a08      	ldr	r2, [sp, #32]
   1daf4:	2a00      	cmp	r2, #0
   1daf6:	f000 8281 	beq.w	1dffc <_dtoa_r+0xd5c>
   1dafa:	2b00      	cmp	r3, #0
   1dafc:	f107 0501 	add.w	r5, r7, #1
   1db00:	f300 82bb 	bgt.w	1e07a <_dtoa_r+0xdda>
   1db04:	9b04      	ldr	r3, [sp, #16]
   1db06:	703b      	strb	r3, [r7, #0]
   1db08:	9b07      	ldr	r3, [sp, #28]
   1db0a:	42bb      	cmp	r3, r7
   1db0c:	f000 82cd 	beq.w	1e0aa <_dtoa_r+0xe0a>
   1db10:	4631      	mov	r1, r6
   1db12:	2300      	movs	r3, #0
   1db14:	220a      	movs	r2, #10
   1db16:	4620      	mov	r0, r4
   1db18:	f026 ff82 	bl	44a20 <__multadd>
   1db1c:	45d1      	cmp	r9, sl
   1db1e:	4606      	mov	r6, r0
   1db20:	4649      	mov	r1, r9
   1db22:	f04f 0300 	mov.w	r3, #0
   1db26:	f04f 020a 	mov.w	r2, #10
   1db2a:	4620      	mov	r0, r4
   1db2c:	d00b      	beq.n	1db46 <_dtoa_r+0x8a6>
   1db2e:	f026 ff77 	bl	44a20 <__multadd>
   1db32:	4651      	mov	r1, sl
   1db34:	4681      	mov	r9, r0
   1db36:	2300      	movs	r3, #0
   1db38:	220a      	movs	r2, #10
   1db3a:	4620      	mov	r0, r4
   1db3c:	f026 ff70 	bl	44a20 <__multadd>
   1db40:	462f      	mov	r7, r5
   1db42:	4682      	mov	sl, r0
   1db44:	e7a4      	b.n	1da90 <_dtoa_r+0x7f0>
   1db46:	f026 ff6b 	bl	44a20 <__multadd>
   1db4a:	462f      	mov	r7, r5
   1db4c:	4681      	mov	r9, r0
   1db4e:	4682      	mov	sl, r0
   1db50:	e79e      	b.n	1da90 <_dtoa_r+0x7f0>
   1db52:	f000 81c7 	beq.w	1dee4 <_dtoa_r+0xc44>
   1db56:	f1c9 0600 	rsb	r6, r9, #0
   1db5a:	4b1f      	ldr	r3, [pc, #124]	; (1dbd8 <_dtoa_r+0x938>)
   1db5c:	f006 020f 	and.w	r2, r6, #15
   1db60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1db64:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   1db68:	e9d3 2300 	ldrd	r2, r3, [r3]
   1db6c:	f7fa fe14 	bl	18798 <__aeabi_dmul>
   1db70:	1136      	asrs	r6, r6, #4
   1db72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1db76:	f000 82cf 	beq.w	1e118 <_dtoa_r+0xe78>
   1db7a:	4f1a      	ldr	r7, [pc, #104]	; (1dbe4 <_dtoa_r+0x944>)
   1db7c:	f04f 0c00 	mov.w	ip, #0
   1db80:	f04f 0a02 	mov.w	sl, #2
   1db84:	4602      	mov	r2, r0
   1db86:	460b      	mov	r3, r1
   1db88:	f016 0f01 	tst.w	r6, #1
   1db8c:	4610      	mov	r0, r2
   1db8e:	4619      	mov	r1, r3
   1db90:	d008      	beq.n	1dba4 <_dtoa_r+0x904>
   1db92:	f10a 0a01 	add.w	sl, sl, #1
   1db96:	e9d7 2300 	ldrd	r2, r3, [r7]
   1db9a:	f7fa fdfd 	bl	18798 <__aeabi_dmul>
   1db9e:	46ac      	mov	ip, r5
   1dba0:	4602      	mov	r2, r0
   1dba2:	460b      	mov	r3, r1
   1dba4:	1076      	asrs	r6, r6, #1
   1dba6:	f107 0708 	add.w	r7, r7, #8
   1dbaa:	d1ed      	bne.n	1db88 <_dtoa_r+0x8e8>
   1dbac:	f1bc 0f00 	cmp.w	ip, #0
   1dbb0:	f43f ace8 	beq.w	1d584 <_dtoa_r+0x2e4>
   1dbb4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1dbb8:	e4e4      	b.n	1d584 <_dtoa_r+0x2e4>
   1dbba:	2301      	movs	r3, #1
   1dbbc:	e785      	b.n	1daca <_dtoa_r+0x82a>
   1dbbe:	2600      	movs	r6, #0
   1dbc0:	960a      	str	r6, [sp, #40]	; 0x28
   1dbc2:	f109 0201 	add.w	r2, r9, #1
   1dbc6:	2331      	movs	r3, #49	; 0x31
   1dbc8:	920d      	str	r2, [sp, #52]	; 0x34
   1dbca:	9a05      	ldr	r2, [sp, #20]
   1dbcc:	7013      	strb	r3, [r2, #0]
   1dbce:	1c53      	adds	r3, r2, #1
   1dbd0:	4617      	mov	r7, r2
   1dbd2:	9305      	str	r3, [sp, #20]
   1dbd4:	e5fc      	b.n	1d7d0 <_dtoa_r+0x530>
   1dbd6:	bf00      	nop
   1dbd8:	000491d8 	.word	0x000491d8
   1dbdc:	40140000 	.word	0x40140000
   1dbe0:	401c0000 	.word	0x401c0000
   1dbe4:	000491b0 	.word	0x000491b0
   1dbe8:	4631      	mov	r1, r6
   1dbea:	9809      	ldr	r0, [sp, #36]	; 0x24
   1dbec:	f027 f954 	bl	44e98 <__mcmp>
   1dbf0:	2800      	cmp	r0, #0
   1dbf2:	f6bf addd 	bge.w	1d7b0 <_dtoa_r+0x510>
   1dbf6:	2300      	movs	r3, #0
   1dbf8:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1dbfa:	9909      	ldr	r1, [sp, #36]	; 0x24
   1dbfc:	220a      	movs	r2, #10
   1dbfe:	4620      	mov	r0, r4
   1dc00:	429d      	cmp	r5, r3
   1dc02:	bfcc      	ite	gt
   1dc04:	2500      	movgt	r5, #0
   1dc06:	f008 0501 	andle.w	r5, r8, #1
   1dc0a:	f026 ff09 	bl	44a20 <__multadd>
   1dc0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1dc10:	f109 39ff 	add.w	r9, r9, #4294967295
   1dc14:	9009      	str	r0, [sp, #36]	; 0x24
   1dc16:	2b00      	cmp	r3, #0
   1dc18:	f040 8282 	bne.w	1e120 <_dtoa_r+0xe80>
   1dc1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1dc1e:	9307      	str	r3, [sp, #28]
   1dc20:	2d00      	cmp	r5, #0
   1dc22:	f47f adcd 	bne.w	1d7c0 <_dtoa_r+0x520>
   1dc26:	f8dd a014 	ldr.w	sl, [sp, #20]
   1dc2a:	f8dd b01c 	ldr.w	fp, [sp, #28]
   1dc2e:	4655      	mov	r5, sl
   1dc30:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1dc32:	e002      	b.n	1dc3a <_dtoa_r+0x99a>
   1dc34:	f026 fef4 	bl	44a20 <__multadd>
   1dc38:	4607      	mov	r7, r0
   1dc3a:	4631      	mov	r1, r6
   1dc3c:	4638      	mov	r0, r7
   1dc3e:	f025 fc63 	bl	43508 <quorem>
   1dc42:	f100 0830 	add.w	r8, r0, #48	; 0x30
   1dc46:	2300      	movs	r3, #0
   1dc48:	220a      	movs	r2, #10
   1dc4a:	f805 8b01 	strb.w	r8, [r5], #1
   1dc4e:	eba5 0c0a 	sub.w	ip, r5, sl
   1dc52:	4639      	mov	r1, r7
   1dc54:	4620      	mov	r0, r4
   1dc56:	45dc      	cmp	ip, fp
   1dc58:	dbec      	blt.n	1dc34 <_dtoa_r+0x994>
   1dc5a:	f04f 0a00 	mov.w	sl, #0
   1dc5e:	9709      	str	r7, [sp, #36]	; 0x24
   1dc60:	2201      	movs	r2, #1
   1dc62:	9909      	ldr	r1, [sp, #36]	; 0x24
   1dc64:	4620      	mov	r0, r4
   1dc66:	f027 f8bb 	bl	44de0 <__lshift>
   1dc6a:	4631      	mov	r1, r6
   1dc6c:	9009      	str	r0, [sp, #36]	; 0x24
   1dc6e:	f027 f913 	bl	44e98 <__mcmp>
   1dc72:	2800      	cmp	r0, #0
   1dc74:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1dc78:	f340 81b0 	ble.w	1dfdc <_dtoa_r+0xd3c>
   1dc7c:	9905      	ldr	r1, [sp, #20]
   1dc7e:	e005      	b.n	1dc8c <_dtoa_r+0x9ec>
   1dc80:	428b      	cmp	r3, r1
   1dc82:	f000 81a0 	beq.w	1dfc6 <_dtoa_r+0xd26>
   1dc86:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   1dc8a:	461d      	mov	r5, r3
   1dc8c:	2a39      	cmp	r2, #57	; 0x39
   1dc8e:	f105 33ff 	add.w	r3, r5, #4294967295
   1dc92:	d0f5      	beq.n	1dc80 <_dtoa_r+0x9e0>
   1dc94:	3201      	adds	r2, #1
   1dc96:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1dc9a:	701a      	strb	r2, [r3, #0]
   1dc9c:	4631      	mov	r1, r6
   1dc9e:	4620      	mov	r0, r4
   1dca0:	f026 feb4 	bl	44a0c <_Bfree>
   1dca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1dca6:	2b00      	cmp	r3, #0
   1dca8:	f43f ad0f 	beq.w	1d6ca <_dtoa_r+0x42a>
   1dcac:	f1ba 0f00 	cmp.w	sl, #0
   1dcb0:	f000 824a 	beq.w	1e148 <_dtoa_r+0xea8>
   1dcb4:	459a      	cmp	sl, r3
   1dcb6:	f000 8247 	beq.w	1e148 <_dtoa_r+0xea8>
   1dcba:	4651      	mov	r1, sl
   1dcbc:	4620      	mov	r0, r4
   1dcbe:	9f05      	ldr	r7, [sp, #20]
   1dcc0:	f026 fea4 	bl	44a0c <_Bfree>
   1dcc4:	9505      	str	r5, [sp, #20]
   1dcc6:	e589      	b.n	1d7dc <_dtoa_r+0x53c>
   1dcc8:	2300      	movs	r3, #0
   1dcca:	930f      	str	r3, [sp, #60]	; 0x3c
   1dccc:	e6b5      	b.n	1da3a <_dtoa_r+0x79a>
   1dcce:	4650      	mov	r0, sl
   1dcd0:	4659      	mov	r1, fp
   1dcd2:	f7fa fd61 	bl	18798 <__aeabi_dmul>
   1dcd6:	9b05      	ldr	r3, [sp, #20]
   1dcd8:	f883 8000 	strb.w	r8, [r3]
   1dcdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1dcde:	2b01      	cmp	r3, #1
   1dce0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1dce4:	d026      	beq.n	1dd34 <_dtoa_r+0xa94>
   1dce6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1dce8:	f04f 0a00 	mov.w	sl, #0
   1dcec:	9a05      	ldr	r2, [sp, #20]
   1dcee:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
   1dcf2:	4413      	add	r3, r2
   1dcf4:	f8df b350 	ldr.w	fp, [pc, #848]	; 1e048 <_dtoa_r+0xda8>
   1dcf8:	4699      	mov	r9, r3
   1dcfa:	4652      	mov	r2, sl
   1dcfc:	465b      	mov	r3, fp
   1dcfe:	4630      	mov	r0, r6
   1dd00:	4639      	mov	r1, r7
   1dd02:	f7fa fd49 	bl	18798 <__aeabi_dmul>
   1dd06:	460f      	mov	r7, r1
   1dd08:	4606      	mov	r6, r0
   1dd0a:	f7fa ffdf 	bl	18ccc <__aeabi_d2iz>
   1dd0e:	4680      	mov	r8, r0
   1dd10:	f7fa fcd8 	bl	186c4 <__aeabi_i2d>
   1dd14:	4602      	mov	r2, r0
   1dd16:	460b      	mov	r3, r1
   1dd18:	f108 0830 	add.w	r8, r8, #48	; 0x30
   1dd1c:	4630      	mov	r0, r6
   1dd1e:	4639      	mov	r1, r7
   1dd20:	f7fa fb82 	bl	18428 <__aeabi_dsub>
   1dd24:	f805 8b01 	strb.w	r8, [r5], #1
   1dd28:	454d      	cmp	r5, r9
   1dd2a:	4606      	mov	r6, r0
   1dd2c:	460f      	mov	r7, r1
   1dd2e:	d1e4      	bne.n	1dcfa <_dtoa_r+0xa5a>
   1dd30:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   1dd34:	2200      	movs	r2, #0
   1dd36:	4bc3      	ldr	r3, [pc, #780]	; (1e044 <_dtoa_r+0xda4>)
   1dd38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1dd3c:	f7fa fb76 	bl	1842c <__adddf3>
   1dd40:	4632      	mov	r2, r6
   1dd42:	463b      	mov	r3, r7
   1dd44:	f7fa ff9a 	bl	18c7c <__aeabi_dcmplt>
   1dd48:	2800      	cmp	r0, #0
   1dd4a:	f040 809f 	bne.w	1de8c <_dtoa_r+0xbec>
   1dd4e:	2000      	movs	r0, #0
   1dd50:	49bc      	ldr	r1, [pc, #752]	; (1e044 <_dtoa_r+0xda4>)
   1dd52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1dd56:	f7fa fb67 	bl	18428 <__aeabi_dsub>
   1dd5a:	4632      	mov	r2, r6
   1dd5c:	463b      	mov	r3, r7
   1dd5e:	f7fa ffab 	bl	18cb8 <__aeabi_dcmpgt>
   1dd62:	b908      	cbnz	r0, 1dd68 <_dtoa_r+0xac8>
   1dd64:	e4b6      	b.n	1d6d4 <_dtoa_r+0x434>
   1dd66:	4615      	mov	r5, r2
   1dd68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1dd6c:	1e6a      	subs	r2, r5, #1
   1dd6e:	2b30      	cmp	r3, #48	; 0x30
   1dd70:	d0f9      	beq.n	1dd66 <_dtoa_r+0xac6>
   1dd72:	e4aa      	b.n	1d6ca <_dtoa_r+0x42a>
   1dd74:	2301      	movs	r3, #1
   1dd76:	9304      	str	r3, [sp, #16]
   1dd78:	9307      	str	r3, [sp, #28]
   1dd7a:	f7ff bbbc 	b.w	1d4f6 <_dtoa_r+0x256>
   1dd7e:	2301      	movs	r3, #1
   1dd80:	930c      	str	r3, [sp, #48]	; 0x30
   1dd82:	e5f7      	b.n	1d974 <_dtoa_r+0x6d4>
   1dd84:	e9dd 6700 	ldrd	r6, r7, [sp]
   1dd88:	4650      	mov	r0, sl
   1dd8a:	4659      	mov	r1, fp
   1dd8c:	4632      	mov	r2, r6
   1dd8e:	463b      	mov	r3, r7
   1dd90:	f7fa fe2c 	bl	189ec <__aeabi_ddiv>
   1dd94:	9b05      	ldr	r3, [sp, #20]
   1dd96:	1c5d      	adds	r5, r3, #1
   1dd98:	f7fa ff98 	bl	18ccc <__aeabi_d2iz>
   1dd9c:	4680      	mov	r8, r0
   1dd9e:	f7fa fc91 	bl	186c4 <__aeabi_i2d>
   1dda2:	4632      	mov	r2, r6
   1dda4:	463b      	mov	r3, r7
   1dda6:	f7fa fcf7 	bl	18798 <__aeabi_dmul>
   1ddaa:	4602      	mov	r2, r0
   1ddac:	460b      	mov	r3, r1
   1ddae:	4650      	mov	r0, sl
   1ddb0:	4659      	mov	r1, fp
   1ddb2:	f7fa fb39 	bl	18428 <__aeabi_dsub>
   1ddb6:	f108 0330 	add.w	r3, r8, #48	; 0x30
   1ddba:	9a05      	ldr	r2, [sp, #20]
   1ddbc:	4606      	mov	r6, r0
   1ddbe:	460f      	mov	r7, r1
   1ddc0:	7013      	strb	r3, [r2, #0]
   1ddc2:	9b07      	ldr	r3, [sp, #28]
   1ddc4:	2b01      	cmp	r3, #1
   1ddc6:	d045      	beq.n	1de54 <_dtoa_r+0xbb4>
   1ddc8:	2200      	movs	r2, #0
   1ddca:	4b9f      	ldr	r3, [pc, #636]	; (1e048 <_dtoa_r+0xda8>)
   1ddcc:	f7fa fce4 	bl	18798 <__aeabi_dmul>
   1ddd0:	2200      	movs	r2, #0
   1ddd2:	2300      	movs	r3, #0
   1ddd4:	4606      	mov	r6, r0
   1ddd6:	460f      	mov	r7, r1
   1ddd8:	f7fa ff46 	bl	18c68 <__aeabi_dcmpeq>
   1dddc:	2800      	cmp	r0, #0
   1ddde:	f040 80e2 	bne.w	1dfa6 <_dtoa_r+0xd06>
   1dde2:	f8cd 9010 	str.w	r9, [sp, #16]
   1dde6:	f04f 0a00 	mov.w	sl, #0
   1ddea:	9406      	str	r4, [sp, #24]
   1ddec:	f8df b258 	ldr.w	fp, [pc, #600]	; 1e048 <_dtoa_r+0xda8>
   1ddf0:	f8dd 901c 	ldr.w	r9, [sp, #28]
   1ddf4:	9c05      	ldr	r4, [sp, #20]
   1ddf6:	e00a      	b.n	1de0e <_dtoa_r+0xb6e>
   1ddf8:	f7fa fcce 	bl	18798 <__aeabi_dmul>
   1ddfc:	2200      	movs	r2, #0
   1ddfe:	2300      	movs	r3, #0
   1de00:	4606      	mov	r6, r0
   1de02:	460f      	mov	r7, r1
   1de04:	f7fa ff30 	bl	18c68 <__aeabi_dcmpeq>
   1de08:	2800      	cmp	r0, #0
   1de0a:	f040 80c9 	bne.w	1dfa0 <_dtoa_r+0xd00>
   1de0e:	4630      	mov	r0, r6
   1de10:	4639      	mov	r1, r7
   1de12:	e9dd 2300 	ldrd	r2, r3, [sp]
   1de16:	f7fa fde9 	bl	189ec <__aeabi_ddiv>
   1de1a:	f7fa ff57 	bl	18ccc <__aeabi_d2iz>
   1de1e:	4680      	mov	r8, r0
   1de20:	f7fa fc50 	bl	186c4 <__aeabi_i2d>
   1de24:	e9dd 2300 	ldrd	r2, r3, [sp]
   1de28:	f7fa fcb6 	bl	18798 <__aeabi_dmul>
   1de2c:	4602      	mov	r2, r0
   1de2e:	460b      	mov	r3, r1
   1de30:	4630      	mov	r0, r6
   1de32:	4639      	mov	r1, r7
   1de34:	f7fa faf8 	bl	18428 <__aeabi_dsub>
   1de38:	f108 0330 	add.w	r3, r8, #48	; 0x30
   1de3c:	4606      	mov	r6, r0
   1de3e:	460f      	mov	r7, r1
   1de40:	f805 3b01 	strb.w	r3, [r5], #1
   1de44:	1b2b      	subs	r3, r5, r4
   1de46:	4652      	mov	r2, sl
   1de48:	454b      	cmp	r3, r9
   1de4a:	465b      	mov	r3, fp
   1de4c:	d1d4      	bne.n	1ddf8 <_dtoa_r+0xb58>
   1de4e:	f8dd 9010 	ldr.w	r9, [sp, #16]
   1de52:	9c06      	ldr	r4, [sp, #24]
   1de54:	4632      	mov	r2, r6
   1de56:	463b      	mov	r3, r7
   1de58:	4630      	mov	r0, r6
   1de5a:	4639      	mov	r1, r7
   1de5c:	f7fa fae6 	bl	1842c <__adddf3>
   1de60:	4606      	mov	r6, r0
   1de62:	460f      	mov	r7, r1
   1de64:	e9dd 2300 	ldrd	r2, r3, [sp]
   1de68:	f7fa ff26 	bl	18cb8 <__aeabi_dcmpgt>
   1de6c:	b960      	cbnz	r0, 1de88 <_dtoa_r+0xbe8>
   1de6e:	4630      	mov	r0, r6
   1de70:	4639      	mov	r1, r7
   1de72:	e9dd 2300 	ldrd	r2, r3, [sp]
   1de76:	f7fa fef7 	bl	18c68 <__aeabi_dcmpeq>
   1de7a:	2800      	cmp	r0, #0
   1de7c:	f000 8093 	beq.w	1dfa6 <_dtoa_r+0xd06>
   1de80:	f018 0f01 	tst.w	r8, #1
   1de84:	f000 808f 	beq.w	1dfa6 <_dtoa_r+0xd06>
   1de88:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1de8c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   1de90:	9a05      	ldr	r2, [sp, #20]
   1de92:	e005      	b.n	1dea0 <_dtoa_r+0xc00>
   1de94:	4293      	cmp	r3, r2
   1de96:	f000 808b 	beq.w	1dfb0 <_dtoa_r+0xd10>
   1de9a:	f813 8c01 	ldrb.w	r8, [r3, #-1]
   1de9e:	461d      	mov	r5, r3
   1dea0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   1dea4:	f105 33ff 	add.w	r3, r5, #4294967295
   1dea8:	d0f4      	beq.n	1de94 <_dtoa_r+0xbf4>
   1deaa:	9205      	str	r2, [sp, #20]
   1deac:	f108 0801 	add.w	r8, r8, #1
   1deb0:	9f05      	ldr	r7, [sp, #20]
   1deb2:	9505      	str	r5, [sp, #20]
   1deb4:	f883 8000 	strb.w	r8, [r3]
   1deb8:	e494      	b.n	1d7e4 <_dtoa_r+0x544>
   1deba:	4631      	mov	r1, r6
   1debc:	2205      	movs	r2, #5
   1debe:	4620      	mov	r0, r4
   1dec0:	f026 fdae 	bl	44a20 <__multadd>
   1dec4:	4601      	mov	r1, r0
   1dec6:	4606      	mov	r6, r0
   1dec8:	9809      	ldr	r0, [sp, #36]	; 0x24
   1deca:	f026 ffe5 	bl	44e98 <__mcmp>
   1dece:	2800      	cmp	r0, #0
   1ded0:	f73f ae77 	bgt.w	1dbc2 <_dtoa_r+0x922>
   1ded4:	e478      	b.n	1d7c8 <_dtoa_r+0x528>
   1ded6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1ded8:	4620      	mov	r0, r4
   1deda:	9909      	ldr	r1, [sp, #36]	; 0x24
   1dedc:	f026 ff30 	bl	44d40 <__pow5mult>
   1dee0:	9009      	str	r0, [sp, #36]	; 0x24
   1dee2:	e427      	b.n	1d734 <_dtoa_r+0x494>
   1dee4:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
   1dee8:	f04f 0a02 	mov.w	sl, #2
   1deec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1def0:	f7ff bb48 	b.w	1d584 <_dtoa_r+0x2e4>
   1def4:	9b07      	ldr	r3, [sp, #28]
   1def6:	2b00      	cmp	r3, #0
   1def8:	f43f ad49 	beq.w	1d98e <_dtoa_r+0x6ee>
   1defc:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1defe:	2d00      	cmp	r5, #0
   1df00:	f77f abe8 	ble.w	1d6d4 <_dtoa_r+0x434>
   1df04:	f109 33ff 	add.w	r3, r9, #4294967295
   1df08:	2200      	movs	r2, #0
   1df0a:	930d      	str	r3, [sp, #52]	; 0x34
   1df0c:	4b4e      	ldr	r3, [pc, #312]	; (1e048 <_dtoa_r+0xda8>)
   1df0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1df12:	f7fa fc41 	bl	18798 <__aeabi_dmul>
   1df16:	4606      	mov	r6, r0
   1df18:	460f      	mov	r7, r1
   1df1a:	f10a 0001 	add.w	r0, sl, #1
   1df1e:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   1df22:	f7fa fbcf 	bl	186c4 <__aeabi_i2d>
   1df26:	4632      	mov	r2, r6
   1df28:	463b      	mov	r3, r7
   1df2a:	f7fa fc35 	bl	18798 <__aeabi_dmul>
   1df2e:	2200      	movs	r2, #0
   1df30:	4b46      	ldr	r3, [pc, #280]	; (1e04c <_dtoa_r+0xdac>)
   1df32:	f7fa fa7b 	bl	1842c <__adddf3>
   1df36:	9515      	str	r5, [sp, #84]	; 0x54
   1df38:	4682      	mov	sl, r0
   1df3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
   1df3e:	f7ff bb42 	b.w	1d5c6 <_dtoa_r+0x326>
   1df42:	4632      	mov	r2, r6
   1df44:	990a      	ldr	r1, [sp, #40]	; 0x28
   1df46:	4620      	mov	r0, r4
   1df48:	f026 fefa 	bl	44d40 <__pow5mult>
   1df4c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   1df50:	4601      	mov	r1, r0
   1df52:	900a      	str	r0, [sp, #40]	; 0x28
   1df54:	4642      	mov	r2, r8
   1df56:	4620      	mov	r0, r4
   1df58:	f026 fe4a 	bl	44bf0 <__multiply>
   1df5c:	4606      	mov	r6, r0
   1df5e:	4641      	mov	r1, r8
   1df60:	4620      	mov	r0, r4
   1df62:	f026 fd53 	bl	44a0c <_Bfree>
   1df66:	9609      	str	r6, [sp, #36]	; 0x24
   1df68:	2d00      	cmp	r5, #0
   1df6a:	f43f abe3 	beq.w	1d734 <_dtoa_r+0x494>
   1df6e:	f7ff bbdb 	b.w	1d728 <_dtoa_r+0x488>
   1df72:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1df74:	2a00      	cmp	r2, #0
   1df76:	d059      	beq.n	1e02c <_dtoa_r+0xd8c>
   1df78:	9908      	ldr	r1, [sp, #32]
   1df7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1df7e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1df80:	460f      	mov	r7, r1
   1df82:	9a06      	ldr	r2, [sp, #24]
   1df84:	441a      	add	r2, r3
   1df86:	9206      	str	r2, [sp, #24]
   1df88:	460a      	mov	r2, r1
   1df8a:	441a      	add	r2, r3
   1df8c:	9208      	str	r2, [sp, #32]
   1df8e:	e491      	b.n	1d8b4 <_dtoa_r+0x614>
   1df90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1df92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1df94:	1af3      	subs	r3, r6, r3
   1df96:	960e      	str	r6, [sp, #56]	; 0x38
   1df98:	2600      	movs	r6, #0
   1df9a:	441a      	add	r2, r3
   1df9c:	920f      	str	r2, [sp, #60]	; 0x3c
   1df9e:	e47d      	b.n	1d89c <_dtoa_r+0x5fc>
   1dfa0:	f8dd 9010 	ldr.w	r9, [sp, #16]
   1dfa4:	9c06      	ldr	r4, [sp, #24]
   1dfa6:	9f05      	ldr	r7, [sp, #20]
   1dfa8:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1dfac:	9505      	str	r5, [sp, #20]
   1dfae:	e419      	b.n	1d7e4 <_dtoa_r+0x544>
   1dfb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1dfb2:	4611      	mov	r1, r2
   1dfb4:	9205      	str	r2, [sp, #20]
   1dfb6:	2230      	movs	r2, #48	; 0x30
   1dfb8:	3301      	adds	r3, #1
   1dfba:	700a      	strb	r2, [r1, #0]
   1dfbc:	930d      	str	r3, [sp, #52]	; 0x34
   1dfbe:	460b      	mov	r3, r1
   1dfc0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   1dfc4:	e772      	b.n	1deac <_dtoa_r+0xc0c>
   1dfc6:	f109 0201 	add.w	r2, r9, #1
   1dfca:	2331      	movs	r3, #49	; 0x31
   1dfcc:	920d      	str	r2, [sp, #52]	; 0x34
   1dfce:	9a05      	ldr	r2, [sp, #20]
   1dfd0:	7013      	strb	r3, [r2, #0]
   1dfd2:	e663      	b.n	1dc9c <_dtoa_r+0x9fc>
   1dfd4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   1dfd8:	1a9f      	subs	r7, r3, r2
   1dfda:	e46b      	b.n	1d8b4 <_dtoa_r+0x614>
   1dfdc:	d107      	bne.n	1dfee <_dtoa_r+0xd4e>
   1dfde:	f018 0f01 	tst.w	r8, #1
   1dfe2:	f47f ae4b 	bne.w	1dc7c <_dtoa_r+0x9dc>
   1dfe6:	e002      	b.n	1dfee <_dtoa_r+0xd4e>
   1dfe8:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   1dfec:	461d      	mov	r5, r3
   1dfee:	2a30      	cmp	r2, #48	; 0x30
   1dff0:	f105 33ff 	add.w	r3, r5, #4294967295
   1dff4:	d0f8      	beq.n	1dfe8 <_dtoa_r+0xd48>
   1dff6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1dffa:	e64f      	b.n	1dc9c <_dtoa_r+0x9fc>
   1dffc:	2b00      	cmp	r3, #0
   1dffe:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   1e002:	4631      	mov	r1, r6
   1e004:	9609      	str	r6, [sp, #36]	; 0x24
   1e006:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   1e00a:	4646      	mov	r6, r8
   1e00c:	f8cd a018 	str.w	sl, [sp, #24]
   1e010:	f107 0501 	add.w	r5, r7, #1
   1e014:	f8dd 8010 	ldr.w	r8, [sp, #16]
   1e018:	dc52      	bgt.n	1e0c0 <_dtoa_r+0xe20>
   1e01a:	9b06      	ldr	r3, [sp, #24]
   1e01c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1e020:	f887 8000 	strb.w	r8, [r7]
   1e024:	930a      	str	r3, [sp, #40]	; 0x28
   1e026:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1e02a:	e637      	b.n	1dc9c <_dtoa_r+0x9fc>
   1e02c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1e02e:	9908      	ldr	r1, [sp, #32]
   1e030:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1e032:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1e036:	460f      	mov	r7, r1
   1e038:	e7a3      	b.n	1df82 <_dtoa_r+0xce2>
   1e03a:	9a05      	ldr	r2, [sp, #20]
   1e03c:	e730      	b.n	1dea0 <_dtoa_r+0xc00>
   1e03e:	2300      	movs	r3, #0
   1e040:	e4f6      	b.n	1da30 <_dtoa_r+0x790>
   1e042:	bf00      	nop
   1e044:	3fe00000 	.word	0x3fe00000
   1e048:	40240000 	.word	0x40240000
   1e04c:	401c0000 	.word	0x401c0000
   1e050:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1e052:	4620      	mov	r0, r4
   1e054:	6879      	ldr	r1, [r7, #4]
   1e056:	f026 fcb3 	bl	449c0 <_Balloc>
   1e05a:	693b      	ldr	r3, [r7, #16]
   1e05c:	4605      	mov	r5, r0
   1e05e:	f107 010c 	add.w	r1, r7, #12
   1e062:	3302      	adds	r3, #2
   1e064:	300c      	adds	r0, #12
   1e066:	009a      	lsls	r2, r3, #2
   1e068:	f7fb ff22 	bl	19eb0 <memcpy>
   1e06c:	4629      	mov	r1, r5
   1e06e:	2201      	movs	r2, #1
   1e070:	4620      	mov	r0, r4
   1e072:	f026 feb5 	bl	44de0 <__lshift>
   1e076:	9006      	str	r0, [sp, #24]
   1e078:	e4fa      	b.n	1da70 <_dtoa_r+0x7d0>
   1e07a:	9609      	str	r6, [sp, #36]	; 0x24
   1e07c:	4646      	mov	r6, r8
   1e07e:	f8dd 8010 	ldr.w	r8, [sp, #16]
   1e082:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   1e086:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   1e08a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   1e08e:	f8cd a018 	str.w	sl, [sp, #24]
   1e092:	d025      	beq.n	1e0e0 <_dtoa_r+0xe40>
   1e094:	f108 0801 	add.w	r8, r8, #1
   1e098:	9b06      	ldr	r3, [sp, #24]
   1e09a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1e09e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1e0a2:	930a      	str	r3, [sp, #40]	; 0x28
   1e0a4:	f887 8000 	strb.w	r8, [r7]
   1e0a8:	e5f8      	b.n	1dc9c <_dtoa_r+0x9fc>
   1e0aa:	464a      	mov	r2, r9
   1e0ac:	4653      	mov	r3, sl
   1e0ae:	9609      	str	r6, [sp, #36]	; 0x24
   1e0b0:	4646      	mov	r6, r8
   1e0b2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   1e0b6:	4692      	mov	sl, r2
   1e0b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
   1e0bc:	930a      	str	r3, [sp, #40]	; 0x28
   1e0be:	e5cf      	b.n	1dc60 <_dtoa_r+0x9c0>
   1e0c0:	2201      	movs	r2, #1
   1e0c2:	4620      	mov	r0, r4
   1e0c4:	f026 fe8c 	bl	44de0 <__lshift>
   1e0c8:	4631      	mov	r1, r6
   1e0ca:	9009      	str	r0, [sp, #36]	; 0x24
   1e0cc:	f026 fee4 	bl	44e98 <__mcmp>
   1e0d0:	2800      	cmp	r0, #0
   1e0d2:	dd32      	ble.n	1e13a <_dtoa_r+0xe9a>
   1e0d4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   1e0d8:	d002      	beq.n	1e0e0 <_dtoa_r+0xe40>
   1e0da:	f10b 0831 	add.w	r8, fp, #49	; 0x31
   1e0de:	e79c      	b.n	1e01a <_dtoa_r+0xd7a>
   1e0e0:	2239      	movs	r2, #57	; 0x39
   1e0e2:	9b06      	ldr	r3, [sp, #24]
   1e0e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1e0e8:	703a      	strb	r2, [r7, #0]
   1e0ea:	930a      	str	r3, [sp, #40]	; 0x28
   1e0ec:	9905      	ldr	r1, [sp, #20]
   1e0ee:	e5cd      	b.n	1dc8c <_dtoa_r+0x9ec>
   1e0f0:	9609      	str	r6, [sp, #36]	; 0x24
   1e0f2:	4646      	mov	r6, r8
   1e0f4:	f8dd 8010 	ldr.w	r8, [sp, #16]
   1e0f8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   1e0fc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   1e100:	f8cd a018 	str.w	sl, [sp, #24]
   1e104:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   1e108:	46aa      	mov	sl, r5
   1e10a:	f107 0501 	add.w	r5, r7, #1
   1e10e:	d0e7      	beq.n	1e0e0 <_dtoa_r+0xe40>
   1e110:	f1ba 0f00 	cmp.w	sl, #0
   1e114:	dce1      	bgt.n	1e0da <_dtoa_r+0xe3a>
   1e116:	e780      	b.n	1e01a <_dtoa_r+0xd7a>
   1e118:	f04f 0a02 	mov.w	sl, #2
   1e11c:	f7ff ba32 	b.w	1d584 <_dtoa_r+0x2e4>
   1e120:	2300      	movs	r3, #0
   1e122:	990a      	ldr	r1, [sp, #40]	; 0x28
   1e124:	220a      	movs	r2, #10
   1e126:	4620      	mov	r0, r4
   1e128:	f026 fc7a 	bl	44a20 <__multadd>
   1e12c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e12e:	900a      	str	r0, [sp, #40]	; 0x28
   1e130:	9307      	str	r3, [sp, #28]
   1e132:	2d00      	cmp	r5, #0
   1e134:	f47f ab44 	bne.w	1d7c0 <_dtoa_r+0x520>
   1e138:	e48c      	b.n	1da54 <_dtoa_r+0x7b4>
   1e13a:	f47f af6e 	bne.w	1e01a <_dtoa_r+0xd7a>
   1e13e:	f018 0f01 	tst.w	r8, #1
   1e142:	f43f af6a 	beq.w	1e01a <_dtoa_r+0xd7a>
   1e146:	e7c5      	b.n	1e0d4 <_dtoa_r+0xe34>
   1e148:	9f05      	ldr	r7, [sp, #20]
   1e14a:	9505      	str	r5, [sp, #20]
   1e14c:	f7ff bb46 	b.w	1d7dc <_dtoa_r+0x53c>
   1e150:	f1ba 0f00 	cmp.w	sl, #0
   1e154:	f43f ac5b 	beq.w	1da0e <_dtoa_r+0x76e>
   1e158:	f7ff baf9 	b.w	1d74e <_dtoa_r+0x4ae>
   1e15c:	f43f ab0b 	beq.w	1d776 <_dtoa_r+0x4d6>
   1e160:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   1e164:	e43e      	b.n	1d9e4 <_dtoa_r+0x744>
   1e166:	bf00      	nop

0001e168 <sin>:
   1e168:	ec51 0b10 	vmov	r0, r1, d0
   1e16c:	4a2c      	ldr	r2, [pc, #176]	; (1e220 <sin+0xb8>)
   1e16e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1e172:	4293      	cmp	r3, r2
   1e174:	b500      	push	{lr}
   1e176:	b085      	sub	sp, #20
   1e178:	dd27      	ble.n	1e1ca <sin+0x62>
   1e17a:	4a2a      	ldr	r2, [pc, #168]	; (1e224 <sin+0xbc>)
   1e17c:	4293      	cmp	r3, r2
   1e17e:	dd09      	ble.n	1e194 <sin+0x2c>
   1e180:	ee10 2a10 	vmov	r2, s0
   1e184:	460b      	mov	r3, r1
   1e186:	f7fa f94f 	bl	18428 <__aeabi_dsub>
   1e18a:	ec41 0b10 	vmov	d0, r0, r1
   1e18e:	b005      	add	sp, #20
   1e190:	f85d fb04 	ldr.w	pc, [sp], #4
   1e194:	4668      	mov	r0, sp
   1e196:	f000 f847 	bl	1e228 <__ieee754_rem_pio2>
   1e19a:	f000 0003 	and.w	r0, r0, #3
   1e19e:	2801      	cmp	r0, #1
   1e1a0:	d01f      	beq.n	1e1e2 <sin+0x7a>
   1e1a2:	2802      	cmp	r0, #2
   1e1a4:	d030      	beq.n	1e208 <sin+0xa0>
   1e1a6:	b328      	cbz	r0, 1e1f4 <sin+0x8c>
   1e1a8:	ed9d 1b02 	vldr	d1, [sp, #8]
   1e1ac:	ed9d 0b00 	vldr	d0, [sp]
   1e1b0:	f000 fa66 	bl	1e680 <__kernel_cos>
   1e1b4:	ee10 0a10 	vmov	r0, s0
   1e1b8:	ec53 2b10 	vmov	r2, r3, d0
   1e1bc:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   1e1c0:	ec41 0b10 	vmov	d0, r0, r1
   1e1c4:	b005      	add	sp, #20
   1e1c6:	f85d fb04 	ldr.w	pc, [sp], #4
   1e1ca:	2000      	movs	r0, #0
   1e1cc:	ed9f 1b12 	vldr	d1, [pc, #72]	; 1e218 <sin+0xb0>
   1e1d0:	f000 ffba 	bl	1f148 <__kernel_sin>
   1e1d4:	ec51 0b10 	vmov	r0, r1, d0
   1e1d8:	ec41 0b10 	vmov	d0, r0, r1
   1e1dc:	b005      	add	sp, #20
   1e1de:	f85d fb04 	ldr.w	pc, [sp], #4
   1e1e2:	ed9d 1b02 	vldr	d1, [sp, #8]
   1e1e6:	ed9d 0b00 	vldr	d0, [sp]
   1e1ea:	f000 fa49 	bl	1e680 <__kernel_cos>
   1e1ee:	ec51 0b10 	vmov	r0, r1, d0
   1e1f2:	e7ca      	b.n	1e18a <sin+0x22>
   1e1f4:	2001      	movs	r0, #1
   1e1f6:	ed9d 1b02 	vldr	d1, [sp, #8]
   1e1fa:	ed9d 0b00 	vldr	d0, [sp]
   1e1fe:	f000 ffa3 	bl	1f148 <__kernel_sin>
   1e202:	ec51 0b10 	vmov	r0, r1, d0
   1e206:	e7c0      	b.n	1e18a <sin+0x22>
   1e208:	2001      	movs	r0, #1
   1e20a:	ed9d 1b02 	vldr	d1, [sp, #8]
   1e20e:	ed9d 0b00 	vldr	d0, [sp]
   1e212:	f000 ff99 	bl	1f148 <__kernel_sin>
   1e216:	e7cd      	b.n	1e1b4 <sin+0x4c>
	...
   1e220:	3fe921fb 	.word	0x3fe921fb
   1e224:	7fefffff 	.word	0x7fefffff

0001e228 <__ieee754_rem_pio2>:
   1e228:	ec53 2b10 	vmov	r2, r3, d0
   1e22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e230:	49bf      	ldr	r1, [pc, #764]	; (1e530 <__ieee754_rem_pio2+0x308>)
   1e232:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   1e236:	b090      	sub	sp, #64	; 0x40
   1e238:	428f      	cmp	r7, r1
   1e23a:	f340 8093 	ble.w	1e364 <__ieee754_rem_pio2+0x13c>
   1e23e:	49bd      	ldr	r1, [pc, #756]	; (1e534 <__ieee754_rem_pio2+0x30c>)
   1e240:	461c      	mov	r4, r3
   1e242:	4682      	mov	sl, r0
   1e244:	428f      	cmp	r7, r1
   1e246:	dc29      	bgt.n	1e29c <__ieee754_rem_pio2+0x74>
   1e248:	2c00      	cmp	r4, #0
   1e24a:	4619      	mov	r1, r3
   1e24c:	ee10 0a10 	vmov	r0, s0
   1e250:	a3ad      	add	r3, pc, #692	; (adr r3, 1e508 <__ieee754_rem_pio2+0x2e0>)
   1e252:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e256:	f340 8090 	ble.w	1e37a <__ieee754_rem_pio2+0x152>
   1e25a:	f7fa f8e5 	bl	18428 <__aeabi_dsub>
   1e25e:	4bb6      	ldr	r3, [pc, #728]	; (1e538 <__ieee754_rem_pio2+0x310>)
   1e260:	4680      	mov	r8, r0
   1e262:	4689      	mov	r9, r1
   1e264:	429f      	cmp	r7, r3
   1e266:	f000 8173 	beq.w	1e550 <__ieee754_rem_pio2+0x328>
   1e26a:	2501      	movs	r5, #1
   1e26c:	a3a8      	add	r3, pc, #672	; (adr r3, 1e510 <__ieee754_rem_pio2+0x2e8>)
   1e26e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e272:	f7fa f8d9 	bl	18428 <__aeabi_dsub>
   1e276:	4602      	mov	r2, r0
   1e278:	460b      	mov	r3, r1
   1e27a:	4640      	mov	r0, r8
   1e27c:	4649      	mov	r1, r9
   1e27e:	e9ca 2300 	strd	r2, r3, [sl]
   1e282:	f7fa f8d1 	bl	18428 <__aeabi_dsub>
   1e286:	a3a2      	add	r3, pc, #648	; (adr r3, 1e510 <__ieee754_rem_pio2+0x2e8>)
   1e288:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e28c:	f7fa f8cc 	bl	18428 <__aeabi_dsub>
   1e290:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1e294:	4628      	mov	r0, r5
   1e296:	b010      	add	sp, #64	; 0x40
   1e298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e29c:	49a7      	ldr	r1, [pc, #668]	; (1e53c <__ieee754_rem_pio2+0x314>)
   1e29e:	428f      	cmp	r7, r1
   1e2a0:	f340 808a 	ble.w	1e3b8 <__ieee754_rem_pio2+0x190>
   1e2a4:	49a6      	ldr	r1, [pc, #664]	; (1e540 <__ieee754_rem_pio2+0x318>)
   1e2a6:	428f      	cmp	r7, r1
   1e2a8:	f300 8120 	bgt.w	1e4ec <__ieee754_rem_pio2+0x2c4>
   1e2ac:	153d      	asrs	r5, r7, #20
   1e2ae:	ee10 0a10 	vmov	r0, s0
   1e2b2:	4616      	mov	r6, r2
   1e2b4:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   1e2b8:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
   1e2bc:	460f      	mov	r7, r1
   1e2be:	f7fa fd05 	bl	18ccc <__aeabi_d2iz>
   1e2c2:	f7fa f9ff 	bl	186c4 <__aeabi_i2d>
   1e2c6:	4680      	mov	r8, r0
   1e2c8:	4689      	mov	r9, r1
   1e2ca:	4602      	mov	r2, r0
   1e2cc:	460b      	mov	r3, r1
   1e2ce:	4630      	mov	r0, r6
   1e2d0:	4639      	mov	r1, r7
   1e2d2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   1e2d6:	f7fa f8a7 	bl	18428 <__aeabi_dsub>
   1e2da:	2200      	movs	r2, #0
   1e2dc:	4b99      	ldr	r3, [pc, #612]	; (1e544 <__ieee754_rem_pio2+0x31c>)
   1e2de:	f7fa fa5b 	bl	18798 <__aeabi_dmul>
   1e2e2:	4689      	mov	r9, r1
   1e2e4:	4680      	mov	r8, r0
   1e2e6:	f7fa fcf1 	bl	18ccc <__aeabi_d2iz>
   1e2ea:	f7fa f9eb 	bl	186c4 <__aeabi_i2d>
   1e2ee:	4606      	mov	r6, r0
   1e2f0:	460f      	mov	r7, r1
   1e2f2:	4602      	mov	r2, r0
   1e2f4:	460b      	mov	r3, r1
   1e2f6:	4640      	mov	r0, r8
   1e2f8:	4649      	mov	r1, r9
   1e2fa:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
   1e2fe:	f7fa f893 	bl	18428 <__aeabi_dsub>
   1e302:	2200      	movs	r2, #0
   1e304:	4b8f      	ldr	r3, [pc, #572]	; (1e544 <__ieee754_rem_pio2+0x31c>)
   1e306:	f7fa fa47 	bl	18798 <__aeabi_dmul>
   1e30a:	2200      	movs	r2, #0
   1e30c:	2300      	movs	r3, #0
   1e30e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   1e312:	f7fa fca9 	bl	18c68 <__aeabi_dcmpeq>
   1e316:	2800      	cmp	r0, #0
   1e318:	f000 8165 	beq.w	1e5e6 <__ieee754_rem_pio2+0x3be>
   1e31c:	2300      	movs	r3, #0
   1e31e:	4630      	mov	r0, r6
   1e320:	4639      	mov	r1, r7
   1e322:	2200      	movs	r2, #0
   1e324:	f7fa fca0 	bl	18c68 <__aeabi_dcmpeq>
   1e328:	2800      	cmp	r0, #0
   1e32a:	bf14      	ite	ne
   1e32c:	2301      	movne	r3, #1
   1e32e:	2302      	moveq	r3, #2
   1e330:	4985      	ldr	r1, [pc, #532]	; (1e548 <__ieee754_rem_pio2+0x320>)
   1e332:	2002      	movs	r0, #2
   1e334:	462a      	mov	r2, r5
   1e336:	9101      	str	r1, [sp, #4]
   1e338:	4651      	mov	r1, sl
   1e33a:	9000      	str	r0, [sp, #0]
   1e33c:	a80a      	add	r0, sp, #40	; 0x28
   1e33e:	f000 fae3 	bl	1e908 <__kernel_rem_pio2>
   1e342:	2c00      	cmp	r4, #0
   1e344:	4605      	mov	r5, r0
   1e346:	da14      	bge.n	1e372 <__ieee754_rem_pio2+0x14a>
   1e348:	f8da 2004 	ldr.w	r2, [sl, #4]
   1e34c:	4245      	negs	r5, r0
   1e34e:	f8da 300c 	ldr.w	r3, [sl, #12]
   1e352:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   1e356:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1e35a:	f8ca 2004 	str.w	r2, [sl, #4]
   1e35e:	f8ca 300c 	str.w	r3, [sl, #12]
   1e362:	e006      	b.n	1e372 <__ieee754_rem_pio2+0x14a>
   1e364:	2600      	movs	r6, #0
   1e366:	2700      	movs	r7, #0
   1e368:	2500      	movs	r5, #0
   1e36a:	ed80 0b00 	vstr	d0, [r0]
   1e36e:	e9c0 6702 	strd	r6, r7, [r0, #8]
   1e372:	4628      	mov	r0, r5
   1e374:	b010      	add	sp, #64	; 0x40
   1e376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e37a:	f7fa f857 	bl	1842c <__adddf3>
   1e37e:	4b6e      	ldr	r3, [pc, #440]	; (1e538 <__ieee754_rem_pio2+0x310>)
   1e380:	4680      	mov	r8, r0
   1e382:	4689      	mov	r9, r1
   1e384:	429f      	cmp	r7, r3
   1e386:	f000 8110 	beq.w	1e5aa <__ieee754_rem_pio2+0x382>
   1e38a:	f04f 35ff 	mov.w	r5, #4294967295
   1e38e:	a360      	add	r3, pc, #384	; (adr r3, 1e510 <__ieee754_rem_pio2+0x2e8>)
   1e390:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e394:	f7fa f84a 	bl	1842c <__adddf3>
   1e398:	4602      	mov	r2, r0
   1e39a:	460b      	mov	r3, r1
   1e39c:	4640      	mov	r0, r8
   1e39e:	4649      	mov	r1, r9
   1e3a0:	e9ca 2300 	strd	r2, r3, [sl]
   1e3a4:	f7fa f840 	bl	18428 <__aeabi_dsub>
   1e3a8:	a359      	add	r3, pc, #356	; (adr r3, 1e510 <__ieee754_rem_pio2+0x2e8>)
   1e3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e3ae:	f7fa f83d 	bl	1842c <__adddf3>
   1e3b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1e3b6:	e7dc      	b.n	1e372 <__ieee754_rem_pio2+0x14a>
   1e3b8:	f027 fcbc 	bl	45d34 <fabs>
   1e3bc:	ee10 0a10 	vmov	r0, s0
   1e3c0:	ec59 8b10 	vmov	r8, r9, d0
   1e3c4:	a354      	add	r3, pc, #336	; (adr r3, 1e518 <__ieee754_rem_pio2+0x2f0>)
   1e3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e3ca:	4649      	mov	r1, r9
   1e3cc:	f7fa f9e4 	bl	18798 <__aeabi_dmul>
   1e3d0:	2200      	movs	r2, #0
   1e3d2:	4b5e      	ldr	r3, [pc, #376]	; (1e54c <__ieee754_rem_pio2+0x324>)
   1e3d4:	f7fa f82a 	bl	1842c <__adddf3>
   1e3d8:	f7fa fc78 	bl	18ccc <__aeabi_d2iz>
   1e3dc:	4605      	mov	r5, r0
   1e3de:	f7fa f971 	bl	186c4 <__aeabi_i2d>
   1e3e2:	a349      	add	r3, pc, #292	; (adr r3, 1e508 <__ieee754_rem_pio2+0x2e0>)
   1e3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e3e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1e3ec:	f7fa f9d4 	bl	18798 <__aeabi_dmul>
   1e3f0:	4602      	mov	r2, r0
   1e3f2:	460b      	mov	r3, r1
   1e3f4:	4640      	mov	r0, r8
   1e3f6:	4649      	mov	r1, r9
   1e3f8:	f7fa f816 	bl	18428 <__aeabi_dsub>
   1e3fc:	4680      	mov	r8, r0
   1e3fe:	4689      	mov	r9, r1
   1e400:	a343      	add	r3, pc, #268	; (adr r3, 1e510 <__ieee754_rem_pio2+0x2e8>)
   1e402:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e406:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1e40a:	e9cd 8902 	strd	r8, r9, [sp, #8]
   1e40e:	f7fa f9c3 	bl	18798 <__aeabi_dmul>
   1e412:	2d1f      	cmp	r5, #31
   1e414:	4602      	mov	r2, r0
   1e416:	460b      	mov	r3, r1
   1e418:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1e41c:	f340 80b5 	ble.w	1e58a <__ieee754_rem_pio2+0x362>
   1e420:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e428:	f7f9 fffe 	bl	18428 <__aeabi_dsub>
   1e42c:	4680      	mov	r8, r0
   1e42e:	4689      	mov	r9, r1
   1e430:	153f      	asrs	r7, r7, #20
   1e432:	f3c9 530a 	ubfx	r3, r9, #20, #11
   1e436:	1afb      	subs	r3, r7, r3
   1e438:	2b10      	cmp	r3, #16
   1e43a:	f340 80b3 	ble.w	1e5a4 <__ieee754_rem_pio2+0x37c>
   1e43e:	a338      	add	r3, pc, #224	; (adr r3, 1e520 <__ieee754_rem_pio2+0x2f8>)
   1e440:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e444:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1e448:	f7fa f9a6 	bl	18798 <__aeabi_dmul>
   1e44c:	4680      	mov	r8, r0
   1e44e:	4689      	mov	r9, r1
   1e450:	4602      	mov	r2, r0
   1e452:	460b      	mov	r3, r1
   1e454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e458:	f7f9 ffe6 	bl	18428 <__aeabi_dsub>
   1e45c:	4602      	mov	r2, r0
   1e45e:	460b      	mov	r3, r1
   1e460:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e464:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1e468:	f7f9 ffde 	bl	18428 <__aeabi_dsub>
   1e46c:	4642      	mov	r2, r8
   1e46e:	464b      	mov	r3, r9
   1e470:	f7f9 ffda 	bl	18428 <__aeabi_dsub>
   1e474:	4680      	mov	r8, r0
   1e476:	4689      	mov	r9, r1
   1e478:	a32b      	add	r3, pc, #172	; (adr r3, 1e528 <__ieee754_rem_pio2+0x300>)
   1e47a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e47e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1e482:	f7fa f989 	bl	18798 <__aeabi_dmul>
   1e486:	4642      	mov	r2, r8
   1e488:	464b      	mov	r3, r9
   1e48a:	f7f9 ffcd 	bl	18428 <__aeabi_dsub>
   1e48e:	460b      	mov	r3, r1
   1e490:	4602      	mov	r2, r0
   1e492:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1e496:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1e49a:	f7f9 ffc5 	bl	18428 <__aeabi_dsub>
   1e49e:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1e4a2:	4680      	mov	r8, r0
   1e4a4:	4689      	mov	r9, r1
   1e4a6:	1aff      	subs	r7, r7, r3
   1e4a8:	2f31      	cmp	r7, #49	; 0x31
   1e4aa:	f300 809e 	bgt.w	1e5ea <__ieee754_rem_pio2+0x3c2>
   1e4ae:	ed9d 7b08 	vldr	d7, [sp, #32]
   1e4b2:	e9ca 8900 	strd	r8, r9, [sl]
   1e4b6:	ed8d 7b02 	vstr	d7, [sp, #8]
   1e4ba:	4642      	mov	r2, r8
   1e4bc:	464b      	mov	r3, r9
   1e4be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e4c2:	f7f9 ffb1 	bl	18428 <__aeabi_dsub>
   1e4c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e4ca:	f7f9 ffad 	bl	18428 <__aeabi_dsub>
   1e4ce:	2c00      	cmp	r4, #0
   1e4d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1e4d4:	f6bf af4d 	bge.w	1e372 <__ieee754_rem_pio2+0x14a>
   1e4d8:	f109 4400 	add.w	r4, r9, #2147483648	; 0x80000000
   1e4dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1e4e0:	426d      	negs	r5, r5
   1e4e2:	e9ca 8400 	strd	r8, r4, [sl]
   1e4e6:	e9ca 0302 	strd	r0, r3, [sl, #8]
   1e4ea:	e742      	b.n	1e372 <__ieee754_rem_pio2+0x14a>
   1e4ec:	ee10 0a10 	vmov	r0, s0
   1e4f0:	4619      	mov	r1, r3
   1e4f2:	f7f9 ff99 	bl	18428 <__aeabi_dsub>
   1e4f6:	2500      	movs	r5, #0
   1e4f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1e4fc:	e9ca 0100 	strd	r0, r1, [sl]
   1e500:	e737      	b.n	1e372 <__ieee754_rem_pio2+0x14a>
   1e502:	bf00      	nop
   1e504:	f3af 8000 	nop.w
   1e508:	54400000 	.word	0x54400000
   1e50c:	3ff921fb 	.word	0x3ff921fb
   1e510:	1a626331 	.word	0x1a626331
   1e514:	3dd0b461 	.word	0x3dd0b461
   1e518:	6dc9c883 	.word	0x6dc9c883
   1e51c:	3fe45f30 	.word	0x3fe45f30
   1e520:	1a600000 	.word	0x1a600000
   1e524:	3dd0b461 	.word	0x3dd0b461
   1e528:	2e037073 	.word	0x2e037073
   1e52c:	3ba3198a 	.word	0x3ba3198a
   1e530:	3fe921fb 	.word	0x3fe921fb
   1e534:	4002d97b 	.word	0x4002d97b
   1e538:	3ff921fb 	.word	0x3ff921fb
   1e53c:	413921fb 	.word	0x413921fb
   1e540:	7fefffff 	.word	0x7fefffff
   1e544:	41700000 	.word	0x41700000
   1e548:	0004b17c 	.word	0x0004b17c
   1e54c:	3fe00000 	.word	0x3fe00000
   1e550:	a341      	add	r3, pc, #260	; (adr r3, 1e658 <__ieee754_rem_pio2+0x430>)
   1e552:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e556:	f7f9 ff67 	bl	18428 <__aeabi_dsub>
   1e55a:	460d      	mov	r5, r1
   1e55c:	4604      	mov	r4, r0
   1e55e:	a340      	add	r3, pc, #256	; (adr r3, 1e660 <__ieee754_rem_pio2+0x438>)
   1e560:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e564:	f7f9 ff60 	bl	18428 <__aeabi_dsub>
   1e568:	4602      	mov	r2, r0
   1e56a:	460b      	mov	r3, r1
   1e56c:	4620      	mov	r0, r4
   1e56e:	4629      	mov	r1, r5
   1e570:	2501      	movs	r5, #1
   1e572:	e9ca 2300 	strd	r2, r3, [sl]
   1e576:	f7f9 ff57 	bl	18428 <__aeabi_dsub>
   1e57a:	a339      	add	r3, pc, #228	; (adr r3, 1e660 <__ieee754_rem_pio2+0x438>)
   1e57c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e580:	f7f9 ff52 	bl	18428 <__aeabi_dsub>
   1e584:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1e588:	e6f3      	b.n	1e372 <__ieee754_rem_pio2+0x14a>
   1e58a:	4640      	mov	r0, r8
   1e58c:	4649      	mov	r1, r9
   1e58e:	f7f9 ff4b 	bl	18428 <__aeabi_dsub>
   1e592:	4b39      	ldr	r3, [pc, #228]	; (1e678 <__ieee754_rem_pio2+0x450>)
   1e594:	1e6a      	subs	r2, r5, #1
   1e596:	4680      	mov	r8, r0
   1e598:	4689      	mov	r9, r1
   1e59a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1e59e:	42bb      	cmp	r3, r7
   1e5a0:	f43f af46 	beq.w	1e430 <__ieee754_rem_pio2+0x208>
   1e5a4:	e9ca 8900 	strd	r8, r9, [sl]
   1e5a8:	e787      	b.n	1e4ba <__ieee754_rem_pio2+0x292>
   1e5aa:	a32b      	add	r3, pc, #172	; (adr r3, 1e658 <__ieee754_rem_pio2+0x430>)
   1e5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e5b0:	f7f9 ff3c 	bl	1842c <__adddf3>
   1e5b4:	460d      	mov	r5, r1
   1e5b6:	4604      	mov	r4, r0
   1e5b8:	a329      	add	r3, pc, #164	; (adr r3, 1e660 <__ieee754_rem_pio2+0x438>)
   1e5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e5be:	f7f9 ff35 	bl	1842c <__adddf3>
   1e5c2:	4602      	mov	r2, r0
   1e5c4:	460b      	mov	r3, r1
   1e5c6:	4620      	mov	r0, r4
   1e5c8:	4629      	mov	r1, r5
   1e5ca:	f04f 35ff 	mov.w	r5, #4294967295
   1e5ce:	e9ca 2300 	strd	r2, r3, [sl]
   1e5d2:	f7f9 ff29 	bl	18428 <__aeabi_dsub>
   1e5d6:	a322      	add	r3, pc, #136	; (adr r3, 1e660 <__ieee754_rem_pio2+0x438>)
   1e5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e5dc:	f7f9 ff26 	bl	1842c <__adddf3>
   1e5e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1e5e4:	e6c5      	b.n	1e372 <__ieee754_rem_pio2+0x14a>
   1e5e6:	2303      	movs	r3, #3
   1e5e8:	e6a2      	b.n	1e330 <__ieee754_rem_pio2+0x108>
   1e5ea:	a31f      	add	r3, pc, #124	; (adr r3, 1e668 <__ieee754_rem_pio2+0x440>)
   1e5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e5f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1e5f4:	f7fa f8d0 	bl	18798 <__aeabi_dmul>
   1e5f8:	4606      	mov	r6, r0
   1e5fa:	460f      	mov	r7, r1
   1e5fc:	4602      	mov	r2, r0
   1e5fe:	460b      	mov	r3, r1
   1e600:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1e604:	f7f9 ff10 	bl	18428 <__aeabi_dsub>
   1e608:	4680      	mov	r8, r0
   1e60a:	4689      	mov	r9, r1
   1e60c:	4602      	mov	r2, r0
   1e60e:	460b      	mov	r3, r1
   1e610:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1e614:	e9cd 8902 	strd	r8, r9, [sp, #8]
   1e618:	f7f9 ff06 	bl	18428 <__aeabi_dsub>
   1e61c:	4632      	mov	r2, r6
   1e61e:	463b      	mov	r3, r7
   1e620:	f7f9 ff02 	bl	18428 <__aeabi_dsub>
   1e624:	4606      	mov	r6, r0
   1e626:	460f      	mov	r7, r1
   1e628:	a311      	add	r3, pc, #68	; (adr r3, 1e670 <__ieee754_rem_pio2+0x448>)
   1e62a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e62e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1e632:	f7fa f8b1 	bl	18798 <__aeabi_dmul>
   1e636:	4632      	mov	r2, r6
   1e638:	463b      	mov	r3, r7
   1e63a:	f7f9 fef5 	bl	18428 <__aeabi_dsub>
   1e63e:	4602      	mov	r2, r0
   1e640:	460b      	mov	r3, r1
   1e642:	4640      	mov	r0, r8
   1e644:	4649      	mov	r1, r9
   1e646:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1e64a:	f7f9 feed 	bl	18428 <__aeabi_dsub>
   1e64e:	4680      	mov	r8, r0
   1e650:	4689      	mov	r9, r1
   1e652:	e7a7      	b.n	1e5a4 <__ieee754_rem_pio2+0x37c>
   1e654:	f3af 8000 	nop.w
   1e658:	1a600000 	.word	0x1a600000
   1e65c:	3dd0b461 	.word	0x3dd0b461
   1e660:	2e037073 	.word	0x2e037073
   1e664:	3ba3198a 	.word	0x3ba3198a
   1e668:	2e000000 	.word	0x2e000000
   1e66c:	3ba3198a 	.word	0x3ba3198a
   1e670:	252049c1 	.word	0x252049c1
   1e674:	397b839a 	.word	0x397b839a
   1e678:	0004b0fc 	.word	0x0004b0fc
   1e67c:	00000000 	.word	0x00000000

0001e680 <__kernel_cos>:
   1e680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e684:	ec57 6b10 	vmov	r6, r7, d0
   1e688:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   1e68c:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   1e690:	ed2d 8b02 	vpush	{d8}
   1e694:	eeb0 8a41 	vmov.f32	s16, s2
   1e698:	eef0 8a61 	vmov.f32	s17, s3
   1e69c:	b083      	sub	sp, #12
   1e69e:	da72      	bge.n	1e786 <__kernel_cos+0x106>
   1e6a0:	ee10 0a10 	vmov	r0, s0
   1e6a4:	4639      	mov	r1, r7
   1e6a6:	f7fa fb11 	bl	18ccc <__aeabi_d2iz>
   1e6aa:	2800      	cmp	r0, #0
   1e6ac:	f000 80ed 	beq.w	1e88a <__kernel_cos+0x20a>
   1e6b0:	4632      	mov	r2, r6
   1e6b2:	463b      	mov	r3, r7
   1e6b4:	4630      	mov	r0, r6
   1e6b6:	4639      	mov	r1, r7
   1e6b8:	f7fa f86e 	bl	18798 <__aeabi_dmul>
   1e6bc:	4604      	mov	r4, r0
   1e6be:	460d      	mov	r5, r1
   1e6c0:	a37b      	add	r3, pc, #492	; (adr r3, 1e8b0 <__kernel_cos+0x230>)
   1e6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e6c6:	f7fa f867 	bl	18798 <__aeabi_dmul>
   1e6ca:	a37b      	add	r3, pc, #492	; (adr r3, 1e8b8 <__kernel_cos+0x238>)
   1e6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e6d0:	f7f9 feac 	bl	1842c <__adddf3>
   1e6d4:	4622      	mov	r2, r4
   1e6d6:	462b      	mov	r3, r5
   1e6d8:	f7fa f85e 	bl	18798 <__aeabi_dmul>
   1e6dc:	a378      	add	r3, pc, #480	; (adr r3, 1e8c0 <__kernel_cos+0x240>)
   1e6de:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e6e2:	f7f9 fea1 	bl	18428 <__aeabi_dsub>
   1e6e6:	4622      	mov	r2, r4
   1e6e8:	462b      	mov	r3, r5
   1e6ea:	f7fa f855 	bl	18798 <__aeabi_dmul>
   1e6ee:	a376      	add	r3, pc, #472	; (adr r3, 1e8c8 <__kernel_cos+0x248>)
   1e6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e6f4:	f7f9 fe9a 	bl	1842c <__adddf3>
   1e6f8:	4622      	mov	r2, r4
   1e6fa:	462b      	mov	r3, r5
   1e6fc:	f7fa f84c 	bl	18798 <__aeabi_dmul>
   1e700:	a373      	add	r3, pc, #460	; (adr r3, 1e8d0 <__kernel_cos+0x250>)
   1e702:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e706:	f7f9 fe8f 	bl	18428 <__aeabi_dsub>
   1e70a:	4622      	mov	r2, r4
   1e70c:	462b      	mov	r3, r5
   1e70e:	f7fa f843 	bl	18798 <__aeabi_dmul>
   1e712:	a371      	add	r3, pc, #452	; (adr r3, 1e8d8 <__kernel_cos+0x258>)
   1e714:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e718:	f7f9 fe88 	bl	1842c <__adddf3>
   1e71c:	4622      	mov	r2, r4
   1e71e:	462b      	mov	r3, r5
   1e720:	f7fa f83a 	bl	18798 <__aeabi_dmul>
   1e724:	4682      	mov	sl, r0
   1e726:	468b      	mov	fp, r1
   1e728:	2200      	movs	r2, #0
   1e72a:	4b71      	ldr	r3, [pc, #452]	; (1e8f0 <__kernel_cos+0x270>)
   1e72c:	4620      	mov	r0, r4
   1e72e:	4629      	mov	r1, r5
   1e730:	f7fa f832 	bl	18798 <__aeabi_dmul>
   1e734:	4652      	mov	r2, sl
   1e736:	4680      	mov	r8, r0
   1e738:	4689      	mov	r9, r1
   1e73a:	465b      	mov	r3, fp
   1e73c:	4620      	mov	r0, r4
   1e73e:	4629      	mov	r1, r5
   1e740:	f7fa f82a 	bl	18798 <__aeabi_dmul>
   1e744:	4604      	mov	r4, r0
   1e746:	460d      	mov	r5, r1
   1e748:	4630      	mov	r0, r6
   1e74a:	4639      	mov	r1, r7
   1e74c:	ec53 2b18 	vmov	r2, r3, d8
   1e750:	f7fa f822 	bl	18798 <__aeabi_dmul>
   1e754:	4602      	mov	r2, r0
   1e756:	460b      	mov	r3, r1
   1e758:	4620      	mov	r0, r4
   1e75a:	4629      	mov	r1, r5
   1e75c:	f7f9 fe64 	bl	18428 <__aeabi_dsub>
   1e760:	4602      	mov	r2, r0
   1e762:	460b      	mov	r3, r1
   1e764:	4640      	mov	r0, r8
   1e766:	4649      	mov	r1, r9
   1e768:	f7f9 fe5e 	bl	18428 <__aeabi_dsub>
   1e76c:	4602      	mov	r2, r0
   1e76e:	460b      	mov	r3, r1
   1e770:	2000      	movs	r0, #0
   1e772:	4960      	ldr	r1, [pc, #384]	; (1e8f4 <__kernel_cos+0x274>)
   1e774:	f7f9 fe58 	bl	18428 <__aeabi_dsub>
   1e778:	ec41 0b10 	vmov	d0, r0, r1
   1e77c:	b003      	add	sp, #12
   1e77e:	ecbd 8b02 	vpop	{d8}
   1e782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e786:	ee10 2a10 	vmov	r2, s0
   1e78a:	ee10 0a10 	vmov	r0, s0
   1e78e:	463b      	mov	r3, r7
   1e790:	4639      	mov	r1, r7
   1e792:	f7fa f801 	bl	18798 <__aeabi_dmul>
   1e796:	4604      	mov	r4, r0
   1e798:	460d      	mov	r5, r1
   1e79a:	a345      	add	r3, pc, #276	; (adr r3, 1e8b0 <__kernel_cos+0x230>)
   1e79c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7a0:	f7f9 fffa 	bl	18798 <__aeabi_dmul>
   1e7a4:	a344      	add	r3, pc, #272	; (adr r3, 1e8b8 <__kernel_cos+0x238>)
   1e7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7aa:	f7f9 fe3f 	bl	1842c <__adddf3>
   1e7ae:	4622      	mov	r2, r4
   1e7b0:	462b      	mov	r3, r5
   1e7b2:	f7f9 fff1 	bl	18798 <__aeabi_dmul>
   1e7b6:	a342      	add	r3, pc, #264	; (adr r3, 1e8c0 <__kernel_cos+0x240>)
   1e7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7bc:	f7f9 fe34 	bl	18428 <__aeabi_dsub>
   1e7c0:	4622      	mov	r2, r4
   1e7c2:	462b      	mov	r3, r5
   1e7c4:	f7f9 ffe8 	bl	18798 <__aeabi_dmul>
   1e7c8:	a33f      	add	r3, pc, #252	; (adr r3, 1e8c8 <__kernel_cos+0x248>)
   1e7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7ce:	f7f9 fe2d 	bl	1842c <__adddf3>
   1e7d2:	4622      	mov	r2, r4
   1e7d4:	462b      	mov	r3, r5
   1e7d6:	f7f9 ffdf 	bl	18798 <__aeabi_dmul>
   1e7da:	a33d      	add	r3, pc, #244	; (adr r3, 1e8d0 <__kernel_cos+0x250>)
   1e7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7e0:	f7f9 fe22 	bl	18428 <__aeabi_dsub>
   1e7e4:	4622      	mov	r2, r4
   1e7e6:	462b      	mov	r3, r5
   1e7e8:	f7f9 ffd6 	bl	18798 <__aeabi_dmul>
   1e7ec:	a33a      	add	r3, pc, #232	; (adr r3, 1e8d8 <__kernel_cos+0x258>)
   1e7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7f2:	f7f9 fe1b 	bl	1842c <__adddf3>
   1e7f6:	462b      	mov	r3, r5
   1e7f8:	4622      	mov	r2, r4
   1e7fa:	f7f9 ffcd 	bl	18798 <__aeabi_dmul>
   1e7fe:	4b3e      	ldr	r3, [pc, #248]	; (1e8f8 <__kernel_cos+0x278>)
   1e800:	4682      	mov	sl, r0
   1e802:	468b      	mov	fp, r1
   1e804:	4599      	cmp	r9, r3
   1e806:	dd8f      	ble.n	1e728 <__kernel_cos+0xa8>
   1e808:	4b3c      	ldr	r3, [pc, #240]	; (1e8fc <__kernel_cos+0x27c>)
   1e80a:	4599      	cmp	r9, r3
   1e80c:	dc44      	bgt.n	1e898 <__kernel_cos+0x218>
   1e80e:	2200      	movs	r2, #0
   1e810:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   1e814:	2000      	movs	r0, #0
   1e816:	4937      	ldr	r1, [pc, #220]	; (1e8f4 <__kernel_cos+0x274>)
   1e818:	4690      	mov	r8, r2
   1e81a:	4699      	mov	r9, r3
   1e81c:	f7f9 fe04 	bl	18428 <__aeabi_dsub>
   1e820:	e9cd 0100 	strd	r0, r1, [sp]
   1e824:	2200      	movs	r2, #0
   1e826:	4b32      	ldr	r3, [pc, #200]	; (1e8f0 <__kernel_cos+0x270>)
   1e828:	4620      	mov	r0, r4
   1e82a:	4629      	mov	r1, r5
   1e82c:	f7f9 ffb4 	bl	18798 <__aeabi_dmul>
   1e830:	4642      	mov	r2, r8
   1e832:	464b      	mov	r3, r9
   1e834:	f7f9 fdf8 	bl	18428 <__aeabi_dsub>
   1e838:	4652      	mov	r2, sl
   1e83a:	4680      	mov	r8, r0
   1e83c:	4689      	mov	r9, r1
   1e83e:	465b      	mov	r3, fp
   1e840:	4620      	mov	r0, r4
   1e842:	4629      	mov	r1, r5
   1e844:	f7f9 ffa8 	bl	18798 <__aeabi_dmul>
   1e848:	4604      	mov	r4, r0
   1e84a:	460d      	mov	r5, r1
   1e84c:	4630      	mov	r0, r6
   1e84e:	4639      	mov	r1, r7
   1e850:	ec53 2b18 	vmov	r2, r3, d8
   1e854:	f7f9 ffa0 	bl	18798 <__aeabi_dmul>
   1e858:	4602      	mov	r2, r0
   1e85a:	460b      	mov	r3, r1
   1e85c:	4620      	mov	r0, r4
   1e85e:	4629      	mov	r1, r5
   1e860:	f7f9 fde2 	bl	18428 <__aeabi_dsub>
   1e864:	4602      	mov	r2, r0
   1e866:	460b      	mov	r3, r1
   1e868:	4640      	mov	r0, r8
   1e86a:	4649      	mov	r1, r9
   1e86c:	f7f9 fddc 	bl	18428 <__aeabi_dsub>
   1e870:	4602      	mov	r2, r0
   1e872:	460b      	mov	r3, r1
   1e874:	e9dd 0100 	ldrd	r0, r1, [sp]
   1e878:	f7f9 fdd6 	bl	18428 <__aeabi_dsub>
   1e87c:	ec41 0b10 	vmov	d0, r0, r1
   1e880:	b003      	add	sp, #12
   1e882:	ecbd 8b02 	vpop	{d8}
   1e886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e88a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 1e8e0 <__kernel_cos+0x260>
   1e88e:	b003      	add	sp, #12
   1e890:	ecbd 8b02 	vpop	{d8}
   1e894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e898:	ed9f 7b13 	vldr	d7, [pc, #76]	; 1e8e8 <__kernel_cos+0x268>
   1e89c:	f04f 0800 	mov.w	r8, #0
   1e8a0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1e900 <__kernel_cos+0x280>
   1e8a4:	ed8d 7b00 	vstr	d7, [sp]
   1e8a8:	e7bc      	b.n	1e824 <__kernel_cos+0x1a4>
   1e8aa:	bf00      	nop
   1e8ac:	f3af 8000 	nop.w
   1e8b0:	be8838d4 	.word	0xbe8838d4
   1e8b4:	bda8fae9 	.word	0xbda8fae9
   1e8b8:	bdb4b1c4 	.word	0xbdb4b1c4
   1e8bc:	3e21ee9e 	.word	0x3e21ee9e
   1e8c0:	809c52ad 	.word	0x809c52ad
   1e8c4:	3e927e4f 	.word	0x3e927e4f
   1e8c8:	19cb1590 	.word	0x19cb1590
   1e8cc:	3efa01a0 	.word	0x3efa01a0
   1e8d0:	16c15177 	.word	0x16c15177
   1e8d4:	3f56c16c 	.word	0x3f56c16c
   1e8d8:	5555554c 	.word	0x5555554c
   1e8dc:	3fa55555 	.word	0x3fa55555
   1e8e0:	00000000 	.word	0x00000000
   1e8e4:	3ff00000 	.word	0x3ff00000
   1e8e8:	00000000 	.word	0x00000000
   1e8ec:	3fe70000 	.word	0x3fe70000
   1e8f0:	3fe00000 	.word	0x3fe00000
   1e8f4:	3ff00000 	.word	0x3ff00000
   1e8f8:	3fd33332 	.word	0x3fd33332
   1e8fc:	3fe90000 	.word	0x3fe90000
   1e900:	3fd20000 	.word	0x3fd20000
   1e904:	00000000 	.word	0x00000000

0001e908 <__kernel_rem_pio2>:
   1e908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e90c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   1e910:	461e      	mov	r6, r3
   1e912:	4cbf      	ldr	r4, [pc, #764]	; (1ec10 <__kernel_rem_pio2+0x308>)
   1e914:	9307      	str	r3, [sp, #28]
   1e916:	1ed3      	subs	r3, r2, #3
   1e918:	9003      	str	r0, [sp, #12]
   1e91a:	3e01      	subs	r6, #1
   1e91c:	fb84 0403 	smull	r0, r4, r4, r3
   1e920:	17db      	asrs	r3, r3, #31
   1e922:	910b      	str	r1, [sp, #44]	; 0x2c
   1e924:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
   1e928:	4dba      	ldr	r5, [pc, #744]	; (1ec14 <__kernel_rem_pio2+0x30c>)
   1e92a:	98a2      	ldr	r0, [sp, #648]	; 0x288
   1e92c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   1e930:	9601      	str	r6, [sp, #4]
   1e932:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   1e936:	1c4b      	adds	r3, r1, #1
   1e938:	9109      	str	r1, [sp, #36]	; 0x24
   1e93a:	9004      	str	r0, [sp, #16]
   1e93c:	1b8f      	subs	r7, r1, r6
   1e93e:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   1e942:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1e946:	9305      	str	r3, [sp, #20]
   1e948:	1983      	adds	r3, r0, r6
   1e94a:	d41a      	bmi.n	1e982 <__kernel_rem_pio2+0x7a>
   1e94c:	443b      	add	r3, r7
   1e94e:	f10d 0880 	add.w	r8, sp, #128	; 0x80
   1e952:	2400      	movs	r4, #0
   1e954:	2500      	movs	r5, #0
   1e956:	1c5e      	adds	r6, r3, #1
   1e958:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
   1e95c:	e008      	b.n	1e970 <__kernel_rem_pio2+0x68>
   1e95e:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   1e962:	3701      	adds	r7, #1
   1e964:	f7f9 feae 	bl	186c4 <__aeabi_i2d>
   1e968:	42b7      	cmp	r7, r6
   1e96a:	e8e8 0102 	strd	r0, r1, [r8], #8
   1e96e:	d008      	beq.n	1e982 <__kernel_rem_pio2+0x7a>
   1e970:	2f00      	cmp	r7, #0
   1e972:	daf4      	bge.n	1e95e <__kernel_rem_pio2+0x56>
   1e974:	3701      	adds	r7, #1
   1e976:	4620      	mov	r0, r4
   1e978:	4629      	mov	r1, r5
   1e97a:	42b7      	cmp	r7, r6
   1e97c:	e8e8 0102 	strd	r0, r1, [r8], #8
   1e980:	d1f6      	bne.n	1e970 <__kernel_rem_pio2+0x68>
   1e982:	9b04      	ldr	r3, [sp, #16]
   1e984:	2b00      	cmp	r3, #0
   1e986:	9b07      	ldr	r3, [sp, #28]
   1e988:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1e98c:	9302      	str	r3, [sp, #8]
   1e98e:	db29      	blt.n	1e9e4 <__kernel_rem_pio2+0xdc>
   1e990:	9a03      	ldr	r2, [sp, #12]
   1e992:	a920      	add	r1, sp, #128	; 0x80
   1e994:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   1e998:	eb02 0803 	add.w	r8, r2, r3
   1e99c:	eb01 0903 	add.w	r9, r1, r3
   1e9a0:	aa72      	add	r2, sp, #456	; 0x1c8
   1e9a2:	9b04      	ldr	r3, [sp, #16]
   1e9a4:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
   1e9a8:	9b01      	ldr	r3, [sp, #4]
   1e9aa:	2b00      	cmp	r3, #0
   1e9ac:	f2c0 819c 	blt.w	1ece8 <__kernel_rem_pio2+0x3e0>
   1e9b0:	464d      	mov	r5, r9
   1e9b2:	9c03      	ldr	r4, [sp, #12]
   1e9b4:	2600      	movs	r6, #0
   1e9b6:	2700      	movs	r7, #0
   1e9b8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1e9bc:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   1e9c0:	f7f9 feea 	bl	18798 <__aeabi_dmul>
   1e9c4:	4602      	mov	r2, r0
   1e9c6:	460b      	mov	r3, r1
   1e9c8:	4630      	mov	r0, r6
   1e9ca:	4639      	mov	r1, r7
   1e9cc:	f7f9 fd2e 	bl	1842c <__adddf3>
   1e9d0:	4544      	cmp	r4, r8
   1e9d2:	4606      	mov	r6, r0
   1e9d4:	460f      	mov	r7, r1
   1e9d6:	d1ef      	bne.n	1e9b8 <__kernel_rem_pio2+0xb0>
   1e9d8:	f109 0908 	add.w	r9, r9, #8
   1e9dc:	e8ea 6702 	strd	r6, r7, [sl], #8
   1e9e0:	45da      	cmp	sl, fp
   1e9e2:	d1e1      	bne.n	1e9a8 <__kernel_rem_pio2+0xa0>
   1e9e4:	9904      	ldr	r1, [sp, #16]
   1e9e6:	e9dd 2002 	ldrd	r2, r0, [sp, #8]
   1e9ea:	008b      	lsls	r3, r1, #2
   1e9ec:	468b      	mov	fp, r1
   1e9ee:	4402      	add	r2, r0
   1e9f0:	a80b      	add	r0, sp, #44	; 0x2c
   1e9f2:	4692      	mov	sl, r2
   1e9f4:	f1a3 0208 	sub.w	r2, r3, #8
   1e9f8:	18c3      	adds	r3, r0, r3
   1e9fa:	9308      	str	r3, [sp, #32]
   1e9fc:	ab0c      	add	r3, sp, #48	; 0x30
   1e9fe:	4413      	add	r3, r2
   1ea00:	930a      	str	r3, [sp, #40]	; 0x28
   1ea02:	ab98      	add	r3, sp, #608	; 0x260
   1ea04:	f1bb 0f00 	cmp.w	fp, #0
   1ea08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   1ea0c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   1ea10:	dd29      	ble.n	1ea66 <__kernel_rem_pio2+0x15e>
   1ea12:	ab70      	add	r3, sp, #448	; 0x1c0
   1ea14:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   1ea18:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
   1ea1c:	2200      	movs	r2, #0
   1ea1e:	4b7e      	ldr	r3, [pc, #504]	; (1ec18 <__kernel_rem_pio2+0x310>)
   1ea20:	4620      	mov	r0, r4
   1ea22:	4629      	mov	r1, r5
   1ea24:	f7f9 feb8 	bl	18798 <__aeabi_dmul>
   1ea28:	f7fa f950 	bl	18ccc <__aeabi_d2iz>
   1ea2c:	f7f9 fe4a 	bl	186c4 <__aeabi_i2d>
   1ea30:	2200      	movs	r2, #0
   1ea32:	4b7a      	ldr	r3, [pc, #488]	; (1ec1c <__kernel_rem_pio2+0x314>)
   1ea34:	4606      	mov	r6, r0
   1ea36:	460f      	mov	r7, r1
   1ea38:	f7f9 feae 	bl	18798 <__aeabi_dmul>
   1ea3c:	4602      	mov	r2, r0
   1ea3e:	460b      	mov	r3, r1
   1ea40:	4620      	mov	r0, r4
   1ea42:	4629      	mov	r1, r5
   1ea44:	f7f9 fcf0 	bl	18428 <__aeabi_dsub>
   1ea48:	f7fa f940 	bl	18ccc <__aeabi_d2iz>
   1ea4c:	4639      	mov	r1, r7
   1ea4e:	f849 0b04 	str.w	r0, [r9], #4
   1ea52:	4630      	mov	r0, r6
   1ea54:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   1ea58:	f7f9 fce8 	bl	1842c <__adddf3>
   1ea5c:	ab70      	add	r3, sp, #448	; 0x1c0
   1ea5e:	4604      	mov	r4, r0
   1ea60:	460d      	mov	r5, r1
   1ea62:	4598      	cmp	r8, r3
   1ea64:	d1da      	bne.n	1ea1c <__kernel_rem_pio2+0x114>
   1ea66:	f8dd 9014 	ldr.w	r9, [sp, #20]
   1ea6a:	ec45 4b10 	vmov	d0, r4, r5
   1ea6e:	4648      	mov	r0, r9
   1ea70:	f000 fcbe 	bl	1f3f0 <scalbn>
   1ea74:	2200      	movs	r2, #0
   1ea76:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1ea7a:	ee10 0a10 	vmov	r0, s0
   1ea7e:	ec55 4b10 	vmov	r4, r5, d0
   1ea82:	4629      	mov	r1, r5
   1ea84:	f7f9 fe88 	bl	18798 <__aeabi_dmul>
   1ea88:	ec41 0b10 	vmov	d0, r0, r1
   1ea8c:	f000 fc28 	bl	1f2e0 <floor>
   1ea90:	2200      	movs	r2, #0
   1ea92:	4b63      	ldr	r3, [pc, #396]	; (1ec20 <__kernel_rem_pio2+0x318>)
   1ea94:	ec51 0b10 	vmov	r0, r1, d0
   1ea98:	f7f9 fe7e 	bl	18798 <__aeabi_dmul>
   1ea9c:	4602      	mov	r2, r0
   1ea9e:	460b      	mov	r3, r1
   1eaa0:	4620      	mov	r0, r4
   1eaa2:	4629      	mov	r1, r5
   1eaa4:	f7f9 fcc0 	bl	18428 <__aeabi_dsub>
   1eaa8:	460d      	mov	r5, r1
   1eaaa:	4604      	mov	r4, r0
   1eaac:	f7fa f90e 	bl	18ccc <__aeabi_d2iz>
   1eab0:	4680      	mov	r8, r0
   1eab2:	f7f9 fe07 	bl	186c4 <__aeabi_i2d>
   1eab6:	460b      	mov	r3, r1
   1eab8:	4602      	mov	r2, r0
   1eaba:	4629      	mov	r1, r5
   1eabc:	4620      	mov	r0, r4
   1eabe:	f7f9 fcb3 	bl	18428 <__aeabi_dsub>
   1eac2:	464b      	mov	r3, r9
   1eac4:	4606      	mov	r6, r0
   1eac6:	460f      	mov	r7, r1
   1eac8:	2b00      	cmp	r3, #0
   1eaca:	f340 80e1 	ble.w	1ec90 <__kernel_rem_pio2+0x388>
   1eace:	f10b 32ff 	add.w	r2, fp, #4294967295
   1ead2:	a90c      	add	r1, sp, #48	; 0x30
   1ead4:	f1c9 0318 	rsb	r3, r9, #24
   1ead8:	f1c9 0517 	rsb	r5, r9, #23
   1eadc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   1eae0:	fa41 f003 	asr.w	r0, r1, r3
   1eae4:	fa00 f303 	lsl.w	r3, r0, r3
   1eae8:	4480      	add	r8, r0
   1eaea:	1acb      	subs	r3, r1, r3
   1eaec:	a90c      	add	r1, sp, #48	; 0x30
   1eaee:	fa43 f505 	asr.w	r5, r3, r5
   1eaf2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1eaf6:	2d00      	cmp	r5, #0
   1eaf8:	dd2c      	ble.n	1eb54 <__kernel_rem_pio2+0x24c>
   1eafa:	f1bb 0f00 	cmp.w	fp, #0
   1eafe:	f108 0801 	add.w	r8, r8, #1
   1eb02:	f340 82a3 	ble.w	1f04c <__kernel_rem_pio2+0x744>
   1eb06:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1eb08:	2c00      	cmp	r4, #0
   1eb0a:	f040 80a7 	bne.w	1ec5c <__kernel_rem_pio2+0x354>
   1eb0e:	f1bb 0f01 	cmp.w	fp, #1
   1eb12:	d00a      	beq.n	1eb2a <__kernel_rem_pio2+0x222>
   1eb14:	a90c      	add	r1, sp, #48	; 0x30
   1eb16:	2201      	movs	r2, #1
   1eb18:	f851 4f04 	ldr.w	r4, [r1, #4]!
   1eb1c:	1c53      	adds	r3, r2, #1
   1eb1e:	2c00      	cmp	r4, #0
   1eb20:	f040 809e 	bne.w	1ec60 <__kernel_rem_pio2+0x358>
   1eb24:	459b      	cmp	fp, r3
   1eb26:	461a      	mov	r2, r3
   1eb28:	d1f6      	bne.n	1eb18 <__kernel_rem_pio2+0x210>
   1eb2a:	9b05      	ldr	r3, [sp, #20]
   1eb2c:	2b00      	cmp	r3, #0
   1eb2e:	dd0e      	ble.n	1eb4e <__kernel_rem_pio2+0x246>
   1eb30:	2b01      	cmp	r3, #1
   1eb32:	f000 8198 	beq.w	1ee66 <__kernel_rem_pio2+0x55e>
   1eb36:	2b02      	cmp	r3, #2
   1eb38:	d109      	bne.n	1eb4e <__kernel_rem_pio2+0x246>
   1eb3a:	f10b 32ff 	add.w	r2, fp, #4294967295
   1eb3e:	ab0c      	add	r3, sp, #48	; 0x30
   1eb40:	a90c      	add	r1, sp, #48	; 0x30
   1eb42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1eb46:	f3c3 0315 	ubfx	r3, r3, #0, #22
   1eb4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1eb4e:	2d02      	cmp	r5, #2
   1eb50:	f000 80af 	beq.w	1ecb2 <__kernel_rem_pio2+0x3aa>
   1eb54:	2200      	movs	r2, #0
   1eb56:	2300      	movs	r3, #0
   1eb58:	4630      	mov	r0, r6
   1eb5a:	4639      	mov	r1, r7
   1eb5c:	f7fa f884 	bl	18c68 <__aeabi_dcmpeq>
   1eb60:	2800      	cmp	r0, #0
   1eb62:	f000 8275 	beq.w	1f050 <__kernel_rem_pio2+0x748>
   1eb66:	f10b 39ff 	add.w	r9, fp, #4294967295
   1eb6a:	9b04      	ldr	r3, [sp, #16]
   1eb6c:	454b      	cmp	r3, r9
   1eb6e:	dc10      	bgt.n	1eb92 <__kernel_rem_pio2+0x28a>
   1eb70:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   1eb74:	a90c      	add	r1, sp, #48	; 0x30
   1eb76:	2200      	movs	r2, #0
   1eb78:	9808      	ldr	r0, [sp, #32]
   1eb7a:	445b      	add	r3, fp
   1eb7c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1eb80:	f853 1904 	ldr.w	r1, [r3], #-4
   1eb84:	4283      	cmp	r3, r0
   1eb86:	ea42 0201 	orr.w	r2, r2, r1
   1eb8a:	d1f9      	bne.n	1eb80 <__kernel_rem_pio2+0x278>
   1eb8c:	2a00      	cmp	r2, #0
   1eb8e:	f040 80b5 	bne.w	1ecfc <__kernel_rem_pio2+0x3f4>
   1eb92:	9b04      	ldr	r3, [sp, #16]
   1eb94:	aa0c      	add	r2, sp, #48	; 0x30
   1eb96:	3b01      	subs	r3, #1
   1eb98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1eb9c:	2b00      	cmp	r3, #0
   1eb9e:	f040 80a1 	bne.w	1ece4 <__kernel_rem_pio2+0x3dc>
   1eba2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1eba4:	2301      	movs	r3, #1
   1eba6:	f852 1904 	ldr.w	r1, [r2], #-4
   1ebaa:	3301      	adds	r3, #1
   1ebac:	2900      	cmp	r1, #0
   1ebae:	d0fa      	beq.n	1eba6 <__kernel_rem_pio2+0x29e>
   1ebb0:	eb03 020b 	add.w	r2, r3, fp
   1ebb4:	f10b 0901 	add.w	r9, fp, #1
   1ebb8:	4591      	cmp	r9, r2
   1ebba:	9206      	str	r2, [sp, #24]
   1ebbc:	dc48      	bgt.n	1ec50 <__kernel_rem_pio2+0x348>
   1ebbe:	9909      	ldr	r1, [sp, #36]	; 0x24
   1ebc0:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
   1ebc4:	9807      	ldr	r0, [sp, #28]
   1ebc6:	eb09 0301 	add.w	r3, r9, r1
   1ebca:	eb00 050b 	add.w	r5, r0, fp
   1ebce:	eb01 0b02 	add.w	fp, r1, r2
   1ebd2:	4498      	add	r8, r3
   1ebd4:	ab20      	add	r3, sp, #128	; 0x80
   1ebd6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1ebda:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   1ebdc:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   1ebe0:	ab70      	add	r3, sp, #448	; 0x1c0
   1ebe2:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   1ebe6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   1ebe8:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   1ebec:	9302      	str	r3, [sp, #8]
   1ebee:	f858 0f04 	ldr.w	r0, [r8, #4]!
   1ebf2:	f105 0b08 	add.w	fp, r5, #8
   1ebf6:	f7f9 fd65 	bl	186c4 <__aeabi_i2d>
   1ebfa:	460b      	mov	r3, r1
   1ebfc:	9901      	ldr	r1, [sp, #4]
   1ebfe:	4602      	mov	r2, r0
   1ec00:	2900      	cmp	r1, #0
   1ec02:	e9c5 2300 	strd	r2, r3, [r5]
   1ec06:	db26      	blt.n	1ec56 <__kernel_rem_pio2+0x34e>
   1ec08:	9c03      	ldr	r4, [sp, #12]
   1ec0a:	2600      	movs	r6, #0
   1ec0c:	2700      	movs	r7, #0
   1ec0e:	e00b      	b.n	1ec28 <__kernel_rem_pio2+0x320>
   1ec10:	2aaaaaab 	.word	0x2aaaaaab
   1ec14:	0004b284 	.word	0x0004b284
   1ec18:	3e700000 	.word	0x3e700000
   1ec1c:	41700000 	.word	0x41700000
   1ec20:	40200000 	.word	0x40200000
   1ec24:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1ec28:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   1ec2c:	f7f9 fdb4 	bl	18798 <__aeabi_dmul>
   1ec30:	4602      	mov	r2, r0
   1ec32:	460b      	mov	r3, r1
   1ec34:	4630      	mov	r0, r6
   1ec36:	4639      	mov	r1, r7
   1ec38:	f7f9 fbf8 	bl	1842c <__adddf3>
   1ec3c:	4554      	cmp	r4, sl
   1ec3e:	4606      	mov	r6, r0
   1ec40:	460f      	mov	r7, r1
   1ec42:	d1ef      	bne.n	1ec24 <__kernel_rem_pio2+0x31c>
   1ec44:	9b02      	ldr	r3, [sp, #8]
   1ec46:	465d      	mov	r5, fp
   1ec48:	4598      	cmp	r8, r3
   1ec4a:	e8e9 6702 	strd	r6, r7, [r9], #8
   1ec4e:	d1ce      	bne.n	1ebee <__kernel_rem_pio2+0x2e6>
   1ec50:	f8dd b018 	ldr.w	fp, [sp, #24]
   1ec54:	e6d5      	b.n	1ea02 <__kernel_rem_pio2+0xfa>
   1ec56:	2600      	movs	r6, #0
   1ec58:	2700      	movs	r7, #0
   1ec5a:	e7f3      	b.n	1ec44 <__kernel_rem_pio2+0x33c>
   1ec5c:	2301      	movs	r3, #1
   1ec5e:	2200      	movs	r2, #0
   1ec60:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   1ec64:	a90c      	add	r1, sp, #48	; 0x30
   1ec66:	459b      	cmp	fp, r3
   1ec68:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
   1ec6c:	dd0e      	ble.n	1ec8c <__kernel_rem_pio2+0x384>
   1ec6e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   1ec72:	eb01 008b 	add.w	r0, r1, fp, lsl #2
   1ec76:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1ec7a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   1ec7e:	e000      	b.n	1ec82 <__kernel_rem_pio2+0x37a>
   1ec80:	681a      	ldr	r2, [r3, #0]
   1ec82:	1a8a      	subs	r2, r1, r2
   1ec84:	f843 2b04 	str.w	r2, [r3], #4
   1ec88:	4283      	cmp	r3, r0
   1ec8a:	d1f9      	bne.n	1ec80 <__kernel_rem_pio2+0x378>
   1ec8c:	2401      	movs	r4, #1
   1ec8e:	e74c      	b.n	1eb2a <__kernel_rem_pio2+0x222>
   1ec90:	d106      	bne.n	1eca0 <__kernel_rem_pio2+0x398>
   1ec92:	f10b 33ff 	add.w	r3, fp, #4294967295
   1ec96:	aa0c      	add	r2, sp, #48	; 0x30
   1ec98:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1ec9c:	15ed      	asrs	r5, r5, #23
   1ec9e:	e72a      	b.n	1eaf6 <__kernel_rem_pio2+0x1ee>
   1eca0:	2200      	movs	r2, #0
   1eca2:	4bc3      	ldr	r3, [pc, #780]	; (1efb0 <__kernel_rem_pio2+0x6a8>)
   1eca4:	f7f9 fffe 	bl	18ca4 <__aeabi_dcmpge>
   1eca8:	2800      	cmp	r0, #0
   1ecaa:	f040 81bb 	bne.w	1f024 <__kernel_rem_pio2+0x71c>
   1ecae:	4605      	mov	r5, r0
   1ecb0:	e750      	b.n	1eb54 <__kernel_rem_pio2+0x24c>
   1ecb2:	4632      	mov	r2, r6
   1ecb4:	463b      	mov	r3, r7
   1ecb6:	2000      	movs	r0, #0
   1ecb8:	49be      	ldr	r1, [pc, #760]	; (1efb4 <__kernel_rem_pio2+0x6ac>)
   1ecba:	f7f9 fbb5 	bl	18428 <__aeabi_dsub>
   1ecbe:	4606      	mov	r6, r0
   1ecc0:	460f      	mov	r7, r1
   1ecc2:	2c00      	cmp	r4, #0
   1ecc4:	f43f af46 	beq.w	1eb54 <__kernel_rem_pio2+0x24c>
   1ecc8:	9805      	ldr	r0, [sp, #20]
   1ecca:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 1efa0 <__kernel_rem_pio2+0x698>
   1ecce:	f000 fb8f 	bl	1f3f0 <scalbn>
   1ecd2:	4630      	mov	r0, r6
   1ecd4:	4639      	mov	r1, r7
   1ecd6:	ec53 2b10 	vmov	r2, r3, d0
   1ecda:	f7f9 fba5 	bl	18428 <__aeabi_dsub>
   1ecde:	4606      	mov	r6, r0
   1ece0:	460f      	mov	r7, r1
   1ece2:	e737      	b.n	1eb54 <__kernel_rem_pio2+0x24c>
   1ece4:	2301      	movs	r3, #1
   1ece6:	e763      	b.n	1ebb0 <__kernel_rem_pio2+0x2a8>
   1ece8:	2600      	movs	r6, #0
   1ecea:	2700      	movs	r7, #0
   1ecec:	f109 0908 	add.w	r9, r9, #8
   1ecf0:	e8ea 6702 	strd	r6, r7, [sl], #8
   1ecf4:	45da      	cmp	sl, fp
   1ecf6:	f47f ae57 	bne.w	1e9a8 <__kernel_rem_pio2+0xa0>
   1ecfa:	e673      	b.n	1e9e4 <__kernel_rem_pio2+0xdc>
   1ecfc:	9a05      	ldr	r2, [sp, #20]
   1ecfe:	ab0c      	add	r3, sp, #48	; 0x30
   1ed00:	3a18      	subs	r2, #24
   1ed02:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
   1ed06:	e9cd 8506 	strd	r8, r5, [sp, #24]
   1ed0a:	9205      	str	r2, [sp, #20]
   1ed0c:	b96b      	cbnz	r3, 1ed2a <__kernel_rem_pio2+0x422>
   1ed0e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   1ed12:	a90c      	add	r1, sp, #48	; 0x30
   1ed14:	444b      	add	r3, r9
   1ed16:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1ed1a:	f853 1904 	ldr.w	r1, [r3], #-4
   1ed1e:	f109 39ff 	add.w	r9, r9, #4294967295
   1ed22:	3a18      	subs	r2, #24
   1ed24:	2900      	cmp	r1, #0
   1ed26:	d0f8      	beq.n	1ed1a <__kernel_rem_pio2+0x412>
   1ed28:	9205      	str	r2, [sp, #20]
   1ed2a:	9805      	ldr	r0, [sp, #20]
   1ed2c:	ed9f 0b9c 	vldr	d0, [pc, #624]	; 1efa0 <__kernel_rem_pio2+0x698>
   1ed30:	f000 fb5e 	bl	1f3f0 <scalbn>
   1ed34:	f1b9 0f00 	cmp.w	r9, #0
   1ed38:	ec55 4b10 	vmov	r4, r5, d0
   1ed3c:	f2c0 81e6 	blt.w	1f10c <__kernel_rem_pio2+0x804>
   1ed40:	aa0c      	add	r2, sp, #48	; 0x30
   1ed42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
   1ed46:	f04f 0a00 	mov.w	sl, #0
   1ed4a:	f8df b26c 	ldr.w	fp, [pc, #620]	; 1efb8 <__kernel_rem_pio2+0x6b0>
   1ed4e:	eb02 0689 	add.w	r6, r2, r9, lsl #2
   1ed52:	aa70      	add	r2, sp, #448	; 0x1c0
   1ed54:	9308      	str	r3, [sp, #32]
   1ed56:	eb02 0803 	add.w	r8, r2, r3
   1ed5a:	3604      	adds	r6, #4
   1ed5c:	f108 0708 	add.w	r7, r8, #8
   1ed60:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   1ed64:	f7f9 fcae 	bl	186c4 <__aeabi_i2d>
   1ed68:	4622      	mov	r2, r4
   1ed6a:	462b      	mov	r3, r5
   1ed6c:	f7f9 fd14 	bl	18798 <__aeabi_dmul>
   1ed70:	465b      	mov	r3, fp
   1ed72:	4652      	mov	r2, sl
   1ed74:	e967 0102 	strd	r0, r1, [r7, #-8]!
   1ed78:	4620      	mov	r0, r4
   1ed7a:	4629      	mov	r1, r5
   1ed7c:	f7f9 fd0c 	bl	18798 <__aeabi_dmul>
   1ed80:	ab0c      	add	r3, sp, #48	; 0x30
   1ed82:	4604      	mov	r4, r0
   1ed84:	460d      	mov	r5, r1
   1ed86:	429e      	cmp	r6, r3
   1ed88:	d1ea      	bne.n	1ed60 <__kernel_rem_pio2+0x458>
   1ed8a:	ab48      	add	r3, sp, #288	; 0x120
   1ed8c:	f109 0201 	add.w	r2, r9, #1
   1ed90:	f8cd 9014 	str.w	r9, [sp, #20]
   1ed94:	46c3      	mov	fp, r8
   1ed96:	f04f 0a00 	mov.w	sl, #0
   1ed9a:	f8dd 9010 	ldr.w	r9, [sp, #16]
   1ed9e:	9303      	str	r3, [sp, #12]
   1eda0:	9202      	str	r2, [sp, #8]
   1eda2:	9301      	str	r3, [sp, #4]
   1eda4:	f1b9 0f00 	cmp.w	r9, #0
   1eda8:	f2c0 814d 	blt.w	1f046 <__kernel_rem_pio2+0x73e>
   1edac:	f8df 820c 	ldr.w	r8, [pc, #524]	; 1efbc <__kernel_rem_pio2+0x6b4>
   1edb0:	465d      	mov	r5, fp
   1edb2:	2400      	movs	r4, #0
   1edb4:	2600      	movs	r6, #0
   1edb6:	2700      	movs	r7, #0
   1edb8:	a37b      	add	r3, pc, #492	; (adr r3, 1efa8 <__kernel_rem_pio2+0x6a0>)
   1edba:	e9d3 2300 	ldrd	r2, r3, [r3]
   1edbe:	e003      	b.n	1edc8 <__kernel_rem_pio2+0x4c0>
   1edc0:	4554      	cmp	r4, sl
   1edc2:	dc10      	bgt.n	1ede6 <__kernel_rem_pio2+0x4de>
   1edc4:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   1edc8:	3401      	adds	r4, #1
   1edca:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   1edce:	f7f9 fce3 	bl	18798 <__aeabi_dmul>
   1edd2:	4602      	mov	r2, r0
   1edd4:	460b      	mov	r3, r1
   1edd6:	4630      	mov	r0, r6
   1edd8:	4639      	mov	r1, r7
   1edda:	f7f9 fb27 	bl	1842c <__adddf3>
   1edde:	45a1      	cmp	r9, r4
   1ede0:	4606      	mov	r6, r0
   1ede2:	460f      	mov	r7, r1
   1ede4:	daec      	bge.n	1edc0 <__kernel_rem_pio2+0x4b8>
   1ede6:	9b01      	ldr	r3, [sp, #4]
   1ede8:	f10a 0a01 	add.w	sl, sl, #1
   1edec:	f1ab 0b08 	sub.w	fp, fp, #8
   1edf0:	e8e3 6702 	strd	r6, r7, [r3], #8
   1edf4:	9301      	str	r3, [sp, #4]
   1edf6:	9b02      	ldr	r3, [sp, #8]
   1edf8:	459a      	cmp	sl, r3
   1edfa:	d1d3      	bne.n	1eda4 <__kernel_rem_pio2+0x49c>
   1edfc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1edfe:	f8dd 9014 	ldr.w	r9, [sp, #20]
   1ee02:	2b03      	cmp	r3, #3
   1ee04:	d828      	bhi.n	1ee58 <__kernel_rem_pio2+0x550>
   1ee06:	e8df f013 	tbh	[pc, r3, lsl #1]
   1ee0a:	00f2      	.short	0x00f2
   1ee0c:	00dd00dd 	.word	0x00dd00dd
   1ee10:	003b      	.short	0x003b
   1ee12:	9b07      	ldr	r3, [sp, #28]
   1ee14:	2000      	movs	r0, #0
   1ee16:	2100      	movs	r1, #0
   1ee18:	2b00      	cmp	r3, #0
   1ee1a:	f040 8155 	bne.w	1f0c8 <__kernel_rem_pio2+0x7c0>
   1ee1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ee20:	4602      	mov	r2, r0
   1ee22:	e9c3 0100 	strd	r0, r1, [r3]
   1ee26:	460b      	mov	r3, r1
   1ee28:	9903      	ldr	r1, [sp, #12]
   1ee2a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ee2e:	f7f9 fafb 	bl	18428 <__aeabi_dsub>
   1ee32:	f1b9 0f00 	cmp.w	r9, #0
   1ee36:	dd0c      	ble.n	1ee52 <__kernel_rem_pio2+0x54a>
   1ee38:	ad4a      	add	r5, sp, #296	; 0x128
   1ee3a:	2401      	movs	r4, #1
   1ee3c:	3401      	adds	r4, #1
   1ee3e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   1ee42:	f7f9 faf3 	bl	1842c <__adddf3>
   1ee46:	45a1      	cmp	r9, r4
   1ee48:	daf8      	bge.n	1ee3c <__kernel_rem_pio2+0x534>
   1ee4a:	9b07      	ldr	r3, [sp, #28]
   1ee4c:	2b00      	cmp	r3, #0
   1ee4e:	f040 814b 	bne.w	1f0e8 <__kernel_rem_pio2+0x7e0>
   1ee52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ee54:	e9c3 0102 	strd	r0, r1, [r3, #8]
   1ee58:	9b06      	ldr	r3, [sp, #24]
   1ee5a:	f003 0007 	and.w	r0, r3, #7
   1ee5e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1ee62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee66:	f10b 32ff 	add.w	r2, fp, #4294967295
   1ee6a:	ab0c      	add	r3, sp, #48	; 0x30
   1ee6c:	a90c      	add	r1, sp, #48	; 0x30
   1ee6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1ee72:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1ee76:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1ee7a:	e668      	b.n	1eb4e <__kernel_rem_pio2+0x246>
   1ee7c:	ab48      	add	r3, sp, #288	; 0x120
   1ee7e:	9303      	str	r3, [sp, #12]
   1ee80:	f1b9 0f00 	cmp.w	r9, #0
   1ee84:	f340 8155 	ble.w	1f132 <__kernel_rem_pio2+0x82a>
   1ee88:	9b03      	ldr	r3, [sp, #12]
   1ee8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
   1ee8e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
   1ee92:	f8cd 9010 	str.w	r9, [sp, #16]
   1ee96:	eb03 08c9 	add.w	r8, r3, r9, lsl #3
   1ee9a:	461a      	mov	r2, r3
   1ee9c:	9102      	str	r1, [sp, #8]
   1ee9e:	eb09 0100 	add.w	r1, r9, r0
   1eea2:	4691      	mov	r9, r2
   1eea4:	9101      	str	r1, [sp, #4]
   1eea6:	e9d8 ab00 	ldrd	sl, fp, [r8]
   1eeaa:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
   1eeae:	4652      	mov	r2, sl
   1eeb0:	465b      	mov	r3, fp
   1eeb2:	4630      	mov	r0, r6
   1eeb4:	4639      	mov	r1, r7
   1eeb6:	f7f9 fab9 	bl	1842c <__adddf3>
   1eeba:	4604      	mov	r4, r0
   1eebc:	460d      	mov	r5, r1
   1eebe:	4602      	mov	r2, r0
   1eec0:	460b      	mov	r3, r1
   1eec2:	4630      	mov	r0, r6
   1eec4:	4639      	mov	r1, r7
   1eec6:	f7f9 faaf 	bl	18428 <__aeabi_dsub>
   1eeca:	4652      	mov	r2, sl
   1eecc:	465b      	mov	r3, fp
   1eece:	46a2      	mov	sl, r4
   1eed0:	f7f9 faac 	bl	1842c <__adddf3>
   1eed4:	45c1      	cmp	r9, r8
   1eed6:	46ab      	mov	fp, r5
   1eed8:	e9c8 0102 	strd	r0, r1, [r8, #8]
   1eedc:	e9c8 4500 	strd	r4, r5, [r8]
   1eee0:	d1e3      	bne.n	1eeaa <__kernel_rem_pio2+0x5a2>
   1eee2:	f8dd 9010 	ldr.w	r9, [sp, #16]
   1eee6:	f1b9 0f01 	cmp.w	r9, #1
   1eeea:	f340 8122 	ble.w	1f132 <__kernel_rem_pio2+0x82a>
   1eeee:	9b01      	ldr	r3, [sp, #4]
   1eef0:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
   1eef4:	00da      	lsls	r2, r3, #3
   1eef6:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   1eefa:	f102 0a08 	add.w	sl, r2, #8
   1eefe:	9201      	str	r2, [sp, #4]
   1ef00:	440b      	add	r3, r1
   1ef02:	448a      	add	sl, r1
   1ef04:	e9d3 6700 	ldrd	r6, r7, [r3]
   1ef08:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
   1ef0c:	4632      	mov	r2, r6
   1ef0e:	463b      	mov	r3, r7
   1ef10:	4640      	mov	r0, r8
   1ef12:	4649      	mov	r1, r9
   1ef14:	f7f9 fa8a 	bl	1842c <__adddf3>
   1ef18:	4604      	mov	r4, r0
   1ef1a:	460d      	mov	r5, r1
   1ef1c:	4602      	mov	r2, r0
   1ef1e:	460b      	mov	r3, r1
   1ef20:	4640      	mov	r0, r8
   1ef22:	4649      	mov	r1, r9
   1ef24:	f7f9 fa80 	bl	18428 <__aeabi_dsub>
   1ef28:	4632      	mov	r2, r6
   1ef2a:	463b      	mov	r3, r7
   1ef2c:	4626      	mov	r6, r4
   1ef2e:	f7f9 fa7d 	bl	1842c <__adddf3>
   1ef32:	45d3      	cmp	fp, sl
   1ef34:	462f      	mov	r7, r5
   1ef36:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1ef3a:	e9ca 4500 	strd	r4, r5, [sl]
   1ef3e:	d1e3      	bne.n	1ef08 <__kernel_rem_pio2+0x600>
   1ef40:	9c01      	ldr	r4, [sp, #4]
   1ef42:	2000      	movs	r0, #0
   1ef44:	9b03      	ldr	r3, [sp, #12]
   1ef46:	2100      	movs	r1, #0
   1ef48:	3410      	adds	r4, #16
   1ef4a:	f103 0510 	add.w	r5, r3, #16
   1ef4e:	441c      	add	r4, r3
   1ef50:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1ef54:	f7f9 fa6a 	bl	1842c <__adddf3>
   1ef58:	42a5      	cmp	r5, r4
   1ef5a:	d1f9      	bne.n	1ef50 <__kernel_rem_pio2+0x648>
   1ef5c:	9c03      	ldr	r4, [sp, #12]
   1ef5e:	9e07      	ldr	r6, [sp, #28]
   1ef60:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ef64:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
   1ef68:	2e00      	cmp	r6, #0
   1ef6a:	f000 80c1 	beq.w	1f0f0 <__kernel_rem_pio2+0x7e8>
   1ef6e:	f103 4700 	add.w	r7, r3, #2147483648	; 0x80000000
   1ef72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1ef76:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ef78:	4626      	mov	r6, r4
   1ef7a:	4694      	mov	ip, r2
   1ef7c:	f105 4400 	add.w	r4, r5, #2147483648	; 0x80000000
   1ef80:	e9c1 0304 	strd	r0, r3, [r1, #16]
   1ef84:	9b06      	ldr	r3, [sp, #24]
   1ef86:	f003 0007 	and.w	r0, r3, #7
   1ef8a:	e9c1 c700 	strd	ip, r7, [r1]
   1ef8e:	e9c1 6402 	strd	r6, r4, [r1, #8]
   1ef92:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1ef96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef9a:	bf00      	nop
   1ef9c:	f3af 8000 	nop.w
   1efa0:	00000000 	.word	0x00000000
   1efa4:	3ff00000 	.word	0x3ff00000
   1efa8:	40000000 	.word	0x40000000
   1efac:	3ff921fb 	.word	0x3ff921fb
   1efb0:	3fe00000 	.word	0x3fe00000
   1efb4:	3ff00000 	.word	0x3ff00000
   1efb8:	3e700000 	.word	0x3e700000
   1efbc:	000492a8 	.word	0x000492a8
   1efc0:	ab48      	add	r3, sp, #288	; 0x120
   1efc2:	9303      	str	r3, [sp, #12]
   1efc4:	f1b9 0f00 	cmp.w	r9, #0
   1efc8:	f6ff af23 	blt.w	1ee12 <__kernel_rem_pio2+0x50a>
   1efcc:	9d03      	ldr	r5, [sp, #12]
   1efce:	2000      	movs	r0, #0
   1efd0:	2100      	movs	r1, #0
   1efd2:	eb05 04c9 	add.w	r4, r5, r9, lsl #3
   1efd6:	3408      	adds	r4, #8
   1efd8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1efdc:	f7f9 fa26 	bl	1842c <__adddf3>
   1efe0:	42a5      	cmp	r5, r4
   1efe2:	d1f9      	bne.n	1efd8 <__kernel_rem_pio2+0x6d0>
   1efe4:	9b07      	ldr	r3, [sp, #28]
   1efe6:	2b00      	cmp	r3, #0
   1efe8:	f43f af19 	beq.w	1ee1e <__kernel_rem_pio2+0x516>
   1efec:	e06c      	b.n	1f0c8 <__kernel_rem_pio2+0x7c0>
   1efee:	9c08      	ldr	r4, [sp, #32]
   1eff0:	2000      	movs	r0, #0
   1eff2:	9d03      	ldr	r5, [sp, #12]
   1eff4:	2100      	movs	r1, #0
   1eff6:	3408      	adds	r4, #8
   1eff8:	442c      	add	r4, r5
   1effa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1effe:	f7f9 fa15 	bl	1842c <__adddf3>
   1f002:	42a5      	cmp	r5, r4
   1f004:	d1f9      	bne.n	1effa <__kernel_rem_pio2+0x6f2>
   1f006:	9b07      	ldr	r3, [sp, #28]
   1f008:	b113      	cbz	r3, 1f010 <__kernel_rem_pio2+0x708>
   1f00a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f00e:	4619      	mov	r1, r3
   1f010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f012:	e9c3 0100 	strd	r0, r1, [r3]
   1f016:	9b06      	ldr	r3, [sp, #24]
   1f018:	f003 0007 	and.w	r0, r3, #7
   1f01c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1f020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f024:	f1bb 0f00 	cmp.w	fp, #0
   1f028:	f108 0801 	add.w	r8, r8, #1
   1f02c:	f04f 0502 	mov.w	r5, #2
   1f030:	f73f ad69 	bgt.w	1eb06 <__kernel_rem_pio2+0x1fe>
   1f034:	4632      	mov	r2, r6
   1f036:	463b      	mov	r3, r7
   1f038:	2000      	movs	r0, #0
   1f03a:	493f      	ldr	r1, [pc, #252]	; (1f138 <__kernel_rem_pio2+0x830>)
   1f03c:	f7f9 f9f4 	bl	18428 <__aeabi_dsub>
   1f040:	4606      	mov	r6, r0
   1f042:	460f      	mov	r7, r1
   1f044:	e586      	b.n	1eb54 <__kernel_rem_pio2+0x24c>
   1f046:	2600      	movs	r6, #0
   1f048:	2700      	movs	r7, #0
   1f04a:	e6cc      	b.n	1ede6 <__kernel_rem_pio2+0x4de>
   1f04c:	2400      	movs	r4, #0
   1f04e:	e56c      	b.n	1eb2a <__kernel_rem_pio2+0x222>
   1f050:	9c05      	ldr	r4, [sp, #20]
   1f052:	ec47 6b10 	vmov	d0, r6, r7
   1f056:	4260      	negs	r0, r4
   1f058:	e9cd 8506 	strd	r8, r5, [sp, #24]
   1f05c:	f000 f9c8 	bl	1f3f0 <scalbn>
   1f060:	2200      	movs	r2, #0
   1f062:	ee10 0a10 	vmov	r0, s0
   1f066:	4b35      	ldr	r3, [pc, #212]	; (1f13c <__kernel_rem_pio2+0x834>)
   1f068:	ec57 6b10 	vmov	r6, r7, d0
   1f06c:	4639      	mov	r1, r7
   1f06e:	f7f9 fe19 	bl	18ca4 <__aeabi_dcmpge>
   1f072:	b300      	cbz	r0, 1f0b6 <__kernel_rem_pio2+0x7ae>
   1f074:	3418      	adds	r4, #24
   1f076:	2200      	movs	r2, #0
   1f078:	4b31      	ldr	r3, [pc, #196]	; (1f140 <__kernel_rem_pio2+0x838>)
   1f07a:	4630      	mov	r0, r6
   1f07c:	4639      	mov	r1, r7
   1f07e:	9405      	str	r4, [sp, #20]
   1f080:	f7f9 fb8a 	bl	18798 <__aeabi_dmul>
   1f084:	f10b 0901 	add.w	r9, fp, #1
   1f088:	f7f9 fe20 	bl	18ccc <__aeabi_d2iz>
   1f08c:	4604      	mov	r4, r0
   1f08e:	f7f9 fb19 	bl	186c4 <__aeabi_i2d>
   1f092:	2200      	movs	r2, #0
   1f094:	4b29      	ldr	r3, [pc, #164]	; (1f13c <__kernel_rem_pio2+0x834>)
   1f096:	f7f9 fb7f 	bl	18798 <__aeabi_dmul>
   1f09a:	460b      	mov	r3, r1
   1f09c:	4602      	mov	r2, r0
   1f09e:	4639      	mov	r1, r7
   1f0a0:	4630      	mov	r0, r6
   1f0a2:	f7f9 f9c1 	bl	18428 <__aeabi_dsub>
   1f0a6:	f7f9 fe11 	bl	18ccc <__aeabi_d2iz>
   1f0aa:	ab0c      	add	r3, sp, #48	; 0x30
   1f0ac:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
   1f0b0:	f843 4029 	str.w	r4, [r3, r9, lsl #2]
   1f0b4:	e639      	b.n	1ed2a <__kernel_rem_pio2+0x422>
   1f0b6:	4630      	mov	r0, r6
   1f0b8:	4639      	mov	r1, r7
   1f0ba:	f7f9 fe07 	bl	18ccc <__aeabi_d2iz>
   1f0be:	ab0c      	add	r3, sp, #48	; 0x30
   1f0c0:	46d9      	mov	r9, fp
   1f0c2:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
   1f0c6:	e630      	b.n	1ed2a <__kernel_rem_pio2+0x422>
   1f0c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f0cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1f0ce:	4602      	mov	r2, r0
   1f0d0:	e9c4 0300 	strd	r0, r3, [r4]
   1f0d4:	460b      	mov	r3, r1
   1f0d6:	9903      	ldr	r1, [sp, #12]
   1f0d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f0dc:	f7f9 f9a4 	bl	18428 <__aeabi_dsub>
   1f0e0:	f1b9 0f00 	cmp.w	r9, #0
   1f0e4:	f73f aea8 	bgt.w	1ee38 <__kernel_rem_pio2+0x530>
   1f0e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f0ec:	4619      	mov	r1, r3
   1f0ee:	e6b0      	b.n	1ee52 <__kernel_rem_pio2+0x54a>
   1f0f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1f0f2:	e9c6 2300 	strd	r2, r3, [r6]
   1f0f6:	9b06      	ldr	r3, [sp, #24]
   1f0f8:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1f0fc:	f003 0007 	and.w	r0, r3, #7
   1f100:	e9c6 4502 	strd	r4, r5, [r6, #8]
   1f104:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1f108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f10c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1f10e:	2b03      	cmp	r3, #3
   1f110:	f63f aea2 	bhi.w	1ee58 <__kernel_rem_pio2+0x550>
   1f114:	a201      	add	r2, pc, #4	; (adr r2, 1f11c <__kernel_rem_pio2+0x814>)
   1f116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f11a:	bf00      	nop
   1f11c:	0001f12d 	.word	0x0001f12d
   1f120:	0001efc1 	.word	0x0001efc1
   1f124:	0001efc1 	.word	0x0001efc1
   1f128:	0001ee7d 	.word	0x0001ee7d
   1f12c:	2000      	movs	r0, #0
   1f12e:	2100      	movs	r1, #0
   1f130:	e769      	b.n	1f006 <__kernel_rem_pio2+0x6fe>
   1f132:	2000      	movs	r0, #0
   1f134:	2100      	movs	r1, #0
   1f136:	e711      	b.n	1ef5c <__kernel_rem_pio2+0x654>
   1f138:	3ff00000 	.word	0x3ff00000
   1f13c:	41700000 	.word	0x41700000
   1f140:	3e700000 	.word	0x3e700000
   1f144:	00000000 	.word	0x00000000

0001f148 <__kernel_sin>:
   1f148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f14c:	ec55 4b10 	vmov	r4, r5, d0
   1f150:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   1f154:	4682      	mov	sl, r0
   1f156:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   1f15a:	ed2d 8b02 	vpush	{d8}
   1f15e:	eeb0 8a41 	vmov.f32	s16, s2
   1f162:	eef0 8a61 	vmov.f32	s17, s3
   1f166:	b083      	sub	sp, #12
   1f168:	da07      	bge.n	1f17a <__kernel_sin+0x32>
   1f16a:	ee10 0a10 	vmov	r0, s0
   1f16e:	4629      	mov	r1, r5
   1f170:	f7f9 fdac 	bl	18ccc <__aeabi_d2iz>
   1f174:	2800      	cmp	r0, #0
   1f176:	f000 808e 	beq.w	1f296 <__kernel_sin+0x14e>
   1f17a:	4622      	mov	r2, r4
   1f17c:	462b      	mov	r3, r5
   1f17e:	4620      	mov	r0, r4
   1f180:	4629      	mov	r1, r5
   1f182:	f7f9 fb09 	bl	18798 <__aeabi_dmul>
   1f186:	4606      	mov	r6, r0
   1f188:	460f      	mov	r7, r1
   1f18a:	4602      	mov	r2, r0
   1f18c:	460b      	mov	r3, r1
   1f18e:	4620      	mov	r0, r4
   1f190:	4629      	mov	r1, r5
   1f192:	f7f9 fb01 	bl	18798 <__aeabi_dmul>
   1f196:	4680      	mov	r8, r0
   1f198:	4689      	mov	r9, r1
   1f19a:	4630      	mov	r0, r6
   1f19c:	4639      	mov	r1, r7
   1f19e:	a345      	add	r3, pc, #276	; (adr r3, 1f2b4 <__kernel_sin+0x16c>)
   1f1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f1a4:	f7f9 faf8 	bl	18798 <__aeabi_dmul>
   1f1a8:	a344      	add	r3, pc, #272	; (adr r3, 1f2bc <__kernel_sin+0x174>)
   1f1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f1ae:	f7f9 f93b 	bl	18428 <__aeabi_dsub>
   1f1b2:	4632      	mov	r2, r6
   1f1b4:	463b      	mov	r3, r7
   1f1b6:	f7f9 faef 	bl	18798 <__aeabi_dmul>
   1f1ba:	a342      	add	r3, pc, #264	; (adr r3, 1f2c4 <__kernel_sin+0x17c>)
   1f1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f1c0:	f7f9 f934 	bl	1842c <__adddf3>
   1f1c4:	4632      	mov	r2, r6
   1f1c6:	463b      	mov	r3, r7
   1f1c8:	f7f9 fae6 	bl	18798 <__aeabi_dmul>
   1f1cc:	a33f      	add	r3, pc, #252	; (adr r3, 1f2cc <__kernel_sin+0x184>)
   1f1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f1d2:	f7f9 f929 	bl	18428 <__aeabi_dsub>
   1f1d6:	4632      	mov	r2, r6
   1f1d8:	463b      	mov	r3, r7
   1f1da:	f7f9 fadd 	bl	18798 <__aeabi_dmul>
   1f1de:	a33d      	add	r3, pc, #244	; (adr r3, 1f2d4 <__kernel_sin+0x18c>)
   1f1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f1e4:	f7f9 f922 	bl	1842c <__adddf3>
   1f1e8:	e9cd 0100 	strd	r0, r1, [sp]
   1f1ec:	f1ba 0f00 	cmp.w	sl, #0
   1f1f0:	d037      	beq.n	1f262 <__kernel_sin+0x11a>
   1f1f2:	2200      	movs	r2, #0
   1f1f4:	4b2e      	ldr	r3, [pc, #184]	; (1f2b0 <__kernel_sin+0x168>)
   1f1f6:	ec51 0b18 	vmov	r0, r1, d8
   1f1fa:	f7f9 facd 	bl	18798 <__aeabi_dmul>
   1f1fe:	4682      	mov	sl, r0
   1f200:	468b      	mov	fp, r1
   1f202:	4640      	mov	r0, r8
   1f204:	4649      	mov	r1, r9
   1f206:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f20a:	f7f9 fac5 	bl	18798 <__aeabi_dmul>
   1f20e:	4602      	mov	r2, r0
   1f210:	460b      	mov	r3, r1
   1f212:	4650      	mov	r0, sl
   1f214:	4659      	mov	r1, fp
   1f216:	f7f9 f907 	bl	18428 <__aeabi_dsub>
   1f21a:	4632      	mov	r2, r6
   1f21c:	463b      	mov	r3, r7
   1f21e:	f7f9 fabb 	bl	18798 <__aeabi_dmul>
   1f222:	ec53 2b18 	vmov	r2, r3, d8
   1f226:	f7f9 f8ff 	bl	18428 <__aeabi_dsub>
   1f22a:	4606      	mov	r6, r0
   1f22c:	460f      	mov	r7, r1
   1f22e:	4640      	mov	r0, r8
   1f230:	4649      	mov	r1, r9
   1f232:	a31d      	add	r3, pc, #116	; (adr r3, 1f2a8 <__kernel_sin+0x160>)
   1f234:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f238:	f7f9 faae 	bl	18798 <__aeabi_dmul>
   1f23c:	4602      	mov	r2, r0
   1f23e:	460b      	mov	r3, r1
   1f240:	4630      	mov	r0, r6
   1f242:	4639      	mov	r1, r7
   1f244:	f7f9 f8f2 	bl	1842c <__adddf3>
   1f248:	4602      	mov	r2, r0
   1f24a:	460b      	mov	r3, r1
   1f24c:	4620      	mov	r0, r4
   1f24e:	4629      	mov	r1, r5
   1f250:	f7f9 f8ea 	bl	18428 <__aeabi_dsub>
   1f254:	ec41 0b10 	vmov	d0, r0, r1
   1f258:	b003      	add	sp, #12
   1f25a:	ecbd 8b02 	vpop	{d8}
   1f25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f262:	4602      	mov	r2, r0
   1f264:	460b      	mov	r3, r1
   1f266:	4630      	mov	r0, r6
   1f268:	4639      	mov	r1, r7
   1f26a:	f7f9 fa95 	bl	18798 <__aeabi_dmul>
   1f26e:	a30e      	add	r3, pc, #56	; (adr r3, 1f2a8 <__kernel_sin+0x160>)
   1f270:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f274:	f7f9 f8d8 	bl	18428 <__aeabi_dsub>
   1f278:	4642      	mov	r2, r8
   1f27a:	464b      	mov	r3, r9
   1f27c:	f7f9 fa8c 	bl	18798 <__aeabi_dmul>
   1f280:	4622      	mov	r2, r4
   1f282:	462b      	mov	r3, r5
   1f284:	f7f9 f8d2 	bl	1842c <__adddf3>
   1f288:	ec41 0b10 	vmov	d0, r0, r1
   1f28c:	b003      	add	sp, #12
   1f28e:	ecbd 8b02 	vpop	{d8}
   1f292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f296:	ec45 4b10 	vmov	d0, r4, r5
   1f29a:	b003      	add	sp, #12
   1f29c:	ecbd 8b02 	vpop	{d8}
   1f2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2a4:	f3af 8000 	nop.w
   1f2a8:	55555549 	.word	0x55555549
   1f2ac:	3fc55555 	.word	0x3fc55555
   1f2b0:	3fe00000 	.word	0x3fe00000
   1f2b4:	5acfd57c 	.word	0x5acfd57c
   1f2b8:	3de5d93a 	.word	0x3de5d93a
   1f2bc:	8a2b9ceb 	.word	0x8a2b9ceb
   1f2c0:	3e5ae5e6 	.word	0x3e5ae5e6
   1f2c4:	57b1fe7d 	.word	0x57b1fe7d
   1f2c8:	3ec71de3 	.word	0x3ec71de3
   1f2cc:	19c161d5 	.word	0x19c161d5
   1f2d0:	3f2a01a0 	.word	0x3f2a01a0
   1f2d4:	1110f8a6 	.word	0x1110f8a6
   1f2d8:	3f811111 	.word	0x3f811111
   1f2dc:	00000000 	.word	0x00000000

0001f2e0 <floor>:
   1f2e0:	ec51 0b10 	vmov	r0, r1, d0
   1f2e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1f2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f2ec:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   1f2f0:	460c      	mov	r4, r1
   1f2f2:	ee10 6a10 	vmov	r6, s0
   1f2f6:	460f      	mov	r7, r1
   1f2f8:	2d13      	cmp	r5, #19
   1f2fa:	dc1d      	bgt.n	1f338 <floor+0x58>
   1f2fc:	2d00      	cmp	r5, #0
   1f2fe:	db3d      	blt.n	1f37c <floor+0x9c>
   1f300:	4b39      	ldr	r3, [pc, #228]	; (1f3e8 <floor+0x108>)
   1f302:	fa43 f805 	asr.w	r8, r3, r5
   1f306:	ea01 0308 	and.w	r3, r1, r8
   1f30a:	4303      	orrs	r3, r0
   1f30c:	d019      	beq.n	1f342 <floor+0x62>
   1f30e:	a334      	add	r3, pc, #208	; (adr r3, 1f3e0 <floor+0x100>)
   1f310:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f314:	f7f9 f88a 	bl	1842c <__adddf3>
   1f318:	2200      	movs	r2, #0
   1f31a:	2300      	movs	r3, #0
   1f31c:	f7f9 fccc 	bl	18cb8 <__aeabi_dcmpgt>
   1f320:	b3d0      	cbz	r0, 1f398 <floor+0xb8>
   1f322:	2c00      	cmp	r4, #0
   1f324:	da04      	bge.n	1f330 <floor+0x50>
   1f326:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1f32a:	fa43 f505 	asr.w	r5, r3, r5
   1f32e:	442f      	add	r7, r5
   1f330:	ea27 0408 	bic.w	r4, r7, r8
   1f334:	2600      	movs	r6, #0
   1f336:	e02f      	b.n	1f398 <floor+0xb8>
   1f338:	2d33      	cmp	r5, #51	; 0x33
   1f33a:	dd06      	ble.n	1f34a <floor+0x6a>
   1f33c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   1f340:	d030      	beq.n	1f3a4 <floor+0xc4>
   1f342:	ec41 0b10 	vmov	d0, r0, r1
   1f346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f34a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   1f34e:	f04f 38ff 	mov.w	r8, #4294967295
   1f352:	fa28 f803 	lsr.w	r8, r8, r3
   1f356:	ea18 0f00 	tst.w	r8, r0
   1f35a:	d0f2      	beq.n	1f342 <floor+0x62>
   1f35c:	a320      	add	r3, pc, #128	; (adr r3, 1f3e0 <floor+0x100>)
   1f35e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f362:	f7f9 f863 	bl	1842c <__adddf3>
   1f366:	2200      	movs	r2, #0
   1f368:	2300      	movs	r3, #0
   1f36a:	f7f9 fca5 	bl	18cb8 <__aeabi_dcmpgt>
   1f36e:	b198      	cbz	r0, 1f398 <floor+0xb8>
   1f370:	2c00      	cmp	r4, #0
   1f372:	db28      	blt.n	1f3c6 <floor+0xe6>
   1f374:	ea26 0608 	bic.w	r6, r6, r8
   1f378:	463c      	mov	r4, r7
   1f37a:	e00d      	b.n	1f398 <floor+0xb8>
   1f37c:	a318      	add	r3, pc, #96	; (adr r3, 1f3e0 <floor+0x100>)
   1f37e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f382:	f7f9 f853 	bl	1842c <__adddf3>
   1f386:	2200      	movs	r2, #0
   1f388:	2300      	movs	r3, #0
   1f38a:	f7f9 fc95 	bl	18cb8 <__aeabi_dcmpgt>
   1f38e:	b118      	cbz	r0, 1f398 <floor+0xb8>
   1f390:	2c00      	cmp	r4, #0
   1f392:	db0f      	blt.n	1f3b4 <floor+0xd4>
   1f394:	2600      	movs	r6, #0
   1f396:	4634      	mov	r4, r6
   1f398:	4623      	mov	r3, r4
   1f39a:	4632      	mov	r2, r6
   1f39c:	ec43 2b10 	vmov	d0, r2, r3
   1f3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f3a4:	ee10 2a10 	vmov	r2, s0
   1f3a8:	460b      	mov	r3, r1
   1f3aa:	f7f9 f83f 	bl	1842c <__adddf3>
   1f3ae:	ec41 0b10 	vmov	d0, r0, r1
   1f3b2:	e7c8      	b.n	1f346 <floor+0x66>
   1f3b4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   1f3b8:	4a0c      	ldr	r2, [pc, #48]	; (1f3ec <floor+0x10c>)
   1f3ba:	4333      	orrs	r3, r6
   1f3bc:	2600      	movs	r6, #0
   1f3be:	42b3      	cmp	r3, r6
   1f3c0:	bf18      	it	ne
   1f3c2:	4614      	movne	r4, r2
   1f3c4:	e7e8      	b.n	1f398 <floor+0xb8>
   1f3c6:	2d14      	cmp	r5, #20
   1f3c8:	d008      	beq.n	1f3dc <floor+0xfc>
   1f3ca:	2301      	movs	r3, #1
   1f3cc:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   1f3d0:	fa03 f505 	lsl.w	r5, r3, r5
   1f3d4:	19ae      	adds	r6, r5, r6
   1f3d6:	bf28      	it	cs
   1f3d8:	18ff      	addcs	r7, r7, r3
   1f3da:	e7cb      	b.n	1f374 <floor+0x94>
   1f3dc:	3701      	adds	r7, #1
   1f3de:	e7c9      	b.n	1f374 <floor+0x94>
   1f3e0:	8800759c 	.word	0x8800759c
   1f3e4:	7e37e43c 	.word	0x7e37e43c
   1f3e8:	000fffff 	.word	0x000fffff
   1f3ec:	bff00000 	.word	0xbff00000

0001f3f0 <scalbn>:
   1f3f0:	b538      	push	{r3, r4, r5, lr}
   1f3f2:	ec53 2b10 	vmov	r2, r3, d0
   1f3f6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   1f3fa:	461c      	mov	r4, r3
   1f3fc:	4605      	mov	r5, r0
   1f3fe:	bb19      	cbnz	r1, 1f448 <scalbn+0x58>
   1f400:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   1f404:	ee10 1a10 	vmov	r1, s0
   1f408:	4321      	orrs	r1, r4
   1f40a:	d01c      	beq.n	1f446 <scalbn+0x56>
   1f40c:	4c38      	ldr	r4, [pc, #224]	; (1f4f0 <scalbn+0x100>)
   1f40e:	4619      	mov	r1, r3
   1f410:	2200      	movs	r2, #0
   1f412:	4b38      	ldr	r3, [pc, #224]	; (1f4f4 <scalbn+0x104>)
   1f414:	ee10 0a10 	vmov	r0, s0
   1f418:	f7f9 f9be 	bl	18798 <__aeabi_dmul>
   1f41c:	42a5      	cmp	r5, r4
   1f41e:	4602      	mov	r2, r0
   1f420:	460b      	mov	r3, r1
   1f422:	db34      	blt.n	1f48e <scalbn+0x9e>
   1f424:	460c      	mov	r4, r1
   1f426:	f3c1 510a 	ubfx	r1, r1, #20, #11
   1f42a:	3936      	subs	r1, #54	; 0x36
   1f42c:	4429      	add	r1, r5
   1f42e:	f240 70fe 	movw	r0, #2046	; 0x7fe
   1f432:	4281      	cmp	r1, r0
   1f434:	dc33      	bgt.n	1f49e <scalbn+0xae>
   1f436:	2900      	cmp	r1, #0
   1f438:	dd12      	ble.n	1f460 <scalbn+0x70>
   1f43a:	482f      	ldr	r0, [pc, #188]	; (1f4f8 <scalbn+0x108>)
   1f43c:	4020      	ands	r0, r4
   1f43e:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1f442:	ec43 2b10 	vmov	d0, r2, r3
   1f446:	bd38      	pop	{r3, r4, r5, pc}
   1f448:	f240 70ff 	movw	r0, #2047	; 0x7ff
   1f44c:	4281      	cmp	r1, r0
   1f44e:	d1ed      	bne.n	1f42c <scalbn+0x3c>
   1f450:	ee10 0a10 	vmov	r0, s0
   1f454:	4619      	mov	r1, r3
   1f456:	f7f8 ffe9 	bl	1842c <__adddf3>
   1f45a:	ec41 0b10 	vmov	d0, r0, r1
   1f45e:	bd38      	pop	{r3, r4, r5, pc}
   1f460:	f111 0f35 	cmn.w	r1, #53	; 0x35
   1f464:	da1e      	bge.n	1f4a4 <scalbn+0xb4>
   1f466:	f24c 3150 	movw	r1, #50000	; 0xc350
   1f46a:	428d      	cmp	r5, r1
   1f46c:	ec43 2b11 	vmov	d1, r2, r3
   1f470:	dd26      	ble.n	1f4c0 <scalbn+0xd0>
   1f472:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 1f4e0 <scalbn+0xf0>
   1f476:	f026 fc67 	bl	45d48 <copysign>
   1f47a:	a319      	add	r3, pc, #100	; (adr r3, 1f4e0 <scalbn+0xf0>)
   1f47c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f480:	ec51 0b10 	vmov	r0, r1, d0
   1f484:	f7f9 f988 	bl	18798 <__aeabi_dmul>
   1f488:	ec41 0b10 	vmov	d0, r0, r1
   1f48c:	bd38      	pop	{r3, r4, r5, pc}
   1f48e:	a316      	add	r3, pc, #88	; (adr r3, 1f4e8 <scalbn+0xf8>)
   1f490:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f494:	f7f9 f980 	bl	18798 <__aeabi_dmul>
   1f498:	ec41 0b10 	vmov	d0, r0, r1
   1f49c:	bd38      	pop	{r3, r4, r5, pc}
   1f49e:	ec43 2b11 	vmov	d1, r2, r3
   1f4a2:	e7e6      	b.n	1f472 <scalbn+0x82>
   1f4a4:	4814      	ldr	r0, [pc, #80]	; (1f4f8 <scalbn+0x108>)
   1f4a6:	3136      	adds	r1, #54	; 0x36
   1f4a8:	4020      	ands	r0, r4
   1f4aa:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1f4ae:	4610      	mov	r0, r2
   1f4b0:	2200      	movs	r2, #0
   1f4b2:	4619      	mov	r1, r3
   1f4b4:	4b11      	ldr	r3, [pc, #68]	; (1f4fc <scalbn+0x10c>)
   1f4b6:	f7f9 f96f 	bl	18798 <__aeabi_dmul>
   1f4ba:	ec41 0b10 	vmov	d0, r0, r1
   1f4be:	bd38      	pop	{r3, r4, r5, pc}
   1f4c0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 1f4e8 <scalbn+0xf8>
   1f4c4:	f026 fc40 	bl	45d48 <copysign>
   1f4c8:	a307      	add	r3, pc, #28	; (adr r3, 1f4e8 <scalbn+0xf8>)
   1f4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f4ce:	ec51 0b10 	vmov	r0, r1, d0
   1f4d2:	f7f9 f961 	bl	18798 <__aeabi_dmul>
   1f4d6:	ec41 0b10 	vmov	d0, r0, r1
   1f4da:	bd38      	pop	{r3, r4, r5, pc}
   1f4dc:	f3af 8000 	nop.w
   1f4e0:	8800759c 	.word	0x8800759c
   1f4e4:	7e37e43c 	.word	0x7e37e43c
   1f4e8:	c2f8f359 	.word	0xc2f8f359
   1f4ec:	01a56e1f 	.word	0x01a56e1f
   1f4f0:	ffff3cb0 	.word	0xffff3cb0
   1f4f4:	43500000 	.word	0x43500000
   1f4f8:	800fffff 	.word	0x800fffff
   1f4fc:	3c900000 	.word	0x3c900000

0001f500 <k_delayed_work_submit>:
   1f500:	460a      	mov	r2, r1
   1f502:	4601      	mov	r1, r0
   1f504:	4801      	ldr	r0, [pc, #4]	; (1f50c <k_delayed_work_submit+0xc>)
   1f506:	f01e be99 	b.w	3e23c <k_delayed_work_submit_to_queue>
   1f50a:	bf00      	nop
   1f50c:	2002a324 	.word	0x2002a324

0001f510 <long_press_handler>:
	}
}
#endif

static void long_press_handler(struct k_work *work)
{
   1f510:	b508      	push	{r3, lr}
	if (!atomic_get(&send_data_enable)) {
   1f512:	480f      	ldr	r0, [pc, #60]	; (1f550 <long_press_handler+0x40>)
   1f514:	f026 fc38 	bl	45d88 <atomic_get>
   1f518:	b920      	cbnz	r0, 1f524 <long_press_handler+0x14>
	} else {
		printk("Starting GPS\n");
		gps_control_enable();
		gps_control_start(K_SECONDS(1));
	}
}
   1f51a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Link not ready, long press disregarded\n");
   1f51e:	480d      	ldr	r0, [pc, #52]	; (1f554 <long_press_handler+0x44>)
   1f520:	f027 b89c 	b.w	4665c <printk>
	if (gps_control_is_enabled()) {
   1f524:	f001 f944 	bl	207b0 <gps_control_is_enabled>
   1f528:	b130      	cbz	r0, 1f538 <long_press_handler+0x28>
		printk("Stopping GPS\n");
   1f52a:	480b      	ldr	r0, [pc, #44]	; (1f558 <long_press_handler+0x48>)
   1f52c:	f027 f896 	bl	4665c <printk>
}
   1f530:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		gps_control_disable();
   1f534:	f001 b95a 	b.w	207ec <gps_control_disable>
		printk("Starting GPS\n");
   1f538:	4808      	ldr	r0, [pc, #32]	; (1f55c <long_press_handler+0x4c>)
   1f53a:	f027 f88f 	bl	4665c <printk>
		gps_control_enable();
   1f53e:	f001 f979 	bl	20834 <gps_control_enable>
}
   1f542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		gps_control_start(K_SECONDS(1));
   1f546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1f54a:	f001 b95f 	b.w	2080c <gps_control_start>
   1f54e:	bf00      	nop
   1f550:	2002388c 	.word	0x2002388c
   1f554:	0004b52f 	.word	0x0004b52f
   1f558:	0004b557 	.word	0x0004b557
   1f55c:	0004b565 	.word	0x0004b565

0001f560 <k_work_submit_to_queue.constprop.12>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   1f560:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f562:	f100 0308 	add.w	r3, r0, #8
   1f566:	e8d3 2fef 	ldaex	r2, [r3]
   1f56a:	f042 0001 	orr.w	r0, r2, #1
   1f56e:	e8c3 0fec 	stlex	ip, r0, [r3]
   1f572:	f1bc 0f00 	cmp.w	ip, #0
   1f576:	d1f6      	bne.n	1f566 <k_work_submit_to_queue.constprop.12+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1f578:	07d3      	lsls	r3, r2, #31
   1f57a:	d402      	bmi.n	1f582 <k_work_submit_to_queue.constprop.12+0x22>
		k_queue_append(&work_q->queue, work);
   1f57c:	4801      	ldr	r0, [pc, #4]	; (1f584 <k_work_submit_to_queue.constprop.12+0x24>)
   1f57e:	f029 ba57 	b.w	48a30 <k_queue_append>
}
   1f582:	4770      	bx	lr
   1f584:	2002a324 	.word	0x2002a324

0001f588 <modem_rsrp_handler>:
	rsrp.value = rsrp_value;
   1f588:	4b03      	ldr	r3, [pc, #12]	; (1f598 <modem_rsrp_handler+0x10>)
	if (rsrp.value == 255) {
   1f58a:	28ff      	cmp	r0, #255	; 0xff
	rsrp.value = rsrp_value;
   1f58c:	8018      	strh	r0, [r3, #0]
	if (rsrp.value == 255) {
   1f58e:	d002      	beq.n	1f596 <modem_rsrp_handler+0xe>
	k_work_submit_to_queue(&k_sys_work_q, work);
   1f590:	4802      	ldr	r0, [pc, #8]	; (1f59c <modem_rsrp_handler+0x14>)
   1f592:	f7ff bfe5 	b.w	1f560 <k_work_submit_to_queue.constprop.12>
}
   1f596:	4770      	bx	lr
   1f598:	200321a4 	.word	0x200321a4
   1f59c:	20023880 	.word	0x20023880

0001f5a0 <gps_trigger_handler>:
{
   1f5a0:	b570      	push	{r4, r5, r6, lr}
   1f5a2:	4604      	mov	r4, r0
	if (!atomic_get(&send_data_enable)) {
   1f5a4:	4819      	ldr	r0, [pc, #100]	; (1f60c <gps_trigger_handler+0x6c>)
   1f5a6:	f026 fbef 	bl	45d88 <atomic_get>
   1f5aa:	b128      	cbz	r0, 1f5b8 <gps_trigger_handler+0x18>
	if (++fix_count < CONFIG_GPS_CONTROL_FIX_COUNT) {
   1f5ac:	4a18      	ldr	r2, [pc, #96]	; (1f610 <gps_trigger_handler+0x70>)
   1f5ae:	6813      	ldr	r3, [r2, #0]
   1f5b0:	3301      	adds	r3, #1
   1f5b2:	2b02      	cmp	r3, #2
   1f5b4:	d801      	bhi.n	1f5ba <gps_trigger_handler+0x1a>
   1f5b6:	6013      	str	r3, [r2, #0]
}
   1f5b8:	bd70      	pop	{r4, r5, r6, pc}
	fix_count = 0;
   1f5ba:	2600      	movs	r6, #0
	ui_led_set_pattern(UI_LED_GPS_FIX);
   1f5bc:	2008      	movs	r0, #8
	fix_count = 0;
   1f5be:	6016      	str	r6, [r2, #0]
	ui_led_set_pattern(UI_LED_GPS_FIX);
   1f5c0:	f000 fdc2 	bl	20148 <ui_led_set_pattern>
static inline int gps_sample_fetch(struct device *dev)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->sample_fetch(dev);
   1f5c4:	6863      	ldr	r3, [r4, #4]
   1f5c6:	4620      	mov	r0, r4
   1f5c8:	685b      	ldr	r3, [r3, #4]
   1f5ca:	4798      	blx	r3
				  struct gps_data *data)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->channel_get(dev, chan, data);
   1f5cc:	4d11      	ldr	r5, [pc, #68]	; (1f614 <gps_trigger_handler+0x74>)
   1f5ce:	6863      	ldr	r3, [r4, #4]
   1f5d0:	4631      	mov	r1, r6
   1f5d2:	462a      	mov	r2, r5
   1f5d4:	689b      	ldr	r3, [r3, #8]
   1f5d6:	4620      	mov	r0, r4
   1f5d8:	4798      	blx	r3
	gps_cloud_data.data.buf = gps_data.nmea.buf;
   1f5da:	4b0f      	ldr	r3, [pc, #60]	; (1f618 <gps_trigger_handler+0x78>)
   1f5dc:	f105 0208 	add.w	r2, r5, #8
   1f5e0:	605a      	str	r2, [r3, #4]
	gps_cloud_data.data.len = gps_data.nmea.len;
   1f5e2:	f895 205b 	ldrb.w	r2, [r5, #91]	; 0x5b
	gps_control_stop(K_NO_WAIT);
   1f5e6:	2000      	movs	r0, #0
	gps_cloud_data.data.len = gps_data.nmea.len;
   1f5e8:	609a      	str	r2, [r3, #8]
	gps_cloud_data.tag += 1;
   1f5ea:	68da      	ldr	r2, [r3, #12]
	if (gps_cloud_data.tag == 0) {
   1f5ec:	3201      	adds	r2, #1
		gps_cloud_data.tag = 0x1;
   1f5ee:	bf08      	it	eq
   1f5f0:	2201      	moveq	r2, #1
   1f5f2:	60da      	str	r2, [r3, #12]
	gps_control_stop(K_NO_WAIT);
   1f5f4:	f001 f8e6 	bl	207c4 <gps_control_stop>
   1f5f8:	4808      	ldr	r0, [pc, #32]	; (1f61c <gps_trigger_handler+0x7c>)
   1f5fa:	f7ff ffb1 	bl	1f560 <k_work_submit_to_queue.constprop.12>
}
   1f5fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_delayed_work_submit(&send_env_data_work, K_NO_WAIT);
   1f602:	2100      	movs	r1, #0
   1f604:	4806      	ldr	r0, [pc, #24]	; (1f620 <gps_trigger_handler+0x80>)
   1f606:	f7ff bf7b 	b.w	1f500 <k_delayed_work_submit>
   1f60a:	bf00      	nop
   1f60c:	2002388c 	.word	0x2002388c
   1f610:	20023838 	.word	0x20023838
   1f614:	20020000 	.word	0x20020000
   1f618:	2002384c 	.word	0x2002384c
   1f61c:	200238bc 	.word	0x200238bc
   1f620:	20023890 	.word	0x20023890

0001f624 <error_handler>:
{
   1f624:	b510      	push	{r4, lr}
	if (err_type == ERROR_CLOUD) {
   1f626:	4604      	mov	r4, r0
   1f628:	b9b8      	cbnz	r0, 1f65a <error_handler+0x36>
		if (gps_control_is_enabled()) {
   1f62a:	f001 f8c1 	bl	207b0 <gps_control_is_enabled>
   1f62e:	b128      	cbz	r0, 1f63c <error_handler+0x18>
			printk("Reboot\n");
   1f630:	480d      	ldr	r0, [pc, #52]	; (1f668 <error_handler+0x44>)
   1f632:	f027 f813 	bl	4665c <printk>
			sys_reboot(0);
   1f636:	4620      	mov	r0, r4
   1f638:	f002 faba 	bl	21bb0 <sys_reboot>
		printk("LTE link disconnect\n");
   1f63c:	480b      	ldr	r0, [pc, #44]	; (1f66c <error_handler+0x48>)
   1f63e:	f027 f80d 	bl	4665c <printk>
		int err = lte_lc_power_off();
   1f642:	f00c fa6f 	bl	2bb24 <lte_lc_power_off>
		if (err) {
   1f646:	4601      	mov	r1, r0
   1f648:	b110      	cbz	r0, 1f650 <error_handler+0x2c>
			printk("lte_lc_power_off failed: %d\n", err);
   1f64a:	4809      	ldr	r0, [pc, #36]	; (1f670 <error_handler+0x4c>)
   1f64c:	f027 f806 	bl	4665c <printk>
		printk("Shutdown modem\n");
   1f650:	4808      	ldr	r0, [pc, #32]	; (1f674 <error_handler+0x50>)
   1f652:	f027 f803 	bl	4665c <printk>
		bsdlib_shutdown();
   1f656:	f028 fa54 	bl	47b02 <bsdlib_shutdown>
		z_arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   1f65a:	f001 fe55 	bl	21308 <z_impl_log_panic>
}
   1f65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sys_reboot(0);
   1f662:	2000      	movs	r0, #0
   1f664:	f002 baa4 	b.w	21bb0 <sys_reboot>
   1f668:	0004b445 	.word	0x0004b445
   1f66c:	0004b44d 	.word	0x0004b44d
   1f670:	0004b462 	.word	0x0004b462
   1f674:	0004b47f 	.word	0x0004b47f

0001f678 <k_sys_fatal_error_handler>:
{
   1f678:	b508      	push	{r3, lr}
   1f67a:	f001 fe45 	bl	21308 <z_impl_log_panic>
	printk("Running main.c error handler");
   1f67e:	4804      	ldr	r0, [pc, #16]	; (1f690 <k_sys_fatal_error_handler+0x18>)
   1f680:	f026 ffec 	bl	4665c <printk>
   1f684:	f001 fe40 	bl	21308 <z_impl_log_panic>
	sys_reboot(0);
   1f688:	2000      	movs	r0, #0
   1f68a:	f002 fa91 	bl	21bb0 <sys_reboot>
   1f68e:	bf00      	nop
   1f690:	0004b512 	.word	0x0004b512

0001f694 <sensor_data_send>:
{
   1f694:	b510      	push	{r4, lr}
   1f696:	4604      	mov	r4, r0
   1f698:	b086      	sub	sp, #24
	struct cloud_msg msg = {
   1f69a:	2218      	movs	r2, #24
   1f69c:	2100      	movs	r1, #0
   1f69e:	4668      	mov	r0, sp
   1f6a0:	f020 fb54 	bl	3fd4c <memset>
	if (data->type == CLOUD_CHANNEL_DEVICE_INFO) {
   1f6a4:	7823      	ldrb	r3, [r4, #0]
	if (!atomic_get(&send_data_enable) || gps_control_is_active()) {
   1f6a6:	4817      	ldr	r0, [pc, #92]	; (1f704 <sensor_data_send+0x70>)
	if (data->type == CLOUD_CHANNEL_DEVICE_INFO) {
   1f6a8:	2b0c      	cmp	r3, #12
		msg.endpoint.type = CLOUD_EP_TOPIC_STATE;
   1f6aa:	bf04      	itt	eq
   1f6ac:	2301      	moveq	r3, #1
   1f6ae:	f88d 300c 	strbeq.w	r3, [sp, #12]
	if (!atomic_get(&send_data_enable) || gps_control_is_active()) {
   1f6b2:	f026 fb69 	bl	45d88 <atomic_get>
   1f6b6:	b1f8      	cbz	r0, 1f6f8 <sensor_data_send+0x64>
   1f6b8:	f001 f870 	bl	2079c <gps_control_is_active>
   1f6bc:	b9e0      	cbnz	r0, 1f6f8 <sensor_data_send+0x64>
	if (data->type != CLOUD_CHANNEL_DEVICE_INFO) {
   1f6be:	7823      	ldrb	r3, [r4, #0]
		err = cloud_encode_data(data, &msg);
   1f6c0:	4669      	mov	r1, sp
	if (data->type != CLOUD_CHANNEL_DEVICE_INFO) {
   1f6c2:	2b0c      	cmp	r3, #12
		err = cloud_encode_data(data, &msg);
   1f6c4:	4620      	mov	r0, r4
	if (data->type != CLOUD_CHANNEL_DEVICE_INFO) {
   1f6c6:	d019      	beq.n	1f6fc <sensor_data_send+0x68>
		err = cloud_encode_data(data, &msg);
   1f6c8:	f000 fe0c 	bl	202e4 <cloud_encode_data>
	if (err) {
   1f6cc:	b118      	cbz	r0, 1f6d6 <sensor_data_send+0x42>
		printk("Unable to encode cloud data: %d\n", err);
   1f6ce:	4601      	mov	r1, r0
   1f6d0:	480d      	ldr	r0, [pc, #52]	; (1f708 <sensor_data_send+0x74>)
   1f6d2:	f026 ffc3 	bl	4665c <printk>
	err = cloud_send(cloud_backend, &msg);
   1f6d6:	4b0d      	ldr	r3, [pc, #52]	; (1f70c <sensor_data_send+0x78>)
   1f6d8:	4669      	mov	r1, sp
   1f6da:	6818      	ldr	r0, [r3, #0]
   1f6dc:	f026 fb4b 	bl	45d76 <cloud_send>
   1f6e0:	4604      	mov	r4, r0
 *
 * @return 0 if the operation was successful, otherwise a (negative) error code.
 */
static inline void cloud_release_data(struct cloud_msg *data)
{
	k_free(data->buf);
   1f6e2:	9800      	ldr	r0, [sp, #0]
   1f6e4:	f029 f96f 	bl	489c6 <k_free>
	if (err) {
   1f6e8:	b134      	cbz	r4, 1f6f8 <sensor_data_send+0x64>
		printk("sensor_data_send failed: %d\n", err);
   1f6ea:	4809      	ldr	r0, [pc, #36]	; (1f710 <sensor_data_send+0x7c>)
   1f6ec:	4621      	mov	r1, r4
   1f6ee:	f026 ffb5 	bl	4665c <printk>
		cloud_error_handler(err);
   1f6f2:	4620      	mov	r0, r4
   1f6f4:	f026 fb50 	bl	45d98 <cloud_error_handler>
}
   1f6f8:	b006      	add	sp, #24
   1f6fa:	bd10      	pop	{r4, pc}
		err = cloud_encode_digital_twin_data(data, &msg);
   1f6fc:	f000 fe54 	bl	203a8 <cloud_encode_digital_twin_data>
   1f700:	e7e4      	b.n	1f6cc <sensor_data_send+0x38>
   1f702:	bf00      	nop
   1f704:	2002388c 	.word	0x2002388c
   1f708:	0004b949 	.word	0x0004b949
   1f70c:	20023808 	.word	0x20023808
   1f710:	0004b96a 	.word	0x0004b96a

0001f714 <device_status_send>:
{
   1f714:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!atomic_get(&send_data_enable)) {
   1f716:	4823      	ldr	r0, [pc, #140]	; (1f7a4 <device_status_send+0x90>)
{
   1f718:	b08b      	sub	sp, #44	; 0x2c
	if (!atomic_get(&send_data_enable)) {
   1f71a:	f026 fb35 	bl	45d88 <atomic_get>
   1f71e:	b130      	cbz	r0, 1f72e <device_status_send+0x1a>
	cJSON *root_obj = cJSON_CreateObject();
   1f720:	f005 fc14 	bl	24f4c <cJSON_CreateObject>
	if (root_obj == NULL) {
   1f724:	4607      	mov	r7, r0
   1f726:	b920      	cbnz	r0, 1f732 <device_status_send+0x1e>
		printk("Unable to allocate JSON object\n");
   1f728:	481f      	ldr	r0, [pc, #124]	; (1f7a8 <device_status_send+0x94>)
   1f72a:	f026 ff97 	bl	4665c <printk>
}
   1f72e:	b00b      	add	sp, #44	; 0x2c
   1f730:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int ret = modem_info_params_get(&modem_param);
   1f732:	481e      	ldr	r0, [pc, #120]	; (1f7ac <device_status_send+0x98>)
   1f734:	f007 f8ca 	bl	268cc <modem_info_params_get>
	if (ret < 0) {
   1f738:	1e01      	subs	r1, r0, #0
   1f73a:	da25      	bge.n	1f788 <device_status_send+0x74>
		printk("Unable to obtain modem parameters: %d\n", ret);
   1f73c:	481c      	ldr	r0, [pc, #112]	; (1f7b0 <device_status_send+0x9c>)
   1f73e:	f026 ff8d 	bl	4665c <printk>
	size_t item_cnt = 0;
   1f742:	2600      	movs	r6, #0
	const char *const ui[] = {
   1f744:	4c1b      	ldr	r4, [pc, #108]	; (1f7b4 <device_status_send+0xa0>)
   1f746:	ad05      	add	r5, sp, #20
   1f748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1f74a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f74c:	f854 3b04 	ldr.w	r3, [r4], #4
	const char *const fota[] = {
   1f750:	aa03      	add	r2, sp, #12
	const char *const ui[] = {
   1f752:	602b      	str	r3, [r5, #0]
	if (service_info_json_object_encode(ui, ARRAY_SIZE(ui),
   1f754:	2301      	movs	r3, #1
	const char *const fota[] = {
   1f756:	e894 0003 	ldmia.w	r4, {r0, r1}
   1f75a:	e882 0003 	stmia.w	r2, {r0, r1}
	if (service_info_json_object_encode(ui, ARRAY_SIZE(ui),
   1f75e:	9300      	str	r3, [sp, #0]
   1f760:	9701      	str	r7, [sp, #4]
   1f762:	2302      	movs	r3, #2
   1f764:	2105      	movs	r1, #5
   1f766:	a805      	add	r0, sp, #20
   1f768:	f000 ff3a 	bl	205e0 <service_info_json_object_encode>
   1f76c:	b998      	cbnz	r0, 1f796 <device_status_send+0x82>
		++item_cnt;
   1f76e:	3601      	adds	r6, #1
	device_cloud_data.data.buf = (char *)root_obj;
   1f770:	4b11      	ldr	r3, [pc, #68]	; (1f7b8 <device_status_send+0xa4>)
	sensor_data_send(&device_cloud_data);
   1f772:	4811      	ldr	r0, [pc, #68]	; (1f7b8 <device_status_send+0xa4>)
	device_cloud_data.tag += 1;
   1f774:	68da      	ldr	r2, [r3, #12]
	device_cloud_data.data.len = item_cnt;
   1f776:	e9c3 7601 	strd	r7, r6, [r3, #4]
	if (device_cloud_data.tag == 0) {
   1f77a:	3201      	adds	r2, #1
		device_cloud_data.tag = 0x1;
   1f77c:	bf08      	it	eq
   1f77e:	2201      	moveq	r2, #1
   1f780:	60da      	str	r2, [r3, #12]
	sensor_data_send(&device_cloud_data);
   1f782:	f7ff ff87 	bl	1f694 <sensor_data_send>
   1f786:	e7d2      	b.n	1f72e <device_status_send+0x1a>
		ret = modem_info_json_object_encode(&modem_param, root_obj);
   1f788:	4639      	mov	r1, r7
   1f78a:	4808      	ldr	r0, [pc, #32]	; (1f7ac <device_status_send+0x98>)
   1f78c:	f007 fa20 	bl	26bd0 <modem_info_json_object_encode>
			item_cnt = (size_t)ret;
   1f790:	ea20 76e0 	bic.w	r6, r0, r0, asr #31
   1f794:	e7d6      	b.n	1f744 <device_status_send+0x30>
	if (item_cnt == 0) {
   1f796:	2e00      	cmp	r6, #0
   1f798:	d1ea      	bne.n	1f770 <device_status_send+0x5c>
		cJSON_Delete(root_obj);
   1f79a:	4638      	mov	r0, r7
   1f79c:	f005 fb10 	bl	24dc0 <cJSON_Delete>
		return;
   1f7a0:	e7c5      	b.n	1f72e <device_status_send+0x1a>
   1f7a2:	bf00      	nop
   1f7a4:	2002388c 	.word	0x2002388c
   1f7a8:	0004b3fe 	.word	0x0004b3fe
   1f7ac:	200200c0 	.word	0x200200c0
   1f7b0:	0004b41e 	.word	0x0004b41e
   1f7b4:	00049140 	.word	0x00049140
   1f7b8:	20031600 	.word	0x20031600

0001f7bc <modem_rsrp_data_send>:
{
   1f7bc:	b510      	push	{r4, lr}
   1f7be:	b0a0      	sub	sp, #128	; 0x80
	char buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1f7c0:	2280      	movs	r2, #128	; 0x80
   1f7c2:	2100      	movs	r1, #0
   1f7c4:	4668      	mov	r0, sp
   1f7c6:	f020 fac1 	bl	3fd4c <memset>
	if (!atomic_get(&send_data_enable)) {
   1f7ca:	4813      	ldr	r0, [pc, #76]	; (1f818 <modem_rsrp_data_send+0x5c>)
   1f7cc:	f026 fadc 	bl	45d88 <atomic_get>
   1f7d0:	b300      	cbz	r0, 1f814 <modem_rsrp_data_send+0x58>
		(void)z_arch_syscall_invoke1((u32_t)&ret64, K_SYSCALL_K_UPTIME_GET);
		return (s64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_get();
   1f7d2:	f029 fa0b 	bl	48bec <z_impl_k_uptime_get>
	if (k_uptime_get_32() - timestamp_prev <
   1f7d6:	4c11      	ldr	r4, [pc, #68]	; (1f81c <modem_rsrp_data_send+0x60>)
   1f7d8:	6822      	ldr	r2, [r4, #0]
   1f7da:	1a80      	subs	r0, r0, r2
   1f7dc:	f64e 225f 	movw	r2, #59999	; 0xea5f
   1f7e0:	4290      	cmp	r0, r2
   1f7e2:	d917      	bls.n	1f814 <modem_rsrp_data_send+0x58>
	len = snprintf(buf, CONFIG_MODEM_INFO_BUFFER_SIZE,
   1f7e4:	4a0e      	ldr	r2, [pc, #56]	; (1f820 <modem_rsrp_data_send+0x64>)
   1f7e6:	4668      	mov	r0, sp
   1f7e8:	8811      	ldrh	r1, [r2, #0]
   1f7ea:	8853      	ldrh	r3, [r2, #2]
   1f7ec:	4a0d      	ldr	r2, [pc, #52]	; (1f824 <modem_rsrp_data_send+0x68>)
   1f7ee:	1acb      	subs	r3, r1, r3
   1f7f0:	2180      	movs	r1, #128	; 0x80
   1f7f2:	f020 fcf7 	bl	401e4 <snprintf>
	signal_strength_cloud_data.data.buf = buf;
   1f7f6:	4b0c      	ldr	r3, [pc, #48]	; (1f828 <modem_rsrp_data_send+0x6c>)
	signal_strength_cloud_data.tag += 1;
   1f7f8:	68da      	ldr	r2, [r3, #12]
	signal_strength_cloud_data.data.len = len;
   1f7fa:	6098      	str	r0, [r3, #8]
	if (signal_strength_cloud_data.tag == 0) {
   1f7fc:	3201      	adds	r2, #1
		signal_strength_cloud_data.tag = 0x1;
   1f7fe:	bf08      	it	eq
   1f800:	2201      	moveq	r2, #1
	sensor_data_send(&signal_strength_cloud_data);
   1f802:	4809      	ldr	r0, [pc, #36]	; (1f828 <modem_rsrp_data_send+0x6c>)
	signal_strength_cloud_data.data.buf = buf;
   1f804:	f8c3 d004 	str.w	sp, [r3, #4]
		signal_strength_cloud_data.tag = 0x1;
   1f808:	60da      	str	r2, [r3, #12]
	sensor_data_send(&signal_strength_cloud_data);
   1f80a:	f7ff ff43 	bl	1f694 <sensor_data_send>
   1f80e:	f029 f9ed 	bl	48bec <z_impl_k_uptime_get>
	return (u32_t)k_uptime_get();
   1f812:	6020      	str	r0, [r4, #0]
}
   1f814:	b020      	add	sp, #128	; 0x80
   1f816:	bd10      	pop	{r4, pc}
   1f818:	2002388c 	.word	0x2002388c
   1f81c:	200238d8 	.word	0x200238d8
   1f820:	200321a4 	.word	0x200321a4
   1f824:	0004e42b 	.word	0x0004e42b
   1f828:	200238c8 	.word	0x200238c8

0001f82c <send_flip_data_work_fn>:
	sensor_data_send(&flip_cloud_data);
   1f82c:	4801      	ldr	r0, [pc, #4]	; (1f834 <send_flip_data_work_fn+0x8>)
   1f82e:	f7ff bf31 	b.w	1f694 <sensor_data_send>
   1f832:	bf00      	nop
   1f834:	2002383c 	.word	0x2002383c

0001f838 <send_gps_data_work_fn>:
	sensor_data_send(&gps_cloud_data);
   1f838:	4801      	ldr	r0, [pc, #4]	; (1f840 <send_gps_data_work_fn+0x8>)
   1f83a:	f7ff bf2b 	b.w	1f694 <sensor_data_send>
   1f83e:	bf00      	nop
   1f840:	2002384c 	.word	0x2002384c

0001f844 <ui_evt_handler>:
}

#if defined(CONFIG_USE_UI_MODULE)
/**@brief User interface event handler. */
static void ui_evt_handler(struct ui_evt evt)
{
   1f844:	b570      	push	{r4, r5, r6, lr}
   1f846:	b088      	sub	sp, #32
   1f848:	466b      	mov	r3, sp
	if (pattern_recording) {
   1f84a:	4d4a      	ldr	r5, [pc, #296]	; (1f974 <ui_evt_handler+0x130>)
{
   1f84c:	e883 0003 	stmia.w	r3, {r0, r1}
	if (pattern_recording) {
   1f850:	682b      	ldr	r3, [r5, #0]
   1f852:	f89d 1000 	ldrb.w	r1, [sp]
   1f856:	9a01      	ldr	r2, [sp, #4]
   1f858:	2b00      	cmp	r3, #0
   1f85a:	d054      	beq.n	1f906 <ui_evt_handler+0xc2>
	if (buttons_captured < buttons_to_capture) {
   1f85c:	4c46      	ldr	r4, [pc, #280]	; (1f978 <ui_evt_handler+0x134>)
   1f85e:	4e47      	ldr	r6, [pc, #284]	; (1f97c <ui_evt_handler+0x138>)
   1f860:	6823      	ldr	r3, [r4, #0]
   1f862:	6830      	ldr	r0, [r6, #0]
   1f864:	4283      	cmp	r3, r0
   1f866:	da0a      	bge.n	1f87e <ui_evt_handler+0x3a>
		if (evt->button == UI_BUTTON_1 &&
   1f868:	2a01      	cmp	r2, #1
   1f86a:	d12f      	bne.n	1f8cc <ui_evt_handler+0x88>
   1f86c:	b939      	cbnz	r1, 1f87e <ui_evt_handler+0x3a>
			ua_pattern[buttons_captured++] =
   1f86e:	2103      	movs	r1, #3
   1f870:	1c5a      	adds	r2, r3, #1
   1f872:	6022      	str	r2, [r4, #0]
   1f874:	4a42      	ldr	r2, [pc, #264]	; (1f980 <ui_evt_handler+0x13c>)
			printk("Button 1\n");
   1f876:	4843      	ldr	r0, [pc, #268]	; (1f984 <ui_evt_handler+0x140>)
			ua_pattern[buttons_captured++] =
   1f878:	54d1      	strb	r1, [r2, r3]
			printk("Switch 2\n");
   1f87a:	f026 feef 	bl	4665c <printk>
	if (buttons_captured == buttons_to_capture) {
   1f87e:	6824      	ldr	r4, [r4, #0]
   1f880:	6833      	ldr	r3, [r6, #0]
   1f882:	429c      	cmp	r4, r3
   1f884:	d120      	bne.n	1f8c8 <ui_evt_handler+0x84>
	struct cloud_msg msg = {
   1f886:	2210      	movs	r2, #16
   1f888:	2100      	movs	r1, #0
   1f88a:	eb0d 0002 	add.w	r0, sp, r2
   1f88e:	f020 fa5d 	bl	3fd4c <memset>
   1f892:	4b3b      	ldr	r3, [pc, #236]	; (1f980 <ui_evt_handler+0x13c>)
   1f894:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1f898:	2303      	movs	r3, #3
   1f89a:	f88d 3014 	strb.w	r3, [sp, #20]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f89e:	2300      	movs	r3, #0
   1f8a0:	e8d5 2fef 	ldaex	r2, [r5]
   1f8a4:	e8c5 3fe1 	stlex	r1, r3, [r5]
   1f8a8:	2900      	cmp	r1, #0
   1f8aa:	d1f9      	bne.n	1f8a0 <ui_evt_handler+0x5c>
	err = cloud_send(cloud_backend, &msg);
   1f8ac:	4b36      	ldr	r3, [pc, #216]	; (1f988 <ui_evt_handler+0x144>)
   1f8ae:	a902      	add	r1, sp, #8
   1f8b0:	6818      	ldr	r0, [r3, #0]
   1f8b2:	f026 fa60 	bl	45d76 <cloud_send>
	if (err) {
   1f8b6:	4604      	mov	r4, r0
   1f8b8:	b130      	cbz	r0, 1f8c8 <ui_evt_handler+0x84>
		printk("Could not send association message, error: %d\n", err);
   1f8ba:	4601      	mov	r1, r0
   1f8bc:	4833      	ldr	r0, [pc, #204]	; (1f98c <ui_evt_handler+0x148>)
   1f8be:	f026 fecd 	bl	4665c <printk>
		cloud_error_handler(err);
   1f8c2:	4620      	mov	r0, r4
   1f8c4:	f026 fa68 	bl	45d98 <cloud_error_handler>
				error_handler(ERROR_LTE_LC, err);
			}
		}
	}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */
}
   1f8c8:	b008      	add	sp, #32
   1f8ca:	bd70      	pop	{r4, r5, r6, pc}
		} else if (evt->button == UI_BUTTON_2 &&
   1f8cc:	2a02      	cmp	r2, #2
   1f8ce:	d108      	bne.n	1f8e2 <ui_evt_handler+0x9e>
   1f8d0:	2900      	cmp	r1, #0
   1f8d2:	d1d4      	bne.n	1f87e <ui_evt_handler+0x3a>
			ua_pattern[buttons_captured++] =
   1f8d4:	2104      	movs	r1, #4
   1f8d6:	1c5a      	adds	r2, r3, #1
   1f8d8:	6022      	str	r2, [r4, #0]
   1f8da:	4a29      	ldr	r2, [pc, #164]	; (1f980 <ui_evt_handler+0x13c>)
			printk("Button 2\n");
   1f8dc:	482c      	ldr	r0, [pc, #176]	; (1f990 <ui_evt_handler+0x14c>)
			ua_pattern[buttons_captured++] =
   1f8de:	54d1      	strb	r1, [r2, r3]
   1f8e0:	e7cb      	b.n	1f87a <ui_evt_handler+0x36>
		} else if (evt->button == UI_SWITCH_1) {
   1f8e2:	2a03      	cmp	r2, #3
   1f8e4:	d106      	bne.n	1f8f4 <ui_evt_handler+0xb0>
			ua_pattern[buttons_captured++] =
   1f8e6:	2101      	movs	r1, #1
   1f8e8:	1c5a      	adds	r2, r3, #1
   1f8ea:	6022      	str	r2, [r4, #0]
   1f8ec:	4a24      	ldr	r2, [pc, #144]	; (1f980 <ui_evt_handler+0x13c>)
			printk("Switch 1\n");
   1f8ee:	4829      	ldr	r0, [pc, #164]	; (1f994 <ui_evt_handler+0x150>)
			ua_pattern[buttons_captured++] =
   1f8f0:	54d1      	strb	r1, [r2, r3]
   1f8f2:	e7c2      	b.n	1f87a <ui_evt_handler+0x36>
		} else if (evt->button == UI_SWITCH_2) {
   1f8f4:	2a04      	cmp	r2, #4
   1f8f6:	d1c2      	bne.n	1f87e <ui_evt_handler+0x3a>
			ua_pattern[buttons_captured++] =
   1f8f8:	2102      	movs	r1, #2
   1f8fa:	1c5a      	adds	r2, r3, #1
   1f8fc:	6022      	str	r2, [r4, #0]
   1f8fe:	4a20      	ldr	r2, [pc, #128]	; (1f980 <ui_evt_handler+0x13c>)
			printk("Switch 2\n");
   1f900:	4825      	ldr	r0, [pc, #148]	; (1f998 <ui_evt_handler+0x154>)
			ua_pattern[buttons_captured++] =
   1f902:	54d1      	strb	r1, [r2, r3]
   1f904:	e7b9      	b.n	1f87a <ui_evt_handler+0x36>
	if (IS_ENABLED(CONFIG_ACCEL_USE_SIM) && (evt.button == FLIP_INPUT)
   1f906:	2a03      	cmp	r2, #3
   1f908:	d127      	bne.n	1f95a <ui_evt_handler+0x116>
	   && atomic_get(&send_data_enable)) {
   1f90a:	4824      	ldr	r0, [pc, #144]	; (1f99c <ui_evt_handler+0x158>)
   1f90c:	f026 fa3c 	bl	45d88 <atomic_get>
   1f910:	2800      	cmp	r0, #0
   1f912:	d0d9      	beq.n	1f8c8 <ui_evt_handler+0x84>
	if (!flip_mode_enabled || !atomic_get(&send_data_enable)) {
   1f914:	4821      	ldr	r0, [pc, #132]	; (1f99c <ui_evt_handler+0x158>)
   1f916:	f026 fa37 	bl	45d88 <atomic_get>
   1f91a:	2800      	cmp	r0, #0
   1f91c:	d0d4      	beq.n	1f8c8 <ui_evt_handler+0x84>
	if (orientation_detector_poll(&sensor_data) == 0) {
   1f91e:	4c20      	ldr	r4, [pc, #128]	; (1f9a0 <ui_evt_handler+0x15c>)
   1f920:	4620      	mov	r0, r4
   1f922:	f7fa fca1 	bl	1a268 <orientation_detector_poll>
   1f926:	2800      	cmp	r0, #0
   1f928:	d1ce      	bne.n	1f8c8 <ui_evt_handler+0x84>
		if (sensor_data.orientation == last_orientation_state) {
   1f92a:	4b1e      	ldr	r3, [pc, #120]	; (1f9a4 <ui_evt_handler+0x160>)
   1f92c:	7e22      	ldrb	r2, [r4, #24]
   1f92e:	7819      	ldrb	r1, [r3, #0]
   1f930:	4291      	cmp	r1, r2
   1f932:	d0c9      	beq.n	1f8c8 <ui_evt_handler+0x84>
		switch (sensor_data.orientation) {
   1f934:	2a01      	cmp	r2, #1
   1f936:	d006      	beq.n	1f946 <ui_evt_handler+0x102>
   1f938:	2a02      	cmp	r2, #2
   1f93a:	d1c5      	bne.n	1f8c8 <ui_evt_handler+0x84>
			flip_cloud_data.data.buf = "UPSIDE_DOWN";
   1f93c:	481a      	ldr	r0, [pc, #104]	; (1f9a8 <ui_evt_handler+0x164>)
   1f93e:	491b      	ldr	r1, [pc, #108]	; (1f9ac <ui_evt_handler+0x168>)
   1f940:	6048      	str	r0, [r1, #4]
			flip_cloud_data.data.len = sizeof("UPSIDE_DOWN") - 1;
   1f942:	200b      	movs	r0, #11
   1f944:	e003      	b.n	1f94e <ui_evt_handler+0x10a>
			flip_cloud_data.data.buf = "NORMAL";
   1f946:	481a      	ldr	r0, [pc, #104]	; (1f9b0 <ui_evt_handler+0x16c>)
   1f948:	4918      	ldr	r1, [pc, #96]	; (1f9ac <ui_evt_handler+0x168>)
   1f94a:	6048      	str	r0, [r1, #4]
			flip_cloud_data.data.len = sizeof("NORMAL") - 1;
   1f94c:	2006      	movs	r0, #6
			flip_cloud_data.data.len = sizeof("UPSIDE_DOWN") - 1;
   1f94e:	6088      	str	r0, [r1, #8]
	k_work_submit_to_queue(&k_sys_work_q, work);
   1f950:	4818      	ldr	r0, [pc, #96]	; (1f9b4 <ui_evt_handler+0x170>)
		last_orientation_state = sensor_data.orientation;
   1f952:	701a      	strb	r2, [r3, #0]
   1f954:	f7ff fe04 	bl	1f560 <k_work_submit_to_queue.constprop.12>
   1f958:	e7b6      	b.n	1f8c8 <ui_evt_handler+0x84>
	if (IS_ENABLED(CONFIG_GPS_CONTROL_ON_LONG_PRESS) &&
   1f95a:	2a01      	cmp	r2, #1
   1f95c:	d1b4      	bne.n	1f8c8 <ui_evt_handler+0x84>
		if (evt.type == UI_EVT_BUTTON_ACTIVE) {
   1f95e:	b929      	cbnz	r1, 1f96c <ui_evt_handler+0x128>
			k_delayed_work_submit(&long_press_button_work,
   1f960:	f241 3188 	movw	r1, #5000	; 0x1388
   1f964:	4814      	ldr	r0, [pc, #80]	; (1f9b8 <ui_evt_handler+0x174>)
   1f966:	f7ff fdcb 	bl	1f500 <k_delayed_work_submit>
   1f96a:	e7ad      	b.n	1f8c8 <ui_evt_handler+0x84>
			k_delayed_work_cancel(&long_press_button_work);
   1f96c:	4812      	ldr	r0, [pc, #72]	; (1f9b8 <ui_evt_handler+0x174>)
   1f96e:	f01e fcef 	bl	3e350 <k_delayed_work_cancel>
   1f972:	e7a9      	b.n	1f8c8 <ui_evt_handler+0x84>
   1f974:	2002387c 	.word	0x2002387c
   1f978:	20023800 	.word	0x20023800
   1f97c:	20023804 	.word	0x20023804
   1f980:	2002a43e 	.word	0x2002a43e
   1f984:	0004ba21 	.word	0x0004ba21
   1f988:	20023808 	.word	0x20023808
   1f98c:	0004ba49 	.word	0x0004ba49
   1f990:	0004ba2b 	.word	0x0004ba2b
   1f994:	0004ba35 	.word	0x0004ba35
   1f998:	0004ba3f 	.word	0x0004ba3f
   1f99c:	2002388c 	.word	0x2002388c
   1f9a0:	20020938 	.word	0x20020938
   1f9a4:	2002a43d 	.word	0x2002a43d
   1f9a8:	0004ba7f 	.word	0x0004ba7f
   1f9ac:	2002383c 	.word	0x2002383c
   1f9b0:	0004ba78 	.word	0x0004ba78
   1f9b4:	200238b0 	.word	0x200238b0
   1f9b8:	2002385c 	.word	0x2002385c

0001f9bc <send_env_data_work_fn>:
{
   1f9bc:	b510      	push	{r4, lr}
   1f9be:	b08a      	sub	sp, #40	; 0x28
	struct cloud_msg msg = {
   1f9c0:	2218      	movs	r2, #24
   1f9c2:	2100      	movs	r1, #0
   1f9c4:	a804      	add	r0, sp, #16
   1f9c6:	f020 f9c1 	bl	3fd4c <memset>
	if (!atomic_get(&send_data_enable)) {
   1f9ca:	4839      	ldr	r0, [pc, #228]	; (1fab0 <send_env_data_work_fn+0xf4>)
   1f9cc:	f026 f9dc 	bl	45d88 <atomic_get>
   1f9d0:	b138      	cbz	r0, 1f9e2 <send_env_data_work_fn+0x26>
	if (gps_control_is_active()) {
   1f9d2:	f000 fee3 	bl	2079c <gps_control_is_active>
   1f9d6:	b130      	cbz	r0, 1f9e6 <send_env_data_work_fn+0x2a>
		k_delayed_work_submit(&send_env_data_work,
   1f9d8:	f644 6120 	movw	r1, #20000	; 0x4e20
	k_delayed_work_submit(&send_env_data_work,
   1f9dc:	4835      	ldr	r0, [pc, #212]	; (1fab4 <send_env_data_work_fn+0xf8>)
   1f9de:	f7ff fd8f 	bl	1f500 <k_delayed_work_submit>
}
   1f9e2:	b00a      	add	sp, #40	; 0x28
   1f9e4:	bd10      	pop	{r4, pc}
	if (env_sensors_get_temperature(&env_data) == 0) {
   1f9e6:	4668      	mov	r0, sp
   1f9e8:	f000 ffa8 	bl	2093c <env_sensors_get_temperature>
   1f9ec:	b180      	cbz	r0, 1fa10 <send_env_data_work_fn+0x54>
	if (env_sensors_get_humidity(&env_data) == 0) {
   1f9ee:	4668      	mov	r0, sp
   1f9f0:	f000 fffc 	bl	209ec <env_sensors_get_humidity>
   1f9f4:	b328      	cbz	r0, 1fa42 <send_env_data_work_fn+0x86>
	if (env_sensors_get_pressure(&env_data) == 0) {
   1f9f6:	4668      	mov	r0, sp
   1f9f8:	f001 f850 	bl	20a9c <env_sensors_get_pressure>
   1f9fc:	2800      	cmp	r0, #0
   1f9fe:	d032      	beq.n	1fa66 <send_env_data_work_fn+0xaa>
	if (env_sensors_get_air_quality(&env_data) == 0) {
   1fa00:	4668      	mov	r0, sp
   1fa02:	f026 fa34 	bl	45e6e <env_sensors_get_air_quality>
   1fa06:	2800      	cmp	r0, #0
   1fa08:	d03f      	beq.n	1fa8a <send_env_data_work_fn+0xce>
	k_delayed_work_submit(&send_env_data_work,
   1fa0a:	f247 5130 	movw	r1, #30000	; 0x7530
   1fa0e:	e7e5      	b.n	1f9dc <send_env_data_work_fn+0x20>
		if (cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   1fa10:	a904      	add	r1, sp, #16
   1fa12:	4668      	mov	r0, sp
   1fa14:	f000 fd96 	bl	20544 <cloud_encode_env_sensors_data>
   1fa18:	2800      	cmp	r0, #0
   1fa1a:	d1e8      	bne.n	1f9ee <send_env_data_work_fn+0x32>
			err = cloud_send(cloud_backend, &msg);
   1fa1c:	4b26      	ldr	r3, [pc, #152]	; (1fab8 <send_env_data_work_fn+0xfc>)
   1fa1e:	a904      	add	r1, sp, #16
   1fa20:	6818      	ldr	r0, [r3, #0]
   1fa22:	f026 f9a8 	bl	45d76 <cloud_send>
   1fa26:	4604      	mov	r4, r0
   1fa28:	9804      	ldr	r0, [sp, #16]
   1fa2a:	f028 ffcc 	bl	489c6 <k_free>
			if (err) {
   1fa2e:	2c00      	cmp	r4, #0
   1fa30:	d0dd      	beq.n	1f9ee <send_env_data_work_fn+0x32>
	printk("sensor_data_send failed: %d\n", err);
   1fa32:	4621      	mov	r1, r4
   1fa34:	4821      	ldr	r0, [pc, #132]	; (1fabc <send_env_data_work_fn+0x100>)
   1fa36:	f026 fe11 	bl	4665c <printk>
	cloud_error_handler(err);
   1fa3a:	4620      	mov	r0, r4
   1fa3c:	f026 f9ac 	bl	45d98 <cloud_error_handler>
   1fa40:	e7cf      	b.n	1f9e2 <send_env_data_work_fn+0x26>
		if (cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   1fa42:	a904      	add	r1, sp, #16
   1fa44:	4668      	mov	r0, sp
   1fa46:	f000 fd7d 	bl	20544 <cloud_encode_env_sensors_data>
   1fa4a:	2800      	cmp	r0, #0
   1fa4c:	d1d3      	bne.n	1f9f6 <send_env_data_work_fn+0x3a>
			err = cloud_send(cloud_backend, &msg);
   1fa4e:	4b1a      	ldr	r3, [pc, #104]	; (1fab8 <send_env_data_work_fn+0xfc>)
   1fa50:	a904      	add	r1, sp, #16
   1fa52:	6818      	ldr	r0, [r3, #0]
   1fa54:	f026 f98f 	bl	45d76 <cloud_send>
   1fa58:	4604      	mov	r4, r0
   1fa5a:	9804      	ldr	r0, [sp, #16]
   1fa5c:	f028 ffb3 	bl	489c6 <k_free>
			if (err) {
   1fa60:	2c00      	cmp	r4, #0
   1fa62:	d0c8      	beq.n	1f9f6 <send_env_data_work_fn+0x3a>
   1fa64:	e7e5      	b.n	1fa32 <send_env_data_work_fn+0x76>
		if (cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   1fa66:	a904      	add	r1, sp, #16
   1fa68:	4668      	mov	r0, sp
   1fa6a:	f000 fd6b 	bl	20544 <cloud_encode_env_sensors_data>
   1fa6e:	2800      	cmp	r0, #0
   1fa70:	d1c6      	bne.n	1fa00 <send_env_data_work_fn+0x44>
			err = cloud_send(cloud_backend, &msg);
   1fa72:	4b11      	ldr	r3, [pc, #68]	; (1fab8 <send_env_data_work_fn+0xfc>)
   1fa74:	a904      	add	r1, sp, #16
   1fa76:	6818      	ldr	r0, [r3, #0]
   1fa78:	f026 f97d 	bl	45d76 <cloud_send>
   1fa7c:	4604      	mov	r4, r0
   1fa7e:	9804      	ldr	r0, [sp, #16]
   1fa80:	f028 ffa1 	bl	489c6 <k_free>
			if (err) {
   1fa84:	2c00      	cmp	r4, #0
   1fa86:	d0bb      	beq.n	1fa00 <send_env_data_work_fn+0x44>
   1fa88:	e7d3      	b.n	1fa32 <send_env_data_work_fn+0x76>
		if (cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   1fa8a:	a904      	add	r1, sp, #16
   1fa8c:	4668      	mov	r0, sp
   1fa8e:	f000 fd59 	bl	20544 <cloud_encode_env_sensors_data>
   1fa92:	2800      	cmp	r0, #0
   1fa94:	d1b9      	bne.n	1fa0a <send_env_data_work_fn+0x4e>
			err = cloud_send(cloud_backend, &msg);
   1fa96:	4b08      	ldr	r3, [pc, #32]	; (1fab8 <send_env_data_work_fn+0xfc>)
   1fa98:	a904      	add	r1, sp, #16
   1fa9a:	6818      	ldr	r0, [r3, #0]
   1fa9c:	f026 f96b 	bl	45d76 <cloud_send>
   1faa0:	4604      	mov	r4, r0
   1faa2:	9804      	ldr	r0, [sp, #16]
   1faa4:	f028 ff8f 	bl	489c6 <k_free>
			if (err) {
   1faa8:	2c00      	cmp	r4, #0
   1faaa:	d0ae      	beq.n	1fa0a <send_env_data_work_fn+0x4e>
   1faac:	e7c1      	b.n	1fa32 <send_env_data_work_fn+0x76>
   1faae:	bf00      	nop
   1fab0:	2002388c 	.word	0x2002388c
   1fab4:	20023890 	.word	0x20023890
   1fab8:	20023808 	.word	0x20023808
   1fabc:	0004b96a 	.word	0x0004b96a

0001fac0 <sensors_start>:
   1fac0:	2201      	movs	r2, #1
{
   1fac2:	b508      	push	{r3, lr}
   1fac4:	4b1d      	ldr	r3, [pc, #116]	; (1fb3c <sensors_start+0x7c>)
   1fac6:	e8d3 1fef 	ldaex	r1, [r3]
   1faca:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1face:	2800      	cmp	r0, #0
   1fad0:	d1f9      	bne.n	1fac6 <sensors_start+0x6>
	if (z_syscall_trap()) {
		return (struct device *) z_arch_syscall_invoke1(*(u32_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1fad2:	481b      	ldr	r0, [pc, #108]	; (1fb40 <sensors_start+0x80>)
   1fad4:	f01b ff92 	bl	3b9fc <z_impl_device_get_binding>
	if (accel_dev == NULL) {
   1fad8:	bb08      	cbnz	r0, 1fb1e <sensors_start+0x5e>
		printk("Could not get %s device\n", CONFIG_ACCEL_DEV_NAME);
   1fada:	4919      	ldr	r1, [pc, #100]	; (1fb40 <sensors_start+0x80>)
   1fadc:	4819      	ldr	r0, [pc, #100]	; (1fb44 <sensors_start+0x84>)
   1fade:	f026 fdbd 	bl	4665c <printk>
	err = env_sensors_init_and_start();
   1fae2:	f000 feed 	bl	208c0 <env_sensors_init_and_start>
	if (err) {
   1fae6:	4601      	mov	r1, r0
   1fae8:	b110      	cbz	r0, 1faf0 <sensors_start+0x30>
		printk("Environmental sensors init failed, error: %d\n", err);
   1faea:	4817      	ldr	r0, [pc, #92]	; (1fb48 <sensors_start+0x88>)
   1faec:	f026 fdb6 	bl	4665c <printk>
	err = modem_info_init();
   1faf0:	f006 fe4c 	bl	2678c <modem_info_init>
	if (err) {
   1faf4:	4601      	mov	r1, r0
   1faf6:	b1a8      	cbz	r0, 1fb24 <sensors_start+0x64>
		printk("Modem info could not be established: %d\n", err);
   1faf8:	4814      	ldr	r0, [pc, #80]	; (1fb4c <sensors_start+0x8c>)
   1fafa:	f026 fdaf 	bl	4665c <printk>
   1fafe:	4814      	ldr	r0, [pc, #80]	; (1fb50 <sensors_start+0x90>)
   1fb00:	f7ff fd2e 	bl	1f560 <k_work_submit_to_queue.constprop.12>
	gps_control_init(gps_trigger_handler);
   1fb04:	4813      	ldr	r0, [pc, #76]	; (1fb54 <sensors_start+0x94>)
   1fb06:	f000 fea3 	bl	20850 <gps_control_init>
	flip_cloud_data.type = CLOUD_CHANNEL_FLIP;
   1fb0a:	2201      	movs	r2, #1
   1fb0c:	4b12      	ldr	r3, [pc, #72]	; (1fb58 <sensors_start+0x98>)
	k_delayed_work_submit(&send_env_data_work, K_SECONDS(5));
   1fb0e:	f241 3188 	movw	r1, #5000	; 0x1388
	flip_cloud_data.type = CLOUD_CHANNEL_FLIP;
   1fb12:	701a      	strb	r2, [r3, #0]
	k_delayed_work_submit(&send_env_data_work, K_SECONDS(5));
   1fb14:	4811      	ldr	r0, [pc, #68]	; (1fb5c <sensors_start+0x9c>)
}
   1fb16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_submit(&send_env_data_work, K_SECONDS(5));
   1fb1a:	f7ff bcf1 	b.w	1f500 <k_delayed_work_submit>
	orientation_detector_init(accel_dev);
   1fb1e:	f000 fab5 	bl	2008c <orientation_detector_init>
   1fb22:	e7de      	b.n	1fae2 <sensors_start+0x22>
	modem_info_params_init(&modem_param);
   1fb24:	480e      	ldr	r0, [pc, #56]	; (1fb60 <sensors_start+0xa0>)
   1fb26:	f006 fe81 	bl	2682c <modem_info_params_init>
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   1fb2a:	220b      	movs	r2, #11
   1fb2c:	4b0d      	ldr	r3, [pc, #52]	; (1fb64 <sensors_start+0xa4>)
	modem_info_rsrp_register(modem_rsrp_handler);
   1fb2e:	480e      	ldr	r0, [pc, #56]	; (1fb68 <sensors_start+0xa8>)
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   1fb30:	701a      	strb	r2, [r3, #0]
	signal_strength_cloud_data.tag = 0x1;
   1fb32:	2201      	movs	r2, #1
   1fb34:	60da      	str	r2, [r3, #12]
	modem_info_rsrp_register(modem_rsrp_handler);
   1fb36:	f006 fdf5 	bl	26724 <modem_info_rsrp_register>
   1fb3a:	e7e0      	b.n	1fafe <sensors_start+0x3e>
   1fb3c:	2002388c 	.word	0x2002388c
   1fb40:	0004b987 	.word	0x0004b987
   1fb44:	0004b992 	.word	0x0004b992
   1fb48:	0004b9ab 	.word	0x0004b9ab
   1fb4c:	0004b9d9 	.word	0x0004b9d9
   1fb50:	2002382c 	.word	0x2002382c
   1fb54:	0001f5a1 	.word	0x0001f5a1
   1fb58:	2002383c 	.word	0x2002383c
   1fb5c:	20023890 	.word	0x20023890
   1fb60:	200200c0 	.word	0x200200c0
   1fb64:	200238c8 	.word	0x200238c8
   1fb68:	0001f589 	.word	0x0001f589

0001fb6c <on_pairing_done>:
{
   1fb6c:	b510      	push	{r4, lr}
	if (association_with_pin || (buttons_captured > 0)) {
   1fb6e:	4c28      	ldr	r4, [pc, #160]	; (1fc10 <on_pairing_done+0xa4>)
   1fb70:	7822      	ldrb	r2, [r4, #0]
   1fb72:	b91a      	cbnz	r2, 1fb7c <on_pairing_done+0x10>
   1fb74:	4b27      	ldr	r3, [pc, #156]	; (1fc14 <on_pairing_done+0xa8>)
   1fb76:	681b      	ldr	r3, [r3, #0]
   1fb78:	2b00      	cmp	r3, #0
   1fb7a:	dd11      	ble.n	1fba0 <on_pairing_done+0x34>
		printk("Successful user association.\n");
   1fb7c:	4826      	ldr	r0, [pc, #152]	; (1fc18 <on_pairing_done+0xac>)
   1fb7e:	f026 fd6d 	bl	4665c <printk>
		printk("The device will attempt to reconnect to ");
   1fb82:	4826      	ldr	r0, [pc, #152]	; (1fc1c <on_pairing_done+0xb0>)
   1fb84:	f026 fd6a 	bl	4665c <printk>
		printk("nRF Cloud. It may reset in the process.\n");
   1fb88:	4825      	ldr	r0, [pc, #148]	; (1fc20 <on_pairing_done+0xb4>)
   1fb8a:	f026 fd67 	bl	4665c <printk>
		printk("Manual reset may be required if connection ");
   1fb8e:	4825      	ldr	r0, [pc, #148]	; (1fc24 <on_pairing_done+0xb8>)
   1fb90:	f026 fd64 	bl	4665c <printk>
		printk("to nRF Cloud is not established within ");
   1fb94:	4824      	ldr	r0, [pc, #144]	; (1fc28 <on_pairing_done+0xbc>)
   1fb96:	f026 fd61 	bl	4665c <printk>
		printk("20 - 30 seconds.\n");
   1fb9a:	4824      	ldr	r0, [pc, #144]	; (1fc2c <on_pairing_done+0xc0>)
   1fb9c:	f026 fd5e 	bl	4665c <printk>
	if (!association_with_pin) {
   1fba0:	7823      	ldrb	r3, [r4, #0]
   1fba2:	2b00      	cmp	r3, #0
   1fba4:	d032      	beq.n	1fc0c <on_pairing_done+0xa0>
	err = cloud_disconnect(cloud_backend);
   1fba6:	4c22      	ldr	r4, [pc, #136]	; (1fc30 <on_pairing_done+0xc4>)
	printk("Disconnecting from nRF cloud...\n");
   1fba8:	4822      	ldr	r0, [pc, #136]	; (1fc34 <on_pairing_done+0xc8>)
   1fbaa:	f026 fd57 	bl	4665c <printk>
	err = cloud_disconnect(cloud_backend);
   1fbae:	6820      	ldr	r0, [r4, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_disconnect(const struct cloud_backend *const backend)
{
	if (backend == NULL
   1fbb0:	b340      	cbz	r0, 1fc04 <on_pairing_done+0x98>
	    || backend->api == NULL
   1fbb2:	6803      	ldr	r3, [r0, #0]
   1fbb4:	b333      	cbz	r3, 1fc04 <on_pairing_done+0x98>
	    || backend->api->disconnect == NULL) {
   1fbb6:	68db      	ldr	r3, [r3, #12]
   1fbb8:	b323      	cbz	r3, 1fc04 <on_pairing_done+0x98>
		return -ENOTSUP;
	}

	return backend->api->disconnect(backend);
   1fbba:	4798      	blx	r3
	if (err == 0) {
   1fbbc:	bb10      	cbnz	r0, 1fc04 <on_pairing_done+0x98>
		printk("Reconnecting to cloud...\n");
   1fbbe:	481e      	ldr	r0, [pc, #120]	; (1fc38 <on_pairing_done+0xcc>)
   1fbc0:	f026 fd4c 	bl	4665c <printk>
		err = cloud_connect(cloud_backend);
   1fbc4:	6820      	ldr	r0, [r4, #0]
   1fbc6:	f026 f8cd 	bl	45d64 <cloud_connect>
		if (err == 0) {
   1fbca:	b1f8      	cbz	r0, 1fc0c <on_pairing_done+0xa0>
		printk("Could not reconnect\n");
   1fbcc:	481b      	ldr	r0, [pc, #108]	; (1fc3c <on_pairing_done+0xd0>)
		printk("Disconnection failed\n");
   1fbce:	f026 fd45 	bl	4665c <printk>
	printk("Fallback to controlled reboot\n");
   1fbd2:	481b      	ldr	r0, [pc, #108]	; (1fc40 <on_pairing_done+0xd4>)
   1fbd4:	f026 fd42 	bl	4665c <printk>
	printk("Shutting down LTE link...\n");
   1fbd8:	481a      	ldr	r0, [pc, #104]	; (1fc44 <on_pairing_done+0xd8>)
   1fbda:	f026 fd3f 	bl	4665c <printk>
	err = lte_lc_power_off();
   1fbde:	f00b ffa1 	bl	2bb24 <lte_lc_power_off>
	if (err) {
   1fbe2:	b188      	cbz	r0, 1fc08 <on_pairing_done+0x9c>
		printk("Could not shut down link\n");
   1fbe4:	4818      	ldr	r0, [pc, #96]	; (1fc48 <on_pairing_done+0xdc>)
		printk("LTE link disconnected\n");
   1fbe6:	f026 fd39 	bl	4665c <printk>
	printk("Rebooting...\n");
   1fbea:	4818      	ldr	r0, [pc, #96]	; (1fc4c <on_pairing_done+0xe0>)
   1fbec:	f026 fd36 	bl	4665c <printk>
   1fbf0:	f001 fb8a 	bl	21308 <z_impl_log_panic>
	sys_reboot(SYS_REBOOT_COLD);
   1fbf4:	2001      	movs	r0, #1
   1fbf6:	f001 ffdb 	bl	21bb0 <sys_reboot>
}
   1fbfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("**** Manual reboot required ***\n");
   1fbfe:	4814      	ldr	r0, [pc, #80]	; (1fc50 <on_pairing_done+0xe4>)
   1fc00:	f026 bd2c 	b.w	4665c <printk>
		printk("Disconnection failed\n");
   1fc04:	4813      	ldr	r0, [pc, #76]	; (1fc54 <on_pairing_done+0xe8>)
   1fc06:	e7e2      	b.n	1fbce <on_pairing_done+0x62>
		printk("LTE link disconnected\n");
   1fc08:	4813      	ldr	r0, [pc, #76]	; (1fc58 <on_pairing_done+0xec>)
   1fc0a:	e7ec      	b.n	1fbe6 <on_pairing_done+0x7a>
}
   1fc0c:	bd10      	pop	{r4, pc}
   1fc0e:	bf00      	nop
   1fc10:	2002a43c 	.word	0x2002a43c
   1fc14:	20023800 	.word	0x20023800
   1fc18:	0004b773 	.word	0x0004b773
   1fc1c:	0004b791 	.word	0x0004b791
   1fc20:	0004b7ba 	.word	0x0004b7ba
   1fc24:	0004b7e3 	.word	0x0004b7e3
   1fc28:	0004b80f 	.word	0x0004b80f
   1fc2c:	0004b837 	.word	0x0004b837
   1fc30:	20023808 	.word	0x20023808
   1fc34:	0004b849 	.word	0x0004b849
   1fc38:	0004b86a 	.word	0x0004b86a
   1fc3c:	0004b884 	.word	0x0004b884
   1fc40:	0004b8af 	.word	0x0004b8af
   1fc44:	0004b8ce 	.word	0x0004b8ce
   1fc48:	0004b8e9 	.word	0x0004b8e9
   1fc4c:	0004b91a 	.word	0x0004b91a
   1fc50:	0004b928 	.word	0x0004b928
   1fc54:	0004b899 	.word	0x0004b899
   1fc58:	0004b903 	.word	0x0004b903

0001fc5c <cloud_event_handler>:
{
   1fc5c:	b570      	push	{r4, r5, r6, lr}
   1fc5e:	460c      	mov	r4, r1
	switch (evt->type) {
   1fc60:	7809      	ldrb	r1, [r1, #0]
   1fc62:	2908      	cmp	r1, #8
   1fc64:	d86c      	bhi.n	1fd40 <cloud_event_handler+0xe4>
   1fc66:	e8df f001 	tbb	[pc, r1]
   1fc6a:	1c05      	.short	0x1c05
   1fc6c:	28262110 	.word	0x28262110
   1fc70:	5c30      	.short	0x5c30
   1fc72:	63          	.byte	0x63
   1fc73:	00          	.byte	0x00
		printk("CLOUD_EVT_CONNECTED\n");
   1fc74:	4835      	ldr	r0, [pc, #212]	; (1fd4c <cloud_event_handler+0xf0>)
   1fc76:	f026 fcf1 	bl	4665c <printk>
		k_delayed_work_cancel(&cloud_reboot_work);
   1fc7a:	4835      	ldr	r0, [pc, #212]	; (1fd50 <cloud_event_handler+0xf4>)
   1fc7c:	f01e fb68 	bl	3e350 <k_delayed_work_cancel>
		ui_led_set_pattern(UI_CLOUD_CONNECTED);
   1fc80:	2008      	movs	r0, #8
}
   1fc82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ui_led_set_pattern(UI_LTE_DISCONNECTED);
   1fc86:	f000 ba5f 	b.w	20148 <ui_led_set_pattern>
		printk("CLOUD_EVT_READY\n");
   1fc8a:	4832      	ldr	r0, [pc, #200]	; (1fd54 <cloud_event_handler+0xf8>)
   1fc8c:	f026 fce6 	bl	4665c <printk>
		ui_led_set_pattern(UI_CLOUD_CONNECTED);
   1fc90:	2008      	movs	r0, #8
   1fc92:	f000 fa59 	bl	20148 <ui_led_set_pattern>
		boot_write_img_confirmed();
   1fc96:	f026 fd68 	bl	4676a <boot_write_img_confirmed>
}
   1fc9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		sensors_start();
   1fc9e:	f7ff bf0f 	b.w	1fac0 <sensors_start>
		printk("CLOUD_EVT_DISCONNECTED\n");
   1fca2:	482d      	ldr	r0, [pc, #180]	; (1fd58 <cloud_event_handler+0xfc>)
   1fca4:	f026 fcda 	bl	4665c <printk>
		ui_led_set_pattern(UI_LTE_DISCONNECTED);
   1fca8:	2000      	movs	r0, #0
   1fcaa:	e7ea      	b.n	1fc82 <cloud_event_handler+0x26>
		printk("CLOUD_EVT_ERROR\n");
   1fcac:	482b      	ldr	r0, [pc, #172]	; (1fd5c <cloud_event_handler+0x100>)
}
   1fcae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("CLOUD_EVT_DATA_SENT\n");
   1fcb2:	f026 bcd3 	b.w	4665c <printk>
   1fcb6:	482a      	ldr	r0, [pc, #168]	; (1fd60 <cloud_event_handler+0x104>)
   1fcb8:	e7f9      	b.n	1fcae <cloud_event_handler+0x52>
		printk("CLOUD_EVT_DATA_RECEIVED\n");
   1fcba:	482a      	ldr	r0, [pc, #168]	; (1fd64 <cloud_event_handler+0x108>)
   1fcbc:	f026 fcce 	bl	4665c <printk>
		cloud_decode_command(evt->data.msg.buf);
   1fcc0:	6860      	ldr	r0, [r4, #4]
}
   1fcc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cloud_decode_command(evt->data.msg.buf);
   1fcc6:	f000 bc05 	b.w	204d4 <cloud_decode_command>
		printk("CLOUD_EVT_PAIR_REQUEST\n");
   1fcca:	4827      	ldr	r0, [pc, #156]	; (1fd68 <cloud_event_handler+0x10c>)
   1fccc:	f026 fcc6 	bl	4665c <printk>
	if (evt->data.pair_info.type == CLOUD_PAIR_SEQUENCE) {
   1fcd0:	7923      	ldrb	r3, [r4, #4]
   1fcd2:	b9e3      	cbnz	r3, 1fd0e <cloud_event_handler+0xb2>
		if (!atomic_get(&pattern_recording)) {
   1fcd4:	4d25      	ldr	r5, [pc, #148]	; (1fd6c <cloud_event_handler+0x110>)
   1fcd6:	4628      	mov	r0, r5
   1fcd8:	f026 f856 	bl	45d88 <atomic_get>
   1fcdc:	4606      	mov	r6, r0
   1fcde:	2800      	cmp	r0, #0
   1fce0:	d133      	bne.n	1fd4a <cloud_event_handler+0xee>
			ui_led_set_pattern(UI_CLOUD_PAIRING);
   1fce2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   1fce6:	f000 fa2f 	bl	20148 <ui_led_set_pattern>
   1fcea:	2301      	movs	r3, #1
   1fcec:	e8d5 2fef 	ldaex	r2, [r5]
   1fcf0:	e8c5 3fe1 	stlex	r1, r3, [r5]
   1fcf4:	2900      	cmp	r1, #0
   1fcf6:	d1f9      	bne.n	1fcec <cloud_event_handler+0x90>
			buttons_captured = 0;
   1fcf8:	4b1d      	ldr	r3, [pc, #116]	; (1fd70 <cloud_event_handler+0x114>)
			printk("Please enter the user association pattern ");
   1fcfa:	481e      	ldr	r0, [pc, #120]	; (1fd74 <cloud_event_handler+0x118>)
			buttons_captured = 0;
   1fcfc:	601e      	str	r6, [r3, #0]
			buttons_to_capture = *evt->data.pair_info.buf;
   1fcfe:	68a3      	ldr	r3, [r4, #8]
   1fd00:	781a      	ldrb	r2, [r3, #0]
   1fd02:	4b1d      	ldr	r3, [pc, #116]	; (1fd78 <cloud_event_handler+0x11c>)
   1fd04:	601a      	str	r2, [r3, #0]
			printk("Please enter the user association pattern ");
   1fd06:	f026 fca9 	bl	4665c <printk>
			printk("using the buttons and switches\n");
   1fd0a:	481c      	ldr	r0, [pc, #112]	; (1fd7c <cloud_event_handler+0x120>)
   1fd0c:	e7cf      	b.n	1fcae <cloud_event_handler+0x52>
	} else if (evt->data.pair_info.type == CLOUD_PAIR_PIN) {
   1fd0e:	2b01      	cmp	r3, #1
   1fd10:	d11b      	bne.n	1fd4a <cloud_event_handler+0xee>
		association_with_pin = true;
   1fd12:	4a1b      	ldr	r2, [pc, #108]	; (1fd80 <cloud_event_handler+0x124>)
		ui_led_set_pattern(UI_CLOUD_PAIRING);
   1fd14:	f44f 6040 	mov.w	r0, #3072	; 0xc00
		association_with_pin = true;
   1fd18:	7013      	strb	r3, [r2, #0]
		ui_led_set_pattern(UI_CLOUD_PAIRING);
   1fd1a:	f000 fa15 	bl	20148 <ui_led_set_pattern>
		printk("Waiting for cloud association with PIN\n");
   1fd1e:	4819      	ldr	r0, [pc, #100]	; (1fd84 <cloud_event_handler+0x128>)
   1fd20:	e7c5      	b.n	1fcae <cloud_event_handler+0x52>
		printk("CLOUD_EVT_PAIR_DONE\n");
   1fd22:	4819      	ldr	r0, [pc, #100]	; (1fd88 <cloud_event_handler+0x12c>)
   1fd24:	f026 fc9a 	bl	4665c <printk>
}
   1fd28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		on_pairing_done();
   1fd2c:	f7ff bf1e 	b.w	1fb6c <on_pairing_done>
		printk("CLOUD_EVT_FOTA_DONE\n");
   1fd30:	4816      	ldr	r0, [pc, #88]	; (1fd8c <cloud_event_handler+0x130>)
   1fd32:	f026 fc93 	bl	4665c <printk>
}
   1fd36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		sys_reboot(SYS_REBOOT_COLD);
   1fd3a:	2001      	movs	r0, #1
   1fd3c:	f001 bf38 	b.w	21bb0 <sys_reboot>
		printk("Unknown cloud event type: %d\n", evt->type);
   1fd40:	4813      	ldr	r0, [pc, #76]	; (1fd90 <cloud_event_handler+0x134>)
}
   1fd42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Unknown cloud event type: %d\n", evt->type);
   1fd46:	f026 bc89 	b.w	4665c <printk>
}
   1fd4a:	bd70      	pop	{r4, r5, r6, pc}
   1fd4c:	0004b2ae 	.word	0x0004b2ae
   1fd50:	2002380c 	.word	0x2002380c
   1fd54:	0004b2c3 	.word	0x0004b2c3
   1fd58:	0004b2d4 	.word	0x0004b2d4
   1fd5c:	0004b2ec 	.word	0x0004b2ec
   1fd60:	0004b2fd 	.word	0x0004b2fd
   1fd64:	0004b312 	.word	0x0004b312
   1fd68:	0004b32b 	.word	0x0004b32b
   1fd6c:	2002387c 	.word	0x2002387c
   1fd70:	20023800 	.word	0x20023800
   1fd74:	0004b343 	.word	0x0004b343
   1fd78:	20023804 	.word	0x20023804
   1fd7c:	0004b36e 	.word	0x0004b36e
   1fd80:	2002a43c 	.word	0x2002a43c
   1fd84:	0004b38e 	.word	0x0004b38e
   1fd88:	0004b3b6 	.word	0x0004b3b6
   1fd8c:	0004b3cb 	.word	0x0004b3cb
   1fd90:	0004b3e0 	.word	0x0004b3e0

0001fd94 <handle_bsdlib_init_ret>:
#endif /* defined(CONFIG_USE_UI_MODULE) */

void handle_bsdlib_init_ret(void)
{
   1fd94:	b508      	push	{r3, lr}
	#if defined(CONFIG_BSD_LIBRARY)
	int ret = bsdlib_get_init_ret();
   1fd96:	f005 f901 	bl	24f9c <bsdlib_get_init_ret>

	/* Handle return values relating to modem firmware update */
	switch (ret) {
   1fd9a:	4b0e      	ldr	r3, [pc, #56]	; (1fdd4 <handle_bsdlib_init_ret+0x40>)
	int ret = bsdlib_get_init_ret();
   1fd9c:	4601      	mov	r1, r0
	switch (ret) {
   1fd9e:	4298      	cmp	r0, r3
   1fda0:	dc06      	bgt.n	1fdb0 <handle_bsdlib_init_ret+0x1c>
   1fda2:	3b01      	subs	r3, #1
   1fda4:	4298      	cmp	r0, r3
   1fda6:	da0e      	bge.n	1fdc6 <handle_bsdlib_init_ret+0x32>
   1fda8:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   1fdac:	dc0f      	bgt.n	1fdce <handle_bsdlib_init_ret+0x3a>
		break;
	default:
		break;
	}
	#endif /* CONFIG_BSD_LIBRARY */
}
   1fdae:	bd08      	pop	{r3, pc}
	switch (ret) {
   1fdb0:	4b09      	ldr	r3, [pc, #36]	; (1fdd8 <handle_bsdlib_init_ret+0x44>)
   1fdb2:	4298      	cmp	r0, r3
   1fdb4:	d1fb      	bne.n	1fdae <handle_bsdlib_init_ret+0x1a>
		printk("MODEM UPDATE OK. Will run new firmware\n");
   1fdb6:	4809      	ldr	r0, [pc, #36]	; (1fddc <handle_bsdlib_init_ret+0x48>)
   1fdb8:	f026 fc50 	bl	4665c <printk>
}
   1fdbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sys_reboot(SYS_REBOOT_COLD);
   1fdc0:	2001      	movs	r0, #1
   1fdc2:	f001 bef5 	b.w	21bb0 <sys_reboot>
		printk("MODEM UPDATE ERROR %d. Will run old firmware\n", ret);
   1fdc6:	4806      	ldr	r0, [pc, #24]	; (1fde0 <handle_bsdlib_init_ret+0x4c>)
		printk("MODEM UPDATE FATAL ERROR %d. Modem failiure\n", ret);
   1fdc8:	f026 fc48 	bl	4665c <printk>
   1fdcc:	e7f6      	b.n	1fdbc <handle_bsdlib_init_ret+0x28>
   1fdce:	4805      	ldr	r0, [pc, #20]	; (1fde4 <handle_bsdlib_init_ret+0x50>)
   1fdd0:	e7fa      	b.n	1fdc8 <handle_bsdlib_init_ret+0x34>
   1fdd2:	bf00      	nop
   1fdd4:	04400004 	.word	0x04400004
   1fdd8:	05500001 	.word	0x05500001
   1fddc:	0004b48f 	.word	0x0004b48f
   1fde0:	0004b4b7 	.word	0x0004b4b7
   1fde4:	0004b4e5 	.word	0x0004b4e5

0001fde8 <main>:

void main(void)
{
   1fde8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	int ret;

	printk("Asset tracker started\n");
   1fdec:	487f      	ldr	r0, [pc, #508]	; (1ffec <main+0x204>)
   1fdee:	f026 fc35 	bl	4665c <printk>

	handle_bsdlib_init_ret();
   1fdf2:	f7ff ffcf 	bl	1fd94 <handle_bsdlib_init_ret>

	cloud_backend = cloud_get_binding("NRF_CLOUD");
   1fdf6:	487e      	ldr	r0, [pc, #504]	; (1fff0 <main+0x208>)
   1fdf8:	f006 ff4a 	bl	26c90 <cloud_get_binding>
   1fdfc:	4d7d      	ldr	r5, [pc, #500]	; (1fff4 <main+0x20c>)
   1fdfe:	6028      	str	r0, [r5, #0]
	__ASSERT(cloud_backend != NULL, "nRF Cloud backend not found");
   1fe00:	b970      	cbnz	r0, 1fe20 <main+0x38>
   1fe02:	497d      	ldr	r1, [pc, #500]	; (1fff8 <main+0x210>)
   1fe04:	f240 4367 	movw	r3, #1127	; 0x467
   1fe08:	4a7c      	ldr	r2, [pc, #496]	; (1fffc <main+0x214>)
   1fe0a:	487d      	ldr	r0, [pc, #500]	; (20000 <__kernel_ram_size>)
   1fe0c:	f026 fc26 	bl	4665c <printk>
   1fe10:	487c      	ldr	r0, [pc, #496]	; (20004 <__kernel_ram_size+0x4>)
   1fe12:	f026 fc23 	bl	4665c <printk>
   1fe16:	f240 4167 	movw	r1, #1127	; 0x467
   1fe1a:	4878      	ldr	r0, [pc, #480]	; (1fffc <main+0x214>)
   1fe1c:	f026 fc2b 	bl	46676 <assert_post_action>

	ret = cloud_init(cloud_backend, cloud_event_handler);
   1fe20:	6828      	ldr	r0, [r5, #0]
	if (backend == NULL
   1fe22:	2800      	cmp	r0, #0
   1fe24:	f000 80a4 	beq.w	1ff70 <main+0x188>
	    || backend->api == NULL
   1fe28:	6803      	ldr	r3, [r0, #0]
   1fe2a:	2b00      	cmp	r3, #0
   1fe2c:	f000 80a0 	beq.w	1ff70 <main+0x188>
	    || backend->api->init == NULL) {
   1fe30:	681b      	ldr	r3, [r3, #0]
   1fe32:	2b00      	cmp	r3, #0
   1fe34:	f000 809c 	beq.w	1ff70 <main+0x188>
	return backend->api->init(backend, handler);
   1fe38:	4973      	ldr	r1, [pc, #460]	; (20008 <__kernel_ram_size+0x8>)
   1fe3a:	4798      	blx	r3
	if (ret) {
   1fe3c:	4604      	mov	r4, r0
   1fe3e:	b130      	cbz	r0, 1fe4e <main+0x66>
		printk("Cloud backend could not be initialized, error: %d\n",
   1fe40:	4872      	ldr	r0, [pc, #456]	; (2000c <__kernel_ram_size+0xc>)
   1fe42:	4621      	mov	r1, r4
   1fe44:	f026 fc0a 	bl	4665c <printk>
			ret);
		cloud_error_handler(ret);
   1fe48:	4620      	mov	r0, r4
   1fe4a:	f025 ffa5 	bl	45d98 <cloud_error_handler>
	}

#if defined(CONFIG_USE_UI_MODULE)
	ui_init(ui_evt_handler);
   1fe4e:	4870      	ldr	r0, [pc, #448]	; (20010 <__kernel_ram_size+0x10>)
   1fe50:	f000 f980 	bl	20154 <ui_init>
#endif

	ret = cloud_decode_init(cloud_cmd_handler);
   1fe54:	486f      	ldr	r0, [pc, #444]	; (20014 <__kernel_ram_size+0x14>)
   1fe56:	f000 fb6f 	bl	20538 <cloud_decode_init>
	if (ret) {
   1fe5a:	4604      	mov	r4, r0
   1fe5c:	b130      	cbz	r0, 1fe6c <main+0x84>
		printk("Cloud command decoder could not be initialized, error: %d\n", ret);
   1fe5e:	4601      	mov	r1, r0
   1fe60:	486d      	ldr	r0, [pc, #436]	; (20018 <__kernel_ram_size+0x18>)
   1fe62:	f026 fbfb 	bl	4665c <printk>
		cloud_error_handler(ret);
   1fe66:	4620      	mov	r0, r4
   1fe68:	f025 ff96 	bl	45d98 <cloud_error_handler>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1fe6c:	2400      	movs	r4, #0
   1fe6e:	4b6b      	ldr	r3, [pc, #428]	; (2001c <__kernel_ram_size+0x1c>)
   1fe70:	4a6b      	ldr	r2, [pc, #428]	; (20020 <__kernel_ram_size+0x20>)
   1fe72:	601c      	str	r4, [r3, #0]
   1fe74:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1fe78:	4b6a      	ldr	r3, [pc, #424]	; (20024 <__kernel_ram_size+0x24>)
   1fe7a:	4a6b      	ldr	r2, [pc, #428]	; (20028 <__kernel_ram_size+0x28>)
	k_delayed_work_init(&send_env_data_work, send_env_data_work_fn);
   1fe7c:	496b      	ldr	r1, [pc, #428]	; (2002c <__kernel_ram_size+0x2c>)
   1fe7e:	486c      	ldr	r0, [pc, #432]	; (20030 <__kernel_ram_size+0x30>)
   1fe80:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1fe84:	601c      	str	r4, [r3, #0]
   1fe86:	f028 fea5 	bl	48bd4 <k_delayed_work_init>
	k_delayed_work_init(&long_press_button_work, long_press_handler);
   1fe8a:	496a      	ldr	r1, [pc, #424]	; (20034 <__kernel_ram_size+0x34>)
   1fe8c:	486a      	ldr	r0, [pc, #424]	; (20038 <__kernel_ram_size+0x38>)
   1fe8e:	f028 fea1 	bl	48bd4 <k_delayed_work_init>
	k_delayed_work_init(&cloud_reboot_work, cloud_reboot_handler);
   1fe92:	496a      	ldr	r1, [pc, #424]	; (2003c <__kernel_ram_size+0x3c>)
   1fe94:	486a      	ldr	r0, [pc, #424]	; (20040 <__kernel_ram_size+0x40>)
   1fe96:	f028 fe9d 	bl	48bd4 <k_delayed_work_init>
   1fe9a:	4b6a      	ldr	r3, [pc, #424]	; (20044 <__kernel_ram_size+0x44>)
   1fe9c:	4a6a      	ldr	r2, [pc, #424]	; (20048 <__kernel_ram_size+0x48>)
   1fe9e:	601c      	str	r4, [r3, #0]
   1fea0:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1fea4:	4b69      	ldr	r3, [pc, #420]	; (2004c <__kernel_ram_size+0x4c>)
   1fea6:	4a6a      	ldr	r2, [pc, #424]	; (20050 <__kernel_ram_size+0x50>)
		printk("Connecting to LTE network. ");
   1fea8:	486a      	ldr	r0, [pc, #424]	; (20054 <__kernel_ram_size+0x54>)
   1feaa:	601c      	str	r4, [r3, #0]
   1feac:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1feb0:	f026 fbd4 	bl	4665c <printk>
		printk("This may take several minutes.\n");
   1feb4:	4868      	ldr	r0, [pc, #416]	; (20058 <__kernel_ram_size+0x58>)
   1feb6:	f026 fbd1 	bl	4665c <printk>
		ui_led_set_pattern(UI_LTE_CONNECTING);
   1feba:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1febe:	f000 f943 	bl	20148 <ui_led_set_pattern>
		err = lte_lc_init_and_connect();
   1fec2:	f028 fd45 	bl	48950 <lte_lc_init_and_connect>
		if (err) {
   1fec6:	b138      	cbz	r0, 1fed8 <main+0xf0>
			printk("LTE link could not be established.\n");
   1fec8:	4864      	ldr	r0, [pc, #400]	; (2005c <__kernel_ram_size+0x5c>)
   1feca:	f026 fbc7 	bl	4665c <printk>
   1fece:	f001 fa1b 	bl	21308 <z_impl_log_panic>
	sys_reboot(0);
   1fed2:	4620      	mov	r0, r4
   1fed4:	f001 fe6c 	bl	21bb0 <sys_reboot>
		printk("Connected to LTE network\n");
   1fed8:	4861      	ldr	r0, [pc, #388]	; (20060 <__kernel_ram_size+0x60>)
   1feda:	f026 fbbf 	bl	4665c <printk>
		ui_led_set_pattern(UI_LTE_CONNECTED);
   1fede:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1fee2:	f000 f931 	bl	20148 <ui_led_set_pattern>
	}

	work_init();
	modem_configure();
connect:
	ret = cloud_connect(cloud_backend);
   1fee6:	6828      	ldr	r0, [r5, #0]
   1fee8:	f025 ff3c 	bl	45d64 <cloud_connect>
	if (ret) {
   1feec:	4604      	mov	r4, r0
   1feee:	2800      	cmp	r0, #0
   1fef0:	d041      	beq.n	1ff76 <main+0x18e>
		printk("cloud_connect failed: %d\n", ret);
   1fef2:	4601      	mov	r1, r0
   1fef4:	485b      	ldr	r0, [pc, #364]	; (20064 <__kernel_ram_size+0x64>)
   1fef6:	f026 fbb1 	bl	4665c <printk>
		cloud_error_handler(ret);
   1fefa:	4620      	mov	r0, r4
   1fefc:	f025 ff4c 	bl	45d98 <cloud_error_handler>
	} else {
		k_delayed_work_submit(&cloud_reboot_work,
				      CLOUD_CONNACK_WAIT_DURATION);
	}

	struct pollfd fds[] = {
   1ff00:	2300      	movs	r3, #0
   1ff02:	f8ad 3006 	strh.w	r3, [sp, #6]
		{
			.fd = cloud_backend->config->socket,
   1ff06:	682b      	ldr	r3, [r5, #0]
	return socket_ops->connect(sock, addr, addrlen);
}

static inline int poll(struct pollfd *fds, int nfds, int timeout)
{
	__ASSERT_NO_MSG(socket_ops);
   1ff08:	4e57      	ldr	r6, [pc, #348]	; (20068 <__kernel_ram_size+0x68>)
   1ff0a:	685b      	ldr	r3, [r3, #4]
   1ff0c:	4637      	mov	r7, r6
	struct pollfd fds[] = {
   1ff0e:	689b      	ldr	r3, [r3, #8]
   1ff10:	4c56      	ldr	r4, [pc, #344]	; (2006c <__kernel_ram_size+0x6c>)
   1ff12:	9300      	str	r3, [sp, #0]
   1ff14:	2301      	movs	r3, #1
   1ff16:	f8ad 3004 	strh.w	r3, [sp, #4]
   1ff1a:	6833      	ldr	r3, [r6, #0]
   1ff1c:	b94b      	cbnz	r3, 1ff32 <main+0x14a>
   1ff1e:	4954      	ldr	r1, [pc, #336]	; (20070 <__kernel_ram_size+0x70>)
   1ff20:	4837      	ldr	r0, [pc, #220]	; (20000 <__kernel_ram_size>)
   1ff22:	234d      	movs	r3, #77	; 0x4d
   1ff24:	4622      	mov	r2, r4
   1ff26:	f026 fb99 	bl	4665c <printk>
   1ff2a:	214d      	movs	r1, #77	; 0x4d
   1ff2c:	4620      	mov	r0, r4
   1ff2e:	f026 fba2 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->poll);
   1ff32:	683b      	ldr	r3, [r7, #0]
   1ff34:	699b      	ldr	r3, [r3, #24]
   1ff36:	b94b      	cbnz	r3, 1ff4c <main+0x164>
   1ff38:	494e      	ldr	r1, [pc, #312]	; (20074 <__kernel_ram_size+0x74>)
   1ff3a:	4831      	ldr	r0, [pc, #196]	; (20000 <__kernel_ram_size>)
   1ff3c:	234e      	movs	r3, #78	; 0x4e
   1ff3e:	4622      	mov	r2, r4
   1ff40:	f026 fb8c 	bl	4665c <printk>
   1ff44:	214e      	movs	r1, #78	; 0x4e
   1ff46:	4620      	mov	r0, r4
   1ff48:	f026 fb95 	bl	46676 <assert_post_action>

	return socket_ops->poll(fds, nfds, timeout);
   1ff4c:	683b      	ldr	r3, [r7, #0]
   1ff4e:	4a4a      	ldr	r2, [pc, #296]	; (20078 <__kernel_ram_size+0x78>)
   1ff50:	699b      	ldr	r3, [r3, #24]
   1ff52:	2101      	movs	r1, #1
   1ff54:	4668      	mov	r0, sp
   1ff56:	4798      	blx	r3
		 * must close the connection.
		 */
		ret = poll(fds, ARRAY_SIZE(fds),
			K_SECONDS(CONFIG_MQTT_KEEPALIVE / 3));

		if (ret < 0) {
   1ff58:	f1b0 0800 	subs.w	r8, r0, #0
   1ff5c:	da11      	bge.n	1ff82 <main+0x19a>
			printk("poll() returned an error: %d\n", ret);
   1ff5e:	4641      	mov	r1, r8
   1ff60:	4846      	ldr	r0, [pc, #280]	; (2007c <__kernel_ram_size+0x7c>)
   1ff62:	f026 fb7b 	bl	4665c <printk>
			error_handler(ERROR_CLOUD, ret);
   1ff66:	4641      	mov	r1, r8
   1ff68:	2000      	movs	r0, #0
   1ff6a:	f7ff fb5b 	bl	1f624 <error_handler>
			continue;
   1ff6e:	e7d4      	b.n	1ff1a <main+0x132>
		return -ENOTSUP;
   1ff70:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1ff74:	e764      	b.n	1fe40 <main+0x58>
		k_delayed_work_submit(&cloud_reboot_work,
   1ff76:	f247 5130 	movw	r1, #30000	; 0x7530
   1ff7a:	4831      	ldr	r0, [pc, #196]	; (20040 <__kernel_ram_size+0x40>)
   1ff7c:	f7ff fac0 	bl	1f500 <k_delayed_work_submit>
   1ff80:	e7be      	b.n	1ff00 <main+0x118>
		}

		if (ret == 0) {
   1ff82:	d10a      	bne.n	1ff9a <main+0x1b2>
			cloud_ping(cloud_backend);
   1ff84:	6828      	ldr	r0, [r5, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_ping(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL) {
   1ff86:	2800      	cmp	r0, #0
   1ff88:	d0c7      	beq.n	1ff1a <main+0x132>
   1ff8a:	6803      	ldr	r3, [r0, #0]
   1ff8c:	2b00      	cmp	r3, #0
   1ff8e:	d0c4      	beq.n	1ff1a <main+0x132>
		return -ENOTSUP;
	}

	/* Ping will only be sent if the backend has implemented it. */
	if (backend->api->ping != NULL) {
   1ff90:	695b      	ldr	r3, [r3, #20]
   1ff92:	2b00      	cmp	r3, #0
   1ff94:	d0c1      	beq.n	1ff1a <main+0x132>
		return backend->api->ping(backend);
   1ff96:	4798      	blx	r3
   1ff98:	e7bf      	b.n	1ff1a <main+0x132>
			continue;
		}

		if ((fds[0].revents & POLLIN) == POLLIN) {
   1ff9a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ff9e:	07da      	lsls	r2, r3, #31
   1ffa0:	d506      	bpl.n	1ffb0 <main+0x1c8>
			cloud_input(cloud_backend);
   1ffa2:	6828      	ldr	r0, [r5, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_input(const struct cloud_backend *const backend)
{
	if (backend == NULL
   1ffa4:	b120      	cbz	r0, 1ffb0 <main+0x1c8>
	    || backend->api == NULL
   1ffa6:	6803      	ldr	r3, [r0, #0]
   1ffa8:	b113      	cbz	r3, 1ffb0 <main+0x1c8>
	    || backend->api->input == NULL) {
   1ffaa:	699b      	ldr	r3, [r3, #24]
   1ffac:	b103      	cbz	r3, 1ffb0 <main+0x1c8>
		return -ENOTSUP;
	}

	return backend->api->input(backend);
   1ffae:	4798      	blx	r3
		}

		if ((fds[0].revents & POLLNVAL) == POLLNVAL) {
   1ffb0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ffb4:	f013 0920 	ands.w	r9, r3, #32
   1ffb8:	d00a      	beq.n	1ffd0 <main+0x1e8>
			printk("Socket error: POLLNVAL\n");
   1ffba:	4831      	ldr	r0, [pc, #196]	; (20080 <__kernel_ram_size+0x80>)
   1ffbc:	f026 fb4e 	bl	4665c <printk>
			error_handler(ERROR_CLOUD, -EIO);
   1ffc0:	f06f 0104 	mvn.w	r1, #4
   1ffc4:	2000      	movs	r0, #0
			return;
		}

		if ((fds[0].revents & POLLERR) == POLLERR) {
			printk("Socket error: POLLERR\n");
			error_handler(ERROR_CLOUD, -EIO);
   1ffc6:	f7ff fb2d 	bl	1f624 <error_handler>
		}
	}

	cloud_disconnect(cloud_backend);
	goto connect;
}
   1ffca:	b003      	add	sp, #12
   1ffcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if ((fds[0].revents & POLLHUP) == POLLHUP) {
   1ffd0:	f013 0810 	ands.w	r8, r3, #16
   1ffd4:	d001      	beq.n	1ffda <main+0x1f2>
			printk("Socket error: POLLHUP\n");
   1ffd6:	482b      	ldr	r0, [pc, #172]	; (20084 <__kernel_ram_size+0x84>)
   1ffd8:	e7f0      	b.n	1ffbc <main+0x1d4>
		if ((fds[0].revents & POLLERR) == POLLERR) {
   1ffda:	071b      	lsls	r3, r3, #28
   1ffdc:	d59d      	bpl.n	1ff1a <main+0x132>
			printk("Socket error: POLLERR\n");
   1ffde:	482a      	ldr	r0, [pc, #168]	; (20088 <__kernel_ram_size+0x88>)
   1ffe0:	f026 fb3c 	bl	4665c <printk>
			error_handler(ERROR_CLOUD, -EIO);
   1ffe4:	f06f 0104 	mvn.w	r1, #4
   1ffe8:	4640      	mov	r0, r8
   1ffea:	e7ec      	b.n	1ffc6 <main+0x1de>
   1ffec:	0004b573 	.word	0x0004b573
   1fff0:	0004b58a 	.word	0x0004b58a
   1fff4:	20023808 	.word	0x20023808
   1fff8:	0004b5a2 	.word	0x0004b5a2
   1fffc:	0004b594 	.word	0x0004b594
   20000:	0004b5bf 	.word	0x0004b5bf
   20004:	0004b5dc 	.word	0x0004b5dc
   20008:	0001fc5d 	.word	0x0001fc5d
   2000c:	0004b5fa 	.word	0x0004b5fa
   20010:	0001f845 	.word	0x0001f845
   20014:	00045da1 	.word	0x00045da1
   20018:	0004b62d 	.word	0x0004b62d
   2001c:	200238bc 	.word	0x200238bc
   20020:	0001f839 	.word	0x0001f839
   20024:	200238b0 	.word	0x200238b0
   20028:	0001f82d 	.word	0x0001f82d
   2002c:	0001f9bd 	.word	0x0001f9bd
   20030:	20023890 	.word	0x20023890
   20034:	0001f511 	.word	0x0001f511
   20038:	2002385c 	.word	0x2002385c
   2003c:	00045d8f 	.word	0x00045d8f
   20040:	2002380c 	.word	0x2002380c
   20044:	2002382c 	.word	0x2002382c
   20048:	0001f715 	.word	0x0001f715
   2004c:	20023880 	.word	0x20023880
   20050:	0001f7bd 	.word	0x0001f7bd
   20054:	0004b668 	.word	0x0004b668
   20058:	0004be49 	.word	0x0004be49
   2005c:	0004b684 	.word	0x0004b684
   20060:	0004b6a8 	.word	0x0004b6a8
   20064:	0004b294 	.word	0x0004b294
   20068:	20023978 	.word	0x20023978
   2006c:	0004b6c2 	.word	0x0004b6c2
   20070:	0004b6f3 	.word	0x0004b6f3
   20074:	0004b6fe 	.word	0x0004b6fe
   20078:	00061a80 	.word	0x00061a80
   2007c:	0004b70f 	.word	0x0004b70f
   20080:	0004b72d 	.word	0x0004b72d
   20084:	0004b745 	.word	0x0004b745
   20088:	0004b75c 	.word	0x0004b75c

0002008c <orientation_detector_init>:
	return 0;
}

void orientation_detector_init(struct device *accel_device)
{
	dev = accel_device;
   2008c:	4b01      	ldr	r3, [pc, #4]	; (20094 <orientation_detector_init+0x8>)
   2008e:	6018      	str	r0, [r3, #0]
}
   20090:	4770      	bx	lr
   20092:	bf00      	nop
   20094:	200238dc 	.word	0x200238dc

00020098 <button_handler>:
}
#endif /* CONFIG_UI_LED_USE_PWM */

/**@brief Callback for button events from the DK buttons and LEDs library. */
static void button_handler(u32_t button_states, u32_t has_changed)
{
   20098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2009a:	4605      	mov	r5, r0
   2009c:	460c      	mov	r4, r1
				break;
			}
		}

		/* Button number has been stored, remove from bitmask. */
		has_changed &= ~(1UL << (btn_num - 1));
   2009e:	2601      	movs	r6, #1
		evt.button = btn_num;
		evt.type = (button_states & BIT(btn_num - 1))
				? UI_EVT_BUTTON_ACTIVE
				: UI_EVT_BUTTON_INACTIVE;

		callback(evt);
   200a0:	4f11      	ldr	r7, [pc, #68]	; (200e8 <button_handler+0x50>)
	while (has_changed) {
   200a2:	b90c      	cbnz	r4, 200a8 <button_handler+0x10>
	}
}
   200a4:	b003      	add	sp, #12
   200a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   200a8:	2300      	movs	r3, #0
   200aa:	1c59      	adds	r1, r3, #1
			if (has_changed & BIT(i)) {
   200ac:	fa24 f303 	lsr.w	r3, r4, r3
   200b0:	f013 0001 	ands.w	r0, r3, #1
   200b4:	b2ca      	uxtb	r2, r1
   200b6:	d103      	bne.n	200c0 <button_handler+0x28>
		for (u8_t i = 0; i < 32; i++) {
   200b8:	2920      	cmp	r1, #32
   200ba:	460b      	mov	r3, r1
   200bc:	d1f5      	bne.n	200aa <button_handler+0x12>
		btn_num = 0;
   200be:	4602      	mov	r2, r0
		has_changed &= ~(1UL << (btn_num - 1));
   200c0:	1e53      	subs	r3, r2, #1
   200c2:	fa06 f103 	lsl.w	r1, r6, r3
				? UI_EVT_BUTTON_ACTIVE
   200c6:	fa25 f303 	lsr.w	r3, r5, r3
				: UI_EVT_BUTTON_INACTIVE;
   200ca:	43db      	mvns	r3, r3
		evt.button = btn_num;
   200cc:	9201      	str	r2, [sp, #4]
				: UI_EVT_BUTTON_INACTIVE;
   200ce:	f003 0301 	and.w	r3, r3, #1
   200d2:	aa02      	add	r2, sp, #8
   200d4:	f802 3d08 	strb.w	r3, [r2, #-8]!
		has_changed &= ~(1UL << (btn_num - 1));
   200d8:	ea24 0401 	bic.w	r4, r4, r1
		callback(evt);
   200dc:	683b      	ldr	r3, [r7, #0]
   200de:	e892 0003 	ldmia.w	r2, {r0, r1}
   200e2:	4798      	blx	r3
   200e4:	e7dd      	b.n	200a2 <button_handler+0xa>
   200e6:	bf00      	nop
   200e8:	200238e0 	.word	0x200238e0

000200ec <leds_update>:
	led_on_mask = UI_LED_GET_ON(current_led_state);
   200ec:	4b11      	ldr	r3, [pc, #68]	; (20134 <leds_update+0x48>)
{
   200ee:	b570      	push	{r4, r5, r6, lr}
	led_on_mask = UI_LED_GET_ON(current_led_state);
   200f0:	881c      	ldrh	r4, [r3, #0]
	led_on = !led_on;
   200f2:	4b11      	ldr	r3, [pc, #68]	; (20138 <leds_update+0x4c>)
{
   200f4:	4606      	mov	r6, r0
	led_on = !led_on;
   200f6:	781a      	ldrb	r2, [r3, #0]
   200f8:	f082 0201 	eor.w	r2, r2, #1
   200fc:	701a      	strb	r2, [r3, #0]
   200fe:	f344 2307 	sbfx	r3, r4, #8, #8
   20102:	b264      	sxtb	r4, r4
	if (led_on) {
   20104:	b192      	cbz	r2, 2012c <leds_update+0x40>
		led_on_mask |= UI_LED_GET_BLINK(current_led_state);
   20106:	431c      	orrs	r4, r3
	if (led_on_mask != current_led_on_mask) {
   20108:	4d0c      	ldr	r5, [pc, #48]	; (2013c <leds_update+0x50>)
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   2010a:	b2e4      	uxtb	r4, r4
	if (led_on_mask != current_led_on_mask) {
   2010c:	782b      	ldrb	r3, [r5, #0]
   2010e:	42a3      	cmp	r3, r4
   20110:	d003      	beq.n	2011a <leds_update+0x2e>
		dk_set_leds(led_on_mask);
   20112:	4620      	mov	r0, r4
   20114:	f028 f8f4 	bl	48300 <dk_set_leds>
		current_led_on_mask = led_on_mask;
   20118:	702c      	strb	r4, [r5, #0]
	if (work) {
   2011a:	b156      	cbz	r6, 20132 <leds_update+0x46>
}
   2011c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   20120:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   20124:	4906      	ldr	r1, [pc, #24]	; (20140 <leds_update+0x54>)
   20126:	4807      	ldr	r0, [pc, #28]	; (20144 <leds_update+0x58>)
   20128:	f01e b888 	b.w	3e23c <k_delayed_work_submit_to_queue>
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   2012c:	ea24 0403 	bic.w	r4, r4, r3
   20130:	e7ea      	b.n	20108 <leds_update+0x1c>
}
   20132:	bd70      	pop	{r4, r5, r6, pc}
   20134:	2002a430 	.word	0x2002a430
   20138:	2002a445 	.word	0x2002a445
   2013c:	2002a444 	.word	0x2002a444
   20140:	200238e4 	.word	0x200238e4
   20144:	2002a324 	.word	0x2002a324

00020148 <ui_led_set_pattern>:

void ui_led_set_pattern(enum ui_led_pattern state)
{
	current_led_state = state;
   20148:	4b01      	ldr	r3, [pc, #4]	; (20150 <ui_led_set_pattern+0x8>)
   2014a:	8018      	strh	r0, [r3, #0]
#ifdef CONFIG_UI_LED_USE_PWM
	ui_led_set_effect(state);
#else
	current_led_state = state;
#endif /* CONFIG_UI_LED_USE_PWM */
}
   2014c:	4770      	bx	lr
   2014e:	bf00      	nop
   20150:	2002a430 	.word	0x2002a430

00020154 <ui_init>:
	}
#endif
}

int ui_init(ui_callback_t cb)
{
   20154:	b538      	push	{r3, r4, r5, lr}
   20156:	4605      	mov	r5, r0
	if (err) {
		LOG_ERR("Error when initializing PWM controlled LEDs");
		return err;
	}
#else
	err = dk_leds_init();
   20158:	f005 fb8e 	bl	25878 <dk_leds_init>
	if (err) {
   2015c:	4604      	mov	r4, r0
   2015e:	b190      	cbz	r0, 20186 <ui_init+0x32>
		LOG_ERR("Could not initialize leds, err code: %d\n", err);
   20160:	2301      	movs	r3, #1
   20162:	f04f 0000 	mov.w	r0, #0
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   20166:	4a24      	ldr	r2, [pc, #144]	; (201f8 <ui_init+0xa4>)
   20168:	f363 0002 	bfi	r0, r3, #0, #3
   2016c:	4b23      	ldr	r3, [pc, #140]	; (201fc <ui_init+0xa8>)
   2016e:	f36f 00c5 	bfc	r0, #3, #3
   20172:	1a9b      	subs	r3, r3, r2
   20174:	4622      	mov	r2, r4
   20176:	08db      	lsrs	r3, r3, #3
   20178:	4921      	ldr	r1, [pc, #132]	; (20200 <ui_init+0xac>)
   2017a:	f363 108f 	bfi	r0, r3, #6, #10
	if (cb) {
		callback  = cb;

		err = dk_buttons_init(button_handler);
		if (err) {
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   2017e:	f026 fa90 	bl	466a2 <log_string_sync>
		return err;
	}
#endif /* CONFIG_UI_NMOS */

	return err;
}
   20182:	4620      	mov	r0, r4
   20184:	bd38      	pop	{r3, r4, r5, pc}
	err = dk_set_leds_state(0x00, DK_ALL_LEDS_MSK);
   20186:	210f      	movs	r1, #15
   20188:	f028 f8b0 	bl	482ec <dk_set_leds_state>
	if (err) {
   2018c:	4604      	mov	r4, r0
   2018e:	b178      	cbz	r0, 201b0 <ui_init+0x5c>
		LOG_ERR("Could not set leds state, err code: %d\n", err);
   20190:	2301      	movs	r3, #1
   20192:	f04f 0000 	mov.w	r0, #0
   20196:	4a18      	ldr	r2, [pc, #96]	; (201f8 <ui_init+0xa4>)
   20198:	f363 0002 	bfi	r0, r3, #0, #3
   2019c:	4b17      	ldr	r3, [pc, #92]	; (201fc <ui_init+0xa8>)
   2019e:	f36f 00c5 	bfc	r0, #3, #3
   201a2:	1a9b      	subs	r3, r3, r2
   201a4:	08db      	lsrs	r3, r3, #3
   201a6:	f363 108f 	bfi	r0, r3, #6, #10
   201aa:	4622      	mov	r2, r4
   201ac:	4915      	ldr	r1, [pc, #84]	; (20204 <ui_init+0xb0>)
   201ae:	e7e6      	b.n	2017e <ui_init+0x2a>
	k_delayed_work_init(&leds_update_work, leds_update);
   201b0:	4915      	ldr	r1, [pc, #84]	; (20208 <ui_init+0xb4>)
   201b2:	4816      	ldr	r0, [pc, #88]	; (2020c <ui_init+0xb8>)
   201b4:	f028 fd0e 	bl	48bd4 <k_delayed_work_init>
   201b8:	4622      	mov	r2, r4
   201ba:	4914      	ldr	r1, [pc, #80]	; (2020c <ui_init+0xb8>)
   201bc:	4814      	ldr	r0, [pc, #80]	; (20210 <ui_init+0xbc>)
   201be:	f01e f83d 	bl	3e23c <k_delayed_work_submit_to_queue>
	if (cb) {
   201c2:	2d00      	cmp	r5, #0
   201c4:	d0dd      	beq.n	20182 <ui_init+0x2e>
		callback  = cb;
   201c6:	4b13      	ldr	r3, [pc, #76]	; (20214 <ui_init+0xc0>)
		err = dk_buttons_init(button_handler);
   201c8:	4813      	ldr	r0, [pc, #76]	; (20218 <ui_init+0xc4>)
		callback  = cb;
   201ca:	601d      	str	r5, [r3, #0]
		err = dk_buttons_init(button_handler);
   201cc:	f005 fbb4 	bl	25938 <dk_buttons_init>
		if (err) {
   201d0:	4604      	mov	r4, r0
   201d2:	2800      	cmp	r0, #0
   201d4:	d0d5      	beq.n	20182 <ui_init+0x2e>
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   201d6:	2301      	movs	r3, #1
   201d8:	f04f 0000 	mov.w	r0, #0
   201dc:	4a06      	ldr	r2, [pc, #24]	; (201f8 <ui_init+0xa4>)
   201de:	f363 0002 	bfi	r0, r3, #0, #3
   201e2:	4b06      	ldr	r3, [pc, #24]	; (201fc <ui_init+0xa8>)
   201e4:	f36f 00c5 	bfc	r0, #3, #3
   201e8:	1a9b      	subs	r3, r3, r2
   201ea:	08db      	lsrs	r3, r3, #3
   201ec:	f363 108f 	bfi	r0, r3, #6, #10
   201f0:	4622      	mov	r2, r4
   201f2:	490a      	ldr	r1, [pc, #40]	; (2021c <ui_init+0xc8>)
   201f4:	e7c3      	b.n	2017e <ui_init+0x2a>
   201f6:	bf00      	nop
   201f8:	00049018 	.word	0x00049018
   201fc:	00049118 	.word	0x00049118
   20200:	0004bac5 	.word	0x0004bac5
   20204:	0004baee 	.word	0x0004baee
   20208:	000200ed 	.word	0x000200ed
   2020c:	200238e4 	.word	0x200238e4
   20210:	2002a324 	.word	0x2002a324
   20214:	200238e0 	.word	0x200238e0
   20218:	00020099 	.word	0x00020099
   2021c:	0004bb16 	.word	0x0004bb16

00020220 <cloud_search_cmd>:

	return 0;
}

static int cloud_search_cmd(cJSON *group_obj, enum cloud_cmd_group group)
{
   20220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20224:	b087      	sub	sp, #28
	struct cmd *cmd_group;
	cJSON *recipient_obj	= NULL;
	cJSON *channel_obj	= NULL;
	cJSON *type_obj		= NULL;

	if (group_obj == NULL) {
   20226:	9002      	str	r0, [sp, #8]
   20228:	2800      	cmp	r0, #0
   2022a:	d050      	beq.n	202ce <cloud_search_cmd+0xae>
		return -EINVAL;
	}

	if (group == CLOUD_CMD_GROUP_SET) {
   2022c:	b151      	cbz	r1, 20244 <cloud_search_cmd+0x24>
		cmd_group = &group_set;
	} else if (group == CLOUD_CMD_GROUP_GET) {
   2022e:	2901      	cmp	r1, #1
   20230:	d14d      	bne.n	202ce <cloud_search_cmd+0xae>
		cmd_group = &group_get;
   20232:	4f28      	ldr	r7, [pc, #160]	; (202d4 <cloud_search_cmd+0xb4>)
	} else {
		return -EINVAL;
	}

	for (size_t i = 0; i < cmd_group->num_children; i++) {
   20234:	2600      	movs	r6, #0
   20236:	68fb      	ldr	r3, [r7, #12]
   20238:	42b3      	cmp	r3, r6
   2023a:	d805      	bhi.n	20248 <cloud_search_cmd+0x28>
				cloud_command_cb(&cmd_parsed);
			}
		}
	}

	return 0;
   2023c:	2000      	movs	r0, #0
}
   2023e:	b007      	add	sp, #28
   20240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cmd_group = &group_set;
   20244:	4f24      	ldr	r7, [pc, #144]	; (202d8 <cloud_search_cmd+0xb8>)
   20246:	e7f5      	b.n	20234 <cloud_search_cmd+0x14>
		struct cmd rcpt = cmd_group->children[i];
   20248:	68b9      	ldr	r1, [r7, #8]
   2024a:	0133      	lsls	r3, r6, #4
   2024c:	18ca      	adds	r2, r1, r3
		recipient_obj = json_object_decode(group_obj,
   2024e:	9802      	ldr	r0, [sp, #8]
   20250:	58c9      	ldr	r1, [r1, r3]
		struct cmd rcpt = cmd_group->children[i];
   20252:	f892 8004 	ldrb.w	r8, [r2, #4]
   20256:	e9d2 4202 	ldrd	r4, r2, [r2, #8]
   2025a:	9203      	str	r2, [sp, #12]
		recipient_obj = json_object_decode(group_obj,
   2025c:	f025 fdcb 	bl	45df6 <json_object_decode>
		if (recipient_obj == NULL) {
   20260:	4682      	mov	sl, r0
   20262:	b908      	cbnz	r0, 20268 <cloud_search_cmd+0x48>
	for (size_t i = 0; i < cmd_group->num_children; i++) {
   20264:	3601      	adds	r6, #1
   20266:	e7e6      	b.n	20236 <cloud_search_cmd+0x16>
		cmd_parsed.recipient = rcpt.recipient;
   20268:	4d1c      	ldr	r5, [pc, #112]	; (202dc <cloud_search_cmd+0xbc>)
   2026a:	f885 8001 	strb.w	r8, [r5, #1]
		for (size_t j = 0; j < rcpt.num_children; j++) {
   2026e:	f04f 0800 	mov.w	r8, #0
   20272:	9b03      	ldr	r3, [sp, #12]
   20274:	4598      	cmp	r8, r3
   20276:	d0f5      	beq.n	20264 <cloud_search_cmd+0x44>
			struct cmd chan = rcpt.children[j];
   20278:	68a3      	ldr	r3, [r4, #8]
			channel_obj = json_object_decode(recipient_obj,
   2027a:	6821      	ldr	r1, [r4, #0]
			struct cmd chan = rcpt.children[j];
   2027c:	9301      	str	r3, [sp, #4]
   2027e:	68e3      	ldr	r3, [r4, #12]
			channel_obj = json_object_decode(recipient_obj,
   20280:	4650      	mov	r0, sl
			struct cmd chan = rcpt.children[j];
   20282:	f894 9004 	ldrb.w	r9, [r4, #4]
   20286:	9304      	str	r3, [sp, #16]
			channel_obj = json_object_decode(recipient_obj,
   20288:	f025 fdb5 	bl	45df6 <json_object_decode>
			if (channel_obj == NULL) {
   2028c:	4683      	mov	fp, r0
   2028e:	b918      	cbnz	r0, 20298 <cloud_search_cmd+0x78>
		for (size_t j = 0; j < rcpt.num_children; j++) {
   20290:	f108 0801 	add.w	r8, r8, #1
   20294:	3410      	adds	r4, #16
   20296:	e7ec      	b.n	20272 <cloud_search_cmd+0x52>
			cmd_parsed.channel = chan.channel;
   20298:	f885 9002 	strb.w	r9, [r5, #2]
			for (size_t k = 0; k < chan.num_children; k++) {
   2029c:	f04f 0900 	mov.w	r9, #0
   202a0:	9b04      	ldr	r3, [sp, #16]
   202a2:	4599      	cmp	r9, r3
   202a4:	d0f4      	beq.n	20290 <cloud_search_cmd+0x70>
				struct cmd typ = chan.children[k];
   202a6:	9b01      	ldr	r3, [sp, #4]
   202a8:	ea4f 1109 	mov.w	r1, r9, lsl #4
   202ac:	185a      	adds	r2, r3, r1
   202ae:	7912      	ldrb	r2, [r2, #4]
				type_obj = json_object_decode(channel_obj,
   202b0:	5859      	ldr	r1, [r3, r1]
   202b2:	4658      	mov	r0, fp
				struct cmd typ = chan.children[k];
   202b4:	9205      	str	r2, [sp, #20]
				type_obj = json_object_decode(channel_obj,
   202b6:	f025 fd9e 	bl	45df6 <json_object_decode>
				if (type_obj == NULL) {
   202ba:	b128      	cbz	r0, 202c8 <cloud_search_cmd+0xa8>
				cmd_parsed.type = typ.type;
   202bc:	9a05      	ldr	r2, [sp, #20]
				cloud_command_cb(&cmd_parsed);
   202be:	4b08      	ldr	r3, [pc, #32]	; (202e0 <cloud_search_cmd+0xc0>)
				cmd_parsed.type = typ.type;
   202c0:	70ea      	strb	r2, [r5, #3]
				cloud_command_cb(&cmd_parsed);
   202c2:	4806      	ldr	r0, [pc, #24]	; (202dc <cloud_search_cmd+0xbc>)
   202c4:	681a      	ldr	r2, [r3, #0]
   202c6:	4790      	blx	r2
			for (size_t k = 0; k < chan.num_children; k++) {
   202c8:	f109 0901 	add.w	r9, r9, #1
   202cc:	e7e8      	b.n	202a0 <cloud_search_cmd+0x80>
		return -EINVAL;
   202ce:	f06f 0015 	mvn.w	r0, #21
   202d2:	e7b4      	b.n	2023e <cloud_search_cmd+0x1e>
   202d4:	20031b70 	.word	0x20031b70
   202d8:	20031b80 	.word	0x20031b80
   202dc:	20020970 	.word	0x20020970
   202e0:	20023904 	.word	0x20023904

000202e4 <cloud_encode_data>:
{
   202e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   202e8:	460f      	mov	r7, r1
	if (channel == NULL || channel->data.buf == NULL ||
   202ea:	4606      	mov	r6, r0
   202ec:	2800      	cmp	r0, #0
   202ee:	d04d      	beq.n	2038c <cloud_encode_data+0xa8>
   202f0:	6843      	ldr	r3, [r0, #4]
   202f2:	2b00      	cmp	r3, #0
   202f4:	d04a      	beq.n	2038c <cloud_encode_data+0xa8>
   202f6:	6883      	ldr	r3, [r0, #8]
   202f8:	2b00      	cmp	r3, #0
   202fa:	d047      	beq.n	2038c <cloud_encode_data+0xa8>
	    channel->data.len == 0 || output == NULL) {
   202fc:	2900      	cmp	r1, #0
   202fe:	d045      	beq.n	2038c <cloud_encode_data+0xa8>
	cJSON *root_obj = cJSON_CreateObject();
   20300:	f004 fe24 	bl	24f4c <cJSON_CreateObject>
	if (root_obj == NULL) {
   20304:	4605      	mov	r5, r0
   20306:	b930      	cbnz	r0, 20316 <cloud_encode_data+0x32>
		cJSON_Delete(root_obj);
   20308:	f004 fd5a 	bl	24dc0 <cJSON_Delete>
		return -ENOMEM;
   2030c:	f06f 040b 	mvn.w	r4, #11
}
   20310:	4620      	mov	r0, r4
   20312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = json_add_str(root_obj, "appId", channel_type_str[channel->type]);
   20316:	7832      	ldrb	r2, [r6, #0]
	json_str = cJSON_CreateString(item);
   20318:	4b1e      	ldr	r3, [pc, #120]	; (20394 <cloud_encode_data+0xb0>)
   2031a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2031e:	f004 fdf1 	bl	24f04 <cJSON_CreateString>
	if (json_str == NULL) {
   20322:	4602      	mov	r2, r0
   20324:	b348      	cbz	r0, 2037a <cloud_encode_data+0x96>
	cJSON_AddItemToObject(parent, str, item);
   20326:	491c      	ldr	r1, [pc, #112]	; (20398 <cloud_encode_data+0xb4>)
   20328:	4628      	mov	r0, r5
   2032a:	f027 fbb8 	bl	47a9e <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   2032e:	f04f 0800 	mov.w	r8, #0
	json_str = cJSON_CreateString(item);
   20332:	6870      	ldr	r0, [r6, #4]
   20334:	f004 fde6 	bl	24f04 <cJSON_CreateString>
	if (json_str == NULL) {
   20338:	4602      	mov	r2, r0
   2033a:	b308      	cbz	r0, 20380 <cloud_encode_data+0x9c>
	cJSON_AddItemToObject(parent, str, item);
   2033c:	4917      	ldr	r1, [pc, #92]	; (2039c <cloud_encode_data+0xb8>)
   2033e:	4628      	mov	r0, r5
   20340:	f027 fbad 	bl	47a9e <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   20344:	2400      	movs	r4, #0
	json_str = cJSON_CreateString(item);
   20346:	4816      	ldr	r0, [pc, #88]	; (203a0 <cloud_encode_data+0xbc>)
   20348:	f004 fddc 	bl	24f04 <cJSON_CreateString>
	ret += json_add_str(root_obj, "data", channel->data.buf);
   2034c:	4444      	add	r4, r8
	if (json_str == NULL) {
   2034e:	4602      	mov	r2, r0
   20350:	b1c8      	cbz	r0, 20386 <cloud_encode_data+0xa2>
	cJSON_AddItemToObject(parent, str, item);
   20352:	4914      	ldr	r1, [pc, #80]	; (203a4 <cloud_encode_data+0xc0>)
   20354:	4628      	mov	r0, r5
   20356:	f027 fba2 	bl	47a9e <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   2035a:	2300      	movs	r3, #0
	if (ret != 0) {
   2035c:	18e4      	adds	r4, r4, r3
		cJSON_Delete(root_obj);
   2035e:	4628      	mov	r0, r5
	if (ret != 0) {
   20360:	d1d2      	bne.n	20308 <cloud_encode_data+0x24>
	buffer = cJSON_PrintUnformatted(root_obj);
   20362:	f027 fb8c 	bl	47a7e <cJSON_PrintUnformatted>
   20366:	4606      	mov	r6, r0
	cJSON_Delete(root_obj);
   20368:	4628      	mov	r0, r5
   2036a:	f004 fd29 	bl	24dc0 <cJSON_Delete>
	output->buf = buffer;
   2036e:	603e      	str	r6, [r7, #0]
	output->len = strlen(buffer);
   20370:	4630      	mov	r0, r6
   20372:	f020 f907 	bl	40584 <strlen>
   20376:	6078      	str	r0, [r7, #4]
	return 0;
   20378:	e7ca      	b.n	20310 <cloud_encode_data+0x2c>
		return -ENOMEM;
   2037a:	f06f 080b 	mvn.w	r8, #11
   2037e:	e7d8      	b.n	20332 <cloud_encode_data+0x4e>
   20380:	f06f 040b 	mvn.w	r4, #11
   20384:	e7df      	b.n	20346 <cloud_encode_data+0x62>
   20386:	f06f 030b 	mvn.w	r3, #11
   2038a:	e7e7      	b.n	2035c <cloud_encode_data+0x78>
		return -EINVAL;
   2038c:	f06f 0415 	mvn.w	r4, #21
   20390:	e7be      	b.n	20310 <cloud_encode_data+0x2c>
   20392:	bf00      	nop
   20394:	000492e0 	.word	0x000492e0
   20398:	0004bb42 	.word	0x0004bb42
   2039c:	0005013c 	.word	0x0005013c
   203a0:	0004dae7 	.word	0x0004dae7
   203a4:	0004bb48 	.word	0x0004bb48

000203a8 <cloud_encode_digital_twin_data>:
{
   203a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   203ac:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(channel != NULL);
   203ae:	4604      	mov	r4, r0
   203b0:	b958      	cbnz	r0, 203ca <cloud_encode_digital_twin_data+0x22>
   203b2:	493e      	ldr	r1, [pc, #248]	; (204ac <cloud_encode_digital_twin_data+0x104>)
   203b4:	483e      	ldr	r0, [pc, #248]	; (204b0 <cloud_encode_digital_twin_data+0x108>)
   203b6:	f240 130b 	movw	r3, #267	; 0x10b
   203ba:	4a3e      	ldr	r2, [pc, #248]	; (204b4 <cloud_encode_digital_twin_data+0x10c>)
   203bc:	f026 f94e 	bl	4665c <printk>
   203c0:	f240 110b 	movw	r1, #267	; 0x10b
   203c4:	483b      	ldr	r0, [pc, #236]	; (204b4 <cloud_encode_digital_twin_data+0x10c>)
   203c6:	f026 f956 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(channel->data.buf != NULL);
   203ca:	6863      	ldr	r3, [r4, #4]
   203cc:	b95b      	cbnz	r3, 203e6 <cloud_encode_digital_twin_data+0x3e>
   203ce:	493a      	ldr	r1, [pc, #232]	; (204b8 <cloud_encode_digital_twin_data+0x110>)
   203d0:	4837      	ldr	r0, [pc, #220]	; (204b0 <cloud_encode_digital_twin_data+0x108>)
   203d2:	f44f 7386 	mov.w	r3, #268	; 0x10c
   203d6:	4a37      	ldr	r2, [pc, #220]	; (204b4 <cloud_encode_digital_twin_data+0x10c>)
   203d8:	f026 f940 	bl	4665c <printk>
   203dc:	f44f 7186 	mov.w	r1, #268	; 0x10c
   203e0:	4834      	ldr	r0, [pc, #208]	; (204b4 <cloud_encode_digital_twin_data+0x10c>)
   203e2:	f026 f948 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(channel->data.len != 0);
   203e6:	68a3      	ldr	r3, [r4, #8]
   203e8:	b95b      	cbnz	r3, 20402 <cloud_encode_digital_twin_data+0x5a>
   203ea:	4934      	ldr	r1, [pc, #208]	; (204bc <cloud_encode_digital_twin_data+0x114>)
   203ec:	4830      	ldr	r0, [pc, #192]	; (204b0 <cloud_encode_digital_twin_data+0x108>)
   203ee:	f240 130d 	movw	r3, #269	; 0x10d
   203f2:	4a30      	ldr	r2, [pc, #192]	; (204b4 <cloud_encode_digital_twin_data+0x10c>)
   203f4:	f026 f932 	bl	4665c <printk>
   203f8:	f240 110d 	movw	r1, #269	; 0x10d
   203fc:	482d      	ldr	r0, [pc, #180]	; (204b4 <cloud_encode_digital_twin_data+0x10c>)
   203fe:	f026 f93a 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   20402:	f1b8 0f00 	cmp.w	r8, #0
   20406:	d10b      	bne.n	20420 <cloud_encode_digital_twin_data+0x78>
   20408:	492d      	ldr	r1, [pc, #180]	; (204c0 <cloud_encode_digital_twin_data+0x118>)
   2040a:	4829      	ldr	r0, [pc, #164]	; (204b0 <cloud_encode_digital_twin_data+0x108>)
   2040c:	f44f 7387 	mov.w	r3, #270	; 0x10e
   20410:	4a28      	ldr	r2, [pc, #160]	; (204b4 <cloud_encode_digital_twin_data+0x10c>)
   20412:	f026 f923 	bl	4665c <printk>
   20416:	f44f 7187 	mov.w	r1, #270	; 0x10e
   2041a:	4826      	ldr	r0, [pc, #152]	; (204b4 <cloud_encode_digital_twin_data+0x10c>)
   2041c:	f026 f92b 	bl	46676 <assert_post_action>
	cJSON *root_obj = cJSON_CreateObject();
   20420:	f004 fd94 	bl	24f4c <cJSON_CreateObject>
   20424:	4605      	mov	r5, r0
	cJSON *state_obj = cJSON_CreateObject();
   20426:	f004 fd91 	bl	24f4c <cJSON_CreateObject>
   2042a:	4607      	mov	r7, r0
	cJSON *reported_obj = cJSON_CreateObject();
   2042c:	f004 fd8e 	bl	24f4c <cJSON_CreateObject>
   20430:	4606      	mov	r6, r0
	if (root_obj == NULL || state_obj == NULL || reported_obj == NULL) {
   20432:	b10d      	cbz	r5, 20438 <cloud_encode_digital_twin_data+0x90>
   20434:	b107      	cbz	r7, 20438 <cloud_encode_digital_twin_data+0x90>
   20436:	b960      	cbnz	r0, 20452 <cloud_encode_digital_twin_data+0xaa>
		cJSON_Delete(root_obj);
   20438:	4628      	mov	r0, r5
   2043a:	f004 fcc1 	bl	24dc0 <cJSON_Delete>
		cJSON_Delete(state_obj);
   2043e:	4638      	mov	r0, r7
   20440:	f004 fcbe 	bl	24dc0 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   20444:	4630      	mov	r0, r6
   20446:	f004 fcbb 	bl	24dc0 <cJSON_Delete>
		return -ENOMEM;
   2044a:	f06f 000b 	mvn.w	r0, #11
}
   2044e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (channel->type == CLOUD_CHANNEL_DEVICE_INFO) {
   20452:	7823      	ldrb	r3, [r4, #0]
   20454:	2b0c      	cmp	r3, #12
   20456:	d107      	bne.n	20468 <cloud_encode_digital_twin_data+0xc0>
		cJSON *dummy_obj = cJSON_CreateNull();
   20458:	f004 fd48 	bl	24eec <cJSON_CreateNull>
		if (dummy_obj == NULL) {
   2045c:	4602      	mov	r2, r0
   2045e:	b118      	cbz	r0, 20468 <cloud_encode_digital_twin_data+0xc0>
	cJSON_AddItemToObject(parent, str, item);
   20460:	4918      	ldr	r1, [pc, #96]	; (204c4 <cloud_encode_digital_twin_data+0x11c>)
   20462:	4630      	mov	r0, r6
   20464:	f027 fb1b 	bl	47a9e <cJSON_AddItemToObject>
   20468:	4b17      	ldr	r3, [pc, #92]	; (204c8 <cloud_encode_digital_twin_data+0x120>)
	ret += json_add_obj(reported_obj, channel_type_str[channel->type],
   2046a:	7821      	ldrb	r1, [r4, #0]
	cJSON_AddItemToObject(parent, str, item);
   2046c:	6862      	ldr	r2, [r4, #4]
   2046e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   20472:	4630      	mov	r0, r6
   20474:	f027 fb13 	bl	47a9e <cJSON_AddItemToObject>
   20478:	4632      	mov	r2, r6
   2047a:	4914      	ldr	r1, [pc, #80]	; (204cc <cloud_encode_digital_twin_data+0x124>)
   2047c:	4638      	mov	r0, r7
   2047e:	f027 fb0e 	bl	47a9e <cJSON_AddItemToObject>
   20482:	463a      	mov	r2, r7
   20484:	4912      	ldr	r1, [pc, #72]	; (204d0 <cloud_encode_digital_twin_data+0x128>)
   20486:	4628      	mov	r0, r5
   20488:	f027 fb09 	bl	47a9e <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(root_obj);
   2048c:	4628      	mov	r0, r5
   2048e:	f027 faf6 	bl	47a7e <cJSON_PrintUnformatted>
   20492:	4604      	mov	r4, r0
	cJSON_Delete(root_obj);
   20494:	4628      	mov	r0, r5
   20496:	f004 fc93 	bl	24dc0 <cJSON_Delete>
	output->buf = buffer;
   2049a:	f8c8 4000 	str.w	r4, [r8]
	output->len = strlen(buffer);
   2049e:	4620      	mov	r0, r4
   204a0:	f020 f870 	bl	40584 <strlen>
   204a4:	f8c8 0004 	str.w	r0, [r8, #4]
	return 0;
   204a8:	2000      	movs	r0, #0
   204aa:	e7d0      	b.n	2044e <cloud_encode_digital_twin_data+0xa6>
   204ac:	0004bb75 	.word	0x0004bb75
   204b0:	0004b5bf 	.word	0x0004b5bf
   204b4:	0004bb54 	.word	0x0004bb54
   204b8:	0004bb8c 	.word	0x0004bb8c
   204bc:	0004bbad 	.word	0x0004bbad
   204c0:	0004bbc4 	.word	0x0004bbc4
   204c4:	0004bbda 	.word	0x0004bbda
   204c8:	000492e0 	.word	0x000492e0
   204cc:	0004bbe1 	.word	0x0004bbe1
   204d0:	0004bbea 	.word	0x0004bbea

000204d4 <cloud_decode_command>:

int cloud_decode_command(char const *input)
{
   204d4:	b510      	push	{r4, lr}
	int ret;
	cJSON *root_obj		= NULL;
	cJSON *group_obj	= NULL;

	if (input == NULL) {
   204d6:	b1f0      	cbz	r0, 20516 <cloud_decode_command+0x42>
		return -EINVAL;
	}

	root_obj = cJSON_Parse(input);
   204d8:	f027 facd 	bl	47a76 <cJSON_Parse>
	if (root_obj == NULL) {
   204dc:	4604      	mov	r4, r0
   204de:	b1e8      	cbz	r0, 2051c <cloud_decode_command+0x48>
		return -ENOENT;
	}

	group_obj = json_object_decode(root_obj, "get");
   204e0:	4910      	ldr	r1, [pc, #64]	; (20524 <cloud_decode_command+0x50>)
   204e2:	f025 fc88 	bl	45df6 <json_object_decode>
	if (group_obj != NULL) {
   204e6:	b928      	cbnz	r0, 204f4 <cloud_decode_command+0x20>
		if (ret) {
			return ret;
		}
	}

	group_obj = json_object_decode(root_obj, "set");
   204e8:	490f      	ldr	r1, [pc, #60]	; (20528 <cloud_decode_command+0x54>)
   204ea:	4620      	mov	r0, r4
   204ec:	f025 fc83 	bl	45df6 <json_object_decode>
	if (group_obj != NULL) {
   204f0:	b948      	cbnz	r0, 20506 <cloud_decode_command+0x32>
			return ret;
		}
	}

	return 0;
}
   204f2:	bd10      	pop	{r4, pc}
		cmd_parsed.group = group_get.group;
   204f4:	4b0d      	ldr	r3, [pc, #52]	; (2052c <cloud_decode_command+0x58>)
   204f6:	7919      	ldrb	r1, [r3, #4]
   204f8:	4b0d      	ldr	r3, [pc, #52]	; (20530 <cloud_decode_command+0x5c>)
   204fa:	7019      	strb	r1, [r3, #0]
		ret = cloud_search_cmd(group_obj, cmd_parsed.group);
   204fc:	f7ff fe90 	bl	20220 <cloud_search_cmd>
		if (ret) {
   20500:	2800      	cmp	r0, #0
   20502:	d0f1      	beq.n	204e8 <cloud_decode_command+0x14>
   20504:	e7f5      	b.n	204f2 <cloud_decode_command+0x1e>
		cmd_parsed.group = group_set.group;
   20506:	4b0b      	ldr	r3, [pc, #44]	; (20534 <cloud_decode_command+0x60>)
}
   20508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		cmd_parsed.group = group_set.group;
   2050c:	7919      	ldrb	r1, [r3, #4]
   2050e:	4b08      	ldr	r3, [pc, #32]	; (20530 <cloud_decode_command+0x5c>)
   20510:	7019      	strb	r1, [r3, #0]
		ret = cloud_search_cmd(group_obj, cmd_parsed.group);
   20512:	f7ff be85 	b.w	20220 <cloud_search_cmd>
		return -EINVAL;
   20516:	f06f 0015 	mvn.w	r0, #21
   2051a:	e7ea      	b.n	204f2 <cloud_decode_command+0x1e>
		return -ENOENT;
   2051c:	f06f 0001 	mvn.w	r0, #1
   20520:	e7e7      	b.n	204f2 <cloud_decode_command+0x1e>
   20522:	bf00      	nop
   20524:	0004ed1f 	.word	0x0004ed1f
   20528:	0004bcad 	.word	0x0004bcad
   2052c:	20031b70 	.word	0x20031b70
   20530:	20020970 	.word	0x20020970
   20534:	20031b80 	.word	0x20031b80

00020538 <cloud_decode_init>:

int cloud_decode_init(cloud_cmd_cb_t cb)
{
	cloud_command_cb = cb;
   20538:	4b01      	ldr	r3, [pc, #4]	; (20540 <cloud_decode_init+0x8>)
   2053a:	6018      	str	r0, [r3, #0]

	return 0;
}
   2053c:	2000      	movs	r0, #0
   2053e:	4770      	bx	lr
   20540:	20023904 	.word	0x20023904

00020544 <cloud_encode_env_sensors_data>:

int cloud_encode_env_sensors_data(const env_sensor_data_t *sensor_data,
				 struct cloud_msg *output)
{
   20544:	b570      	push	{r4, r5, r6, lr}
   20546:	460d      	mov	r5, r1
   20548:	b088      	sub	sp, #32
	__ASSERT_NO_MSG(sensor_data != NULL);
   2054a:	4604      	mov	r4, r0
   2054c:	b958      	cbnz	r0, 20566 <cloud_encode_env_sensors_data+0x22>
   2054e:	491f      	ldr	r1, [pc, #124]	; (205cc <cloud_encode_env_sensors_data+0x88>)
   20550:	481f      	ldr	r0, [pc, #124]	; (205d0 <cloud_encode_env_sensors_data+0x8c>)
   20552:	f240 13a9 	movw	r3, #425	; 0x1a9
   20556:	4a1f      	ldr	r2, [pc, #124]	; (205d4 <cloud_encode_env_sensors_data+0x90>)
   20558:	f026 f880 	bl	4665c <printk>
   2055c:	f240 11a9 	movw	r1, #425	; 0x1a9
   20560:	481c      	ldr	r0, [pc, #112]	; (205d4 <cloud_encode_env_sensors_data+0x90>)
   20562:	f026 f888 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   20566:	b95d      	cbnz	r5, 20580 <cloud_encode_env_sensors_data+0x3c>
   20568:	491b      	ldr	r1, [pc, #108]	; (205d8 <cloud_encode_env_sensors_data+0x94>)
   2056a:	4819      	ldr	r0, [pc, #100]	; (205d0 <cloud_encode_env_sensors_data+0x8c>)
   2056c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   20570:	4a18      	ldr	r2, [pc, #96]	; (205d4 <cloud_encode_env_sensors_data+0x90>)
   20572:	f026 f873 	bl	4665c <printk>
   20576:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   2057a:	4816      	ldr	r0, [pc, #88]	; (205d4 <cloud_encode_env_sensors_data+0x90>)
   2057c:	f026 f87b 	bl	46676 <assert_post_action>

	char buf[6];
	u8_t len;
	struct cloud_channel_data cloud_sensor;

	switch (sensor_data->type) {
   20580:	7823      	ldrb	r3, [r4, #0]
   20582:	2b03      	cmp	r3, #3
   20584:	d81f      	bhi.n	205c6 <cloud_encode_env_sensors_data+0x82>
   20586:	e8df f003 	tbb	[pc, r3]
   2058a:	1802      	.short	0x1802
   2058c:	1c1a      	.short	0x1c1a
	case ENV_SENSOR_TEMPERATURE:
		cloud_sensor.type = CLOUD_CHANNEL_TEMP;
   2058e:	2307      	movs	r3, #7

	default:
		return -1;
	}

	len = snprintf(buf, sizeof(buf), "%.1f",
   20590:	ae02      	add	r6, sp, #8
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   20592:	f88d 3010 	strb.w	r3, [sp, #16]
	len = snprintf(buf, sizeof(buf), "%.1f",
   20596:	2106      	movs	r1, #6
   20598:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   2059c:	4630      	mov	r0, r6
   2059e:	e9cd 2300 	strd	r2, r3, [sp]
   205a2:	4a0e      	ldr	r2, [pc, #56]	; (205dc <cloud_encode_env_sensors_data+0x98>)
   205a4:	f01f fe1e 	bl	401e4 <snprintf>
		sensor_data->value);
	cloud_sensor.data.buf = buf;
	cloud_sensor.data.len = len;
   205a8:	b2c0      	uxtb	r0, r0
   205aa:	9006      	str	r0, [sp, #24]

	return cloud_encode_data(&cloud_sensor, output);
   205ac:	4629      	mov	r1, r5
   205ae:	a804      	add	r0, sp, #16
	cloud_sensor.data.buf = buf;
   205b0:	9605      	str	r6, [sp, #20]
	return cloud_encode_data(&cloud_sensor, output);
   205b2:	f7ff fe97 	bl	202e4 <cloud_encode_data>
}
   205b6:	b008      	add	sp, #32
   205b8:	bd70      	pop	{r4, r5, r6, pc}
		cloud_sensor.type = CLOUD_CHANNEL_HUMID;
   205ba:	2308      	movs	r3, #8
   205bc:	e7e8      	b.n	20590 <cloud_encode_env_sensors_data+0x4c>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_PRESS;
   205be:	2309      	movs	r3, #9
   205c0:	e7e6      	b.n	20590 <cloud_encode_env_sensors_data+0x4c>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   205c2:	230a      	movs	r3, #10
   205c4:	e7e4      	b.n	20590 <cloud_encode_env_sensors_data+0x4c>
		return -1;
   205c6:	f04f 30ff 	mov.w	r0, #4294967295
   205ca:	e7f4      	b.n	205b6 <cloud_encode_env_sensors_data+0x72>
   205cc:	0004bbf0 	.word	0x0004bbf0
   205d0:	0004b5bf 	.word	0x0004b5bf
   205d4:	0004bb54 	.word	0x0004bb54
   205d8:	0004bbc4 	.word	0x0004bbc4
   205dc:	0004bc0b 	.word	0x0004bc0b

000205e0 <service_info_json_object_encode>:
}

int service_info_json_object_encode(
	const char * const ui[], const u32_t ui_count, const char * const fota[],
	const u32_t fota_count, const u16_t fota_version, cJSON * const obj_out)
{
   205e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   205e4:	b087      	sub	sp, #28
   205e6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   205e8:	4604      	mov	r4, r0
   205ea:	4689      	mov	r9, r1
   205ec:	4617      	mov	r7, r2
   205ee:	4698      	mov	r8, r3
	int err = 0;
	cJSON *service_info_obj = NULL;
	char fota_name[FOTAS_JSON_NAME_SIZE];

	if ((obj_out == NULL) || ((ui == NULL) && ui_count) ||
   205f0:	b386      	cbz	r6, 20654 <service_info_json_object_encode+0x74>
   205f2:	b900      	cbnz	r0, 205f6 <service_info_json_object_encode+0x16>
   205f4:	bb71      	cbnz	r1, 20654 <service_info_json_object_encode+0x74>
   205f6:	b917      	cbnz	r7, 205fe <service_info_json_object_encode+0x1e>
	    ((fota == NULL) && fota_count)) {
   205f8:	f1b8 0f00 	cmp.w	r8, #0
   205fc:	d12a      	bne.n	20654 <service_info_json_object_encode+0x74>
		return -EINVAL;
	}

	service_info_obj = cJSON_CreateObject();
   205fe:	f004 fca5 	bl	24f4c <cJSON_CreateObject>
	if (service_info_obj == NULL) {
   20602:	4605      	mov	r5, r0
   20604:	b348      	cbz	r0, 2065a <service_info_json_object_encode+0x7a>
		return -ENOMEM;
	}

	if (!err) {
		err = add_array_obj(ui, ui_count, UI_JSON_NAME,
   20606:	4603      	mov	r3, r0
   20608:	4a15      	ldr	r2, [pc, #84]	; (20660 <service_info_json_object_encode+0x80>)
   2060a:	4620      	mov	r0, r4
   2060c:	4649      	mov	r1, r9
   2060e:	f025 fbf6 	bl	45dfe <add_array_obj>
				    service_info_obj);
	}

	if (!err) {
   20612:	4604      	mov	r4, r0
   20614:	b9d0      	cbnz	r0, 2064c <service_info_json_object_encode+0x6c>
		snprintf(fota_name, sizeof(fota_name), "%s%hu", FOTAS_JSON_NAME,
   20616:	210c      	movs	r1, #12
   20618:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   2061c:	4a11      	ldr	r2, [pc, #68]	; (20664 <service_info_json_object_encode+0x84>)
   2061e:	9300      	str	r3, [sp, #0]
   20620:	eb0d 0001 	add.w	r0, sp, r1
   20624:	4b10      	ldr	r3, [pc, #64]	; (20668 <service_info_json_object_encode+0x88>)
   20626:	f01f fddd 	bl	401e4 <snprintf>
			 fota_version);
		err = add_array_obj(fota, fota_count, fota_name,
   2062a:	462b      	mov	r3, r5
   2062c:	aa03      	add	r2, sp, #12
   2062e:	4641      	mov	r1, r8
   20630:	4638      	mov	r0, r7
   20632:	f025 fbe4 	bl	45dfe <add_array_obj>
				    service_info_obj);
	}

	if (!err) {
   20636:	4604      	mov	r4, r0
   20638:	b940      	cbnz	r0, 2064c <service_info_json_object_encode+0x6c>
		cJSON_AddItemToObject(obj_out, SERVICE_INFO_JSON_NAME,
   2063a:	462a      	mov	r2, r5
   2063c:	490b      	ldr	r1, [pc, #44]	; (2066c <service_info_json_object_encode+0x8c>)
   2063e:	4630      	mov	r0, r6
   20640:	f027 fa2d 	bl	47a9e <cJSON_AddItemToObject>
	} else {
		cJSON_Delete(service_info_obj);
	}

	return err;
}
   20644:	4620      	mov	r0, r4
   20646:	b007      	add	sp, #28
   20648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cJSON_Delete(service_info_obj);
   2064c:	4628      	mov	r0, r5
   2064e:	f004 fbb7 	bl	24dc0 <cJSON_Delete>
   20652:	e7f7      	b.n	20644 <service_info_json_object_encode+0x64>
		return -EINVAL;
   20654:	f06f 0415 	mvn.w	r4, #21
   20658:	e7f4      	b.n	20644 <service_info_json_object_encode+0x64>
		return -ENOMEM;
   2065a:	f06f 040b 	mvn.w	r4, #11
   2065e:	e7f1      	b.n	20644 <service_info_json_object_encode+0x64>
   20660:	0004bac2 	.word	0x0004bac2
   20664:	0004bd1c 	.word	0x0004bd1c
   20668:	0004bd15 	.word	0x0004bd15
   2066c:	0004bd22 	.word	0x0004bd22

00020670 <gps_work_handler>:

	return 0;
}

static void gps_work_handler(struct k_work *work)
{
   20670:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (gps_work.type == GPS_WORK_START) {
   20672:	4c36      	ldr	r4, [pc, #216]	; (2074c <gps_work_handler+0xdc>)
   20674:	7823      	ldrb	r3, [r4, #0]
   20676:	4625      	mov	r5, r4
   20678:	2b00      	cmp	r3, #0
   2067a:	d146      	bne.n	2070a <gps_work_handler+0x9a>
		printk("Enabling PSM\n");
   2067c:	4834      	ldr	r0, [pc, #208]	; (20750 <gps_work_handler+0xe0>)
   2067e:	f025 ffed 	bl	4665c <printk>
		err = lte_lc_psm_req(true);
   20682:	2001      	movs	r0, #1
   20684:	f00b fa5c 	bl	2bb40 <lte_lc_psm_req>
		if (err) {
   20688:	b1c0      	cbz	r0, 206bc <gps_work_handler+0x4c>
			printk("PSM mode could not be enabled");
   2068a:	4832      	ldr	r0, [pc, #200]	; (20754 <gps_work_handler+0xe4>)
   2068c:	f025 ffe6 	bl	4665c <printk>
			printk(" or was already enabled\n.");
   20690:	4831      	ldr	r0, [pc, #196]	; (20758 <gps_work_handler+0xe8>)
			printk("PSM enabled\n");
   20692:	f025 ffe3 	bl	4665c <printk>
	return z_impl_k_sleep(ms);
   20696:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2069a:	f028 fa16 	bl	48aca <z_impl_k_sleep>
	err = gps_start(gps_work.dev);
   2069e:	6a68      	ldr	r0, [r5, #36]	; 0x24
static inline int gps_start(struct device *dev)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->start(dev);
   206a0:	6843      	ldr	r3, [r0, #4]
   206a2:	68db      	ldr	r3, [r3, #12]
   206a4:	4798      	blx	r3
	if (err) {
   206a6:	4604      	mov	r4, r0
   206a8:	b150      	cbz	r0, 206c0 <gps_work_handler+0x50>
		printk("Failed starting GPS!\n");
   206aa:	482c      	ldr	r0, [pc, #176]	; (2075c <gps_work_handler+0xec>)
   206ac:	f025 ffd6 	bl	4665c <printk>
		err = start();
		if (err) {
			printk("GPS could not be started, error: %d\n", err);
   206b0:	4621      	mov	r1, r4
   206b2:	482b      	ldr	r0, [pc, #172]	; (20760 <gps_work_handler+0xf0>)
			CONFIG_GPS_CONTROL_FIX_CHECK_INTERVAL);

		k_delayed_work_submit(&gps_work.work,
			K_SECONDS(CONFIG_GPS_CONTROL_FIX_CHECK_INTERVAL));
	}
}
   206b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("GPS could not be stopped, error: %d\n", err);
   206b8:	f025 bfd0 	b.w	4665c <printk>
			printk("PSM enabled\n");
   206bc:	4829      	ldr	r0, [pc, #164]	; (20764 <gps_work_handler+0xf4>)
   206be:	e7e8      	b.n	20692 <gps_work_handler+0x22>
	atomic_set(&gps_is_active, 1);
   206c0:	2101      	movs	r1, #1
   206c2:	4829      	ldr	r0, [pc, #164]	; (20768 <gps_work_handler+0xf8>)
   206c4:	f025 fbcb 	bl	45e5e <atomic_set>
	printk("GPS started successfully.\nSearching for satellites ");
   206c8:	4828      	ldr	r0, [pc, #160]	; (2076c <gps_work_handler+0xfc>)
   206ca:	f025 ffc7 	bl	4665c <printk>
	printk("to get position fix. This may take several minutes.\n");
   206ce:	4828      	ldr	r0, [pc, #160]	; (20770 <gps_work_handler+0x100>)
   206d0:	f025 ffc4 	bl	4665c <printk>
	printk("The device will attempt to get a fix for %d seconds, ",
   206d4:	f44f 71b4 	mov.w	r1, #360	; 0x168
   206d8:	4826      	ldr	r0, [pc, #152]	; (20774 <gps_work_handler+0x104>)
   206da:	f025 ffbf 	bl	4665c <printk>
	printk("before the GPS is stopped.\n");
   206de:	4826      	ldr	r0, [pc, #152]	; (20778 <gps_work_handler+0x108>)
   206e0:	f025 ffbc 	bl	4665c <printk>
		printk("GPS operation started\n");
   206e4:	4825      	ldr	r0, [pc, #148]	; (2077c <gps_work_handler+0x10c>)
   206e6:	f025 ffb9 	bl	4665c <printk>
		atomic_set(&gps_is_active, 1);
   206ea:	2101      	movs	r1, #1
   206ec:	481e      	ldr	r0, [pc, #120]	; (20768 <gps_work_handler+0xf8>)
   206ee:	f025 fbb6 	bl	45e5e <atomic_set>
		ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   206f2:	2008      	movs	r0, #8
   206f4:	f7ff fd28 	bl	20148 <ui_led_set_pattern>
		gps_work.type = GPS_WORK_STOP;
   206f8:	2301      	movs	r3, #1
   206fa:	4a21      	ldr	r2, [pc, #132]	; (20780 <gps_work_handler+0x110>)
   206fc:	4921      	ldr	r1, [pc, #132]	; (20784 <gps_work_handler+0x114>)
   206fe:	702b      	strb	r3, [r5, #0]
   20700:	4821      	ldr	r0, [pc, #132]	; (20788 <gps_work_handler+0x118>)
}
   20702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20706:	f01d bd99 	b.w	3e23c <k_delayed_work_submit_to_queue>
	} else if (gps_work.type == GPS_WORK_STOP) {
   2070a:	2b01      	cmp	r3, #1
   2070c:	d11c      	bne.n	20748 <gps_work_handler+0xd8>
	err = gps_stop(gps_work.dev);
   2070e:	6a60      	ldr	r0, [r4, #36]	; 0x24
static inline int gps_stop(struct device *dev)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->stop(dev);
   20710:	6843      	ldr	r3, [r0, #4]
   20712:	691b      	ldr	r3, [r3, #16]
   20714:	4798      	blx	r3
	if (err) {
   20716:	4605      	mov	r5, r0
   20718:	b110      	cbz	r0, 20720 <gps_work_handler+0xb0>
			printk("GPS could not be stopped, error: %d\n", err);
   2071a:	4601      	mov	r1, r0
   2071c:	481b      	ldr	r0, [pc, #108]	; (2078c <gps_work_handler+0x11c>)
   2071e:	e7c9      	b.n	206b4 <gps_work_handler+0x44>
		printk("GPS operation was stopped\n");
   20720:	481b      	ldr	r0, [pc, #108]	; (20790 <gps_work_handler+0x120>)
   20722:	f025 ff9b 	bl	4665c <printk>
		atomic_set(&gps_is_active, 0);
   20726:	4629      	mov	r1, r5
   20728:	480f      	ldr	r0, [pc, #60]	; (20768 <gps_work_handler+0xf8>)
   2072a:	f025 fb98 	bl	45e5e <atomic_set>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2072e:	4b19      	ldr	r3, [pc, #100]	; (20794 <gps_work_handler+0x124>)
   20730:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&gps_is_enabled) == 0) {
   20734:	b143      	cbz	r3, 20748 <gps_work_handler+0xd8>
		printk("The device will try to get fix again in %d seconds\n",
   20736:	211e      	movs	r1, #30
   20738:	4817      	ldr	r0, [pc, #92]	; (20798 <gps_work_handler+0x128>)
		gps_work.type = GPS_WORK_START;
   2073a:	7025      	strb	r5, [r4, #0]
		printk("The device will try to get fix again in %d seconds\n",
   2073c:	f025 ff8e 	bl	4665c <printk>
   20740:	f247 5230 	movw	r2, #30000	; 0x7530
   20744:	1d21      	adds	r1, r4, #4
   20746:	e7db      	b.n	20700 <gps_work_handler+0x90>
}
   20748:	bd38      	pop	{r3, r4, r5, pc}
   2074a:	bf00      	nop
   2074c:	20023910 	.word	0x20023910
   20750:	0004bd72 	.word	0x0004bd72
   20754:	0004bd80 	.word	0x0004bd80
   20758:	0004bd9e 	.word	0x0004bd9e
   2075c:	0004bdc5 	.word	0x0004bdc5
   20760:	0004bddb 	.word	0x0004bddb
   20764:	0004bdb8 	.word	0x0004bdb8
   20768:	20023908 	.word	0x20023908
   2076c:	0004be00 	.word	0x0004be00
   20770:	0004be34 	.word	0x0004be34
   20774:	0004be69 	.word	0x0004be69
   20778:	0004be9f 	.word	0x0004be9f
   2077c:	0004bebb 	.word	0x0004bebb
   20780:	00057e40 	.word	0x00057e40
   20784:	20023914 	.word	0x20023914
   20788:	2002a324 	.word	0x2002a324
   2078c:	0004bed2 	.word	0x0004bed2
   20790:	0004bef7 	.word	0x0004bef7
   20794:	2002390c 	.word	0x2002390c
   20798:	0004bf12 	.word	0x0004bf12

0002079c <gps_control_is_active>:
   2079c:	4b03      	ldr	r3, [pc, #12]	; (207ac <gps_control_is_active+0x10>)
   2079e:	e8d3 0faf 	lda	r0, [r3]
#if !defined(CONFIG_GPS_SIM)
	return atomic_get(&gps_is_active);
#else
	return false;
#endif
}
   207a2:	3000      	adds	r0, #0
   207a4:	bf18      	it	ne
   207a6:	2001      	movne	r0, #1
   207a8:	4770      	bx	lr
   207aa:	bf00      	nop
   207ac:	20023908 	.word	0x20023908

000207b0 <gps_control_is_enabled>:
   207b0:	4b03      	ldr	r3, [pc, #12]	; (207c0 <gps_control_is_enabled+0x10>)
   207b2:	e8d3 0faf 	lda	r0, [r3]
#if !defined(CONFIG_GPS_SIM)
	return atomic_get(&gps_is_enabled);
#else
	return false;
#endif
}
   207b6:	3000      	adds	r0, #0
   207b8:	bf18      	it	ne
   207ba:	2001      	movne	r0, #1
   207bc:	4770      	bx	lr
   207be:	bf00      	nop
   207c0:	2002390c 	.word	0x2002390c

000207c4 <gps_control_stop>:
	ui_led_set_pattern(UI_CLOUD_CONNECTED);
#endif
}

void gps_control_stop(u32_t delay_ms)
{
   207c4:	b570      	push	{r4, r5, r6, lr}
#if !defined(CONFIG_GPS_SIM)
	k_delayed_work_cancel(&gps_work.work);
   207c6:	4d07      	ldr	r5, [pc, #28]	; (207e4 <gps_control_stop+0x20>)
{
   207c8:	4606      	mov	r6, r0
	k_delayed_work_cancel(&gps_work.work);
   207ca:	1d2c      	adds	r4, r5, #4
   207cc:	4620      	mov	r0, r4
   207ce:	f01d fdbf 	bl	3e350 <k_delayed_work_cancel>
	gps_work.type = GPS_WORK_STOP;
   207d2:	2301      	movs	r3, #1
   207d4:	4632      	mov	r2, r6
   207d6:	702b      	strb	r3, [r5, #0]
   207d8:	4621      	mov	r1, r4
	k_delayed_work_submit(&gps_work.work, delay_ms);
#endif
}
   207da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   207de:	4802      	ldr	r0, [pc, #8]	; (207e8 <gps_control_stop+0x24>)
   207e0:	f01d bd2c 	b.w	3e23c <k_delayed_work_submit_to_queue>
   207e4:	20023910 	.word	0x20023910
   207e8:	2002a324 	.word	0x2002a324

000207ec <gps_control_disable>:
{
   207ec:	b508      	push	{r3, lr}
	atomic_set(&gps_is_enabled, 0);
   207ee:	2100      	movs	r1, #0
   207f0:	4805      	ldr	r0, [pc, #20]	; (20808 <gps_control_disable+0x1c>)
   207f2:	f025 fb34 	bl	45e5e <atomic_set>
	gps_control_stop(K_NO_WAIT);
   207f6:	2000      	movs	r0, #0
   207f8:	f7ff ffe4 	bl	207c4 <gps_control_stop>
}
   207fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ui_led_set_pattern(UI_CLOUD_CONNECTED);
   20800:	2008      	movs	r0, #8
   20802:	f7ff bca1 	b.w	20148 <ui_led_set_pattern>
   20806:	bf00      	nop
   20808:	2002390c 	.word	0x2002390c

0002080c <gps_control_start>:

void gps_control_start(u32_t delay_ms)
{
   2080c:	b570      	push	{r4, r5, r6, lr}
#if !defined(CONFIG_GPS_SIM)
	k_delayed_work_cancel(&gps_work.work);
   2080e:	4d07      	ldr	r5, [pc, #28]	; (2082c <gps_control_start+0x20>)
{
   20810:	4606      	mov	r6, r0
	k_delayed_work_cancel(&gps_work.work);
   20812:	1d2c      	adds	r4, r5, #4
   20814:	4620      	mov	r0, r4
   20816:	f01d fd9b 	bl	3e350 <k_delayed_work_cancel>
	gps_work.type = GPS_WORK_START;
   2081a:	2300      	movs	r3, #0
   2081c:	4632      	mov	r2, r6
   2081e:	702b      	strb	r3, [r5, #0]
   20820:	4621      	mov	r1, r4
	k_delayed_work_submit(&gps_work.work, delay_ms);
#endif
}
   20822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20826:	4802      	ldr	r0, [pc, #8]	; (20830 <gps_control_start+0x24>)
   20828:	f01d bd08 	b.w	3e23c <k_delayed_work_submit_to_queue>
   2082c:	20023910 	.word	0x20023910
   20830:	2002a324 	.word	0x2002a324

00020834 <gps_control_enable>:
{
   20834:	b508      	push	{r3, lr}
	atomic_set(&gps_is_enabled, 1);
   20836:	2101      	movs	r1, #1
   20838:	4804      	ldr	r0, [pc, #16]	; (2084c <gps_control_enable+0x18>)
   2083a:	f025 fb10 	bl	45e5e <atomic_set>
}
   2083e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gps_control_start(K_SECONDS(1));
   20842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   20846:	f7ff bfe1 	b.w	2080c <gps_control_start>
   2084a:	bf00      	nop
   2084c:	2002390c 	.word	0x2002390c

00020850 <gps_control_init>:
#ifdef CONFIG_GPS_SIM
	struct gps_trigger gps_trig = {
		.type = GPS_TRIG_DATA_READY
	};
#else
	struct gps_trigger gps_trig = {
   20850:	2302      	movs	r3, #2
{
   20852:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct gps_trigger gps_trig = {
   20854:	f88d 3004 	strb.w	r3, [sp, #4]
   20858:	2300      	movs	r3, #0
{
   2085a:	4604      	mov	r4, r0
	struct gps_trigger gps_trig = {
   2085c:	f88d 3005 	strb.w	r3, [sp, #5]
   20860:	4811      	ldr	r0, [pc, #68]	; (208a8 <gps_control_init+0x58>)
   20862:	f01b f8cb 	bl	3b9fc <z_impl_device_get_binding>
		.chan = GPS_CHAN_NMEA
	};
#endif /* CONFIG_GPS_SIM */

	gps_dev = device_get_binding(CONFIG_GPS_DEV_NAME);
	if (gps_dev == NULL) {
   20866:	4606      	mov	r6, r0
   20868:	b940      	cbnz	r0, 2087c <gps_control_init+0x2c>
		printk("Could not get %s device\n", CONFIG_GPS_DEV_NAME);
   2086a:	490f      	ldr	r1, [pc, #60]	; (208a8 <gps_control_init+0x58>)
   2086c:	480f      	ldr	r0, [pc, #60]	; (208ac <gps_control_init+0x5c>)
   2086e:	f025 fef5 	bl	4665c <printk>
		return -ENODEV;
   20872:	f06f 0412 	mvn.w	r4, #18
	gps_work.dev = gps_dev;
#endif
	printk("GPS initialized\n");

	return 0;
}
   20876:	4620      	mov	r0, r4
   20878:	b002      	add	sp, #8
   2087a:	bd70      	pop	{r4, r5, r6, pc}
	return api->trigger_set(dev, trigger, handler);
   2087c:	6843      	ldr	r3, [r0, #4]
   2087e:	4622      	mov	r2, r4
   20880:	681b      	ldr	r3, [r3, #0]
   20882:	a901      	add	r1, sp, #4
   20884:	4798      	blx	r3
	if (err) {
   20886:	4604      	mov	r4, r0
   20888:	b120      	cbz	r0, 20894 <gps_control_init+0x44>
		printk("Could not set trigger, error code: %d\n", err);
   2088a:	4601      	mov	r1, r0
   2088c:	4808      	ldr	r0, [pc, #32]	; (208b0 <gps_control_init+0x60>)
   2088e:	f025 fee5 	bl	4665c <printk>
		return err;
   20892:	e7f0      	b.n	20876 <gps_control_init+0x26>
	k_delayed_work_init(&gps_work.work, gps_work_handler);
   20894:	4d07      	ldr	r5, [pc, #28]	; (208b4 <gps_control_init+0x64>)
   20896:	4908      	ldr	r1, [pc, #32]	; (208b8 <gps_control_init+0x68>)
   20898:	1d28      	adds	r0, r5, #4
   2089a:	f028 f99b 	bl	48bd4 <k_delayed_work_init>
	printk("GPS initialized\n");
   2089e:	4807      	ldr	r0, [pc, #28]	; (208bc <gps_control_init+0x6c>)
	gps_work.dev = gps_dev;
   208a0:	626e      	str	r6, [r5, #36]	; 0x24
	printk("GPS initialized\n");
   208a2:	f025 fedb 	bl	4665c <printk>
	return 0;
   208a6:	e7e6      	b.n	20876 <gps_control_init+0x26>
   208a8:	0004bd2e 	.word	0x0004bd2e
   208ac:	0004b992 	.word	0x0004b992
   208b0:	0004bd3a 	.word	0x0004bd3a
   208b4:	20023910 	.word	0x20023910
   208b8:	00020671 	.word	0x00020671
   208bc:	0004bd61 	.word	0x0004bd61

000208c0 <env_sensors_init_and_start>:
/**@brief Initialize environment sensors. */
int env_sensors_init_and_start(void)
{
   208c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
   208c4:	2400      	movs	r4, #0
		env_sensors[i]->dev =
			device_get_binding(env_sensors[i]->dev_name);
   208c6:	4f15      	ldr	r7, [pc, #84]	; (2091c <env_sensors_init_and_start+0x5c>)
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   208c8:	4e15      	ldr	r6, [pc, #84]	; (20920 <env_sensors_init_and_start+0x60>)
   208ca:	f8df 806c 	ldr.w	r8, [pc, #108]	; 20938 <env_sensors_init_and_start+0x78>
			device_get_binding(env_sensors[i]->dev_name);
   208ce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   208d2:	6968      	ldr	r0, [r5, #20]
   208d4:	f01b f892 	bl	3b9fc <z_impl_device_get_binding>
		env_sensors[i]->dev =
   208d8:	61a8      	str	r0, [r5, #24]
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   208da:	b968      	cbnz	r0, 208f8 <env_sensors_init_and_start+0x38>
   208dc:	2368      	movs	r3, #104	; 0x68
   208de:	4632      	mov	r2, r6
   208e0:	4641      	mov	r1, r8
   208e2:	4810      	ldr	r0, [pc, #64]	; (20924 <env_sensors_init_and_start+0x64>)
   208e4:	f025 feba 	bl	4665c <printk>
   208e8:	6969      	ldr	r1, [r5, #20]
   208ea:	480f      	ldr	r0, [pc, #60]	; (20928 <env_sensors_init_and_start+0x68>)
   208ec:	f025 feb6 	bl	4665c <printk>
   208f0:	2168      	movs	r1, #104	; 0x68
   208f2:	4630      	mov	r0, r6
   208f4:	f025 febf 	bl	46676 <assert_post_action>
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
   208f8:	3401      	adds	r4, #1
   208fa:	2c03      	cmp	r4, #3
   208fc:	d1e7      	bne.n	208ce <env_sensors_init_and_start+0xe>
			env_sensors[i]->dev_name);
	}

	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   208fe:	490b      	ldr	r1, [pc, #44]	; (2092c <env_sensors_init_and_start+0x6c>)
   20900:	480b      	ldr	r0, [pc, #44]	; (20930 <env_sensors_init_and_start+0x70>)
   20902:	f028 f967 	bl	48bd4 <k_delayed_work_init>
	env_sensors_poll_fn(NULL);
   20906:	2000      	movs	r0, #0
   20908:	f7f9 fd0e 	bl	1a328 <env_sensors_poll_fn>

	return k_delayed_work_submit(&env_sensors_poller, K_SECONDS(10));
}
   2090c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20910:	f242 7210 	movw	r2, #10000	; 0x2710
   20914:	4906      	ldr	r1, [pc, #24]	; (20930 <env_sensors_init_and_start+0x70>)
   20916:	4807      	ldr	r0, [pc, #28]	; (20934 <env_sensors_init_and_start+0x74>)
   20918:	f01d bc90 	b.w	3e23c <k_delayed_work_submit_to_queue>
   2091c:	00049318 	.word	0x00049318
   20920:	0004bf52 	.word	0x0004bf52
   20924:	0004b5bf 	.word	0x0004b5bf
   20928:	0004bf87 	.word	0x0004bf87
   2092c:	0001a329 	.word	0x0001a329
   20930:	20023938 	.word	0x20023938
   20934:	2002a324 	.word	0x2002a324
   20938:	0004bf73 	.word	0x0004bf73

0002093c <env_sensors_get_temperature>:

int env_sensors_get_temperature(env_sensor_data_t *sensor_data)
{
   2093c:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   2093e:	4604      	mov	r4, r0
   20940:	2800      	cmp	r0, #0
   20942:	d03f      	beq.n	209c4 <env_sensors_get_temperature+0x88>
	__asm__ volatile(
   20944:	f04f 0320 	mov.w	r3, #32
   20948:	f3ef 8611 	mrs	r6, BASEPRI
   2094c:	f383 8811 	msr	BASEPRI, r3
   20950:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20954:	481d      	ldr	r0, [pc, #116]	; (209cc <env_sensors_get_temperature+0x90>)
   20956:	f01d fa13 	bl	3dd80 <z_spin_lock_valid>
   2095a:	b960      	cbnz	r0, 20976 <env_sensors_get_temperature+0x3a>
   2095c:	491c      	ldr	r1, [pc, #112]	; (209d0 <env_sensors_get_temperature+0x94>)
   2095e:	235f      	movs	r3, #95	; 0x5f
   20960:	4a1c      	ldr	r2, [pc, #112]	; (209d4 <env_sensors_get_temperature+0x98>)
   20962:	481d      	ldr	r0, [pc, #116]	; (209d8 <env_sensors_get_temperature+0x9c>)
   20964:	f025 fe7a 	bl	4665c <printk>
   20968:	481c      	ldr	r0, [pc, #112]	; (209dc <env_sensors_get_temperature+0xa0>)
   2096a:	f025 fe77 	bl	4665c <printk>
   2096e:	215f      	movs	r1, #95	; 0x5f
   20970:	4818      	ldr	r0, [pc, #96]	; (209d4 <env_sensors_get_temperature+0x98>)
   20972:	f025 fe80 	bl	46676 <assert_post_action>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20976:	4d1a      	ldr	r5, [pc, #104]	; (209e0 <env_sensors_get_temperature+0xa4>)
	z_spin_lock_set_owner(l);
   20978:	4814      	ldr	r0, [pc, #80]	; (209cc <env_sensors_get_temperature+0x90>)
   2097a:	f01d fa1f 	bl	3ddbc <z_spin_lock_set_owner>
   2097e:	4623      	mov	r3, r4
   20980:	f105 0410 	add.w	r4, r5, #16
   20984:	462a      	mov	r2, r5
   20986:	ca03      	ldmia	r2!, {r0, r1}
   20988:	42a2      	cmp	r2, r4
   2098a:	6018      	str	r0, [r3, #0]
   2098c:	6059      	str	r1, [r3, #4]
   2098e:	4615      	mov	r5, r2
   20990:	f103 0308 	add.w	r3, r3, #8
   20994:	d1f6      	bne.n	20984 <env_sensors_get_temperature+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20996:	480d      	ldr	r0, [pc, #52]	; (209cc <env_sensors_get_temperature+0x90>)
   20998:	f01d fa00 	bl	3dd9c <z_spin_unlock_valid>
   2099c:	b960      	cbnz	r0, 209b8 <env_sensors_get_temperature+0x7c>
   2099e:	4911      	ldr	r1, [pc, #68]	; (209e4 <env_sensors_get_temperature+0xa8>)
   209a0:	2372      	movs	r3, #114	; 0x72
   209a2:	4a0c      	ldr	r2, [pc, #48]	; (209d4 <env_sensors_get_temperature+0x98>)
   209a4:	480c      	ldr	r0, [pc, #48]	; (209d8 <env_sensors_get_temperature+0x9c>)
   209a6:	f025 fe59 	bl	4665c <printk>
   209aa:	480f      	ldr	r0, [pc, #60]	; (209e8 <env_sensors_get_temperature+0xac>)
   209ac:	f025 fe56 	bl	4665c <printk>
   209b0:	2172      	movs	r1, #114	; 0x72
   209b2:	4808      	ldr	r0, [pc, #32]	; (209d4 <env_sensors_get_temperature+0x98>)
   209b4:	f025 fe5f 	bl	46676 <assert_post_action>
	__asm__ volatile(
   209b8:	f386 8811 	msr	BASEPRI, r6
   209bc:	f3bf 8f6f 	isb	sy
	}
	k_spinlock_key_t key = k_spin_lock(&temp_sensor.lock);

	memcpy(sensor_data, &(temp_sensor.sensor), sizeof(temp_sensor.sensor));
	k_spin_unlock(&temp_sensor.lock, key);
	return 0;
   209c0:	2000      	movs	r0, #0
}
   209c2:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   209c4:	f04f 30ff 	mov.w	r0, #4294967295
   209c8:	e7fb      	b.n	209c2 <env_sensors_get_temperature+0x86>
   209ca:	bf00      	nop
   209cc:	200311d4 	.word	0x200311d4
   209d0:	0004bff2 	.word	0x0004bff2
   209d4:	0004bfcb 	.word	0x0004bfcb
   209d8:	0004b5bf 	.word	0x0004b5bf
   209dc:	0004c007 	.word	0x0004c007
   209e0:	200311b8 	.word	0x200311b8
   209e4:	0004c01c 	.word	0x0004c01c
   209e8:	0004c033 	.word	0x0004c033

000209ec <env_sensors_get_humidity>:

int env_sensors_get_humidity(env_sensor_data_t *sensor_data)
{
   209ec:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   209ee:	4604      	mov	r4, r0
   209f0:	2800      	cmp	r0, #0
   209f2:	d03f      	beq.n	20a74 <env_sensors_get_humidity+0x88>
	__asm__ volatile(
   209f4:	f04f 0320 	mov.w	r3, #32
   209f8:	f3ef 8611 	mrs	r6, BASEPRI
   209fc:	f383 8811 	msr	BASEPRI, r3
   20a00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20a04:	481d      	ldr	r0, [pc, #116]	; (20a7c <env_sensors_get_humidity+0x90>)
   20a06:	f01d f9bb 	bl	3dd80 <z_spin_lock_valid>
   20a0a:	b960      	cbnz	r0, 20a26 <env_sensors_get_humidity+0x3a>
   20a0c:	491c      	ldr	r1, [pc, #112]	; (20a80 <env_sensors_get_humidity+0x94>)
   20a0e:	235f      	movs	r3, #95	; 0x5f
   20a10:	4a1c      	ldr	r2, [pc, #112]	; (20a84 <env_sensors_get_humidity+0x98>)
   20a12:	481d      	ldr	r0, [pc, #116]	; (20a88 <env_sensors_get_humidity+0x9c>)
   20a14:	f025 fe22 	bl	4665c <printk>
   20a18:	481c      	ldr	r0, [pc, #112]	; (20a8c <env_sensors_get_humidity+0xa0>)
   20a1a:	f025 fe1f 	bl	4665c <printk>
   20a1e:	215f      	movs	r1, #95	; 0x5f
   20a20:	4818      	ldr	r0, [pc, #96]	; (20a84 <env_sensors_get_humidity+0x98>)
   20a22:	f025 fe28 	bl	46676 <assert_post_action>
   20a26:	4d1a      	ldr	r5, [pc, #104]	; (20a90 <env_sensors_get_humidity+0xa4>)
	z_spin_lock_set_owner(l);
   20a28:	4814      	ldr	r0, [pc, #80]	; (20a7c <env_sensors_get_humidity+0x90>)
   20a2a:	f01d f9c7 	bl	3ddbc <z_spin_lock_set_owner>
   20a2e:	4623      	mov	r3, r4
   20a30:	f105 0410 	add.w	r4, r5, #16
   20a34:	462a      	mov	r2, r5
   20a36:	ca03      	ldmia	r2!, {r0, r1}
   20a38:	42a2      	cmp	r2, r4
   20a3a:	6018      	str	r0, [r3, #0]
   20a3c:	6059      	str	r1, [r3, #4]
   20a3e:	4615      	mov	r5, r2
   20a40:	f103 0308 	add.w	r3, r3, #8
   20a44:	d1f6      	bne.n	20a34 <env_sensors_get_humidity+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20a46:	480d      	ldr	r0, [pc, #52]	; (20a7c <env_sensors_get_humidity+0x90>)
   20a48:	f01d f9a8 	bl	3dd9c <z_spin_unlock_valid>
   20a4c:	b960      	cbnz	r0, 20a68 <env_sensors_get_humidity+0x7c>
   20a4e:	4911      	ldr	r1, [pc, #68]	; (20a94 <env_sensors_get_humidity+0xa8>)
   20a50:	2372      	movs	r3, #114	; 0x72
   20a52:	4a0c      	ldr	r2, [pc, #48]	; (20a84 <env_sensors_get_humidity+0x98>)
   20a54:	480c      	ldr	r0, [pc, #48]	; (20a88 <env_sensors_get_humidity+0x9c>)
   20a56:	f025 fe01 	bl	4665c <printk>
   20a5a:	480f      	ldr	r0, [pc, #60]	; (20a98 <env_sensors_get_humidity+0xac>)
   20a5c:	f025 fdfe 	bl	4665c <printk>
   20a60:	2172      	movs	r1, #114	; 0x72
   20a62:	4808      	ldr	r0, [pc, #32]	; (20a84 <env_sensors_get_humidity+0x98>)
   20a64:	f025 fe07 	bl	46676 <assert_post_action>
	__asm__ volatile(
   20a68:	f386 8811 	msr	BASEPRI, r6
   20a6c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&humid_sensor.lock);

	memcpy(sensor_data, &(humid_sensor.sensor),
		sizeof(humid_sensor.sensor));
	k_spin_unlock(&humid_sensor.lock, key);
	return 0;
   20a70:	2000      	movs	r0, #0
}
   20a72:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   20a74:	f04f 30ff 	mov.w	r0, #4294967295
   20a78:	e7fb      	b.n	20a72 <env_sensors_get_humidity+0x86>
   20a7a:	bf00      	nop
   20a7c:	20031194 	.word	0x20031194
   20a80:	0004bff2 	.word	0x0004bff2
   20a84:	0004bfcb 	.word	0x0004bfcb
   20a88:	0004b5bf 	.word	0x0004b5bf
   20a8c:	0004c007 	.word	0x0004c007
   20a90:	20031178 	.word	0x20031178
   20a94:	0004c01c 	.word	0x0004c01c
   20a98:	0004c033 	.word	0x0004c033

00020a9c <env_sensors_get_pressure>:

int env_sensors_get_pressure(env_sensor_data_t *sensor_data)
{
   20a9c:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   20a9e:	4604      	mov	r4, r0
   20aa0:	2800      	cmp	r0, #0
   20aa2:	d03f      	beq.n	20b24 <env_sensors_get_pressure+0x88>
	__asm__ volatile(
   20aa4:	f04f 0320 	mov.w	r3, #32
   20aa8:	f3ef 8611 	mrs	r6, BASEPRI
   20aac:	f383 8811 	msr	BASEPRI, r3
   20ab0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20ab4:	481d      	ldr	r0, [pc, #116]	; (20b2c <env_sensors_get_pressure+0x90>)
   20ab6:	f01d f963 	bl	3dd80 <z_spin_lock_valid>
   20aba:	b960      	cbnz	r0, 20ad6 <env_sensors_get_pressure+0x3a>
   20abc:	491c      	ldr	r1, [pc, #112]	; (20b30 <env_sensors_get_pressure+0x94>)
   20abe:	235f      	movs	r3, #95	; 0x5f
   20ac0:	4a1c      	ldr	r2, [pc, #112]	; (20b34 <env_sensors_get_pressure+0x98>)
   20ac2:	481d      	ldr	r0, [pc, #116]	; (20b38 <env_sensors_get_pressure+0x9c>)
   20ac4:	f025 fdca 	bl	4665c <printk>
   20ac8:	481c      	ldr	r0, [pc, #112]	; (20b3c <env_sensors_get_pressure+0xa0>)
   20aca:	f025 fdc7 	bl	4665c <printk>
   20ace:	215f      	movs	r1, #95	; 0x5f
   20ad0:	4818      	ldr	r0, [pc, #96]	; (20b34 <env_sensors_get_pressure+0x98>)
   20ad2:	f025 fdd0 	bl	46676 <assert_post_action>
   20ad6:	4d1a      	ldr	r5, [pc, #104]	; (20b40 <env_sensors_get_pressure+0xa4>)
	z_spin_lock_set_owner(l);
   20ad8:	4814      	ldr	r0, [pc, #80]	; (20b2c <env_sensors_get_pressure+0x90>)
   20ada:	f01d f96f 	bl	3ddbc <z_spin_lock_set_owner>
   20ade:	4623      	mov	r3, r4
   20ae0:	f105 0410 	add.w	r4, r5, #16
   20ae4:	462a      	mov	r2, r5
   20ae6:	ca03      	ldmia	r2!, {r0, r1}
   20ae8:	42a2      	cmp	r2, r4
   20aea:	6018      	str	r0, [r3, #0]
   20aec:	6059      	str	r1, [r3, #4]
   20aee:	4615      	mov	r5, r2
   20af0:	f103 0308 	add.w	r3, r3, #8
   20af4:	d1f6      	bne.n	20ae4 <env_sensors_get_pressure+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20af6:	480d      	ldr	r0, [pc, #52]	; (20b2c <env_sensors_get_pressure+0x90>)
   20af8:	f01d f950 	bl	3dd9c <z_spin_unlock_valid>
   20afc:	b960      	cbnz	r0, 20b18 <env_sensors_get_pressure+0x7c>
   20afe:	4911      	ldr	r1, [pc, #68]	; (20b44 <env_sensors_get_pressure+0xa8>)
   20b00:	2372      	movs	r3, #114	; 0x72
   20b02:	4a0c      	ldr	r2, [pc, #48]	; (20b34 <env_sensors_get_pressure+0x98>)
   20b04:	480c      	ldr	r0, [pc, #48]	; (20b38 <env_sensors_get_pressure+0x9c>)
   20b06:	f025 fda9 	bl	4665c <printk>
   20b0a:	480f      	ldr	r0, [pc, #60]	; (20b48 <env_sensors_get_pressure+0xac>)
   20b0c:	f025 fda6 	bl	4665c <printk>
   20b10:	2172      	movs	r1, #114	; 0x72
   20b12:	4808      	ldr	r0, [pc, #32]	; (20b34 <env_sensors_get_pressure+0x98>)
   20b14:	f025 fdaf 	bl	46676 <assert_post_action>
	__asm__ volatile(
   20b18:	f386 8811 	msr	BASEPRI, r6
   20b1c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&pressure_sensor.lock);

	memcpy(sensor_data, &(pressure_sensor.sensor),
		sizeof(pressure_sensor.sensor));
	k_spin_unlock(&pressure_sensor.lock, key);
	return 0;
   20b20:	2000      	movs	r0, #0
}
   20b22:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   20b24:	f04f 30ff 	mov.w	r0, #4294967295
   20b28:	e7fb      	b.n	20b22 <env_sensors_get_pressure+0x86>
   20b2a:	bf00      	nop
   20b2c:	200311b4 	.word	0x200311b4
   20b30:	0004bff2 	.word	0x0004bff2
   20b34:	0004bfcb 	.word	0x0004bfcb
   20b38:	0004b5bf 	.word	0x0004b5bf
   20b3c:	0004c007 	.word	0x0004c007
   20b40:	20031198 	.word	0x20031198
   20b44:	0004c01c 	.word	0x0004c01c
   20b48:	0004c033 	.word	0x0004c033

00020b4c <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   20b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b50:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   20b52:	7a83      	ldrb	r3, [r0, #10]
{
   20b54:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   20b56:	009b      	lsls	r3, r3, #2
   20b58:	330a      	adds	r3, #10
   20b5a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   20b5e:	ebad 0d03 	sub.w	sp, sp, r3
   20b62:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   20b64:	6843      	ldr	r3, [r0, #4]
{
   20b66:	4605      	mov	r5, r0
   20b68:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   20b6a:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   20b6c:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   20b70:	4281      	cmp	r1, r0
   20b72:	d221      	bcs.n	20bb8 <z_sys_mem_pool_block_free+0x6c>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   20b74:	7c28      	ldrb	r0, [r5, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   20b76:	460e      	mov	r6, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   20b78:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   20b7c:	4690      	mov	r8, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   20b7e:	d001      	beq.n	20b84 <z_sys_mem_pool_block_free+0x38>
   20b80:	f025 f997 	bl	45eb2 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   20b84:	4604      	mov	r4, r0
	while (level >= 0) {
   20b86:	2e00      	cmp	r6, #0
   20b88:	da1e      	bge.n	20bc8 <z_sys_mem_pool_block_free+0x7c>
	__ASSERT(0, "out of levels");
   20b8a:	23b0      	movs	r3, #176	; 0xb0
   20b8c:	4a40      	ldr	r2, [pc, #256]	; (20c90 <z_sys_mem_pool_block_free+0x144>)
   20b8e:	4941      	ldr	r1, [pc, #260]	; (20c94 <z_sys_mem_pool_block_free+0x148>)
   20b90:	4841      	ldr	r0, [pc, #260]	; (20c98 <z_sys_mem_pool_block_free+0x14c>)
   20b92:	f025 fd63 	bl	4665c <printk>
   20b96:	4841      	ldr	r0, [pc, #260]	; (20c9c <z_sys_mem_pool_block_free+0x150>)
   20b98:	f025 fd60 	bl	4665c <printk>
   20b9c:	21b0      	movs	r1, #176	; 0xb0
   20b9e:	483c      	ldr	r0, [pc, #240]	; (20c90 <z_sys_mem_pool_block_free+0x144>)
   20ba0:	f025 fd69 	bl	46676 <assert_post_action>
	return -1;
   20ba4:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
   20ba8:	4621      	mov	r1, r4
   20baa:	7c28      	ldrb	r0, [r5, #16]
   20bac:	f025 f98a 	bl	45ec4 <pool_irq_unlock.isra.4>
}
   20bb0:	3714      	adds	r7, #20
   20bb2:	46bd      	mov	sp, r7
   20bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   20bb8:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   20bba:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   20bbc:	089b      	lsrs	r3, r3, #2
   20bbe:	f023 0303 	bic.w	r3, r3, #3
   20bc2:	f844 3f04 	str.w	r3, [r4, #4]!
   20bc6:	e7d3      	b.n	20b70 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   20bc8:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   20bcc:	4642      	mov	r2, r8
	return (u8_t *)p->buf + lsz * block;
   20bce:	fb03 fa08 	mul.w	sl, r3, r8
		int i, lsz = lsizes[level];
   20bd2:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   20bd4:	682b      	ldr	r3, [r5, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   20bd6:	4631      	mov	r1, r6
	return (u8_t *)p->buf + lsz * block;
   20bd8:	eb03 090a 	add.w	r9, r3, sl
   20bdc:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   20bde:	4628      	mov	r0, r5
   20be0:	f107 030c 	add.w	r3, r7, #12
   20be4:	f025 f94f 	bl	45e86 <get_bit_ptr>
	*word &= ~(1<<bit);
   20be8:	2301      	movs	r3, #1
   20bea:	68fa      	ldr	r2, [r7, #12]
   20bec:	fa03 f000 	lsl.w	r0, r3, r0
   20bf0:	6813      	ldr	r3, [r2, #0]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   20bf2:	6839      	ldr	r1, [r7, #0]
   20bf4:	ea23 0300 	bic.w	r3, r3, r0
   20bf8:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   20bfa:	220c      	movs	r2, #12
   20bfc:	68eb      	ldr	r3, [r5, #12]
   20bfe:	fb02 3306 	mla	r3, r2, r6, r3
   20c02:	1d1a      	adds	r2, r3, #4
   20c04:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   20c08:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   20c0a:	4621      	mov	r1, r4
   20c0c:	f8c9 2004 	str.w	r2, [r9, #4]

	list->tail->next = node;
   20c10:	689a      	ldr	r2, [r3, #8]
   20c12:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   20c16:	f8c3 9008 	str.w	r9, [r3, #8]
   20c1a:	7c28      	ldrb	r0, [r5, #16]
   20c1c:	f025 f952 	bl	45ec4 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   20c20:	7c28      	ldrb	r0, [r5, #16]
   20c22:	f010 0001 	ands.w	r0, r0, #1
   20c26:	d001      	beq.n	20c2c <z_sys_mem_pool_block_free+0xe0>
   20c28:	f025 f943 	bl	45eb2 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   20c2c:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   20c2e:	2e00      	cmp	r6, #0
   20c30:	d0ba      	beq.n	20ba8 <z_sys_mem_pool_block_free+0x5c>
	int bit = get_bit_ptr(p, level, bn, &word);
   20c32:	f107 030c 	add.w	r3, r7, #12
   20c36:	4642      	mov	r2, r8
   20c38:	4631      	mov	r1, r6
   20c3a:	4628      	mov	r0, r5
   20c3c:	f025 f923 	bl	45e86 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   20c40:	2304      	movs	r3, #4
   20c42:	fb90 f0f3 	sdiv	r0, r0, r3
   20c46:	68fb      	ldr	r3, [r7, #12]
   20c48:	0080      	lsls	r0, r0, #2
   20c4a:	681b      	ldr	r3, [r3, #0]
   20c4c:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   20c50:	f010 000f 	ands.w	r0, r0, #15
   20c54:	d1a8      	bne.n	20ba8 <z_sys_mem_pool_block_free+0x5c>
	node->next = NULL;
   20c56:	4686      	mov	lr, r0
			int b = (bn & ~3) + i;
   20c58:	f028 0a03 	bic.w	sl, r8, #3
	return (u8_t *)p->buf + lsz * block;
   20c5c:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   20c5e:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   20c62:	4353      	muls	r3, r2
   20c64:	682a      	ldr	r2, [r5, #0]
		for (i = 0; i < 4; i++) {
   20c66:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   20c68:	eb02 0c03 	add.w	ip, r2, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   20c6c:	58d1      	ldr	r1, [r2, r3]
   20c6e:	f8dc 9004 	ldr.w	r9, [ip, #4]
		for (i = 0; i < 4; i++) {
   20c72:	2804      	cmp	r0, #4
   20c74:	f8c9 1000 	str.w	r1, [r9]
	node->next->prev = node->prev;
   20c78:	58d1      	ldr	r1, [r2, r3]
   20c7a:	f8c1 9004 	str.w	r9, [r1, #4]
	node->next = NULL;
   20c7e:	f842 e003 	str.w	lr, [r2, r3]
	node->prev = NULL;
   20c82:	f8cc e004 	str.w	lr, [ip, #4]
   20c86:	d1e9      	bne.n	20c5c <z_sys_mem_pool_block_free+0x110>
		level = level - 1;
   20c88:	3e01      	subs	r6, #1
		bn = bn / 4;
   20c8a:	fb98 f8f0 	sdiv	r8, r8, r0
   20c8e:	e77a      	b.n	20b86 <z_sys_mem_pool_block_free+0x3a>
   20c90:	0004c046 	.word	0x0004c046
   20c94:	000505de 	.word	0x000505de
   20c98:	0004b5bf 	.word	0x0004b5bf
   20c9c:	0004c06b 	.word	0x0004c06b

00020ca0 <lexer_boolean>:

	return 0;
}

static void *lexer_boolean(struct lexer *lexer)
{
   20ca0:	b538      	push	{r3, r4, r5, lr}
	lexer->pos--;
   20ca2:	6883      	ldr	r3, [r0, #8]
{
   20ca4:	4604      	mov	r4, r0
	lexer->pos--;
   20ca6:	3b01      	subs	r3, #1
   20ca8:	6083      	str	r3, [r0, #8]
	backup(lexer);

	switch (next(lexer)) {
   20caa:	f025 fa4f 	bl	4614c <next>
   20cae:	2866      	cmp	r0, #102	; 0x66
   20cb0:	4605      	mov	r5, r0
   20cb2:	d00e      	beq.n	20cd2 <lexer_boolean+0x32>
   20cb4:	2874      	cmp	r0, #116	; 0x74
   20cb6:	d10e      	bne.n	20cd6 <lexer_boolean+0x36>
	case 't':
		if (!accept_run(lexer, "rue")) {
   20cb8:	490b      	ldr	r1, [pc, #44]	; (20ce8 <lexer_boolean+0x48>)
			emit(lexer, JSON_TOK_TRUE);
			return lexer_json;
		}
		break;
	case 'f':
		if (!accept_run(lexer, "alse")) {
   20cba:	4620      	mov	r0, r4
   20cbc:	f025 fa52 	bl	46164 <accept_run>
   20cc0:	b948      	cbnz	r0, 20cd6 <lexer_boolean+0x36>
	lexer->token.start = lexer->start;
   20cc2:	6863      	ldr	r3, [r4, #4]
			emit(lexer, JSON_TOK_FALSE);
			return lexer_json;
   20cc4:	4809      	ldr	r0, [pc, #36]	; (20cec <lexer_boolean+0x4c>)
	lexer->token.start = lexer->start;
   20cc6:	6163      	str	r3, [r4, #20]
	lexer->token.end = lexer->pos;
   20cc8:	68a3      	ldr	r3, [r4, #8]
	lexer->token.type = token;
   20cca:	7425      	strb	r5, [r4, #16]
	lexer->token.end = lexer->pos;
   20ccc:	61a3      	str	r3, [r4, #24]
	lexer->start = lexer->pos;
   20cce:	6063      	str	r3, [r4, #4]
		break;
	}

	emit(lexer, JSON_TOK_ERROR);
	return NULL;
}
   20cd0:	bd38      	pop	{r3, r4, r5, pc}
		if (!accept_run(lexer, "alse")) {
   20cd2:	4907      	ldr	r1, [pc, #28]	; (20cf0 <lexer_boolean+0x50>)
   20cd4:	e7f1      	b.n	20cba <lexer_boolean+0x1a>
	lexer->token.type = token;
   20cd6:	2321      	movs	r3, #33	; 0x21
   20cd8:	7423      	strb	r3, [r4, #16]
	lexer->token.start = lexer->start;
   20cda:	6863      	ldr	r3, [r4, #4]
	return NULL;
   20cdc:	2000      	movs	r0, #0
	lexer->token.start = lexer->start;
   20cde:	6163      	str	r3, [r4, #20]
	lexer->token.end = lexer->pos;
   20ce0:	68a3      	ldr	r3, [r4, #8]
   20ce2:	61a3      	str	r3, [r4, #24]
	lexer->start = lexer->pos;
   20ce4:	6063      	str	r3, [r4, #4]
	return NULL;
   20ce6:	e7f3      	b.n	20cd0 <lexer_boolean+0x30>
   20ce8:	0004d2ac 	.word	0x0004d2ac
   20cec:	00020cf5 	.word	0x00020cf5
   20cf0:	0004d2a6 	.word	0x0004d2a6

00020cf4 <lexer_json>:
		return lexer_json;
	}
}

static void *lexer_json(struct lexer *lexer)
{
   20cf4:	b538      	push	{r3, r4, r5, lr}
   20cf6:	4605      	mov	r5, r0
	while (true) {
		int chr = next(lexer);
   20cf8:	4628      	mov	r0, r5
   20cfa:	f025 fa27 	bl	4614c <next>

		switch (chr) {
   20cfe:	285b      	cmp	r0, #91	; 0x5b
		int chr = next(lexer);
   20d00:	4604      	mov	r4, r0
		switch (chr) {
   20d02:	d013      	beq.n	20d2c <lexer_json+0x38>
   20d04:	dc1a      	bgt.n	20d3c <lexer_json+0x48>
   20d06:	282c      	cmp	r0, #44	; 0x2c
   20d08:	d010      	beq.n	20d2c <lexer_json+0x38>
   20d0a:	dc0b      	bgt.n	20d24 <lexer_json+0x30>
   20d0c:	b338      	cbz	r0, 20d5e <lexer_json+0x6a>
   20d0e:	2822      	cmp	r0, #34	; 0x22
   20d10:	d045      	beq.n	20d9e <lexer_json+0xaa>
				return lexer_number;
			}

			/* fallthrough */
		default:
			if (isspace(chr)) {
   20d12:	f01e fcb3 	bl	3f67c <__locale_ctype_ptr>
   20d16:	3401      	adds	r4, #1
   20d18:	5d03      	ldrb	r3, [r0, r4]
   20d1a:	071b      	lsls	r3, r3, #28
   20d1c:	d536      	bpl.n	20d8c <lexer_json+0x98>
	lexer->start = lexer->pos;
   20d1e:	68ab      	ldr	r3, [r5, #8]
   20d20:	606b      	str	r3, [r5, #4]
	while (true) {
   20d22:	e7e9      	b.n	20cf8 <lexer_json+0x4>
		switch (chr) {
   20d24:	282d      	cmp	r0, #45	; 0x2d
   20d26:	d022      	beq.n	20d6e <lexer_json+0x7a>
   20d28:	283a      	cmp	r0, #58	; 0x3a
   20d2a:	d1f2      	bne.n	20d12 <lexer_json+0x1e>
	lexer->token.start = lexer->start;
   20d2c:	686b      	ldr	r3, [r5, #4]
			emit(lexer, (enum json_tokens)chr);
   20d2e:	742c      	strb	r4, [r5, #16]
	lexer->token.start = lexer->start;
   20d30:	616b      	str	r3, [r5, #20]
	lexer->token.end = lexer->pos;
   20d32:	68ab      	ldr	r3, [r5, #8]
			return lexer_json;
   20d34:	481b      	ldr	r0, [pc, #108]	; (20da4 <lexer_json+0xb0>)
	lexer->token.end = lexer->pos;
   20d36:	61ab      	str	r3, [r5, #24]
	lexer->start = lexer->pos;
   20d38:	606b      	str	r3, [r5, #4]
			return lexer_json;
   20d3a:	e00f      	b.n	20d5c <lexer_json+0x68>
		switch (chr) {
   20d3c:	286e      	cmp	r0, #110	; 0x6e
   20d3e:	d00c      	beq.n	20d5a <lexer_json+0x66>
   20d40:	dc05      	bgt.n	20d4e <lexer_json+0x5a>
   20d42:	285d      	cmp	r0, #93	; 0x5d
   20d44:	d0f2      	beq.n	20d2c <lexer_json+0x38>
   20d46:	2866      	cmp	r0, #102	; 0x66
   20d48:	d1e3      	bne.n	20d12 <lexer_json+0x1e>
			return lexer_boolean;
   20d4a:	4817      	ldr	r0, [pc, #92]	; (20da8 <lexer_json+0xb4>)
   20d4c:	e006      	b.n	20d5c <lexer_json+0x68>
		switch (chr) {
   20d4e:	287b      	cmp	r0, #123	; 0x7b
   20d50:	d0ec      	beq.n	20d2c <lexer_json+0x38>
   20d52:	287d      	cmp	r0, #125	; 0x7d
   20d54:	d0ea      	beq.n	20d2c <lexer_json+0x38>
   20d56:	2874      	cmp	r0, #116	; 0x74
   20d58:	e7f6      	b.n	20d48 <lexer_json+0x54>
			return lexer_null;
   20d5a:	4814      	ldr	r0, [pc, #80]	; (20dac <lexer_json+0xb8>)

			emit(lexer, JSON_TOK_ERROR);
			return NULL;
		}
	}
}
   20d5c:	bd38      	pop	{r3, r4, r5, pc}
	lexer->token.type = token;
   20d5e:	7428      	strb	r0, [r5, #16]
	lexer->token.start = lexer->start;
   20d60:	686b      	ldr	r3, [r5, #4]
			return NULL;
   20d62:	4620      	mov	r0, r4
	lexer->token.start = lexer->start;
   20d64:	616b      	str	r3, [r5, #20]
	lexer->token.end = lexer->pos;
   20d66:	68ab      	ldr	r3, [r5, #8]
   20d68:	61ab      	str	r3, [r5, #24]
	lexer->start = lexer->pos;
   20d6a:	606b      	str	r3, [r5, #4]
			return NULL;
   20d6c:	e7f6      	b.n	20d5c <lexer_json+0x68>
			if (isdigit(peek(lexer))) {
   20d6e:	f01e fc85 	bl	3f67c <__locale_ctype_ptr>
   20d72:	4601      	mov	r1, r0
	int chr = next(lexer);
   20d74:	4628      	mov	r0, r5
   20d76:	f025 f9e9 	bl	4614c <next>
	lexer->pos--;
   20d7a:	68ab      	ldr	r3, [r5, #8]
			if (isdigit(peek(lexer))) {
   20d7c:	4408      	add	r0, r1
	lexer->pos--;
   20d7e:	3b01      	subs	r3, #1
   20d80:	60ab      	str	r3, [r5, #8]
			if (isdigit(peek(lexer))) {
   20d82:	7843      	ldrb	r3, [r0, #1]
   20d84:	075a      	lsls	r2, r3, #29
   20d86:	d5c4      	bpl.n	20d12 <lexer_json+0x1e>
				return lexer_number;
   20d88:	4809      	ldr	r0, [pc, #36]	; (20db0 <lexer_json+0xbc>)
   20d8a:	e7e7      	b.n	20d5c <lexer_json+0x68>
			if (isdigit(chr)) {
   20d8c:	f01e fc76 	bl	3f67c <__locale_ctype_ptr>
   20d90:	5d04      	ldrb	r4, [r0, r4]
   20d92:	f014 0404 	ands.w	r4, r4, #4
   20d96:	d1f7      	bne.n	20d88 <lexer_json+0x94>
	lexer->token.type = token;
   20d98:	2321      	movs	r3, #33	; 0x21
   20d9a:	742b      	strb	r3, [r5, #16]
   20d9c:	e7e0      	b.n	20d60 <lexer_json+0x6c>
			return lexer_string;
   20d9e:	4805      	ldr	r0, [pc, #20]	; (20db4 <lexer_json+0xc0>)
   20da0:	e7dc      	b.n	20d5c <lexer_json+0x68>
   20da2:	bf00      	nop
   20da4:	00020cf5 	.word	0x00020cf5
   20da8:	00020ca1 	.word	0x00020ca1
   20dac:	00020ed9 	.word	0x00020ed9
   20db0:	00020db9 	.word	0x00020db9
   20db4:	00020df1 	.word	0x00020df1

00020db8 <lexer_number>:
{
   20db8:	b538      	push	{r3, r4, r5, lr}
   20dba:	4604      	mov	r4, r0
		int chr = next(lexer);
   20dbc:	4620      	mov	r0, r4
   20dbe:	f025 f9c5 	bl	4614c <next>
   20dc2:	4605      	mov	r5, r0
		if (isdigit(chr) || chr == '.') {
   20dc4:	f01e fc5a 	bl	3f67c <__locale_ctype_ptr>
   20dc8:	4428      	add	r0, r5
   20dca:	7843      	ldrb	r3, [r0, #1]
   20dcc:	075b      	lsls	r3, r3, #29
   20dce:	d4f5      	bmi.n	20dbc <lexer_number+0x4>
   20dd0:	2d2e      	cmp	r5, #46	; 0x2e
   20dd2:	d0f3      	beq.n	20dbc <lexer_number+0x4>
	lexer->token.type = token;
   20dd4:	2230      	movs	r2, #48	; 0x30
	lexer->pos--;
   20dd6:	68a3      	ldr	r3, [r4, #8]
	lexer->token.type = token;
   20dd8:	7422      	strb	r2, [r4, #16]
	lexer->token.start = lexer->start;
   20dda:	6862      	ldr	r2, [r4, #4]
	lexer->pos--;
   20ddc:	3b01      	subs	r3, #1
   20dde:	60a3      	str	r3, [r4, #8]
	lexer->token.end = lexer->pos;
   20de0:	e9c4 2305 	strd	r2, r3, [r4, #20]
	lexer->start = lexer->pos;
   20de4:	6063      	str	r3, [r4, #4]
}
   20de6:	4801      	ldr	r0, [pc, #4]	; (20dec <lexer_number+0x34>)
   20de8:	bd38      	pop	{r3, r4, r5, pc}
   20dea:	bf00      	nop
   20dec:	00020cf5 	.word	0x00020cf5

00020df0 <lexer_string>:
{
   20df0:	b510      	push	{r4, lr}
   20df2:	4604      	mov	r4, r0
	lexer->start = lexer->pos;
   20df4:	6883      	ldr	r3, [r0, #8]
   20df6:	6043      	str	r3, [r0, #4]
		int chr = next(lexer);
   20df8:	4620      	mov	r0, r4
   20dfa:	f025 f9a7 	bl	4614c <next>
		if (chr == '\0') {
   20dfe:	b938      	cbnz	r0, 20e10 <lexer_string+0x20>
	lexer->token.type = token;
   20e00:	2321      	movs	r3, #33	; 0x21
   20e02:	7423      	strb	r3, [r4, #16]
	lexer->token.start = lexer->start;
   20e04:	6863      	ldr	r3, [r4, #4]
   20e06:	6163      	str	r3, [r4, #20]
	lexer->token.end = lexer->pos;
   20e08:	68a3      	ldr	r3, [r4, #8]
   20e0a:	61a3      	str	r3, [r4, #24]
	lexer->start = lexer->pos;
   20e0c:	6063      	str	r3, [r4, #4]
}
   20e0e:	bd10      	pop	{r4, pc}
		if (chr == '\\') {
   20e10:	285c      	cmp	r0, #92	; 0x5c
   20e12:	d14d      	bne.n	20eb0 <lexer_string+0xc0>
			switch (next(lexer)) {
   20e14:	4620      	mov	r0, r4
   20e16:	f025 f999 	bl	4614c <next>
   20e1a:	2866      	cmp	r0, #102	; 0x66
   20e1c:	d0ec      	beq.n	20df8 <lexer_string+0x8>
   20e1e:	dc11      	bgt.n	20e44 <lexer_string+0x54>
   20e20:	282f      	cmp	r0, #47	; 0x2f
   20e22:	d0e9      	beq.n	20df8 <lexer_string+0x8>
   20e24:	dc0a      	bgt.n	20e3c <lexer_string+0x4c>
   20e26:	2822      	cmp	r0, #34	; 0x22
   20e28:	d0e6      	beq.n	20df8 <lexer_string+0x8>
	lexer->token.type = token;
   20e2a:	2321      	movs	r3, #33	; 0x21
   20e2c:	7423      	strb	r3, [r4, #16]
	lexer->token.start = lexer->start;
   20e2e:	6863      	ldr	r3, [r4, #4]
	return NULL;
   20e30:	2000      	movs	r0, #0
	lexer->token.start = lexer->start;
   20e32:	6163      	str	r3, [r4, #20]
	lexer->token.end = lexer->pos;
   20e34:	68a3      	ldr	r3, [r4, #8]
   20e36:	61a3      	str	r3, [r4, #24]
	lexer->start = lexer->pos;
   20e38:	6063      	str	r3, [r4, #4]
	return NULL;
   20e3a:	e7e8      	b.n	20e0e <lexer_string+0x1e>
			switch (next(lexer)) {
   20e3c:	285c      	cmp	r0, #92	; 0x5c
   20e3e:	d0db      	beq.n	20df8 <lexer_string+0x8>
   20e40:	2862      	cmp	r0, #98	; 0x62
   20e42:	e7f1      	b.n	20e28 <lexer_string+0x38>
   20e44:	2872      	cmp	r0, #114	; 0x72
   20e46:	d0d7      	beq.n	20df8 <lexer_string+0x8>
   20e48:	dc01      	bgt.n	20e4e <lexer_string+0x5e>
   20e4a:	286e      	cmp	r0, #110	; 0x6e
   20e4c:	e7ec      	b.n	20e28 <lexer_string+0x38>
   20e4e:	2874      	cmp	r0, #116	; 0x74
   20e50:	d0d2      	beq.n	20df8 <lexer_string+0x8>
   20e52:	2875      	cmp	r0, #117	; 0x75
   20e54:	d1e9      	bne.n	20e2a <lexer_string+0x3a>
				if (!isxdigit(next(lexer))) {
   20e56:	f01e fc11 	bl	3f67c <__locale_ctype_ptr>
   20e5a:	4601      	mov	r1, r0
   20e5c:	4620      	mov	r0, r4
   20e5e:	f025 f975 	bl	4614c <next>
   20e62:	4408      	add	r0, r1
   20e64:	7843      	ldrb	r3, [r0, #1]
   20e66:	f013 0f44 	tst.w	r3, #68	; 0x44
   20e6a:	d0de      	beq.n	20e2a <lexer_string+0x3a>
				if (!isxdigit(next(lexer))) {
   20e6c:	f01e fc06 	bl	3f67c <__locale_ctype_ptr>
   20e70:	4601      	mov	r1, r0
   20e72:	4620      	mov	r0, r4
   20e74:	f025 f96a 	bl	4614c <next>
   20e78:	4408      	add	r0, r1
   20e7a:	7843      	ldrb	r3, [r0, #1]
   20e7c:	f013 0f44 	tst.w	r3, #68	; 0x44
   20e80:	d0d3      	beq.n	20e2a <lexer_string+0x3a>
				if (!isxdigit(next(lexer))) {
   20e82:	f01e fbfb 	bl	3f67c <__locale_ctype_ptr>
   20e86:	4601      	mov	r1, r0
   20e88:	4620      	mov	r0, r4
   20e8a:	f025 f95f 	bl	4614c <next>
   20e8e:	4408      	add	r0, r1
   20e90:	7843      	ldrb	r3, [r0, #1]
   20e92:	f013 0f44 	tst.w	r3, #68	; 0x44
   20e96:	d0c8      	beq.n	20e2a <lexer_string+0x3a>
				if (!isxdigit(next(lexer))) {
   20e98:	f01e fbf0 	bl	3f67c <__locale_ctype_ptr>
   20e9c:	4601      	mov	r1, r0
   20e9e:	4620      	mov	r0, r4
   20ea0:	f025 f954 	bl	4614c <next>
   20ea4:	4408      	add	r0, r1
   20ea6:	7843      	ldrb	r3, [r0, #1]
   20ea8:	f013 0f44 	tst.w	r3, #68	; 0x44
   20eac:	d1a4      	bne.n	20df8 <lexer_string+0x8>
   20eae:	e7bc      	b.n	20e2a <lexer_string+0x3a>
		if (chr == '"') {
   20eb0:	2822      	cmp	r0, #34	; 0x22
   20eb2:	d1a1      	bne.n	20df8 <lexer_string+0x8>
	lexer->pos--;
   20eb4:	68a3      	ldr	r3, [r4, #8]
	lexer->token.start = lexer->start;
   20eb6:	6862      	ldr	r2, [r4, #4]
	lexer->pos--;
   20eb8:	3b01      	subs	r3, #1
   20eba:	60a3      	str	r3, [r4, #8]
	lexer->token.type = token;
   20ebc:	7420      	strb	r0, [r4, #16]
	lexer->token.end = lexer->pos;
   20ebe:	e9c4 2305 	strd	r2, r3, [r4, #20]
	lexer->start = lexer->pos;
   20ec2:	6063      	str	r3, [r4, #4]
			next(lexer);
   20ec4:	4620      	mov	r0, r4
   20ec6:	f025 f941 	bl	4614c <next>
	lexer->start = lexer->pos;
   20eca:	68a3      	ldr	r3, [r4, #8]
			return lexer_json;
   20ecc:	4801      	ldr	r0, [pc, #4]	; (20ed4 <lexer_string+0xe4>)
	lexer->start = lexer->pos;
   20ece:	6063      	str	r3, [r4, #4]
			return lexer_json;
   20ed0:	e79d      	b.n	20e0e <lexer_string+0x1e>
   20ed2:	bf00      	nop
   20ed4:	00020cf5 	.word	0x00020cf5

00020ed8 <lexer_null>:
{
   20ed8:	b510      	push	{r4, lr}
	if (accept_run(lexer, "ull") < 0) {
   20eda:	490b      	ldr	r1, [pc, #44]	; (20f08 <lexer_null+0x30>)
{
   20edc:	4604      	mov	r4, r0
	if (accept_run(lexer, "ull") < 0) {
   20ede:	f025 f941 	bl	46164 <accept_run>
   20ee2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   20ee6:	2800      	cmp	r0, #0
   20ee8:	da06      	bge.n	20ef8 <lexer_null+0x20>
	lexer->token.type = token;
   20eea:	2121      	movs	r1, #33	; 0x21
	lexer->start = lexer->pos;
   20eec:	2000      	movs	r0, #0
	lexer->token.end = lexer->pos;
   20eee:	e9c4 2305 	strd	r2, r3, [r4, #20]
	lexer->token.type = token;
   20ef2:	7421      	strb	r1, [r4, #16]
	lexer->start = lexer->pos;
   20ef4:	6063      	str	r3, [r4, #4]
}
   20ef6:	bd10      	pop	{r4, pc}
	lexer->token.type = token;
   20ef8:	216e      	movs	r1, #110	; 0x6e
	lexer->token.end = lexer->pos;
   20efa:	e9c4 2305 	strd	r2, r3, [r4, #20]
	lexer->token.type = token;
   20efe:	7421      	strb	r1, [r4, #16]
	lexer->start = lexer->pos;
   20f00:	6063      	str	r3, [r4, #4]
	return lexer_json;
   20f02:	4802      	ldr	r0, [pc, #8]	; (20f0c <lexer_null+0x34>)
   20f04:	e7f7      	b.n	20ef6 <lexer_null+0x1e>
   20f06:	bf00      	nop
   20f08:	0004d28f 	.word	0x0004d28f
   20f0c:	00020cf5 	.word	0x00020cf5

00020f10 <decode_value>:
		     size_t max_elements, void *field, void *val);

static int decode_value(struct json_obj *obj,
			const struct json_obj_descr *descr,
			struct token *value, void *field, void *val)
{
   20f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20f14:	4615      	mov	r5, r2

	if (!equivalent_types(value->type, descr->type)) {
   20f16:	7812      	ldrb	r2, [r2, #0]
{
   20f18:	461c      	mov	r4, r3
	if (!equivalent_types(value->type, descr->type)) {
   20f1a:	794b      	ldrb	r3, [r1, #5]
{
   20f1c:	b086      	sub	sp, #24
	if (type1 == JSON_TOK_TRUE || type1 == JSON_TOK_FALSE) {
   20f1e:	2a74      	cmp	r2, #116	; 0x74
{
   20f20:	4606      	mov	r6, r0
   20f22:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	if (!equivalent_types(value->type, descr->type)) {
   20f24:	ea4f 0353 	mov.w	r3, r3, lsr #1
	if (type1 == JSON_TOK_TRUE || type1 == JSON_TOK_FALSE) {
   20f28:	d001      	beq.n	20f2e <decode_value+0x1e>
   20f2a:	2a66      	cmp	r2, #102	; 0x66
   20f2c:	d113      	bne.n	20f56 <decode_value+0x46>
		return type2 == JSON_TOK_TRUE || type2 == JSON_TOK_FALSE;
   20f2e:	2b74      	cmp	r3, #116	; 0x74
   20f30:	d004      	beq.n	20f3c <decode_value+0x2c>
   20f32:	2b66      	cmp	r3, #102	; 0x66
	return type1 == type2;
   20f34:	bf14      	ite	ne
   20f36:	2000      	movne	r0, #0
   20f38:	2001      	moveq	r0, #1
   20f3a:	e000      	b.n	20f3e <decode_value+0x2e>
		return type2 == JSON_TOK_TRUE || type2 == JSON_TOK_FALSE;
   20f3c:	2001      	movs	r0, #1
	if (!equivalent_types(value->type, descr->type)) {
   20f3e:	b138      	cbz	r0, 20f50 <decode_value+0x40>
		return -EINVAL;
	}

	switch (descr->type) {
   20f40:	2b5b      	cmp	r3, #91	; 0x5b
   20f42:	d020      	beq.n	20f86 <decode_value+0x76>
   20f44:	d809      	bhi.n	20f5a <decode_value+0x4a>
   20f46:	2b22      	cmp	r3, #34	; 0x22
   20f48:	f000 8084 	beq.w	21054 <decode_value+0x144>
   20f4c:	2b30      	cmp	r3, #48	; 0x30
   20f4e:	d062      	beq.n	21016 <decode_value+0x106>
		*str = value->start;

		return 0;
	}
	default:
		return -EINVAL;
   20f50:	f06f 0015 	mvn.w	r0, #21
   20f54:	e014      	b.n	20f80 <decode_value+0x70>
	return type1 == type2;
   20f56:	429a      	cmp	r2, r3
   20f58:	e7ec      	b.n	20f34 <decode_value+0x24>
	switch (descr->type) {
   20f5a:	2b74      	cmp	r3, #116	; 0x74
   20f5c:	d003      	beq.n	20f66 <decode_value+0x56>
   20f5e:	2b7b      	cmp	r3, #123	; 0x7b
   20f60:	d008      	beq.n	20f74 <decode_value+0x64>
   20f62:	2b66      	cmp	r3, #102	; 0x66
   20f64:	d1f4      	bne.n	20f50 <decode_value+0x40>
		*v = value->type == JSON_TOK_TRUE;
   20f66:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
   20f6a:	425a      	negs	r2, r3
   20f6c:	415a      	adcs	r2, r3
   20f6e:	7022      	strb	r2, [r4, #0]
		return 0;
   20f70:	2000      	movs	r0, #0
   20f72:	e005      	b.n	20f80 <decode_value+0x70>
		return obj_parse(obj, descr->object.sub_descr,
   20f74:	4623      	mov	r3, r4
   20f76:	e9d1 1202 	ldrd	r1, r2, [r1, #8]
   20f7a:	4630      	mov	r0, r6
   20f7c:	f025 f96b 	bl	46256 <obj_parse>
	}
}
   20f80:	b006      	add	sp, #24
   20f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return arr_parse(obj, descr->array.element_descr,
   20f86:	688d      	ldr	r5, [r1, #8]

static int arr_parse(struct json_obj *obj,
		     const struct json_obj_descr *elem_descr,
		     size_t max_elements, void *field, void *val)
{
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   20f88:	4628      	mov	r0, r5
   20f8a:	f025 f90d 	bl	461a8 <get_elem_size>
	void *last_elem = (char *)field + elem_size * max_elements;
   20f8e:	68cb      	ldr	r3, [r1, #12]
	size_t *elements = (size_t *)((char *)val + elem_descr->offset);
	struct token value;

	assert(elem_size > 0);
   20f90:	2800      	cmp	r0, #0
	void *last_elem = (char *)field + elem_size * max_elements;
   20f92:	fb03 4900 	mla	r9, r3, r0, r4
	size_t *elements = (size_t *)((char *)val + elem_descr->offset);
   20f96:	88eb      	ldrh	r3, [r5, #6]
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   20f98:	4680      	mov	r8, r0
	size_t *elements = (size_t *)((char *)val + elem_descr->offset);
   20f9a:	eb07 0a03 	add.w	sl, r7, r3
	assert(elem_size > 0);
   20f9e:	dc06      	bgt.n	20fae <decode_value+0x9e>
   20fa0:	4b2f      	ldr	r3, [pc, #188]	; (21060 <decode_value+0x150>)
   20fa2:	4a30      	ldr	r2, [pc, #192]	; (21064 <decode_value+0x154>)
   20fa4:	f240 2103 	movw	r1, #515	; 0x203
   20fa8:	482f      	ldr	r0, [pc, #188]	; (21068 <decode_value+0x158>)
   20faa:	f01e fb1f 	bl	3f5ec <__assert_func>

	*elements = 0;
   20fae:	2200      	movs	r2, #0
   20fb0:	50fa      	str	r2, [r7, r3]
	if (!lexer_next(&json->lexer, value)) {
   20fb2:	a903      	add	r1, sp, #12
   20fb4:	4630      	mov	r0, r6
   20fb6:	f025 f931 	bl	4621c <lexer_next>
   20fba:	2800      	cmp	r0, #0
   20fbc:	d0c8      	beq.n	20f50 <decode_value+0x40>
	if (value->type == JSON_TOK_LIST_END) {
   20fbe:	f89d 300c 	ldrb.w	r3, [sp, #12]
   20fc2:	2b5d      	cmp	r3, #93	; 0x5d
   20fc4:	d007      	beq.n	20fd6 <decode_value+0xc6>
	if (value->type == JSON_TOK_COMMA) {
   20fc6:	2b2c      	cmp	r3, #44	; 0x2c
   20fc8:	d01b      	beq.n	21002 <decode_value+0xf2>
	return element_token(value->type);
   20fca:	f89d 000c 	ldrb.w	r0, [sp, #12]
   20fce:	f025 f8d9 	bl	46184 <element_token>

	while (!arr_next(obj, &value)) {
   20fd2:	2800      	cmp	r0, #0
   20fd4:	d1bc      	bne.n	20f50 <decode_value+0x40>
		if (value.type == JSON_TOK_LIST_END) {
   20fd6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   20fda:	2b5d      	cmp	r3, #93	; 0x5d
   20fdc:	d0c8      	beq.n	20f70 <decode_value+0x60>
			return 0;
		}

		if (field == last_elem) {
   20fde:	45a1      	cmp	r9, r4
   20fe0:	d016      	beq.n	21010 <decode_value+0x100>
			return -ENOSPC;
		}

		if (decode_value(obj, elem_descr, &value, field, val) < 0) {
   20fe2:	9700      	str	r7, [sp, #0]
   20fe4:	4623      	mov	r3, r4
   20fe6:	aa03      	add	r2, sp, #12
   20fe8:	4629      	mov	r1, r5
   20fea:	4630      	mov	r0, r6
   20fec:	f7ff ff90 	bl	20f10 <decode_value>
   20ff0:	2800      	cmp	r0, #0
   20ff2:	dbad      	blt.n	20f50 <decode_value+0x40>
			return -EINVAL;
		}

		(*elements)++;
   20ff4:	f8da 3000 	ldr.w	r3, [sl]
		field = (char *)field + elem_size;
   20ff8:	4444      	add	r4, r8
		(*elements)++;
   20ffa:	3301      	adds	r3, #1
   20ffc:	f8ca 3000 	str.w	r3, [sl]
   21000:	e7d7      	b.n	20fb2 <decode_value+0xa2>
		if (!lexer_next(&json->lexer, value)) {
   21002:	a903      	add	r1, sp, #12
   21004:	4630      	mov	r0, r6
   21006:	f025 f909 	bl	4621c <lexer_next>
   2100a:	2800      	cmp	r0, #0
   2100c:	d1dd      	bne.n	20fca <decode_value+0xba>
   2100e:	e79f      	b.n	20f50 <decode_value+0x40>
			return -ENOSPC;
   21010:	f06f 001b 	mvn.w	r0, #27
		return arr_parse(obj, descr->array.element_descr,
   21014:	e7b4      	b.n	20f80 <decode_value+0x70>
	*token->end = '\0';
   21016:	2600      	movs	r6, #0
	prev_end = *token->end;
   21018:	68ab      	ldr	r3, [r5, #8]
   2101a:	781f      	ldrb	r7, [r3, #0]
	*token->end = '\0';
   2101c:	701e      	strb	r6, [r3, #0]
	errno = 0;
   2101e:	f025 fd51 	bl	46ac4 <__errno>
	*num = strtol(token->start, &endptr, 10);
   21022:	220a      	movs	r2, #10
	errno = 0;
   21024:	6006      	str	r6, [r0, #0]
	*num = strtol(token->start, &endptr, 10);
   21026:	a903      	add	r1, sp, #12
   21028:	6868      	ldr	r0, [r5, #4]
   2102a:	f01f fe7b 	bl	40d24 <strtol>
	*token->end = prev_end;
   2102e:	68ab      	ldr	r3, [r5, #8]
	*num = strtol(token->start, &endptr, 10);
   21030:	6020      	str	r0, [r4, #0]
	*token->end = prev_end;
   21032:	701f      	strb	r7, [r3, #0]
	if (errno != 0) {
   21034:	f025 fd46 	bl	46ac4 <__errno>
   21038:	6800      	ldr	r0, [r0, #0]
   2103a:	b120      	cbz	r0, 21046 <decode_value+0x136>
		return -errno;
   2103c:	f025 fd42 	bl	46ac4 <__errno>
   21040:	6800      	ldr	r0, [r0, #0]
   21042:	4240      	negs	r0, r0
   21044:	e79c      	b.n	20f80 <decode_value+0x70>
	if (endptr != token->end) {
   21046:	68aa      	ldr	r2, [r5, #8]
   21048:	9b03      	ldr	r3, [sp, #12]
		return -EINVAL;
   2104a:	429a      	cmp	r2, r3
   2104c:	bf18      	it	ne
   2104e:	f06f 0015 	mvnne.w	r0, #21
   21052:	e795      	b.n	20f80 <decode_value+0x70>
		*value->end = '\0';
   21054:	2000      	movs	r0, #0
   21056:	68ab      	ldr	r3, [r5, #8]
   21058:	7018      	strb	r0, [r3, #0]
		*str = value->start;
   2105a:	686b      	ldr	r3, [r5, #4]
   2105c:	6023      	str	r3, [r4, #0]
		return 0;
   2105e:	e78f      	b.n	20f80 <decode_value+0x70>
   21060:	0004c094 	.word	0x0004c094
   21064:	0004c07b 	.word	0x0004c07b
   21068:	0004c0a2 	.word	0x0004c0a2

0002106c <json_obj_parse>:
}

int json_obj_parse(char *payload, size_t len,
		   const struct json_obj_descr *descr, size_t descr_len,
		   void *val)
{
   2106c:	b530      	push	{r4, r5, lr}
	struct json_obj obj;
	int ret;

	assert(descr_len < (sizeof(ret) * CHAR_BIT - 1));
   2106e:	2b1e      	cmp	r3, #30
{
   21070:	b08b      	sub	sp, #44	; 0x2c
   21072:	4615      	mov	r5, r2
   21074:	461c      	mov	r4, r3
	assert(descr_len < (sizeof(ret) * CHAR_BIT - 1));
   21076:	d906      	bls.n	21086 <json_obj_parse+0x1a>
   21078:	4b11      	ldr	r3, [pc, #68]	; (210c0 <json_obj_parse+0x54>)
   2107a:	4a12      	ldr	r2, [pc, #72]	; (210c4 <json_obj_parse+0x58>)
   2107c:	f44f 7114 	mov.w	r1, #592	; 0x250
   21080:	4811      	ldr	r0, [pc, #68]	; (210c8 <json_obj_parse+0x5c>)
   21082:	f01e fab3 	bl	3f5ec <__assert_func>
	lexer->state = lexer_json;
   21086:	4b11      	ldr	r3, [pc, #68]	; (210cc <json_obj_parse+0x60>)
	lexer->pos = data;
   21088:	9005      	str	r0, [sp, #20]
	lexer->start = data;
   2108a:	e9cd 3003 	strd	r3, r0, [sp, #12]
	lexer->token.type = JSON_TOK_NONE;
   2108e:	235f      	movs	r3, #95	; 0x5f
	lexer->end = data + len;
   21090:	4408      	add	r0, r1
   21092:	9006      	str	r0, [sp, #24]
	if (!lexer_next(&json->lexer, &token)) {
   21094:	4669      	mov	r1, sp
   21096:	a803      	add	r0, sp, #12
	lexer->token.type = JSON_TOK_NONE;
   21098:	f88d 301c 	strb.w	r3, [sp, #28]
	if (!lexer_next(&json->lexer, &token)) {
   2109c:	f025 f8be 	bl	4621c <lexer_next>
   210a0:	b918      	cbnz	r0, 210aa <json_obj_parse+0x3e>
		return -EINVAL;
   210a2:	f06f 0015 	mvn.w	r0, #21
	if (ret < 0) {
		return ret;
	}

	return obj_parse(&obj, descr, descr_len, val);
}
   210a6:	b00b      	add	sp, #44	; 0x2c
   210a8:	bd30      	pop	{r4, r5, pc}
	if (token.type != JSON_TOK_OBJECT_START) {
   210aa:	f89d 3000 	ldrb.w	r3, [sp]
   210ae:	2b7b      	cmp	r3, #123	; 0x7b
   210b0:	d1f7      	bne.n	210a2 <json_obj_parse+0x36>
	return obj_parse(&obj, descr, descr_len, val);
   210b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   210b4:	4622      	mov	r2, r4
   210b6:	4629      	mov	r1, r5
   210b8:	a803      	add	r0, sp, #12
   210ba:	f025 f8cc 	bl	46256 <obj_parse>
   210be:	e7f2      	b.n	210a6 <json_obj_parse+0x3a>
   210c0:	0004c0c4 	.word	0x0004c0c4
   210c4:	0004c085 	.word	0x0004c085
   210c8:	0004c0a2 	.word	0x0004c0a2
   210cc:	00020cf5 	.word	0x00020cf5

000210d0 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   210d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210d4:	b085      	sub	sp, #20
   210d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   210d8:	469b      	mov	fp, r3
   210da:	2c01      	cmp	r4, #1
   210dc:	bfb8      	it	lt
   210de:	2401      	movlt	r4, #1
   210e0:	2b01      	cmp	r3, #1
   210e2:	bf0c      	ite	eq
   210e4:	2330      	moveq	r3, #48	; 0x30
   210e6:	2320      	movne	r3, #32
   210e8:	4616      	mov	r6, r2
   210ea:	4682      	mov	sl, r0
   210ec:	4688      	mov	r8, r1
   210ee:	2501      	movs	r5, #1
   210f0:	270a      	movs	r7, #10
   210f2:	2200      	movs	r2, #0
   210f4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 21164 <_printk_dec_ulong+0x94>
   210f8:	9302      	str	r3, [sp, #8]
   210fa:	fbb6 f3f9 	udiv	r3, r6, r9
   210fe:	9301      	str	r3, [sp, #4]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   21100:	b90a      	cbnz	r2, 21106 <_printk_dec_ulong+0x36>
   21102:	45b1      	cmp	r9, r6
   21104:	d81c      	bhi.n	21140 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   21106:	9b01      	ldr	r3, [sp, #4]
   21108:	4641      	mov	r1, r8
   2110a:	f103 0030 	add.w	r0, r3, #48	; 0x30
   2110e:	47d0      	blx	sl
			found_largest_digit = 1;
   21110:	2201      	movs	r2, #1
			digits++;
   21112:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
   21114:	9b01      	ldr	r3, [sp, #4]
		remaining--;
   21116:	3f01      	subs	r7, #1
		remainder %= pos;
   21118:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
   2111c:	230a      	movs	r3, #10
	while (pos >= 10) {
   2111e:	2f01      	cmp	r7, #1
		pos /= 10;
   21120:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
   21124:	d1e9      	bne.n	210fa <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
   21126:	4641      	mov	r1, r8
   21128:	f106 0030 	add.w	r0, r6, #48	; 0x30
   2112c:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
   2112e:	f1bb 0f03 	cmp.w	fp, #3
   21132:	d102      	bne.n	2113a <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
   21134:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
   21136:	2c00      	cmp	r4, #0
   21138:	dc0e      	bgt.n	21158 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
   2113a:	b005      	add	sp, #20
   2113c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   21140:	42bc      	cmp	r4, r7
   21142:	dbe7      	blt.n	21114 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
   21144:	f1bb 0f02 	cmp.w	fp, #2
   21148:	d8e4      	bhi.n	21114 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   2114a:	4641      	mov	r1, r8
   2114c:	9802      	ldr	r0, [sp, #8]
   2114e:	9203      	str	r2, [sp, #12]
			digits++;
   21150:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   21152:	47d0      	blx	sl
			digits++;
   21154:	9a03      	ldr	r2, [sp, #12]
   21156:	e7dd      	b.n	21114 <_printk_dec_ulong+0x44>
			out(' ', ctx);
   21158:	4641      	mov	r1, r8
   2115a:	2020      	movs	r0, #32
   2115c:	47d0      	blx	sl
   2115e:	3c01      	subs	r4, #1
   21160:	e7e9      	b.n	21136 <_printk_dec_ulong+0x66>
   21162:	bf00      	nop
   21164:	3b9aca00 	.word	0x3b9aca00

00021168 <__printk_hook_install>:
	_char_out = fn;
   21168:	4b01      	ldr	r3, [pc, #4]	; (21170 <__printk_hook_install+0x8>)
   2116a:	6018      	str	r0, [r3, #0]
}
   2116c:	4770      	bx	lr
   2116e:	bf00      	nop
   21170:	20031b90 	.word	0x20031b90

00021174 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   21174:	f04f 0220 	mov.w	r2, #32
   21178:	f3ef 8311 	mrs	r3, BASEPRI
   2117c:	f382 8811 	msr	BASEPRI, r2
   21180:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   21184:	2101      	movs	r1, #1
   21186:	4a04      	ldr	r2, [pc, #16]	; (21198 <nordicsemi_nrf91_init+0x24>)
   21188:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   2118c:	f383 8811 	msr	BASEPRI, r3
   21190:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   21194:	2000      	movs	r0, #0
   21196:	4770      	bx	lr
   21198:	40039000 	.word	0x40039000

0002119c <z_arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

__STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   2119c:	b120      	cbz	r0, 211a8 <z_arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   2119e:	4b03      	ldr	r3, [pc, #12]	; (211ac <z_arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   211a0:	0180      	lsls	r0, r0, #6
   211a2:	f043 0301 	orr.w	r3, r3, #1
   211a6:	4718      	bx	r3

void z_arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   211a8:	4770      	bx	lr
   211aa:	bf00      	nop
   211ac:	00049180 	.word	0x00049180

000211b0 <log_generic>:

	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap)
{
   211b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else  if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		u32_t timestamp = timestamp_func();
   211b4:	4b12      	ldr	r3, [pc, #72]	; (21200 <log_generic+0x50>)
{
   211b6:	b085      	sub	sp, #20
		u32_t timestamp = timestamp_func();
   211b8:	681b      	ldr	r3, [r3, #0]
{
   211ba:	4681      	mov	r9, r0
   211bc:	468a      	mov	sl, r1
   211be:	9203      	str	r2, [sp, #12]
		u32_t timestamp = timestamp_func();
   211c0:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
   211c2:	2500      	movs	r5, #0
		u32_t timestamp = timestamp_func();
   211c4:	4680      	mov	r8, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   211c6:	4c0f      	ldr	r4, [pc, #60]	; (21204 <log_generic+0x54>)
   211c8:	4b0f      	ldr	r3, [pc, #60]	; (21208 <log_generic+0x58>)
   211ca:	1b1b      	subs	r3, r3, r4
   211cc:	ea4f 1b23 	mov.w	fp, r3, asr #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   211d0:	455d      	cmp	r5, fp
   211d2:	db02      	blt.n	211da <log_generic+0x2a>
			args[i] = va_arg(ap, log_arg_t);
		}

		log_n(fmt, args, nargs, src_level);
	}
}
   211d4:	b005      	add	sp, #20
   211d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211da:	012a      	lsls	r2, r5, #4
   211dc:	18a7      	adds	r7, r4, r2
			if (log_backend_is_active(backend)) {
   211de:	4638      	mov	r0, r7
   211e0:	f025 fa52 	bl	46688 <log_backend_is_active>
   211e4:	b148      	cbz	r0, 211fa <log_generic+0x4a>
	if (backend->api->put_sync_string) {
   211e6:	58a3      	ldr	r3, [r4, r2]
   211e8:	685e      	ldr	r6, [r3, #4]
   211ea:	b136      	cbz	r6, 211fa <log_generic+0x4a>
		backend->api->put_sync_string(backend, src_level,
   211ec:	9b03      	ldr	r3, [sp, #12]
   211ee:	4642      	mov	r2, r8
   211f0:	9300      	str	r3, [sp, #0]
   211f2:	4649      	mov	r1, r9
   211f4:	4653      	mov	r3, sl
   211f6:	4638      	mov	r0, r7
   211f8:	47b0      	blx	r6
		for (int i = 0; i < log_backend_count_get(); i++) {
   211fa:	3501      	adds	r5, #1
   211fc:	e7e8      	b.n	211d0 <log_generic+0x20>
   211fe:	bf00      	nop
   21200:	20031b94 	.word	0x20031b94
   21204:	00049120 	.word	0x00049120
   21208:	00049140 	.word	0x00049140

0002120c <log_core_init>:
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
   2120c:	4b03      	ldr	r3, [pc, #12]	; (2121c <log_core_init+0x10>)
   2120e:	4a04      	ldr	r2, [pc, #16]	; (21220 <log_core_init+0x14>)
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
   21210:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   21214:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   21216:	f000 ba61 	b.w	216dc <log_output_timestamp_freq_set>
   2121a:	bf00      	nop
   2121c:	20031b94 	.word	0x20031b94
   21220:	0004668f 	.word	0x0004668f

00021224 <log_source_name_get>:
   21224:	4a04      	ldr	r2, [pc, #16]	; (21238 <log_source_name_get+0x14>)
   21226:	4b05      	ldr	r3, [pc, #20]	; (2123c <log_source_name_get+0x18>)
   21228:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(u32_t domain_id, u32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   2122a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   2122e:	bf34      	ite	cc
   21230:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   21234:	2000      	movcs	r0, #0
}
   21236:	4770      	bx	lr
   21238:	00049018 	.word	0x00049018
   2123c:	00049120 	.word	0x00049120

00021240 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			u32_t level)
{
   21240:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	u32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   21242:	4c10      	ldr	r4, [pc, #64]	; (21284 <log_backend_enable+0x44>)
{
   21244:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   21246:	1b04      	subs	r4, r0, r4
   21248:	1124      	asrs	r4, r4, #4
   2124a:	3401      	adds	r4, #1
{
   2124c:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   2124e:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   21250:	b948      	cbnz	r0, 21266 <log_backend_enable+0x26>
   21252:	490d      	ldr	r1, [pc, #52]	; (21288 <log_backend_enable+0x48>)
   21254:	480d      	ldr	r0, [pc, #52]	; (2128c <log_backend_enable+0x4c>)
   21256:	23bf      	movs	r3, #191	; 0xbf
   21258:	4a0d      	ldr	r2, [pc, #52]	; (21290 <log_backend_enable+0x50>)
   2125a:	f025 f9ff 	bl	4665c <printk>
   2125e:	21bf      	movs	r1, #191	; 0xbf
   21260:	480b      	ldr	r0, [pc, #44]	; (21290 <log_backend_enable+0x50>)
   21262:	f025 fa08 	bl	46676 <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   21266:	2201      	movs	r2, #1
	backend->cb->id = id;
   21268:	686b      	ldr	r3, [r5, #4]
   2126a:	711c      	strb	r4, [r3, #4]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
   2126c:	4c09      	ldr	r4, [pc, #36]	; (21294 <log_backend_enable+0x54>)
	backend->cb->active = true;
   2126e:	715a      	strb	r2, [r3, #5]
   21270:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   21272:	601e      	str	r6, [r3, #0]
   21274:	b912      	cbnz	r2, 2127c <log_backend_enable+0x3c>
		z_arch_syscall_invoke1(*(u32_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   21276:	4808      	ldr	r0, [pc, #32]	; (21298 <log_backend_enable+0x58>)
   21278:	f01c fc70 	bl	3db5c <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   2127c:	2301      	movs	r3, #1
   2127e:	7023      	strb	r3, [r4, #0]
}
   21280:	bd70      	pop	{r4, r5, r6, pc}
   21282:	bf00      	nop
   21284:	00049120 	.word	0x00049120
   21288:	0004b5a8 	.word	0x0004b5a8
   2128c:	0004b5bf 	.word	0x0004b5bf
   21290:	0004c109 	.word	0x0004c109
   21294:	2002a446 	.word	0x2002a446
   21298:	200322f8 	.word	0x200322f8

0002129c <log_init>:
{
   2129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
   2129e:	4e14      	ldr	r6, [pc, #80]	; (212f0 <log_init+0x54>)
   212a0:	4b14      	ldr	r3, [pc, #80]	; (212f4 <log_init+0x58>)
   212a2:	1b9b      	subs	r3, r3, r6
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   212a4:	2b90      	cmp	r3, #144	; 0x90
   212a6:	dd06      	ble.n	212b6 <log_init+0x1a>
   212a8:	4b13      	ldr	r3, [pc, #76]	; (212f8 <log_init+0x5c>)
   212aa:	4a14      	ldr	r2, [pc, #80]	; (212fc <log_init+0x60>)
   212ac:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
   212b0:	4813      	ldr	r0, [pc, #76]	; (21300 <log_init+0x64>)
   212b2:	f01e f99b 	bl	3f5ec <__assert_func>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   212b6:	4a13      	ldr	r2, [pc, #76]	; (21304 <log_init+0x68>)
   212b8:	e8d2 4fef 	ldaex	r4, [r2]
   212bc:	1c61      	adds	r1, r4, #1
   212be:	e8c2 1fe0 	stlex	r0, r1, [r2]
   212c2:	2800      	cmp	r0, #0
   212c4:	d1f8      	bne.n	212b8 <log_init+0x1c>
	if (atomic_inc(&initialized) != 0) {
   212c6:	b914      	cbnz	r4, 212ce <log_init+0x32>
   212c8:	111d      	asrs	r5, r3, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   212ca:	42ac      	cmp	r4, r5
   212cc:	db00      	blt.n	212d0 <log_init+0x34>
}
   212ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   212d0:	0127      	lsls	r7, r4, #4
		if (backend->autostart) {
   212d2:	19f3      	adds	r3, r6, r7
   212d4:	7b1b      	ldrb	r3, [r3, #12]
   212d6:	b143      	cbz	r3, 212ea <log_init+0x4e>
			if (backend->api->init != NULL) {
   212d8:	59f3      	ldr	r3, [r6, r7]
   212da:	695b      	ldr	r3, [r3, #20]
   212dc:	b103      	cbz	r3, 212e0 <log_init+0x44>
				backend->api->init();
   212de:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   212e0:	2204      	movs	r2, #4
   212e2:	2100      	movs	r1, #0
   212e4:	19f0      	adds	r0, r6, r7
   212e6:	f7ff ffab 	bl	21240 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   212ea:	3401      	adds	r4, #1
   212ec:	e7ed      	b.n	212ca <log_init+0x2e>
   212ee:	bf00      	nop
   212f0:	00049120 	.word	0x00049120
   212f4:	00049140 	.word	0x00049140
   212f8:	0004c13b 	.word	0x0004c13b
   212fc:	0004c100 	.word	0x0004c100
   21300:	0004c18f 	.word	0x0004c18f
   21304:	20023958 	.word	0x20023958

00021308 <z_impl_log_panic>:
{
   21308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   2130a:	4f0d      	ldr	r7, [pc, #52]	; (21340 <z_impl_log_panic+0x38>)
   2130c:	783c      	ldrb	r4, [r7, #0]
   2130e:	b94c      	cbnz	r4, 21324 <z_impl_log_panic+0x1c>
	log_init();
   21310:	f7ff ffc4 	bl	2129c <log_init>
   21314:	4e0b      	ldr	r6, [pc, #44]	; (21344 <z_impl_log_panic+0x3c>)
   21316:	4d0c      	ldr	r5, [pc, #48]	; (21348 <z_impl_log_panic+0x40>)
   21318:	1bad      	subs	r5, r5, r6
   2131a:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   2131c:	42ac      	cmp	r4, r5
   2131e:	db02      	blt.n	21326 <z_impl_log_panic+0x1e>
	panic_mode = true;
   21320:	2301      	movs	r3, #1
   21322:	703b      	strb	r3, [r7, #0]
}
   21324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21326:	0121      	lsls	r1, r4, #4
   21328:	1872      	adds	r2, r6, r1
		if (log_backend_is_active(backend)) {
   2132a:	4610      	mov	r0, r2
   2132c:	f025 f9ac 	bl	46688 <log_backend_is_active>
   21330:	b118      	cbz	r0, 2133a <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   21332:	5873      	ldr	r3, [r6, r1]
   21334:	4610      	mov	r0, r2
   21336:	691b      	ldr	r3, [r3, #16]
   21338:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   2133a:	3401      	adds	r4, #1
   2133c:	e7ee      	b.n	2131c <z_impl_log_panic+0x14>
   2133e:	bf00      	nop
   21340:	2002a447 	.word	0x2002a447
   21344:	00049120 	.word	0x00049120
   21348:	00049140 	.word	0x00049140

0002134c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   2134c:	b40e      	push	{r1, r2, r3}
   2134e:	b503      	push	{r0, r1, lr}
   21350:	ab03      	add	r3, sp, #12
   21352:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   21356:	4601      	mov	r1, r0
   21358:	4804      	ldr	r0, [pc, #16]	; (2136c <print_formatted+0x20>)
	va_start(args, fmt);
   2135a:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   2135c:	f025 f808 	bl	46370 <z_vprintk>
#endif
	va_end(args);

	return length;
}
   21360:	2000      	movs	r0, #0
   21362:	b002      	add	sp, #8
   21364:	f85d eb04 	ldr.w	lr, [sp], #4
   21368:	b003      	add	sp, #12
   2136a:	4770      	bx	lr
   2136c:	000215a9 	.word	0x000215a9

00021370 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
   21370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   21374:	f011 0402 	ands.w	r4, r1, #2
{
   21378:	b085      	sub	sp, #20
   2137a:	4606      	mov	r6, r0
   2137c:	4690      	mov	r8, r2
   2137e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   21382:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   21386:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   2138a:	d007      	beq.n	2139c <prefix_print+0x2c>
	if (!format) {
   2138c:	f011 0f44 	tst.w	r1, #68	; 0x44
   21390:	d137      	bne.n	21402 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   21392:	461a      	mov	r2, r3
   21394:	4932      	ldr	r1, [pc, #200]	; (21460 <prefix_print+0xf0>)
   21396:	f7ff ffd9 	bl	2134c <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   2139a:	4604      	mov	r4, r0
	if (color) {
   2139c:	f1b9 0f00 	cmp.w	r9, #0
   213a0:	d00a      	beq.n	213b8 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
   213a2:	4b30      	ldr	r3, [pc, #192]	; (21464 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
   213a4:	4930      	ldr	r1, [pc, #192]	; (21468 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
   213a6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
   213aa:	4b30      	ldr	r3, [pc, #192]	; (2146c <prefix_print+0xfc>)
   213ac:	4630      	mov	r0, r6
   213ae:	2a00      	cmp	r2, #0
   213b0:	bf08      	it	eq
   213b2:	461a      	moveq	r2, r3
   213b4:	f7ff ffca 	bl	2134c <print_formatted>
	if (level_on) {
   213b8:	b13d      	cbz	r5, 213ca <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   213ba:	4b2d      	ldr	r3, [pc, #180]	; (21470 <prefix_print+0x100>)
   213bc:	492d      	ldr	r1, [pc, #180]	; (21474 <prefix_print+0x104>)
   213be:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   213c2:	4630      	mov	r0, r6
   213c4:	f7ff ffc2 	bl	2134c <print_formatted>
   213c8:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   213ca:	f1b8 0f00 	cmp.w	r8, #0
   213ce:	d044      	beq.n	2145a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   213d0:	2301      	movs	r3, #1
   213d2:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   213d6:	4b28      	ldr	r3, [pc, #160]	; (21478 <prefix_print+0x108>)
   213d8:	f017 0f10 	tst.w	r7, #16
   213dc:	4f27      	ldr	r7, [pc, #156]	; (2147c <prefix_print+0x10c>)
   213de:	bf18      	it	ne
   213e0:	461f      	movne	r7, r3
   213e2:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   213e6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   213ea:	f7ff ff1b 	bl	21224 <log_source_name_get>
   213ee:	4639      	mov	r1, r7
   213f0:	4602      	mov	r2, r0
   213f2:	4630      	mov	r0, r6
   213f4:	f7ff ffaa 	bl	2134c <print_formatted>
   213f8:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
   213fa:	4420      	add	r0, r4
   213fc:	b005      	add	sp, #20
   213fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   21402:	4a1f      	ldr	r2, [pc, #124]	; (21480 <prefix_print+0x110>)
   21404:	6811      	ldr	r1, [r2, #0]
   21406:	b331      	cbz	r1, 21456 <prefix_print+0xe6>
		timestamp /= timestamp_div;
   21408:	4a1e      	ldr	r2, [pc, #120]	; (21484 <prefix_print+0x114>)
   2140a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   2140e:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   21410:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   21414:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
   21418:	fbb3 f4f1 	udiv	r4, r3, r1
   2141c:	fbb4 f2fe 	udiv	r2, r4, lr
   21420:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   21424:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   21428:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   2142c:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   21430:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   21434:	fb01 441b 	mls	r4, r1, fp, r4
   21438:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   2143c:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   21440:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   21444:	e9cd b101 	strd	fp, r1, [sp, #4]
   21448:	fb0a e113 	mls	r1, sl, r3, lr
   2144c:	9100      	str	r1, [sp, #0]
   2144e:	490e      	ldr	r1, [pc, #56]	; (21488 <prefix_print+0x118>)
   21450:	f7ff ff7c 	bl	2134c <print_formatted>
   21454:	e7a1      	b.n	2139a <prefix_print+0x2a>
		length = 0;
   21456:	4608      	mov	r0, r1
   21458:	e79f      	b.n	2139a <prefix_print+0x2a>
	total += print_formatted(log_output,
   2145a:	4f08      	ldr	r7, [pc, #32]	; (2147c <prefix_print+0x10c>)
   2145c:	e7c1      	b.n	213e2 <prefix_print+0x72>
   2145e:	bf00      	nop
   21460:	0004c24d 	.word	0x0004c24d
   21464:	0004934c 	.word	0x0004934c
   21468:	0004fad0 	.word	0x0004fad0
   2146c:	0004c23f 	.word	0x0004c23f
   21470:	00049360 	.word	0x00049360
   21474:	0004c272 	.word	0x0004c272
   21478:	0004c244 	.word	0x0004c244
   2147c:	0004c248 	.word	0x0004c248
   21480:	2002395c 	.word	0x2002395c
   21484:	20023960 	.word	0x20023960
   21488:	0004c256 	.word	0x0004c256

0002148c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
   2148c:	b538      	push	{r3, r4, r5, lr}
   2148e:	460c      	mov	r4, r1
	if (color) {
   21490:	07e1      	lsls	r1, r4, #31
{
   21492:	4605      	mov	r5, r0
	if (color) {
   21494:	d503      	bpl.n	2149e <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
   21496:	4a08      	ldr	r2, [pc, #32]	; (214b8 <postfix_print+0x2c>)
   21498:	4908      	ldr	r1, [pc, #32]	; (214bc <postfix_print+0x30>)
   2149a:	f7ff ff57 	bl	2134c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   2149e:	06e2      	lsls	r2, r4, #27
   214a0:	d408      	bmi.n	214b4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   214a2:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   214a4:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   214a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   214aa:	bf4c      	ite	mi
   214ac:	4904      	ldrmi	r1, [pc, #16]	; (214c0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   214ae:	4905      	ldrpl	r1, [pc, #20]	; (214c4 <postfix_print+0x38>)
   214b0:	f7ff bf4c 	b.w	2134c <print_formatted>
}
   214b4:	bd38      	pop	{r3, r4, r5, pc}
   214b6:	bf00      	nop
   214b8:	0004c23f 	.word	0x0004c23f
   214bc:	0004fad0 	.word	0x0004fad0
   214c0:	00050482 	.word	0x00050482
   214c4:	0004e912 	.word	0x0004e912

000214c8 <hexdump_line_print>:
{
   214c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   214cc:	4698      	mov	r8, r3
   214ce:	9b08      	ldr	r3, [sp, #32]
   214d0:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   214d2:	06dd      	lsls	r5, r3, #27
{
   214d4:	460e      	mov	r6, r1
   214d6:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   214d8:	d405      	bmi.n	214e6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   214da:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   214dc:	bf4c      	ite	mi
   214de:	492b      	ldrmi	r1, [pc, #172]	; (2158c <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   214e0:	492b      	ldrpl	r1, [pc, #172]	; (21590 <hexdump_line_print+0xc8>)
   214e2:	f7ff ff33 	bl	2134c <print_formatted>
{
   214e6:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
   214e8:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 21598 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   214ec:	4545      	cmp	r5, r8
   214ee:	db2f      	blt.n	21550 <hexdump_line_print+0x88>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   214f0:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   214f2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 2159c <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   214f6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 215a0 <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   214fa:	f8df a09c 	ldr.w	sl, [pc, #156]	; 21598 <hexdump_line_print+0xd0>
		if (i < length) {
   214fe:	42af      	cmp	r7, r5
   21500:	d933      	bls.n	2156a <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   21502:	5d72      	ldrb	r2, [r6, r5]
   21504:	4649      	mov	r1, r9
   21506:	4620      	mov	r0, r4
   21508:	f7ff ff20 	bl	2134c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2150c:	3501      	adds	r5, #1
   2150e:	2d10      	cmp	r5, #16
   21510:	d124      	bne.n	2155c <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   21512:	4920      	ldr	r1, [pc, #128]	; (21594 <hexdump_line_print+0xcc>)
   21514:	4620      	mov	r0, r4
   21516:	f7ff ff19 	bl	2134c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2151a:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   2151c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 21598 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%c",
   21520:	f8df a080 	ldr.w	sl, [pc, #128]	; 215a4 <hexdump_line_print+0xdc>
		if (i < length) {
   21524:	42af      	cmp	r7, r5
   21526:	d92c      	bls.n	21582 <hexdump_line_print+0xba>
			char c = (char)data[i];
   21528:	f816 9005 	ldrb.w	r9, [r6, r5]
			      isprint((int)c) ? c : '.');
   2152c:	f01e f8a6 	bl	3f67c <__locale_ctype_ptr>
   21530:	4448      	add	r0, r9
			print_formatted(log_output, "%c",
   21532:	7843      	ldrb	r3, [r0, #1]
   21534:	4651      	mov	r1, sl
   21536:	f013 0f97 	tst.w	r3, #151	; 0x97
   2153a:	bf14      	ite	ne
   2153c:	464a      	movne	r2, r9
   2153e:	222e      	moveq	r2, #46	; 0x2e
   21540:	4620      	mov	r0, r4
   21542:	f7ff ff03 	bl	2134c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   21546:	3501      	adds	r5, #1
   21548:	2d10      	cmp	r5, #16
   2154a:	d113      	bne.n	21574 <hexdump_line_print+0xac>
}
   2154c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   21550:	4649      	mov	r1, r9
   21552:	4620      	mov	r0, r4
   21554:	f7ff fefa 	bl	2134c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   21558:	3501      	adds	r5, #1
   2155a:	e7c7      	b.n	214ec <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
   2155c:	076a      	lsls	r2, r5, #29
   2155e:	d1ce      	bne.n	214fe <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
   21560:	4651      	mov	r1, sl
   21562:	4620      	mov	r0, r4
   21564:	f7ff fef2 	bl	2134c <print_formatted>
   21568:	e7c9      	b.n	214fe <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
   2156a:	4641      	mov	r1, r8
   2156c:	4620      	mov	r0, r4
   2156e:	f7ff feed 	bl	2134c <print_formatted>
   21572:	e7cb      	b.n	2150c <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
   21574:	076b      	lsls	r3, r5, #29
   21576:	d1d5      	bne.n	21524 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
   21578:	4641      	mov	r1, r8
   2157a:	4620      	mov	r0, r4
   2157c:	f7ff fee6 	bl	2134c <print_formatted>
   21580:	e7d0      	b.n	21524 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
   21582:	4641      	mov	r1, r8
   21584:	4620      	mov	r0, r4
   21586:	f7ff fee1 	bl	2134c <print_formatted>
   2158a:	e7dc      	b.n	21546 <hexdump_line_print+0x7e>
   2158c:	00050482 	.word	0x00050482
   21590:	0004e912 	.word	0x0004e912
   21594:	0004c1c7 	.word	0x0004c1c7
   21598:	0004c1c5 	.word	0x0004c1c5
   2159c:	0004c1c3 	.word	0x0004c1c3
   215a0:	0004c1bd 	.word	0x0004c1bd
   215a4:	0004c1c9 	.word	0x0004c1c9

000215a8 <out_func>:
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   215a8:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   215ac:	681b      	ldr	r3, [r3, #0]
{
   215ae:	b510      	push	{r4, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   215b0:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   215b2:	684a      	ldr	r2, [r1, #4]
{
   215b4:	460c      	mov	r4, r1
	out_ctx->control_block->offset++;
   215b6:	6813      	ldr	r3, [r2, #0]
   215b8:	3301      	adds	r3, #1
   215ba:	6013      	str	r3, [r2, #0]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   215bc:	68ca      	ldr	r2, [r1, #12]
   215be:	4293      	cmp	r3, r2
   215c0:	d909      	bls.n	215d6 <out_func+0x2e>
   215c2:	490a      	ldr	r1, [pc, #40]	; (215ec <out_func+0x44>)
   215c4:	480a      	ldr	r0, [pc, #40]	; (215f0 <out_func+0x48>)
   215c6:	2365      	movs	r3, #101	; 0x65
   215c8:	4a0a      	ldr	r2, [pc, #40]	; (215f4 <out_func+0x4c>)
   215ca:	f025 f847 	bl	4665c <printk>
   215ce:	2165      	movs	r1, #101	; 0x65
   215d0:	4808      	ldr	r0, [pc, #32]	; (215f4 <out_func+0x4c>)
   215d2:	f025 f850 	bl	46676 <assert_post_action>
	if (out_ctx->control_block->offset == out_ctx->size) {
   215d6:	6863      	ldr	r3, [r4, #4]
   215d8:	681a      	ldr	r2, [r3, #0]
   215da:	68e3      	ldr	r3, [r4, #12]
   215dc:	429a      	cmp	r2, r3
   215de:	d102      	bne.n	215e6 <out_func+0x3e>
		log_output_flush(out_ctx);
   215e0:	4620      	mov	r0, r4
   215e2:	f025 f87e 	bl	466e2 <log_output_flush>
}
   215e6:	2000      	movs	r0, #0
   215e8:	bd10      	pop	{r4, pc}
   215ea:	bf00      	nop
   215ec:	0004c20f 	.word	0x0004c20f
   215f0:	0004b5bf 	.word	0x0004b5bf
   215f4:	0004c1df 	.word	0x0004c1df

000215f8 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, u32_t timestamp,
		       const char *fmt, va_list ap, u32_t flags)
{
   215f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	u8_t level = (u8_t)src_level.level;
	u8_t domain_id = (u8_t)src_level.domain_id;
	u16_t source_id = (u16_t)src_level.source_id;
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);

	if (!raw_string) {
   215fc:	f011 0407 	ands.w	r4, r1, #7
{
   21600:	4607      	mov	r7, r0
   21602:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
   21606:	461d      	mov	r5, r3
	if (!raw_string) {
   21608:	d00b      	beq.n	21622 <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
   2160a:	f3c1 1389 	ubfx	r3, r1, #6, #10
   2160e:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   21612:	9302      	str	r3, [sp, #8]
   21614:	e9cd 4100 	strd	r4, r1, [sp]
   21618:	4613      	mov	r3, r2
   2161a:	4631      	mov	r1, r6
   2161c:	2201      	movs	r2, #1
   2161e:	f7ff fea7 	bl	21370 <prefix_print>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
   21622:	4643      	mov	r3, r8
   21624:	462a      	mov	r2, r5
   21626:	4639      	mov	r1, r7
   21628:	480d      	ldr	r0, [pc, #52]	; (21660 <log_output_string+0x68>)
   2162a:	f024 fea1 	bl	46370 <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
   2162e:	b98c      	cbnz	r4, 21654 <log_output_string+0x5c>
   21630:	3d01      	subs	r5, #1
	while (*fmt != '\0') {
   21632:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   21636:	b95b      	cbnz	r3, 21650 <log_output_string+0x58>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   21638:	2c0a      	cmp	r4, #10
   2163a:	d103      	bne.n	21644 <log_output_string+0x4c>
			print_formatted(log_output, "\r");
   2163c:	4909      	ldr	r1, [pc, #36]	; (21664 <log_output_string+0x6c>)
   2163e:	4638      	mov	r0, r7
   21640:	f7ff fe84 	bl	2134c <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
   21644:	4638      	mov	r0, r7
}
   21646:	b004      	add	sp, #16
   21648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
   2164c:	f025 b849 	b.w	466e2 <log_output_flush>
	while (*fmt != '\0') {
   21650:	461c      	mov	r4, r3
   21652:	e7ee      	b.n	21632 <log_output_string+0x3a>
		postfix_print(log_output, flags, level);
   21654:	4622      	mov	r2, r4
   21656:	4631      	mov	r1, r6
   21658:	4638      	mov	r0, r7
   2165a:	f7ff ff17 	bl	2148c <postfix_print>
   2165e:	e7f1      	b.n	21644 <log_output_string+0x4c>
   21660:	000215a9 	.word	0x000215a9
   21664:	0004c1dd 	.word	0x0004c1dd

00021668 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, u32_t timestamp,
			     const char *metadata, const u8_t *data,
			     u32_t length, u32_t flags)
{
   21668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2166c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2166e:	4698      	mov	r8, r3
   21670:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
	u32_t prefix_offset;
	u8_t level = (u8_t)src_level.level;
	u8_t domain_id = (u8_t)src_level.domain_id;
	u16_t source_id = (u16_t)src_level.source_id;

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   21674:	f3c1 1389 	ubfx	r3, r1, #6, #10
	u8_t level = (u8_t)src_level.level;
   21678:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   2167c:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   21680:	9302      	str	r3, [sp, #8]
   21682:	e9cd 9100 	strd	r9, r1, [sp]
   21686:	4613      	mov	r3, r2
   21688:	4631      	mov	r1, r6
   2168a:	2201      	movs	r2, #1
{
   2168c:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   2168e:	f7ff fe6f 	bl	21370 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
   21692:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   21694:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
   21696:	4910      	ldr	r1, [pc, #64]	; (216d8 <log_output_hexdump+0x70>)
   21698:	4620      	mov	r0, r4
   2169a:	f7ff fe57 	bl	2134c <print_formatted>

	while (length) {
   2169e:	b955      	cbnz	r5, 216b6 <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
   216a0:	4620      	mov	r0, r4
   216a2:	464a      	mov	r2, r9
   216a4:	4631      	mov	r1, r6
   216a6:	f7ff fef1 	bl	2148c <postfix_print>
	log_output_flush(log_output);
   216aa:	4620      	mov	r0, r4
}
   216ac:	b004      	add	sp, #16
   216ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
   216b2:	f025 b816 	b.w	466e2 <log_output_flush>
		u32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   216b6:	2d10      	cmp	r5, #16
   216b8:	46a8      	mov	r8, r5
   216ba:	bf28      	it	cs
   216bc:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
   216c0:	4639      	mov	r1, r7
   216c2:	9600      	str	r6, [sp, #0]
   216c4:	4653      	mov	r3, sl
   216c6:	4642      	mov	r2, r8
   216c8:	4620      	mov	r0, r4
   216ca:	f7ff fefd 	bl	214c8 <hexdump_line_print>
		data += part_len;
   216ce:	4447      	add	r7, r8
		length -= part_len;
   216d0:	eba5 0508 	sub.w	r5, r5, r8
   216d4:	e7e3      	b.n	2169e <log_output_hexdump+0x36>
   216d6:	bf00      	nop
   216d8:	0004fad0 	.word	0x0004fad0

000216dc <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
   216dc:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   216de:	2100      	movs	r1, #0
	timestamp_div = 1U;
   216e0:	4a07      	ldr	r2, [pc, #28]	; (21700 <log_output_timestamp_freq_set+0x24>)
{
   216e2:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   216e4:	4c07      	ldr	r4, [pc, #28]	; (21704 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   216e6:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   216e8:	42a0      	cmp	r0, r4
   216ea:	d804      	bhi.n	216f6 <log_output_timestamp_freq_set+0x1a>
   216ec:	b101      	cbz	r1, 216f0 <log_output_timestamp_freq_set+0x14>
   216ee:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   216f0:	4b05      	ldr	r3, [pc, #20]	; (21708 <log_output_timestamp_freq_set+0x2c>)
   216f2:	6018      	str	r0, [r3, #0]
}
   216f4:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   216f6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   216f8:	005b      	lsls	r3, r3, #1
   216fa:	2101      	movs	r1, #1
   216fc:	e7f4      	b.n	216e8 <log_output_timestamp_freq_set+0xc>
   216fe:	bf00      	nop
   21700:	20023960 	.word	0x20023960
   21704:	000f4240 	.word	0x000f4240
   21708:	2002395c 	.word	0x2002395c

0002170c <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   2170c:	4801      	ldr	r0, [pc, #4]	; (21714 <panic+0x8>)
   2170e:	f024 bfe8 	b.w	466e2 <log_output_flush>
   21712:	bf00      	nop
   21714:	0004938c 	.word	0x0004938c

00021718 <log_backend_uart_init>:
{
	log_backend_std_put(&log_output, 0, msg);
}

static void log_backend_uart_init(void)
{
   21718:	b508      	push	{r3, lr}
   2171a:	4806      	ldr	r0, [pc, #24]	; (21734 <log_backend_uart_init+0x1c>)
   2171c:	f01a f96e 	bl	3b9fc <z_impl_device_get_binding>
	struct device *dev;

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);
   21720:	b928      	cbnz	r0, 2172e <log_backend_uart_init+0x16>
   21722:	4b05      	ldr	r3, [pc, #20]	; (21738 <log_backend_uart_init+0x20>)
   21724:	4a05      	ldr	r2, [pc, #20]	; (2173c <log_backend_uart_init+0x24>)
   21726:	212a      	movs	r1, #42	; 0x2a
   21728:	4805      	ldr	r0, [pc, #20]	; (21740 <log_backend_uart_init+0x28>)
   2172a:	f01d ff5f 	bl	3f5ec <__assert_func>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
   2172e:	4b05      	ldr	r3, [pc, #20]	; (21744 <log_backend_uart_init+0x2c>)
   21730:	6058      	str	r0, [r3, #4]

	log_output_ctx_set(&log_output, dev);
}
   21732:	bd08      	pop	{r3, pc}
   21734:	0004c2ae 	.word	0x0004c2ae
   21738:	0004bf83 	.word	0x0004bf83
   2173c:	0004c298 	.word	0x0004c298
   21740:	0004c2b5 	.word	0x0004c2b5
   21744:	2002396c 	.word	0x2002396c

00021748 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, u32_t timestamp,
			 const char *metadata, const u8_t *data, u32_t length)
{
   21748:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2174c:	460e      	mov	r6, r1
   2174e:	4617      	mov	r7, r2
   21750:	4698      	mov	r8, r3
	__asm__ volatile(
   21752:	f04f 0320 	mov.w	r3, #32
   21756:	f3ef 8511 	mrs	r5, BASEPRI
   2175a:	f383 8811 	msr	BASEPRI, r3
   2175e:	f3bf 8f6f 	isb	sy
	 * it may lead to failure. Log output is not re-entrant and irq_lock
	 * does not prevent NMI or ZLI (Zero latency interrupts). If context
	 * is interrupted by NMI it usually means fault scenario and best that
	 * can be done is to flush the output and process new data.
	 */
	log_output_flush(log_output);
   21762:	4c0b      	ldr	r4, [pc, #44]	; (21790 <sync_hexdump+0x48>)
   21764:	4620      	mov	r0, r4
   21766:	f024 ffbc 	bl	466e2 <log_output_flush>
	log_output_hexdump(log_output, src_level, timestamp,
   2176a:	230f      	movs	r3, #15
   2176c:	9302      	str	r3, [sp, #8]
   2176e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21770:	463a      	mov	r2, r7
   21772:	9301      	str	r3, [sp, #4]
   21774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21776:	4631      	mov	r1, r6
   21778:	9300      	str	r3, [sp, #0]
   2177a:	4620      	mov	r0, r4
   2177c:	4643      	mov	r3, r8
   2177e:	f7ff ff73 	bl	21668 <log_output_hexdump>
	__asm__ volatile(
   21782:	f385 8811 	msr	BASEPRI, r5
   21786:	f3bf 8f6f 	isb	sy
	log_backend_std_sync_hexdump(&log_output, 0, src_level,
				     timestamp, metadata, data, length);
}
   2178a:	b004      	add	sp, #16
   2178c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21790:	0004938c 	.word	0x0004938c

00021794 <sync_string>:
{
   21794:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21798:	460e      	mov	r6, r1
   2179a:	4617      	mov	r7, r2
   2179c:	4698      	mov	r8, r3
	__asm__ volatile(
   2179e:	f04f 0320 	mov.w	r3, #32
   217a2:	f3ef 8511 	mrs	r5, BASEPRI
   217a6:	f383 8811 	msr	BASEPRI, r3
   217aa:	f3bf 8f6f 	isb	sy
	log_output_flush(log_output);
   217ae:	4c0a      	ldr	r4, [pc, #40]	; (217d8 <sync_string+0x44>)
   217b0:	4620      	mov	r0, r4
   217b2:	f024 ff96 	bl	466e2 <log_output_flush>
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
   217b6:	230f      	movs	r3, #15
   217b8:	9301      	str	r3, [sp, #4]
   217ba:	9b08      	ldr	r3, [sp, #32]
   217bc:	463a      	mov	r2, r7
   217be:	9300      	str	r3, [sp, #0]
   217c0:	4631      	mov	r1, r6
   217c2:	4643      	mov	r3, r8
   217c4:	4620      	mov	r0, r4
   217c6:	f7ff ff17 	bl	215f8 <log_output_string>
	__asm__ volatile(
   217ca:	f385 8811 	msr	BASEPRI, r5
   217ce:	f3bf 8f6f 	isb	sy
}
   217d2:	b002      	add	sp, #8
   217d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   217d8:	0004938c 	.word	0x0004938c

000217dc <boot_write_trailer_byte>:
	}
}

static int boot_write_trailer_byte(const struct flash_area *fa, u32_t off,
				   u8_t val)
{
   217dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   217de:	4604      	mov	r4, r0
   217e0:	460d      	mov	r5, r1
   217e2:	4616      	mov	r6, r2
	u8_t buf[BOOT_MAX_ALIGN];
	u8_t align;
	u8_t erased_val;
	int rc;

	align = flash_area_align(fa);
   217e4:	f025 f89d 	bl	46922 <flash_area_align>
	assert(align <= BOOT_MAX_ALIGN);
   217e8:	2808      	cmp	r0, #8
	align = flash_area_align(fa);
   217ea:	4603      	mov	r3, r0
	assert(align <= BOOT_MAX_ALIGN);
   217ec:	d906      	bls.n	217fc <boot_write_trailer_byte+0x20>
   217ee:	4b0c      	ldr	r3, [pc, #48]	; (21820 <boot_write_trailer_byte+0x44>)
   217f0:	4a0c      	ldr	r2, [pc, #48]	; (21824 <boot_write_trailer_byte+0x48>)
   217f2:	f44f 719b 	mov.w	r1, #310	; 0x136
   217f6:	480c      	ldr	r0, [pc, #48]	; (21828 <boot_write_trailer_byte+0x4c>)
   217f8:	f01d fef8 	bl	3f5ec <__assert_func>
	erased_val = flash_area_erased_val(fa);
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   217fc:	f04f 30ff 	mov.w	r0, #4294967295
	buf[0] = val;

	rc = flash_area_write(fa, off, buf, align);
   21800:	466a      	mov	r2, sp
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   21802:	e9cd 0000 	strd	r0, r0, [sp]
	rc = flash_area_write(fa, off, buf, align);
   21806:	4629      	mov	r1, r5
   21808:	4620      	mov	r0, r4
	buf[0] = val;
   2180a:	f88d 6000 	strb.w	r6, [sp]
	rc = flash_area_write(fa, off, buf, align);
   2180e:	f025 f839 	bl	46884 <flash_area_write>
	if (rc != 0) {
   21812:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   21814:	bf18      	it	ne
   21816:	f06f 0004 	mvnne.w	r0, #4
   2181a:	b002      	add	sp, #8
   2181c:	bd70      	pop	{r4, r5, r6, pc}
   2181e:	bf00      	nop
   21820:	0004c314 	.word	0x0004c314
   21824:	0004c2fc 	.word	0x0004c2fc
   21828:	0004c32c 	.word	0x0004c32c

0002182c <boot_request_upgrade>:

	return BOOT_SWAP_TYPE_NONE;
}

int boot_request_upgrade(int permanent)
{
   2182c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2182e:	4605      	mov	r5, r0
	rc = flash_area_open(bank_id, &fa);
   21830:	a901      	add	r1, sp, #4
   21832:	2006      	movs	r0, #6
   21834:	f000 f9a8 	bl	21b88 <flash_area_open>
	if (rc) {
   21838:	4604      	mov	r4, r0
   2183a:	bb10      	cbnz	r0, 21882 <boot_request_upgrade+0x56>
	offs = MAGIC_OFFS(fa);
   2183c:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   2183e:	2310      	movs	r3, #16
	offs = MAGIC_OFFS(fa);
   21840:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   21842:	4a12      	ldr	r2, [pc, #72]	; (2188c <boot_request_upgrade+0x60>)
   21844:	3910      	subs	r1, #16
   21846:	f025 f81d 	bl	46884 <flash_area_write>
   2184a:	4604      	mov	r4, r0
	flash_area_close(fa);
   2184c:	9801      	ldr	r0, [sp, #4]
   2184e:	f024 fffb 	bl	46848 <flash_area_close>
	u8_t swap_type;
#endif
	int rc;

	rc = boot_magic_write(FLASH_AREA_IMAGE_SECONDARY);
	if (rc) {
   21852:	b9b4      	cbnz	r4, 21882 <boot_request_upgrade+0x56>
		goto op_end;
	}

	if (permanent) {
   21854:	b1c5      	cbz	r5, 21888 <boot_request_upgrade+0x5c>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   21856:	2006      	movs	r0, #6
   21858:	f024 ff74 	bl	46744 <boot_flag_write.constprop.7>
		rc = boot_image_ok_write(FLASH_AREA_IMAGE_SECONDARY);

#ifdef CONFIG_MCUBOOT_TRAILER_SWAP_TYPE
		if (rc) {
   2185c:	4604      	mov	r4, r0
   2185e:	b980      	cbnz	r0, 21882 <boot_request_upgrade+0x56>
			goto op_end;
		}

		swap_type = BOOT_SWAP_TYPE_PERM;
   21860:	2503      	movs	r5, #3
	rc = flash_area_open(bank_id, &fa);
   21862:	a901      	add	r1, sp, #4
   21864:	2006      	movs	r0, #6
   21866:	f000 f98f 	bl	21b88 <flash_area_open>
	if (rc) {
   2186a:	4604      	mov	r4, r0
   2186c:	b948      	cbnz	r0, 21882 <boot_request_upgrade+0x56>
	offs = SWAP_TYPE_OFFS(fa);
   2186e:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   21870:	462a      	mov	r2, r5
	offs = SWAP_TYPE_OFFS(fa);
   21872:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   21874:	3928      	subs	r1, #40	; 0x28
   21876:	f7ff ffb1 	bl	217dc <boot_write_trailer_byte>
   2187a:	4604      	mov	r4, r0
	flash_area_close(fa);
   2187c:	9801      	ldr	r0, [sp, #4]
   2187e:	f024 ffe3 	bl	46848 <flash_area_close>
#else
	}
#endif
op_end:
	return rc;
}
   21882:	4620      	mov	r0, r4
   21884:	b003      	add	sp, #12
   21886:	bd30      	pop	{r4, r5, pc}
		swap_type = BOOT_SWAP_TYPE_TEST;
   21888:	2502      	movs	r5, #2
   2188a:	e7ea      	b.n	21862 <boot_request_upgrade+0x36>
   2188c:	0004939c 	.word	0x0004939c

00021890 <flash_progressive_erase>:
 * @param[in] off offset from the beginning of the image flash area beginning
 *
 * @return  0 on success, negative errno code on fail.
 */
static int flash_progressive_erase(struct flash_img_context *ctx, off_t off)
{
   21890:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   21894:	4606      	mov	r6, r0
	flash_dev = flash_area_get_device(fap);
   21896:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
{
   2189a:	460c      	mov	r4, r1
	flash_dev = flash_area_get_device(fap);
   2189c:	f025 f848 	bl	46930 <flash_area_get_device>
	if (flash_dev) {
   218a0:	b990      	cbnz	r0, 218c8 <flash_progressive_erase+0x38>
	int rc = -ENODEV;
   218a2:	f06f 0412 	mvn.w	r4, #18
	struct flash_sector sector;
	int rc;

	rc = flash_sector_from_off(ctx->flash_area, off, &sector);
	if (rc) {
		LOG_ERR("Unable to determine flash sector size");
   218a6:	2301      	movs	r3, #1
   218a8:	f04f 0000 	mov.w	r0, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   218ac:	4a24      	ldr	r2, [pc, #144]	; (21940 <flash_progressive_erase+0xb0>)
   218ae:	f363 0002 	bfi	r0, r3, #0, #3
   218b2:	4b24      	ldr	r3, [pc, #144]	; (21944 <flash_progressive_erase+0xb4>)
   218b4:	f36f 00c5 	bfc	r0, #3, #3
   218b8:	1a9b      	subs	r3, r3, r2
   218ba:	08db      	lsrs	r3, r3, #3
   218bc:	f363 108f 	bfi	r0, r3, #6, #10
   218c0:	4921      	ldr	r1, [pc, #132]	; (21948 <flash_progressive_erase+0xb8>)
   218c2:	f024 feee 	bl	466a2 <log_string_sync>
   218c6:	e00c      	b.n	218e2 <flash_progressive_erase+0x52>
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke3(*(u32_t *)&dev, *(u32_t *)&offset, *(u32_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   218c8:	4621      	mov	r1, r4
   218ca:	aa01      	add	r2, sp, #4
   218cc:	f025 fee5 	bl	4769a <z_impl_flash_get_page_info_by_offs>
		if (rc == 0) {
   218d0:	4604      	mov	r4, r0
   218d2:	2800      	cmp	r0, #0
   218d4:	d1e7      	bne.n	218a6 <flash_progressive_erase+0x16>
			sector->fs_size = page.size;
   218d6:	e9dd 7801 	ldrd	r7, r8, [sp, #4]
	} else {
		if (ctx->off_last != sector.fs_off) {
   218da:	f8d6 320c 	ldr.w	r3, [r6, #524]	; 0x20c
   218de:	42bb      	cmp	r3, r7
   218e0:	d103      	bne.n	218ea <flash_progressive_erase+0x5a>
			}
		}
	}

	return rc;
}
   218e2:	4620      	mov	r0, r4
   218e4:	b004      	add	sp, #16
   218e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_INF("Erasing sector at offset 0x%08lx",
   218ea:	2303      	movs	r3, #3
   218ec:	f04f 0000 	mov.w	r0, #0
   218f0:	4d14      	ldr	r5, [pc, #80]	; (21944 <flash_progressive_erase+0xb4>)
   218f2:	f363 0002 	bfi	r0, r3, #0, #3
   218f6:	4b12      	ldr	r3, [pc, #72]	; (21940 <flash_progressive_erase+0xb0>)
   218f8:	f364 00c5 	bfi	r0, r4, #3, #3
   218fc:	1aed      	subs	r5, r5, r3
   218fe:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   21902:	f365 108f 	bfi	r0, r5, #6, #10
   21906:	463a      	mov	r2, r7
   21908:	4910      	ldr	r1, [pc, #64]	; (2194c <flash_progressive_erase+0xbc>)
			ctx->off_last = sector.fs_off;
   2190a:	f8c6 720c 	str.w	r7, [r6, #524]	; 0x20c
			LOG_INF("Erasing sector at offset 0x%08lx",
   2190e:	f024 fec8 	bl	466a2 <log_string_sync>
			rc = flash_area_erase(ctx->flash_area, sector.fs_off,
   21912:	4642      	mov	r2, r8
   21914:	4639      	mov	r1, r7
   21916:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
   2191a:	f024 ffdc 	bl	468d6 <flash_area_erase>
			if (rc) {
   2191e:	4604      	mov	r4, r0
   21920:	2800      	cmp	r0, #0
   21922:	d0de      	beq.n	218e2 <flash_progressive_erase+0x52>
				LOG_ERR("Error %d while erasing sector", rc);
   21924:	2301      	movs	r3, #1
   21926:	f04f 0000 	mov.w	r0, #0
   2192a:	f363 0002 	bfi	r0, r3, #0, #3
   2192e:	f36f 00c5 	bfc	r0, #3, #3
   21932:	f365 108f 	bfi	r0, r5, #6, #10
   21936:	4622      	mov	r2, r4
   21938:	4905      	ldr	r1, [pc, #20]	; (21950 <flash_progressive_erase+0xc0>)
   2193a:	f024 feb2 	bl	466a2 <log_string_sync>
	return rc;
   2193e:	e7d0      	b.n	218e2 <flash_progressive_erase+0x52>
   21940:	00049018 	.word	0x00049018
   21944:	00049080 	.word	0x00049080
   21948:	0004c35a 	.word	0x0004c35a
   2194c:	0004c380 	.word	0x0004c380
   21950:	0004c3a1 	.word	0x0004c3a1

00021954 <flash_sync>:

#endif /* CONFIG_IMG_ERASE_PROGRESSIVELY */

static int flash_sync(struct flash_img_context *ctx)
{
   21954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21958:	4604      	mov	r4, r0
	int rc = 0;

	if (ctx->buf_bytes < CONFIG_IMG_BLOCK_BUF_SIZE) {
   2195a:	f8b0 0208 	ldrh.w	r0, [r0, #520]	; 0x208
{
   2195e:	b085      	sub	sp, #20
	if (ctx->buf_bytes < CONFIG_IMG_BLOCK_BUF_SIZE) {
   21960:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   21964:	46a0      	mov	r8, r4
   21966:	d205      	bcs.n	21974 <flash_sync+0x20>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   21968:	f5c0 7200 	rsb	r2, r0, #512	; 0x200
   2196c:	21ff      	movs	r1, #255	; 0xff
   2196e:	4420      	add	r0, r4
   21970:	f01e f9ec 	bl	3fd4c <memset>
		(void)memset(ctx->buf + ctx->buf_bytes, 0xFF,
			     CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes);
	}

#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	flash_progressive_erase(ctx, ctx->bytes_written +
   21974:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   21978:	4620      	mov	r0, r4
   2197a:	f501 7100 	add.w	r1, r1, #512	; 0x200
   2197e:	f7ff ff87 	bl	21890 <flash_progressive_erase>
				CONFIG_IMG_BLOCK_BUF_SIZE);
#endif

	rc = flash_area_write(ctx->flash_area, ctx->bytes_written, ctx->buf,
   21982:	f44f 7300 	mov.w	r3, #512	; 0x200
   21986:	4622      	mov	r2, r4
   21988:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   2198c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
   21990:	f024 ff78 	bl	46884 <flash_area_write>
			      CONFIG_IMG_BLOCK_BUF_SIZE);
	if (rc) {
   21994:	4605      	mov	r5, r0
   21996:	b1b0      	cbz	r0, 219c6 <flash_sync+0x72>
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   21998:	2301      	movs	r3, #1
   2199a:	f04f 0000 	mov.w	r0, #0
   2199e:	4a33      	ldr	r2, [pc, #204]	; (21a6c <flash_sync+0x118>)
   219a0:	f363 0002 	bfi	r0, r3, #0, #3
   219a4:	4b32      	ldr	r3, [pc, #200]	; (21a70 <flash_sync+0x11c>)
   219a6:	f36f 00c5 	bfc	r0, #3, #3
   219aa:	1a9b      	subs	r3, r3, r2
   219ac:	08db      	lsrs	r3, r3, #3
   219ae:	f363 108f 	bfi	r0, r3, #6, #10
   219b2:	462a      	mov	r2, r5
   219b4:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
   219b8:	492e      	ldr	r1, [pc, #184]	; (21a74 <flash_sync+0x120>)
   219ba:	f024 fe72 	bl	466a2 <log_string_sync>

	ctx->bytes_written += ctx->buf_bytes;
	ctx->buf_bytes = 0U;

	return rc;
}
   219be:	4628      	mov	r0, r5
   219c0:	b005      	add	sp, #20
   219c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!flash_verify(ctx->flash_area, ctx->bytes_written, ctx->buf,
   219c6:	f44f 7a00 	mov.w	sl, #512	; 0x200
   219ca:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
   219ce:	f8d4 7204 	ldr.w	r7, [r4, #516]	; 0x204
		size = (len >= sizeof(temp)) ? sizeof(temp) : len;
   219d2:	4656      	mov	r6, sl
   219d4:	2e04      	cmp	r6, #4
   219d6:	bf28      	it	cs
   219d8:	2604      	movcs	r6, #4
		rc = flash_area_read(fa, offset, &temp, size);
   219da:	aa03      	add	r2, sp, #12
   219dc:	4633      	mov	r3, r6
   219de:	4639      	mov	r1, r7
   219e0:	4658      	mov	r0, fp
   219e2:	f024 ff32 	bl	4684a <flash_area_read>
		if (rc) {
   219e6:	4681      	mov	r9, r0
   219e8:	b1a0      	cbz	r0, 21a14 <flash_sync+0xc0>
			LOG_ERR("flash_read error %d offset=0x%08lx",
   219ea:	2301      	movs	r3, #1
   219ec:	f04f 0000 	mov.w	r0, #0
   219f0:	4a1e      	ldr	r2, [pc, #120]	; (21a6c <flash_sync+0x118>)
   219f2:	f363 0002 	bfi	r0, r3, #0, #3
   219f6:	4b1e      	ldr	r3, [pc, #120]	; (21a70 <flash_sync+0x11c>)
   219f8:	f36f 00c5 	bfc	r0, #3, #3
   219fc:	1a9b      	subs	r3, r3, r2
   219fe:	08db      	lsrs	r3, r3, #3
   21a00:	f363 108f 	bfi	r0, r3, #6, #10
   21a04:	464a      	mov	r2, r9
   21a06:	463b      	mov	r3, r7
   21a08:	491b      	ldr	r1, [pc, #108]	; (21a78 <flash_sync+0x124>)
   21a0a:	f024 fe4a 	bl	466a2 <log_string_sync>
		return -EIO;
   21a0e:	f06f 0504 	mvn.w	r5, #4
   21a12:	e7d4      	b.n	219be <flash_sync+0x6a>
		if (memcmp(data, &temp, size)) {
   21a14:	4632      	mov	r2, r6
   21a16:	a903      	add	r1, sp, #12
   21a18:	4640      	mov	r0, r8
   21a1a:	f01e f955 	bl	3fcc8 <memcmp>
   21a1e:	4605      	mov	r5, r0
   21a20:	b1a8      	cbz	r0, 21a4e <flash_sync+0xfa>
			LOG_ERR("offset=0x%08lx VERIFY FAIL. "
   21a22:	2301      	movs	r3, #1
   21a24:	f04f 0000 	mov.w	r0, #0
   21a28:	4a10      	ldr	r2, [pc, #64]	; (21a6c <flash_sync+0x118>)
   21a2a:	f363 0002 	bfi	r0, r3, #0, #3
   21a2e:	4b10      	ldr	r3, [pc, #64]	; (21a70 <flash_sync+0x11c>)
   21a30:	f369 00c5 	bfi	r0, r9, #3, #3
   21a34:	1a9b      	subs	r3, r3, r2
   21a36:	08db      	lsrs	r3, r3, #3
   21a38:	f363 108f 	bfi	r0, r3, #6, #10
   21a3c:	f898 3000 	ldrb.w	r3, [r8]
   21a40:	463a      	mov	r2, r7
   21a42:	9300      	str	r3, [sp, #0]
   21a44:	490d      	ldr	r1, [pc, #52]	; (21a7c <flash_sync+0x128>)
   21a46:	9b03      	ldr	r3, [sp, #12]
   21a48:	f024 fe2b 	bl	466a2 <log_string_sync>
   21a4c:	e7df      	b.n	21a0e <flash_sync+0xba>
	while (len) {
   21a4e:	ebba 0a06 	subs.w	sl, sl, r6
		offset += size;
   21a52:	4437      	add	r7, r6
		data += size;
   21a54:	44b0      	add	r8, r6
	while (len) {
   21a56:	d1bc      	bne.n	219d2 <flash_sync+0x7e>
	ctx->bytes_written += ctx->buf_bytes;
   21a58:	f8b4 2208 	ldrh.w	r2, [r4, #520]	; 0x208
   21a5c:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
	ctx->buf_bytes = 0U;
   21a60:	f8a4 0208 	strh.w	r0, [r4, #520]	; 0x208
	ctx->bytes_written += ctx->buf_bytes;
   21a64:	4413      	add	r3, r2
   21a66:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
	return rc;
   21a6a:	e7a8      	b.n	219be <flash_sync+0x6a>
   21a6c:	00049018 	.word	0x00049018
   21a70:	00049080 	.word	0x00049080
   21a74:	0004c3bf 	.word	0x0004c3bf
   21a78:	0004c3e3 	.word	0x0004c3e3
   21a7c:	0004c406 	.word	0x0004c406

00021a80 <socket_offload_register>:

/* Only one provider may register socket operations upon boot. */
const struct socket_offload *socket_ops;

void socket_offload_register(const struct socket_offload *ops)
{
   21a80:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   21a82:	4605      	mov	r5, r0
   21a84:	b948      	cbnz	r0, 21a9a <socket_offload_register+0x1a>
   21a86:	490c      	ldr	r1, [pc, #48]	; (21ab8 <socket_offload_register+0x38>)
   21a88:	480c      	ldr	r0, [pc, #48]	; (21abc <socket_offload_register+0x3c>)
   21a8a:	2311      	movs	r3, #17
   21a8c:	4a0c      	ldr	r2, [pc, #48]	; (21ac0 <socket_offload_register+0x40>)
   21a8e:	f024 fde5 	bl	4665c <printk>
   21a92:	2111      	movs	r1, #17
   21a94:	480a      	ldr	r0, [pc, #40]	; (21ac0 <socket_offload_register+0x40>)
   21a96:	f024 fdee 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops == NULL);
   21a9a:	4c0a      	ldr	r4, [pc, #40]	; (21ac4 <socket_offload_register+0x44>)
   21a9c:	6822      	ldr	r2, [r4, #0]
   21a9e:	b14a      	cbz	r2, 21ab4 <socket_offload_register+0x34>
   21aa0:	4909      	ldr	r1, [pc, #36]	; (21ac8 <socket_offload_register+0x48>)
   21aa2:	4806      	ldr	r0, [pc, #24]	; (21abc <socket_offload_register+0x3c>)
   21aa4:	2312      	movs	r3, #18
   21aa6:	4a06      	ldr	r2, [pc, #24]	; (21ac0 <socket_offload_register+0x40>)
   21aa8:	f024 fdd8 	bl	4665c <printk>
   21aac:	2112      	movs	r1, #18
   21aae:	4804      	ldr	r0, [pc, #16]	; (21ac0 <socket_offload_register+0x40>)
   21ab0:	f024 fde1 	bl	46676 <assert_post_action>

	socket_ops = ops;
   21ab4:	6025      	str	r5, [r4, #0]
}
   21ab6:	bd38      	pop	{r3, r4, r5, pc}
   21ab8:	0004b6fa 	.word	0x0004b6fa
   21abc:	0004b5bf 	.word	0x0004b5bf
   21ac0:	0004c454 	.word	0x0004c454
   21ac4:	20023978 	.word	0x20023978
   21ac8:	0004c490 	.word	0x0004c490

00021acc <sys_rand32_get>:
#include <drivers/entropy.h>

static struct device *entropy_driver;

u32_t sys_rand32_get(void)
{
   21acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *dev = entropy_driver;
   21ace:	4d1a      	ldr	r5, [pc, #104]	; (21b38 <sys_rand32_get+0x6c>)
   21ad0:	682c      	ldr	r4, [r5, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   21ad2:	b99c      	cbnz	r4, 21afc <sys_rand32_get+0x30>
   21ad4:	4819      	ldr	r0, [pc, #100]	; (21b3c <sys_rand32_get+0x70>)
   21ad6:	f019 ff91 	bl	3b9fc <z_impl_device_get_binding>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
		__ASSERT((dev != NULL),
   21ada:	4604      	mov	r4, r0
   21adc:	b968      	cbnz	r0, 21afa <sys_rand32_get+0x2e>
   21ade:	231b      	movs	r3, #27
   21ae0:	4a17      	ldr	r2, [pc, #92]	; (21b40 <sys_rand32_get+0x74>)
   21ae2:	4918      	ldr	r1, [pc, #96]	; (21b44 <sys_rand32_get+0x78>)
   21ae4:	4818      	ldr	r0, [pc, #96]	; (21b48 <sys_rand32_get+0x7c>)
   21ae6:	f024 fdb9 	bl	4665c <printk>
   21aea:	4914      	ldr	r1, [pc, #80]	; (21b3c <sys_rand32_get+0x70>)
   21aec:	4817      	ldr	r0, [pc, #92]	; (21b4c <sys_rand32_get+0x80>)
   21aee:	f024 fdb5 	bl	4665c <printk>
   21af2:	211b      	movs	r1, #27
   21af4:	4812      	ldr	r0, [pc, #72]	; (21b40 <sys_rand32_get+0x74>)
   21af6:	f024 fdbe 	bl	46676 <assert_post_action>
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
		entropy_driver = dev;
   21afa:	602c      	str	r4, [r5, #0]

static inline int z_impl_entropy_get_entropy(struct device *dev,
					    u8_t *buffer,
					    u16_t length)
{
	const struct entropy_driver_api *api =
   21afc:	6865      	ldr	r5, [r4, #4]
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
   21afe:	682b      	ldr	r3, [r5, #0]
   21b00:	b963      	cbnz	r3, 21b1c <sys_rand32_get+0x50>
   21b02:	4913      	ldr	r1, [pc, #76]	; (21b50 <sys_rand32_get+0x84>)
   21b04:	234c      	movs	r3, #76	; 0x4c
   21b06:	4a13      	ldr	r2, [pc, #76]	; (21b54 <sys_rand32_get+0x88>)
   21b08:	480f      	ldr	r0, [pc, #60]	; (21b48 <sys_rand32_get+0x7c>)
   21b0a:	f024 fda7 	bl	4665c <printk>
   21b0e:	4812      	ldr	r0, [pc, #72]	; (21b58 <sys_rand32_get+0x8c>)
   21b10:	f024 fda4 	bl	4665c <printk>
   21b14:	214c      	movs	r1, #76	; 0x4c
   21b16:	480f      	ldr	r0, [pc, #60]	; (21b54 <sys_rand32_get+0x88>)
   21b18:	f024 fdad 	bl	46676 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   21b1c:	2204      	movs	r2, #4
   21b1e:	682b      	ldr	r3, [r5, #0]
   21b20:	eb0d 0102 	add.w	r1, sp, r2
   21b24:	4620      	mov	r0, r4
   21b26:	4798      	blx	r3
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   21b28:	2800      	cmp	r0, #0
   21b2a:	da02      	bge.n	21b32 <sys_rand32_get+0x66>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t z_arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   21b2c:	f000 faa6 	bl	2207c <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   21b30:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   21b32:	9801      	ldr	r0, [sp, #4]
   21b34:	b003      	add	sp, #12
   21b36:	bd30      	pop	{r4, r5, pc}
   21b38:	2002397c 	.word	0x2002397c
   21b3c:	0004c4aa 	.word	0x0004c4aa
   21b40:	0004c4b4 	.word	0x0004c4b4
   21b44:	0004c4ee 	.word	0x0004c4ee
   21b48:	0004b5bf 	.word	0x0004b5bf
   21b4c:	0004c503 	.word	0x0004c503
   21b50:	0004c589 	.word	0x0004c589
   21b54:	0004c55b 	.word	0x0004c55b
   21b58:	0004c5a9 	.word	0x0004c5a9

00021b5c <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   21b5c:	2200      	movs	r2, #0
   21b5e:	4b08      	ldr	r3, [pc, #32]	; (21b80 <get_flash_area_from_id+0x24>)
{
   21b60:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   21b62:	681c      	ldr	r4, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   21b64:	4b07      	ldr	r3, [pc, #28]	; (21b84 <get_flash_area_from_id+0x28>)
   21b66:	6819      	ldr	r1, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   21b68:	4294      	cmp	r4, r2
   21b6a:	dc02      	bgt.n	21b72 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   21b6c:	2300      	movs	r3, #0
}
   21b6e:	4618      	mov	r0, r3
   21b70:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   21b72:	460b      	mov	r3, r1
   21b74:	781d      	ldrb	r5, [r3, #0]
   21b76:	3110      	adds	r1, #16
   21b78:	4285      	cmp	r5, r0
   21b7a:	d0f8      	beq.n	21b6e <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
   21b7c:	3201      	adds	r2, #1
   21b7e:	e7f3      	b.n	21b68 <get_flash_area_from_id+0xc>
   21b80:	0004943c 	.word	0x0004943c
   21b84:	20031b98 	.word	0x20031b98

00021b88 <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   21b88:	4b08      	ldr	r3, [pc, #32]	; (21bac <flash_area_open+0x24>)
{
   21b8a:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   21b8c:	681b      	ldr	r3, [r3, #0]
{
   21b8e:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   21b90:	b12b      	cbz	r3, 21b9e <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   21b92:	f7ff ffe3 	bl	21b5c <get_flash_area_from_id>
	if (area == NULL) {
   21b96:	b128      	cbz	r0, 21ba4 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   21b98:	6020      	str	r0, [r4, #0]
	return 0;
   21b9a:	2000      	movs	r0, #0
}
   21b9c:	bd10      	pop	{r4, pc}
		return -EACCES;
   21b9e:	f06f 000c 	mvn.w	r0, #12
   21ba2:	e7fb      	b.n	21b9c <flash_area_open+0x14>
		return -ENOENT;
   21ba4:	f06f 0001 	mvn.w	r0, #1
   21ba8:	e7f8      	b.n	21b9c <flash_area_open+0x14>
   21baa:	bf00      	nop
   21bac:	20031b98 	.word	0x20031b98

00021bb0 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   21bb0:	b508      	push	{r3, lr}
   21bb2:	4604      	mov	r4, r0
	__asm__ volatile(
   21bb4:	f04f 0220 	mov.w	r2, #32
   21bb8:	f3ef 8311 	mrs	r3, BASEPRI
   21bbc:	f382 8811 	msr	BASEPRI, r2
   21bc0:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   21bc4:	f024 ff24 	bl	46a10 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   21bc8:	4620      	mov	r0, r4
   21bca:	f001 f93d 	bl	22e48 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   21bce:	4803      	ldr	r0, [pc, #12]	; (21bdc <sys_reboot+0x2c>)
   21bd0:	f024 fd44 	bl	4665c <printk>
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	z_arch_cpu_idle();
   21bd4:	f000 fc64 	bl	224a0 <z_arch_cpu_idle>
   21bd8:	e7fc      	b.n	21bd4 <sys_reboot+0x24>
   21bda:	bf00      	nop
   21bdc:	0004c5e8 	.word	0x0004c5e8

00021be0 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   21be0:	4b0a      	ldr	r3, [pc, #40]	; (21c0c <console_out+0x2c>)
{
   21be2:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   21be4:	b2c5      	uxtb	r5, r0
{
   21be6:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   21be8:	681b      	ldr	r3, [r3, #0]
   21bea:	4628      	mov	r0, r5
   21bec:	4798      	blx	r3

	if (handled_by_debug_server) {
   21bee:	2801      	cmp	r0, #1
   21bf0:	d00a      	beq.n	21c08 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   21bf2:	2c0a      	cmp	r4, #10
   21bf4:	4e06      	ldr	r6, [pc, #24]	; (21c10 <console_out+0x30>)
   21bf6:	d103      	bne.n	21c00 <console_out+0x20>
   21bf8:	6830      	ldr	r0, [r6, #0]
		z_arch_syscall_invoke2(*(u32_t *)&dev, *(u32_t *)&out_char, K_SYSCALL_UART_POLL_OUT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
   21bfa:	210d      	movs	r1, #13
   21bfc:	f024 fe9b 	bl	46936 <z_impl_uart_poll_out>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   21c00:	6830      	ldr	r0, [r6, #0]
   21c02:	4629      	mov	r1, r5
   21c04:	f024 fe97 	bl	46936 <z_impl_uart_poll_out>

	return c;
}
   21c08:	4620      	mov	r0, r4
   21c0a:	bd70      	pop	{r4, r5, r6, pc}
   21c0c:	20031b9c 	.word	0x20031b9c
   21c10:	20023980 	.word	0x20023980

00021c14 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
   21c14:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
   21c16:	4c04      	ldr	r4, [pc, #16]	; (21c28 <uart_console_hook_install+0x14>)
   21c18:	4620      	mov	r0, r4
   21c1a:	f001 fbcf 	bl	233bc <__stdout_hook_install>
	__printk_hook_install(console_out);
   21c1e:	4620      	mov	r0, r4
}
   21c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
   21c24:	f7ff baa0 	b.w	21168 <__printk_hook_install>
   21c28:	00021be1 	.word	0x00021be1

00021c2c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
   21c2c:	b508      	push	{r3, lr}
   21c2e:	4804      	ldr	r0, [pc, #16]	; (21c40 <uart_console_init+0x14>)
   21c30:	f019 fee4 	bl	3b9fc <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   21c34:	4b03      	ldr	r3, [pc, #12]	; (21c44 <uart_console_init+0x18>)
   21c36:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
   21c38:	f7ff ffec 	bl	21c14 <uart_console_hook_install>

	return 0;
}
   21c3c:	2000      	movs	r0, #0
   21c3e:	bd08      	pop	{r3, pc}
   21c40:	0004c2ae 	.word	0x0004c2ae
   21c44:	20023980 	.word	0x20023980

00021c48 <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
   21c48:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   21c4a:	2200      	movs	r2, #0
{
   21c4c:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   21c4e:	2101      	movs	r1, #1
   21c50:	2005      	movs	r0, #5
   21c52:	f000 fc8b 	bl	2256c <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   21c56:	2005      	movs	r0, #5
   21c58:	f000 fc78 	bl	2254c <z_arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
   21c5c:	2202      	movs	r2, #2
   21c5e:	4b05      	ldr	r3, [pc, #20]	; (21c74 <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   21c60:	2000      	movs	r0, #0
   21c62:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
   21c66:	2203      	movs	r2, #3
   21c68:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			NRF_POWER_INT_USBREMOVED_MASK |
			NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   21c6c:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
   21c6e:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
   21c72:	bd10      	pop	{r4, pc}
   21c74:	40005000 	.word	0x40005000

00021c78 <clock_async_start>:
{
   21c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   21c7a:	6803      	ldr	r3, [r0, #0]
{
   21c7c:	4606      	mov	r6, r0
	const struct nrf_clock_control_config *config =
   21c7e:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
   21c80:	6885      	ldr	r5, [r0, #8]
	__ASSERT_NO_MSG((data == NULL) ||
   21c82:	4614      	mov	r4, r2
   21c84:	b15a      	cbz	r2, 21c9e <clock_async_start+0x26>
   21c86:	6853      	ldr	r3, [r2, #4]
   21c88:	b94b      	cbnz	r3, 21c9e <clock_async_start+0x26>
   21c8a:	4927      	ldr	r1, [pc, #156]	; (21d28 <clock_async_start+0xb0>)
   21c8c:	4827      	ldr	r0, [pc, #156]	; (21d2c <clock_async_start+0xb4>)
   21c8e:	2392      	movs	r3, #146	; 0x92
   21c90:	4a27      	ldr	r2, [pc, #156]	; (21d30 <clock_async_start+0xb8>)
   21c92:	f024 fce3 	bl	4665c <printk>
   21c96:	2192      	movs	r1, #146	; 0x92
   21c98:	4825      	ldr	r0, [pc, #148]	; (21d30 <clock_async_start+0xb8>)
   21c9a:	f024 fcec 	bl	46676 <assert_post_action>
   21c9e:	f04f 0320 	mov.w	r3, #32
   21ca2:	f3ef 8211 	mrs	r2, BASEPRI
   21ca6:	f383 8811 	msr	BASEPRI, r3
   21caa:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   21cae:	7a2b      	ldrb	r3, [r5, #8]
   21cb0:	3301      	adds	r3, #1
   21cb2:	b25b      	sxtb	r3, r3
   21cb4:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
   21cb6:	f382 8811 	msr	BASEPRI, r2
   21cba:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
   21cbe:	7a6a      	ldrb	r2, [r5, #9]
   21cc0:	b13a      	cbz	r2, 21cd2 <clock_async_start+0x5a>
		if (data) {
   21cc2:	b90c      	cbnz	r4, 21cc8 <clock_async_start+0x50>
	return 0;
   21cc4:	2000      	movs	r0, #0
}
   21cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
   21cc8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   21ccc:	4630      	mov	r0, r6
   21cce:	4798      	blx	r3
   21cd0:	e7f8      	b.n	21cc4 <clock_async_start+0x4c>
		if (ref == 1) {
   21cd2:	2b01      	cmp	r3, #1
   21cd4:	d108      	bne.n	21ce8 <clock_async_start+0x70>
			do_start =  (config->start_handler) ?
   21cd6:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
   21cd8:	b943      	cbnz	r3, 21cec <clock_async_start+0x74>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   21cda:	2201      	movs	r2, #1
   21cdc:	7abb      	ldrb	r3, [r7, #10]
   21cde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21ce2:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   21ce6:	601a      	str	r2, [r3, #0]
		if (data) {
   21ce8:	b954      	cbnz	r4, 21d00 <clock_async_start+0x88>
   21cea:	e7eb      	b.n	21cc4 <clock_async_start+0x4c>
					config->start_handler(dev) : true;
   21cec:	4630      	mov	r0, r6
   21cee:	4798      	blx	r3
   21cf0:	2800      	cmp	r0, #0
   21cf2:	d1f2      	bne.n	21cda <clock_async_start+0x62>
			} else if (data) {
   21cf4:	2c00      	cmp	r4, #0
   21cf6:	d0e5      	beq.n	21cc4 <clock_async_start+0x4c>
				data->cb(dev, data->user_data);
   21cf8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   21cfc:	4630      	mov	r0, r6
   21cfe:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
   21d00:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
   21d02:	429c      	cmp	r4, r3
   21d04:	d00d      	beq.n	21d22 <clock_async_start+0xaa>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   21d06:	b113      	cbz	r3, 21d0e <clock_async_start+0x96>
	return node->next;
   21d08:	681b      	ldr	r3, [r3, #0]
	} while (item);
   21d0a:	2b00      	cmp	r3, #0
   21d0c:	d1f9      	bne.n	21d02 <clock_async_start+0x8a>
	parent->next = child;
   21d0e:	2000      	movs	r0, #0
   21d10:	6020      	str	r0, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   21d12:	686b      	ldr	r3, [r5, #4]
   21d14:	b913      	cbnz	r3, 21d1c <clock_async_start+0xa4>
	list->head = node;
   21d16:	e9c5 4400 	strd	r4, r4, [r5]
   21d1a:	e7d3      	b.n	21cc4 <clock_async_start+0x4c>
	parent->next = child;
   21d1c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21d1e:	606c      	str	r4, [r5, #4]
   21d20:	e7d1      	b.n	21cc6 <clock_async_start+0x4e>
				return -EALREADY;
   21d22:	f06f 0077 	mvn.w	r0, #119	; 0x77
   21d26:	e7ce      	b.n	21cc6 <clock_async_start+0x4e>
   21d28:	0004c64d 	.word	0x0004c64d
   21d2c:	0004b5bf 	.word	0x0004b5bf
   21d30:	0004c611 	.word	0x0004c611

00021d34 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   21d34:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   21d36:	4b10      	ldr	r3, [pc, #64]	; (21d78 <nrf_power_clock_isr+0x44>)
   21d38:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
   21d3a:	b162      	cbz	r2, 21d56 <nrf_power_clock_isr+0x22>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
   21d3c:	4a0f      	ldr	r2, [pc, #60]	; (21d7c <nrf_power_clock_isr+0x48>)
   21d3e:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
   21d42:	07d1      	lsls	r1, r2, #31
   21d44:	d507      	bpl.n	21d56 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   21d46:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
   21d48:	480d      	ldr	r0, [pc, #52]	; (21d80 <nrf_power_clock_isr+0x4c>)
   21d4a:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   21d4c:	6883      	ldr	r3, [r0, #8]
   21d4e:	7a5b      	ldrb	r3, [r3, #9]
   21d50:	b90b      	cbnz	r3, 21d56 <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
   21d52:	f024 fe3f 	bl	469d4 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   21d56:	4b0b      	ldr	r3, [pc, #44]	; (21d84 <nrf_power_clock_isr+0x50>)
   21d58:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
   21d5a:	b15a      	cbz	r2, 21d74 <nrf_power_clock_isr+0x40>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
   21d5c:	4a07      	ldr	r2, [pc, #28]	; (21d7c <nrf_power_clock_isr+0x48>)
   21d5e:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
   21d62:	0792      	lsls	r2, r2, #30
   21d64:	d506      	bpl.n	21d74 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   21d66:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
   21d68:	4807      	ldr	r0, [pc, #28]	; (21d88 <nrf_power_clock_isr+0x54>)
   21d6a:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   21d6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
   21d70:	f024 be30 	b.w	469d4 <clkstarted_handle>
}
   21d74:	bd08      	pop	{r3, pc}
   21d76:	bf00      	nop
   21d78:	40005100 	.word	0x40005100
   21d7c:	40005000 	.word	0x40005000
   21d80:	200321e8 	.word	0x200321e8
   21d84:	40005104 	.word	0x40005104
   21d88:	200321f4 	.word	0x200321f4

00021d8c <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   21d8c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   21d8e:	4c06      	ldr	r4, [pc, #24]	; (21da8 <z_clock_isr+0x1c>)
   21d90:	4906      	ldr	r1, [pc, #24]	; (21dac <z_clock_isr+0x20>)
   21d92:	4622      	mov	r2, r4
   21d94:	4806      	ldr	r0, [pc, #24]	; (21db0 <z_clock_isr+0x24>)
   21d96:	2317      	movs	r3, #23
   21d98:	f024 fc60 	bl	4665c <printk>
   21d9c:	4620      	mov	r0, r4
}
   21d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   21da2:	2117      	movs	r1, #23
   21da4:	f024 bc67 	b.w	46676 <assert_post_action>
   21da8:	0004c6c7 	.word	0x0004c6c7
   21dac:	000505de 	.word	0x000505de
   21db0:	0004b5bf 	.word	0x0004b5bf

00021db4 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
   21db4:	2200      	movs	r2, #0
{
   21db6:	b538      	push	{r3, r4, r5, lr}
	RTC->EVENTS_COMPARE[0] = 0;
   21db8:	4b21      	ldr	r3, [pc, #132]	; (21e40 <rtc1_nrf_isr+0x8c>)
   21dba:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
   21dbe:	f04f 0320 	mov.w	r3, #32
   21dc2:	f3ef 8511 	mrs	r5, BASEPRI
   21dc6:	f383 8811 	msr	BASEPRI, r3
   21dca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21dce:	481d      	ldr	r0, [pc, #116]	; (21e44 <rtc1_nrf_isr+0x90>)
   21dd0:	f01b ffd6 	bl	3dd80 <z_spin_lock_valid>
   21dd4:	b960      	cbnz	r0, 21df0 <rtc1_nrf_isr+0x3c>
   21dd6:	491c      	ldr	r1, [pc, #112]	; (21e48 <rtc1_nrf_isr+0x94>)
   21dd8:	235f      	movs	r3, #95	; 0x5f
   21dda:	4a1c      	ldr	r2, [pc, #112]	; (21e4c <rtc1_nrf_isr+0x98>)
   21ddc:	481c      	ldr	r0, [pc, #112]	; (21e50 <rtc1_nrf_isr+0x9c>)
   21dde:	f024 fc3d 	bl	4665c <printk>
   21de2:	481c      	ldr	r0, [pc, #112]	; (21e54 <rtc1_nrf_isr+0xa0>)
   21de4:	f024 fc3a 	bl	4665c <printk>
   21de8:	215f      	movs	r1, #95	; 0x5f
   21dea:	4818      	ldr	r0, [pc, #96]	; (21e4c <rtc1_nrf_isr+0x98>)
   21dec:	f024 fc43 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   21df0:	4814      	ldr	r0, [pc, #80]	; (21e44 <rtc1_nrf_isr+0x90>)
   21df2:	f01b ffe3 	bl	3ddbc <z_spin_lock_set_owner>
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
   21df6:	4b12      	ldr	r3, [pc, #72]	; (21e40 <rtc1_nrf_isr+0x8c>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   21df8:	4a17      	ldr	r2, [pc, #92]	; (21e58 <rtc1_nrf_isr+0xa4>)
   21dfa:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
   21dfe:	6813      	ldr	r3, [r2, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21e00:	4810      	ldr	r0, [pc, #64]	; (21e44 <rtc1_nrf_isr+0x90>)
	return (a - b) & COUNTER_MAX;
   21e02:	1ae4      	subs	r4, r4, r3
   21e04:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   21e08:	4423      	add	r3, r4
   21e0a:	6013      	str	r3, [r2, #0]
   21e0c:	f01b ffc6 	bl	3dd9c <z_spin_unlock_valid>
   21e10:	b960      	cbnz	r0, 21e2c <rtc1_nrf_isr+0x78>
   21e12:	4912      	ldr	r1, [pc, #72]	; (21e5c <rtc1_nrf_isr+0xa8>)
   21e14:	2372      	movs	r3, #114	; 0x72
   21e16:	4a0d      	ldr	r2, [pc, #52]	; (21e4c <rtc1_nrf_isr+0x98>)
   21e18:	480d      	ldr	r0, [pc, #52]	; (21e50 <rtc1_nrf_isr+0x9c>)
   21e1a:	f024 fc1f 	bl	4665c <printk>
   21e1e:	4810      	ldr	r0, [pc, #64]	; (21e60 <rtc1_nrf_isr+0xac>)
   21e20:	f024 fc1c 	bl	4665c <printk>
   21e24:	2172      	movs	r1, #114	; 0x72
   21e26:	4809      	ldr	r0, [pc, #36]	; (21e4c <rtc1_nrf_isr+0x98>)
   21e28:	f024 fc25 	bl	46676 <assert_post_action>
	__asm__ volatile(
   21e2c:	f385 8811 	msr	BASEPRI, r5
   21e30:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   21e34:	4620      	mov	r0, r4
}
   21e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   21e3a:	f01c bc99 	b.w	3e770 <z_clock_announce>
   21e3e:	bf00      	nop
   21e40:	40015000 	.word	0x40015000
   21e44:	200239a0 	.word	0x200239a0
   21e48:	0004bff2 	.word	0x0004bff2
   21e4c:	0004bfcb 	.word	0x0004bfcb
   21e50:	0004b5bf 	.word	0x0004b5bf
   21e54:	0004c007 	.word	0x0004c007
   21e58:	2002399c 	.word	0x2002399c
   21e5c:	0004c01c 	.word	0x0004c01c
   21e60:	0004c033 	.word	0x0004c033

00021e64 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
   21e64:	b570      	push	{r4, r5, r6, lr}
   21e66:	4818      	ldr	r0, [pc, #96]	; (21ec8 <z_clock_driver_init+0x64>)
   21e68:	f019 fdc8 	bl	3b9fc <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
   21e6c:	b348      	cbz	r0, 21ec2 <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   21e6e:	6843      	ldr	r3, [r0, #4]
   21e70:	2100      	movs	r1, #0
   21e72:	681b      	ldr	r3, [r3, #0]
   21e74:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
   21e76:	2601      	movs	r6, #1
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   21e78:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   21e7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21e7e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   21e82:	4d12      	ldr	r5, [pc, #72]	; (21ecc <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   21e84:	4631      	mov	r1, r6
   21e86:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   21e8a:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
   21e8e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21e92:	4b0f      	ldr	r3, [pc, #60]	; (21ed0 <z_clock_driver_init+0x6c>)
   21e94:	2015      	movs	r0, #21
   21e96:	601c      	str	r4, [r3, #0]
   21e98:	4b0e      	ldr	r3, [pc, #56]	; (21ed4 <z_clock_driver_init+0x70>)
   21e9a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   21e9e:	4622      	mov	r2, r4
   21ea0:	f000 fb64 	bl	2256c <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   21ea4:	2015      	movs	r0, #21
   21ea6:	f000 fb51 	bl	2254c <z_arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   21eaa:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   21eac:	4b0a      	ldr	r3, [pc, #40]	; (21ed8 <z_clock_driver_init+0x74>)
   21eae:	601e      	str	r6, [r3, #0]
   21eb0:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
   21eb2:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
   21eb6:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   21eb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   21ebc:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
   21ec0:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   21ec2:	f04f 30ff 	mov.w	r0, #4294967295
   21ec6:	e7fb      	b.n	21ec0 <z_clock_driver_init+0x5c>
   21ec8:	0004c69b 	.word	0x0004c69b
   21ecc:	40015000 	.word	0x40015000
   21ed0:	40015140 	.word	0x40015140
   21ed4:	e000e100 	.word	0xe000e100
   21ed8:	40015008 	.word	0x40015008

00021edc <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   21edc:	b538      	push	{r3, r4, r5, lr}
   21ede:	4b34      	ldr	r3, [pc, #208]	; (21fb0 <z_clock_set_timeout+0xd4>)
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
   21ee0:	f1b0 3fff 	cmp.w	r0, #4294967295
   21ee4:	bf08      	it	eq
   21ee6:	4618      	moveq	r0, r3
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   21ee8:	1e44      	subs	r4, r0, #1
   21eea:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   21eee:	429c      	cmp	r4, r3
   21ef0:	bfa8      	it	ge
   21ef2:	461c      	movge	r4, r3
	__asm__ volatile(
   21ef4:	f04f 0320 	mov.w	r3, #32
   21ef8:	f3ef 8511 	mrs	r5, BASEPRI
   21efc:	f383 8811 	msr	BASEPRI, r3
   21f00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21f04:	482b      	ldr	r0, [pc, #172]	; (21fb4 <z_clock_set_timeout+0xd8>)
   21f06:	f01b ff3b 	bl	3dd80 <z_spin_lock_valid>
   21f0a:	b960      	cbnz	r0, 21f26 <z_clock_set_timeout+0x4a>
   21f0c:	492a      	ldr	r1, [pc, #168]	; (21fb8 <z_clock_set_timeout+0xdc>)
   21f0e:	235f      	movs	r3, #95	; 0x5f
   21f10:	4a2a      	ldr	r2, [pc, #168]	; (21fbc <z_clock_set_timeout+0xe0>)
   21f12:	482b      	ldr	r0, [pc, #172]	; (21fc0 <z_clock_set_timeout+0xe4>)
   21f14:	f024 fba2 	bl	4665c <printk>
   21f18:	482a      	ldr	r0, [pc, #168]	; (21fc4 <z_clock_set_timeout+0xe8>)
   21f1a:	f024 fb9f 	bl	4665c <printk>
   21f1e:	215f      	movs	r1, #95	; 0x5f
   21f20:	4826      	ldr	r0, [pc, #152]	; (21fbc <z_clock_set_timeout+0xe0>)
   21f22:	f024 fba8 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   21f26:	4823      	ldr	r0, [pc, #140]	; (21fb4 <z_clock_set_timeout+0xd8>)
   21f28:	f01b ff48 	bl	3ddbc <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   21f2c:	4a26      	ldr	r2, [pc, #152]	; (21fc8 <z_clock_set_timeout+0xec>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
   21f2e:	4927      	ldr	r1, [pc, #156]	; (21fcc <z_clock_set_timeout+0xf0>)
   21f30:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
   21f34:	6809      	ldr	r1, [r1, #0]
	return (a - b) & COUNTER_MAX;
   21f36:	1a58      	subs	r0, r3, r1
   21f38:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
   21f3c:	3101      	adds	r1, #1
   21f3e:	4408      	add	r0, r1
   21f40:	4420      	add	r0, r4
	return (a - b) & COUNTER_MAX;
   21f42:	1ac3      	subs	r3, r0, r3
   21f44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   21f48:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
   21f4c:	2b02      	cmp	r3, #2
    p_reg->CC[ch] = cc_val;
   21f4e:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
   21f52:	d915      	bls.n	21f80 <z_clock_set_timeout+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21f54:	4817      	ldr	r0, [pc, #92]	; (21fb4 <z_clock_set_timeout+0xd8>)
   21f56:	f01b ff21 	bl	3dd9c <z_spin_unlock_valid>
   21f5a:	b960      	cbnz	r0, 21f76 <z_clock_set_timeout+0x9a>
   21f5c:	491c      	ldr	r1, [pc, #112]	; (21fd0 <z_clock_set_timeout+0xf4>)
   21f5e:	2372      	movs	r3, #114	; 0x72
   21f60:	4a16      	ldr	r2, [pc, #88]	; (21fbc <z_clock_set_timeout+0xe0>)
   21f62:	4817      	ldr	r0, [pc, #92]	; (21fc0 <z_clock_set_timeout+0xe4>)
   21f64:	f024 fb7a 	bl	4665c <printk>
   21f68:	481a      	ldr	r0, [pc, #104]	; (21fd4 <z_clock_set_timeout+0xf8>)
   21f6a:	f024 fb77 	bl	4665c <printk>
   21f6e:	2172      	movs	r1, #114	; 0x72
   21f70:	4812      	ldr	r0, [pc, #72]	; (21fbc <z_clock_set_timeout+0xe0>)
   21f72:	f024 fb80 	bl	46676 <assert_post_action>
	__asm__ volatile(
   21f76:	f385 8811 	msr	BASEPRI, r5
   21f7a:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
   21f7e:	bd38      	pop	{r3, r4, r5, pc}
     return p_reg->COUNTER;
   21f80:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
   21f84:	4914      	ldr	r1, [pc, #80]	; (21fd8 <z_clock_set_timeout+0xfc>)
	return (a - b) & COUNTER_MAX;
   21f86:	1ac3      	subs	r3, r0, r3
   21f88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
   21f8c:	1e5c      	subs	r4, r3, #1
   21f8e:	428c      	cmp	r4, r1
   21f90:	d905      	bls.n	21f9e <z_clock_set_timeout+0xc2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21f92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   21f96:	4b11      	ldr	r3, [pc, #68]	; (21fdc <z_clock_set_timeout+0x100>)
   21f98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   21f9c:	e7da      	b.n	21f54 <z_clock_set_timeout+0x78>
		} else if (dt == 1) {
   21f9e:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
   21fa0:	bf02      	ittt	eq
   21fa2:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   21fa4:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   21fa8:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
   21fac:	e7d2      	b.n	21f54 <z_clock_set_timeout+0x78>
   21fae:	bf00      	nop
   21fb0:	00fffffe 	.word	0x00fffffe
   21fb4:	200239a0 	.word	0x200239a0
   21fb8:	0004bff2 	.word	0x0004bff2
   21fbc:	0004bfcb 	.word	0x0004bfcb
   21fc0:	0004b5bf 	.word	0x0004b5bf
   21fc4:	0004c007 	.word	0x0004c007
   21fc8:	40015000 	.word	0x40015000
   21fcc:	2002399c 	.word	0x2002399c
   21fd0:	0004c01c 	.word	0x0004c01c
   21fd4:	0004c033 	.word	0x0004c033
   21fd8:	007ffffe 	.word	0x007ffffe
   21fdc:	e000e100 	.word	0xe000e100

00021fe0 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
   21fe0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21fe2:	f04f 0320 	mov.w	r3, #32
   21fe6:	f3ef 8511 	mrs	r5, BASEPRI
   21fea:	f383 8811 	msr	BASEPRI, r3
   21fee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21ff2:	4819      	ldr	r0, [pc, #100]	; (22058 <z_clock_elapsed+0x78>)
   21ff4:	f01b fec4 	bl	3dd80 <z_spin_lock_valid>
   21ff8:	b960      	cbnz	r0, 22014 <z_clock_elapsed+0x34>
   21ffa:	4918      	ldr	r1, [pc, #96]	; (2205c <z_clock_elapsed+0x7c>)
   21ffc:	235f      	movs	r3, #95	; 0x5f
   21ffe:	4a18      	ldr	r2, [pc, #96]	; (22060 <z_clock_elapsed+0x80>)
   22000:	4818      	ldr	r0, [pc, #96]	; (22064 <z_clock_elapsed+0x84>)
   22002:	f024 fb2b 	bl	4665c <printk>
   22006:	4818      	ldr	r0, [pc, #96]	; (22068 <z_clock_elapsed+0x88>)
   22008:	f024 fb28 	bl	4665c <printk>
   2200c:	215f      	movs	r1, #95	; 0x5f
   2200e:	4814      	ldr	r0, [pc, #80]	; (22060 <z_clock_elapsed+0x80>)
   22010:	f024 fb31 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   22014:	4810      	ldr	r0, [pc, #64]	; (22058 <z_clock_elapsed+0x78>)
   22016:	f01b fed1 	bl	3ddbc <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   2201a:	4b14      	ldr	r3, [pc, #80]	; (2206c <z_clock_elapsed+0x8c>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2201c:	480e      	ldr	r0, [pc, #56]	; (22058 <z_clock_elapsed+0x78>)
   2201e:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   22022:	4b13      	ldr	r3, [pc, #76]	; (22070 <z_clock_elapsed+0x90>)
	return (a - b) & COUNTER_MAX;
   22024:	681b      	ldr	r3, [r3, #0]
   22026:	1ae4      	subs	r4, r4, r3
   22028:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   2202c:	f01b feb6 	bl	3dd9c <z_spin_unlock_valid>
   22030:	b960      	cbnz	r0, 2204c <z_clock_elapsed+0x6c>
   22032:	4910      	ldr	r1, [pc, #64]	; (22074 <z_clock_elapsed+0x94>)
   22034:	2372      	movs	r3, #114	; 0x72
   22036:	4a0a      	ldr	r2, [pc, #40]	; (22060 <z_clock_elapsed+0x80>)
   22038:	480a      	ldr	r0, [pc, #40]	; (22064 <z_clock_elapsed+0x84>)
   2203a:	f024 fb0f 	bl	4665c <printk>
   2203e:	480e      	ldr	r0, [pc, #56]	; (22078 <z_clock_elapsed+0x98>)
   22040:	f024 fb0c 	bl	4665c <printk>
   22044:	2172      	movs	r1, #114	; 0x72
   22046:	4806      	ldr	r0, [pc, #24]	; (22060 <z_clock_elapsed+0x80>)
   22048:	f024 fb15 	bl	46676 <assert_post_action>
	__asm__ volatile(
   2204c:	f385 8811 	msr	BASEPRI, r5
   22050:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   22054:	4620      	mov	r0, r4
   22056:	bd38      	pop	{r3, r4, r5, pc}
   22058:	200239a0 	.word	0x200239a0
   2205c:	0004bff2 	.word	0x0004bff2
   22060:	0004bfcb 	.word	0x0004bfcb
   22064:	0004b5bf 	.word	0x0004b5bf
   22068:	0004c007 	.word	0x0004c007
   2206c:	40015000 	.word	0x40015000
   22070:	2002399c 	.word	0x2002399c
   22074:	0004c01c 	.word	0x0004c01c
   22078:	0004c033 	.word	0x0004c033

0002207c <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
   2207c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2207e:	f04f 0320 	mov.w	r3, #32
   22082:	f3ef 8511 	mrs	r5, BASEPRI
   22086:	f383 8811 	msr	BASEPRI, r3
   2208a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2208e:	481a      	ldr	r0, [pc, #104]	; (220f8 <z_timer_cycle_get_32+0x7c>)
   22090:	f01b fe76 	bl	3dd80 <z_spin_lock_valid>
   22094:	b960      	cbnz	r0, 220b0 <z_timer_cycle_get_32+0x34>
   22096:	4919      	ldr	r1, [pc, #100]	; (220fc <z_timer_cycle_get_32+0x80>)
   22098:	235f      	movs	r3, #95	; 0x5f
   2209a:	4a19      	ldr	r2, [pc, #100]	; (22100 <z_timer_cycle_get_32+0x84>)
   2209c:	4819      	ldr	r0, [pc, #100]	; (22104 <z_timer_cycle_get_32+0x88>)
   2209e:	f024 fadd 	bl	4665c <printk>
   220a2:	4819      	ldr	r0, [pc, #100]	; (22108 <z_timer_cycle_get_32+0x8c>)
   220a4:	f024 fada 	bl	4665c <printk>
   220a8:	215f      	movs	r1, #95	; 0x5f
   220aa:	4815      	ldr	r0, [pc, #84]	; (22100 <z_timer_cycle_get_32+0x84>)
   220ac:	f024 fae3 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   220b0:	4811      	ldr	r0, [pc, #68]	; (220f8 <z_timer_cycle_get_32+0x7c>)
   220b2:	f01b fe83 	bl	3ddbc <z_spin_lock_set_owner>
   220b6:	4b15      	ldr	r3, [pc, #84]	; (2210c <z_timer_cycle_get_32+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   220b8:	480f      	ldr	r0, [pc, #60]	; (220f8 <z_timer_cycle_get_32+0x7c>)
   220ba:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   220be:	4b14      	ldr	r3, [pc, #80]	; (22110 <z_timer_cycle_get_32+0x94>)
   220c0:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   220c2:	1ae4      	subs	r4, r4, r3
   220c4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   220c8:	441c      	add	r4, r3
   220ca:	f01b fe67 	bl	3dd9c <z_spin_unlock_valid>
   220ce:	b960      	cbnz	r0, 220ea <z_timer_cycle_get_32+0x6e>
   220d0:	4910      	ldr	r1, [pc, #64]	; (22114 <z_timer_cycle_get_32+0x98>)
   220d2:	2372      	movs	r3, #114	; 0x72
   220d4:	4a0a      	ldr	r2, [pc, #40]	; (22100 <z_timer_cycle_get_32+0x84>)
   220d6:	480b      	ldr	r0, [pc, #44]	; (22104 <z_timer_cycle_get_32+0x88>)
   220d8:	f024 fac0 	bl	4665c <printk>
   220dc:	480e      	ldr	r0, [pc, #56]	; (22118 <z_timer_cycle_get_32+0x9c>)
   220de:	f024 fabd 	bl	4665c <printk>
   220e2:	2172      	movs	r1, #114	; 0x72
   220e4:	4806      	ldr	r0, [pc, #24]	; (22100 <z_timer_cycle_get_32+0x84>)
   220e6:	f024 fac6 	bl	46676 <assert_post_action>
	__asm__ volatile(
   220ea:	f385 8811 	msr	BASEPRI, r5
   220ee:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   220f2:	4620      	mov	r0, r4
   220f4:	bd38      	pop	{r3, r4, r5, pc}
   220f6:	bf00      	nop
   220f8:	200239a0 	.word	0x200239a0
   220fc:	0004bff2 	.word	0x0004bff2
   22100:	0004bfcb 	.word	0x0004bfcb
   22104:	0004b5bf 	.word	0x0004b5bf
   22108:	0004c007 	.word	0x0004c007
   2210c:	40015000 	.word	0x40015000
   22110:	2002399c 	.word	0x2002399c
   22114:	0004c01c 	.word	0x0004c01c
   22118:	0004c033 	.word	0x0004c033

0002211c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   2211c:	2301      	movs	r3, #1
   2211e:	4a02      	ldr	r2, [pc, #8]	; (22128 <log_backend_rtt_init+0xc>)
   22120:	7013      	strb	r3, [r2, #0]
	sync_mode = IS_ENABLED(CONFIG_LOG_IMMEDIATE) ? true : false;
   22122:	4a02      	ldr	r2, [pc, #8]	; (2212c <log_backend_rtt_init+0x10>)
   22124:	7013      	strb	r3, [r2, #0]
	line_pos = line_buf;
}
   22126:	4770      	bx	lr
   22128:	2002a459 	.word	0x2002a459
   2212c:	2002a45a 	.word	0x2002a45a

00022130 <panic>:

static void panic(struct log_backend const *const backend)
{
   22130:	b508      	push	{r3, lr}
	log_output_flush(log_output);
   22132:	4803      	ldr	r0, [pc, #12]	; (22140 <panic+0x10>)
   22134:	f024 fad5 	bl	466e2 <log_output_flush>
	log_backend_std_panic(&log_output);
	sync_mode = true;
   22138:	2201      	movs	r2, #1
   2213a:	4b02      	ldr	r3, [pc, #8]	; (22144 <panic+0x14>)
   2213c:	701a      	strb	r2, [r3, #0]
}
   2213e:	bd08      	pop	{r3, pc}
   22140:	00049484 	.word	0x00049484
   22144:	2002a45a 	.word	0x2002a45a

00022148 <on_failed_write.part.0>:
	} else if (sync_mode) {
   22148:	4b04      	ldr	r3, [pc, #16]	; (2215c <on_failed_write.part.0+0x14>)
   2214a:	781b      	ldrb	r3, [r3, #0]
   2214c:	b11b      	cbz	r3, 22156 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   2214e:	f241 3088 	movw	r0, #5000	; 0x1388
   22152:	f026 bcdc 	b.w	48b0e <z_impl_k_busy_wait>
	return z_impl_k_sleep(ms);
   22156:	2005      	movs	r0, #5
   22158:	f026 bcb7 	b.w	48aca <z_impl_k_sleep>
   2215c:	2002a45a 	.word	0x2002a45a

00022160 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, u32_t timestamp,
			 const char *metadata, const u8_t *data, u32_t length)
{
   22160:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   22164:	460e      	mov	r6, r1
   22166:	4617      	mov	r7, r2
   22168:	4698      	mov	r8, r3
	__asm__ volatile(
   2216a:	f04f 0320 	mov.w	r3, #32
   2216e:	f3ef 8511 	mrs	r5, BASEPRI
   22172:	f383 8811 	msr	BASEPRI, r3
   22176:	f3bf 8f6f 	isb	sy
	log_output_flush(log_output);
   2217a:	4c0b      	ldr	r4, [pc, #44]	; (221a8 <sync_hexdump+0x48>)
   2217c:	4620      	mov	r0, r4
   2217e:	f024 fab0 	bl	466e2 <log_output_flush>
	log_output_hexdump(log_output, src_level, timestamp,
   22182:	230f      	movs	r3, #15
   22184:	9302      	str	r3, [sp, #8]
   22186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22188:	463a      	mov	r2, r7
   2218a:	9301      	str	r3, [sp, #4]
   2218c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2218e:	4631      	mov	r1, r6
   22190:	9300      	str	r3, [sp, #0]
   22192:	4620      	mov	r0, r4
   22194:	4643      	mov	r3, r8
   22196:	f7ff fa67 	bl	21668 <log_output_hexdump>
	__asm__ volatile(
   2219a:	f385 8811 	msr	BASEPRI, r5
   2219e:	f3bf 8f6f 	isb	sy
	log_backend_std_sync_hexdump(&log_output, 0, src_level,
				     timestamp, metadata, data, length);
}
   221a2:	b004      	add	sp, #16
   221a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   221a8:	00049484 	.word	0x00049484

000221ac <sync_string>:
{
   221ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   221b0:	460e      	mov	r6, r1
   221b2:	4617      	mov	r7, r2
   221b4:	4698      	mov	r8, r3
	__asm__ volatile(
   221b6:	f04f 0320 	mov.w	r3, #32
   221ba:	f3ef 8511 	mrs	r5, BASEPRI
   221be:	f383 8811 	msr	BASEPRI, r3
   221c2:	f3bf 8f6f 	isb	sy
	log_output_flush(log_output);
   221c6:	4c0a      	ldr	r4, [pc, #40]	; (221f0 <sync_string+0x44>)
   221c8:	4620      	mov	r0, r4
   221ca:	f024 fa8a 	bl	466e2 <log_output_flush>
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
   221ce:	230f      	movs	r3, #15
   221d0:	9301      	str	r3, [sp, #4]
   221d2:	9b08      	ldr	r3, [sp, #32]
   221d4:	463a      	mov	r2, r7
   221d6:	9300      	str	r3, [sp, #0]
   221d8:	4631      	mov	r1, r6
   221da:	4643      	mov	r3, r8
   221dc:	4620      	mov	r0, r4
   221de:	f7ff fa0b 	bl	215f8 <log_output_string>
	__asm__ volatile(
   221e2:	f385 8811 	msr	BASEPRI, r5
   221e6:	f3bf 8f6f 	isb	sy
}
   221ea:	b002      	add	sp, #8
   221ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   221f0:	00049484 	.word	0x00049484

000221f4 <data_out_block_mode>:
{
   221f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (!sync_mode) {
   221f8:	4f21      	ldr	r7, [pc, #132]	; (22280 <data_out_block_mode+0x8c>)
{
   221fa:	4682      	mov	sl, r0
   221fc:	460e      	mov	r6, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
   221fe:	2404      	movs	r4, #4
   22200:	46b8      	mov	r8, r7
	return z_impl_k_mutex_lock(mutex, timeout);
   22202:	f8df 9084 	ldr.w	r9, [pc, #132]	; 22288 <data_out_block_mode+0x94>
		if (!sync_mode) {
   22206:	783b      	ldrb	r3, [r7, #0]
   22208:	b923      	cbnz	r3, 22214 <data_out_block_mode+0x20>
   2220a:	f04f 31ff 	mov.w	r1, #4294967295
   2220e:	4648      	mov	r0, r9
   22210:	f01a f8fc 	bl	3c40c <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   22214:	4632      	mov	r2, r6
   22216:	4651      	mov	r1, sl
   22218:	2000      	movs	r0, #0
   2221a:	f000 f867 	bl	222ec <SEGGER_RTT_WriteSkipNoLock>
		if (!sync_mode) {
   2221e:	f898 3000 	ldrb.w	r3, [r8]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   22222:	4683      	mov	fp, r0
		if (!sync_mode) {
   22224:	b913      	cbnz	r3, 2222c <data_out_block_mode+0x38>
	z_impl_k_mutex_unlock(mutex);
   22226:	4648      	mov	r0, r9
   22228:	f01a f9ca 	bl	3c5c0 <z_impl_k_mutex_unlock>
   2222c:	4d15      	ldr	r5, [pc, #84]	; (22284 <data_out_block_mode+0x90>)
		if (ret) {
   2222e:	f1bb 0f00 	cmp.w	fp, #0
   22232:	d018      	beq.n	22266 <data_out_block_mode+0x72>
	host_present = true;
   22234:	2301      	movs	r3, #1
   22236:	702b      	strb	r3, [r5, #0]
	if (sync_mode) {
   22238:	f898 3000 	ldrb.w	r3, [r8]
   2223c:	b933      	cbnz	r3, 2224c <data_out_block_mode+0x58>
}
   2223e:	4630      	mov	r0, r6
   22240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
   22244:	b95c      	cbnz	r4, 2225e <data_out_block_mode+0x6a>
		host_present = false;
   22246:	702c      	strb	r4, [r5, #0]
   22248:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   2224c:	2000      	movs	r0, #0
   2224e:	f000 f897 	bl	22380 <SEGGER_RTT_HasDataUp>
   22252:	2800      	cmp	r0, #0
   22254:	d0f3      	beq.n	2223e <data_out_block_mode+0x4a>
   22256:	782b      	ldrb	r3, [r5, #0]
   22258:	2b00      	cmp	r3, #0
   2225a:	d1f3      	bne.n	22244 <data_out_block_mode+0x50>
   2225c:	e7ef      	b.n	2223e <data_out_block_mode+0x4a>
			on_failed_write(retry_cnt--);
   2225e:	3c01      	subs	r4, #1
   22260:	f7ff ff72 	bl	22148 <on_failed_write.part.0>
   22264:	e7f2      	b.n	2224c <data_out_block_mode+0x58>
		} else if (host_present) {
   22266:	782b      	ldrb	r3, [r5, #0]
   22268:	b113      	cbz	r3, 22270 <data_out_block_mode+0x7c>
	if (retry_cnt == 0) {
   2226a:	3c01      	subs	r4, #1
   2226c:	d104      	bne.n	22278 <data_out_block_mode+0x84>
		host_present = false;
   2226e:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   22270:	782b      	ldrb	r3, [r5, #0]
   22272:	2b00      	cmp	r3, #0
   22274:	d1c7      	bne.n	22206 <data_out_block_mode+0x12>
   22276:	e7e2      	b.n	2223e <data_out_block_mode+0x4a>
   22278:	f7ff ff66 	bl	22148 <on_failed_write.part.0>
   2227c:	e7f8      	b.n	22270 <data_out_block_mode+0x7c>
   2227e:	bf00      	nop
   22280:	2002a45a 	.word	0x2002a45a
   22284:	2002a459 	.word	0x2002a459
   22288:	20032354 	.word	0x20032354

0002228c <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   2228c:	2303      	movs	r3, #3
static void _DoInit(void) {
   2228e:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   22290:	4c10      	ldr	r4, [pc, #64]	; (222d4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   22292:	4a11      	ldr	r2, [pc, #68]	; (222d8 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   22294:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   22298:	4b10      	ldr	r3, [pc, #64]	; (222dc <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   2229a:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2229c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   2229e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   222a2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   222a4:	4a0e      	ldr	r2, [pc, #56]	; (222e0 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   222a6:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   222a8:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
   222aa:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   222ac:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
   222ae:	490d      	ldr	r1, [pc, #52]	; (222e4 <_DoInit+0x58>)
   222b0:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
   222b2:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   222b4:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   222b6:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
   222b8:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   222ba:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   222bc:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   222be:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
   222c0:	f01e f902 	bl	404c8 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   222c4:	4908      	ldr	r1, [pc, #32]	; (222e8 <_DoInit+0x5c>)
   222c6:	4620      	mov	r0, r4
   222c8:	f01e f8fe 	bl	404c8 <strcpy>
  p->acID[6] = ' ';
   222cc:	2320      	movs	r3, #32
   222ce:	71a3      	strb	r3, [r4, #6]
}
   222d0:	bd10      	pop	{r4, pc}
   222d2:	bf00      	nop
   222d4:	200239b8 	.word	0x200239b8
   222d8:	0004c70a 	.word	0x0004c70a
   222dc:	2002a46b 	.word	0x2002a46b
   222e0:	2002a45b 	.word	0x2002a45b
   222e4:	0004c713 	.word	0x0004c713
   222e8:	0004c717 	.word	0x0004c717

000222ec <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   222ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   222f0:	4607      	mov	r7, r0
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
   222f2:	2018      	movs	r0, #24
   222f4:	4d21      	ldr	r5, [pc, #132]	; (2237c <SEGGER_RTT_WriteSkipNoLock+0x90>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   222f6:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   222f8:	fb00 5207 	mla	r2, r0, r7, r5
   222fc:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   222fe:	6a56      	ldr	r6, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22300:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   22302:	42b3      	cmp	r3, r6
   22304:	d833      	bhi.n	2236e <SEGGER_RTT_WriteSkipNoLock+0x82>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   22306:	6a12      	ldr	r2, [r2, #32]
   22308:	eba2 0906 	sub.w	r9, r2, r6
   2230c:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   22310:	4294      	cmp	r4, r2
   22312:	d811      	bhi.n	22338 <SEGGER_RTT_WriteSkipNoLock+0x4c>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
   22314:	f04f 0918 	mov.w	r9, #24
   22318:	fb07 9309 	mla	r3, r7, r9, r9
   2231c:	442b      	add	r3, r5
   2231e:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22320:	4622      	mov	r2, r4
   22322:	4641      	mov	r1, r8
   22324:	4430      	add	r0, r6
   22326:	f7f7 fdc3 	bl	19eb0 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   2232a:	fb09 5507 	mla	r5, r9, r7, r5
   2232e:	4434      	add	r4, r6
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
      return 1;
   22330:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   22332:	626c      	str	r4, [r5, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   22334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   22338:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   2233a:	429c      	cmp	r4, r3
   2233c:	d81b      	bhi.n	22376 <SEGGER_RTT_WriteSkipNoLock+0x8a>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
   2233e:	fb07 0000 	mla	r0, r7, r0, r0
   22342:	eb05 0a00 	add.w	sl, r5, r0
   22346:	f8da 0004 	ldr.w	r0, [sl, #4]
   2234a:	464a      	mov	r2, r9
   2234c:	4430      	add	r0, r6
   2234e:	f7f7 fdaf 	bl	19eb0 <memcpy>
      if (NumBytes) {
   22352:	ebb4 0409 	subs.w	r4, r4, r9
   22356:	d006      	beq.n	22366 <SEGGER_RTT_WriteSkipNoLock+0x7a>
   22358:	4622      	mov	r2, r4
   2235a:	eb08 0109 	add.w	r1, r8, r9
   2235e:	f8da 0004 	ldr.w	r0, [sl, #4]
   22362:	f7f7 fda5 	bl	19eb0 <memcpy>
      pRing->WrOff = NumBytes;
   22366:	2318      	movs	r3, #24
   22368:	fb03 5507 	mla	r5, r3, r7, r5
   2236c:	e7e0      	b.n	22330 <SEGGER_RTT_WriteSkipNoLock+0x44>
    Avail = RdOff - WrOff - 1u;
   2236e:	3b01      	subs	r3, #1
   22370:	1b9b      	subs	r3, r3, r6
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   22372:	42a3      	cmp	r3, r4
   22374:	d2ce      	bcs.n	22314 <SEGGER_RTT_WriteSkipNoLock+0x28>
  return 0;     // No space in buffer
   22376:	2000      	movs	r0, #0
   22378:	e7dc      	b.n	22334 <SEGGER_RTT_WriteSkipNoLock+0x48>
   2237a:	bf00      	nop
   2237c:	200239b8 	.word	0x200239b8

00022380 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
   22380:	2318      	movs	r3, #24
   22382:	4a03      	ldr	r2, [pc, #12]	; (22390 <SEGGER_RTT_HasDataUp+0x10>)
   22384:	fb03 2300 	mla	r3, r3, r0, r2
   22388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   2238a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   2238c:	1a80      	subs	r0, r0, r2
   2238e:	4770      	bx	lr
   22390:	200239b8 	.word	0x200239b8

00022394 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   22394:	4804      	ldr	r0, [pc, #16]	; (223a8 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   22396:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
   22398:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
   2239a:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   2239c:	d003      	beq.n	223a6 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   2239e:	4903      	ldr	r1, [pc, #12]	; (223ac <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   223a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   223a4:	600a      	str	r2, [r1, #0]

000223a6 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
   223a6:	4770      	bx	lr
    ldr r0, =_kernel
   223a8:	2002a2dc 	.word	0x2002a2dc
    ldr r1, =_SCS_ICSR
   223ac:	e000ed04 	.word	0xe000ed04

000223b0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   223b0:	492e      	ldr	r1, [pc, #184]	; (2246c <in_fp_endif+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   223b2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   223b4:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   223b8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   223ba:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   223be:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   223c2:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   223c6:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   223ca:	d004      	beq.n	223d6 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   223cc:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   223d0:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   223d4:	e007      	b.n	223e6 <out_fp_endif>

000223d6 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   223d6:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
   223da:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   223de:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   223e2:	f050 0004 	orrs.w	r0, r0, #4

000223e6 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   223e6:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   223ea:	2020      	movs	r0, #32
    msr BASEPRI, r0
   223ec:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   223f0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   223f4:	4f1e      	ldr	r7, [pc, #120]	; (22470 <in_fp_endif+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   223f6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   223fa:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   223fc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   223fe:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   22400:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
   22402:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   22404:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   22406:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   2240a:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   2240e:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   22412:	d105      	bne.n	22420 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   22414:	2300      	movs	r3, #0
    vmsr fpscr, r3
   22416:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   2241a:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   2241e:	e005      	b.n	2242c <in_fp_endif>

00022420 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   22420:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   22424:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
   22428:	ec90 8a10 	vldmia	r0, {s16-s31}

0002242c <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   2242c:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   22430:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   22434:	f383 8814 	msr	CONTROL, r3
    isb
   22438:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
   2243c:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   2243e:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   22440:	f024 fb00 	bl	46a44 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   22444:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   22448:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   2244c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
   22450:	f04f 0000 	mov.w	r0, #0
    msr PSPLIM, r0
   22454:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   22458:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   2245c:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   22460:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   22462:	f024 fae0 	bl	46a26 <configure_builtin_stack_guard>
    pop {r2, lr}
   22466:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   2246a:	4770      	bx	lr
    ldr r1, =_kernel
   2246c:	2002a2dc 	.word	0x2002a2dc
    ldr v4, =_SCS_ICSR
   22470:	e000ed04 	.word	0xe000ed04

00022474 <z_arm_svc>:
 */
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
    tst lr, #0x4    /* did we come from thread mode ? */
   22474:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   22478:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2247a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   2247e:	f3ef 8009 	mrsne	r0, PSP


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   22482:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
    ldrb r1, [r1, #-2]
   22484:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    tst r2, #0x1
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   22488:	2902      	cmp	r1, #2
    beq _oops
   2248a:	d0ff      	beq.n	2248c <_oops>

0002248c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   2248c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   2248e:	f024 face 	bl	46a2e <z_do_kernel_oops>
    pop {r0, pc}
   22492:	bd01      	pop	{r0, pc}

00022494 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
   22494:	4901      	ldr	r1, [pc, #4]	; (2249c <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   22496:	2210      	movs	r2, #16
	str r2, [r1]
   22498:	600a      	str	r2, [r1, #0]
#endif
	bx lr
   2249a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   2249c:	e000ed10 	.word	0xe000ed10

000224a0 <z_arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   224a0:	4040      	eors	r0, r0
	msr BASEPRI, r0
   224a2:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   224a6:	bf30      	wfi

	bx lr
   224a8:	4770      	bx	lr
   224aa:	bf00      	nop

000224ac <z_arm_bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
   224ac:	4040      	eors	r0, r0
	msr BASEPRI, r0
   224ae:	f380 8811 	msr	BASEPRI, r0
	/* RETTOBASE flag is not banked between security states.
	 * Therefore, we cannot rely on this flag, to obtain the SP
	 * of the current security state.
	 * Instead, we use the EXC_RETURN.SPSEL flag.
	 */
 	ldr r0, =0x4
   224b2:	f04f 0004 	mov.w	r0, #4
	mov r1, lr
   224b6:	4671      	mov	r1, lr
	tst r1, r0
   224b8:	4201      	tst	r1, r0
	beq _s_stack_frame_msp
   224ba:	d002      	beq.n	224c2 <_s_stack_frame_msp>
	mrs r0, PSP
   224bc:	f3ef 8009 	mrs	r0, PSP
	bne _s_stack_frame_endif
   224c0:	d101      	bne.n	224c6 <_s_stack_frame_endif>

000224c2 <_s_stack_frame_msp>:
_s_stack_frame_msp:
	mrs r0, MSP
   224c2:	f3ef 8008 	mrs	r0, MSP

000224c6 <_s_stack_frame_endif>:
	 *
	 * To determine this we need to inspect the EXC_RETURN value
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
   224c6:	4671      	mov	r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
   224c8:	b501      	push	{r0, lr}
	bl z_arm_fault
   224ca:	f000 fbdf 	bl	22c8c <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
   224ce:	bd01      	pop	{r0, pc}

000224d0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   224d0:	bf30      	wfi
    b z_SysNmiOnReset
   224d2:	f7ff bffd 	b.w	224d0 <z_SysNmiOnReset>
   224d6:	bf00      	nop

000224d8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   224d8:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   224da:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   224dc:	4a0b      	ldr	r2, [pc, #44]	; (2250c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   224de:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   224e0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   224e2:	bf1e      	ittt	ne
	movne	r1, #0
   224e4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   224e6:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   224e8:	f026 fa58 	blne	4899c <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   224ec:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   224ee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   224f2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   224f6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   224fa:	4905      	ldr	r1, [pc, #20]	; (22510 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   224fc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   224fe:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   22500:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   22502:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   22506:	4903      	ldr	r1, [pc, #12]	; (22514 <_isr_wrapper+0x3c>)
	bx r1
   22508:	4708      	bx	r1
   2250a:	0000      	.short	0x0000
	ldr r2, =_kernel
   2250c:	2002a2dc 	.word	0x2002a2dc
	ldr r1, =_sw_isr_table
   22510:	00048cfc 	.word	0x00048cfc
	ldr r1, =z_arm_int_exit
   22514:	00022395 	.word	0x00022395

00022518 <z_arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   22518:	4a09      	ldr	r2, [pc, #36]	; (22540 <z_arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   2251a:	490a      	ldr	r1, [pc, #40]	; (22544 <z_arch_swap+0x2c>)
	_current->arch.basepri = key;
   2251c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   2251e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   22520:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
   22522:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   22524:	4908      	ldr	r1, [pc, #32]	; (22548 <z_arch_swap+0x30>)
   22526:	684b      	ldr	r3, [r1, #4]
   22528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2252c:	604b      	str	r3, [r1, #4]
   2252e:	2300      	movs	r3, #0
   22530:	f383 8811 	msr	BASEPRI, r3
   22534:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   22538:	6893      	ldr	r3, [r2, #8]
}
   2253a:	6e98      	ldr	r0, [r3, #104]	; 0x68
   2253c:	4770      	bx	lr
   2253e:	bf00      	nop
   22540:	2002a2dc 	.word	0x2002a2dc
   22544:	0004ac5c 	.word	0x0004ac5c
   22548:	e000ed00 	.word	0xe000ed00

0002254c <z_arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   2254c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   2254e:	2b00      	cmp	r3, #0
   22550:	db08      	blt.n	22564 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22552:	2201      	movs	r2, #1
   22554:	f000 001f 	and.w	r0, r0, #31
   22558:	fa02 f000 	lsl.w	r0, r2, r0
   2255c:	4a02      	ldr	r2, [pc, #8]	; (22568 <z_arch_irq_enable+0x1c>)
   2255e:	095b      	lsrs	r3, r3, #5
   22560:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   22564:	4770      	bx	lr
   22566:	bf00      	nop
   22568:	e000e100 	.word	0xe000e100

0002256c <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   2256c:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   2256e:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   22570:	2c07      	cmp	r4, #7
{
   22572:	4605      	mov	r5, r0
   22574:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   22576:	d90e      	bls.n	22596 <z_arm_irq_priority_set+0x2a>
   22578:	2360      	movs	r3, #96	; 0x60
   2257a:	4a10      	ldr	r2, [pc, #64]	; (225bc <z_arm_irq_priority_set+0x50>)
   2257c:	4910      	ldr	r1, [pc, #64]	; (225c0 <z_arm_irq_priority_set+0x54>)
   2257e:	4811      	ldr	r0, [pc, #68]	; (225c4 <z_arm_irq_priority_set+0x58>)
   22580:	f024 f86c 	bl	4665c <printk>
   22584:	4631      	mov	r1, r6
   22586:	4810      	ldr	r0, [pc, #64]	; (225c8 <z_arm_irq_priority_set+0x5c>)
   22588:	2207      	movs	r2, #7
   2258a:	f024 f867 	bl	4665c <printk>
   2258e:	2160      	movs	r1, #96	; 0x60
   22590:	480a      	ldr	r0, [pc, #40]	; (225bc <z_arm_irq_priority_set+0x50>)
   22592:	f024 f870 	bl	46676 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   22596:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   22598:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2259a:	bfa8      	it	ge
   2259c:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   225a0:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   225a4:	bfb8      	it	lt
   225a6:	4b09      	ldrlt	r3, [pc, #36]	; (225cc <z_arm_irq_priority_set+0x60>)
   225a8:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   225aa:	bfab      	itete	ge
   225ac:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   225b0:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   225b4:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   225b8:	555c      	strblt	r4, [r3, r5]
}
   225ba:	bd70      	pop	{r4, r5, r6, pc}
   225bc:	0004c71e 	.word	0x0004c71e
   225c0:	0004c74d 	.word	0x0004c74d
   225c4:	0004b5bf 	.word	0x0004b5bf
   225c8:	0004c768 	.word	0x0004c768
   225cc:	e000ed14 	.word	0xe000ed14

000225d0 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   225d0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   225d2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   225d4:	4b04      	ldr	r3, [pc, #16]	; (225e8 <_arch_isr_direct_pm+0x18>)
   225d6:	6a18      	ldr	r0, [r3, #32]
   225d8:	b118      	cbz	r0, 225e2 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   225da:	2200      	movs	r2, #0
   225dc:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   225de:	f026 f9dd 	bl	4899c <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   225e2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   225e4:	bd08      	pop	{r3, pc}
   225e6:	bf00      	nop
   225e8:	2002a2dc 	.word	0x2002a2dc

000225ec <z_arch_new_thread>:
 */
void z_arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		       size_t stackSize, k_thread_entry_t pEntry,
		       void *parameter1, void *parameter2, void *parameter3,
		       int priority, unsigned int options)
{
   225ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   225f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   225f2:	4605      	mov	r5, r0
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
   225f4:	2e0f      	cmp	r6, #15
{
   225f6:	4689      	mov	r9, r1
   225f8:	4690      	mov	r8, r2
   225fa:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   225fc:	d102      	bne.n	22604 <z_arch_new_thread+0x18>
   225fe:	4b1e      	ldr	r3, [pc, #120]	; (22678 <z_arch_new_thread+0x8c>)
   22600:	429f      	cmp	r7, r3
   22602:	d014      	beq.n	2262e <z_arch_new_thread+0x42>
   22604:	f106 0310 	add.w	r3, r6, #16
   22608:	2b1e      	cmp	r3, #30
   2260a:	d910      	bls.n	2262e <z_arch_new_thread+0x42>
   2260c:	232e      	movs	r3, #46	; 0x2e
   2260e:	4a1b      	ldr	r2, [pc, #108]	; (2267c <z_arch_new_thread+0x90>)
   22610:	491b      	ldr	r1, [pc, #108]	; (22680 <z_arch_new_thread+0x94>)
   22612:	481c      	ldr	r0, [pc, #112]	; (22684 <z_arch_new_thread+0x98>)
   22614:	f024 f822 	bl	4665c <printk>
   22618:	4631      	mov	r1, r6
   2261a:	481b      	ldr	r0, [pc, #108]	; (22688 <z_arch_new_thread+0x9c>)
   2261c:	f06f 030f 	mvn.w	r3, #15
   22620:	220e      	movs	r2, #14
   22622:	f024 f81b 	bl	4665c <printk>
   22626:	212e      	movs	r1, #46	; 0x2e
   22628:	4814      	ldr	r0, [pc, #80]	; (2267c <z_arch_new_thread+0x90>)
   2262a:	f024 f824 	bl	46676 <assert_post_action>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   2262e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22630:	2204      	movs	r2, #4
   22632:	4631      	mov	r1, r6
   22634:	4628      	mov	r0, r5
   22636:	f026 faac 	bl	48b92 <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   2263a:	2200      	movs	r2, #0
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
   2263c:	eb09 0408 	add.w	r4, r9, r8
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
   22640:	4912      	ldr	r1, [pc, #72]	; (2268c <z_arch_new_thread+0xa0>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   22642:	f1a4 0320 	sub.w	r3, r4, #32
   22646:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
   2264a:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
   2264e:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
   22652:	e9c5 9816 	strd	r9, r8, [r5, #88]	; 0x58
   22656:	6199      	str	r1, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
   22658:	9908      	ldr	r1, [sp, #32]
	pInitCtx->basic.a1 = (u32_t)pEntry;
   2265a:	601f      	str	r7, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   2265c:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   2265e:	9909      	ldr	r1, [sp, #36]	; 0x24
   22660:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   22662:	990a      	ldr	r1, [sp, #40]	; 0x28
   22664:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
   22666:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   2266a:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
   2266c:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
   2266e:	666a      	str	r2, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
   22670:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   22674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22678:	0003bb55 	.word	0x0003bb55
   2267c:	0004c79d 	.word	0x0004c79d
   22680:	0004c7c8 	.word	0x0004c7c8
   22684:	0004b5bf 	.word	0x0004b5bf
   22688:	0004c855 	.word	0x0004c855
   2268c:	00046103 	.word	0x00046103

00022690 <z_arch_switch_to_main_thread>:

void z_arch_switch_to_main_thread(struct k_thread *main_thread,
				  k_thread_stack_t *main_stack,
				  size_t main_stack_size,
				  k_thread_entry_t _main)
{
   22690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22692:	461f      	mov	r7, r3
   22694:	4606      	mov	r6, r0
   22696:	460d      	mov	r5, r1
   22698:	4614      	mov	r4, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   2269a:	2300      	movs	r3, #0
   2269c:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   226a0:	f3ef 8214 	mrs	r2, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   226a4:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   226a8:	f382 8814 	msr	CONTROL, r2
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   226ac:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   226b0:	f000 fc26 	bl	22f00 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   226b4:	4b0c      	ldr	r3, [pc, #48]	; (226e8 <z_arch_switch_to_main_thread+0x58>)
	start_of_main_stack =
   226b6:	442c      	add	r4, r5
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   226b8:	4630      	mov	r0, r6
	_current = main_thread;
   226ba:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
   226bc:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
   226c0:	f024 f9c0 	bl	46a44 <z_arm_configure_dynamic_mpu_regions>
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   226c4:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   226c8:	4638      	mov	r0, r7
   226ca:	f384 8809 	msr	PSP, r4
   226ce:	b663      	cpsie	if
   226d0:	f04f 0100 	mov.w	r1, #0
   226d4:	f381 8811 	msr	BASEPRI, r1
   226d8:	f3bf 8f6f 	isb	sy
   226dc:	2100      	movs	r1, #0
   226de:	2200      	movs	r2, #0
   226e0:	2300      	movs	r3, #0
   226e2:	f023 fd0e 	bl	46102 <z_thread_entry>
   226e6:	bf00      	nop
   226e8:	2002a2dc 	.word	0x2002a2dc

000226ec <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   226ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   226f0:	4681      	mov	r9, r0
   226f2:	b087      	sub	sp, #28

	if (esf != NULL) {
   226f4:	460c      	mov	r4, r1
   226f6:	2900      	cmp	r1, #0
   226f8:	d07a      	beq.n	227f0 <z_arm_fatal_error+0x104>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   226fa:	f04f 0801 	mov.w	r8, #1
   226fe:	f04f 0000 	mov.w	r0, #0
   22702:	4b3f      	ldr	r3, [pc, #252]	; (22800 <z_arm_fatal_error+0x114>)
   22704:	4d3f      	ldr	r5, [pc, #252]	; (22804 <z_arm_fatal_error+0x118>)
   22706:	f368 0002 	bfi	r0, r8, #0, #3
   2270a:	1aed      	subs	r5, r5, r3
   2270c:	688b      	ldr	r3, [r1, #8]
   2270e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   22712:	9300      	str	r3, [sp, #0]
   22714:	f36f 00c5 	bfc	r0, #3, #3
   22718:	e9d1 2300 	ldrd	r2, r3, [r1]
   2271c:	f365 108f 	bfi	r0, r5, #6, #10
   22720:	4939      	ldr	r1, [pc, #228]	; (22808 <z_arm_fatal_error+0x11c>)
   22722:	f023 ffbe 	bl	466a2 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   22726:	f04f 0000 	mov.w	r0, #0
   2272a:	6963      	ldr	r3, [r4, #20]
   2272c:	f368 0002 	bfi	r0, r8, #0, #3
   22730:	9300      	str	r3, [sp, #0]
   22732:	f36f 00c5 	bfc	r0, #3, #3
   22736:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   2273a:	f365 108f 	bfi	r0, r5, #6, #10
   2273e:	4933      	ldr	r1, [pc, #204]	; (2280c <z_arm_fatal_error+0x120>)
   22740:	f023 ffaf 	bl	466a2 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   22744:	f04f 0000 	mov.w	r0, #0
   22748:	f368 0002 	bfi	r0, r8, #0, #3
   2274c:	f36f 00c5 	bfc	r0, #3, #3
   22750:	f365 108f 	bfi	r0, r5, #6, #10
   22754:	69e2      	ldr	r2, [r4, #28]
   22756:	492e      	ldr	r1, [pc, #184]	; (22810 <z_arm_fatal_error+0x124>)
   22758:	f023 ffa3 	bl	466a2 <log_string_sync>
   2275c:	4627      	mov	r7, r4
	for (int i = 0; i < 16; i += 4) {
   2275e:	2600      	movs	r6, #0
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
   22760:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 2281c <z_arm_fatal_error+0x130>
   22764:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   22768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   2276c:	1cf3      	adds	r3, r6, #3
   2276e:	ed97 7a08 	vldr	s14, [r7, #32]
   22772:	9304      	str	r3, [sp, #16]
   22774:	edcd 7a05 	vstr	s15, [sp, #20]
   22778:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   2277c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   22780:	1cb3      	adds	r3, r6, #2
   22782:	9302      	str	r3, [sp, #8]
   22784:	edcd 7a03 	vstr	s15, [sp, #12]
   22788:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   2278c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   22790:	edcd 7a01 	vstr	s15, [sp, #4]
   22794:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   22798:	f368 0a02 	bfi	sl, r8, #0, #3
   2279c:	f36f 0ac5 	bfc	sl, #3, #3
   227a0:	1c73      	adds	r3, r6, #1
   227a2:	f365 1a8f 	bfi	sl, r5, #6, #10
   227a6:	9300      	str	r3, [sp, #0]
   227a8:	4632      	mov	r2, r6
   227aa:	ee17 3a90 	vmov	r3, s15
   227ae:	4659      	mov	r1, fp
   227b0:	4650      	mov	r0, sl
	for (int i = 0; i < 16; i += 4) {
   227b2:	3604      	adds	r6, #4
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
   227b4:	f023 ff75 	bl	466a2 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   227b8:	2e10      	cmp	r6, #16
   227ba:	f107 0710 	add.w	r7, r7, #16
   227be:	d1d1      	bne.n	22764 <z_arm_fatal_error+0x78>
	LOG_ERR("fpscr:  0x%08x\n", esf->fpscr);
   227c0:	f04f 0000 	mov.w	r0, #0
   227c4:	f368 0002 	bfi	r0, r8, #0, #3
   227c8:	f36f 00c5 	bfc	r0, #3, #3
   227cc:	f365 108f 	bfi	r0, r5, #6, #10
   227d0:	6e22      	ldr	r2, [r4, #96]	; 0x60
   227d2:	4910      	ldr	r1, [pc, #64]	; (22814 <z_arm_fatal_error+0x128>)
   227d4:	f023 ff65 	bl	466a2 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   227d8:	f04f 0000 	mov.w	r0, #0
   227dc:	f368 0002 	bfi	r0, r8, #0, #3
   227e0:	f36f 00c5 	bfc	r0, #3, #3
   227e4:	f365 108f 	bfi	r0, r5, #6, #10
   227e8:	69a2      	ldr	r2, [r4, #24]
   227ea:	490b      	ldr	r1, [pc, #44]	; (22818 <z_arm_fatal_error+0x12c>)
   227ec:	f023 ff59 	bl	466a2 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   227f0:	4621      	mov	r1, r4
   227f2:	4648      	mov	r0, r9
}
   227f4:	b007      	add	sp, #28
   227f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_fatal_error(reason, esf);
   227fa:	f019 b92b 	b.w	3ba54 <z_fatal_error>
   227fe:	bf00      	nop
   22800:	00049018 	.word	0x00049018
   22804:	000490f0 	.word	0x000490f0
   22808:	0004c886 	.word	0x0004c886
   2280c:	0004c8b5 	.word	0x0004c8b5
   22810:	0004c8e4 	.word	0x0004c8e4
   22814:	0004c933 	.word	0x0004c933
   22818:	0004c943 	.word	0x0004c943
   2281c:	0004c8f3 	.word	0x0004c8f3

00022820 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   22820:	4a11      	ldr	r2, [pc, #68]	; (22868 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   22822:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   22824:	4b11      	ldr	r3, [pc, #68]	; (2286c <z_arm_prep_c+0x4c>)
   22826:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   2282a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   2282c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22830:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   22834:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   22838:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   2283c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   22840:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   22844:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   22848:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2284c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   22850:	2300      	movs	r3, #0
   22852:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
   22856:	f019 f997 	bl	3bb88 <z_bss_zero>
	z_data_copy();
   2285a:	f019 f99f 	bl	3bb9c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
   2285e:	f000 fb05 	bl	22e6c <z_arm_int_lib_init>
	z_cstart();
   22862:	f019 f9cd 	bl	3bc00 <z_cstart>
   22866:	bf00      	nop
   22868:	00018200 	.word	0x00018200
   2286c:	e000ed00 	.word	0xe000ed00

00022870 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   22870:	f023 ff08 	bl	46684 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   22874:	2020      	movs	r0, #32
    msr BASEPRI, r0
   22876:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   2287a:	4808      	ldr	r0, [pc, #32]	; (2289c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   2287c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   22880:	1840      	adds	r0, r0, r1
    msr PSP, r0
   22882:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   22886:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2288a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   2288c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   2288e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   22892:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   22896:	f7ff ffc3 	bl	22820 <z_arm_prep_c>
   2289a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   2289c:	2002ec30 	.word	0x2002ec30

000228a0 <bus_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   228a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   228a4:	4607      	mov	r7, r0
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   228a6:	f04f 0801 	mov.w	r8, #1
   228aa:	f04f 0000 	mov.w	r0, #0
   228ae:	4b44      	ldr	r3, [pc, #272]	; (229c0 <bus_fault.isra.2+0x120>)
   228b0:	4c44      	ldr	r4, [pc, #272]	; (229c4 <bus_fault.isra.2+0x124>)
   228b2:	f368 0002 	bfi	r0, r8, #0, #3
   228b6:	1ae4      	subs	r4, r4, r3
   228b8:	f36f 00c5 	bfc	r0, #3, #3
   228bc:	f3c4 04c9 	ubfx	r4, r4, #3, #10

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   228c0:	4d41      	ldr	r5, [pc, #260]	; (229c8 <bus_fault.isra.2+0x128>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   228c2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   228c4:	f364 108f 	bfi	r0, r4, #6, #10
   228c8:	4940      	ldr	r1, [pc, #256]	; (229cc <bus_fault.isra.2+0x12c>)
   228ca:	f023 feea 	bl	466a2 <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   228ce:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   228d0:	04d1      	lsls	r1, r2, #19
   228d2:	d50a      	bpl.n	228ea <bus_fault.isra.2+0x4a>
		PR_FAULT_INFO("  Stacking error");
   228d4:	f04f 0000 	mov.w	r0, #0
   228d8:	f368 0002 	bfi	r0, r8, #0, #3
   228dc:	f36f 00c5 	bfc	r0, #3, #3
   228e0:	f364 108f 	bfi	r0, r4, #6, #10
   228e4:	493a      	ldr	r1, [pc, #232]	; (229d0 <bus_fault.isra.2+0x130>)
   228e6:	f023 fedc 	bl	466a2 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   228ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
   228ec:	051a      	lsls	r2, r3, #20
   228ee:	d50b      	bpl.n	22908 <bus_fault.isra.2+0x68>
		PR_FAULT_INFO("  Unstacking error");
   228f0:	f04f 0000 	mov.w	r0, #0
   228f4:	2301      	movs	r3, #1
   228f6:	f363 0002 	bfi	r0, r3, #0, #3
   228fa:	f36f 00c5 	bfc	r0, #3, #3
   228fe:	f364 108f 	bfi	r0, r4, #6, #10
   22902:	4934      	ldr	r1, [pc, #208]	; (229d4 <bus_fault.isra.2+0x134>)
   22904:	f023 fecd 	bl	466a2 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   22908:	4d2f      	ldr	r5, [pc, #188]	; (229c8 <bus_fault.isra.2+0x128>)
   2290a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2290c:	059b      	lsls	r3, r3, #22
   2290e:	d520      	bpl.n	22952 <bus_fault.isra.2+0xb2>
		PR_FAULT_INFO("  Precise data bus error");
   22910:	f04f 0801 	mov.w	r8, #1
   22914:	f04f 0000 	mov.w	r0, #0
   22918:	f368 0002 	bfi	r0, r8, #0, #3
   2291c:	f36f 00c5 	bfc	r0, #3, #3
   22920:	f364 108f 	bfi	r0, r4, #6, #10
   22924:	492c      	ldr	r1, [pc, #176]	; (229d8 <bus_fault.isra.2+0x138>)
   22926:	f023 febc 	bl	466a2 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   2292a:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   2292c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2292e:	0418      	lsls	r0, r3, #16
   22930:	d50f      	bpl.n	22952 <bus_fault.isra.2+0xb2>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   22932:	f04f 0000 	mov.w	r0, #0
   22936:	f368 0002 	bfi	r0, r8, #0, #3
   2293a:	f36f 00c5 	bfc	r0, #3, #3
   2293e:	f364 108f 	bfi	r0, r4, #6, #10
   22942:	4926      	ldr	r1, [pc, #152]	; (229dc <bus_fault.isra.2+0x13c>)
   22944:	f023 fead 	bl	466a2 <log_string_sync>
			if (from_hard_fault) {
   22948:	b11f      	cbz	r7, 22952 <bus_fault.isra.2+0xb2>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   2294a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2294c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   22950:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   22952:	4d1d      	ldr	r5, [pc, #116]	; (229c8 <bus_fault.isra.2+0x128>)
   22954:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22956:	0559      	lsls	r1, r3, #21
   22958:	d50b      	bpl.n	22972 <bus_fault.isra.2+0xd2>
		PR_FAULT_INFO("  Imprecise data bus error");
   2295a:	f04f 0000 	mov.w	r0, #0
   2295e:	2301      	movs	r3, #1
   22960:	f363 0002 	bfi	r0, r3, #0, #3
   22964:	f36f 00c5 	bfc	r0, #3, #3
   22968:	f364 108f 	bfi	r0, r4, #6, #10
   2296c:	491c      	ldr	r1, [pc, #112]	; (229e0 <bus_fault.isra.2+0x140>)
   2296e:	f023 fe98 	bl	466a2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   22972:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22974:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   22978:	d014      	beq.n	229a4 <bus_fault.isra.2+0x104>
		PR_FAULT_INFO("  Instruction bus error");
   2297a:	f04f 0000 	mov.w	r0, #0
   2297e:	2301      	movs	r3, #1
   22980:	f363 0002 	bfi	r0, r3, #0, #3
   22984:	f36f 00c5 	bfc	r0, #3, #3
   22988:	4916      	ldr	r1, [pc, #88]	; (229e4 <bus_fault.isra.2+0x144>)
   2298a:	f364 108f 	bfi	r0, r4, #6, #10
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   2298e:	f023 fe88 	bl	466a2 <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   22992:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   22994:	4a0c      	ldr	r2, [pc, #48]	; (229c8 <bus_fault.isra.2+0x128>)
   22996:	6a93      	ldr	r3, [r2, #40]	; 0x28
   22998:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   2299c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   2299e:	7030      	strb	r0, [r6, #0]

	return reason;
}
   229a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   229a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   229a6:	0492      	lsls	r2, r2, #18
   229a8:	d5f3      	bpl.n	22992 <bus_fault.isra.2+0xf2>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   229aa:	f04f 0000 	mov.w	r0, #0
   229ae:	2201      	movs	r2, #1
   229b0:	f362 0002 	bfi	r0, r2, #0, #3
   229b4:	f363 00c5 	bfi	r0, r3, #3, #3
   229b8:	f364 108f 	bfi	r0, r4, #6, #10
   229bc:	490a      	ldr	r1, [pc, #40]	; (229e8 <bus_fault.isra.2+0x148>)
   229be:	e7e6      	b.n	2298e <bus_fault.isra.2+0xee>
   229c0:	00049018 	.word	0x00049018
   229c4:	000490f0 	.word	0x000490f0
   229c8:	e000ed00 	.word	0xe000ed00
   229cc:	0004c971 	.word	0x0004c971
   229d0:	0004c987 	.word	0x0004c987
   229d4:	0004c998 	.word	0x0004c998
   229d8:	0004c9ab 	.word	0x0004c9ab
   229dc:	0004c9c4 	.word	0x0004c9c4
   229e0:	0004c9d9 	.word	0x0004c9d9
   229e4:	0004c9f4 	.word	0x0004c9f4
   229e8:	0004ca0c 	.word	0x0004ca0c

000229ec <usage_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
   229ec:	b570      	push	{r4, r5, r6, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   229ee:	f04f 0000 	mov.w	r0, #0
   229f2:	2601      	movs	r6, #1
   229f4:	4b42      	ldr	r3, [pc, #264]	; (22b00 <usage_fault.isra.3+0x114>)
   229f6:	4c43      	ldr	r4, [pc, #268]	; (22b04 <usage_fault.isra.3+0x118>)
   229f8:	f366 0002 	bfi	r0, r6, #0, #3
   229fc:	1ae4      	subs	r4, r4, r3
   229fe:	f36f 00c5 	bfc	r0, #3, #3
   22a02:	f3c4 04c9 	ubfx	r4, r4, #3, #10

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   22a06:	4d40      	ldr	r5, [pc, #256]	; (22b08 <usage_fault.isra.3+0x11c>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   22a08:	f364 108f 	bfi	r0, r4, #6, #10
   22a0c:	493f      	ldr	r1, [pc, #252]	; (22b0c <usage_fault.isra.3+0x120>)
   22a0e:	f023 fe48 	bl	466a2 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   22a12:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   22a14:	0193      	lsls	r3, r2, #6
   22a16:	d50a      	bpl.n	22a2e <usage_fault.isra.3+0x42>
		PR_FAULT_INFO("  Division by zero");
   22a18:	f04f 0000 	mov.w	r0, #0
   22a1c:	f366 0002 	bfi	r0, r6, #0, #3
   22a20:	f36f 00c5 	bfc	r0, #3, #3
   22a24:	f364 108f 	bfi	r0, r4, #6, #10
   22a28:	4939      	ldr	r1, [pc, #228]	; (22b10 <usage_fault.isra.3+0x124>)
   22a2a:	f023 fe3a 	bl	466a2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   22a2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22a30:	01dd      	lsls	r5, r3, #7
   22a32:	d50b      	bpl.n	22a4c <usage_fault.isra.3+0x60>
		PR_FAULT_INFO("  Unaligned memory access");
   22a34:	f04f 0000 	mov.w	r0, #0
   22a38:	2301      	movs	r3, #1
   22a3a:	f363 0002 	bfi	r0, r3, #0, #3
   22a3e:	f36f 00c5 	bfc	r0, #3, #3
   22a42:	f364 108f 	bfi	r0, r4, #6, #10
   22a46:	4933      	ldr	r1, [pc, #204]	; (22b14 <usage_fault.isra.3+0x128>)
   22a48:	f023 fe2b 	bl	466a2 <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   22a4c:	4b2e      	ldr	r3, [pc, #184]	; (22b08 <usage_fault.isra.3+0x11c>)
   22a4e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   22a50:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   22a54:	d00c      	beq.n	22a70 <usage_fault.isra.3+0x84>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   22a56:	2301      	movs	r3, #1
   22a58:	f04f 0000 	mov.w	r0, #0
   22a5c:	f363 0002 	bfi	r0, r3, #0, #3
   22a60:	f36f 00c5 	bfc	r0, #3, #3
   22a64:	f364 108f 	bfi	r0, r4, #6, #10
   22a68:	492b      	ldr	r1, [pc, #172]	; (22b18 <usage_fault.isra.3+0x12c>)
   22a6a:	f023 fe1a 	bl	466a2 <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   22a6e:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   22a70:	4e25      	ldr	r6, [pc, #148]	; (22b08 <usage_fault.isra.3+0x11c>)
   22a72:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   22a74:	0310      	lsls	r0, r2, #12
   22a76:	d50b      	bpl.n	22a90 <usage_fault.isra.3+0xa4>
		PR_FAULT_INFO("  No coprocessor instructions");
   22a78:	f04f 0000 	mov.w	r0, #0
   22a7c:	2301      	movs	r3, #1
   22a7e:	f363 0002 	bfi	r0, r3, #0, #3
   22a82:	f36f 00c5 	bfc	r0, #3, #3
   22a86:	f364 108f 	bfi	r0, r4, #6, #10
   22a8a:	4924      	ldr	r1, [pc, #144]	; (22b1c <usage_fault.isra.3+0x130>)
   22a8c:	f023 fe09 	bl	466a2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   22a90:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   22a92:	0359      	lsls	r1, r3, #13
   22a94:	d50b      	bpl.n	22aae <usage_fault.isra.3+0xc2>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   22a96:	f04f 0000 	mov.w	r0, #0
   22a9a:	2301      	movs	r3, #1
   22a9c:	f363 0002 	bfi	r0, r3, #0, #3
   22aa0:	f36f 00c5 	bfc	r0, #3, #3
   22aa4:	f364 108f 	bfi	r0, r4, #6, #10
   22aa8:	491d      	ldr	r1, [pc, #116]	; (22b20 <usage_fault.isra.3+0x134>)
   22aaa:	f023 fdfa 	bl	466a2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   22aae:	4e16      	ldr	r6, [pc, #88]	; (22b08 <usage_fault.isra.3+0x11c>)
   22ab0:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   22ab2:	0392      	lsls	r2, r2, #14
   22ab4:	d50b      	bpl.n	22ace <usage_fault.isra.3+0xe2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   22ab6:	f04f 0000 	mov.w	r0, #0
   22aba:	2301      	movs	r3, #1
   22abc:	f363 0002 	bfi	r0, r3, #0, #3
   22ac0:	f36f 00c5 	bfc	r0, #3, #3
   22ac4:	f364 108f 	bfi	r0, r4, #6, #10
   22ac8:	4916      	ldr	r1, [pc, #88]	; (22b24 <usage_fault.isra.3+0x138>)
   22aca:	f023 fdea 	bl	466a2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   22ace:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   22ad0:	03db      	lsls	r3, r3, #15
   22ad2:	d50b      	bpl.n	22aec <usage_fault.isra.3+0x100>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   22ad4:	f04f 0000 	mov.w	r0, #0
   22ad8:	2301      	movs	r3, #1
   22ada:	f363 0002 	bfi	r0, r3, #0, #3
   22ade:	f36f 00c5 	bfc	r0, #3, #3
   22ae2:	f364 108f 	bfi	r0, r4, #6, #10
   22ae6:	4910      	ldr	r1, [pc, #64]	; (22b28 <usage_fault.isra.3+0x13c>)
   22ae8:	f023 fddb 	bl	466a2 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   22aec:	4a06      	ldr	r2, [pc, #24]	; (22b08 <usage_fault.isra.3+0x11c>)

	return reason;
}
   22aee:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   22af0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   22af2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   22af6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   22afa:	6293      	str	r3, [r2, #40]	; 0x28
}
   22afc:	bd70      	pop	{r4, r5, r6, pc}
   22afe:	bf00      	nop
   22b00:	00049018 	.word	0x00049018
   22b04:	000490f0 	.word	0x000490f0
   22b08:	e000ed00 	.word	0xe000ed00
   22b0c:	0004cb3e 	.word	0x0004cb3e
   22b10:	0004cb56 	.word	0x0004cb56
   22b14:	0004cb69 	.word	0x0004cb69
   22b18:	0004cb83 	.word	0x0004cb83
   22b1c:	0004cbad 	.word	0x0004cbad
   22b20:	0004cbcb 	.word	0x0004cbcb
   22b24:	0004cbf0 	.word	0x0004cbf0
   22b28:	0004cc0a 	.word	0x0004cc0a

00022b2c <mem_manage_fault.isra.6>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   22b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22b30:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   22b32:	f04f 0801 	mov.w	r8, #1
   22b36:	f04f 0000 	mov.w	r0, #0
   22b3a:	4b46      	ldr	r3, [pc, #280]	; (22c54 <mem_manage_fault.isra.6+0x128>)
   22b3c:	4c46      	ldr	r4, [pc, #280]	; (22c58 <mem_manage_fault.isra.6+0x12c>)
   22b3e:	f368 0002 	bfi	r0, r8, #0, #3
   22b42:	1ae4      	subs	r4, r4, r3
   22b44:	f36f 00c5 	bfc	r0, #3, #3
   22b48:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   22b4c:	4d43      	ldr	r5, [pc, #268]	; (22c5c <mem_manage_fault.isra.6+0x130>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   22b4e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   22b50:	f364 108f 	bfi	r0, r4, #6, #10
   22b54:	4942      	ldr	r1, [pc, #264]	; (22c60 <mem_manage_fault.isra.6+0x134>)
   22b56:	f023 fda4 	bl	466a2 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   22b5a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   22b5c:	06d1      	lsls	r1, r2, #27
   22b5e:	d50a      	bpl.n	22b76 <mem_manage_fault.isra.6+0x4a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   22b60:	f04f 0000 	mov.w	r0, #0
   22b64:	f368 0002 	bfi	r0, r8, #0, #3
   22b68:	f36f 00c5 	bfc	r0, #3, #3
   22b6c:	f364 108f 	bfi	r0, r4, #6, #10
   22b70:	493c      	ldr	r1, [pc, #240]	; (22c64 <mem_manage_fault.isra.6+0x138>)
   22b72:	f023 fd96 	bl	466a2 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   22b76:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22b78:	071a      	lsls	r2, r3, #28
   22b7a:	d50b      	bpl.n	22b94 <mem_manage_fault.isra.6+0x68>
		PR_FAULT_INFO("  Unstacking error");
   22b7c:	f04f 0000 	mov.w	r0, #0
   22b80:	2301      	movs	r3, #1
   22b82:	f363 0002 	bfi	r0, r3, #0, #3
   22b86:	f36f 00c5 	bfc	r0, #3, #3
   22b8a:	f364 108f 	bfi	r0, r4, #6, #10
   22b8e:	4936      	ldr	r1, [pc, #216]	; (22c68 <mem_manage_fault.isra.6+0x13c>)
   22b90:	f023 fd87 	bl	466a2 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   22b94:	4d31      	ldr	r5, [pc, #196]	; (22c5c <mem_manage_fault.isra.6+0x130>)
   22b96:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22b98:	079b      	lsls	r3, r3, #30
   22b9a:	d520      	bpl.n	22bde <mem_manage_fault.isra.6+0xb2>
		PR_FAULT_INFO("  Data Access Violation");
   22b9c:	f04f 0801 	mov.w	r8, #1
   22ba0:	f04f 0000 	mov.w	r0, #0
   22ba4:	f368 0002 	bfi	r0, r8, #0, #3
   22ba8:	f36f 00c5 	bfc	r0, #3, #3
   22bac:	f364 108f 	bfi	r0, r4, #6, #10
   22bb0:	492e      	ldr	r1, [pc, #184]	; (22c6c <mem_manage_fault.isra.6+0x140>)
   22bb2:	f023 fd76 	bl	466a2 <log_string_sync>
		mmfar = SCB->MMFAR;
   22bb6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   22bb8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22bba:	0618      	lsls	r0, r3, #24
   22bbc:	d50f      	bpl.n	22bde <mem_manage_fault.isra.6+0xb2>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   22bbe:	f04f 0000 	mov.w	r0, #0
   22bc2:	f368 0002 	bfi	r0, r8, #0, #3
   22bc6:	f36f 00c5 	bfc	r0, #3, #3
   22bca:	f364 108f 	bfi	r0, r4, #6, #10
   22bce:	4928      	ldr	r1, [pc, #160]	; (22c70 <mem_manage_fault.isra.6+0x144>)
   22bd0:	f023 fd67 	bl	466a2 <log_string_sync>
			if (from_hard_fault) {
   22bd4:	b11f      	cbz	r7, 22bde <mem_manage_fault.isra.6+0xb2>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   22bd6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22bd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   22bdc:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   22bde:	4d1f      	ldr	r5, [pc, #124]	; (22c5c <mem_manage_fault.isra.6+0x130>)
   22be0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   22be2:	07d1      	lsls	r1, r2, #31
   22be4:	d50b      	bpl.n	22bfe <mem_manage_fault.isra.6+0xd2>
		PR_FAULT_INFO("  Instruction Access Violation");
   22be6:	f04f 0000 	mov.w	r0, #0
   22bea:	2301      	movs	r3, #1
   22bec:	f363 0002 	bfi	r0, r3, #0, #3
   22bf0:	f36f 00c5 	bfc	r0, #3, #3
   22bf4:	f364 108f 	bfi	r0, r4, #6, #10
   22bf8:	491e      	ldr	r1, [pc, #120]	; (22c74 <mem_manage_fault.isra.6+0x148>)
   22bfa:	f023 fd52 	bl	466a2 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   22bfe:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22c00:	069a      	lsls	r2, r3, #26
   22c02:	d50b      	bpl.n	22c1c <mem_manage_fault.isra.6+0xf0>
		PR_FAULT_INFO(
   22c04:	f04f 0000 	mov.w	r0, #0
   22c08:	2301      	movs	r3, #1
   22c0a:	f363 0002 	bfi	r0, r3, #0, #3
   22c0e:	f36f 00c5 	bfc	r0, #3, #3
   22c12:	f364 108f 	bfi	r0, r4, #6, #10
   22c16:	4918      	ldr	r1, [pc, #96]	; (22c78 <mem_manage_fault.isra.6+0x14c>)
   22c18:	f023 fd43 	bl	466a2 <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   22c1c:	4b0f      	ldr	r3, [pc, #60]	; (22c5c <mem_manage_fault.isra.6+0x130>)
   22c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22c20:	06db      	lsls	r3, r3, #27
   22c22:	d50e      	bpl.n	22c42 <mem_manage_fault.isra.6+0x116>
	__ASSERT(0,
   22c24:	4915      	ldr	r1, [pc, #84]	; (22c7c <mem_manage_fault.isra.6+0x150>)
   22c26:	f240 133d 	movw	r3, #317	; 0x13d
   22c2a:	4a15      	ldr	r2, [pc, #84]	; (22c80 <mem_manage_fault.isra.6+0x154>)
   22c2c:	4815      	ldr	r0, [pc, #84]	; (22c84 <mem_manage_fault.isra.6+0x158>)
   22c2e:	f023 fd15 	bl	4665c <printk>
   22c32:	4815      	ldr	r0, [pc, #84]	; (22c88 <mem_manage_fault.isra.6+0x15c>)
   22c34:	f023 fd12 	bl	4665c <printk>
   22c38:	f240 113d 	movw	r1, #317	; 0x13d
   22c3c:	4810      	ldr	r0, [pc, #64]	; (22c80 <mem_manage_fault.isra.6+0x154>)
   22c3e:	f023 fd1a 	bl	46676 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
   22c42:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   22c44:	4a05      	ldr	r2, [pc, #20]	; (22c5c <mem_manage_fault.isra.6+0x130>)
   22c46:	6a93      	ldr	r3, [r2, #40]	; 0x28
   22c48:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   22c4c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   22c4e:	7030      	strb	r0, [r6, #0]
}
   22c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22c54:	00049018 	.word	0x00049018
   22c58:	000490f0 	.word	0x000490f0
   22c5c:	e000ed00 	.word	0xe000ed00
   22c60:	0004ca3b 	.word	0x0004ca3b
   22c64:	0004ca51 	.word	0x0004ca51
   22c68:	0004c998 	.word	0x0004c998
   22c6c:	0004ca84 	.word	0x0004ca84
   22c70:	0004ca9c 	.word	0x0004ca9c
   22c74:	0004cab2 	.word	0x0004cab2
   22c78:	0004ca0c 	.word	0x0004ca0c
   22c7c:	000505de 	.word	0x000505de
   22c80:	0004cad1 	.word	0x0004cad1
   22c84:	0004b5bf 	.word	0x0004b5bf
   22c88:	0004cb04 	.word	0x0004cb04

00022c8c <z_arm_fault>:
 * running a Secure Firmware.
 */
void z_arm_fault(z_arch_esf_t *esf, u32_t exc_return)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   22c8c:	4b5a      	ldr	r3, [pc, #360]	; (22df8 <z_arm_fault+0x16c>)
{
   22c8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   22c90:	685c      	ldr	r4, [r3, #4]
				goto _exit_fatal;
			}
		}
	}
#elif defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   22c92:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
   22c96:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
{
   22c9a:	4606      	mov	r6, r0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   22c9c:	f040 80aa 	bne.w	22df4 <z_arm_fault+0x168>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value */
		goto _exit_fatal;
	}
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   22ca0:	f011 0301 	ands.w	r3, r1, #1
   22ca4:	f040 80a6 	bne.w	22df4 <z_arm_fault+0x168>
		 * This is a fatal error.
		 */
		goto _exit_fatal;
	}

	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   22ca8:	064a      	lsls	r2, r1, #25
   22caa:	d50f      	bpl.n	22ccc <z_arm_fault+0x40>
		 * Note that Non-Secure firmware cannot inspect the Secure
		 * stack to determine the root cause of the fault. Fault
		 * inspection will indicate the Non-Secure instruction
		 * that performed the branch to the Secure domain.
		 */
		PR_FAULT_INFO("Exception occurred in Secure State");
   22cac:	2201      	movs	r2, #1
   22cae:	f04f 0000 	mov.w	r0, #0
   22cb2:	f362 0002 	bfi	r0, r2, #0, #3
   22cb6:	f363 00c5 	bfi	r0, r3, #3, #3
   22cba:	4a50      	ldr	r2, [pc, #320]	; (22dfc <z_arm_fault+0x170>)
   22cbc:	4b50      	ldr	r3, [pc, #320]	; (22e00 <z_arm_fault+0x174>)
   22cbe:	4951      	ldr	r1, [pc, #324]	; (22e04 <z_arm_fault+0x178>)
   22cc0:	1a9b      	subs	r3, r3, r2
   22cc2:	08db      	lsrs	r3, r3, #3
   22cc4:	f363 108f 	bfi	r0, r3, #6, #10
   22cc8:	f023 fceb 	bl	466a2 <log_string_sync>
	*recoverable = false;
   22ccc:	2300      	movs	r3, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   22cce:	f3c4 0108 	ubfx	r1, r4, #0, #9
	*recoverable = false;
   22cd2:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   22cd6:	1ecb      	subs	r3, r1, #3
   22cd8:	2b09      	cmp	r3, #9
   22cda:	d873      	bhi.n	22dc4 <z_arm_fault+0x138>
   22cdc:	e8df f003 	tbb	[pc, r3]
   22ce0:	585f5b05 	.word	0x585f5b05
   22ce4:	72727272 	.word	0x72727272
   22ce8:	6372      	.short	0x6372
	PR_FAULT_INFO("***** HARD FAULT *****");
   22cea:	2701      	movs	r7, #1
   22cec:	f04f 0000 	mov.w	r0, #0
	*recoverable = false;
   22cf0:	2400      	movs	r4, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
   22cf2:	4b42      	ldr	r3, [pc, #264]	; (22dfc <z_arm_fault+0x170>)
   22cf4:	4d42      	ldr	r5, [pc, #264]	; (22e00 <z_arm_fault+0x174>)
   22cf6:	f367 0002 	bfi	r0, r7, #0, #3
   22cfa:	1aed      	subs	r5, r5, r3
   22cfc:	f36f 00c5 	bfc	r0, #3, #3
   22d00:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   22d04:	f365 108f 	bfi	r0, r5, #6, #10
   22d08:	493f      	ldr	r1, [pc, #252]	; (22e08 <z_arm_fault+0x17c>)
   22d0a:	f023 fcca 	bl	466a2 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   22d0e:	4a3a      	ldr	r2, [pc, #232]	; (22df8 <z_arm_fault+0x16c>)
	*recoverable = false;
   22d10:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   22d14:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   22d16:	f013 0302 	ands.w	r3, r3, #2
   22d1a:	d00c      	beq.n	22d36 <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   22d1c:	f04f 0000 	mov.w	r0, #0
   22d20:	f367 0002 	bfi	r0, r7, #0, #3
   22d24:	f364 00c5 	bfi	r0, r4, #3, #3
   22d28:	4938      	ldr	r1, [pc, #224]	; (22e0c <z_arm_fault+0x180>)
   22d2a:	f365 108f 	bfi	r0, r5, #6, #10
	PR_FAULT_INFO(
   22d2e:	f023 fcb8 	bl	466a2 <log_string_sync>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   22d32:	2000      	movs	r0, #0
   22d34:	e016      	b.n	22d64 <z_arm_fault+0xd8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   22d36:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   22d38:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   22d3c:	d015      	beq.n	22d6a <z_arm_fault+0xde>
		PR_EXC("  Fault escalation (see below)");
   22d3e:	f04f 0000 	mov.w	r0, #0
   22d42:	f367 0002 	bfi	r0, r7, #0, #3
   22d46:	f363 00c5 	bfi	r0, r3, #3, #3
   22d4a:	f365 108f 	bfi	r0, r5, #6, #10
   22d4e:	4930      	ldr	r1, [pc, #192]	; (22e10 <z_arm_fault+0x184>)
   22d50:	f023 fca7 	bl	466a2 <log_string_sync>
		if (SCB_MMFSR != 0) {
   22d54:	4b2f      	ldr	r3, [pc, #188]	; (22e14 <z_arm_fault+0x188>)
   22d56:	781b      	ldrb	r3, [r3, #0]
   22d58:	b163      	cbz	r3, 22d74 <z_arm_fault+0xe8>
			reason = mem_manage_fault(esf, 1, recoverable);
   22d5a:	4638      	mov	r0, r7
   22d5c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   22d60:	f7ff fee4 	bl	22b2c <mem_manage_fault.isra.6>
#else
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   22d64:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22d68:	b913      	cbnz	r3, 22d70 <z_arm_fault+0xe4>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
   22d6a:	4631      	mov	r1, r6
   22d6c:	f7ff fcbe 	bl	226ec <z_arm_fatal_error>
}
   22d70:	b003      	add	sp, #12
   22d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   22d74:	4b28      	ldr	r3, [pc, #160]	; (22e18 <z_arm_fault+0x18c>)
   22d76:	781b      	ldrb	r3, [r3, #0]
   22d78:	b12b      	cbz	r3, 22d86 <z_arm_fault+0xfa>
			reason = bus_fault(esf, 1, recoverable);
   22d7a:	4638      	mov	r0, r7
   22d7c:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   22d80:	f7ff fd8e 	bl	228a0 <bus_fault.isra.2>
   22d84:	e7ee      	b.n	22d64 <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
   22d86:	4b25      	ldr	r3, [pc, #148]	; (22e1c <z_arm_fault+0x190>)
   22d88:	8818      	ldrh	r0, [r3, #0]
   22d8a:	b280      	uxth	r0, r0
   22d8c:	2800      	cmp	r0, #0
   22d8e:	d0e9      	beq.n	22d64 <z_arm_fault+0xd8>
		reason = usage_fault(esf);
   22d90:	f7ff fe2c 	bl	229ec <usage_fault.isra.3>
   22d94:	e7e6      	b.n	22d64 <z_arm_fault+0xd8>
		reason = mem_manage_fault(esf, 0, recoverable);
   22d96:	f10d 0107 	add.w	r1, sp, #7
   22d9a:	2000      	movs	r0, #0
   22d9c:	e7e0      	b.n	22d60 <z_arm_fault+0xd4>
		reason = bus_fault(esf, 0, recoverable);
   22d9e:	f10d 0107 	add.w	r1, sp, #7
   22da2:	2000      	movs	r0, #0
   22da4:	e7ec      	b.n	22d80 <z_arm_fault+0xf4>
	PR_FAULT_INFO(
   22da6:	2301      	movs	r3, #1
   22da8:	f04f 0000 	mov.w	r0, #0
   22dac:	4a13      	ldr	r2, [pc, #76]	; (22dfc <z_arm_fault+0x170>)
   22dae:	f363 0002 	bfi	r0, r3, #0, #3
   22db2:	4b13      	ldr	r3, [pc, #76]	; (22e00 <z_arm_fault+0x174>)
   22db4:	f36f 00c5 	bfc	r0, #3, #3
   22db8:	1a9b      	subs	r3, r3, r2
   22dba:	08db      	lsrs	r3, r3, #3
   22dbc:	f363 108f 	bfi	r0, r3, #6, #10
   22dc0:	4917      	ldr	r1, [pc, #92]	; (22e20 <z_arm_fault+0x194>)
   22dc2:	e7b4      	b.n	22d2e <z_arm_fault+0xa2>
	PR_FAULT_INFO("***** %s %d) *****",
   22dc4:	2301      	movs	r3, #1
   22dc6:	f04f 0000 	mov.w	r0, #0
   22dca:	4a0c      	ldr	r2, [pc, #48]	; (22dfc <z_arm_fault+0x170>)
   22dcc:	f363 0002 	bfi	r0, r3, #0, #3
   22dd0:	4b0b      	ldr	r3, [pc, #44]	; (22e00 <z_arm_fault+0x174>)
   22dd2:	4c14      	ldr	r4, [pc, #80]	; (22e24 <z_arm_fault+0x198>)
   22dd4:	1a9b      	subs	r3, r3, r2
   22dd6:	4a14      	ldr	r2, [pc, #80]	; (22e28 <z_arm_fault+0x19c>)
   22dd8:	08db      	lsrs	r3, r3, #3
   22dda:	f36f 00c5 	bfc	r0, #3, #3
   22dde:	f363 108f 	bfi	r0, r3, #6, #10
   22de2:	290f      	cmp	r1, #15
   22de4:	bfd8      	it	le
   22de6:	4622      	movle	r2, r4
   22de8:	f1a1 0310 	sub.w	r3, r1, #16
   22dec:	490f      	ldr	r1, [pc, #60]	; (22e2c <z_arm_fault+0x1a0>)
   22dee:	f023 fc58 	bl	466a2 <log_string_sync>
   22df2:	e79e      	b.n	22d32 <z_arm_fault+0xa6>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   22df4:	2000      	movs	r0, #0
   22df6:	e7b8      	b.n	22d6a <z_arm_fault+0xde>
   22df8:	e000ed00 	.word	0xe000ed00
   22dfc:	00049018 	.word	0x00049018
   22e00:	000490f0 	.word	0x000490f0
   22e04:	0004cc63 	.word	0x0004cc63
   22e08:	0004cc86 	.word	0x0004cc86
   22e0c:	0004cc9d 	.word	0x0004cc9d
   22e10:	0004ccbe 	.word	0x0004ccbe
   22e14:	e000ed28 	.word	0xe000ed28
   22e18:	e000ed29 	.word	0xe000ed29
   22e1c:	e000ed2a 	.word	0xe000ed2a
   22e20:	0004ccdd 	.word	0x0004ccdd
   22e24:	0004cc35 	.word	0x0004cc35
   22e28:	0004cc4a 	.word	0x0004cc4a
   22e2c:	0004cd13 	.word	0x0004cd13

00022e30 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   22e30:	4b04      	ldr	r3, [pc, #16]	; (22e44 <z_arm_fault_init+0x14>)
   22e32:	695a      	ldr	r2, [r3, #20]
   22e34:	f042 0210 	orr.w	r2, r2, #16
   22e38:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   22e3a:	695a      	ldr	r2, [r3, #20]
   22e3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   22e40:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   22e42:	4770      	bx	lr
   22e44:	e000ed00 	.word	0xe000ed00

00022e48 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   22e48:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   22e4c:	4905      	ldr	r1, [pc, #20]	; (22e64 <sys_arch_reboot+0x1c>)
   22e4e:	4b06      	ldr	r3, [pc, #24]	; (22e68 <sys_arch_reboot+0x20>)
   22e50:	68ca      	ldr	r2, [r1, #12]
   22e52:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   22e56:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   22e58:	60cb      	str	r3, [r1, #12]
   22e5a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   22e5e:	bf00      	nop
   22e60:	e7fd      	b.n	22e5e <sys_arch_reboot+0x16>
   22e62:	bf00      	nop
   22e64:	e000ed00 	.word	0xe000ed00
   22e68:	05fa0004 	.word	0x05fa0004

00022e6c <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   22e6c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22e6e:	2120      	movs	r1, #32
   22e70:	4803      	ldr	r0, [pc, #12]	; (22e80 <z_arm_int_lib_init+0x14>)
   22e72:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   22e74:	3301      	adds	r3, #1
   22e76:	2b41      	cmp	r3, #65	; 0x41
   22e78:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   22e7c:	d1f9      	bne.n	22e72 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   22e7e:	4770      	bx	lr
   22e80:	e000e100 	.word	0xe000e100

00022e84 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   22e84:	b538      	push	{r3, r4, r5, lr}
   22e86:	4604      	mov	r4, r0
	__asm__ volatile(
   22e88:	f04f 0320 	mov.w	r3, #32
   22e8c:	f3ef 8511 	mrs	r5, BASEPRI
   22e90:	f383 8811 	msr	BASEPRI, r3
   22e94:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   22e98:	7b03      	ldrb	r3, [r0, #12]
   22e9a:	07db      	lsls	r3, r3, #31
   22e9c:	d50c      	bpl.n	22eb8 <z_impl_k_thread_abort+0x34>
   22e9e:	4912      	ldr	r1, [pc, #72]	; (22ee8 <z_impl_k_thread_abort+0x64>)
   22ea0:	2325      	movs	r3, #37	; 0x25
   22ea2:	4a12      	ldr	r2, [pc, #72]	; (22eec <z_impl_k_thread_abort+0x68>)
   22ea4:	4812      	ldr	r0, [pc, #72]	; (22ef0 <z_impl_k_thread_abort+0x6c>)
   22ea6:	f023 fbd9 	bl	4665c <printk>
   22eaa:	4812      	ldr	r0, [pc, #72]	; (22ef4 <z_impl_k_thread_abort+0x70>)
   22eac:	f023 fbd6 	bl	4665c <printk>
   22eb0:	2125      	movs	r1, #37	; 0x25
   22eb2:	480e      	ldr	r0, [pc, #56]	; (22eec <z_impl_k_thread_abort+0x68>)
   22eb4:	f023 fbdf 	bl	46676 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
   22eb8:	4620      	mov	r0, r4
   22eba:	f025 fe4b 	bl	48b54 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   22ebe:	4b0e      	ldr	r3, [pc, #56]	; (22ef8 <z_impl_k_thread_abort+0x74>)
   22ec0:	689b      	ldr	r3, [r3, #8]
   22ec2:	42a3      	cmp	r3, r4
   22ec4:	d10b      	bne.n	22ede <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   22ec6:	4b0d      	ldr	r3, [pc, #52]	; (22efc <z_impl_k_thread_abort+0x78>)
   22ec8:	685a      	ldr	r2, [r3, #4]
   22eca:	f3c2 0208 	ubfx	r2, r2, #0, #9
   22ece:	b912      	cbnz	r2, 22ed6 <z_impl_k_thread_abort+0x52>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = z_arch_swap(key);
   22ed0:	4628      	mov	r0, r5
   22ed2:	f7ff fb21 	bl	22518 <z_arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   22ed6:	685a      	ldr	r2, [r3, #4]
   22ed8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   22edc:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   22ede:	4628      	mov	r0, r5
}
   22ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   22ee4:	f025 bdbb 	b.w	48a5e <z_reschedule_irqlock>
   22ee8:	0004cd60 	.word	0x0004cd60
   22eec:	0004cd26 	.word	0x0004cd26
   22ef0:	0004b5bf 	.word	0x0004b5bf
   22ef4:	0004cd8e 	.word	0x0004cd8e
   22ef8:	2002a2dc 	.word	0x2002a2dc
   22efc:	e000ed00 	.word	0xe000ed00

00022f00 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   22f00:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   22f02:	4b0e      	ldr	r3, [pc, #56]	; (22f3c <z_arm_configure_static_mpu_regions+0x3c>)
{
   22f04:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   22f06:	9302      	str	r3, [sp, #8]
   22f08:	4b0d      	ldr	r3, [pc, #52]	; (22f40 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   22f0a:	4c0e      	ldr	r4, [pc, #56]	; (22f44 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   22f0c:	9303      	str	r3, [sp, #12]
   22f0e:	4b0e      	ldr	r3, [pc, #56]	; (22f48 <z_arm_configure_static_mpu_regions+0x48>)
	const struct k_mem_partition *static_regions[] = {
   22f10:	a808      	add	r0, sp, #32
		const struct k_mem_partition ramfunc_region =
   22f12:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   22f14:	ab02      	add	r3, sp, #8
   22f16:	f840 3d1c 	str.w	r3, [r0, #-28]!
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   22f1a:	4a0c      	ldr	r2, [pc, #48]	; (22f4c <z_arm_configure_static_mpu_regions+0x4c>)
   22f1c:	4623      	mov	r3, r4
   22f1e:	2101      	movs	r1, #1
   22f20:	f000 f982 	bl	23228 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   22f24:	2300      	movs	r3, #0
   22f26:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   22f28:	4b09      	ldr	r3, [pc, #36]	; (22f50 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   22f2a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   22f2c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   22f2e:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   22f30:	9305      	str	r3, [sp, #20]
   22f32:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   22f34:	f000 f99c 	bl	23270 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   22f38:	b008      	add	sp, #32
   22f3a:	bd10      	pop	{r4, pc}
   22f3c:	20020000 	.word	0x20020000
   22f40:	00000000 	.word	0x00000000
   22f44:	20040000 	.word	0x20040000
   22f48:	00010006 	.word	0x00010006
   22f4c:	20020000 	.word	0x20020000
   22f50:	20020000 	.word	0x20020000

00022f54 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   22f54:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   22f56:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   22f58:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   22f5a:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   22f5e:	f004 021f 	and.w	r2, r4, #31
   22f62:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   22f64:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   22f66:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   22f68:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   22f6c:	4904      	ldr	r1, [pc, #16]	; (22f80 <region_init+0x2c>)
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   22f6e:	f043 0301 	orr.w	r3, r3, #1
   22f72:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
   22f76:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   22f78:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   22f7a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   22f7c:	bd10      	pop	{r4, pc}
   22f7e:	bf00      	nop
   22f80:	e000ed90 	.word	0xe000ed90

00022f84 <region_allocate_and_init>:

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   22f84:	280f      	cmp	r0, #15
{
   22f86:	b510      	push	{r4, lr}
   22f88:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1)) {
   22f8a:	d914      	bls.n	22fb6 <region_allocate_and_init+0x32>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   22f8c:	2301      	movs	r3, #1
   22f8e:	f04f 0000 	mov.w	r0, #0
   22f92:	4a0a      	ldr	r2, [pc, #40]	; (22fbc <region_allocate_and_init+0x38>)
   22f94:	f363 0002 	bfi	r0, r3, #0, #3
   22f98:	4b09      	ldr	r3, [pc, #36]	; (22fc0 <region_allocate_and_init+0x3c>)
   22f9a:	f36f 00c5 	bfc	r0, #3, #3
   22f9e:	1a9b      	subs	r3, r3, r2
   22fa0:	08db      	lsrs	r3, r3, #3
   22fa2:	4622      	mov	r2, r4
   22fa4:	f363 108f 	bfi	r0, r3, #6, #10
   22fa8:	4906      	ldr	r1, [pc, #24]	; (22fc4 <region_allocate_and_init+0x40>)
   22faa:	f023 fb7a 	bl	466a2 <log_string_sync>
		return -EINVAL;
   22fae:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   22fb2:	4620      	mov	r0, r4
   22fb4:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   22fb6:	f7ff ffcd 	bl	22f54 <region_init>
	return index;
   22fba:	e7fa      	b.n	22fb2 <region_allocate_and_init+0x2e>
   22fbc:	00049018 	.word	0x00049018
   22fc0:	000490b8 	.word	0x000490b8
   22fc4:	0004cf5a 	.word	0x0004cf5a

00022fc8 <mpu_configure_regions.constprop.2>:

/* This internal function programs a set of given MPU regions
 * over a background memory area, optionally performing a
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
   22fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22fcc:	4607      	mov	r7, r0
   22fce:	4688      	mov	r8, r1
   22fd0:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   22fd2:	2600      	movs	r6, #0
	MPU->RNR = index;
   22fd4:	4d5a      	ldr	r5, [pc, #360]	; (23140 <mpu_configure_regions.constprop.2+0x178>)
static int mpu_configure_regions(const struct k_mem_partition
   22fd6:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   22fd8:	4546      	cmp	r6, r8
   22fda:	da41      	bge.n	23060 <mpu_configure_regions.constprop.2+0x98>
		if (regions[i]->size == 0U) {
   22fdc:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   22fe0:	f8d3 9004 	ldr.w	r9, [r3, #4]
   22fe4:	f1b9 0f00 	cmp.w	r9, #0
   22fe8:	d05d      	beq.n	230a6 <mpu_configure_regions.constprop.2+0xde>
		&&
   22fea:	f1b9 0f1f 	cmp.w	r9, #31
   22fee:	d924      	bls.n	2303a <mpu_configure_regions.constprop.2+0x72>
		&&
   22ff0:	f019 0f1f 	tst.w	r9, #31
   22ff4:	d121      	bne.n	2303a <mpu_configure_regions.constprop.2+0x72>
		((part->start &
   22ff6:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   22ffa:	f01a 0f1f 	tst.w	sl, #31
   22ffe:	d11c      	bne.n	2303a <mpu_configure_regions.constprop.2+0x72>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   23000:	4650      	mov	r0, sl
   23002:	f022 ff37 	bl	45e74 <arm_cmse_mpu_region_get>
   23006:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   23008:	eb09 000a 	add.w	r0, r9, sl
   2300c:	3801      	subs	r0, #1
   2300e:	f022 ff31 	bl	45e74 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   23012:	4583      	cmp	fp, r0
   23014:	d028      	beq.n	23068 <mpu_configure_regions.constprop.2+0xa0>
	return -EINVAL;
   23016:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   2301a:	2301      	movs	r3, #1
   2301c:	f04f 0000 	mov.w	r0, #0
   23020:	4a48      	ldr	r2, [pc, #288]	; (23144 <mpu_configure_regions.constprop.2+0x17c>)
   23022:	f363 0002 	bfi	r0, r3, #0, #3
   23026:	4b48      	ldr	r3, [pc, #288]	; (23148 <mpu_configure_regions.constprop.2+0x180>)
   23028:	f36f 00c5 	bfc	r0, #3, #3
   2302c:	1a9b      	subs	r3, r3, r2
   2302e:	08db      	lsrs	r3, r3, #3
   23030:	f363 108f 	bfi	r0, r3, #6, #10
   23034:	465a      	mov	r2, fp
   23036:	4945      	ldr	r1, [pc, #276]	; (2314c <mpu_configure_regions.constprop.2+0x184>)
   23038:	e00e      	b.n	23058 <mpu_configure_regions.constprop.2+0x90>
			LOG_ERR("Partition %u: sanity check failed.", i);
   2303a:	2301      	movs	r3, #1
   2303c:	f04f 0000 	mov.w	r0, #0
   23040:	4a40      	ldr	r2, [pc, #256]	; (23144 <mpu_configure_regions.constprop.2+0x17c>)
   23042:	f363 0002 	bfi	r0, r3, #0, #3
   23046:	4b40      	ldr	r3, [pc, #256]	; (23148 <mpu_configure_regions.constprop.2+0x180>)
   23048:	f36f 00c5 	bfc	r0, #3, #3
   2304c:	1a9b      	subs	r3, r3, r2
   2304e:	4632      	mov	r2, r6
   23050:	08db      	lsrs	r3, r3, #3
   23052:	493f      	ldr	r1, [pc, #252]	; (23150 <mpu_configure_regions.constprop.2+0x188>)
   23054:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   23058:	f023 fb23 	bl	466a2 <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   2305c:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   23060:	4620      	mov	r0, r4
   23062:	b005      	add	sp, #20
   23064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   23068:	f11b 0f16 	cmn.w	fp, #22
   2306c:	d0d5      	beq.n	2301a <mpu_configure_regions.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
   2306e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   23070:	455b      	cmp	r3, fp
   23072:	dbd2      	blt.n	2301a <mpu_configure_regions.constprop.2+0x52>
	MPU->RNR = index;
   23074:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   23078:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   2307a:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   2307e:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   23080:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   23084:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   23088:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   2308c:	e9d1 3200 	ldrd	r3, r2, [r1]
   23090:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   23092:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   23094:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   23098:	d118      	bne.n	230cc <mpu_configure_regions.constprop.2+0x104>
   2309a:	45ca      	cmp	sl, r9
   2309c:	d105      	bne.n	230aa <mpu_configure_regions.constprop.2+0xe2>
			mpu_configure_region(u_reg_index, regions[i]);
   2309e:	fa5f f08b 	uxtb.w	r0, fp
   230a2:	f023 fcd7 	bl	46a54 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   230a6:	3601      	adds	r6, #1
   230a8:	e796      	b.n	22fd8 <mpu_configure_regions.constprop.2+0x10>
	MPU->RNR = index;
   230aa:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   230ae:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   230b0:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   230b4:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   230b8:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   230ba:	60ea      	str	r2, [r5, #12]
			reg_index =
   230bc:	b2e0      	uxtb	r0, r4
			reg_index =
   230be:	f023 fcc9 	bl	46a54 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   230c2:	f110 0f16 	cmn.w	r0, #22
   230c6:	d0c9      	beq.n	2305c <mpu_configure_regions.constprop.2+0x94>
			reg_index++;
   230c8:	1c44      	adds	r4, r0, #1
   230ca:	e7ec      	b.n	230a6 <mpu_configure_regions.constprop.2+0xde>
	MPU->RNR = index;
   230cc:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   230d0:	692a      	ldr	r2, [r5, #16]
   230d2:	3b01      	subs	r3, #1
   230d4:	f023 031f 	bic.w	r3, r3, #31
   230d8:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   230dc:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   230de:	45ca      	cmp	sl, r9
   230e0:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   230e2:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   230e4:	d0eb      	beq.n	230be <mpu_configure_regions.constprop.2+0xf6>
			reg_index =
   230e6:	f023 fcb5 	bl	46a54 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   230ea:	f110 0f16 	cmn.w	r0, #22
   230ee:	d0b5      	beq.n	2305c <mpu_configure_regions.constprop.2+0x94>
	MPU->RNR = index;
   230f0:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   230f4:	68ea      	ldr	r2, [r5, #12]
   230f6:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   230fa:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   230fe:	f362 0304 	bfi	r3, r2, #0, #5
   23102:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   23106:	692b      	ldr	r3, [r5, #16]
   23108:	f89d 2008 	ldrb.w	r2, [sp, #8]
   2310c:	085b      	lsrs	r3, r3, #1
   2310e:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   23112:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   23116:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   2311a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2311e:	4413      	add	r3, r2
   23120:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   23122:	f023 031f 	bic.w	r3, r3, #31
   23126:	4453      	add	r3, sl
   23128:	eba3 0309 	sub.w	r3, r3, r9
			reg_index++;
   2312c:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   2312e:	f023 031f 	bic.w	r3, r3, #31
			reg_index =
   23132:	4669      	mov	r1, sp
   23134:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   23136:	9303      	str	r3, [sp, #12]
			reg_index =
   23138:	f7ff ff24 	bl	22f84 <region_allocate_and_init>
   2313c:	e7c1      	b.n	230c2 <mpu_configure_regions.constprop.2+0xfa>
   2313e:	bf00      	nop
   23140:	e000ed90 	.word	0xe000ed90
   23144:	00049018 	.word	0x00049018
   23148:	000490b8 	.word	0x000490b8
   2314c:	0004cf37 	.word	0x0004cf37
   23150:	0004cf14 	.word	0x0004cf14

00023154 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   23154:	2205      	movs	r2, #5
   23156:	4b03      	ldr	r3, [pc, #12]	; (23164 <arm_core_mpu_enable+0x10>)
   23158:	605a      	str	r2, [r3, #4]
   2315a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2315e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   23162:	4770      	bx	lr
   23164:	e000ed90 	.word	0xe000ed90

00023168 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   23168:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   2316c:	2200      	movs	r2, #0
   2316e:	4b01      	ldr	r3, [pc, #4]	; (23174 <arm_core_mpu_disable+0xc>)
   23170:	605a      	str	r2, [r3, #4]
}
   23172:	4770      	bx	lr
   23174:	e000ed90 	.word	0xe000ed90

00023178 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   23178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   2317a:	4f21      	ldr	r7, [pc, #132]	; (23200 <arm_mpu_init+0x88>)
   2317c:	683e      	ldr	r6, [r7, #0]
   2317e:	2e10      	cmp	r6, #16
   23180:	d913      	bls.n	231aa <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   23182:	f240 1307 	movw	r3, #263	; 0x107
   23186:	4a1f      	ldr	r2, [pc, #124]	; (23204 <arm_mpu_init+0x8c>)
   23188:	491f      	ldr	r1, [pc, #124]	; (23208 <arm_mpu_init+0x90>)
   2318a:	4820      	ldr	r0, [pc, #128]	; (2320c <arm_mpu_init+0x94>)
   2318c:	f023 fa66 	bl	4665c <printk>
   23190:	2210      	movs	r2, #16
   23192:	4631      	mov	r1, r6
   23194:	481e      	ldr	r0, [pc, #120]	; (23210 <arm_mpu_init+0x98>)
   23196:	f023 fa61 	bl	4665c <printk>
   2319a:	481a      	ldr	r0, [pc, #104]	; (23204 <arm_mpu_init+0x8c>)
   2319c:	f240 1107 	movw	r1, #263	; 0x107
   231a0:	f023 fa69 	bl	46676 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   231a4:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   231a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   231aa:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   231ac:	f7ff ffdc 	bl	23168 <arm_core_mpu_disable>
	MPU->MAIR0 =
   231b0:	4d18      	ldr	r5, [pc, #96]	; (23214 <arm_mpu_init+0x9c>)
   231b2:	4a19      	ldr	r2, [pc, #100]	; (23218 <arm_mpu_init+0xa0>)
   231b4:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   231b6:	42a6      	cmp	r6, r4
   231b8:	d119      	bne.n	231ee <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   231ba:	4b18      	ldr	r3, [pc, #96]	; (2321c <arm_mpu_init+0xa4>)
   231bc:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   231be:	f7ff ffc9 	bl	23154 <arm_core_mpu_enable>
	__ASSERT(
   231c2:	682b      	ldr	r3, [r5, #0]
   231c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   231c8:	2b10      	cmp	r3, #16
   231ca:	d00e      	beq.n	231ea <arm_mpu_init+0x72>
   231cc:	4914      	ldr	r1, [pc, #80]	; (23220 <arm_mpu_init+0xa8>)
   231ce:	f44f 7394 	mov.w	r3, #296	; 0x128
   231d2:	4a0c      	ldr	r2, [pc, #48]	; (23204 <arm_mpu_init+0x8c>)
   231d4:	480d      	ldr	r0, [pc, #52]	; (2320c <arm_mpu_init+0x94>)
   231d6:	f023 fa41 	bl	4665c <printk>
   231da:	4812      	ldr	r0, [pc, #72]	; (23224 <arm_mpu_init+0xac>)
   231dc:	f023 fa3e 	bl	4665c <printk>
   231e0:	f44f 7194 	mov.w	r1, #296	; 0x128
   231e4:	4807      	ldr	r0, [pc, #28]	; (23204 <arm_mpu_init+0x8c>)
   231e6:	f023 fa46 	bl	46676 <assert_post_action>
	return 0;
   231ea:	2000      	movs	r0, #0
   231ec:	e7dc      	b.n	231a8 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   231ee:	6879      	ldr	r1, [r7, #4]
   231f0:	4620      	mov	r0, r4
   231f2:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   231f6:	f7ff fead 	bl	22f54 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   231fa:	3401      	adds	r4, #1
   231fc:	e7db      	b.n	231b6 <arm_mpu_init+0x3e>
   231fe:	bf00      	nop
   23200:	00049324 	.word	0x00049324
   23204:	0004ce35 	.word	0x0004ce35
   23208:	000505de 	.word	0x000505de
   2320c:	0004b5bf 	.word	0x0004b5bf
   23210:	0004ce6e 	.word	0x0004ce6e
   23214:	e000ed90 	.word	0xe000ed90
   23218:	0044ffaa 	.word	0x0044ffaa
   2321c:	2002a86b 	.word	0x2002a86b
   23220:	0004cea2 	.word	0x0004cea2
   23224:	0004cef3 	.word	0x0004cef3

00023228 <arm_core_mpu_configure_static_mpu_regions>:
{
   23228:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   2322a:	4c0c      	ldr	r4, [pc, #48]	; (2325c <arm_core_mpu_configure_static_mpu_regions+0x34>)
   2322c:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   2322e:	7822      	ldrb	r2, [r4, #0]
   23230:	f7ff feca 	bl	22fc8 <mpu_configure_regions.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   23234:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   23236:	3016      	adds	r0, #22
   23238:	d10f      	bne.n	2325a <arm_core_mpu_configure_static_mpu_regions+0x32>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   2323a:	23cd      	movs	r3, #205	; 0xcd
   2323c:	4a08      	ldr	r2, [pc, #32]	; (23260 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   2323e:	4909      	ldr	r1, [pc, #36]	; (23264 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   23240:	4809      	ldr	r0, [pc, #36]	; (23268 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   23242:	f023 fa0b 	bl	4665c <printk>
   23246:	4629      	mov	r1, r5
   23248:	4808      	ldr	r0, [pc, #32]	; (2326c <arm_core_mpu_configure_static_mpu_regions+0x44>)
   2324a:	f023 fa07 	bl	4665c <printk>
}
   2324e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   23252:	21cd      	movs	r1, #205	; 0xcd
   23254:	4802      	ldr	r0, [pc, #8]	; (23260 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   23256:	f023 ba0e 	b.w	46676 <assert_post_action>
}
   2325a:	bd38      	pop	{r3, r4, r5, pc}
   2325c:	2002a86b 	.word	0x2002a86b
   23260:	0004ce35 	.word	0x0004ce35
   23264:	000505de 	.word	0x000505de
   23268:	0004b5bf 	.word	0x0004b5bf
   2326c:	0004cdda 	.word	0x0004cdda

00023270 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   23270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23274:	460f      	mov	r7, r1
   23276:	4680      	mov	r8, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   23278:	2600      	movs	r6, #0
   2327a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 23340 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>
		if (dyn_reg_info[i].index == -EINVAL) {

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   2327e:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 23344 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>
	MPU->RNR = index;
   23282:	4c2a      	ldr	r4, [pc, #168]	; (2332c <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   23284:	42be      	cmp	r6, r7
   23286:	db02      	blt.n	2328e <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
   23288:	b003      	add	sp, #12
   2328a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   2328e:	f8d8 b004 	ldr.w	fp, [r8, #4]
   23292:	f1bb 0f00 	cmp.w	fp, #0
   23296:	d045      	beq.n	23324 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>
			get_region_index(dyn_region_areas[i].start,
   23298:	f8d8 3000 	ldr.w	r3, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   2329c:	4618      	mov	r0, r3
   2329e:	9301      	str	r3, [sp, #4]
   232a0:	f022 fde8 	bl	45e74 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   232a4:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   232a6:	4605      	mov	r5, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   232a8:	eb0b 0003 	add.w	r0, fp, r3
   232ac:	3801      	subs	r0, #1
   232ae:	f022 fde1 	bl	45e74 <arm_cmse_mpu_region_get>
   232b2:	2314      	movs	r3, #20
	if (region_start_addr == region_end_addr) {
   232b4:	4285      	cmp	r5, r0
   232b6:	fb03 f306 	mul.w	r3, r3, r6
   232ba:	d014      	beq.n	232e6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x76>
		dyn_reg_info[i].index =
   232bc:	f06f 0215 	mvn.w	r2, #21
   232c0:	f849 2003 	str.w	r2, [r9, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   232c4:	23dd      	movs	r3, #221	; 0xdd
   232c6:	4a1a      	ldr	r2, [pc, #104]	; (23330 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
   232c8:	491a      	ldr	r1, [pc, #104]	; (23334 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   232ca:	481b      	ldr	r0, [pc, #108]	; (23338 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   232cc:	f023 f9c6 	bl	4665c <printk>
   232d0:	4639      	mov	r1, r7
   232d2:	481a      	ldr	r0, [pc, #104]	; (2333c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   232d4:	f023 f9c2 	bl	4665c <printk>
   232d8:	21dd      	movs	r1, #221	; 0xdd
   232da:	4815      	ldr	r0, [pc, #84]	; (23330 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
}
   232dc:	b003      	add	sp, #12
   232de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   232e2:	f023 b9c8 	b.w	46676 <assert_post_action>
		if (dyn_reg_info[i].index == -EINVAL) {
   232e6:	f115 0f16 	cmn.w	r5, #22
		dyn_reg_info[i].index =
   232ea:	f849 5003 	str.w	r5, [r9, r3]
		if (dyn_reg_info[i].index == -EINVAL) {
   232ee:	d0e9      	beq.n	232c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		if (dyn_reg_info[i].index >= static_regions_num) {
   232f0:	f89a 2000 	ldrb.w	r2, [sl]
   232f4:	42aa      	cmp	r2, r5
   232f6:	dde5      	ble.n	232c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	MPU->RNR = index;
   232f8:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
   232fa:	444b      	add	r3, r9
	MPU->RNR = index;
   232fc:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
   232fe:	68e0      	ldr	r0, [r4, #12]
   23300:	7b19      	ldrb	r1, [r3, #12]
   23302:	f360 0104 	bfi	r1, r0, #0, #5
   23306:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   23308:	6921      	ldr	r1, [r4, #16]
   2330a:	7b18      	ldrb	r0, [r3, #12]
   2330c:	0849      	lsrs	r1, r1, #1
   2330e:	f361 1047 	bfi	r0, r1, #5, #3
   23312:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   23314:	68e2      	ldr	r2, [r4, #12]
   23316:	f022 021f 	bic.w	r2, r2, #31
   2331a:	605a      	str	r2, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   2331c:	6922      	ldr	r2, [r4, #16]
   2331e:	f022 021f 	bic.w	r2, r2, #31
   23322:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   23324:	3601      	adds	r6, #1
   23326:	f108 080c 	add.w	r8, r8, #12
   2332a:	e7ab      	b.n	23284 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   2332c:	e000ed90 	.word	0xe000ed90
   23330:	0004ce35 	.word	0x0004ce35
   23334:	000505de 	.word	0x000505de
   23338:	0004b5bf 	.word	0x0004b5bf
   2333c:	0004ce06 	.word	0x0004ce06
   23340:	20023a60 	.word	0x20023a60
   23344:	2002a86b 	.word	0x2002a86b

00023348 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   23348:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   2334a:	4b15      	ldr	r3, [pc, #84]	; (233a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   2334c:	460c      	mov	r4, r1
   2334e:	781d      	ldrb	r5, [r3, #0]
   23350:	4606      	mov	r6, r0
   23352:	462b      	mov	r3, r5
  mpu->RLAR = 0U;
   23354:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   23356:	4a13      	ldr	r2, [pc, #76]	; (233a4 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   23358:	2b0f      	cmp	r3, #15
   2335a:	dd1b      	ble.n	23394 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   2335c:	4b12      	ldr	r3, [pc, #72]	; (233a8 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   2335e:	1d19      	adds	r1, r3, #4
   23360:	6818      	ldr	r0, [r3, #0]
   23362:	f7ff fdf7 	bl	22f54 <region_init>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   23366:	462a      	mov	r2, r5
   23368:	4621      	mov	r1, r4
   2336a:	4630      	mov	r0, r6
   2336c:	f7ff fe2c 	bl	22fc8 <mpu_configure_regions.constprop.2>
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   23370:	3016      	adds	r0, #22
   23372:	d113      	bne.n	2339c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   23374:	23ec      	movs	r3, #236	; 0xec
   23376:	4a0d      	ldr	r2, [pc, #52]	; (233ac <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
   23378:	490d      	ldr	r1, [pc, #52]	; (233b0 <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
   2337a:	480e      	ldr	r0, [pc, #56]	; (233b4 <arm_core_mpu_configure_dynamic_mpu_regions+0x6c>)
   2337c:	f023 f96e 	bl	4665c <printk>
   23380:	4621      	mov	r1, r4
   23382:	480d      	ldr	r0, [pc, #52]	; (233b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x70>)
   23384:	f023 f96a 	bl	4665c <printk>
}
   23388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   2338c:	21ec      	movs	r1, #236	; 0xec
   2338e:	4807      	ldr	r0, [pc, #28]	; (233ac <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
   23390:	f023 b971 	b.w	46676 <assert_post_action>
   23394:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   23396:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   23398:	3301      	adds	r3, #1
   2339a:	e7dd      	b.n	23358 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
}
   2339c:	bd70      	pop	{r4, r5, r6, pc}
   2339e:	bf00      	nop
   233a0:	2002a86b 	.word	0x2002a86b
   233a4:	e000ed90 	.word	0xe000ed90
   233a8:	20023a60 	.word	0x20023a60
   233ac:	0004ce35 	.word	0x0004ce35
   233b0:	000505de 	.word	0x000505de
   233b4:	0004b5bf 	.word	0x0004b5bf
   233b8:	0004cdad 	.word	0x0004cdad

000233bc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   233bc:	4b01      	ldr	r3, [pc, #4]	; (233c4 <__stdout_hook_install+0x8>)
   233be:	6018      	str	r0, [r3, #0]
}
   233c0:	4770      	bx	lr
   233c2:	bf00      	nop
   233c4:	20031ba4 	.word	0x20031ba4

000233c8 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   233c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   233ca:	4606      	mov	r6, r0
   233cc:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   233ce:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   233d0:	4f06      	ldr	r7, [pc, #24]	; (233ec <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   233d2:	42ac      	cmp	r4, r5
   233d4:	da08      	bge.n	233e8 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   233d6:	683b      	ldr	r3, [r7, #0]
   233d8:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   233da:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   233dc:	5530      	strb	r0, [r6, r4]
   233de:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   233e2:	d001      	beq.n	233e8 <z_impl_zephyr_read_stdin+0x20>
   233e4:	280d      	cmp	r0, #13
   233e6:	d1f4      	bne.n	233d2 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   233e8:	4620      	mov	r0, r4
   233ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   233ec:	20031ba0 	.word	0x20031ba0

000233f0 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   233f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   233f4:	4606      	mov	r6, r0
   233f6:	460d      	mov	r5, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   233f8:	4604      	mov	r4, r0
   233fa:	4f0a      	ldr	r7, [pc, #40]	; (23424 <z_impl_zephyr_write_stdout+0x34>)
   233fc:	1ba3      	subs	r3, r4, r6
   233fe:	429d      	cmp	r5, r3
   23400:	dc02      	bgt.n	23408 <z_impl_zephyr_write_stdout+0x18>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   23402:	4628      	mov	r0, r5
   23404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*(buf + i) == '\n') {
   23408:	7823      	ldrb	r3, [r4, #0]
   2340a:	46a0      	mov	r8, r4
   2340c:	2b0a      	cmp	r3, #10
   2340e:	d102      	bne.n	23416 <z_impl_zephyr_write_stdout+0x26>
			_stdout_hook('\r');
   23410:	683b      	ldr	r3, [r7, #0]
   23412:	200d      	movs	r0, #13
   23414:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   23416:	683b      	ldr	r3, [r7, #0]
   23418:	f898 0000 	ldrb.w	r0, [r8]
   2341c:	3401      	adds	r4, #1
   2341e:	4798      	blx	r3
   23420:	e7ec      	b.n	233fc <z_impl_zephyr_write_stdout+0xc>
   23422:	bf00      	nop
   23424:	20031ba4 	.word	0x20031ba4

00023428 <_exit>:
	return 0;
}
FUNC_ALIAS(_fstat, fstat, int);

void _exit(int status)
{
   23428:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2342a:	2105      	movs	r1, #5
   2342c:	4801      	ldr	r0, [pc, #4]	; (23434 <_exit+0xc>)
   2342e:	f7ff ffdf 	bl	233f0 <z_impl_zephyr_write_stdout>
   23432:	e7fe      	b.n	23432 <_exit+0xa>
   23434:	0004cf80 	.word	0x0004cf80

00023438 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   23438:	b538      	push	{r3, r4, r5, lr}
   2343a:	4605      	mov	r5, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   2343c:	f04f 31ff 	mov.w	r1, #4294967295
   23440:	480b      	ldr	r0, [pc, #44]	; (23470 <_sbrk+0x38>)
   23442:	f022 fe4f 	bl	460e4 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   23446:	4a0b      	ldr	r2, [pc, #44]	; (23474 <_sbrk+0x3c>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   23448:	490b      	ldr	r1, [pc, #44]	; (23478 <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
   2344a:	6814      	ldr	r4, [r2, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   2344c:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
   23450:	4425      	add	r5, r4
   23452:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   23456:	429d      	cmp	r5, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   23458:	bf2c      	ite	cs
   2345a:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   2345e:	1864      	addcc	r4, r4, r1
	}

	sys_sem_give(&heap_sem);
   23460:	4803      	ldr	r0, [pc, #12]	; (23470 <_sbrk+0x38>)
		heap_sz += count;
   23462:	bf38      	it	cc
   23464:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
   23466:	f022 fe38 	bl	460da <sys_sem_give>

	return ret;
}
   2346a:	4620      	mov	r0, r4
   2346c:	bd38      	pop	{r3, r4, r5, pc}
   2346e:	bf00      	nop
   23470:	20032328 	.word	0x20032328
   23474:	20023a74 	.word	0x20023a74
   23478:	200323fc 	.word	0x200323fc

0002347c <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   2347c:	b538      	push	{r3, r4, r5, lr}
   2347e:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   23480:	4604      	mov	r4, r0
   23482:	b958      	cbnz	r0, 2349c <net_if_flag_is_set+0x20>
   23484:	4909      	ldr	r1, [pc, #36]	; (234ac <net_if_flag_is_set+0x30>)
   23486:	480a      	ldr	r0, [pc, #40]	; (234b0 <net_if_flag_is_set+0x34>)
   23488:	f240 2311 	movw	r3, #529	; 0x211
   2348c:	4a09      	ldr	r2, [pc, #36]	; (234b4 <net_if_flag_is_set+0x38>)
   2348e:	f023 f8e5 	bl	4665c <printk>
   23492:	f240 2111 	movw	r1, #529	; 0x211
   23496:	4807      	ldr	r0, [pc, #28]	; (234b4 <net_if_flag_is_set+0x38>)
   23498:	f023 f8ed 	bl	46676 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2349c:	6823      	ldr	r3, [r4, #0]
   2349e:	330c      	adds	r3, #12
   234a0:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   234a4:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   234a6:	f000 0001 	and.w	r0, r0, #1
   234aa:	bd38      	pop	{r3, r4, r5, pc}
   234ac:	0004cfb7 	.word	0x0004cfb7
   234b0:	0004b5bf 	.word	0x0004b5bf
   234b4:	0004cf8e 	.word	0x0004cf8e

000234b8 <net_if_flag_set.constprop.23>:
static inline void net_if_flag_set(struct net_if *iface,
   234b8:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   234ba:	4604      	mov	r4, r0
   234bc:	b958      	cbnz	r0, 234d6 <net_if_flag_set.constprop.23+0x1e>
   234be:	490b      	ldr	r1, [pc, #44]	; (234ec <net_if_flag_set.constprop.23+0x34>)
   234c0:	480b      	ldr	r0, [pc, #44]	; (234f0 <net_if_flag_set.constprop.23+0x38>)
   234c2:	f240 13e3 	movw	r3, #483	; 0x1e3
   234c6:	4a0b      	ldr	r2, [pc, #44]	; (234f4 <net_if_flag_set.constprop.23+0x3c>)
   234c8:	f023 f8c8 	bl	4665c <printk>
   234cc:	f240 11e3 	movw	r1, #483	; 0x1e3
   234d0:	4808      	ldr	r0, [pc, #32]	; (234f4 <net_if_flag_set.constprop.23+0x3c>)
   234d2:	f023 f8d0 	bl	46676 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   234d6:	6823      	ldr	r3, [r4, #0]
   234d8:	330c      	adds	r3, #12
   234da:	e8d3 2fef 	ldaex	r2, [r3]
   234de:	f042 0201 	orr.w	r2, r2, #1
   234e2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   234e6:	2900      	cmp	r1, #0
   234e8:	d1f7      	bne.n	234da <net_if_flag_set.constprop.23+0x22>
}
   234ea:	bd10      	pop	{r4, pc}
   234ec:	0004cfb7 	.word	0x0004cfb7
   234f0:	0004b5bf 	.word	0x0004b5bf
   234f4:	0004cf8e 	.word	0x0004cf8e

000234f8 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   234f8:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   234fa:	2100      	movs	r1, #0
{
   234fc:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   234fe:	f7ff ffbd 	bl	2347c <net_if_flag_is_set>
   23502:	b928      	cbnz	r0, 23510 <net_if_up+0x18>
	}

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
   23504:	682b      	ldr	r3, [r5, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   23506:	7e9a      	ldrb	r2, [r3, #26]
   23508:	b122      	cbz	r2, 23514 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   2350a:	4628      	mov	r0, r5
   2350c:	f7ff ffd4 	bl	234b8 <net_if_flag_set.constprop.23>
		return 0;
   23510:	2000      	movs	r0, #0
   23512:	e01f      	b.n	23554 <net_if_up+0x5c>
 *
 * @return a pointer to the iface L2
 */
static inline const struct net_l2 * const net_if_l2(struct net_if *iface)
{
	return iface->if_dev->l2;
   23514:	685b      	ldr	r3, [r3, #4]
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   23516:	b9ab      	cbnz	r3, 23544 <net_if_up+0x4c>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   23518:	682b      	ldr	r3, [r5, #0]
   2351a:	691b      	ldr	r3, [r3, #16]
   2351c:	b95b      	cbnz	r3, 23536 <net_if_up+0x3e>
   2351e:	490e      	ldr	r1, [pc, #56]	; (23558 <net_if_up+0x60>)
   23520:	480e      	ldr	r0, [pc, #56]	; (2355c <net_if_up+0x64>)
   23522:	f640 5389 	movw	r3, #3465	; 0xd89
   23526:	4a0e      	ldr	r2, [pc, #56]	; (23560 <net_if_up+0x68>)
   23528:	f023 f898 	bl	4665c <printk>
   2352c:	f640 5189 	movw	r1, #3465	; 0xd89
   23530:	480b      	ldr	r0, [pc, #44]	; (23560 <net_if_up+0x68>)
   23532:	f023 f8a0 	bl	46676 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   23536:	4628      	mov	r0, r5
   23538:	f7ff ffbe 	bl	234b8 <net_if_flag_set.constprop.23>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   2353c:	4628      	mov	r0, r5
   2353e:	f023 faca 	bl	46ad6 <l2_flags_get>
   23542:	e7e5      	b.n	23510 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   23544:	689b      	ldr	r3, [r3, #8]
   23546:	2b00      	cmp	r3, #0
   23548:	d0e6      	beq.n	23518 <net_if_up+0x20>
	status = net_if_l2(iface)->enable(iface, true);
   2354a:	2101      	movs	r1, #1
   2354c:	4628      	mov	r0, r5
   2354e:	4798      	blx	r3
	if (status < 0) {
   23550:	2800      	cmp	r0, #0
   23552:	dae1      	bge.n	23518 <net_if_up+0x20>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   23554:	bd38      	pop	{r3, r4, r5, pc}
   23556:	bf00      	nop
   23558:	0004cfbd 	.word	0x0004cfbd
   2355c:	0004b5bf 	.word	0x0004b5bf
   23560:	0004cfee 	.word	0x0004cfee

00023564 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   23564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23566:	4e09      	ldr	r6, [pc, #36]	; (2358c <net_if_init+0x28>)

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   23568:	2400      	movs	r4, #0
   2356a:	4637      	mov	r7, r6
   2356c:	4d08      	ldr	r5, [pc, #32]	; (23590 <net_if_init+0x2c>)
   2356e:	1bad      	subs	r5, r5, r6
   23570:	42ac      	cmp	r4, r5
   23572:	eb06 0004 	add.w	r0, r6, r4
   23576:	d100      	bne.n	2357a <net_if_init+0x16>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   23578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   2357a:	593b      	ldr	r3, [r7, r4]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   2357c:	681b      	ldr	r3, [r3, #0]
   2357e:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   23580:	b113      	cbz	r3, 23588 <net_if_init+0x24>
   23582:	681b      	ldr	r3, [r3, #0]
   23584:	b103      	cbz	r3, 23588 <net_if_init+0x24>
	api->init(iface);
   23586:	4798      	blx	r3
   23588:	3420      	adds	r4, #32
   2358a:	e7f1      	b.n	23570 <net_if_init+0xc>
   2358c:	200323c0 	.word	0x200323c0
   23590:	200323e0 	.word	0x200323e0

00023594 <net_if_post_init>:

void net_if_post_init(void)
{
   23594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   23596:	2400      	movs	r4, #0
   23598:	4f08      	ldr	r7, [pc, #32]	; (235bc <net_if_post_init+0x28>)
   2359a:	4d09      	ldr	r5, [pc, #36]	; (235c0 <net_if_post_init+0x2c>)
   2359c:	1bed      	subs	r5, r5, r7
   2359e:	42ac      	cmp	r4, r5
   235a0:	eb04 0607 	add.w	r6, r4, r7
   235a4:	d100      	bne.n	235a8 <net_if_post_init+0x14>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   235a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   235a8:	2103      	movs	r1, #3
   235aa:	4630      	mov	r0, r6
   235ac:	f7ff ff66 	bl	2347c <net_if_flag_is_set>
   235b0:	b910      	cbnz	r0, 235b8 <net_if_post_init+0x24>
			net_if_up(iface);
   235b2:	4630      	mov	r0, r6
   235b4:	f7ff ffa0 	bl	234f8 <net_if_up>
   235b8:	3420      	adds	r4, #32
   235ba:	e7f0      	b.n	2359e <net_if_post_init+0xa>
   235bc:	200323c0 	.word	0x200323c0
   235c0:	200323e0 	.word	0x200323e0

000235c4 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   235c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   235c8:	680f      	ldr	r7, [r1, #0]
	u8_t connect_flags = client->clean_session << 1;
   235ca:	f890 5077 	ldrb.w	r5, [r0, #119]	; 0x77
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   235ce:	4b3b      	ldr	r3, [pc, #236]	; (236bc <connect_request_encode+0xf8>)
   235d0:	4a3b      	ldr	r2, [pc, #236]	; (236c0 <connect_request_encode+0xfc>)
{
   235d2:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   235d4:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   235d8:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   235da:	2804      	cmp	r0, #4
   235dc:	bf0c      	ite	eq
   235de:	4610      	moveq	r0, r2
   235e0:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   235e2:	600f      	str	r7, [r1, #0]
{
   235e4:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   235e6:	f023 fb48 	bl	46c7a <pack_utf8_str>
	u8_t connect_flags = client->clean_session << 1;
   235ea:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   235ee:	4603      	mov	r3, r0
   235f0:	b938      	cbnz	r0, 23602 <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   235f2:	e9d4 2000 	ldrd	r2, r0, [r4]
   235f6:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   235f8:	f896 1076 	ldrb.w	r1, [r6, #118]	; 0x76
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   235fc:	d104      	bne.n	23608 <connect_request_encode+0x44>
		return -ENOMEM;
   235fe:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   23602:	4618      	mov	r0, r3
   23604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   23608:	1c50      	adds	r0, r2, #1
   2360a:	6020      	str	r0, [r4, #0]
   2360c:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   2360e:	e9d4 8200 	ldrd	r8, r2, [r4]
   23612:	4542      	cmp	r2, r8
   23614:	d0f3      	beq.n	235fe <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   23616:	f108 0201 	add.w	r2, r8, #1
   2361a:	6022      	str	r2, [r4, #0]
   2361c:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   23620:	4621      	mov	r1, r4
   23622:	f8b6 0074 	ldrh.w	r0, [r6, #116]	; 0x74
   23626:	f023 fb16 	bl	46c56 <pack_uint16>
	if (err_code != 0) {
   2362a:	4603      	mov	r3, r0
   2362c:	2800      	cmp	r0, #0
   2362e:	d1e8      	bne.n	23602 <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   23630:	f106 0044 	add.w	r0, r6, #68	; 0x44
   23634:	f023 fb21 	bl	46c7a <pack_utf8_str>
	if (err_code != 0) {
   23638:	4603      	mov	r3, r0
   2363a:	2800      	cmp	r0, #0
   2363c:	d1e1      	bne.n	23602 <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   2363e:	6db0      	ldr	r0, [r6, #88]	; 0x58
	u8_t connect_flags = client->clean_session << 1;
   23640:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   23642:	b1d8      	cbz	r0, 2367c <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   23644:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   23648:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
   2364c:	f003 0301 	and.w	r3, r3, #1
   23650:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   23654:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   23656:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   23658:	00db      	lsls	r3, r3, #3
   2365a:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   2365e:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   23660:	f023 fb0b 	bl	46c7a <pack_utf8_str>
		if (err_code != 0) {
   23664:	4603      	mov	r3, r0
   23666:	2800      	cmp	r0, #0
   23668:	d1cb      	bne.n	23602 <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   2366a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
			err_code = pack_utf8_str(client->will_message, buf);
   2366c:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   2366e:	b313      	cbz	r3, 236b6 <connect_request_encode+0xf2>
			err_code = pack_utf8_str(client->will_message, buf);
   23670:	4618      	mov	r0, r3
   23672:	f023 fb02 	bl	46c7a <pack_utf8_str>
			if (err_code != 0) {
   23676:	4603      	mov	r3, r0
   23678:	2800      	cmp	r0, #0
   2367a:	d1c2      	bne.n	23602 <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   2367c:	6d30      	ldr	r0, [r6, #80]	; 0x50
   2367e:	b138      	cbz	r0, 23690 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   23680:	4621      	mov	r1, r4
   23682:	f023 fafa 	bl	46c7a <pack_utf8_str>
		if (err_code != 0) {
   23686:	4603      	mov	r3, r0
   23688:	2800      	cmp	r0, #0
   2368a:	d1ba      	bne.n	23602 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   2368c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   23690:	6d70      	ldr	r0, [r6, #84]	; 0x54
   23692:	b138      	cbz	r0, 236a4 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   23694:	4621      	mov	r1, r4
   23696:	f023 faf0 	bl	46c7a <pack_utf8_str>
		if (err_code != 0) {
   2369a:	4603      	mov	r3, r0
   2369c:	2800      	cmp	r0, #0
   2369e:	d1b0      	bne.n	23602 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   236a0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   236a4:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   236a8:	4622      	mov	r2, r4
   236aa:	4639      	mov	r1, r7
}
   236ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   236b0:	2010      	movs	r0, #16
   236b2:	f023 bafd 	b.w	46cb0 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   236b6:	f023 face 	bl	46c56 <pack_uint16>
   236ba:	e7dc      	b.n	23676 <connect_request_encode+0xb2>
   236bc:	00049494 	.word	0x00049494
   236c0:	0004949c 	.word	0x0004949c

000236c4 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   236c4:	e9d0 2300 	ldrd	r2, r3, [r0]
   236c8:	1a9b      	subs	r3, r3, r2
   236ca:	2b01      	cmp	r3, #1
   236cc:	bf81      	itttt	hi
   236ce:	4b05      	ldrhi	r3, [pc, #20]	; (236e4 <disconnect_encode+0x20>)
   236d0:	881b      	ldrhhi	r3, [r3, #0]
   236d2:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   236d4:	6803      	ldrhi	r3, [r0, #0]
   236d6:	bf83      	ittte	hi
   236d8:	3302      	addhi	r3, #2
   236da:	6043      	strhi	r3, [r0, #4]

	return 0;
   236dc:	2000      	movhi	r0, #0
		return -ENOMEM;
   236de:	f06f 000b 	mvnls.w	r0, #11
}
   236e2:	4770      	bx	lr
   236e4:	0004d019 	.word	0x0004d019

000236e8 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   236e8:	e9d0 2300 	ldrd	r2, r3, [r0]
   236ec:	1a9b      	subs	r3, r3, r2
   236ee:	2b01      	cmp	r3, #1
   236f0:	bf81      	itttt	hi
   236f2:	4b05      	ldrhi	r3, [pc, #20]	; (23708 <ping_request_encode+0x20>)
   236f4:	881b      	ldrhhi	r3, [r3, #0]
   236f6:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   236f8:	6803      	ldrhi	r3, [r0, #0]
   236fa:	bf83      	ittte	hi
   236fc:	3302      	addhi	r3, #2
   236fe:	6043      	strhi	r3, [r0, #4]

	return 0;
   23700:	2000      	movhi	r0, #0
		return -ENOMEM;
   23702:	f06f 000b 	mvnls.w	r0, #11
}
   23706:	4770      	bx	lr
   23708:	0004d025 	.word	0x0004d025

0002370c <close>:
{
   2370c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   2370e:	4c10      	ldr	r4, [pc, #64]	; (23750 <close+0x44>)
{
   23710:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   23712:	6823      	ldr	r3, [r4, #0]
   23714:	b94b      	cbnz	r3, 2372a <close+0x1e>
   23716:	490f      	ldr	r1, [pc, #60]	; (23754 <close+0x48>)
   23718:	480f      	ldr	r0, [pc, #60]	; (23758 <close+0x4c>)
   2371a:	2321      	movs	r3, #33	; 0x21
   2371c:	4a0f      	ldr	r2, [pc, #60]	; (2375c <close+0x50>)
   2371e:	f022 ff9d 	bl	4665c <printk>
   23722:	2121      	movs	r1, #33	; 0x21
   23724:	480d      	ldr	r0, [pc, #52]	; (2375c <close+0x50>)
   23726:	f022 ffa6 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   2372a:	6823      	ldr	r3, [r4, #0]
   2372c:	685b      	ldr	r3, [r3, #4]
   2372e:	b94b      	cbnz	r3, 23744 <close+0x38>
   23730:	490b      	ldr	r1, [pc, #44]	; (23760 <close+0x54>)
   23732:	4809      	ldr	r0, [pc, #36]	; (23758 <close+0x4c>)
   23734:	2322      	movs	r3, #34	; 0x22
   23736:	4a09      	ldr	r2, [pc, #36]	; (2375c <close+0x50>)
   23738:	f022 ff90 	bl	4665c <printk>
   2373c:	2122      	movs	r1, #34	; 0x22
   2373e:	4807      	ldr	r0, [pc, #28]	; (2375c <close+0x50>)
   23740:	f022 ff99 	bl	46676 <assert_post_action>
	return socket_ops->close(sock);
   23744:	6823      	ldr	r3, [r4, #0]
   23746:	4628      	mov	r0, r5
}
   23748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   2374c:	685b      	ldr	r3, [r3, #4]
   2374e:	4718      	bx	r3
   23750:	20023978 	.word	0x20023978
   23754:	0004b6f3 	.word	0x0004b6f3
   23758:	0004b5bf 	.word	0x0004b5bf
   2375c:	0004b6c2 	.word	0x0004b6c2
   23760:	0004d027 	.word	0x0004d027

00023764 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   23764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   23768:	4c2d      	ldr	r4, [pc, #180]	; (23820 <mqtt_client_tcp_connect+0xbc>)
	const struct sockaddr *broker = client->broker;
   2376a:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
   2376c:	6823      	ldr	r3, [r4, #0]
{
   2376e:	4606      	mov	r6, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   23770:	882f      	ldrh	r7, [r5, #0]
   23772:	b94b      	cbnz	r3, 23788 <mqtt_client_tcp_connect+0x24>
   23774:	492b      	ldr	r1, [pc, #172]	; (23824 <mqtt_client_tcp_connect+0xc0>)
   23776:	482c      	ldr	r0, [pc, #176]	; (23828 <mqtt_client_tcp_connect+0xc4>)
   23778:	2319      	movs	r3, #25
   2377a:	4a2c      	ldr	r2, [pc, #176]	; (2382c <mqtt_client_tcp_connect+0xc8>)
   2377c:	f022 ff6e 	bl	4665c <printk>
   23780:	2119      	movs	r1, #25
   23782:	482a      	ldr	r0, [pc, #168]	; (2382c <mqtt_client_tcp_connect+0xc8>)
   23784:	f022 ff77 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   23788:	6823      	ldr	r3, [r4, #0]
   2378a:	681b      	ldr	r3, [r3, #0]
   2378c:	b94b      	cbnz	r3, 237a2 <mqtt_client_tcp_connect+0x3e>
   2378e:	4928      	ldr	r1, [pc, #160]	; (23830 <mqtt_client_tcp_connect+0xcc>)
   23790:	4825      	ldr	r0, [pc, #148]	; (23828 <mqtt_client_tcp_connect+0xc4>)
   23792:	231a      	movs	r3, #26
   23794:	4a25      	ldr	r2, [pc, #148]	; (2382c <mqtt_client_tcp_connect+0xc8>)
   23796:	f022 ff61 	bl	4665c <printk>
   2379a:	211a      	movs	r1, #26
   2379c:	4823      	ldr	r0, [pc, #140]	; (2382c <mqtt_client_tcp_connect+0xc8>)
   2379e:	f022 ff6a 	bl	46676 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   237a2:	6823      	ldr	r3, [r4, #0]
   237a4:	4638      	mov	r0, r7
   237a6:	681b      	ldr	r3, [r3, #0]
   237a8:	2206      	movs	r2, #6
   237aa:	2101      	movs	r1, #1
   237ac:	4798      	blx	r3
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   237ae:	2800      	cmp	r0, #0
   237b0:	4607      	mov	r7, r0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   237b2:	62b0      	str	r0, [r6, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   237b4:	da05      	bge.n	237c2 <mqtt_client_tcp_connect+0x5e>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   237b6:	f023 f985 	bl	46ac4 <__errno>
   237ba:	6800      	ldr	r0, [r0, #0]
   237bc:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   237be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (broker->sa_family == AF_INET) {
   237c2:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   237c4:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
		peer_addr_size = sizeof(struct sockaddr_in);
   237c6:	2b01      	cmp	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   237c8:	6823      	ldr	r3, [r4, #0]
   237ca:	bf14      	ite	ne
   237cc:	f04f 0818 	movne.w	r8, #24
   237d0:	f04f 0808 	moveq.w	r8, #8
   237d4:	b94b      	cbnz	r3, 237ea <mqtt_client_tcp_connect+0x86>
   237d6:	4913      	ldr	r1, [pc, #76]	; (23824 <mqtt_client_tcp_connect+0xc0>)
   237d8:	4813      	ldr	r0, [pc, #76]	; (23828 <mqtt_client_tcp_connect+0xc4>)
   237da:	2345      	movs	r3, #69	; 0x45
   237dc:	4a13      	ldr	r2, [pc, #76]	; (2382c <mqtt_client_tcp_connect+0xc8>)
   237de:	f022 ff3d 	bl	4665c <printk>
   237e2:	2145      	movs	r1, #69	; 0x45
   237e4:	4811      	ldr	r0, [pc, #68]	; (2382c <mqtt_client_tcp_connect+0xc8>)
   237e6:	f022 ff46 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   237ea:	6823      	ldr	r3, [r4, #0]
   237ec:	695b      	ldr	r3, [r3, #20]
   237ee:	b94b      	cbnz	r3, 23804 <mqtt_client_tcp_connect+0xa0>
   237f0:	4910      	ldr	r1, [pc, #64]	; (23834 <mqtt_client_tcp_connect+0xd0>)
   237f2:	480d      	ldr	r0, [pc, #52]	; (23828 <mqtt_client_tcp_connect+0xc4>)
   237f4:	2346      	movs	r3, #70	; 0x46
   237f6:	4a0d      	ldr	r2, [pc, #52]	; (2382c <mqtt_client_tcp_connect+0xc8>)
   237f8:	f022 ff30 	bl	4665c <printk>
   237fc:	2146      	movs	r1, #70	; 0x46
   237fe:	480b      	ldr	r0, [pc, #44]	; (2382c <mqtt_client_tcp_connect+0xc8>)
   23800:	f022 ff39 	bl	46676 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   23804:	6823      	ldr	r3, [r4, #0]
   23806:	4642      	mov	r2, r8
   23808:	695b      	ldr	r3, [r3, #20]
   2380a:	4629      	mov	r1, r5
   2380c:	4638      	mov	r0, r7
   2380e:	4798      	blx	r3
	if (ret < 0) {
   23810:	2800      	cmp	r0, #0
   23812:	da03      	bge.n	2381c <mqtt_client_tcp_connect+0xb8>
		(void)close(client->transport.tcp.sock);
   23814:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   23816:	f7ff ff79 	bl	2370c <close>
   2381a:	e7cc      	b.n	237b6 <mqtt_client_tcp_connect+0x52>
	return 0;
   2381c:	2000      	movs	r0, #0
   2381e:	e7ce      	b.n	237be <mqtt_client_tcp_connect+0x5a>
   23820:	20023978 	.word	0x20023978
   23824:	0004b6f3 	.word	0x0004b6f3
   23828:	0004b5bf 	.word	0x0004b5bf
   2382c:	0004b6c2 	.word	0x0004b6c2
   23830:	0004d039 	.word	0x0004d039
   23834:	0004d04c 	.word	0x0004d04c

00023838 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   23838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2383c:	4680      	mov	r8, r0
   2383e:	4689      	mov	r9, r1
   23840:	4617      	mov	r7, r2
	u32_t offset = 0U;
   23842:	2400      	movs	r4, #0
}

static inline ssize_t send(int sock, const void *buf, size_t len,
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
   23844:	4d1d      	ldr	r5, [pc, #116]	; (238bc <mqtt_client_tcp_write+0x84>)
	int ret;

	while (offset < datalen) {
   23846:	42bc      	cmp	r4, r7
   23848:	d301      	bcc.n	2384e <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   2384a:	2000      	movs	r0, #0
   2384c:	e031      	b.n	238b2 <mqtt_client_tcp_write+0x7a>
		ret = send(client->transport.tcp.sock, data + offset,
   2384e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   23852:	eb09 0a04 	add.w	sl, r9, r4
   23856:	461e      	mov	r6, r3
   23858:	4b19      	ldr	r3, [pc, #100]	; (238c0 <mqtt_client_tcp_write+0x88>)
   2385a:	eba7 0b04 	sub.w	fp, r7, r4
   2385e:	681b      	ldr	r3, [r3, #0]
   23860:	b94b      	cbnz	r3, 23876 <mqtt_client_tcp_write+0x3e>
   23862:	4918      	ldr	r1, [pc, #96]	; (238c4 <mqtt_client_tcp_write+0x8c>)
   23864:	4818      	ldr	r0, [pc, #96]	; (238c8 <mqtt_client_tcp_write+0x90>)
   23866:	237e      	movs	r3, #126	; 0x7e
   23868:	462a      	mov	r2, r5
   2386a:	f022 fef7 	bl	4665c <printk>
   2386e:	217e      	movs	r1, #126	; 0x7e
   23870:	4628      	mov	r0, r5
   23872:	f022 ff00 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   23876:	4b12      	ldr	r3, [pc, #72]	; (238c0 <mqtt_client_tcp_write+0x88>)
   23878:	681b      	ldr	r3, [r3, #0]
   2387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2387c:	b94b      	cbnz	r3, 23892 <mqtt_client_tcp_write+0x5a>
   2387e:	4913      	ldr	r1, [pc, #76]	; (238cc <mqtt_client_tcp_write+0x94>)
   23880:	4811      	ldr	r0, [pc, #68]	; (238c8 <mqtt_client_tcp_write+0x90>)
   23882:	237f      	movs	r3, #127	; 0x7f
   23884:	462a      	mov	r2, r5
   23886:	f022 fee9 	bl	4665c <printk>
   2388a:	217f      	movs	r1, #127	; 0x7f
   2388c:	4628      	mov	r0, r5
   2388e:	f022 fef2 	bl	46676 <assert_post_action>

	return socket_ops->send(sock, buf, len, flags);
   23892:	4b0b      	ldr	r3, [pc, #44]	; (238c0 <mqtt_client_tcp_write+0x88>)
   23894:	4630      	mov	r0, r6
   23896:	681b      	ldr	r3, [r3, #0]
   23898:	465a      	mov	r2, fp
   2389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2389c:	4651      	mov	r1, sl
   2389e:	469c      	mov	ip, r3
   238a0:	2300      	movs	r3, #0
   238a2:	4666      	mov	r6, ip
   238a4:	47b0      	blx	r6
		if (ret < 0) {
   238a6:	2800      	cmp	r0, #0
   238a8:	da05      	bge.n	238b6 <mqtt_client_tcp_write+0x7e>
			return -errno;
   238aa:	f023 f90b 	bl	46ac4 <__errno>
   238ae:	6800      	ldr	r0, [r0, #0]
   238b0:	4240      	negs	r0, r0
}
   238b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   238b6:	4404      	add	r4, r0
   238b8:	e7c5      	b.n	23846 <mqtt_client_tcp_write+0xe>
   238ba:	bf00      	nop
   238bc:	0004b6c2 	.word	0x0004b6c2
   238c0:	20023978 	.word	0x20023978
   238c4:	0004b6f3 	.word	0x0004b6f3
   238c8:	0004b5bf 	.word	0x0004b5bf
   238cc:	0004d071 	.word	0x0004d071

000238d0 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   238d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   238d4:	4c18      	ldr	r4, [pc, #96]	; (23938 <mqtt_client_tcp_read+0x68>)
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= MSG_DONTWAIT;
   238d6:	2b00      	cmp	r3, #0
   238d8:	6823      	ldr	r3, [r4, #0]
{
   238da:	460e      	mov	r6, r1
   238dc:	4617      	mov	r7, r2
		flags |= MSG_DONTWAIT;
   238de:	bf14      	ite	ne
   238e0:	f04f 0800 	movne.w	r8, #0
   238e4:	f04f 0840 	moveq.w	r8, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   238e8:	6a85      	ldr	r5, [r0, #40]	; 0x28
   238ea:	b94b      	cbnz	r3, 23900 <mqtt_client_tcp_read+0x30>
   238ec:	4913      	ldr	r1, [pc, #76]	; (2393c <mqtt_client_tcp_read+0x6c>)
   238ee:	4814      	ldr	r0, [pc, #80]	; (23940 <mqtt_client_tcp_read+0x70>)
   238f0:	2369      	movs	r3, #105	; 0x69
   238f2:	4a14      	ldr	r2, [pc, #80]	; (23944 <mqtt_client_tcp_read+0x74>)
   238f4:	f022 feb2 	bl	4665c <printk>
   238f8:	2169      	movs	r1, #105	; 0x69
   238fa:	4812      	ldr	r0, [pc, #72]	; (23944 <mqtt_client_tcp_read+0x74>)
   238fc:	f022 febb 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   23900:	6823      	ldr	r3, [r4, #0]
   23902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23904:	b94b      	cbnz	r3, 2391a <mqtt_client_tcp_read+0x4a>
   23906:	4910      	ldr	r1, [pc, #64]	; (23948 <mqtt_client_tcp_read+0x78>)
   23908:	480d      	ldr	r0, [pc, #52]	; (23940 <mqtt_client_tcp_read+0x70>)
   2390a:	236a      	movs	r3, #106	; 0x6a
   2390c:	4a0d      	ldr	r2, [pc, #52]	; (23944 <mqtt_client_tcp_read+0x74>)
   2390e:	f022 fea5 	bl	4665c <printk>
   23912:	216a      	movs	r1, #106	; 0x6a
   23914:	480b      	ldr	r0, [pc, #44]	; (23944 <mqtt_client_tcp_read+0x74>)
   23916:	f022 feae 	bl	46676 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   2391a:	6823      	ldr	r3, [r4, #0]
   2391c:	463a      	mov	r2, r7
   2391e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   23920:	4631      	mov	r1, r6
   23922:	4643      	mov	r3, r8
   23924:	4628      	mov	r0, r5
   23926:	47a0      	blx	r4
	if (ret < 0) {
   23928:	2800      	cmp	r0, #0
   2392a:	da03      	bge.n	23934 <mqtt_client_tcp_read+0x64>
		return -errno;
   2392c:	f023 f8ca 	bl	46ac4 <__errno>
   23930:	6800      	ldr	r0, [r0, #0]
   23932:	4240      	negs	r0, r0
	}

	return ret;
}
   23934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23938:	20023978 	.word	0x20023978
   2393c:	0004b6f3 	.word	0x0004b6f3
   23940:	0004b5bf 	.word	0x0004b5bf
   23944:	0004b6c2 	.word	0x0004b6c2
   23948:	0004d060 	.word	0x0004d060

0002394c <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   2394c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   23950:	4a01      	ldr	r2, [pc, #4]	; (23958 <mqtt_transport_connect+0xc>)
   23952:	011b      	lsls	r3, r3, #4
   23954:	58d3      	ldr	r3, [r2, r3]
   23956:	4718      	bx	r3
   23958:	000494a4 	.word	0x000494a4

0002395c <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const u8_t *data,
			 u32_t datalen)
{
   2395c:	b410      	push	{r4}
	return transport_fn[client->transport.type].write(client, data,
   2395e:	4b04      	ldr	r3, [pc, #16]	; (23970 <mqtt_transport_write+0x14>)
   23960:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   23964:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   23968:	685b      	ldr	r3, [r3, #4]
							  datalen);
}
   2396a:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write(client, data,
   2396e:	4718      	bx	r3
   23970:	000494a4 	.word	0x000494a4

00023974 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			bool shall_block)
{
   23974:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   23976:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
   2397a:	4c03      	ldr	r4, [pc, #12]	; (23988 <mqtt_transport_read+0x14>)
   2397c:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   23980:	68a4      	ldr	r4, [r4, #8]
   23982:	46a4      	mov	ip, r4
							 shall_block);
}
   23984:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   23986:	4760      	bx	ip
   23988:	000494a4 	.word	0x000494a4

0002398c <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   2398c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   23990:	4b02      	ldr	r3, [pc, #8]	; (2399c <mqtt_transport_disconnect+0x10>)
   23992:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   23996:	68db      	ldr	r3, [r3, #12]
   23998:	4718      	bx	r3
   2399a:	bf00      	nop
   2399c:	000494a4 	.word	0x000494a4

000239a0 <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   239a0:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   239a2:	b510      	push	{r4, lr}
   239a4:	b142      	cbz	r2, 239b8 <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   239a6:	4b0f      	ldr	r3, [pc, #60]	; (239e4 <mqtt_mutex_unlock+0x44>)
   239a8:	6882      	ldr	r2, [r0, #8]
   239aa:	689b      	ldr	r3, [r3, #8]
   239ac:	429a      	cmp	r2, r3
   239ae:	d115      	bne.n	239dc <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   239b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   239b4:	f018 be04 	b.w	3c5c0 <z_impl_k_mutex_unlock>
		return -EINVAL;
   239b8:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   239bc:	2343      	movs	r3, #67	; 0x43
   239be:	4a0a      	ldr	r2, [pc, #40]	; (239e8 <mqtt_mutex_unlock+0x48>)
   239c0:	490a      	ldr	r1, [pc, #40]	; (239ec <mqtt_mutex_unlock+0x4c>)
   239c2:	480b      	ldr	r0, [pc, #44]	; (239f0 <mqtt_mutex_unlock+0x50>)
   239c4:	f022 fe4a 	bl	4665c <printk>
   239c8:	4621      	mov	r1, r4
   239ca:	480a      	ldr	r0, [pc, #40]	; (239f4 <mqtt_mutex_unlock+0x54>)
   239cc:	f022 fe46 	bl	4665c <printk>
}
   239d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   239d4:	2143      	movs	r1, #67	; 0x43
   239d6:	4804      	ldr	r0, [pc, #16]	; (239e8 <mqtt_mutex_unlock+0x48>)
   239d8:	f022 be4d 	b.w	46676 <assert_post_action>
		return -EPERM;
   239dc:	f04f 34ff 	mov.w	r4, #4294967295
   239e0:	e7ec      	b.n	239bc <mqtt_mutex_unlock+0x1c>
   239e2:	bf00      	nop
   239e4:	2002a2dc 	.word	0x2002a2dc
   239e8:	0004d0a2 	.word	0x0004d0a2
   239ec:	0004d0d4 	.word	0x0004d0d4
   239f0:	0004b5bf 	.word	0x0004b5bf
   239f4:	0004d0dd 	.word	0x0004d0dd

000239f8 <mqtt_mutex_lock>:
{
   239f8:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   239fa:	f04f 31ff 	mov.w	r1, #4294967295
   239fe:	f018 fd05 	bl	3c40c <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   23a02:	4604      	mov	r4, r0
   23a04:	b178      	cbz	r0, 23a26 <mqtt_mutex_lock+0x2e>
   23a06:	2339      	movs	r3, #57	; 0x39
   23a08:	4a07      	ldr	r2, [pc, #28]	; (23a28 <mqtt_mutex_lock+0x30>)
   23a0a:	4908      	ldr	r1, [pc, #32]	; (23a2c <mqtt_mutex_lock+0x34>)
   23a0c:	4808      	ldr	r0, [pc, #32]	; (23a30 <mqtt_mutex_lock+0x38>)
   23a0e:	f022 fe25 	bl	4665c <printk>
   23a12:	4621      	mov	r1, r4
   23a14:	4807      	ldr	r0, [pc, #28]	; (23a34 <mqtt_mutex_lock+0x3c>)
   23a16:	f022 fe21 	bl	4665c <printk>
}
   23a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   23a1e:	2139      	movs	r1, #57	; 0x39
   23a20:	4801      	ldr	r0, [pc, #4]	; (23a28 <mqtt_mutex_lock+0x30>)
   23a22:	f022 be28 	b.w	46676 <assert_post_action>
}
   23a26:	bd10      	pop	{r4, pc}
   23a28:	0004d0a2 	.word	0x0004d0a2
   23a2c:	0004d0d4 	.word	0x0004d0d4
   23a30:	0004b5bf 	.word	0x0004b5bf
   23a34:	0004d082 	.word	0x0004d082

00023a38 <close>:
{
   23a38:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   23a3a:	4c10      	ldr	r4, [pc, #64]	; (23a7c <close+0x44>)
{
   23a3c:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   23a3e:	6823      	ldr	r3, [r4, #0]
   23a40:	b94b      	cbnz	r3, 23a56 <close+0x1e>
   23a42:	490f      	ldr	r1, [pc, #60]	; (23a80 <close+0x48>)
   23a44:	480f      	ldr	r0, [pc, #60]	; (23a84 <close+0x4c>)
   23a46:	2321      	movs	r3, #33	; 0x21
   23a48:	4a0f      	ldr	r2, [pc, #60]	; (23a88 <close+0x50>)
   23a4a:	f022 fe07 	bl	4665c <printk>
   23a4e:	2121      	movs	r1, #33	; 0x21
   23a50:	480d      	ldr	r0, [pc, #52]	; (23a88 <close+0x50>)
   23a52:	f022 fe10 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   23a56:	6823      	ldr	r3, [r4, #0]
   23a58:	685b      	ldr	r3, [r3, #4]
   23a5a:	b94b      	cbnz	r3, 23a70 <close+0x38>
   23a5c:	490b      	ldr	r1, [pc, #44]	; (23a8c <close+0x54>)
   23a5e:	4809      	ldr	r0, [pc, #36]	; (23a84 <close+0x4c>)
   23a60:	2322      	movs	r3, #34	; 0x22
   23a62:	4a09      	ldr	r2, [pc, #36]	; (23a88 <close+0x50>)
   23a64:	f022 fdfa 	bl	4665c <printk>
   23a68:	2122      	movs	r1, #34	; 0x22
   23a6a:	4807      	ldr	r0, [pc, #28]	; (23a88 <close+0x50>)
   23a6c:	f022 fe03 	bl	46676 <assert_post_action>
	return socket_ops->close(sock);
   23a70:	6823      	ldr	r3, [r4, #0]
   23a72:	4628      	mov	r0, r5
}
   23a74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   23a78:	685b      	ldr	r3, [r3, #4]
   23a7a:	4718      	bx	r3
   23a7c:	20023978 	.word	0x20023978
   23a80:	0004b6f3 	.word	0x0004b6f3
   23a84:	0004b5bf 	.word	0x0004b5bf
   23a88:	0004b6c2 	.word	0x0004b6c2
   23a8c:	0004d027 	.word	0x0004d027

00023a90 <setsockopt.constprop.1>:
static inline int setsockopt(int sock, int level, int optname,
   23a90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   23a94:	4c15      	ldr	r4, [pc, #84]	; (23aec <setsockopt.constprop.1+0x5c>)
static inline int setsockopt(int sock, int level, int optname,
   23a96:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   23a98:	6823      	ldr	r3, [r4, #0]
static inline int setsockopt(int sock, int level, int optname,
   23a9a:	4605      	mov	r5, r0
   23a9c:	460e      	mov	r6, r1
   23a9e:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   23aa0:	b94b      	cbnz	r3, 23ab6 <setsockopt.constprop.1+0x26>
   23aa2:	4913      	ldr	r1, [pc, #76]	; (23af0 <setsockopt.constprop.1+0x60>)
   23aa4:	4813      	ldr	r0, [pc, #76]	; (23af4 <setsockopt.constprop.1+0x64>)
   23aa6:	2357      	movs	r3, #87	; 0x57
   23aa8:	4a13      	ldr	r2, [pc, #76]	; (23af8 <setsockopt.constprop.1+0x68>)
   23aaa:	f022 fdd7 	bl	4665c <printk>
   23aae:	2157      	movs	r1, #87	; 0x57
   23ab0:	4811      	ldr	r0, [pc, #68]	; (23af8 <setsockopt.constprop.1+0x68>)
   23ab2:	f022 fde0 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   23ab6:	6823      	ldr	r3, [r4, #0]
   23ab8:	69db      	ldr	r3, [r3, #28]
   23aba:	b94b      	cbnz	r3, 23ad0 <setsockopt.constprop.1+0x40>
   23abc:	490f      	ldr	r1, [pc, #60]	; (23afc <setsockopt.constprop.1+0x6c>)
   23abe:	480d      	ldr	r0, [pc, #52]	; (23af4 <setsockopt.constprop.1+0x64>)
   23ac0:	2358      	movs	r3, #88	; 0x58
   23ac2:	4a0d      	ldr	r2, [pc, #52]	; (23af8 <setsockopt.constprop.1+0x68>)
   23ac4:	f022 fdca 	bl	4665c <printk>
   23ac8:	2158      	movs	r1, #88	; 0x58
   23aca:	480b      	ldr	r0, [pc, #44]	; (23af8 <setsockopt.constprop.1+0x68>)
   23acc:	f022 fdd3 	bl	46676 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   23ad0:	6823      	ldr	r3, [r4, #0]
   23ad2:	f8cd 8000 	str.w	r8, [sp]
   23ad6:	69dc      	ldr	r4, [r3, #28]
   23ad8:	4632      	mov	r2, r6
   23ada:	463b      	mov	r3, r7
   23adc:	f44f 718d 	mov.w	r1, #282	; 0x11a
   23ae0:	4628      	mov	r0, r5
   23ae2:	47a0      	blx	r4
}
   23ae4:	b002      	add	sp, #8
   23ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23aea:	bf00      	nop
   23aec:	20023978 	.word	0x20023978
   23af0:	0004b6f3 	.word	0x0004b6f3
   23af4:	0004b5bf 	.word	0x0004b5bf
   23af8:	0004b6c2 	.word	0x0004b6c2
   23afc:	0004d0ff 	.word	0x0004d0ff

00023b00 <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   23b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   23b04:	4d48      	ldr	r5, [pc, #288]	; (23c28 <mqtt_client_tls_connect+0x128>)
	const struct sockaddr *broker = client->broker;
   23b06:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
   23b08:	682b      	ldr	r3, [r5, #0]
{
   23b0a:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = socket(broker->sa_family,
   23b0c:	883e      	ldrh	r6, [r7, #0]
   23b0e:	b94b      	cbnz	r3, 23b24 <mqtt_client_tls_connect+0x24>
   23b10:	4946      	ldr	r1, [pc, #280]	; (23c2c <mqtt_client_tls_connect+0x12c>)
   23b12:	4847      	ldr	r0, [pc, #284]	; (23c30 <mqtt_client_tls_connect+0x130>)
   23b14:	2319      	movs	r3, #25
   23b16:	4a47      	ldr	r2, [pc, #284]	; (23c34 <mqtt_client_tls_connect+0x134>)
   23b18:	f022 fda0 	bl	4665c <printk>
   23b1c:	2119      	movs	r1, #25
   23b1e:	4845      	ldr	r0, [pc, #276]	; (23c34 <mqtt_client_tls_connect+0x134>)
   23b20:	f022 fda9 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   23b24:	682b      	ldr	r3, [r5, #0]
   23b26:	681b      	ldr	r3, [r3, #0]
   23b28:	b94b      	cbnz	r3, 23b3e <mqtt_client_tls_connect+0x3e>
   23b2a:	4943      	ldr	r1, [pc, #268]	; (23c38 <mqtt_client_tls_connect+0x138>)
   23b2c:	4840      	ldr	r0, [pc, #256]	; (23c30 <mqtt_client_tls_connect+0x130>)
   23b2e:	231a      	movs	r3, #26
   23b30:	4a40      	ldr	r2, [pc, #256]	; (23c34 <mqtt_client_tls_connect+0x134>)
   23b32:	f022 fd93 	bl	4665c <printk>
   23b36:	211a      	movs	r1, #26
   23b38:	483e      	ldr	r0, [pc, #248]	; (23c34 <mqtt_client_tls_connect+0x134>)
   23b3a:	f022 fd9c 	bl	46676 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   23b3e:	682b      	ldr	r3, [r5, #0]
   23b40:	f44f 7281 	mov.w	r2, #258	; 0x102
   23b44:	681b      	ldr	r3, [r3, #0]
   23b46:	2101      	movs	r1, #1
   23b48:	4630      	mov	r0, r6
   23b4a:	4798      	blx	r3
					    SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   23b4c:	2800      	cmp	r0, #0
	client->transport.tls.sock = socket(broker->sa_family,
   23b4e:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   23b50:	da05      	bge.n	23b5e <mqtt_client_tls_connect+0x5e>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void)close(client->transport.tls.sock);
	return -errno;
   23b52:	f022 ffb7 	bl	46ac4 <__errno>
   23b56:	6800      	ldr	r0, [r0, #0]
   23b58:	4240      	negs	r0, r0
}
   23b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = setsockopt(client->transport.tls.sock, SOL_TLS, TLS_PEER_VERIFY,
   23b5e:	2304      	movs	r3, #4
   23b60:	f104 022c 	add.w	r2, r4, #44	; 0x2c
   23b64:	2105      	movs	r1, #5
   23b66:	f7ff ff93 	bl	23a90 <setsockopt.constprop.1>
	if (ret < 0) {
   23b6a:	2800      	cmp	r0, #0
   23b6c:	da03      	bge.n	23b76 <mqtt_client_tls_connect+0x76>
	(void)close(client->transport.tls.sock);
   23b6e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   23b70:	f7ff ff62 	bl	23a38 <close>
   23b74:	e7ed      	b.n	23b52 <mqtt_client_tls_connect+0x52>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   23b76:	6b62      	ldr	r2, [r4, #52]	; 0x34
   23b78:	2a00      	cmp	r2, #0
   23b7a:	d131      	bne.n	23be0 <mqtt_client_tls_connect+0xe0>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   23b7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   23b7e:	2a00      	cmp	r2, #0
   23b80:	d139      	bne.n	23bf6 <mqtt_client_tls_connect+0xf6>
	if (tls_config->hostname) {
   23b82:	6c26      	ldr	r6, [r4, #64]	; 0x40
   23b84:	2e00      	cmp	r6, #0
   23b86:	d141      	bne.n	23c0c <mqtt_client_tls_connect+0x10c>
	if (broker->sa_family == AF_INET) {
   23b88:	883b      	ldrh	r3, [r7, #0]
	ret = connect(client->transport.tls.sock, client->broker,
   23b8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   23b8c:	2b01      	cmp	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   23b8e:	682b      	ldr	r3, [r5, #0]
   23b90:	bf0c      	ite	eq
   23b92:	f04f 0808 	moveq.w	r8, #8
   23b96:	f04f 0818 	movne.w	r8, #24
	ret = connect(client->transport.tls.sock, client->broker,
   23b9a:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
   23b9c:	b94b      	cbnz	r3, 23bb2 <mqtt_client_tls_connect+0xb2>
   23b9e:	4923      	ldr	r1, [pc, #140]	; (23c2c <mqtt_client_tls_connect+0x12c>)
   23ba0:	4823      	ldr	r0, [pc, #140]	; (23c30 <mqtt_client_tls_connect+0x130>)
   23ba2:	2345      	movs	r3, #69	; 0x45
   23ba4:	4a23      	ldr	r2, [pc, #140]	; (23c34 <mqtt_client_tls_connect+0x134>)
   23ba6:	f022 fd59 	bl	4665c <printk>
   23baa:	2145      	movs	r1, #69	; 0x45
   23bac:	4821      	ldr	r0, [pc, #132]	; (23c34 <mqtt_client_tls_connect+0x134>)
   23bae:	f022 fd62 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   23bb2:	682b      	ldr	r3, [r5, #0]
   23bb4:	695b      	ldr	r3, [r3, #20]
   23bb6:	b94b      	cbnz	r3, 23bcc <mqtt_client_tls_connect+0xcc>
   23bb8:	4920      	ldr	r1, [pc, #128]	; (23c3c <mqtt_client_tls_connect+0x13c>)
   23bba:	481d      	ldr	r0, [pc, #116]	; (23c30 <mqtt_client_tls_connect+0x130>)
   23bbc:	2346      	movs	r3, #70	; 0x46
   23bbe:	4a1d      	ldr	r2, [pc, #116]	; (23c34 <mqtt_client_tls_connect+0x134>)
   23bc0:	f022 fd4c 	bl	4665c <printk>
   23bc4:	2146      	movs	r1, #70	; 0x46
   23bc6:	481b      	ldr	r0, [pc, #108]	; (23c34 <mqtt_client_tls_connect+0x134>)
   23bc8:	f022 fd55 	bl	46676 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   23bcc:	682b      	ldr	r3, [r5, #0]
   23bce:	4642      	mov	r2, r8
   23bd0:	695b      	ldr	r3, [r3, #20]
   23bd2:	4639      	mov	r1, r7
   23bd4:	4630      	mov	r0, r6
   23bd6:	4798      	blx	r3
	if (ret < 0) {
   23bd8:	2800      	cmp	r0, #0
   23bda:	dbc8      	blt.n	23b6e <mqtt_client_tls_connect+0x6e>
	return 0;
   23bdc:	2000      	movs	r0, #0
   23bde:	e7bc      	b.n	23b5a <mqtt_client_tls_connect+0x5a>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   23be0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23be2:	2b00      	cmp	r3, #0
   23be4:	d0ca      	beq.n	23b7c <mqtt_client_tls_connect+0x7c>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   23be6:	009b      	lsls	r3, r3, #2
   23be8:	2103      	movs	r1, #3
   23bea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   23bec:	f7ff ff50 	bl	23a90 <setsockopt.constprop.1>
		if (ret < 0) {
   23bf0:	2800      	cmp	r0, #0
   23bf2:	dac3      	bge.n	23b7c <mqtt_client_tls_connect+0x7c>
   23bf4:	e7bb      	b.n	23b6e <mqtt_client_tls_connect+0x6e>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   23bf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   23bf8:	2b00      	cmp	r3, #0
   23bfa:	d0c2      	beq.n	23b82 <mqtt_client_tls_connect+0x82>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   23bfc:	009b      	lsls	r3, r3, #2
   23bfe:	2101      	movs	r1, #1
   23c00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   23c02:	f7ff ff45 	bl	23a90 <setsockopt.constprop.1>
		if (ret < 0) {
   23c06:	2800      	cmp	r0, #0
   23c08:	dabb      	bge.n	23b82 <mqtt_client_tls_connect+0x82>
   23c0a:	e7b0      	b.n	23b6e <mqtt_client_tls_connect+0x6e>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   23c0c:	4630      	mov	r0, r6
   23c0e:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
   23c12:	f01c fcb7 	bl	40584 <strlen>
   23c16:	4632      	mov	r2, r6
   23c18:	4603      	mov	r3, r0
   23c1a:	2102      	movs	r1, #2
   23c1c:	4640      	mov	r0, r8
   23c1e:	f7ff ff37 	bl	23a90 <setsockopt.constprop.1>
		if (ret < 0) {
   23c22:	2800      	cmp	r0, #0
   23c24:	dab0      	bge.n	23b88 <mqtt_client_tls_connect+0x88>
   23c26:	e7a2      	b.n	23b6e <mqtt_client_tls_connect+0x6e>
   23c28:	20023978 	.word	0x20023978
   23c2c:	0004b6f3 	.word	0x0004b6f3
   23c30:	0004b5bf 	.word	0x0004b5bf
   23c34:	0004b6c2 	.word	0x0004b6c2
   23c38:	0004d039 	.word	0x0004d039
   23c3c:	0004d04c 	.word	0x0004d04c

00023c40 <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   23c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c44:	4680      	mov	r8, r0
   23c46:	4689      	mov	r9, r1
   23c48:	4617      	mov	r7, r2
	u32_t offset = 0U;
   23c4a:	2400      	movs	r4, #0
	__ASSERT_NO_MSG(socket_ops);
   23c4c:	4d1d      	ldr	r5, [pc, #116]	; (23cc4 <mqtt_client_tls_write+0x84>)
	int ret;

	while (offset < datalen) {
   23c4e:	42bc      	cmp	r4, r7
   23c50:	d301      	bcc.n	23c56 <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   23c52:	2000      	movs	r0, #0
   23c54:	e031      	b.n	23cba <mqtt_client_tls_write+0x7a>
		ret = send(client->transport.tls.sock, data + offset,
   23c56:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   23c5a:	eb09 0a04 	add.w	sl, r9, r4
   23c5e:	461e      	mov	r6, r3
   23c60:	4b19      	ldr	r3, [pc, #100]	; (23cc8 <mqtt_client_tls_write+0x88>)
   23c62:	eba7 0b04 	sub.w	fp, r7, r4
   23c66:	681b      	ldr	r3, [r3, #0]
   23c68:	b94b      	cbnz	r3, 23c7e <mqtt_client_tls_write+0x3e>
   23c6a:	4918      	ldr	r1, [pc, #96]	; (23ccc <mqtt_client_tls_write+0x8c>)
   23c6c:	4818      	ldr	r0, [pc, #96]	; (23cd0 <mqtt_client_tls_write+0x90>)
   23c6e:	237e      	movs	r3, #126	; 0x7e
   23c70:	462a      	mov	r2, r5
   23c72:	f022 fcf3 	bl	4665c <printk>
   23c76:	217e      	movs	r1, #126	; 0x7e
   23c78:	4628      	mov	r0, r5
   23c7a:	f022 fcfc 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   23c7e:	4b12      	ldr	r3, [pc, #72]	; (23cc8 <mqtt_client_tls_write+0x88>)
   23c80:	681b      	ldr	r3, [r3, #0]
   23c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23c84:	b94b      	cbnz	r3, 23c9a <mqtt_client_tls_write+0x5a>
   23c86:	4913      	ldr	r1, [pc, #76]	; (23cd4 <mqtt_client_tls_write+0x94>)
   23c88:	4811      	ldr	r0, [pc, #68]	; (23cd0 <mqtt_client_tls_write+0x90>)
   23c8a:	237f      	movs	r3, #127	; 0x7f
   23c8c:	462a      	mov	r2, r5
   23c8e:	f022 fce5 	bl	4665c <printk>
   23c92:	217f      	movs	r1, #127	; 0x7f
   23c94:	4628      	mov	r0, r5
   23c96:	f022 fcee 	bl	46676 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   23c9a:	4b0b      	ldr	r3, [pc, #44]	; (23cc8 <mqtt_client_tls_write+0x88>)
   23c9c:	4630      	mov	r0, r6
   23c9e:	681b      	ldr	r3, [r3, #0]
   23ca0:	465a      	mov	r2, fp
   23ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23ca4:	4651      	mov	r1, sl
   23ca6:	469c      	mov	ip, r3
   23ca8:	2300      	movs	r3, #0
   23caa:	4666      	mov	r6, ip
   23cac:	47b0      	blx	r6
		if (ret < 0) {
   23cae:	2800      	cmp	r0, #0
   23cb0:	da05      	bge.n	23cbe <mqtt_client_tls_write+0x7e>
			return -errno;
   23cb2:	f022 ff07 	bl	46ac4 <__errno>
   23cb6:	6800      	ldr	r0, [r0, #0]
   23cb8:	4240      	negs	r0, r0
}
   23cba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   23cbe:	4404      	add	r4, r0
   23cc0:	e7c5      	b.n	23c4e <mqtt_client_tls_write+0xe>
   23cc2:	bf00      	nop
   23cc4:	0004b6c2 	.word	0x0004b6c2
   23cc8:	20023978 	.word	0x20023978
   23ccc:	0004b6f3 	.word	0x0004b6f3
   23cd0:	0004b5bf 	.word	0x0004b5bf
   23cd4:	0004d071 	.word	0x0004d071

00023cd8 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   23cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   23cdc:	4c18      	ldr	r4, [pc, #96]	; (23d40 <mqtt_client_tls_read+0x68>)
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= MSG_DONTWAIT;
   23cde:	2b00      	cmp	r3, #0
   23ce0:	6823      	ldr	r3, [r4, #0]
{
   23ce2:	460e      	mov	r6, r1
   23ce4:	4617      	mov	r7, r2
		flags |= MSG_DONTWAIT;
   23ce6:	bf14      	ite	ne
   23ce8:	f04f 0800 	movne.w	r8, #0
   23cec:	f04f 0840 	moveq.w	r8, #64	; 0x40
	}

	ret = recv(client->transport.tls.sock, data, buflen, flags);
   23cf0:	6a85      	ldr	r5, [r0, #40]	; 0x28
   23cf2:	b94b      	cbnz	r3, 23d08 <mqtt_client_tls_read+0x30>
   23cf4:	4913      	ldr	r1, [pc, #76]	; (23d44 <mqtt_client_tls_read+0x6c>)
   23cf6:	4814      	ldr	r0, [pc, #80]	; (23d48 <mqtt_client_tls_read+0x70>)
   23cf8:	2369      	movs	r3, #105	; 0x69
   23cfa:	4a14      	ldr	r2, [pc, #80]	; (23d4c <mqtt_client_tls_read+0x74>)
   23cfc:	f022 fcae 	bl	4665c <printk>
   23d00:	2169      	movs	r1, #105	; 0x69
   23d02:	4812      	ldr	r0, [pc, #72]	; (23d4c <mqtt_client_tls_read+0x74>)
   23d04:	f022 fcb7 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   23d08:	6823      	ldr	r3, [r4, #0]
   23d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23d0c:	b94b      	cbnz	r3, 23d22 <mqtt_client_tls_read+0x4a>
   23d0e:	4910      	ldr	r1, [pc, #64]	; (23d50 <mqtt_client_tls_read+0x78>)
   23d10:	480d      	ldr	r0, [pc, #52]	; (23d48 <mqtt_client_tls_read+0x70>)
   23d12:	236a      	movs	r3, #106	; 0x6a
   23d14:	4a0d      	ldr	r2, [pc, #52]	; (23d4c <mqtt_client_tls_read+0x74>)
   23d16:	f022 fca1 	bl	4665c <printk>
   23d1a:	216a      	movs	r1, #106	; 0x6a
   23d1c:	480b      	ldr	r0, [pc, #44]	; (23d4c <mqtt_client_tls_read+0x74>)
   23d1e:	f022 fcaa 	bl	46676 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   23d22:	6823      	ldr	r3, [r4, #0]
   23d24:	463a      	mov	r2, r7
   23d26:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   23d28:	4631      	mov	r1, r6
   23d2a:	4643      	mov	r3, r8
   23d2c:	4628      	mov	r0, r5
   23d2e:	47a0      	blx	r4
	if (ret < 0) {
   23d30:	2800      	cmp	r0, #0
   23d32:	da03      	bge.n	23d3c <mqtt_client_tls_read+0x64>
		return -errno;
   23d34:	f022 fec6 	bl	46ac4 <__errno>
   23d38:	6800      	ldr	r0, [r0, #0]
   23d3a:	4240      	negs	r0, r0
	}

	return ret;
}
   23d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23d40:	20023978 	.word	0x20023978
   23d44:	0004b6f3 	.word	0x0004b6f3
   23d48:	0004b5bf 	.word	0x0004b5bf
   23d4c:	0004b6c2 	.word	0x0004b6c2
   23d50:	0004d060 	.word	0x0004d060

00023d54 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   23d54:	b570      	push	{r4, r5, r6, lr}
   23d56:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   23d58:	6884      	ldr	r4, [r0, #8]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   23d5a:	460d      	mov	r5, r1
   23d5c:	b961      	cbnz	r1, 23d78 <gpio_nrfx_manage_callback+0x24>
   23d5e:	4922      	ldr	r1, [pc, #136]	; (23de8 <gpio_nrfx_manage_callback+0x94>)
   23d60:	231c      	movs	r3, #28
   23d62:	4a22      	ldr	r2, [pc, #136]	; (23dec <gpio_nrfx_manage_callback+0x98>)
   23d64:	4822      	ldr	r0, [pc, #136]	; (23df0 <gpio_nrfx_manage_callback+0x9c>)
   23d66:	f022 fc79 	bl	4665c <printk>
   23d6a:	4822      	ldr	r0, [pc, #136]	; (23df4 <gpio_nrfx_manage_callback+0xa0>)
   23d6c:	f022 fc76 	bl	4665c <printk>
   23d70:	211c      	movs	r1, #28
   23d72:	481e      	ldr	r0, [pc, #120]	; (23dec <gpio_nrfx_manage_callback+0x98>)
   23d74:	f022 fc7f 	bl	46676 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   23d78:	686b      	ldr	r3, [r5, #4]
   23d7a:	b963      	cbnz	r3, 23d96 <gpio_nrfx_manage_callback+0x42>
   23d7c:	491e      	ldr	r1, [pc, #120]	; (23df8 <gpio_nrfx_manage_callback+0xa4>)
   23d7e:	231d      	movs	r3, #29
   23d80:	4a1a      	ldr	r2, [pc, #104]	; (23dec <gpio_nrfx_manage_callback+0x98>)
   23d82:	481b      	ldr	r0, [pc, #108]	; (23df0 <gpio_nrfx_manage_callback+0x9c>)
   23d84:	f022 fc6a 	bl	4665c <printk>
   23d88:	481c      	ldr	r0, [pc, #112]	; (23dfc <gpio_nrfx_manage_callback+0xa8>)
   23d8a:	f022 fc67 	bl	4665c <printk>
   23d8e:	211d      	movs	r1, #29
   23d90:	4816      	ldr	r0, [pc, #88]	; (23dec <gpio_nrfx_manage_callback+0x98>)
   23d92:	f022 fc70 	bl	46676 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   23d96:	6823      	ldr	r3, [r4, #0]

	if (!sys_slist_is_empty(callbacks)) {
   23d98:	b15b      	cbz	r3, 23db2 <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23d9a:	2200      	movs	r2, #0
   23d9c:	429d      	cmp	r5, r3
   23d9e:	d113      	bne.n	23dc8 <gpio_nrfx_manage_callback+0x74>
   23da0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   23da2:	b95a      	cbnz	r2, 23dbc <gpio_nrfx_manage_callback+0x68>
   23da4:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   23da6:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   23da8:	4295      	cmp	r5, r2
   23daa:	d100      	bne.n	23dae <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   23dac:	6063      	str	r3, [r4, #4]
	parent->next = child;
   23dae:	2300      	movs	r3, #0
   23db0:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   23db2:	b976      	cbnz	r6, 23dd2 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   23db4:	2000      	movs	r0, #0
				     callback, set);
}
   23db6:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23db8:	460b      	mov	r3, r1
   23dba:	e7ef      	b.n	23d9c <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
   23dbc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   23dbe:	6863      	ldr	r3, [r4, #4]
   23dc0:	429d      	cmp	r5, r3
	list->tail = node;
   23dc2:	bf08      	it	eq
   23dc4:	6062      	streq	r2, [r4, #4]
   23dc6:	e7f2      	b.n	23dae <gpio_nrfx_manage_callback+0x5a>
	return node->next;
   23dc8:	6819      	ldr	r1, [r3, #0]
   23dca:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23dcc:	2900      	cmp	r1, #0
   23dce:	d1f3      	bne.n	23db8 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   23dd0:	b13e      	cbz	r6, 23de2 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   23dd2:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   23dd4:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   23dd6:	6860      	ldr	r0, [r4, #4]
	list->head = node;
   23dd8:	6025      	str	r5, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   23dda:	2800      	cmp	r0, #0
   23ddc:	d1ea      	bne.n	23db4 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   23dde:	6065      	str	r5, [r4, #4]
   23de0:	e7e9      	b.n	23db6 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   23de2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   23de6:	e7e6      	b.n	23db6 <gpio_nrfx_manage_callback+0x62>
   23de8:	0004d434 	.word	0x0004d434
   23dec:	0004d12f 	.word	0x0004d12f
   23df0:	0004b5bf 	.word	0x0004b5bf
   23df4:	0004d15d 	.word	0x0004d15d
   23df8:	0004d16c 	.word	0x0004d16c
   23dfc:	0004d17e 	.word	0x0004d17e

00023e00 <nrf_gpio_pin_port_decode.isra.6.part.7>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   23e00:	b508      	push	{r3, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   23e02:	4a03      	ldr	r2, [pc, #12]	; (23e10 <nrf_gpio_pin_port_decode.isra.6.part.7+0x10>)
   23e04:	4b03      	ldr	r3, [pc, #12]	; (23e14 <nrf_gpio_pin_port_decode.isra.6.part.7+0x14>)
   23e06:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   23e0a:	4803      	ldr	r0, [pc, #12]	; (23e18 <nrf_gpio_pin_port_decode.isra.6.part.7+0x18>)
   23e0c:	f01b fbee 	bl	3f5ec <__assert_func>
   23e10:	0004d116 	.word	0x0004d116
   23e14:	0004d1ce 	.word	0x0004d1ce
   23e18:	0004d1dc 	.word	0x0004d1dc

00023e1c <nrf_gpio_cfg_sense_set>:
   23e1c:	281f      	cmp	r0, #31
        sense_config);
}


__STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
{
   23e1e:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   23e20:	d901      	bls.n	23e26 <nrf_gpio_cfg_sense_set+0xa>
   23e22:	f7ff ffed 	bl	23e00 <nrf_gpio_pin_port_decode.isra.6.part.7>
   23e26:	4b08      	ldr	r3, [pc, #32]	; (23e48 <nrf_gpio_cfg_sense_set+0x2c>)
   23e28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   23e2c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   23e30:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   23e34:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   23e38:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   23e3c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   23e40:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   23e44:	bd08      	pop	{r3, pc}
   23e46:	bf00      	nop
   23e48:	40842500 	.word	0x40842500

00023e4c <gpiote_pin_int_cfg>:
{
   23e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
   23e50:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   23e52:	f001 041f 	and.w	r4, r1, #31
   23e56:	689b      	ldr	r3, [r3, #8]
{
   23e58:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   23e5a:	791b      	ldrb	r3, [r3, #4]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
   23e5c:	4e48      	ldr	r6, [pc, #288]	; (23f80 <gpiote_pin_int_cfg+0x134>)
   23e5e:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   23e62:	2300      	movs	r3, #0
   23e64:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
   23e68:	6887      	ldr	r7, [r0, #8]
   23e6a:	b2d2      	uxtb	r2, r2
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   23e6c:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   23e70:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   23e74:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
   23e78:	428c      	cmp	r4, r1
   23e7a:	d166      	bne.n	23f4a <gpiote_pin_int_cfg+0xfe>
		    && (intenset & BIT(i))) {
   23e7c:	fa22 f103 	lsr.w	r1, r2, r3
   23e80:	07c9      	lsls	r1, r1, #31
   23e82:	d562      	bpl.n	23f4a <gpiote_pin_int_cfg+0xfe>
   23e84:	009a      	lsls	r2, r3, #2
   23e86:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   23e8a:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   23e8e:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   23e92:	f021 0101 	bic.w	r1, r1, #1
   23e96:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
   23e9a:	2201      	movs	r2, #1
   23e9c:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
   23ea0:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   23ea4:	4620      	mov	r0, r4
   23ea6:	2100      	movs	r1, #0
   23ea8:	f7ff ffb8 	bl	23e1c <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   23eac:	68b8      	ldr	r0, [r7, #8]
   23eae:	40e8      	lsrs	r0, r5
   23eb0:	f010 0001 	ands.w	r0, r0, #1
   23eb4:	d047      	beq.n	23f46 <gpiote_pin_int_cfg+0xfa>
   23eb6:	68f8      	ldr	r0, [r7, #12]
   23eb8:	40e8      	lsrs	r0, r5
   23eba:	f010 0001 	ands.w	r0, r0, #1
   23ebe:	d042      	beq.n	23f46 <gpiote_pin_int_cfg+0xfa>
		if (data->trig_edge & BIT(pin)) {
   23ec0:	6978      	ldr	r0, [r7, #20]
   23ec2:	40e8      	lsrs	r0, r5
   23ec4:	f010 0801 	ands.w	r8, r0, #1
   23ec8:	d04b      	beq.n	23f62 <gpiote_pin_int_cfg+0x116>
			if (data->double_edge & BIT(pin)) {
   23eca:	69bb      	ldr	r3, [r7, #24]
   23ecc:	40eb      	lsrs	r3, r5
   23ece:	07db      	lsls	r3, r3, #31
   23ed0:	d43f      	bmi.n	23f52 <gpiote_pin_int_cfg+0x106>
			} else if (((data->active_level & BIT(pin)) != 0U)
   23ed2:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   23ed4:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   23ed6:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   23ed8:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
   23edc:	f003 0301 	and.w	r3, r3, #1
   23ee0:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
   23ee4:	42ab      	cmp	r3, r5
   23ee6:	bf0c      	ite	eq
   23ee8:	2502      	moveq	r5, #2
   23eea:	2501      	movne	r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   23eec:	2200      	movs	r2, #0
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   23eee:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   23ef2:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
   23ef6:	f010 0003 	ands.w	r0, r0, #3
   23efa:	d12c      	bne.n	23f56 <gpiote_pin_int_cfg+0x10a>
			nrf_gpiote_events_t evt =
   23efc:	0093      	lsls	r3, r2, #2
   23efe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23f02:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   23f06:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23f0a:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   23f0c:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   23f10:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   23f14:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23f18:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   23f1c:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   23f20:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   23f24:	430d      	orrs	r5, r1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   23f26:	4917      	ldr	r1, [pc, #92]	; (23f84 <gpiote_pin_int_cfg+0x138>)
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23f28:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   23f2c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   23f30:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   23f34:	f041 0101 	orr.w	r1, r1, #1
   23f38:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
   23f3c:	2301      	movs	r3, #1
   23f3e:	fa03 f202 	lsl.w	r2, r3, r2
    NRF_GPIOTE->INTENSET = mask;
   23f42:	f8c6 2304 	str.w	r2, [r6, #772]	; 0x304
}
   23f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   23f4a:	3301      	adds	r3, #1
   23f4c:	2b08      	cmp	r3, #8
   23f4e:	d18d      	bne.n	23e6c <gpiote_pin_int_cfg+0x20>
   23f50:	e7a8      	b.n	23ea4 <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   23f52:	2503      	movs	r5, #3
   23f54:	e7ca      	b.n	23eec <gpiote_pin_int_cfg+0xa0>
   23f56:	3201      	adds	r2, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   23f58:	2a08      	cmp	r2, #8
   23f5a:	d1c8      	bne.n	23eee <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   23f5c:	f06f 0012 	mvn.w	r0, #18
   23f60:	e7f1      	b.n	23f46 <gpiote_pin_int_cfg+0xfa>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   23f62:	693b      	ldr	r3, [r7, #16]
   23f64:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   23f66:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   23f68:	4053      	eors	r3, r2
   23f6a:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   23f6e:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   23f72:	bf0c      	ite	eq
   23f74:	2103      	moveq	r1, #3
   23f76:	2102      	movne	r1, #2
   23f78:	f7ff ff50 	bl	23e1c <nrf_gpio_cfg_sense_set>
	int res = 0;
   23f7c:	4640      	mov	r0, r8
   23f7e:	e7e2      	b.n	23f46 <gpiote_pin_int_cfg+0xfa>
   23f80:	40031000 	.word	0x40031000
   23f84:	40031100 	.word	0x40031100

00023f88 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   23f88:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   23f8a:	4b09      	ldr	r3, [pc, #36]	; (23fb0 <gpio_nrfx_init+0x28>)
   23f8c:	781a      	ldrb	r2, [r3, #0]
   23f8e:	b96a      	cbnz	r2, 23fac <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   23f90:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   23f92:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   23f94:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   23f96:	2105      	movs	r1, #5
   23f98:	f7fe fae8 	bl	2256c <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   23f9c:	2031      	movs	r0, #49	; 0x31
   23f9e:	f7fe fad5 	bl	2254c <z_arch_irq_enable>
   23fa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   23fa6:	4b03      	ldr	r3, [pc, #12]	; (23fb4 <gpio_nrfx_init+0x2c>)
   23fa8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   23fac:	2000      	movs	r0, #0
   23fae:	bd08      	pop	{r3, pc}
   23fb0:	2002a86c 	.word	0x2002a86c
   23fb4:	40031000 	.word	0x40031000

00023fb8 <gpio_nrfx_config>:
{
   23fb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23fbc:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   23fbe:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   23fc0:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   23fc4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   23fc8:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   23fca:	d049      	beq.n	24060 <gpio_nrfx_config+0xa8>
   23fcc:	dc2c      	bgt.n	24028 <gpio_nrfx_config+0x70>
   23fce:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   23fd2:	d03d      	beq.n	24050 <gpio_nrfx_config+0x98>
   23fd4:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   23fd8:	d03e      	beq.n	24058 <gpio_nrfx_config+0xa0>
   23fda:	bb60      	cbnz	r0, 24036 <gpio_nrfx_config+0x7e>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   23fdc:	f406 7740 	and.w	r7, r6, #768	; 0x300
   23fe0:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   23fe4:	d03e      	beq.n	24064 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_PULLUP;
   23fe6:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   23fea:	4263      	negs	r3, r4
   23fec:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   23fee:	2901      	cmp	r1, #1
		from_pin = pin;
   23ff0:	bf19      	ittee	ne
   23ff2:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   23ff4:	46a1      	movne	r9, r4
		to_pin   = 31U;
   23ff6:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   23ffa:	2400      	moveq	r4, #0
   23ffc:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   24000:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   24004:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   24008:	ea47 070c 	orr.w	r7, r7, ip
   2400c:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   24010:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 240e4 <gpio_nrfx_config+0x12c>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   24014:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   24018:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2401c:	45a1      	cmp	r9, r4
   2401e:	d223      	bcs.n	24068 <gpio_nrfx_config+0xb0>
	return 0;
   24020:	2000      	movs	r0, #0
}
   24022:	b003      	add	sp, #12
   24024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   24028:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   2402c:	d016      	beq.n	2405c <gpio_nrfx_config+0xa4>
   2402e:	dc05      	bgt.n	2403c <gpio_nrfx_config+0x84>
   24030:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   24034:	d00e      	beq.n	24054 <gpio_nrfx_config+0x9c>
		return -EINVAL;
   24036:	f06f 0015 	mvn.w	r0, #21
   2403a:	e7f2      	b.n	24022 <gpio_nrfx_config+0x6a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2403c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   24040:	d004      	beq.n	2404c <gpio_nrfx_config+0x94>
   24042:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   24046:	d1f6      	bne.n	24036 <gpio_nrfx_config+0x7e>
		drive = NRF_GPIO_PIN_H0D1;
   24048:	2007      	movs	r0, #7
		break;
   2404a:	e7c7      	b.n	23fdc <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
   2404c:	2006      	movs	r0, #6
		break;
   2404e:	e7c5      	b.n	23fdc <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
   24050:	2001      	movs	r0, #1
		break;
   24052:	e7c3      	b.n	23fdc <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   24054:	2003      	movs	r0, #3
		break;
   24056:	e7c1      	b.n	23fdc <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
   24058:	2004      	movs	r0, #4
		break;
   2405a:	e7bf      	b.n	23fdc <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
   2405c:	2005      	movs	r0, #5
		break;
   2405e:	e7bd      	b.n	23fdc <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
   24060:	2002      	movs	r0, #2
   24062:	e7bb      	b.n	23fdc <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
   24064:	2303      	movs	r3, #3
   24066:	e7c2      	b.n	23fee <gpio_nrfx_config+0x36>
	return port->config->config_info;
   24068:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   2406c:	6892      	ldr	r2, [r2, #8]
   2406e:	7911      	ldrb	r1, [r2, #4]
   24070:	f004 021f 	and.w	r2, r4, #31
   24074:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   24078:	2a1f      	cmp	r2, #31
   2407a:	dd01      	ble.n	24080 <gpio_nrfx_config+0xc8>
   2407c:	f7ff fec0 	bl	23e00 <nrf_gpio_pin_port_decode.isra.6.part.7>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   24080:	3280      	adds	r2, #128	; 0x80
   24082:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
   24086:	68a9      	ldr	r1, [r5, #8]
   24088:	fa0b f204 	lsl.w	r2, fp, r4
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   2408c:	2b00      	cmp	r3, #0
   2408e:	d025      	beq.n	240dc <gpio_nrfx_config+0x124>
   24090:	4311      	orrs	r1, r2
   24092:	60a9      	str	r1, [r5, #8]
   24094:	6969      	ldr	r1, [r5, #20]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   24096:	06b0      	lsls	r0, r6, #26
   24098:	bf4c      	ite	mi
   2409a:	4311      	orrmi	r1, r2
   2409c:	4391      	bicpl	r1, r2
   2409e:	6169      	str	r1, [r5, #20]
   240a0:	69a9      	ldr	r1, [r5, #24]
		WRITE_BIT(data->double_edge, curr_pin,
   240a2:	0670      	lsls	r0, r6, #25
   240a4:	bf4c      	ite	mi
   240a6:	4311      	orrmi	r1, r2
   240a8:	4391      	bicpl	r1, r2
   240aa:	61a9      	str	r1, [r5, #24]
   240ac:	6929      	ldr	r1, [r5, #16]
		WRITE_BIT(data->active_level, curr_pin,
   240ae:	0770      	lsls	r0, r6, #29
   240b0:	bf4c      	ite	mi
   240b2:	4311      	orrmi	r1, r2
   240b4:	4391      	bicpl	r1, r2
   240b6:	6129      	str	r1, [r5, #16]
   240b8:	69e9      	ldr	r1, [r5, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   240ba:	0630      	lsls	r0, r6, #24
   240bc:	bf4c      	ite	mi
   240be:	430a      	orrmi	r2, r1
   240c0:	ea21 0202 	bicpl.w	r2, r1, r2
   240c4:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   240c6:	4621      	mov	r1, r4
   240c8:	4640      	mov	r0, r8
   240ca:	9301      	str	r3, [sp, #4]
   240cc:	f7ff febe 	bl	23e4c <gpiote_pin_int_cfg>
		if (res != 0) {
   240d0:	2800      	cmp	r0, #0
   240d2:	d1a6      	bne.n	24022 <gpio_nrfx_config+0x6a>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   240d4:	3401      	adds	r4, #1
   240d6:	b2e4      	uxtb	r4, r4
   240d8:	9b01      	ldr	r3, [sp, #4]
   240da:	e79f      	b.n	2401c <gpio_nrfx_config+0x64>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   240dc:	ea21 0102 	bic.w	r1, r1, r2
   240e0:	e7d7      	b.n	24092 <gpio_nrfx_config+0xda>
   240e2:	bf00      	nop
   240e4:	40842500 	.word	0x40842500

000240e8 <gpiote_event_handler>:
{
   240e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   240ec:	4f56      	ldr	r7, [pc, #344]	; (24248 <gpiote_event_handler+0x160>)
   240ee:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   240f0:	2e01      	cmp	r6, #1
   240f2:	d17c      	bne.n	241ee <gpiote_event_handler+0x106>
	u32_t bit = 1U << pin;
   240f4:	46b0      	mov	r8, r6
	u32_t pin = 0U;
   240f6:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   240fa:	4a54      	ldr	r2, [pc, #336]	; (2424c <gpiote_event_handler+0x164>)
   240fc:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   240fe:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   24100:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   24102:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   24106:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
   2410a:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   2410c:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   24110:	430a      	orrs	r2, r1
   24112:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   24116:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   2411a:	691b      	ldr	r3, [r3, #16]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   2411c:	6912      	ldr	r2, [r2, #16]
   2411e:	405c      	eors	r4, r3
   24120:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
   24122:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   24126:	2d00      	cmp	r5, #0
   24128:	d14e      	bne.n	241c8 <gpiote_event_handler+0xe0>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   2412a:	603d      	str	r5, [r7, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   2412c:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
   2412e:	2701      	movs	r7, #1
   24130:	469e      	mov	lr, r3
    return (NRF_GPIOTE->INTENSET & mask);
   24132:	4d47      	ldr	r5, [pc, #284]	; (24250 <gpiote_event_handler+0x168>)
   24134:	f8df c124 	ldr.w	ip, [pc, #292]	; 2425c <gpiote_event_handler+0x174>
   24138:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
   2413c:	fa07 f103 	lsl.w	r1, r7, r3
   24140:	4211      	tst	r1, r2
   24142:	d00f      	beq.n	24164 <gpiote_event_handler+0x7c>
   24144:	eb03 020c 	add.w	r2, r3, ip
   24148:	0092      	lsls	r2, r2, #2
   2414a:	6811      	ldr	r1, [r2, #0]
   2414c:	2901      	cmp	r1, #1
   2414e:	d109      	bne.n	24164 <gpiote_event_handler+0x7c>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   24150:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   24154:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   24158:	f8c2 e000 	str.w	lr, [r2]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2415c:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   24160:	4081      	lsls	r1, r0
   24162:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   24164:	3301      	adds	r3, #1
   24166:	2b08      	cmp	r3, #8
   24168:	d1e6      	bne.n	24138 <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
   2416a:	2c00      	cmp	r4, #0
   2416c:	d041      	beq.n	241f2 <gpiote_event_handler+0x10a>
	struct gpio_nrfx_data *data = get_port_data(port);
   2416e:	4b37      	ldr	r3, [pc, #220]	; (2424c <gpiote_event_handler+0x164>)
   24170:	f8d3 9008 	ldr.w	r9, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   24174:	f8d9 5000 	ldr.w	r5, [r9]
   24178:	2d00      	cmp	r5, #0
   2417a:	d03a      	beq.n	241f2 <gpiote_event_handler+0x10a>
			cb->handler(port, cb, pins);
   2417c:	4698      	mov	r8, r3
	return node->next;
   2417e:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
   24180:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 24260 <gpiote_event_handler+0x178>
   24184:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 24264 <gpiote_event_handler+0x17c>
		if ((cb->pin_mask & pins) & data->int_en) {
   24188:	f8d9 300c 	ldr.w	r3, [r9, #12]
   2418c:	68aa      	ldr	r2, [r5, #8]
   2418e:	4023      	ands	r3, r4
   24190:	4213      	tst	r3, r2
   24192:	d015      	beq.n	241c0 <gpiote_event_handler+0xd8>
			__ASSERT(cb->handler, "No callback handler!");
   24194:	686b      	ldr	r3, [r5, #4]
   24196:	b973      	cbnz	r3, 241b6 <gpiote_event_handler+0xce>
   24198:	4659      	mov	r1, fp
   2419a:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
   2419e:	4652      	mov	r2, sl
   241a0:	482c      	ldr	r0, [pc, #176]	; (24254 <gpiote_event_handler+0x16c>)
   241a2:	f022 fa5b 	bl	4665c <printk>
   241a6:	482c      	ldr	r0, [pc, #176]	; (24258 <gpiote_event_handler+0x170>)
   241a8:	f022 fa58 	bl	4665c <printk>
   241ac:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
   241b0:	4650      	mov	r0, sl
   241b2:	f022 fa60 	bl	46676 <assert_post_action>
			cb->handler(port, cb, pins);
   241b6:	686b      	ldr	r3, [r5, #4]
   241b8:	4622      	mov	r2, r4
   241ba:	4629      	mov	r1, r5
   241bc:	4640      	mov	r0, r8
   241be:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   241c0:	b1bf      	cbz	r7, 241f2 <gpiote_event_handler+0x10a>
   241c2:	463d      	mov	r5, r7
   241c4:	683f      	ldr	r7, [r7, #0]
   241c6:	e7df      	b.n	24188 <gpiote_event_handler+0xa0>
		if (level_pins & bit) {
   241c8:	ea15 0f08 	tst.w	r5, r8
   241cc:	d00a      	beq.n	241e4 <gpiote_event_handler+0xfc>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   241ce:	f899 3004 	ldrb.w	r3, [r9, #4]
   241d2:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   241d6:	2100      	movs	r1, #0
   241d8:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   241dc:	f7ff fe1e 	bl	23e1c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   241e0:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   241e4:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   241e8:	ea4f 0848 	mov.w	r8, r8, lsl #1
   241ec:	e79b      	b.n	24126 <gpiote_event_handler+0x3e>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   241ee:	2400      	movs	r4, #0
   241f0:	e79c      	b.n	2412c <gpiote_event_handler+0x44>
	if (port_event) {
   241f2:	2e01      	cmp	r6, #1
   241f4:	d10e      	bne.n	24214 <gpiote_event_handler+0x12c>
	u32_t pin = 0U;
   241f6:	2700      	movs	r7, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   241f8:	4b14      	ldr	r3, [pc, #80]	; (2424c <gpiote_event_handler+0x164>)
   241fa:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
   241fc:	681b      	ldr	r3, [r3, #0]
   241fe:	f8d3 8008 	ldr.w	r8, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   24202:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
   24206:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   24208:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
   2420c:	4313      	orrs	r3, r2
   2420e:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   24212:	b90c      	cbnz	r4, 24218 <gpiote_event_handler+0x130>
}
   24214:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
   24218:	4226      	tst	r6, r4
   2421a:	d012      	beq.n	24242 <gpiote_event_handler+0x15a>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   2421c:	692b      	ldr	r3, [r5, #16]
   2421e:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   24220:	f898 c004 	ldrb.w	ip, [r8, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   24224:	4053      	eors	r3, r2
   24226:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
   24228:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2422c:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   24230:	bf0c      	ite	eq
   24232:	2103      	moveq	r1, #3
   24234:	2102      	movne	r1, #2
   24236:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   2423a:	f7ff fdef 	bl	23e1c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2423e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   24242:	3701      	adds	r7, #1
		bit <<= 1;
   24244:	0076      	lsls	r6, r6, #1
   24246:	e7e4      	b.n	24212 <gpiote_event_handler+0x12a>
   24248:	4003117c 	.word	0x4003117c
   2424c:	20032248 	.word	0x20032248
   24250:	40031000 	.word	0x40031000
   24254:	0004b5bf 	.word	0x0004b5bf
   24258:	0004d17e 	.word	0x0004d17e
   2425c:	1000c440 	.word	0x1000c440
   24260:	0004d195 	.word	0x0004d195
   24264:	0004d1c2 	.word	0x0004d1c2

00024268 <flash_nrf_write_protection>:
}

static int flash_nrf_write_protection(struct device *dev, bool enable)
{
	/* virtual write-erase protection */
	write_protect = enable;
   24268:	4b01      	ldr	r3, [pc, #4]	; (24270 <flash_nrf_write_protection+0x8>)

	return 0;
}
   2426a:	2000      	movs	r0, #0
	write_protect = enable;
   2426c:	7019      	strb	r1, [r3, #0]
}
   2426e:	4770      	bx	lr
   24270:	2002a86d 	.word	0x2002a86d

00024274 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   24274:	4b02      	ldr	r3, [pc, #8]	; (24280 <flash_nrf_pages_layout+0xc>)
   24276:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   24278:	2301      	movs	r3, #1
   2427a:	6013      	str	r3, [r2, #0]
}
   2427c:	4770      	bx	lr
   2427e:	bf00      	nop
   24280:	20023a98 	.word	0x20023a98

00024284 <nrf_flash_init>:
#endif
	.write_block_size = 1,
};

static int nrf_flash_init(struct device *dev)
{
   24284:	b510      	push	{r4, lr}
	z_impl_k_sem_init(sem, initial_count, limit);
   24286:	2201      	movs	r2, #1
   24288:	4807      	ldr	r0, [pc, #28]	; (242a8 <nrf_flash_init+0x24>)
   2428a:	4611      	mov	r1, r2
   2428c:	f019 fc30 	bl	3daf0 <z_impl_k_sem_init>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	k_sem_init(&sem_sync, 0, 1);
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   24290:	f024 fb81 	bl	48996 <nrfx_nvmc_flash_page_count_get>
   24294:	4c05      	ldr	r4, [pc, #20]	; (242ac <nrf_flash_init+0x28>)
   24296:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   24298:	f024 fb7a 	bl	48990 <nrfx_nvmc_flash_page_size_get>
#endif
	write_protect = true;
   2429c:	2201      	movs	r2, #1
   2429e:	4b04      	ldr	r3, [pc, #16]	; (242b0 <nrf_flash_init+0x2c>)
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   242a0:	6060      	str	r0, [r4, #4]
	write_protect = true;
   242a2:	701a      	strb	r2, [r3, #0]

	return 0;
}
   242a4:	2000      	movs	r0, #0
   242a6:	bd10      	pop	{r4, pc}
   242a8:	20023aa0 	.word	0x20023aa0
   242ac:	20023a98 	.word	0x20023a98
   242b0:	2002a86d 	.word	0x2002a86d

000242b4 <flash_nrf_erase>:
{
   242b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   242b6:	4616      	mov	r6, r2
   242b8:	460d      	mov	r5, r1
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   242ba:	f024 fb69 	bl	48990 <nrfx_nvmc_flash_page_size_get>
	if (write_protect) {
   242be:	4b17      	ldr	r3, [pc, #92]	; (2431c <flash_nrf_erase+0x68>)
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   242c0:	4607      	mov	r7, r0
	if (write_protect) {
   242c2:	781b      	ldrb	r3, [r3, #0]
	u32_t n_pages = size / pg_size;
   242c4:	fbb6 f4f0 	udiv	r4, r6, r0
	if (write_protect) {
   242c8:	bb03      	cbnz	r3, 2430c <flash_nrf_erase+0x58>
	if (is_regular_addr_valid(addr, size)) {
   242ca:	4631      	mov	r1, r6
   242cc:	4628      	mov	r0, r5
   242ce:	f023 f974 	bl	475ba <is_regular_addr_valid>
   242d2:	b1f0      	cbz	r0, 24312 <flash_nrf_erase+0x5e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   242d4:	fbb5 f3f7 	udiv	r3, r5, r7
   242d8:	fb07 5313 	mls	r3, r7, r3, r5
   242dc:	b9cb      	cbnz	r3, 24312 <flash_nrf_erase+0x5e>
   242de:	fb07 6714 	mls	r7, r7, r4, r6
   242e2:	b9b7      	cbnz	r7, 24312 <flash_nrf_erase+0x5e>
		if (!n_pages) {
   242e4:	b1c4      	cbz	r4, 24318 <flash_nrf_erase+0x64>
	return z_impl_k_sem_take(sem, timeout);
   242e6:	f04f 31ff 	mov.w	r1, #4294967295
   242ea:	480d      	ldr	r0, [pc, #52]	; (24320 <flash_nrf_erase+0x6c>)
   242ec:	f019 fc7e 	bl	3dbec <z_impl_k_sem_take>

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   242f0:	f024 fb4e 	bl	48990 <nrfx_nvmc_flash_page_size_get>
   242f4:	4604      	mov	r4, r0
		return FLASH_OP_DONE;
	}
#endif

	do {
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   242f6:	4628      	mov	r0, r5
   242f8:	f017 f9a0 	bl	3b63c <nrfx_nvmc_page_erase>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
   242fc:	1b36      	subs	r6, r6, r4
   242fe:	4425      	add	r5, r4
   24300:	d1f9      	bne.n	242f6 <flash_nrf_erase+0x42>
	z_impl_k_sem_give(sem);
   24302:	4807      	ldr	r0, [pc, #28]	; (24320 <flash_nrf_erase+0x6c>)
   24304:	f019 fc2a 	bl	3db5c <z_impl_k_sem_give>
	return ret;
   24308:	4630      	mov	r0, r6
}
   2430a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EACCES;
   2430c:	f06f 000c 	mvn.w	r0, #12
   24310:	e7fb      	b.n	2430a <flash_nrf_erase+0x56>
		return -EINVAL;
   24312:	f06f 0015 	mvn.w	r0, #21
   24316:	e7f8      	b.n	2430a <flash_nrf_erase+0x56>
			return 0;
   24318:	4620      	mov	r0, r4
   2431a:	e7f6      	b.n	2430a <flash_nrf_erase+0x56>
   2431c:	2002a86d 	.word	0x2002a86d
   24320:	20023aa0 	.word	0x20023aa0

00024324 <flash_nrf_write>:
{
   24324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24328:	461d      	mov	r5, r3
	if (write_protect) {
   2432a:	4b28      	ldr	r3, [pc, #160]	; (243cc <flash_nrf_write+0xa8>)
{
   2432c:	460c      	mov	r4, r1
	if (write_protect) {
   2432e:	781b      	ldrb	r3, [r3, #0]
{
   24330:	4616      	mov	r6, r2
	if (write_protect) {
   24332:	2b00      	cmp	r3, #0
   24334:	d141      	bne.n	243ba <flash_nrf_write+0x96>
	return is_regular_addr_valid(addr, len) ||
   24336:	4629      	mov	r1, r5
   24338:	4620      	mov	r0, r4
   2433a:	f023 f93e 	bl	475ba <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   2433e:	2800      	cmp	r0, #0
   24340:	d03e      	beq.n	243c0 <flash_nrf_write+0x9c>
	if (!len) {
   24342:	2d00      	cmp	r5, #0
   24344:	d03f      	beq.n	243c6 <flash_nrf_write+0xa2>
	return z_impl_k_sem_take(sem, timeout);
   24346:	f04f 31ff 	mov.w	r1, #4294967295
   2434a:	4821      	ldr	r0, [pc, #132]	; (243d0 <flash_nrf_write+0xac>)
   2434c:	f019 fc4e 	bl	3dbec <z_impl_k_sem_take>
		ticks_begin = ticker_ticks_now_get();
	}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	/* If not aligned, write unaligned beginning */
	if (!is_aligned_32(w_ctx->flash_addr)) {
   24350:	f014 0703 	ands.w	r7, r4, #3
   24354:	d00c      	beq.n	24370 <flash_nrf_write+0x4c>
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
   24356:	f1c7 0704 	rsb	r7, r7, #4
   2435a:	42af      	cmp	r7, r5
   2435c:	bf28      	it	cs
   2435e:	462f      	movcs	r7, r5
		if (count > w_ctx->len) {
			count = w_ctx->len;
		}

		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
   24360:	4631      	mov	r1, r6
   24362:	4620      	mov	r0, r4
   24364:	463a      	mov	r2, r7
   24366:	f017 f9bb 	bl	3b6e0 <nrfx_nvmc_bytes_write>
	w_ctx->flash_addr += shift;
   2436a:	443c      	add	r4, r7
	w_ctx->data_addr += shift;
   2436c:	443e      	add	r6, r7
	w_ctx->len -= shift;
   2436e:	1bed      	subs	r5, r5, r7
   24370:	f025 0803 	bic.w	r8, r5, #3
   24374:	eb04 0708 	add.w	r7, r4, r8
	}

	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(u32_t)) {
		nrfx_nvmc_word_write(w_ctx->flash_addr,
				     UNALIGNED_GET((u32_t *)w_ctx->data_addr));
   24378:	eba6 0904 	sub.w	r9, r6, r4
   2437c:	e005      	b.n	2438a <flash_nrf_write+0x66>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   2437e:	f859 1004 	ldr.w	r1, [r9, r4]
   24382:	4620      	mov	r0, r4
   24384:	f017 f986 	bl	3b694 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   24388:	3404      	adds	r4, #4
	while (w_ctx->len >= sizeof(u32_t)) {
   2438a:	42a7      	cmp	r7, r4
   2438c:	d1f7      	bne.n	2437e <flash_nrf_write+0x5a>
   2438e:	f06f 0303 	mvn.w	r3, #3
   24392:	08aa      	lsrs	r2, r5, #2
   24394:	fb03 5202 	mla	r2, r3, r2, r5
   24398:	eb06 0108 	add.w	r1, r6, r8
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	}

	/* Write remaining unaligned data */
	if (w_ctx->len) {
   2439c:	b112      	cbz	r2, 243a4 <flash_nrf_write+0x80>
		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
   2439e:	4638      	mov	r0, r7
   243a0:	f017 f99e 	bl	3b6e0 <nrfx_nvmc_bytes_write>

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   243a4:	4a0b      	ldr	r2, [pc, #44]	; (243d4 <flash_nrf_write+0xb0>)
   243a6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   243aa:	07db      	lsls	r3, r3, #31
   243ac:	d5fb      	bpl.n	243a6 <flash_nrf_write+0x82>
	z_impl_k_sem_give(sem);
   243ae:	4808      	ldr	r0, [pc, #32]	; (243d0 <flash_nrf_write+0xac>)
   243b0:	f019 fbd4 	bl	3db5c <z_impl_k_sem_give>
   243b4:	2000      	movs	r0, #0
}
   243b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EACCES;
   243ba:	f06f 000c 	mvn.w	r0, #12
   243be:	e7fa      	b.n	243b6 <flash_nrf_write+0x92>
		return -EINVAL;
   243c0:	f06f 0015 	mvn.w	r0, #21
   243c4:	e7f7      	b.n	243b6 <flash_nrf_write+0x92>
		return 0;
   243c6:	4628      	mov	r0, r5
   243c8:	e7f5      	b.n	243b6 <flash_nrf_write+0x92>
   243ca:	bf00      	nop
   243cc:	2002a86d 	.word	0x2002a86d
   243d0:	20023aa0 	.word	0x20023aa0
   243d4:	40039000 	.word	0x40039000

000243d8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   243d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_hwfc_t hwfc;
#ifdef UARTE_CONFIG_STOP_Two
	bool two_stop_bits = false;
#endif

	switch (cfg->stop_bits) {
   243da:	794b      	ldrb	r3, [r1, #5]
   243dc:	2b01      	cmp	r3, #1
   243de:	d029      	beq.n	24434 <uarte_nrfx_configure+0x5c>
   243e0:	2b03      	cmp	r3, #3
   243e2:	d124      	bne.n	2442e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		break;
#ifdef UARTE_CONFIG_STOP_Two
	case UART_CFG_STOP_BITS_2:
		two_stop_bits = true;
   243e4:	2601      	movs	r6, #1
#endif
	default:
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   243e6:	798b      	ldrb	r3, [r1, #6]
   243e8:	2b03      	cmp	r3, #3
   243ea:	d120      	bne.n	2442e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   243ec:	79cd      	ldrb	r5, [r1, #7]
   243ee:	b12d      	cbz	r5, 243fc <uarte_nrfx_configure+0x24>
   243f0:	2d01      	cmp	r5, #1
   243f2:	d11c      	bne.n	2442e <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   243f4:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   243f6:	689b      	ldr	r3, [r3, #8]
   243f8:	791b      	ldrb	r3, [r3, #4]
   243fa:	b1c3      	cbz	r3, 2442e <uarte_nrfx_configure+0x56>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
   243fc:	790a      	ldrb	r2, [r1, #4]
   243fe:	b112      	cbz	r2, 24406 <uarte_nrfx_configure+0x2e>
   24400:	2a02      	cmp	r2, #2
   24402:	d114      	bne.n	2442e <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UARTE_PARITY_INCLUDED;
   24404:	220e      	movs	r2, #14
	switch (baudrate) {
   24406:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   2440a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2440c:	689b      	ldr	r3, [r3, #8]
   2440e:	681c      	ldr	r4, [r3, #0]
	switch (baudrate) {
   24410:	680b      	ldr	r3, [r1, #0]
   24412:	42bb      	cmp	r3, r7
   24414:	d074      	beq.n	24500 <uarte_nrfx_configure+0x128>
   24416:	d829      	bhi.n	2446c <uarte_nrfx_configure+0x94>
   24418:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   2441c:	d06a      	beq.n	244f4 <uarte_nrfx_configure+0x11c>
   2441e:	d814      	bhi.n	2444a <uarte_nrfx_configure+0x72>
   24420:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   24424:	d04f      	beq.n	244c6 <uarte_nrfx_configure+0xee>
   24426:	d807      	bhi.n	24438 <uarte_nrfx_configure+0x60>
   24428:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   2442c:	d07d      	beq.n	2452a <uarte_nrfx_configure+0x152>
		return -ENOTSUP;
   2442e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24432:	e05b      	b.n	244ec <uarte_nrfx_configure+0x114>
	bool two_stop_bits = false;
   24434:	2600      	movs	r6, #0
   24436:	e7d6      	b.n	243e6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   24438:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   2443c:	d057      	beq.n	244ee <uarte_nrfx_configure+0x116>
   2443e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   24442:	d1f4      	bne.n	2442e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   24444:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   24448:	e03f      	b.n	244ca <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   2444a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   2444e:	d053      	beq.n	244f8 <uarte_nrfx_configure+0x120>
   24450:	d804      	bhi.n	2445c <uarte_nrfx_configure+0x84>
   24452:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   24456:	d1ea      	bne.n	2442e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   24458:	4b35      	ldr	r3, [pc, #212]	; (24530 <uarte_nrfx_configure+0x158>)
   2445a:	e036      	b.n	244ca <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   2445c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   24460:	d04c      	beq.n	244fc <uarte_nrfx_configure+0x124>
   24462:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   24466:	d1e2      	bne.n	2442e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   24468:	4b32      	ldr	r3, [pc, #200]	; (24534 <uarte_nrfx_configure+0x15c>)
   2446a:	e02e      	b.n	244ca <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   2446c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   24470:	d04f      	beq.n	24512 <uarte_nrfx_configure+0x13a>
   24472:	d812      	bhi.n	2449a <uarte_nrfx_configure+0xc2>
   24474:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   24478:	42bb      	cmp	r3, r7
   2447a:	d044      	beq.n	24506 <uarte_nrfx_configure+0x12e>
   2447c:	d805      	bhi.n	2448a <uarte_nrfx_configure+0xb2>
   2447e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   24482:	d1d4      	bne.n	2442e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   24484:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   24488:	e01f      	b.n	244ca <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   2448a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   2448e:	d03d      	beq.n	2450c <uarte_nrfx_configure+0x134>
   24490:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   24494:	d1cb      	bne.n	2442e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   24496:	4b28      	ldr	r3, [pc, #160]	; (24538 <uarte_nrfx_configure+0x160>)
   24498:	e017      	b.n	244ca <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   2449a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   2449e:	d03e      	beq.n	2451e <uarte_nrfx_configure+0x146>
   244a0:	d808      	bhi.n	244b4 <uarte_nrfx_configure+0xdc>
   244a2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   244a6:	d037      	beq.n	24518 <uarte_nrfx_configure+0x140>
   244a8:	4f24      	ldr	r7, [pc, #144]	; (2453c <uarte_nrfx_configure+0x164>)
   244aa:	42bb      	cmp	r3, r7
   244ac:	d1bf      	bne.n	2442e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   244ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   244b2:	e00a      	b.n	244ca <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   244b4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   244b8:	d034      	beq.n	24524 <uarte_nrfx_configure+0x14c>
   244ba:	4f21      	ldr	r7, [pc, #132]	; (24540 <uarte_nrfx_configure+0x168>)
   244bc:	42bb      	cmp	r3, r7
   244be:	d1b6      	bne.n	2442e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   244c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   244c4:	e001      	b.n	244ca <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00027000;
   244c6:	f44f 331c 	mov.w	r3, #159744	; 0x27000

__STATIC_INLINE void nrf_uarte_configure(NRF_UARTE_Type   * p_reg,
                                         nrf_uarte_parity_t parity,
                                         nrf_uarte_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   244ca:	432a      	orrs	r2, r5
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   244cc:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   244d0:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
	}

	nrf_uarte_configure(get_uarte_instance(dev), parity, hwfc);

#ifdef UARTE_CONFIG_STOP_Two
	if (two_stop_bits) {
   244d4:	b12e      	cbz	r6, 244e2 <uarte_nrfx_configure+0x10a>
		/* TODO Change this to nrfx HAL function when available */
		get_uarte_instance(dev)->CONFIG |=
   244d6:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
   244da:	f043 0310 	orr.w	r3, r3, #16
   244de:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
			UARTE_CONFIG_STOP_Two << UARTE_CONFIG_STOP_Pos;
	}
#endif
	get_dev_data(dev)->uart_config = *cfg;
   244e2:	6883      	ldr	r3, [r0, #8]
   244e4:	c903      	ldmia	r1, {r0, r1}
   244e6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   244ea:	2000      	movs	r0, #0
}
   244ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   244ee:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   244f2:	e7ea      	b.n	244ca <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   244f4:	4b13      	ldr	r3, [pc, #76]	; (24544 <uarte_nrfx_configure+0x16c>)
   244f6:	e7e8      	b.n	244ca <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   244f8:	4b13      	ldr	r3, [pc, #76]	; (24548 <uarte_nrfx_configure+0x170>)
   244fa:	e7e6      	b.n	244ca <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   244fc:	4b13      	ldr	r3, [pc, #76]	; (2454c <uarte_nrfx_configure+0x174>)
   244fe:	e7e4      	b.n	244ca <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   24500:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   24504:	e7e1      	b.n	244ca <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   24506:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2450a:	e7de      	b.n	244ca <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   2450c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   24510:	e7db      	b.n	244ca <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   24512:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   24516:	e7d8      	b.n	244ca <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   24518:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   2451c:	e7d5      	b.n	244ca <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   2451e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   24522:	e7d2      	b.n	244ca <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   24524:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   24528:	e7cf      	b.n	244ca <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00014000;
   2452a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   2452e:	e7cc      	b.n	244ca <uarte_nrfx_configure+0xf2>
   24530:	00275000 	.word	0x00275000
   24534:	0075c000 	.word	0x0075c000
   24538:	013a9000 	.word	0x013a9000
   2453c:	0003d090 	.word	0x0003d090
   24540:	000f4240 	.word	0x000f4240
   24544:	0013b000 	.word	0x0013b000
   24548:	003af000 	.word	0x003af000
   2454c:	004ea000 	.word	0x004ea000

00024550 <uarte_0_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
   24550:	b570      	push	{r4, r5, r6, lr}
   24552:	4606      	mov	r6, r0
   24554:	2200      	movs	r2, #0
   24556:	2101      	movs	r1, #1
   24558:	2008      	movs	r0, #8
   2455a:	f7fe f807 	bl	2256c <z_arm_irq_priority_set>
   2455e:	2008      	movs	r0, #8
   24560:	f7fd fff4 	bl	2254c <z_arch_irq_enable>
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   24564:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	return dev->config->config_info;
   24568:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2456a:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
   2456c:	689b      	ldr	r3, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2456e:	2103      	movs	r1, #3
   24570:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   24572:	4b1a      	ldr	r3, [pc, #104]	; (245dc <uarte_0_init+0x8c>)
    p_reg->PSEL.TXD = pseltxd;
   24574:	201d      	movs	r0, #29
   24576:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   24578:	2200      	movs	r2, #0
   2457a:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
   2457e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
   24582:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   24586:	201c      	movs	r0, #28
   24588:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
   2458c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   24590:	6098      	str	r0, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   24592:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
   24596:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
   2459a:	231b      	movs	r3, #27
   2459c:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   245a0:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   245a2:	4629      	mov	r1, r5
   245a4:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   245a8:	4630      	mov	r0, r6
   245aa:	f7ff ff15 	bl	243d8 <uarte_nrfx_configure>
	if (err) {
   245ae:	b9a0      	cbnz	r0, 245da <uarte_0_init+0x8a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   245b0:	2308      	movs	r3, #8
   245b2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   245b6:	f105 030c 	add.w	r3, r5, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   245ba:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   245be:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   245c2:	2301      	movs	r3, #1
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   245c4:	68aa      	ldr	r2, [r5, #8]
   245c6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   245ca:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   245cc:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   245ce:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   245d2:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   245d6:	60a3      	str	r3, [r4, #8]
   245d8:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
   245da:	bd70      	pop	{r4, r5, r6, pc}
   245dc:	40842500 	.word	0x40842500

000245e0 <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
   245e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   245e2:	460d      	mov	r5, r1
   245e4:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   245e6:	b948      	cbnz	r0, 245fc <entropy_cc310_rng_get_entropy+0x1c>
   245e8:	4910      	ldr	r1, [pc, #64]	; (2462c <entropy_cc310_rng_get_entropy+0x4c>)
   245ea:	4811      	ldr	r0, [pc, #68]	; (24630 <entropy_cc310_rng_get_entropy+0x50>)
   245ec:	231e      	movs	r3, #30
   245ee:	4a11      	ldr	r2, [pc, #68]	; (24634 <entropy_cc310_rng_get_entropy+0x54>)
   245f0:	f022 f834 	bl	4665c <printk>
   245f4:	211e      	movs	r1, #30
   245f6:	480f      	ldr	r0, [pc, #60]	; (24634 <entropy_cc310_rng_get_entropy+0x54>)
   245f8:	f022 f83d 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   245fc:	b94d      	cbnz	r5, 24612 <entropy_cc310_rng_get_entropy+0x32>
   245fe:	490e      	ldr	r1, [pc, #56]	; (24638 <entropy_cc310_rng_get_entropy+0x58>)
   24600:	480b      	ldr	r0, [pc, #44]	; (24630 <entropy_cc310_rng_get_entropy+0x50>)
   24602:	231f      	movs	r3, #31
   24604:	4a0b      	ldr	r2, [pc, #44]	; (24634 <entropy_cc310_rng_get_entropy+0x54>)
   24606:	f022 f829 	bl	4665c <printk>
   2460a:	211f      	movs	r1, #31
   2460c:	4809      	ldr	r0, [pc, #36]	; (24634 <entropy_cc310_rng_get_entropy+0x54>)
   2460e:	f022 f832 	bl	46676 <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
   24612:	aa01      	add	r2, sp, #4
   24614:	4621      	mov	r1, r4
   24616:	4628      	mov	r0, r5
   24618:	f7f3 fcea 	bl	17ff0 <spm_request_random_number>
	if (olen != length) {
   2461c:	9b01      	ldr	r3, [sp, #4]
   2461e:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
   24620:	bf18      	it	ne
   24622:	f06f 0015 	mvnne.w	r0, #21
   24626:	b003      	add	sp, #12
   24628:	bd30      	pop	{r4, r5, pc}
   2462a:	bf00      	nop
   2462c:	0004d258 	.word	0x0004d258
   24630:	0004b5bf 	.word	0x0004b5bf
   24634:	0004d227 	.word	0x0004d227
   24638:	0004d26b 	.word	0x0004d26b

0002463c <parse_string>:
{
   2463c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   24640:	680a      	ldr	r2, [r1, #0]
   24642:	688b      	ldr	r3, [r1, #8]
{
   24644:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   24646:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   24648:	18d0      	adds	r0, r2, r3
   2464a:	5cd3      	ldrb	r3, [r2, r3]
{
   2464c:	468b      	mov	fp, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   2464e:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   24650:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   24652:	f040 80ce 	bne.w	247f2 <parse_string+0x1b6>
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
   24656:	462e      	mov	r6, r5
        size_t skipped_bytes = 0;
   24658:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   2465a:	684c      	ldr	r4, [r1, #4]
   2465c:	1ab1      	subs	r1, r6, r2
   2465e:	42a1      	cmp	r1, r4
   24660:	f080 80c7 	bcs.w	247f2 <parse_string+0x1b6>
   24664:	7831      	ldrb	r1, [r6, #0]
   24666:	2922      	cmp	r1, #34	; 0x22
   24668:	d11d      	bne.n	246a6 <parse_string+0x6a>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   2466a:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   2466e:	1a30      	subs	r0, r6, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   24670:	f8db 2010 	ldr.w	r2, [fp, #16]
   24674:	4418      	add	r0, r3
   24676:	4790      	blx	r2
        if (output == NULL)
   24678:	4681      	mov	r9, r0
   2467a:	2800      	cmp	r0, #0
   2467c:	f000 80b9 	beq.w	247f2 <parse_string+0x1b6>
   24680:	4604      	mov	r4, r0
                    *output_pointer++ = '\f';
   24682:	f04f 0a0c 	mov.w	sl, #12
    while (input_pointer < input_end)
   24686:	42b5      	cmp	r5, r6
   24688:	d317      	bcc.n	246ba <parse_string+0x7e>
    *output_pointer = '\0';
   2468a:	2300      	movs	r3, #0
   2468c:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
   2468e:	2310      	movs	r3, #16
    return true;
   24690:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   24692:	e9c8 3903 	strd	r3, r9, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   24696:	f8db 3000 	ldr.w	r3, [fp]
   2469a:	1af6      	subs	r6, r6, r3
    input_buffer->offset++;
   2469c:	3601      	adds	r6, #1
   2469e:	f8cb 6008 	str.w	r6, [fp, #8]
}
   246a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (input_end[0] == '\\')
   246a6:	295c      	cmp	r1, #92	; 0x5c
   246a8:	d105      	bne.n	246b6 <parse_string+0x7a>
   246aa:	3601      	adds	r6, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   246ac:	1ab1      	subs	r1, r6, r2
   246ae:	428c      	cmp	r4, r1
   246b0:	f240 809f 	bls.w	247f2 <parse_string+0x1b6>
                skipped_bytes++;
   246b4:	3301      	adds	r3, #1
            input_end++;
   246b6:	3601      	adds	r6, #1
   246b8:	e7d0      	b.n	2465c <parse_string+0x20>
        if (*input_pointer != '\\')
   246ba:	782b      	ldrb	r3, [r5, #0]
   246bc:	2b5c      	cmp	r3, #92	; 0x5c
   246be:	d003      	beq.n	246c8 <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   246c0:	7023      	strb	r3, [r4, #0]
   246c2:	3501      	adds	r5, #1
   246c4:	3401      	adds	r4, #1
   246c6:	e7de      	b.n	24686 <parse_string+0x4a>
            if ((input_end - input_pointer) < 1)
   246c8:	1b72      	subs	r2, r6, r5
   246ca:	2a00      	cmp	r2, #0
   246cc:	dd08      	ble.n	246e0 <parse_string+0xa4>
            switch (input_pointer[1])
   246ce:	786b      	ldrb	r3, [r5, #1]
   246d0:	2b66      	cmp	r3, #102	; 0x66
   246d2:	d067      	beq.n	247a4 <parse_string+0x168>
   246d4:	d816      	bhi.n	24704 <parse_string+0xc8>
   246d6:	2b2f      	cmp	r3, #47	; 0x2f
   246d8:	d012      	beq.n	24700 <parse_string+0xc4>
   246da:	d80c      	bhi.n	246f6 <parse_string+0xba>
   246dc:	2b22      	cmp	r3, #34	; 0x22
   246de:	d00f      	beq.n	24700 <parse_string+0xc4>
        input_buffer->hooks.deallocate(output);
   246e0:	f8db 3014 	ldr.w	r3, [fp, #20]
   246e4:	4648      	mov	r0, r9
   246e6:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   246e8:	f8db 0000 	ldr.w	r0, [fp]
   246ec:	1a28      	subs	r0, r5, r0
   246ee:	f8cb 0008 	str.w	r0, [fp, #8]
    return false;
   246f2:	2000      	movs	r0, #0
   246f4:	e7d5      	b.n	246a2 <parse_string+0x66>
            switch (input_pointer[1])
   246f6:	2b5c      	cmp	r3, #92	; 0x5c
   246f8:	d002      	beq.n	24700 <parse_string+0xc4>
   246fa:	2b62      	cmp	r3, #98	; 0x62
   246fc:	d1f0      	bne.n	246e0 <parse_string+0xa4>
                    *output_pointer++ = '\b';
   246fe:	2308      	movs	r3, #8
                    *output_pointer++ = input_pointer[1];
   24700:	7023      	strb	r3, [r4, #0]
   24702:	e051      	b.n	247a8 <parse_string+0x16c>
            switch (input_pointer[1])
   24704:	2b72      	cmp	r3, #114	; 0x72
   24706:	d053      	beq.n	247b0 <parse_string+0x174>
   24708:	d803      	bhi.n	24712 <parse_string+0xd6>
   2470a:	2b6e      	cmp	r3, #110	; 0x6e
   2470c:	d1e8      	bne.n	246e0 <parse_string+0xa4>
                    *output_pointer++ = '\n';
   2470e:	230a      	movs	r3, #10
   24710:	e7f6      	b.n	24700 <parse_string+0xc4>
            switch (input_pointer[1])
   24712:	2b74      	cmp	r3, #116	; 0x74
   24714:	d04f      	beq.n	247b6 <parse_string+0x17a>
   24716:	2b75      	cmp	r3, #117	; 0x75
   24718:	d1e2      	bne.n	246e0 <parse_string+0xa4>
    if ((input_end - first_sequence) < 6)
   2471a:	2a05      	cmp	r2, #5
   2471c:	dde0      	ble.n	246e0 <parse_string+0xa4>
    first_code = parse_hex4(first_sequence + 2);
   2471e:	1ca8      	adds	r0, r5, #2
   24720:	f023 f8ad 	bl	4787e <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   24724:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   24728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   2472c:	4607      	mov	r7, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   2472e:	d3d7      	bcc.n	246e0 <parse_string+0xa4>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   24730:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   24734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   24738:	d240      	bcs.n	247bc <parse_string+0x180>
        const unsigned char *second_sequence = first_sequence + 6;
   2473a:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   2473c:	1af3      	subs	r3, r6, r3
   2473e:	2b05      	cmp	r3, #5
   24740:	ddce      	ble.n	246e0 <parse_string+0xa4>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   24742:	79ab      	ldrb	r3, [r5, #6]
   24744:	2b5c      	cmp	r3, #92	; 0x5c
   24746:	d1cb      	bne.n	246e0 <parse_string+0xa4>
   24748:	79eb      	ldrb	r3, [r5, #7]
   2474a:	2b75      	cmp	r3, #117	; 0x75
   2474c:	d1c8      	bne.n	246e0 <parse_string+0xa4>
        second_code = parse_hex4(second_sequence + 2);
   2474e:	f105 0008 	add.w	r0, r5, #8
   24752:	f023 f894 	bl	4787e <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   24756:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   2475a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2475e:	d2bf      	bcs.n	246e0 <parse_string+0xa4>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   24760:	4b26      	ldr	r3, [pc, #152]	; (247fc <parse_string+0x1c0>)
   24762:	f3c0 0009 	ubfx	r0, r0, #0, #10
   24766:	ea03 2787 	and.w	r7, r3, r7, lsl #10
        sequence_length = 12; /* \uXXXX\uXXXX */
   2476a:	230c      	movs	r3, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   2476c:	4338      	orrs	r0, r7
   2476e:	f500 3780 	add.w	r7, r0, #65536	; 0x10000
    else if (codepoint < 0x10000)
   24772:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   24776:	d330      	bcc.n	247da <parse_string+0x19e>
    else if (codepoint <= 0x10FFFF)
   24778:	4a21      	ldr	r2, [pc, #132]	; (24800 <parse_string+0x1c4>)
   2477a:	4297      	cmp	r7, r2
   2477c:	d8b0      	bhi.n	246e0 <parse_string+0xa4>
        first_byte_mark = 0xF0; /* 11110000 */
   2477e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
   24782:	2004      	movs	r0, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   24784:	f100 3eff 	add.w	lr, r0, #4294967295
   24788:	fa54 fe8e 	uxtab	lr, r4, lr
   2478c:	45a6      	cmp	lr, r4
   2478e:	b2fa      	uxtb	r2, r7
   24790:	d127      	bne.n	247e2 <parse_string+0x1a6>
    if (utf8_length > 1)
   24792:	2801      	cmp	r0, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   24794:	bf14      	ite	ne
   24796:	ea42 020c 	orrne.w	r2, r2, ip
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   2479a:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   2479e:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   247a0:	4404      	add	r4, r0
   247a2:	e003      	b.n	247ac <parse_string+0x170>
                    *output_pointer++ = '\f';
   247a4:	f884 a000 	strb.w	sl, [r4]
            unsigned char sequence_length = 2;
   247a8:	2302      	movs	r3, #2
                    *output_pointer++ = '\f';
   247aa:	3401      	adds	r4, #1
            input_pointer += sequence_length;
   247ac:	441d      	add	r5, r3
   247ae:	e76a      	b.n	24686 <parse_string+0x4a>
                    *output_pointer++ = '\r';
   247b0:	f04f 030d 	mov.w	r3, #13
   247b4:	e7a4      	b.n	24700 <parse_string+0xc4>
                    *output_pointer++ = '\t';
   247b6:	f04f 0309 	mov.w	r3, #9
   247ba:	e7a1      	b.n	24700 <parse_string+0xc4>
    if (codepoint < 0x80)
   247bc:	287f      	cmp	r0, #127	; 0x7f
        sequence_length = 6; /* \uXXXX */
   247be:	f04f 0306 	mov.w	r3, #6
    if (codepoint < 0x80)
   247c2:	d906      	bls.n	247d2 <parse_string+0x196>
    else if (codepoint < 0x800)
   247c4:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   247c8:	d2d3      	bcs.n	24772 <parse_string+0x136>
        first_byte_mark = 0xC0; /* 11000000 */
   247ca:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
   247ce:	2002      	movs	r0, #2
   247d0:	e7d8      	b.n	24784 <parse_string+0x148>
    unsigned char first_byte_mark = 0;
   247d2:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
   247d6:	2001      	movs	r0, #1
   247d8:	e7d4      	b.n	24784 <parse_string+0x148>
        first_byte_mark = 0xE0; /* 11100000 */
   247da:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
   247de:	2003      	movs	r0, #3
   247e0:	e7d0      	b.n	24784 <parse_string+0x148>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   247e2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   247e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   247ea:	f80e 2901 	strb.w	r2, [lr], #-1
        codepoint >>= 6;
   247ee:	09bf      	lsrs	r7, r7, #6
   247f0:	e7cc      	b.n	2478c <parse_string+0x150>
    if (input_pointer != NULL)
   247f2:	2d00      	cmp	r5, #0
   247f4:	f47f af78 	bne.w	246e8 <parse_string+0xac>
    return false;
   247f8:	4628      	mov	r0, r5
   247fa:	e752      	b.n	246a2 <parse_string+0x66>
   247fc:	000ffc00 	.word	0x000ffc00
   24800:	0010ffff 	.word	0x0010ffff

00024804 <print_string_ptr>:
{
   24804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24808:	4683      	mov	fp, r0
   2480a:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   2480c:	460f      	mov	r7, r1
   2480e:	b919      	cbnz	r1, 24818 <print_string_ptr+0x14>
        return false;
   24810:	2000      	movs	r0, #0
}
   24812:	b005      	add	sp, #20
   24814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   24818:	4b4a      	ldr	r3, [pc, #296]	; (24944 <print_string_ptr+0x140>)
   2481a:	881a      	ldrh	r2, [r3, #0]
   2481c:	789b      	ldrb	r3, [r3, #2]
   2481e:	f8ad 200c 	strh.w	r2, [sp, #12]
   24822:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   24826:	2800      	cmp	r0, #0
   24828:	d07d      	beq.n	24926 <print_string_ptr+0x122>
   2482a:	4682      	mov	sl, r0
    size_t escape_characters = 0;
   2482c:	2500      	movs	r5, #0
    for (input_pointer = input; *input_pointer; input_pointer++)
   2482e:	4652      	mov	r2, sl
   24830:	f812 3b01 	ldrb.w	r3, [r2], #1
   24834:	b9fb      	cbnz	r3, 24876 <print_string_ptr+0x72>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   24836:	ebaa 0a0b 	sub.w	sl, sl, fp
   2483a:	44aa      	add	sl, r5
    output = ensure(output_buffer, output_length + sizeof(quotes));
   2483c:	f10a 0103 	add.w	r1, sl, #3
   24840:	4638      	mov	r0, r7
   24842:	f023 f8d7 	bl	479f4 <ensure>
    if (output == NULL)
   24846:	4606      	mov	r6, r0
   24848:	2800      	cmp	r0, #0
   2484a:	d0e1      	beq.n	24810 <print_string_ptr+0xc>
   2484c:	2322      	movs	r3, #34	; 0x22
   2484e:	1c44      	adds	r4, r0, #1
   24850:	f10a 0901 	add.w	r9, sl, #1
   24854:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   24858:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   2485a:	b9fd      	cbnz	r5, 2489c <print_string_ptr+0x98>
   2485c:	4652      	mov	r2, sl
   2485e:	4659      	mov	r1, fp
   24860:	4620      	mov	r0, r4
        output[0] = '\"';
   24862:	9301      	str	r3, [sp, #4]
   24864:	f7f5 fb24 	bl	19eb0 <memcpy>
        output[output_length + 1] = '\"';
   24868:	9b01      	ldr	r3, [sp, #4]
   2486a:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   2486e:	f806 5008 	strb.w	r5, [r6, r8]
        return true;
   24872:	2001      	movs	r0, #1
   24874:	e7cd      	b.n	24812 <print_string_ptr+0xe>
        switch (*input_pointer)
   24876:	2b0d      	cmp	r3, #13
   24878:	d808      	bhi.n	2488c <print_string_ptr+0x88>
   2487a:	2b0c      	cmp	r3, #12
   2487c:	d203      	bcs.n	24886 <print_string_ptr+0x82>
   2487e:	f1a3 0108 	sub.w	r1, r3, #8
   24882:	2902      	cmp	r1, #2
   24884:	d806      	bhi.n	24894 <print_string_ptr+0x90>
                escape_characters++;
   24886:	3501      	adds	r5, #1
    size_t escape_characters = 0;
   24888:	4692      	mov	sl, r2
   2488a:	e7d0      	b.n	2482e <print_string_ptr+0x2a>
        switch (*input_pointer)
   2488c:	2b22      	cmp	r3, #34	; 0x22
   2488e:	d0fa      	beq.n	24886 <print_string_ptr+0x82>
   24890:	2b5c      	cmp	r3, #92	; 0x5c
   24892:	d0f8      	beq.n	24886 <print_string_ptr+0x82>
                if (*input_pointer < 32)
   24894:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   24896:	bf98      	it	ls
   24898:	3505      	addls	r5, #5
   2489a:	e7f5      	b.n	24888 <print_string_ptr+0x84>
   2489c:	f10b 33ff 	add.w	r3, fp, #4294967295
                    *output_pointer = 'f';
   248a0:	f04f 0a66 	mov.w	sl, #102	; 0x66
            *output_pointer++ = '\\';
   248a4:	f04f 0b5c 	mov.w	fp, #92	; 0x5c
   248a8:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   248aa:	9a01      	ldr	r2, [sp, #4]
   248ac:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   248b0:	9201      	str	r2, [sp, #4]
   248b2:	b92b      	cbnz	r3, 248c0 <print_string_ptr+0xbc>
    output[output_length + 1] = '\"';
   248b4:	2222      	movs	r2, #34	; 0x22
   248b6:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   248ba:	f806 3008 	strb.w	r3, [r6, r8]
   248be:	e7d8      	b.n	24872 <print_string_ptr+0x6e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   248c0:	2b1f      	cmp	r3, #31
   248c2:	d907      	bls.n	248d4 <print_string_ptr+0xd0>
   248c4:	2b22      	cmp	r3, #34	; 0x22
   248c6:	d005      	beq.n	248d4 <print_string_ptr+0xd0>
   248c8:	2b5c      	cmp	r3, #92	; 0x5c
   248ca:	d003      	beq.n	248d4 <print_string_ptr+0xd0>
            *output_pointer = *input_pointer;
   248cc:	4620      	mov	r0, r4
   248ce:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   248d0:	1c44      	adds	r4, r0, #1
   248d2:	e7ea      	b.n	248aa <print_string_ptr+0xa6>
            switch (*input_pointer)
   248d4:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   248d6:	f884 b000 	strb.w	fp, [r4]
            switch (*input_pointer)
   248da:	781b      	ldrb	r3, [r3, #0]
            *output_pointer++ = '\\';
   248dc:	1c60      	adds	r0, r4, #1
            switch (*input_pointer)
   248de:	2b0c      	cmp	r3, #12
   248e0:	d011      	beq.n	24906 <print_string_ptr+0x102>
   248e2:	d808      	bhi.n	248f6 <print_string_ptr+0xf2>
   248e4:	2b09      	cmp	r3, #9
   248e6:	d013      	beq.n	24910 <print_string_ptr+0x10c>
   248e8:	2b0a      	cmp	r3, #10
   248ea:	d00f      	beq.n	2490c <print_string_ptr+0x108>
   248ec:	2b08      	cmp	r3, #8
   248ee:	d111      	bne.n	24914 <print_string_ptr+0x110>
                    *output_pointer = 'b';
   248f0:	2362      	movs	r3, #98	; 0x62
                    *output_pointer = 't';
   248f2:	7063      	strb	r3, [r4, #1]
   248f4:	e7ec      	b.n	248d0 <print_string_ptr+0xcc>
            switch (*input_pointer)
   248f6:	2b22      	cmp	r3, #34	; 0x22
   248f8:	d0fb      	beq.n	248f2 <print_string_ptr+0xee>
   248fa:	2b5c      	cmp	r3, #92	; 0x5c
   248fc:	d0f9      	beq.n	248f2 <print_string_ptr+0xee>
   248fe:	2b0d      	cmp	r3, #13
   24900:	d108      	bne.n	24914 <print_string_ptr+0x110>
                    *output_pointer = 'r';
   24902:	2372      	movs	r3, #114	; 0x72
   24904:	e7f5      	b.n	248f2 <print_string_ptr+0xee>
                    *output_pointer = 'f';
   24906:	f884 a001 	strb.w	sl, [r4, #1]
   2490a:	e7e1      	b.n	248d0 <print_string_ptr+0xcc>
                    *output_pointer = 'n';
   2490c:	236e      	movs	r3, #110	; 0x6e
   2490e:	e7f0      	b.n	248f2 <print_string_ptr+0xee>
                    *output_pointer = 't';
   24910:	2374      	movs	r3, #116	; 0x74
   24912:	e7ee      	b.n	248f2 <print_string_ptr+0xee>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   24914:	6839      	ldr	r1, [r7, #0]
   24916:	687d      	ldr	r5, [r7, #4]
   24918:	1a41      	subs	r1, r0, r1
   2491a:	4a0b      	ldr	r2, [pc, #44]	; (24948 <print_string_ptr+0x144>)
   2491c:	1a69      	subs	r1, r5, r1
   2491e:	f01b fc61 	bl	401e4 <snprintf>
                    output_pointer += 4;
   24922:	1d60      	adds	r0, r4, #5
   24924:	e7d4      	b.n	248d0 <print_string_ptr+0xcc>
        output = ensure(output_buffer, sizeof(quotes));
   24926:	2103      	movs	r1, #3
   24928:	4638      	mov	r0, r7
   2492a:	f023 f863 	bl	479f4 <ensure>
        if (output == NULL)
   2492e:	2800      	cmp	r0, #0
   24930:	f43f af6e 	beq.w	24810 <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   24934:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   24938:	a903      	add	r1, sp, #12
   2493a:	1ad2      	subs	r2, r2, r3
   2493c:	f01b fe96 	bl	4066c <strncpy>
   24940:	e797      	b.n	24872 <print_string_ptr+0x6e>
   24942:	bf00      	nop
   24944:	0004d28b 	.word	0x0004d28b
   24948:	0004d285 	.word	0x0004d285

0002494c <print_value>:
{
   2494c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24950:	460c      	mov	r4, r1
   24952:	b08d      	sub	sp, #52	; 0x34
    if ((item == NULL) || (output_buffer == NULL))
   24954:	4606      	mov	r6, r0
   24956:	b908      	cbnz	r0, 2495c <print_value+0x10>
            return false;
   24958:	2000      	movs	r0, #0
   2495a:	e027      	b.n	249ac <print_value+0x60>
    if ((item == NULL) || (output_buffer == NULL))
   2495c:	2900      	cmp	r1, #0
   2495e:	d0fb      	beq.n	24958 <print_value+0xc>
    switch ((item->type) & 0xFF)
   24960:	7b05      	ldrb	r5, [r0, #12]
   24962:	2d08      	cmp	r5, #8
   24964:	d045      	beq.n	249f2 <print_value+0xa6>
   24966:	dc19      	bgt.n	2499c <print_value+0x50>
   24968:	2d02      	cmp	r5, #2
   2496a:	d040      	beq.n	249ee <print_value+0xa2>
   2496c:	2d04      	cmp	r5, #4
   2496e:	d036      	beq.n	249de <print_value+0x92>
   24970:	2d01      	cmp	r5, #1
   24972:	d1f1      	bne.n	24958 <print_value+0xc>
            output = ensure(output_buffer, sizeof(buff));
   24974:	2106      	movs	r1, #6
            const char buff[] = "false";
   24976:	4bb0      	ldr	r3, [pc, #704]	; (24c38 <print_value+0x2ec>)
   24978:	6818      	ldr	r0, [r3, #0]
   2497a:	889b      	ldrh	r3, [r3, #4]
   2497c:	9005      	str	r0, [sp, #20]
   2497e:	f8ad 3018 	strh.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   24982:	4620      	mov	r0, r4
   24984:	f023 f836 	bl	479f4 <ensure>
            if (output == NULL)
   24988:	2800      	cmp	r0, #0
   2498a:	d0e5      	beq.n	24958 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   2498c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   24990:	a905      	add	r1, sp, #20
   24992:	1ad2      	subs	r2, r2, r3
   24994:	f01b fe6a 	bl	4066c <strncpy>
    return true;
   24998:	2001      	movs	r0, #1
   2499a:	e007      	b.n	249ac <print_value+0x60>
    switch ((item->type) & 0xFF)
   2499c:	2d20      	cmp	r5, #32
   2499e:	d06f      	beq.n	24a80 <print_value+0x134>
   249a0:	dc07      	bgt.n	249b2 <print_value+0x66>
   249a2:	2d10      	cmp	r5, #16
   249a4:	d1d8      	bne.n	24958 <print_value+0xc>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   249a6:	6900      	ldr	r0, [r0, #16]
   249a8:	f7ff ff2c 	bl	24804 <print_string_ptr>
}
   249ac:	b00d      	add	sp, #52	; 0x34
   249ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch ((item->type) & 0xFF)
   249b2:	2d40      	cmp	r5, #64	; 0x40
   249b4:	f000 80af 	beq.w	24b16 <print_value+0x1ca>
   249b8:	2d80      	cmp	r5, #128	; 0x80
   249ba:	d1cd      	bne.n	24958 <print_value+0xc>
            if (item->valuestring == NULL)
   249bc:	6900      	ldr	r0, [r0, #16]
   249be:	2800      	cmp	r0, #0
   249c0:	d0ca      	beq.n	24958 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   249c2:	f01b fddf 	bl	40584 <strlen>
   249c6:	1c45      	adds	r5, r0, #1
            output = ensure(output_buffer, raw_length);
   249c8:	4629      	mov	r1, r5
   249ca:	4620      	mov	r0, r4
   249cc:	f023 f812 	bl	479f4 <ensure>
            if (output == NULL)
   249d0:	2800      	cmp	r0, #0
   249d2:	d0c1      	beq.n	24958 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   249d4:	462a      	mov	r2, r5
   249d6:	6931      	ldr	r1, [r6, #16]
   249d8:	f7f5 fa6a 	bl	19eb0 <memcpy>
   249dc:	e7dc      	b.n	24998 <print_value+0x4c>
            const char buff[] = "null";
   249de:	4b97      	ldr	r3, [pc, #604]	; (24c3c <print_value+0x2f0>)
            const char buff[] = "true";
   249e0:	6818      	ldr	r0, [r3, #0]
   249e2:	791b      	ldrb	r3, [r3, #4]
   249e4:	9005      	str	r0, [sp, #20]
   249e6:	f88d 3018 	strb.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   249ea:	2105      	movs	r1, #5
   249ec:	e7c9      	b.n	24982 <print_value+0x36>
            const char buff[] = "true";
   249ee:	4b94      	ldr	r3, [pc, #592]	; (24c40 <print_value+0x2f4>)
   249f0:	e7f6      	b.n	249e0 <print_value+0x94>
    double d = item->valuedouble;
   249f2:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   249f6:	2200      	movs	r2, #0
   249f8:	2300      	movs	r3, #0
   249fa:	4640      	mov	r0, r8
   249fc:	4649      	mov	r1, r9
   249fe:	f7f3 fecb 	bl	18798 <__aeabi_dmul>
   24a02:	2200      	movs	r2, #0
   24a04:	2300      	movs	r3, #0
   24a06:	f7f4 f92f 	bl	18c68 <__aeabi_dcmpeq>
   24a0a:	ae05      	add	r6, sp, #20
   24a0c:	b9b0      	cbnz	r0, 24a3c <print_value+0xf0>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   24a0e:	498b      	ldr	r1, [pc, #556]	; (24c3c <print_value+0x2f0>)
   24a10:	4630      	mov	r0, r6
   24a12:	f01b fd59 	bl	404c8 <strcpy>
   24a16:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   24a18:	1c69      	adds	r1, r5, #1
   24a1a:	4620      	mov	r0, r4
   24a1c:	f022 ffea 	bl	479f4 <ensure>
    if (output_pointer == NULL)
   24a20:	2800      	cmp	r0, #0
   24a22:	d099      	beq.n	24958 <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   24a24:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   24a26:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   24a28:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   24a2a:	3301      	adds	r3, #1
   24a2c:	429d      	cmp	r5, r3
   24a2e:	d1fa      	bne.n	24a26 <print_value+0xda>
    output_pointer[i] = '\0';
   24a30:	2300      	movs	r3, #0
   24a32:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   24a34:	68a3      	ldr	r3, [r4, #8]
   24a36:	441d      	add	r5, r3
   24a38:	60a5      	str	r5, [r4, #8]
   24a3a:	e7ad      	b.n	24998 <print_value+0x4c>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   24a3c:	4a81      	ldr	r2, [pc, #516]	; (24c44 <print_value+0x2f8>)
   24a3e:	211a      	movs	r1, #26
   24a40:	e9cd 8900 	strd	r8, r9, [sp]
   24a44:	4630      	mov	r0, r6
   24a46:	f01b fbcd 	bl	401e4 <snprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   24a4a:	aa02      	add	r2, sp, #8
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   24a4c:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   24a4e:	497e      	ldr	r1, [pc, #504]	; (24c48 <print_value+0x2fc>)
   24a50:	4630      	mov	r0, r6
   24a52:	f01b fc2f 	bl	402b4 <sscanf>
   24a56:	2801      	cmp	r0, #1
   24a58:	d106      	bne.n	24a68 <print_value+0x11c>
   24a5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   24a5e:	4640      	mov	r0, r8
   24a60:	4649      	mov	r1, r9
   24a62:	f7f4 f901 	bl	18c68 <__aeabi_dcmpeq>
   24a66:	b938      	cbnz	r0, 24a78 <print_value+0x12c>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   24a68:	e9cd 8900 	strd	r8, r9, [sp]
   24a6c:	4a77      	ldr	r2, [pc, #476]	; (24c4c <print_value+0x300>)
   24a6e:	211a      	movs	r1, #26
   24a70:	4630      	mov	r0, r6
   24a72:	f01b fbb7 	bl	401e4 <snprintf>
   24a76:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   24a78:	2d19      	cmp	r5, #25
   24a7a:	f73f af6d 	bgt.w	24958 <print_value+0xc>
   24a7e:	e7cb      	b.n	24a18 <print_value+0xcc>
            return print_array(item, output_buffer);
   24a80:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   24a82:	2101      	movs	r1, #1
   24a84:	4620      	mov	r0, r4
   24a86:	f022 ffb5 	bl	479f4 <ensure>
    if (output_pointer == NULL)
   24a8a:	2800      	cmp	r0, #0
   24a8c:	f43f af64 	beq.w	24958 <print_value+0xc>
    *output_pointer = '[';
   24a90:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   24a92:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   24a94:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   24a98:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   24a9a:	68a3      	ldr	r3, [r4, #8]
   24a9c:	3301      	adds	r3, #1
   24a9e:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   24aa0:	68e3      	ldr	r3, [r4, #12]
   24aa2:	3301      	adds	r3, #1
   24aa4:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   24aa6:	b96e      	cbnz	r6, 24ac4 <print_value+0x178>
    output_pointer = ensure(output_buffer, 2);
   24aa8:	2102      	movs	r1, #2
   24aaa:	4620      	mov	r0, r4
   24aac:	f022 ffa2 	bl	479f4 <ensure>
    if (output_pointer == NULL)
   24ab0:	2800      	cmp	r0, #0
   24ab2:	f43f af51 	beq.w	24958 <print_value+0xc>
    *output_pointer++ = ']';
   24ab6:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   24ab8:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   24aba:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   24abc:	68e3      	ldr	r3, [r4, #12]
   24abe:	3b01      	subs	r3, #1
   24ac0:	60e3      	str	r3, [r4, #12]
   24ac2:	e769      	b.n	24998 <print_value+0x4c>
        if (!print_value(current_element, output_buffer))
   24ac4:	4621      	mov	r1, r4
   24ac6:	4630      	mov	r0, r6
   24ac8:	f7ff ff40 	bl	2494c <print_value>
   24acc:	2800      	cmp	r0, #0
   24ace:	f43f af43 	beq.w	24958 <print_value+0xc>
        update_offset(output_buffer);
   24ad2:	4620      	mov	r0, r4
   24ad4:	f022 ff09 	bl	478ea <update_offset>
        if (current_element->next)
   24ad8:	6833      	ldr	r3, [r6, #0]
   24ada:	b1bb      	cbz	r3, 24b0c <print_value+0x1c0>
            length = (size_t) (output_buffer->format ? 2 : 1);
   24adc:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   24ade:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   24ae0:	2b00      	cmp	r3, #0
   24ae2:	bf0c      	ite	eq
   24ae4:	f04f 0901 	moveq.w	r9, #1
   24ae8:	f04f 0902 	movne.w	r9, #2
            output_pointer = ensure(output_buffer, length + 1);
   24aec:	f109 0101 	add.w	r1, r9, #1
   24af0:	f022 ff80 	bl	479f4 <ensure>
            if (output_pointer == NULL)
   24af4:	2800      	cmp	r0, #0
   24af6:	f43f af2f 	beq.w	24958 <print_value+0xc>
            *output_pointer++ = ',';
   24afa:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   24afc:	6963      	ldr	r3, [r4, #20]
   24afe:	b93b      	cbnz	r3, 24b10 <print_value+0x1c4>
            *output_pointer++ = ',';
   24b00:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   24b02:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   24b06:	68a3      	ldr	r3, [r4, #8]
   24b08:	444b      	add	r3, r9
   24b0a:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   24b0c:	6836      	ldr	r6, [r6, #0]
   24b0e:	e7ca      	b.n	24aa6 <print_value+0x15a>
                *output_pointer++ = ' ';
   24b10:	1c83      	adds	r3, r0, #2
   24b12:	7045      	strb	r5, [r0, #1]
   24b14:	e7f5      	b.n	24b02 <print_value+0x1b6>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   24b16:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   24b18:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   24b1a:	2b00      	cmp	r3, #0
   24b1c:	bf0c      	ite	eq
   24b1e:	2701      	moveq	r7, #1
   24b20:	2702      	movne	r7, #2
    output_pointer = ensure(output_buffer, length + 1);
   24b22:	4620      	mov	r0, r4
   24b24:	1c79      	adds	r1, r7, #1
   24b26:	f022 ff65 	bl	479f4 <ensure>
    if (output_pointer == NULL)
   24b2a:	2800      	cmp	r0, #0
   24b2c:	f43f af14 	beq.w	24958 <print_value+0xc>
    *output_pointer++ = '{';
   24b30:	237b      	movs	r3, #123	; 0x7b
   24b32:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   24b34:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   24b36:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   24b38:	3201      	adds	r2, #1
   24b3a:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   24b3c:	b10b      	cbz	r3, 24b42 <print_value+0x1f6>
        *output_pointer++ = '\n';
   24b3e:	230a      	movs	r3, #10
   24b40:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   24b42:	68a3      	ldr	r3, [r4, #8]
        *output_pointer++ = ':';
   24b44:	f04f 083a 	mov.w	r8, #58	; 0x3a
    output_buffer->offset += length;
   24b48:	443b      	add	r3, r7
                *output_pointer++ = '\t';
   24b4a:	2709      	movs	r7, #9
    output_buffer->offset += length;
   24b4c:	60a3      	str	r3, [r4, #8]
   24b4e:	6963      	ldr	r3, [r4, #20]
    while (current_item)
   24b50:	b995      	cbnz	r5, 24b78 <print_value+0x22c>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   24b52:	2b00      	cmp	r3, #0
   24b54:	d06d      	beq.n	24c32 <print_value+0x2e6>
   24b56:	68e1      	ldr	r1, [r4, #12]
   24b58:	3101      	adds	r1, #1
   24b5a:	4620      	mov	r0, r4
   24b5c:	f022 ff4a 	bl	479f4 <ensure>
    if (output_pointer == NULL)
   24b60:	2800      	cmp	r0, #0
   24b62:	f43f aef9 	beq.w	24958 <print_value+0xc>
    if (output_buffer->format)
   24b66:	6963      	ldr	r3, [r4, #20]
   24b68:	2b00      	cmp	r3, #0
   24b6a:	d179      	bne.n	24c60 <print_value+0x314>
   24b6c:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   24b6e:	227d      	movs	r2, #125	; 0x7d
   24b70:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   24b72:	2200      	movs	r2, #0
   24b74:	705a      	strb	r2, [r3, #1]
   24b76:	e7a1      	b.n	24abc <print_value+0x170>
        if (output_buffer->format)
   24b78:	b173      	cbz	r3, 24b98 <print_value+0x24c>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   24b7a:	68e1      	ldr	r1, [r4, #12]
   24b7c:	4620      	mov	r0, r4
   24b7e:	f022 ff39 	bl	479f4 <ensure>
            if (output_pointer == NULL)
   24b82:	2800      	cmp	r0, #0
   24b84:	f43f aee8 	beq.w	24958 <print_value+0xc>
   24b88:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   24b8a:	68e1      	ldr	r1, [r4, #12]
   24b8c:	1a13      	subs	r3, r2, r0
   24b8e:	428b      	cmp	r3, r1
   24b90:	d34c      	bcc.n	24c2c <print_value+0x2e0>
            output_buffer->offset += output_buffer->depth;
   24b92:	68a3      	ldr	r3, [r4, #8]
   24b94:	440b      	add	r3, r1
   24b96:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   24b98:	4621      	mov	r1, r4
   24b9a:	6a28      	ldr	r0, [r5, #32]
   24b9c:	f7ff fe32 	bl	24804 <print_string_ptr>
   24ba0:	2800      	cmp	r0, #0
   24ba2:	f43f aed9 	beq.w	24958 <print_value+0xc>
        update_offset(output_buffer);
   24ba6:	4620      	mov	r0, r4
   24ba8:	f022 fe9f 	bl	478ea <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   24bac:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   24bae:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   24bb0:	2b00      	cmp	r3, #0
   24bb2:	bf0c      	ite	eq
   24bb4:	2601      	moveq	r6, #1
   24bb6:	2602      	movne	r6, #2
        output_pointer = ensure(output_buffer, length);
   24bb8:	4631      	mov	r1, r6
   24bba:	f022 ff1b 	bl	479f4 <ensure>
        if (output_pointer == NULL)
   24bbe:	2800      	cmp	r0, #0
   24bc0:	f43f aeca 	beq.w	24958 <print_value+0xc>
        *output_pointer++ = ':';
   24bc4:	f880 8000 	strb.w	r8, [r0]
        if (output_buffer->format)
   24bc8:	6963      	ldr	r3, [r4, #20]
   24bca:	b103      	cbz	r3, 24bce <print_value+0x282>
            *output_pointer++ = '\t';
   24bcc:	7047      	strb	r7, [r0, #1]
        output_buffer->offset += length;
   24bce:	68a1      	ldr	r1, [r4, #8]
        if (!print_value(current_item, output_buffer))
   24bd0:	4628      	mov	r0, r5
        output_buffer->offset += length;
   24bd2:	4431      	add	r1, r6
   24bd4:	60a1      	str	r1, [r4, #8]
        if (!print_value(current_item, output_buffer))
   24bd6:	4621      	mov	r1, r4
   24bd8:	f7ff feb8 	bl	2494c <print_value>
   24bdc:	2800      	cmp	r0, #0
   24bde:	f43f aebb 	beq.w	24958 <print_value+0xc>
        update_offset(output_buffer);
   24be2:	4620      	mov	r0, r4
   24be4:	f022 fe81 	bl	478ea <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   24be8:	682e      	ldr	r6, [r5, #0]
   24bea:	6963      	ldr	r3, [r4, #20]
   24bec:	3600      	adds	r6, #0
   24bee:	bf18      	it	ne
   24bf0:	2601      	movne	r6, #1
   24bf2:	2b00      	cmp	r3, #0
   24bf4:	bf18      	it	ne
   24bf6:	3601      	addne	r6, #1
        output_pointer = ensure(output_buffer, length + 1);
   24bf8:	4620      	mov	r0, r4
   24bfa:	1c71      	adds	r1, r6, #1
   24bfc:	f022 fefa 	bl	479f4 <ensure>
        if (output_pointer == NULL)
   24c00:	2800      	cmp	r0, #0
   24c02:	f43f aea9 	beq.w	24958 <print_value+0xc>
        if (current_item->next)
   24c06:	682b      	ldr	r3, [r5, #0]
   24c08:	b11b      	cbz	r3, 24c12 <print_value+0x2c6>
            *output_pointer++ = ',';
   24c0a:	232c      	movs	r3, #44	; 0x2c
   24c0c:	3001      	adds	r0, #1
   24c0e:	f800 3c01 	strb.w	r3, [r0, #-1]
        if (output_buffer->format)
   24c12:	6963      	ldr	r3, [r4, #20]
   24c14:	b11b      	cbz	r3, 24c1e <print_value+0x2d2>
            *output_pointer++ = '\n';
   24c16:	230a      	movs	r3, #10
   24c18:	3001      	adds	r0, #1
   24c1a:	f800 3c01 	strb.w	r3, [r0, #-1]
        *output_pointer = '\0';
   24c1e:	2300      	movs	r3, #0
   24c20:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   24c22:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   24c24:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   24c26:	441e      	add	r6, r3
   24c28:	60a6      	str	r6, [r4, #8]
   24c2a:	e790      	b.n	24b4e <print_value+0x202>
                *output_pointer++ = '\t';
   24c2c:	f802 7b01 	strb.w	r7, [r2], #1
   24c30:	e7ab      	b.n	24b8a <print_value+0x23e>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   24c32:	2102      	movs	r1, #2
   24c34:	e791      	b.n	24b5a <print_value+0x20e>
   24c36:	bf00      	nop
   24c38:	0004d2a5 	.word	0x0004d2a5
   24c3c:	0004d28e 	.word	0x0004d28e
   24c40:	0004d2ab 	.word	0x0004d2ab
   24c44:	0004d293 	.word	0x0004d293
   24c48:	0004d29a 	.word	0x0004d29a
   24c4c:	0004d29e 	.word	0x0004d29e
            *output_pointer++ = '\t';
   24c50:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   24c54:	68e2      	ldr	r2, [r4, #12]
   24c56:	1a19      	subs	r1, r3, r0
   24c58:	3a01      	subs	r2, #1
   24c5a:	4291      	cmp	r1, r2
   24c5c:	d3f8      	bcc.n	24c50 <print_value+0x304>
   24c5e:	e786      	b.n	24b6e <print_value+0x222>
    if (output_buffer->format)
   24c60:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   24c62:	2509      	movs	r5, #9
   24c64:	e7f6      	b.n	24c54 <print_value+0x308>
   24c66:	bf00      	nop

00024c68 <print.constprop.14>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   24c68:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   24c6a:	4d24      	ldr	r5, [pc, #144]	; (24cfc <print.constprop.14+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   24c6c:	b08b      	sub	sp, #44	; 0x2c
   24c6e:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   24c70:	2224      	movs	r2, #36	; 0x24
   24c72:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   24c74:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   24c76:	a801      	add	r0, sp, #4
   24c78:	f01b f868 	bl	3fd4c <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   24c7c:	682b      	ldr	r3, [r5, #0]
   24c7e:	f44f 7080 	mov.w	r0, #256	; 0x100
   24c82:	4798      	blx	r3
    buffer->length = default_buffer_size;
   24c84:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   24c88:	4603      	mov	r3, r0
    buffer->format = format;
   24c8a:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   24c8c:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   24c8e:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   24c90:	9202      	str	r2, [sp, #8]
   24c92:	462f      	mov	r7, r5
    buffer->hooks = *hooks;
   24c94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   24c98:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   24c9c:	b17b      	cbz	r3, 24cbe <print.constprop.14+0x56>
    if (!print_value(item, buffer))
   24c9e:	a901      	add	r1, sp, #4
   24ca0:	4620      	mov	r0, r4
   24ca2:	f7ff fe53 	bl	2494c <print_value>
   24ca6:	b150      	cbz	r0, 24cbe <print.constprop.14+0x56>
    update_offset(buffer);
   24ca8:	a801      	add	r0, sp, #4
   24caa:	f022 fe1e 	bl	478ea <update_offset>
    if (hooks->reallocate != NULL)
   24cae:	68ae      	ldr	r6, [r5, #8]
   24cb0:	9903      	ldr	r1, [sp, #12]
   24cb2:	b15e      	cbz	r6, 24ccc <print.constprop.14+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   24cb4:	3101      	adds	r1, #1
   24cb6:	9801      	ldr	r0, [sp, #4]
   24cb8:	47b0      	blx	r6
        if (printed == NULL) {
   24cba:	4604      	mov	r4, r0
   24cbc:	b9d0      	cbnz	r0, 24cf4 <print.constprop.14+0x8c>
    if (buffer->buffer != NULL)
   24cbe:	9c01      	ldr	r4, [sp, #4]
   24cc0:	b1c4      	cbz	r4, 24cf4 <print.constprop.14+0x8c>
        hooks->deallocate(buffer->buffer);
   24cc2:	4620      	mov	r0, r4
   24cc4:	687b      	ldr	r3, [r7, #4]
   24cc6:	4798      	blx	r3
    return NULL;
   24cc8:	2400      	movs	r4, #0
   24cca:	e013      	b.n	24cf4 <print.constprop.14+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   24ccc:	682b      	ldr	r3, [r5, #0]
   24cce:	1c48      	adds	r0, r1, #1
   24cd0:	4798      	blx	r3
        if (printed == NULL)
   24cd2:	4604      	mov	r4, r0
   24cd4:	2800      	cmp	r0, #0
   24cd6:	d0f2      	beq.n	24cbe <print.constprop.14+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   24cd8:	9a03      	ldr	r2, [sp, #12]
   24cda:	9b02      	ldr	r3, [sp, #8]
   24cdc:	3201      	adds	r2, #1
   24cde:	429a      	cmp	r2, r3
   24ce0:	bf28      	it	cs
   24ce2:	461a      	movcs	r2, r3
   24ce4:	9901      	ldr	r1, [sp, #4]
   24ce6:	f7f5 f8e3 	bl	19eb0 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   24cea:	9b03      	ldr	r3, [sp, #12]
   24cec:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   24cee:	686b      	ldr	r3, [r5, #4]
   24cf0:	9801      	ldr	r0, [sp, #4]
   24cf2:	4798      	blx	r3
}
   24cf4:	4620      	mov	r0, r4
   24cf6:	b00b      	add	sp, #44	; 0x2c
   24cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24cfa:	bf00      	nop
   24cfc:	20031bc8 	.word	0x20031bc8

00024d00 <cJSON_strdup.isra.2.constprop.16>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   24d00:	b570      	push	{r4, r5, r6, lr}
    if (string == NULL)
   24d02:	4605      	mov	r5, r0
   24d04:	b170      	cbz	r0, 24d24 <cJSON_strdup.isra.2.constprop.16+0x24>
    length = strlen((const char*)string) + sizeof("");
   24d06:	f01b fc3d 	bl	40584 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   24d0a:	4b07      	ldr	r3, [pc, #28]	; (24d28 <cJSON_strdup.isra.2.constprop.16+0x28>)
    length = strlen((const char*)string) + sizeof("");
   24d0c:	1c46      	adds	r6, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   24d0e:	681b      	ldr	r3, [r3, #0]
   24d10:	4630      	mov	r0, r6
   24d12:	4798      	blx	r3
    if (copy == NULL)
   24d14:	4604      	mov	r4, r0
   24d16:	b118      	cbz	r0, 24d20 <cJSON_strdup.isra.2.constprop.16+0x20>
   24d18:	4632      	mov	r2, r6
   24d1a:	4629      	mov	r1, r5
   24d1c:	f7f5 f8c8 	bl	19eb0 <memcpy>
}
   24d20:	4620      	mov	r0, r4
   24d22:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   24d24:	4604      	mov	r4, r0
   24d26:	e7fb      	b.n	24d20 <cJSON_strdup.isra.2.constprop.16+0x20>
   24d28:	20031bc8 	.word	0x20031bc8

00024d2c <add_item_to_object.constprop.12>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   24d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24d2e:	460e      	mov	r6, r1
   24d30:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL))
   24d32:	4607      	mov	r7, r0
   24d34:	b1f0      	cbz	r0, 24d74 <add_item_to_object.constprop.12+0x48>
   24d36:	b1e9      	cbz	r1, 24d74 <add_item_to_object.constprop.12+0x48>
   24d38:	b1e2      	cbz	r2, 24d74 <add_item_to_object.constprop.12+0x48>
    if (constant_key)
   24d3a:	b193      	cbz	r3, 24d62 <add_item_to_object.constprop.12+0x36>
        new_type = item->type | cJSON_StringIsConst;
   24d3c:	68d5      	ldr	r5, [r2, #12]
   24d3e:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   24d42:	68e3      	ldr	r3, [r4, #12]
   24d44:	059b      	lsls	r3, r3, #22
   24d46:	d404      	bmi.n	24d52 <add_item_to_object.constprop.12+0x26>
   24d48:	6a20      	ldr	r0, [r4, #32]
   24d4a:	b110      	cbz	r0, 24d52 <add_item_to_object.constprop.12+0x26>
        hooks->deallocate(item->string);
   24d4c:	4b0a      	ldr	r3, [pc, #40]	; (24d78 <add_item_to_object.constprop.12+0x4c>)
   24d4e:	685b      	ldr	r3, [r3, #4]
   24d50:	4798      	blx	r3
    item->string = new_key;
   24d52:	6226      	str	r6, [r4, #32]
    item->type = new_type;
   24d54:	60e5      	str	r5, [r4, #12]
    return add_item_to_array(object, item);
   24d56:	4621      	mov	r1, r4
   24d58:	4638      	mov	r0, r7
}
   24d5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   24d5e:	f022 be2d 	b.w	479bc <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   24d62:	4608      	mov	r0, r1
   24d64:	f7ff ffcc 	bl	24d00 <cJSON_strdup.isra.2.constprop.16>
        if (new_key == NULL)
   24d68:	4606      	mov	r6, r0
   24d6a:	b118      	cbz	r0, 24d74 <add_item_to_object.constprop.12+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   24d6c:	68e5      	ldr	r5, [r4, #12]
   24d6e:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   24d72:	e7e6      	b.n	24d42 <add_item_to_object.constprop.12+0x16>
}
   24d74:	2000      	movs	r0, #0
   24d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24d78:	20031bc8 	.word	0x20031bc8

00024d7c <cJSON_InitHooks>:
{
   24d7c:	4b0c      	ldr	r3, [pc, #48]	; (24db0 <cJSON_InitHooks+0x34>)
   24d7e:	490d      	ldr	r1, [pc, #52]	; (24db4 <cJSON_InitHooks+0x38>)
   24d80:	b510      	push	{r4, lr}
   24d82:	4a0d      	ldr	r2, [pc, #52]	; (24db8 <cJSON_InitHooks+0x3c>)
        global_hooks.allocate = malloc;
   24d84:	6019      	str	r1, [r3, #0]
    if (hooks == NULL)
   24d86:	b918      	cbnz	r0, 24d90 <cJSON_InitHooks+0x14>
        global_hooks.deallocate = free;
   24d88:	605a      	str	r2, [r3, #4]
        global_hooks.reallocate = realloc;
   24d8a:	4a0c      	ldr	r2, [pc, #48]	; (24dbc <cJSON_InitHooks+0x40>)
   24d8c:	609a      	str	r2, [r3, #8]
   24d8e:	e00e      	b.n	24dae <cJSON_InitHooks+0x32>
    if (hooks->malloc_fn != NULL)
   24d90:	6804      	ldr	r4, [r0, #0]
   24d92:	b104      	cbz	r4, 24d96 <cJSON_InitHooks+0x1a>
        global_hooks.allocate = hooks->malloc_fn;
   24d94:	601c      	str	r4, [r3, #0]
    if (hooks->free_fn != NULL)
   24d96:	6840      	ldr	r0, [r0, #4]
    global_hooks.deallocate = free;
   24d98:	605a      	str	r2, [r3, #4]
    if (hooks->free_fn != NULL)
   24d9a:	b100      	cbz	r0, 24d9e <cJSON_InitHooks+0x22>
        global_hooks.deallocate = hooks->free_fn;
   24d9c:	6058      	str	r0, [r3, #4]
    global_hooks.reallocate = NULL;
   24d9e:	2000      	movs	r0, #0
   24da0:	6098      	str	r0, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   24da2:	6818      	ldr	r0, [r3, #0]
   24da4:	4288      	cmp	r0, r1
   24da6:	d102      	bne.n	24dae <cJSON_InitHooks+0x32>
   24da8:	6859      	ldr	r1, [r3, #4]
   24daa:	4291      	cmp	r1, r2
   24dac:	d0ed      	beq.n	24d8a <cJSON_InitHooks+0xe>
}
   24dae:	bd10      	pop	{r4, pc}
   24db0:	20031bc8 	.word	0x20031bc8
   24db4:	0003f699 	.word	0x0003f699
   24db8:	0003f6a9 	.word	0x0003f6a9
   24dbc:	0003fe45 	.word	0x0003fe45

00024dc0 <cJSON_Delete>:
{
   24dc0:	b570      	push	{r4, r5, r6, lr}
   24dc2:	4604      	mov	r4, r0
   24dc4:	4d0e      	ldr	r5, [pc, #56]	; (24e00 <cJSON_Delete+0x40>)
    while (item != NULL)
   24dc6:	b904      	cbnz	r4, 24dca <cJSON_Delete+0xa>
}
   24dc8:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   24dca:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   24dcc:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   24dce:	05d9      	lsls	r1, r3, #23
   24dd0:	d403      	bmi.n	24dda <cJSON_Delete+0x1a>
   24dd2:	68a0      	ldr	r0, [r4, #8]
   24dd4:	b108      	cbz	r0, 24dda <cJSON_Delete+0x1a>
            cJSON_Delete(item->child);
   24dd6:	f7ff fff3 	bl	24dc0 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   24dda:	68e3      	ldr	r3, [r4, #12]
   24ddc:	05da      	lsls	r2, r3, #23
   24dde:	d403      	bmi.n	24de8 <cJSON_Delete+0x28>
   24de0:	6920      	ldr	r0, [r4, #16]
   24de2:	b108      	cbz	r0, 24de8 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->valuestring);
   24de4:	686b      	ldr	r3, [r5, #4]
   24de6:	4798      	blx	r3
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   24de8:	68e3      	ldr	r3, [r4, #12]
   24dea:	059b      	lsls	r3, r3, #22
   24dec:	d403      	bmi.n	24df6 <cJSON_Delete+0x36>
   24dee:	6a20      	ldr	r0, [r4, #32]
   24df0:	b108      	cbz	r0, 24df6 <cJSON_Delete+0x36>
            global_hooks.deallocate(item->string);
   24df2:	686b      	ldr	r3, [r5, #4]
   24df4:	4798      	blx	r3
        global_hooks.deallocate(item);
   24df6:	4620      	mov	r0, r4
   24df8:	686b      	ldr	r3, [r5, #4]
   24dfa:	4798      	blx	r3
        item = next;
   24dfc:	4634      	mov	r4, r6
   24dfe:	e7e2      	b.n	24dc6 <cJSON_Delete+0x6>
   24e00:	20031bc8 	.word	0x20031bc8

00024e04 <cJSON_ParseWithOpts>:
{
   24e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24e08:	4606      	mov	r6, r0
    global_error.json = NULL;
   24e0a:	2400      	movs	r4, #0
{
   24e0c:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   24e0e:	4f34      	ldr	r7, [pc, #208]	; (24ee0 <cJSON_ParseWithOpts+0xdc>)
{
   24e10:	4688      	mov	r8, r1
   24e12:	4691      	mov	r9, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   24e14:	2100      	movs	r1, #0
   24e16:	221c      	movs	r2, #28
   24e18:	a801      	add	r0, sp, #4
   24e1a:	f01a ff97 	bl	3fd4c <memset>
    global_error.position = 0;
   24e1e:	e9c7 4400 	strd	r4, r4, [r7]
    if (value == NULL)
   24e22:	2e00      	cmp	r6, #0
   24e24:	d052      	beq.n	24ecc <cJSON_ParseWithOpts+0xc8>
    buffer.length = strlen((const char*)value) + sizeof("");
   24e26:	4630      	mov	r0, r6
    buffer.content = (const unsigned char*)value;
   24e28:	9601      	str	r6, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
   24e2a:	f01b fbab 	bl	40584 <strlen>
    buffer.hooks = global_hooks;
   24e2e:	4b2d      	ldr	r3, [pc, #180]	; (24ee4 <cJSON_ParseWithOpts+0xe0>)
    buffer.length = strlen((const char*)value) + sizeof("");
   24e30:	3001      	adds	r0, #1
    buffer.offset = 0;
   24e32:	e9cd 0402 	strd	r0, r4, [sp, #8]
    buffer.hooks = global_hooks;
   24e36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   24e3a:	ab08      	add	r3, sp, #32
   24e3c:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   24e40:	f022 fdcc 	bl	479dc <cJSON_New_Item.isra.1>
    if (item == NULL) /* memory fail */
   24e44:	4605      	mov	r5, r0
   24e46:	2800      	cmp	r0, #0
   24e48:	d032      	beq.n	24eb0 <cJSON_ParseWithOpts+0xac>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   24e4a:	9801      	ldr	r0, [sp, #4]
   24e4c:	b128      	cbz	r0, 24e5a <cJSON_ParseWithOpts+0x56>
   24e4e:	9b03      	ldr	r3, [sp, #12]
   24e50:	b9f3      	cbnz	r3, 24e90 <cJSON_ParseWithOpts+0x8c>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   24e52:	9b02      	ldr	r3, [sp, #8]
   24e54:	2b04      	cmp	r3, #4
   24e56:	d811      	bhi.n	24e7c <cJSON_ParseWithOpts+0x78>
    return buffer;
   24e58:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   24e5a:	f022 fd31 	bl	478c0 <buffer_skip_whitespace>
   24e5e:	4601      	mov	r1, r0
   24e60:	4628      	mov	r0, r5
   24e62:	f7f5 faf9 	bl	1a458 <parse_value>
   24e66:	b300      	cbz	r0, 24eaa <cJSON_ParseWithOpts+0xa6>
    if (require_null_terminated)
   24e68:	f1b9 0f00 	cmp.w	r9, #0
   24e6c:	d112      	bne.n	24e94 <cJSON_ParseWithOpts+0x90>
    if (return_parse_end)
   24e6e:	f1b8 0f00 	cmp.w	r8, #0
   24e72:	d12d      	bne.n	24ed0 <cJSON_ParseWithOpts+0xcc>
}
   24e74:	4628      	mov	r0, r5
   24e76:	b009      	add	sp, #36	; 0x24
   24e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   24e7c:	2203      	movs	r2, #3
   24e7e:	491a      	ldr	r1, [pc, #104]	; (24ee8 <cJSON_ParseWithOpts+0xe4>)
   24e80:	f01b fbae 	bl	405e0 <strncmp>
   24e84:	2800      	cmp	r0, #0
   24e86:	d1e7      	bne.n	24e58 <cJSON_ParseWithOpts+0x54>
        buffer->offset += 3;
   24e88:	9b03      	ldr	r3, [sp, #12]
   24e8a:	3303      	adds	r3, #3
   24e8c:	9303      	str	r3, [sp, #12]
   24e8e:	e7e3      	b.n	24e58 <cJSON_ParseWithOpts+0x54>
        return NULL;
   24e90:	4620      	mov	r0, r4
   24e92:	e7e2      	b.n	24e5a <cJSON_ParseWithOpts+0x56>
        buffer_skip_whitespace(&buffer);
   24e94:	a801      	add	r0, sp, #4
   24e96:	f022 fd13 	bl	478c0 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   24e9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   24e9e:	4293      	cmp	r3, r2
   24ea0:	d203      	bcs.n	24eaa <cJSON_ParseWithOpts+0xa6>
   24ea2:	9a01      	ldr	r2, [sp, #4]
   24ea4:	5cd3      	ldrb	r3, [r2, r3]
   24ea6:	2b00      	cmp	r3, #0
   24ea8:	d0e1      	beq.n	24e6e <cJSON_ParseWithOpts+0x6a>
        cJSON_Delete(item);
   24eaa:	4628      	mov	r0, r5
   24eac:	f7ff ff88 	bl	24dc0 <cJSON_Delete>
        if (buffer.offset < buffer.length)
   24eb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   24eb4:	4293      	cmp	r3, r2
   24eb6:	d301      	bcc.n	24ebc <cJSON_ParseWithOpts+0xb8>
        else if (buffer.length > 0)
   24eb8:	b182      	cbz	r2, 24edc <cJSON_ParseWithOpts+0xd8>
            local_error.position = buffer.length - 1;
   24eba:	1e53      	subs	r3, r2, #1
        if (return_parse_end != NULL)
   24ebc:	f1b8 0f00 	cmp.w	r8, #0
   24ec0:	d002      	beq.n	24ec8 <cJSON_ParseWithOpts+0xc4>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   24ec2:	18f2      	adds	r2, r6, r3
   24ec4:	f8c8 2000 	str.w	r2, [r8]
        global_error = local_error;
   24ec8:	e9c7 6300 	strd	r6, r3, [r7]
    return NULL;
   24ecc:	2500      	movs	r5, #0
   24ece:	e7d1      	b.n	24e74 <cJSON_ParseWithOpts+0x70>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   24ed0:	9b01      	ldr	r3, [sp, #4]
   24ed2:	9a03      	ldr	r2, [sp, #12]
   24ed4:	4413      	add	r3, r2
   24ed6:	f8c8 3000 	str.w	r3, [r8]
   24eda:	e7cb      	b.n	24e74 <cJSON_ParseWithOpts+0x70>
        local_error.position = 0;
   24edc:	4613      	mov	r3, r2
   24ede:	e7ed      	b.n	24ebc <cJSON_ParseWithOpts+0xb8>
   24ee0:	20023ab8 	.word	0x20023ab8
   24ee4:	20031bc8 	.word	0x20031bc8
   24ee8:	0004d281 	.word	0x0004d281

00024eec <cJSON_CreateNull>:
{
   24eec:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   24eee:	4b04      	ldr	r3, [pc, #16]	; (24f00 <cJSON_CreateNull+0x14>)
   24ef0:	6818      	ldr	r0, [r3, #0]
   24ef2:	f022 fd73 	bl	479dc <cJSON_New_Item.isra.1>
    if(item)
   24ef6:	b108      	cbz	r0, 24efc <cJSON_CreateNull+0x10>
        item->type = cJSON_NULL;
   24ef8:	2304      	movs	r3, #4
   24efa:	60c3      	str	r3, [r0, #12]
}
   24efc:	bd08      	pop	{r3, pc}
   24efe:	bf00      	nop
   24f00:	20031bc8 	.word	0x20031bc8

00024f04 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   24f04:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   24f06:	4b0a      	ldr	r3, [pc, #40]	; (24f30 <cJSON_CreateString+0x2c>)
{
   24f08:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   24f0a:	6818      	ldr	r0, [r3, #0]
   24f0c:	f022 fd66 	bl	479dc <cJSON_New_Item.isra.1>
    if(item)
   24f10:	4604      	mov	r4, r0
   24f12:	b158      	cbz	r0, 24f2c <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   24f14:	2310      	movs	r3, #16
   24f16:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   24f18:	4628      	mov	r0, r5
   24f1a:	f7ff fef1 	bl	24d00 <cJSON_strdup.isra.2.constprop.16>
   24f1e:	4605      	mov	r5, r0
   24f20:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   24f22:	b918      	cbnz	r0, 24f2c <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   24f24:	4620      	mov	r0, r4
   24f26:	f7ff ff4b 	bl	24dc0 <cJSON_Delete>
            return NULL;
   24f2a:	462c      	mov	r4, r5
        }
    }

    return item;
}
   24f2c:	4620      	mov	r0, r4
   24f2e:	bd38      	pop	{r3, r4, r5, pc}
   24f30:	20031bc8 	.word	0x20031bc8

00024f34 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   24f34:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   24f36:	4b04      	ldr	r3, [pc, #16]	; (24f48 <cJSON_CreateArray+0x14>)
   24f38:	6818      	ldr	r0, [r3, #0]
   24f3a:	f022 fd4f 	bl	479dc <cJSON_New_Item.isra.1>
    if(item)
   24f3e:	b108      	cbz	r0, 24f44 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   24f40:	2320      	movs	r3, #32
   24f42:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   24f44:	bd08      	pop	{r3, pc}
   24f46:	bf00      	nop
   24f48:	20031bc8 	.word	0x20031bc8

00024f4c <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   24f4c:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   24f4e:	4b04      	ldr	r3, [pc, #16]	; (24f60 <cJSON_CreateObject+0x14>)
   24f50:	6818      	ldr	r0, [r3, #0]
   24f52:	f022 fd43 	bl	479dc <cJSON_New_Item.isra.1>
    if (item)
   24f56:	b108      	cbz	r0, 24f5c <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   24f58:	2340      	movs	r3, #64	; 0x40
   24f5a:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   24f5c:	bd08      	pop	{r3, pc}
   24f5e:	bf00      	nop
   24f60:	20031bc8 	.word	0x20031bc8

00024f64 <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   24f64:	4803      	ldr	r0, [pc, #12]	; (24f74 <cJSON_Init+0x10>)
   24f66:	4b04      	ldr	r3, [pc, #16]	; (24f78 <cJSON_Init+0x14>)
   24f68:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   24f6a:	4b04      	ldr	r3, [pc, #16]	; (24f7c <cJSON_Init+0x18>)
   24f6c:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   24f6e:	f7ff bf05 	b.w	24d7c <cJSON_InitHooks>
   24f72:	bf00      	nop
   24f74:	20023ac0 	.word	0x20023ac0
   24f78:	00047aff 	.word	0x00047aff
   24f7c:	00047afb 	.word	0x00047afb

00024f80 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   24f80:	2200      	movs	r2, #0
{
   24f82:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   24f84:	4611      	mov	r1, r2
   24f86:	202a      	movs	r0, #42	; 0x2a
   24f88:	f7fd faf0 	bl	2256c <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   24f8c:	f008 ff7e 	bl	2de8c <bsd_init>
   24f90:	4b01      	ldr	r3, [pc, #4]	; (24f98 <_bsdlib_init+0x18>)
   24f92:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   24f94:	2000      	movs	r0, #0
   24f96:	bd08      	pop	{r3, pc}
   24f98:	20023ac8 	.word	0x20023ac8

00024f9c <bsdlib_get_init_ret>:
}

int bsdlib_get_init_ret(void)
{
	return init_ret;
}
   24f9c:	4b01      	ldr	r3, [pc, #4]	; (24fa4 <bsdlib_get_init_ret+0x8>)
   24f9e:	6818      	ldr	r0, [r3, #0]
   24fa0:	4770      	bx	lr
   24fa2:	bf00      	nop
   24fa4:	20023ac8 	.word	0x20023ac8

00024fa8 <thread_monitor_entry_get>:
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   24fa8:	2200      	movs	r2, #0
   24faa:	4b0e      	ldr	r3, [pc, #56]	; (24fe4 <thread_monitor_entry_get+0x3c>)
{
   24fac:	b5f0      	push	{r4, r5, r6, r7, lr}
		entry_age = rpc_event_cnt - entry->cnt;
   24fae:	681c      	ldr	r4, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   24fb0:	4b0d      	ldr	r3, [pc, #52]	; (24fe8 <thread_monitor_entry_get+0x40>)
	int entry_age, oldest_entry_age = 0;
   24fb2:	4616      	mov	r6, r2
   24fb4:	461f      	mov	r7, r3
		if (entry->id == id) {
   24fb6:	58bd      	ldr	r5, [r7, r2]
   24fb8:	18b9      	adds	r1, r7, r2
   24fba:	4285      	cmp	r5, r0
   24fbc:	d00d      	beq.n	24fda <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   24fbe:	b175      	cbz	r5, 24fde <thread_monitor_entry_get+0x36>
		entry_age = rpc_event_cnt - entry->cnt;
   24fc0:	684d      	ldr	r5, [r1, #4]
   24fc2:	3208      	adds	r2, #8
   24fc4:	1b65      	subs	r5, r4, r5
		if (entry_age > oldest_entry_age) {
   24fc6:	42b5      	cmp	r5, r6
   24fc8:	bfc4      	itt	gt
   24fca:	462e      	movgt	r6, r5
   24fcc:	460b      	movgt	r3, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   24fce:	2a50      	cmp	r2, #80	; 0x50
   24fd0:	d1f1      	bne.n	24fb6 <thread_monitor_entry_get+0xe>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   24fd2:	4619      	mov	r1, r3
	new_entry->cnt = rpc_event_cnt - 1;
   24fd4:	3c01      	subs	r4, #1
	new_entry->id = id;
   24fd6:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   24fd8:	605c      	str	r4, [r3, #4]
}
   24fda:	4608      	mov	r0, r1
   24fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24fde:	460b      	mov	r3, r1
   24fe0:	e7f7      	b.n	24fd2 <thread_monitor_entry_get+0x2a>
   24fe2:	bf00      	nop
   24fe4:	20023acc 	.word	0x20023acc
   24fe8:	20023ad8 	.word	0x20023ad8

00024fec <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   24fec:	4668      	mov	r0, sp
   24fee:	f020 0107 	bic.w	r1, r0, #7
   24ff2:	468d      	mov	sp, r1
   24ff4:	b519      	push	{r0, r3, r4, lr}
   24ff6:	f021 fd15 	bl	46a24 <z_arch_isr_direct_header>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   24ffa:	4b0d      	ldr	r3, [pc, #52]	; (25030 <rpc_proxy_irq_handler+0x44>)
   24ffc:	e8d3 2fef 	ldaex	r2, [r3]
   25000:	3201      	adds	r2, #1
   25002:	e8c3 2fe1 	stlex	r1, r2, [r3]
   25006:	2900      	cmp	r1, #0
   25008:	d1f8      	bne.n	24ffc <rpc_proxy_irq_handler+0x10>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   2500a:	f012 ff57 	bl	37ebc <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   2500e:	4b09      	ldr	r3, [pc, #36]	; (25034 <rpc_proxy_irq_handler+0x48>)
   25010:	681c      	ldr	r4, [r3, #0]
   25012:	b124      	cbz	r4, 2501e <rpc_proxy_irq_handler+0x32>
   25014:	1d20      	adds	r0, r4, #4
   25016:	f018 fda1 	bl	3db5c <z_impl_k_sem_give>
   2501a:	6824      	ldr	r4, [r4, #0]
   2501c:	e7f9      	b.n	25012 <rpc_proxy_irq_handler+0x26>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2501e:	f7fd fad7 	bl	225d0 <_arch_isr_direct_pm>

#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   25022:	f7fd f9b7 	bl	22394 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   25026:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   2502a:	4685      	mov	sp, r0
   2502c:	4770      	bx	lr
   2502e:	bf00      	nop
   25030:	20023acc 	.word	0x20023acc
   25034:	20023ad0 	.word	0x20023ad0

00025038 <bsd_os_timedwait>:
{
   25038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2503c:	460d      	mov	r5, r1
   2503e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   25040:	f023 fdd4 	bl	48bec <z_impl_k_uptime_get>
	if (*timeout == 0) {
   25044:	682b      	ldr	r3, [r5, #0]
   25046:	4606      	mov	r6, r0
   25048:	2b00      	cmp	r3, #0
   2504a:	460f      	mov	r7, r1
   2504c:	d103      	bne.n	25056 <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   2504e:	f018 fbf5 	bl	3d83c <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   25052:	203c      	movs	r0, #60	; 0x3c
   25054:	e06a      	b.n	2512c <bsd_os_timedwait+0xf4>
		*timeout = K_FOREVER;
   25056:	bfbc      	itt	lt
   25058:	f04f 33ff 	movlt.w	r3, #4294967295
   2505c:	602b      	strlt	r3, [r5, #0]
	z_impl_k_sem_init(sem, initial_count, limit);
   2505e:	2201      	movs	r2, #1
   25060:	2100      	movs	r1, #0
   25062:	a802      	add	r0, sp, #8
   25064:	f018 fd44 	bl	3daf0 <z_impl_k_sem_init>
   25068:	f10d 0804 	add.w	r8, sp, #4
   2506c:	f04f 0320 	mov.w	r3, #32
   25070:	f3ef 8911 	mrs	r9, BASEPRI
   25074:	f383 8811 	msr	BASEPRI, r3
   25078:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   2507c:	f018 fd32 	bl	3dae4 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   25080:	f7ff ff92 	bl	24fa8 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   25084:	4c32      	ldr	r4, [pc, #200]	; (25150 <bsd_os_timedwait+0x118>)
   25086:	6843      	ldr	r3, [r0, #4]
   25088:	6822      	ldr	r2, [r4, #0]
   2508a:	4293      	cmp	r3, r2
   2508c:	f04f 0300 	mov.w	r3, #0
   25090:	d108      	bne.n	250a4 <bsd_os_timedwait+0x6c>
	parent->next = child;
   25092:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   25094:	4b2f      	ldr	r3, [pc, #188]	; (25154 <bsd_os_timedwait+0x11c>)
   25096:	685a      	ldr	r2, [r3, #4]
   25098:	2a00      	cmp	r2, #0
   2509a:	d14a      	bne.n	25132 <bsd_os_timedwait+0xfa>
	list->head = node;
   2509c:	e9c3 8800 	strd	r8, r8, [r3]
		allow_to_sleep = true;
   250a0:	2301      	movs	r3, #1
   250a2:	e000      	b.n	250a6 <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   250a4:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   250a6:	f389 8811 	msr	BASEPRI, r9
   250aa:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   250ae:	2b00      	cmp	r3, #0
   250b0:	d03b      	beq.n	2512a <bsd_os_timedwait+0xf2>
	(void)k_sem_take(&thread.sem, *timeout);
   250b2:	6829      	ldr	r1, [r5, #0]
	return z_impl_k_sem_take(sem, timeout);
   250b4:	a802      	add	r0, sp, #8
   250b6:	f018 fd99 	bl	3dbec <z_impl_k_sem_take>
	__asm__ volatile(
   250ba:	f04f 0320 	mov.w	r3, #32
   250be:	f3ef 8911 	mrs	r9, BASEPRI
   250c2:	f383 8811 	msr	BASEPRI, r3
   250c6:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   250ca:	2100      	movs	r1, #0
   250cc:	4b21      	ldr	r3, [pc, #132]	; (25154 <bsd_os_timedwait+0x11c>)
   250ce:	681a      	ldr	r2, [r3, #0]
   250d0:	b15a      	cbz	r2, 250ea <bsd_os_timedwait+0xb2>
   250d2:	4542      	cmp	r2, r8
   250d4:	d138      	bne.n	25148 <bsd_os_timedwait+0x110>
   250d6:	9801      	ldr	r0, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   250d8:	2900      	cmp	r1, #0
   250da:	d12f      	bne.n	2513c <bsd_os_timedwait+0x104>
   250dc:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   250de:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   250e0:	4291      	cmp	r1, r2
   250e2:	d100      	bne.n	250e6 <bsd_os_timedwait+0xae>
	list->tail = node;
   250e4:	6058      	str	r0, [r3, #4]
	parent->next = child;
   250e6:	2300      	movs	r3, #0
   250e8:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   250ea:	f018 fcfb 	bl	3dae4 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   250ee:	f7ff ff5b 	bl	24fa8 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   250f2:	6823      	ldr	r3, [r4, #0]
   250f4:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   250f6:	f389 8811 	msr	BASEPRI, r9
   250fa:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   250fe:	682c      	ldr	r4, [r5, #0]
   25100:	1c63      	adds	r3, r4, #1
   25102:	d012      	beq.n	2512a <bsd_os_timedwait+0xf2>
	return z_impl_k_uptime_get();
   25104:	f023 fd72 	bl	48bec <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   25108:	1b86      	subs	r6, r0, r6
   2510a:	eb61 0707 	sbc.w	r7, r1, r7
   2510e:	17e3      	asrs	r3, r4, #31
   25110:	1ba2      	subs	r2, r4, r6
   25112:	eb63 0307 	sbc.w	r3, r3, r7
   25116:	4619      	mov	r1, r3
	*timeout = remaining > 0 ? remaining : 0;
   25118:	2a00      	cmp	r2, #0
   2511a:	f171 0300 	sbcs.w	r3, r1, #0
	remaining = *timeout - (k_uptime_get() - start);
   2511e:	4610      	mov	r0, r2
	*timeout = remaining > 0 ? remaining : 0;
   25120:	bfb8      	it	lt
   25122:	2000      	movlt	r0, #0
   25124:	6028      	str	r0, [r5, #0]
	if (*timeout == 0) {
   25126:	2800      	cmp	r0, #0
   25128:	d093      	beq.n	25052 <bsd_os_timedwait+0x1a>
	return 0;
   2512a:	2000      	movs	r0, #0
}
   2512c:	b009      	add	sp, #36	; 0x24
   2512e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25132:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   25136:	f8c3 8004 	str.w	r8, [r3, #4]
   2513a:	e7b1      	b.n	250a0 <bsd_os_timedwait+0x68>
	parent->next = child;
   2513c:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2513e:	6858      	ldr	r0, [r3, #4]
   25140:	4290      	cmp	r0, r2
	list->tail = node;
   25142:	bf08      	it	eq
   25144:	6059      	streq	r1, [r3, #4]
   25146:	e7ce      	b.n	250e6 <bsd_os_timedwait+0xae>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25148:	4611      	mov	r1, r2
   2514a:	6812      	ldr	r2, [r2, #0]
   2514c:	e7c0      	b.n	250d0 <bsd_os_timedwait+0x98>
   2514e:	bf00      	nop
   25150:	20023acc 	.word	0x20023acc
   25154:	20023ad0 	.word	0x20023ad0

00025158 <bsd_os_errno_set>:
	switch (err_code) {
   25158:	282d      	cmp	r0, #45	; 0x2d
{
   2515a:	b510      	push	{r4, lr}
   2515c:	4604      	mov	r4, r0
	switch (err_code) {
   2515e:	f000 809b 	beq.w	25298 <bsd_os_errno_set+0x140>
   25162:	dc4a      	bgt.n	251fa <bsd_os_errno_set+0xa2>
   25164:	280e      	cmp	r0, #14
   25166:	d009      	beq.n	2517c <bsd_os_errno_set+0x24>
   25168:	dc11      	bgt.n	2518e <bsd_os_errno_set+0x36>
   2516a:	2808      	cmp	r0, #8
   2516c:	d006      	beq.n	2517c <bsd_os_errno_set+0x24>
   2516e:	dc09      	bgt.n	25184 <bsd_os_errno_set+0x2c>
   25170:	2802      	cmp	r0, #2
   25172:	d003      	beq.n	2517c <bsd_os_errno_set+0x24>
   25174:	2805      	cmp	r0, #5
   25176:	d001      	beq.n	2517c <bsd_os_errno_set+0x24>
   25178:	2801      	cmp	r0, #1
   2517a:	d119      	bne.n	251b0 <bsd_os_errno_set+0x58>
		errno = ENOBUFS;
   2517c:	f021 fca2 	bl	46ac4 <__errno>
   25180:	6004      	str	r4, [r0, #0]
}
   25182:	bd10      	pop	{r4, pc}
	switch (err_code) {
   25184:	280c      	cmp	r0, #12
   25186:	d0f9      	beq.n	2517c <bsd_os_errno_set+0x24>
   25188:	dc6d      	bgt.n	25266 <bsd_os_errno_set+0x10e>
   2518a:	2809      	cmp	r0, #9
   2518c:	e7f5      	b.n	2517a <bsd_os_errno_set+0x22>
   2518e:	2828      	cmp	r0, #40	; 0x28
   25190:	f000 80b9 	beq.w	25306 <bsd_os_errno_set+0x1ae>
   25194:	dc05      	bgt.n	251a2 <bsd_os_errno_set+0x4a>
   25196:	2818      	cmp	r0, #24
   25198:	d0f0      	beq.n	2517c <bsd_os_errno_set+0x24>
   2519a:	2823      	cmp	r0, #35	; 0x23
   2519c:	d068      	beq.n	25270 <bsd_os_errno_set+0x118>
   2519e:	2816      	cmp	r0, #22
   251a0:	e7eb      	b.n	2517a <bsd_os_errno_set+0x22>
   251a2:	282a      	cmp	r0, #42	; 0x2a
   251a4:	d06c      	beq.n	25280 <bsd_os_errno_set+0x128>
   251a6:	db67      	blt.n	25278 <bsd_os_errno_set+0x120>
   251a8:	282b      	cmp	r0, #43	; 0x2b
   251aa:	d06d      	beq.n	25288 <bsd_os_errno_set+0x130>
   251ac:	282c      	cmp	r0, #44	; 0x2c
   251ae:	d06f      	beq.n	25290 <bsd_os_errno_set+0x138>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   251b0:	f44f 73a2 	mov.w	r3, #324	; 0x144
   251b4:	4a56      	ldr	r2, [pc, #344]	; (25310 <bsd_os_errno_set+0x1b8>)
   251b6:	4957      	ldr	r1, [pc, #348]	; (25314 <bsd_os_errno_set+0x1bc>)
   251b8:	4857      	ldr	r0, [pc, #348]	; (25318 <bsd_os_errno_set+0x1c0>)
   251ba:	f021 fa4f 	bl	4665c <printk>
   251be:	4621      	mov	r1, r4
   251c0:	4856      	ldr	r0, [pc, #344]	; (2531c <bsd_os_errno_set+0x1c4>)
   251c2:	f021 fa4b 	bl	4665c <printk>
   251c6:	f44f 71a2 	mov.w	r1, #324	; 0x144
   251ca:	4851      	ldr	r0, [pc, #324]	; (25310 <bsd_os_errno_set+0x1b8>)
   251cc:	f021 fa53 	bl	46676 <assert_post_action>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   251d0:	2301      	movs	r3, #1
   251d2:	f04f 0000 	mov.w	r0, #0
   251d6:	4a52      	ldr	r2, [pc, #328]	; (25320 <bsd_os_errno_set+0x1c8>)
   251d8:	f363 0002 	bfi	r0, r3, #0, #3
   251dc:	4b51      	ldr	r3, [pc, #324]	; (25324 <bsd_os_errno_set+0x1cc>)
   251de:	f36f 00c5 	bfc	r0, #3, #3
   251e2:	1a9b      	subs	r3, r3, r2
   251e4:	08db      	lsrs	r3, r3, #3
   251e6:	f363 108f 	bfi	r0, r3, #6, #10
   251ea:	4622      	mov	r2, r4
   251ec:	494e      	ldr	r1, [pc, #312]	; (25328 <bsd_os_errno_set+0x1d0>)
   251ee:	f021 fa58 	bl	466a2 <log_string_sync>
		errno = 0xBAADBAAD;
   251f2:	f021 fc67 	bl	46ac4 <__errno>
   251f6:	4b4d      	ldr	r3, [pc, #308]	; (2532c <bsd_os_errno_set+0x1d4>)
   251f8:	e038      	b.n	2526c <bsd_os_errno_set+0x114>
	switch (err_code) {
   251fa:	283c      	cmp	r0, #60	; 0x3c
   251fc:	d064      	beq.n	252c8 <bsd_os_errno_set+0x170>
   251fe:	dc1d      	bgt.n	2523c <bsd_os_errno_set+0xe4>
   25200:	2833      	cmp	r0, #51	; 0x33
   25202:	d055      	beq.n	252b0 <bsd_os_errno_set+0x158>
   25204:	dc09      	bgt.n	2521a <bsd_os_errno_set+0xc2>
   25206:	2830      	cmp	r0, #48	; 0x30
   25208:	d04a      	beq.n	252a0 <bsd_os_errno_set+0x148>
   2520a:	2832      	cmp	r0, #50	; 0x32
   2520c:	d04c      	beq.n	252a8 <bsd_os_errno_set+0x150>
   2520e:	282f      	cmp	r0, #47	; 0x2f
   25210:	d1ce      	bne.n	251b0 <bsd_os_errno_set+0x58>
		errno = EAFNOSUPPORT;
   25212:	f021 fc57 	bl	46ac4 <__errno>
   25216:	236a      	movs	r3, #106	; 0x6a
   25218:	e028      	b.n	2526c <bsd_os_errno_set+0x114>
	switch (err_code) {
   2521a:	2836      	cmp	r0, #54	; 0x36
   2521c:	d04c      	beq.n	252b8 <bsd_os_errno_set+0x160>
   2521e:	dc05      	bgt.n	2522c <bsd_os_errno_set+0xd4>
   25220:	2834      	cmp	r0, #52	; 0x34
   25222:	d1c5      	bne.n	251b0 <bsd_os_errno_set+0x58>
		errno = ENETRESET;
   25224:	f021 fc4e 	bl	46ac4 <__errno>
   25228:	237e      	movs	r3, #126	; 0x7e
   2522a:	e01f      	b.n	2526c <bsd_os_errno_set+0x114>
	switch (err_code) {
   2522c:	2838      	cmp	r0, #56	; 0x38
   2522e:	d047      	beq.n	252c0 <bsd_os_errno_set+0x168>
   25230:	2839      	cmp	r0, #57	; 0x39
   25232:	d1bd      	bne.n	251b0 <bsd_os_errno_set+0x58>
		errno = ENOTCONN;
   25234:	f021 fc46 	bl	46ac4 <__errno>
   25238:	2380      	movs	r3, #128	; 0x80
   2523a:	e017      	b.n	2526c <bsd_os_errno_set+0x114>
	switch (err_code) {
   2523c:	287d      	cmp	r0, #125	; 0x7d
   2523e:	d04f      	beq.n	252e0 <bsd_os_errno_set+0x188>
   25240:	dc05      	bgt.n	2524e <bsd_os_errno_set+0xf6>
   25242:	2870      	cmp	r0, #112	; 0x70
   25244:	d044      	beq.n	252d0 <bsd_os_errno_set+0x178>
   25246:	2873      	cmp	r0, #115	; 0x73
   25248:	d046      	beq.n	252d8 <bsd_os_errno_set+0x180>
   2524a:	2869      	cmp	r0, #105	; 0x69
   2524c:	e795      	b.n	2517a <bsd_os_errno_set+0x22>
   2524e:	287f      	cmp	r0, #127	; 0x7f
   25250:	d04f      	beq.n	252f2 <bsd_os_errno_set+0x19a>
   25252:	db49      	blt.n	252e8 <bsd_os_errno_set+0x190>
   25254:	2880      	cmp	r0, #128	; 0x80
   25256:	d051      	beq.n	252fc <bsd_os_errno_set+0x1a4>
   25258:	2881      	cmp	r0, #129	; 0x81
   2525a:	d1a9      	bne.n	251b0 <bsd_os_errno_set+0x58>
		errno = EKEYREJECTED;
   2525c:	f021 fc32 	bl	46ac4 <__errno>
   25260:	f240 73d4 	movw	r3, #2004	; 0x7d4
   25264:	e002      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = EACCES;
   25266:	f021 fc2d 	bl	46ac4 <__errno>
   2526a:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
   2526c:	6003      	str	r3, [r0, #0]
}
   2526e:	e788      	b.n	25182 <bsd_os_errno_set+0x2a>
		errno = EAGAIN;
   25270:	f021 fc28 	bl	46ac4 <__errno>
   25274:	230b      	movs	r3, #11
   25276:	e7f9      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = EPROTOTYPE;
   25278:	f021 fc24 	bl	46ac4 <__errno>
   2527c:	236b      	movs	r3, #107	; 0x6b
   2527e:	e7f5      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = ENOPROTOOPT;
   25280:	f021 fc20 	bl	46ac4 <__errno>
   25284:	236d      	movs	r3, #109	; 0x6d
   25286:	e7f1      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = EPROTONOSUPPORT;
   25288:	f021 fc1c 	bl	46ac4 <__errno>
   2528c:	237b      	movs	r3, #123	; 0x7b
   2528e:	e7ed      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = ESOCKTNOSUPPORT;
   25290:	f021 fc18 	bl	46ac4 <__errno>
   25294:	237c      	movs	r3, #124	; 0x7c
   25296:	e7e9      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = EOPNOTSUPP;
   25298:	f021 fc14 	bl	46ac4 <__errno>
   2529c:	235f      	movs	r3, #95	; 0x5f
   2529e:	e7e5      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = EADDRINUSE;
   252a0:	f021 fc10 	bl	46ac4 <__errno>
   252a4:	2370      	movs	r3, #112	; 0x70
   252a6:	e7e1      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = ENETDOWN;
   252a8:	f021 fc0c 	bl	46ac4 <__errno>
   252ac:	2373      	movs	r3, #115	; 0x73
   252ae:	e7dd      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = ENETUNREACH;
   252b0:	f021 fc08 	bl	46ac4 <__errno>
   252b4:	2372      	movs	r3, #114	; 0x72
   252b6:	e7d9      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = ECONNRESET;
   252b8:	f021 fc04 	bl	46ac4 <__errno>
   252bc:	2368      	movs	r3, #104	; 0x68
   252be:	e7d5      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = EISCONN;
   252c0:	f021 fc00 	bl	46ac4 <__errno>
   252c4:	237f      	movs	r3, #127	; 0x7f
   252c6:	e7d1      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = ETIMEDOUT;
   252c8:	f021 fbfc 	bl	46ac4 <__errno>
   252cc:	2374      	movs	r3, #116	; 0x74
   252ce:	e7cd      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = EHOSTDOWN;
   252d0:	f021 fbf8 	bl	46ac4 <__errno>
   252d4:	2375      	movs	r3, #117	; 0x75
   252d6:	e7c9      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = EINPROGRESS;
   252d8:	f021 fbf4 	bl	46ac4 <__errno>
   252dc:	2377      	movs	r3, #119	; 0x77
   252de:	e7c5      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = ECANCELED;
   252e0:	f021 fbf0 	bl	46ac4 <__errno>
   252e4:	238c      	movs	r3, #140	; 0x8c
   252e6:	e7c1      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = ENOKEY;
   252e8:	f021 fbec 	bl	46ac4 <__errno>
   252ec:	f240 73d1 	movw	r3, #2001	; 0x7d1
   252f0:	e7bc      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = EKEYEXPIRED;
   252f2:	f021 fbe7 	bl	46ac4 <__errno>
   252f6:	f240 73d2 	movw	r3, #2002	; 0x7d2
   252fa:	e7b7      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = EKEYREVOKED;
   252fc:	f021 fbe2 	bl	46ac4 <__errno>
   25300:	f240 73d3 	movw	r3, #2003	; 0x7d3
   25304:	e7b2      	b.n	2526c <bsd_os_errno_set+0x114>
		errno = EMSGSIZE;
   25306:	f021 fbdd 	bl	46ac4 <__errno>
   2530a:	237a      	movs	r3, #122	; 0x7a
   2530c:	e7ae      	b.n	2526c <bsd_os_errno_set+0x114>
   2530e:	bf00      	nop
   25310:	0004d2b0 	.word	0x0004d2b0
   25314:	000505de 	.word	0x000505de
   25318:	0004b5bf 	.word	0x0004b5bf
   2531c:	0004d2d5 	.word	0x0004d2d5
   25320:	00049018 	.word	0x00049018
   25324:	00049040 	.word	0x00049040
   25328:	0004d2fc 	.word	0x0004d2fc
   2532c:	baadbaad 	.word	0xbaadbaad

00025330 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   25334:	4b01      	ldr	r3, [pc, #4]	; (2533c <bsd_os_application_irq_set+0xc>)
   25336:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2533a:	4770      	bx	lr
   2533c:	e000e100 	.word	0xe000e100

00025340 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   25344:	4b01      	ldr	r3, [pc, #4]	; (2534c <bsd_os_application_irq_clear+0xc>)
   25346:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2534a:	4770      	bx	lr
   2534c:	e000e100 	.word	0xe000e100

00025350 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25350:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   25354:	4b01      	ldr	r3, [pc, #4]	; (2535c <bsd_os_trace_irq_set+0xc>)
   25356:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2535a:	4770      	bx	lr
   2535c:	e000e100 	.word	0xe000e100

00025360 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25360:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   25364:	4b01      	ldr	r3, [pc, #4]	; (2536c <bsd_os_trace_irq_clear+0xc>)
   25366:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2536a:	4770      	bx	lr
   2536c:	e000e100 	.word	0xe000e100

00025370 <trace_uart_init>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(BSD_APPLICATION_IRQ);
}

void trace_uart_init(void)
{
   25370:	b530      	push	{r4, r5, lr}
   25372:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* UART pins are defined in "nrf9160_pca10090.dts". */
	const nrfx_uarte_config_t config = {
   25374:	466c      	mov	r4, sp
   25376:	4d07      	ldr	r5, [pc, #28]	; (25394 <trace_uart_init+0x24>)
   25378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2537a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2537c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   25380:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.p_context = NULL,
	};

	/* Initialize nrfx UARTE driver in blocking mode. */
	/* TODO: use UARTE in non-blocking mode with IRQ handler. */
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   25384:	2200      	movs	r2, #0
   25386:	4669      	mov	r1, sp
   25388:	4803      	ldr	r0, [pc, #12]	; (25398 <trace_uart_init+0x28>)
   2538a:	f016 fa09 	bl	3b7a0 <nrfx_uarte_init>
#endif
}
   2538e:	b009      	add	sp, #36	; 0x24
   25390:	bd30      	pop	{r4, r5, pc}
   25392:	bf00      	nop
   25394:	0004915c 	.word	0x0004915c
   25398:	0004955c 	.word	0x0004955c

0002539c <bsd_os_init>:

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   2539c:	b508      	push	{r3, lr}
	list->head = NULL;
   2539e:	2300      	movs	r3, #0
   253a0:	4a08      	ldr	r2, [pc, #32]	; (253c4 <bsd_os_init+0x28>)
	list->tail = NULL;
   253a2:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   253a6:	4a08      	ldr	r2, [pc, #32]	; (253c8 <bsd_os_init+0x2c>)
   253a8:	e8d2 1fef 	ldaex	r1, [r2]
   253ac:	e8c2 3fe0 	stlex	r0, r3, [r2]
   253b0:	2800      	cmp	r0, #0
   253b2:	d1f9      	bne.n	253a8 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   253b4:	f022 fbd7 	bl	47b66 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
   253b8:	f7ff ffda 	bl	25370 <trace_uart_init>
	trace_task_create();
}
   253bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   253c0:	f022 bbc6 	b.w	47b50 <trace_task_create>
   253c4:	20023ad0 	.word	0x20023ad0
   253c8:	20023acc 	.word	0x20023acc

000253cc <bsd_os_trace_put>:

int32_t bsd_os_trace_put(const uint8_t * const data, uint32_t len)
{
   253cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   253d0:	4607      	mov	r7, r0
   253d2:	460d      	mov	r5, r1
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* Max DMA transfers are 255 bytes.
	 * Split RAM buffer into smaller chunks
	 * to be transferred using DMA.
	 */
	u32_t remaining_bytes = len;
   253d4:	460c      	mov	r4, r1

	while (remaining_bytes) {
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
		u32_t idx = len - remaining_bytes;

		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   253d6:	f8df 8024 	ldr.w	r8, [pc, #36]	; 253fc <bsd_os_trace_put+0x30>
	while (remaining_bytes) {
   253da:	b914      	cbnz	r4, 253e2 <bsd_os_trace_put+0x16>
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   253dc:	4620      	mov	r0, r4
   253de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
   253e2:	2cff      	cmp	r4, #255	; 0xff
   253e4:	4626      	mov	r6, r4
   253e6:	bf28      	it	cs
   253e8:	26ff      	movcs	r6, #255	; 0xff
		u32_t idx = len - remaining_bytes;
   253ea:	1b29      	subs	r1, r5, r4
		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   253ec:	4632      	mov	r2, r6
   253ee:	4439      	add	r1, r7
   253f0:	4640      	mov	r0, r8
   253f2:	f016 fa7f 	bl	3b8f4 <nrfx_uarte_tx>
		remaining_bytes -= transfer_len;
   253f6:	1ba4      	subs	r4, r4, r6
   253f8:	e7ef      	b.n	253da <bsd_os_trace_put+0xe>
   253fa:	bf00      	nop
   253fc:	0004955c 	.word	0x0004955c

00025400 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   25400:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   25404:	d03c      	beq.n	25480 <z_to_nrf_optname+0x80>
   25406:	dc04      	bgt.n	25412 <z_to_nrf_optname+0x12>
   25408:	2801      	cmp	r0, #1
   2540a:	d047      	beq.n	2549c <z_to_nrf_optname+0x9c>
			break;
		}
		break;

	default:
		retval = -1;
   2540c:	f04f 30ff 	mov.w	r0, #4294967295
		break;
	}

	return retval;
}
   25410:	4770      	bx	lr
	switch (z_in_level) {
   25412:	f240 2302 	movw	r3, #514	; 0x202
   25416:	4298      	cmp	r0, r3
   25418:	d052      	beq.n	254c0 <z_to_nrf_optname+0xc0>
   2541a:	f240 2303 	movw	r3, #515	; 0x203
   2541e:	4298      	cmp	r0, r3
   25420:	d1f4      	bne.n	2540c <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   25422:	3901      	subs	r1, #1
   25424:	2913      	cmp	r1, #19
   25426:	d8f1      	bhi.n	2540c <z_to_nrf_optname+0xc>
   25428:	a301      	add	r3, pc, #4	; (adr r3, 25430 <z_to_nrf_optname+0x30>)
   2542a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   2542e:	bf00      	nop
   25430:	000254cd 	.word	0x000254cd
   25434:	00025491 	.word	0x00025491
   25438:	000254b5 	.word	0x000254b5
   2543c:	000254a9 	.word	0x000254a9
   25440:	00025499 	.word	0x00025499
   25444:	000254b9 	.word	0x000254b9
   25448:	000254bd 	.word	0x000254bd
   2544c:	0002540d 	.word	0x0002540d
   25450:	0002540d 	.word	0x0002540d
   25454:	0002540d 	.word	0x0002540d
   25458:	0002540d 	.word	0x0002540d
   2545c:	0002540d 	.word	0x0002540d
   25460:	0002540d 	.word	0x0002540d
   25464:	0002540d 	.word	0x0002540d
   25468:	0002540d 	.word	0x0002540d
   2546c:	0002540d 	.word	0x0002540d
   25470:	0002540d 	.word	0x0002540d
   25474:	0002540d 	.word	0x0002540d
   25478:	0002540d 	.word	0x0002540d
   2547c:	000254ad 	.word	0x000254ad
		switch (z_in_optname) {
   25480:	3901      	subs	r1, #1
   25482:	2905      	cmp	r1, #5
   25484:	d8c2      	bhi.n	2540c <z_to_nrf_optname+0xc>
   25486:	e8df f001 	tbb	[pc, r1]
   2548a:	0703      	.short	0x0703
   2548c:	210f1917 	.word	0x210f1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   25490:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_HOSTNAME;
   25492:	6013      	str	r3, [r2, #0]
	int retval = 0;
   25494:	2000      	movs	r0, #0
			break;
   25496:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_HOSTNAME;
   25498:	2305      	movs	r3, #5
   2549a:	e7fa      	b.n	25492 <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   2549c:	2914      	cmp	r1, #20
   2549e:	d005      	beq.n	254ac <z_to_nrf_optname+0xac>
   254a0:	2919      	cmp	r1, #25
   254a2:	d005      	beq.n	254b0 <z_to_nrf_optname+0xb0>
   254a4:	2904      	cmp	r1, #4
   254a6:	d1b1      	bne.n	2540c <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   254a8:	2304      	movs	r3, #4
   254aa:	e7f2      	b.n	25492 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   254ac:	2314      	movs	r3, #20
   254ae:	e7f0      	b.n	25492 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   254b0:	6011      	str	r1, [r2, #0]
   254b2:	e7ef      	b.n	25494 <z_to_nrf_optname+0x94>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   254b4:	2303      	movs	r3, #3
   254b6:	e7ec      	b.n	25492 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   254b8:	2306      	movs	r3, #6
   254ba:	e7ea      	b.n	25492 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   254bc:	2307      	movs	r3, #7
   254be:	e7e8      	b.n	25492 <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   254c0:	2902      	cmp	r1, #2
   254c2:	d0e5      	beq.n	25490 <z_to_nrf_optname+0x90>
   254c4:	2903      	cmp	r1, #3
   254c6:	d0f5      	beq.n	254b4 <z_to_nrf_optname+0xb4>
   254c8:	2901      	cmp	r1, #1
   254ca:	d19f      	bne.n	2540c <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   254cc:	2301      	movs	r3, #1
   254ce:	e7e0      	b.n	25492 <z_to_nrf_optname+0x92>

000254d0 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   254d0:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   254d2:	4b03      	ldr	r3, [pc, #12]	; (254e0 <nrf91_socket_iface_init+0x10>)
   254d4:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   254d6:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   254d8:	4802      	ldr	r0, [pc, #8]	; (254e4 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   254da:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   254dc:	f7fc bad0 	b.w	21a80 <socket_offload_register>
   254e0:	20023b28 	.word	0x20023b28
   254e4:	00049564 	.word	0x00049564

000254e8 <dk_set_leds_state.part.0>:
int dk_set_leds(u32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(u32_t leds_on_mask, u32_t leds_off_mask)
   254e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   254ec:	4606      	mov	r6, r0
   254ee:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   254f0:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_write(led_devs[i],
   254f2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 25560 <dk_set_leds_state.part.0+0x78>
						 led_pins[i].number, val);
   254f6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 25564 <dk_set_leds_state.part.0+0x7c>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   254fa:	fa26 f304 	lsr.w	r3, r6, r4
   254fe:	fa27 f204 	lsr.w	r2, r7, r4
   25502:	431a      	orrs	r2, r3
   25504:	07d2      	lsls	r2, r2, #31
   25506:	d51f      	bpl.n	25548 <dk_set_leds_state.part.0+0x60>
						 led_pins[i].number, val);
   25508:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
			int err = gpio_pin_write(led_devs[i],
   2550c:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
   25510:	7912      	ldrb	r2, [r2, #4]
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
   25512:	6841      	ldr	r1, [r0, #4]
   25514:	f003 0301 	and.w	r3, r3, #1
   25518:	684d      	ldr	r5, [r1, #4]
   2551a:	2100      	movs	r1, #0
   2551c:	47a8      	blx	r5
			if (err) {
   2551e:	4605      	mov	r5, r0
   25520:	b190      	cbz	r0, 25548 <dk_set_leds_state.part.0+0x60>
				LOG_ERR("Cannot write LED gpio");
   25522:	2301      	movs	r3, #1
   25524:	f04f 0000 	mov.w	r0, #0
   25528:	4a0a      	ldr	r2, [pc, #40]	; (25554 <dk_set_leds_state.part.0+0x6c>)
   2552a:	f363 0002 	bfi	r0, r3, #0, #3
   2552e:	4b0a      	ldr	r3, [pc, #40]	; (25558 <dk_set_leds_state.part.0+0x70>)
   25530:	f36f 00c5 	bfc	r0, #3, #3
   25534:	1a9b      	subs	r3, r3, r2
   25536:	08db      	lsrs	r3, r3, #3
   25538:	f363 108f 	bfi	r0, r3, #6, #10
   2553c:	4907      	ldr	r1, [pc, #28]	; (2555c <dk_set_leds_state.part.0+0x74>)
   2553e:	f021 f8b0 	bl	466a2 <log_string_sync>
			}
		}
	}

	return 0;
}
   25542:	4628      	mov	r0, r5
   25544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   25548:	3401      	adds	r4, #1
   2554a:	2c04      	cmp	r4, #4
   2554c:	d1d5      	bne.n	254fa <dk_set_leds_state.part.0+0x12>
	return 0;
   2554e:	2500      	movs	r5, #0
   25550:	e7f7      	b.n	25542 <dk_set_leds_state.part.0+0x5a>
   25552:	bf00      	nop
   25554:	00049018 	.word	0x00049018
   25558:	00049068 	.word	0x00049068
   2555c:	0004d46f 	.word	0x0004d46f
   25560:	20023b74 	.word	0x20023b74
   25564:	000495c4 	.word	0x000495c4

00025568 <button_pressed>:
{
   25568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2556a:	f04f 0320 	mov.w	r3, #32
   2556e:	f3ef 8511 	mrs	r5, BASEPRI
   25572:	f383 8811 	msr	BASEPRI, r3
   25576:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2557a:	4833      	ldr	r0, [pc, #204]	; (25648 <button_pressed+0xe0>)
   2557c:	f018 fc00 	bl	3dd80 <z_spin_lock_valid>
   25580:	b960      	cbnz	r0, 2559c <button_pressed+0x34>
   25582:	4932      	ldr	r1, [pc, #200]	; (2564c <button_pressed+0xe4>)
   25584:	235f      	movs	r3, #95	; 0x5f
   25586:	4a32      	ldr	r2, [pc, #200]	; (25650 <button_pressed+0xe8>)
   25588:	4832      	ldr	r0, [pc, #200]	; (25654 <button_pressed+0xec>)
   2558a:	f021 f867 	bl	4665c <printk>
   2558e:	4832      	ldr	r0, [pc, #200]	; (25658 <button_pressed+0xf0>)
   25590:	f021 f864 	bl	4665c <printk>
   25594:	215f      	movs	r1, #95	; 0x5f
   25596:	482e      	ldr	r0, [pc, #184]	; (25650 <button_pressed+0xe8>)
   25598:	f021 f86d 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   2559c:	482a      	ldr	r0, [pc, #168]	; (25648 <button_pressed+0xe0>)
   2559e:	f018 fc0d 	bl	3ddbc <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   255a2:	2400      	movs	r4, #0
			err = gpio_pin_disable_callback(button_devs[i],
   255a4:	4e2d      	ldr	r6, [pc, #180]	; (2565c <button_pressed+0xf4>)
			  button_pins[i].number);
   255a6:	4f2e      	ldr	r7, [pc, #184]	; (25660 <button_pressed+0xf8>)
   255a8:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
			err = gpio_pin_disable_callback(button_devs[i],
   255ac:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   255b0:	791a      	ldrb	r2, [r3, #4]
					      int access_op, u32_t pin)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->disable_callback == NULL) {
   255b2:	6843      	ldr	r3, [r0, #4]
   255b4:	695b      	ldr	r3, [r3, #20]
   255b6:	b1bb      	cbz	r3, 255e8 <button_pressed+0x80>
		return -ENOTSUP;
	}

	return api->disable_callback(port, access_op, pin);
   255b8:	2100      	movs	r1, #0
   255ba:	4798      	blx	r3
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   255bc:	3401      	adds	r4, #1
   255be:	2c04      	cmp	r4, #4
   255c0:	d015      	beq.n	255ee <button_pressed+0x86>
   255c2:	2800      	cmp	r0, #0
   255c4:	d0f0      	beq.n	255a8 <button_pressed+0x40>
		LOG_ERR("Cannot disable callbacks");
   255c6:	2301      	movs	r3, #1
   255c8:	f04f 0000 	mov.w	r0, #0
   255cc:	4a25      	ldr	r2, [pc, #148]	; (25664 <button_pressed+0xfc>)
   255ce:	f363 0002 	bfi	r0, r3, #0, #3
   255d2:	4b25      	ldr	r3, [pc, #148]	; (25668 <button_pressed+0x100>)
   255d4:	f36f 00c5 	bfc	r0, #3, #3
   255d8:	1a9b      	subs	r3, r3, r2
   255da:	08db      	lsrs	r3, r3, #3
   255dc:	f363 108f 	bfi	r0, r3, #6, #10
   255e0:	4922      	ldr	r1, [pc, #136]	; (2566c <button_pressed+0x104>)
   255e2:	f021 f85e 	bl	466a2 <log_string_sync>
   255e6:	e004      	b.n	255f2 <button_pressed+0x8a>
		return -ENOTSUP;
   255e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   255ec:	e7e6      	b.n	255bc <button_pressed+0x54>
	if (err) {
   255ee:	2800      	cmp	r0, #0
   255f0:	d1e9      	bne.n	255c6 <button_pressed+0x5e>
	switch (state) {
   255f2:	4b1f      	ldr	r3, [pc, #124]	; (25670 <button_pressed+0x108>)
   255f4:	781a      	ldrb	r2, [r3, #0]
   255f6:	b9da      	cbnz	r2, 25630 <button_pressed+0xc8>
		state = STATE_SCANNING;
   255f8:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   255fa:	491e      	ldr	r1, [pc, #120]	; (25674 <button_pressed+0x10c>)
   255fc:	481e      	ldr	r0, [pc, #120]	; (25678 <button_pressed+0x110>)
   255fe:	701a      	strb	r2, [r3, #0]
   25600:	f018 fe1c 	bl	3e23c <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   25604:	4810      	ldr	r0, [pc, #64]	; (25648 <button_pressed+0xe0>)
   25606:	f018 fbc9 	bl	3dd9c <z_spin_unlock_valid>
   2560a:	b960      	cbnz	r0, 25626 <button_pressed+0xbe>
   2560c:	491b      	ldr	r1, [pc, #108]	; (2567c <button_pressed+0x114>)
   2560e:	2372      	movs	r3, #114	; 0x72
   25610:	4a0f      	ldr	r2, [pc, #60]	; (25650 <button_pressed+0xe8>)
   25612:	4810      	ldr	r0, [pc, #64]	; (25654 <button_pressed+0xec>)
   25614:	f021 f822 	bl	4665c <printk>
   25618:	4819      	ldr	r0, [pc, #100]	; (25680 <button_pressed+0x118>)
   2561a:	f021 f81f 	bl	4665c <printk>
   2561e:	2172      	movs	r1, #114	; 0x72
   25620:	480b      	ldr	r0, [pc, #44]	; (25650 <button_pressed+0xe8>)
   25622:	f021 f828 	bl	46676 <assert_post_action>
	__asm__ volatile(
   25626:	f385 8811 	msr	BASEPRI, r5
   2562a:	f3bf 8f6f 	isb	sy
}
   2562e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   25630:	23e2      	movs	r3, #226	; 0xe2
   25632:	4a14      	ldr	r2, [pc, #80]	; (25684 <button_pressed+0x11c>)
   25634:	4914      	ldr	r1, [pc, #80]	; (25688 <button_pressed+0x120>)
   25636:	4807      	ldr	r0, [pc, #28]	; (25654 <button_pressed+0xec>)
   25638:	f021 f810 	bl	4665c <printk>
   2563c:	21e2      	movs	r1, #226	; 0xe2
   2563e:	4811      	ldr	r0, [pc, #68]	; (25684 <button_pressed+0x11c>)
   25640:	f021 f819 	bl	46676 <assert_post_action>
		break;
   25644:	e7de      	b.n	25604 <button_pressed+0x9c>
   25646:	bf00      	nop
   25648:	20023b84 	.word	0x20023b84
   2564c:	0004bff2 	.word	0x0004bff2
   25650:	0004bfcb 	.word	0x0004bfcb
   25654:	0004b5bf 	.word	0x0004b5bf
   25658:	0004c007 	.word	0x0004c007
   2565c:	20023b2c 	.word	0x20023b2c
   25660:	000495a4 	.word	0x000495a4
   25664:	00049018 	.word	0x00049018
   25668:	00049068 	.word	0x00049068
   2566c:	0004d335 	.word	0x0004d335
   25670:	2002a88e 	.word	0x2002a88e
   25674:	20023b40 	.word	0x20023b40
   25678:	2002a324 	.word	0x2002a324
   2567c:	0004c01c 	.word	0x0004c01c
   25680:	0004c033 	.word	0x0004c033
   25684:	0004d34e 	.word	0x0004d34e
   25688:	000505de 	.word	0x000505de

0002568c <buttons_scan_fn>:
{
   2568c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	u32_t ret = 0;
   25690:	2400      	movs	r4, #0
		if (gpio_pin_read(
   25692:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 25874 <buttons_scan_fn+0x1e8>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   25696:	4625      	mov	r5, r4
   25698:	4647      	mov	r7, r8
			button_devs[i], button_pins[i].number, &val)) {
   2569a:	4e60      	ldr	r6, [pc, #384]	; (2581c <buttons_scan_fn+0x190>)
   2569c:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
		if (gpio_pin_read(
   256a0:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
   256a4:	791a      	ldrb	r2, [r3, #4]
	return api->read(port, access_op, pin, value);
   256a6:	6843      	ldr	r3, [r0, #4]
   256a8:	2100      	movs	r1, #0
   256aa:	f8d3 9008 	ldr.w	r9, [r3, #8]
   256ae:	ab01      	add	r3, sp, #4
   256b0:	47c8      	blx	r9
   256b2:	2800      	cmp	r0, #0
   256b4:	d03f      	beq.n	25736 <buttons_scan_fn+0xaa>
			LOG_ERR("Cannot read gpio pin");
   256b6:	2301      	movs	r3, #1
   256b8:	f04f 0000 	mov.w	r0, #0
   256bc:	4a58      	ldr	r2, [pc, #352]	; (25820 <buttons_scan_fn+0x194>)
   256be:	f363 0002 	bfi	r0, r3, #0, #3
   256c2:	4b58      	ldr	r3, [pc, #352]	; (25824 <buttons_scan_fn+0x198>)
   256c4:	f36f 00c5 	bfc	r0, #3, #3
   256c8:	1a9b      	subs	r3, r3, r2
   256ca:	08db      	lsrs	r3, r3, #3
   256cc:	f363 108f 	bfi	r0, r3, #6, #10
   256d0:	4955      	ldr	r1, [pc, #340]	; (25828 <buttons_scan_fn+0x19c>)
   256d2:	f020 ffe6 	bl	466a2 <log_string_sync>
			return 0;
   256d6:	2400      	movs	r4, #0
   256d8:	4b54      	ldr	r3, [pc, #336]	; (2582c <buttons_scan_fn+0x1a0>)
   256da:	e8d3 2fef 	ldaex	r2, [r3]
   256de:	e8c3 4fe1 	stlex	r1, r4, [r3]
   256e2:	2900      	cmp	r1, #0
   256e4:	d1f9      	bne.n	256da <buttons_scan_fn+0x4e>
	if (!initial_run) {
   256e6:	4b52      	ldr	r3, [pc, #328]	; (25830 <buttons_scan_fn+0x1a4>)
   256e8:	4d52      	ldr	r5, [pc, #328]	; (25834 <buttons_scan_fn+0x1a8>)
   256ea:	781a      	ldrb	r2, [r3, #0]
   256ec:	bb62      	cbnz	r2, 25748 <buttons_scan_fn+0xbc>
		if (button_handler_cb != NULL) {
   256ee:	4b52      	ldr	r3, [pc, #328]	; (25838 <buttons_scan_fn+0x1ac>)
   256f0:	681b      	ldr	r3, [r3, #0]
   256f2:	b12b      	cbz	r3, 25700 <buttons_scan_fn+0x74>
			if (button_scan != last_button_scan) {
   256f4:	6829      	ldr	r1, [r5, #0]
   256f6:	42a1      	cmp	r1, r4
   256f8:	d002      	beq.n	25700 <buttons_scan_fn+0x74>
				button_handler_cb(button_scan, has_changed);
   256fa:	4061      	eors	r1, r4
   256fc:	4620      	mov	r0, r4
   256fe:	4798      	blx	r3
	last_button_scan = button_scan;
   25700:	602c      	str	r4, [r5, #0]
	if (button_scan != 0) {
   25702:	b324      	cbz	r4, 2574e <buttons_scan_fn+0xc2>
   25704:	220a      	movs	r2, #10
   25706:	494d      	ldr	r1, [pc, #308]	; (2583c <buttons_scan_fn+0x1b0>)
   25708:	484d      	ldr	r0, [pc, #308]	; (25840 <buttons_scan_fn+0x1b4>)
   2570a:	f018 fd97 	bl	3e23c <k_delayed_work_submit_to_queue>
		if (err) {
   2570e:	b178      	cbz	r0, 25730 <buttons_scan_fn+0xa4>
			LOG_ERR("Cannot add work to workqueue");
   25710:	2301      	movs	r3, #1
   25712:	f04f 0000 	mov.w	r0, #0
   25716:	4a42      	ldr	r2, [pc, #264]	; (25820 <buttons_scan_fn+0x194>)
   25718:	f363 0002 	bfi	r0, r3, #0, #3
   2571c:	4b41      	ldr	r3, [pc, #260]	; (25824 <buttons_scan_fn+0x198>)
   2571e:	f36f 00c5 	bfc	r0, #3, #3
   25722:	1a9b      	subs	r3, r3, r2
   25724:	08db      	lsrs	r3, r3, #3
   25726:	4947      	ldr	r1, [pc, #284]	; (25844 <buttons_scan_fn+0x1b8>)
   25728:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Cannot enable callbacks");
   2572c:	f020 ffb9 	bl	466a2 <log_string_sync>
}
   25730:	b003      	add	sp, #12
   25732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   25736:	9b01      	ldr	r3, [sp, #4]
   25738:	b913      	cbnz	r3, 25740 <buttons_scan_fn+0xb4>
			ret |= 1U << i;
   2573a:	2301      	movs	r3, #1
   2573c:	40ab      	lsls	r3, r5
   2573e:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   25740:	3501      	adds	r5, #1
   25742:	2d04      	cmp	r5, #4
   25744:	d1aa      	bne.n	2569c <buttons_scan_fn+0x10>
   25746:	e7c7      	b.n	256d8 <buttons_scan_fn+0x4c>
		initial_run = false;
   25748:	2200      	movs	r2, #0
   2574a:	701a      	strb	r2, [r3, #0]
   2574c:	e7d8      	b.n	25700 <buttons_scan_fn+0x74>
	__asm__ volatile(
   2574e:	f04f 0320 	mov.w	r3, #32
   25752:	f3ef 8811 	mrs	r8, BASEPRI
   25756:	f383 8811 	msr	BASEPRI, r3
   2575a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2575e:	483a      	ldr	r0, [pc, #232]	; (25848 <buttons_scan_fn+0x1bc>)
   25760:	f018 fb0e 	bl	3dd80 <z_spin_lock_valid>
   25764:	b960      	cbnz	r0, 25780 <buttons_scan_fn+0xf4>
   25766:	4939      	ldr	r1, [pc, #228]	; (2584c <buttons_scan_fn+0x1c0>)
   25768:	235f      	movs	r3, #95	; 0x5f
   2576a:	4a39      	ldr	r2, [pc, #228]	; (25850 <buttons_scan_fn+0x1c4>)
   2576c:	4839      	ldr	r0, [pc, #228]	; (25854 <buttons_scan_fn+0x1c8>)
   2576e:	f020 ff75 	bl	4665c <printk>
   25772:	4839      	ldr	r0, [pc, #228]	; (25858 <buttons_scan_fn+0x1cc>)
   25774:	f020 ff72 	bl	4665c <printk>
   25778:	215f      	movs	r1, #95	; 0x5f
   2577a:	4835      	ldr	r0, [pc, #212]	; (25850 <buttons_scan_fn+0x1c4>)
   2577c:	f020 ff7b 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   25780:	4831      	ldr	r0, [pc, #196]	; (25848 <buttons_scan_fn+0x1bc>)
   25782:	f018 fb1b 	bl	3ddbc <z_spin_lock_set_owner>
		switch (state) {
   25786:	4b35      	ldr	r3, [pc, #212]	; (2585c <buttons_scan_fn+0x1d0>)
   25788:	781a      	ldrb	r2, [r3, #0]
   2578a:	2a01      	cmp	r2, #1
   2578c:	d13a      	bne.n	25804 <buttons_scan_fn+0x178>
			state = STATE_WAITING;
   2578e:	2400      	movs	r4, #0
   25790:	701c      	strb	r4, [r3, #0]
			  button_pins[i].number);
   25792:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
			err = gpio_pin_enable_callback(button_devs[i],
   25796:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   2579a:	791a      	ldrb	r2, [r3, #4]
	if (api->enable_callback == NULL) {
   2579c:	6843      	ldr	r3, [r0, #4]
   2579e:	691b      	ldr	r3, [r3, #16]
   257a0:	b36b      	cbz	r3, 257fe <buttons_scan_fn+0x172>
	return api->enable_callback(port, access_op, pin);
   257a2:	2100      	movs	r1, #0
   257a4:	4798      	blx	r3
   257a6:	4605      	mov	r5, r0
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   257a8:	3401      	adds	r4, #1
   257aa:	2c04      	cmp	r4, #4
   257ac:	d001      	beq.n	257b2 <buttons_scan_fn+0x126>
   257ae:	2d00      	cmp	r5, #0
   257b0:	d0ef      	beq.n	25792 <buttons_scan_fn+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   257b2:	4825      	ldr	r0, [pc, #148]	; (25848 <buttons_scan_fn+0x1bc>)
   257b4:	f018 faf2 	bl	3dd9c <z_spin_unlock_valid>
   257b8:	b960      	cbnz	r0, 257d4 <buttons_scan_fn+0x148>
   257ba:	4929      	ldr	r1, [pc, #164]	; (25860 <buttons_scan_fn+0x1d4>)
   257bc:	2372      	movs	r3, #114	; 0x72
   257be:	4a24      	ldr	r2, [pc, #144]	; (25850 <buttons_scan_fn+0x1c4>)
   257c0:	4824      	ldr	r0, [pc, #144]	; (25854 <buttons_scan_fn+0x1c8>)
   257c2:	f020 ff4b 	bl	4665c <printk>
   257c6:	4827      	ldr	r0, [pc, #156]	; (25864 <buttons_scan_fn+0x1d8>)
   257c8:	f020 ff48 	bl	4665c <printk>
   257cc:	2172      	movs	r1, #114	; 0x72
   257ce:	4820      	ldr	r0, [pc, #128]	; (25850 <buttons_scan_fn+0x1c4>)
   257d0:	f020 ff51 	bl	46676 <assert_post_action>
	__asm__ volatile(
   257d4:	f388 8811 	msr	BASEPRI, r8
   257d8:	f3bf 8f6f 	isb	sy
		if (err) {
   257dc:	2d00      	cmp	r5, #0
   257de:	d0a7      	beq.n	25730 <buttons_scan_fn+0xa4>
			LOG_ERR("Cannot enable callbacks");
   257e0:	2301      	movs	r3, #1
   257e2:	f04f 0000 	mov.w	r0, #0
   257e6:	4a0e      	ldr	r2, [pc, #56]	; (25820 <buttons_scan_fn+0x194>)
   257e8:	f363 0002 	bfi	r0, r3, #0, #3
   257ec:	4b0d      	ldr	r3, [pc, #52]	; (25824 <buttons_scan_fn+0x198>)
   257ee:	f36f 00c5 	bfc	r0, #3, #3
   257f2:	1a9b      	subs	r3, r3, r2
   257f4:	08db      	lsrs	r3, r3, #3
   257f6:	f363 108f 	bfi	r0, r3, #6, #10
   257fa:	491b      	ldr	r1, [pc, #108]	; (25868 <buttons_scan_fn+0x1dc>)
   257fc:	e796      	b.n	2572c <buttons_scan_fn+0xa0>
		return -ENOTSUP;
   257fe:	f06f 0585 	mvn.w	r5, #133	; 0x85
   25802:	e7d1      	b.n	257a8 <buttons_scan_fn+0x11c>
			__ASSERT_NO_MSG(false);
   25804:	2398      	movs	r3, #152	; 0x98
   25806:	4a19      	ldr	r2, [pc, #100]	; (2586c <buttons_scan_fn+0x1e0>)
   25808:	4919      	ldr	r1, [pc, #100]	; (25870 <buttons_scan_fn+0x1e4>)
   2580a:	4812      	ldr	r0, [pc, #72]	; (25854 <buttons_scan_fn+0x1c8>)
   2580c:	f020 ff26 	bl	4665c <printk>
   25810:	2198      	movs	r1, #152	; 0x98
   25812:	4816      	ldr	r0, [pc, #88]	; (2586c <buttons_scan_fn+0x1e0>)
   25814:	f020 ff2f 	bl	46676 <assert_post_action>
		int err = 0;
   25818:	2500      	movs	r5, #0
			break;
   2581a:	e7ca      	b.n	257b2 <buttons_scan_fn+0x126>
   2581c:	000495a4 	.word	0x000495a4
   25820:	00049018 	.word	0x00049018
   25824:	00049068 	.word	0x00049068
   25828:	0004d38d 	.word	0x0004d38d
   2582c:	20023b88 	.word	0x20023b88
   25830:	200321a8 	.word	0x200321a8
   25834:	20023b6c 	.word	0x20023b6c
   25838:	20023b3c 	.word	0x20023b3c
   2583c:	20023b40 	.word	0x20023b40
   25840:	2002a324 	.word	0x2002a324
   25844:	0004d3a2 	.word	0x0004d3a2
   25848:	20023b84 	.word	0x20023b84
   2584c:	0004bff2 	.word	0x0004bff2
   25850:	0004bfcb 	.word	0x0004bfcb
   25854:	0004b5bf 	.word	0x0004b5bf
   25858:	0004c007 	.word	0x0004c007
   2585c:	2002a88e 	.word	0x2002a88e
   25860:	0004c01c 	.word	0x0004c01c
   25864:	0004c033 	.word	0x0004c033
   25868:	0004d3bf 	.word	0x0004d3bf
   2586c:	0004d34e 	.word	0x0004d34e
   25870:	000505de 	.word	0x000505de
   25874:	20023b2c 	.word	0x20023b2c

00025878 <dk_leds_init>:
{
   25878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2587a:	2400      	movs	r4, #0
		led_devs[i] = device_get_binding(led_pins[i].port);
   2587c:	4e20      	ldr	r6, [pc, #128]	; (25900 <dk_leds_init+0x88>)
   2587e:	4f21      	ldr	r7, [pc, #132]	; (25904 <dk_leds_init+0x8c>)
   25880:	00e5      	lsls	r5, r4, #3
   25882:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
   25886:	f016 f8b9 	bl	3b9fc <z_impl_device_get_binding>
   2588a:	4603      	mov	r3, r0
   2588c:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
		if (!led_devs[i]) {
   25890:	b998      	cbnz	r0, 258ba <dk_leds_init+0x42>
			LOG_ERR("Cannot bind gpio device");
   25892:	2201      	movs	r2, #1
   25894:	f04f 0000 	mov.w	r0, #0
   25898:	f362 0002 	bfi	r0, r2, #0, #3
   2589c:	f363 00c5 	bfi	r0, r3, #3, #3
   258a0:	4a19      	ldr	r2, [pc, #100]	; (25908 <dk_leds_init+0x90>)
   258a2:	4b1a      	ldr	r3, [pc, #104]	; (2590c <dk_leds_init+0x94>)
   258a4:	491a      	ldr	r1, [pc, #104]	; (25910 <dk_leds_init+0x98>)
   258a6:	1a9b      	subs	r3, r3, r2
   258a8:	08db      	lsrs	r3, r3, #3
   258aa:	f363 108f 	bfi	r0, r3, #6, #10
   258ae:	f020 fef8 	bl	466a2 <log_string_sync>
			return -ENODEV;
   258b2:	f06f 0512 	mvn.w	r5, #18
}
   258b6:	4628      	mov	r0, r5
   258b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   258ba:	4435      	add	r5, r6
   258bc:	792a      	ldrb	r2, [r5, #4]
	return api->config(port, access_op, pin, flags);
   258be:	6843      	ldr	r3, [r0, #4]
   258c0:	2100      	movs	r1, #0
   258c2:	681d      	ldr	r5, [r3, #0]
   258c4:	2301      	movs	r3, #1
   258c6:	47a8      	blx	r5
		if (err) {
   258c8:	4605      	mov	r5, r0
   258ca:	b180      	cbz	r0, 258ee <dk_leds_init+0x76>
			LOG_ERR("Cannot configure LED gpio");
   258cc:	2301      	movs	r3, #1
   258ce:	f04f 0000 	mov.w	r0, #0
   258d2:	4a0d      	ldr	r2, [pc, #52]	; (25908 <dk_leds_init+0x90>)
   258d4:	f363 0002 	bfi	r0, r3, #0, #3
   258d8:	4b0c      	ldr	r3, [pc, #48]	; (2590c <dk_leds_init+0x94>)
   258da:	f36f 00c5 	bfc	r0, #3, #3
   258de:	1a9b      	subs	r3, r3, r2
   258e0:	08db      	lsrs	r3, r3, #3
   258e2:	f363 108f 	bfi	r0, r3, #6, #10
   258e6:	490b      	ldr	r1, [pc, #44]	; (25914 <dk_leds_init+0x9c>)
   258e8:	f020 fedb 	bl	466a2 <log_string_sync>
			return err;
   258ec:	e7e3      	b.n	258b6 <dk_leds_init+0x3e>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   258ee:	3401      	adds	r4, #1
   258f0:	2c04      	cmp	r4, #4
   258f2:	d1c5      	bne.n	25880 <dk_leds_init+0x8>
}
   258f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   258f8:	210f      	movs	r1, #15
   258fa:	f7ff bdf5 	b.w	254e8 <dk_set_leds_state.part.0>
   258fe:	bf00      	nop
   25900:	000495c4 	.word	0x000495c4
   25904:	20023b74 	.word	0x20023b74
   25908:	00049018 	.word	0x00049018
   2590c:	00049068 	.word	0x00049068
   25910:	0004d43d 	.word	0x0004d43d
   25914:	0004d455 	.word	0x0004d455

00025918 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25918:	4b05      	ldr	r3, [pc, #20]	; (25930 <dk_read_buttons+0x18>)
   2591a:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   2591e:	b100      	cbz	r0, 25922 <dk_read_buttons+0xa>
		*button_state = current_state;
   25920:	6003      	str	r3, [r0, #0]
   25922:	4804      	ldr	r0, [pc, #16]	; (25934 <dk_read_buttons+0x1c>)
	if (has_changed != NULL) {
   25924:	b111      	cbz	r1, 2592c <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   25926:	6802      	ldr	r2, [r0, #0]
   25928:	405a      	eors	r2, r3
   2592a:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   2592c:	6003      	str	r3, [r0, #0]
}
   2592e:	4770      	bx	lr
   25930:	20023b88 	.word	0x20023b88
   25934:	20023b70 	.word	0x20023b70

00025938 <dk_buttons_init>:
{
   25938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		button_devs[i] = device_get_binding(button_pins[i].port);
   2593c:	4e69      	ldr	r6, [pc, #420]	; (25ae4 <dk_buttons_init+0x1ac>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2593e:	2500      	movs	r5, #0
   25940:	46b0      	mov	r8, r6
	button_handler_cb = button_handler;
   25942:	4b69      	ldr	r3, [pc, #420]	; (25ae8 <dk_buttons_init+0x1b0>)
		button_devs[i] = device_get_binding(button_pins[i].port);
   25944:	4f69      	ldr	r7, [pc, #420]	; (25aec <dk_buttons_init+0x1b4>)
	button_handler_cb = button_handler;
   25946:	6018      	str	r0, [r3, #0]
   25948:	00ec      	lsls	r4, r5, #3
		button_devs[i] = device_get_binding(button_pins[i].port);
   2594a:	f856 0035 	ldr.w	r0, [r6, r5, lsl #3]
   2594e:	f016 f855 	bl	3b9fc <z_impl_device_get_binding>
   25952:	4603      	mov	r3, r0
   25954:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
		if (!button_devs[i]) {
   25958:	b9a0      	cbnz	r0, 25984 <dk_buttons_init+0x4c>
			LOG_ERR("Cannot bind gpio device");
   2595a:	2201      	movs	r2, #1
   2595c:	f04f 0000 	mov.w	r0, #0
   25960:	f362 0002 	bfi	r0, r2, #0, #3
   25964:	f363 00c5 	bfi	r0, r3, #3, #3
   25968:	4a61      	ldr	r2, [pc, #388]	; (25af0 <dk_buttons_init+0x1b8>)
   2596a:	4b62      	ldr	r3, [pc, #392]	; (25af4 <dk_buttons_init+0x1bc>)
   2596c:	4962      	ldr	r1, [pc, #392]	; (25af8 <dk_buttons_init+0x1c0>)
   2596e:	1a9b      	subs	r3, r3, r2
   25970:	08db      	lsrs	r3, r3, #3
   25972:	f363 108f 	bfi	r0, r3, #6, #10
   25976:	f020 fe94 	bl	466a2 <log_string_sync>
			return -ENODEV;
   2597a:	f06f 0412 	mvn.w	r4, #18
}
   2597e:	4620      	mov	r0, r4
   25980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   25984:	4434      	add	r4, r6
   25986:	7922      	ldrb	r2, [r4, #4]
   25988:	6843      	ldr	r3, [r0, #4]
   2598a:	2100      	movs	r1, #0
   2598c:	681c      	ldr	r4, [r3, #0]
   2598e:	f44f 7380 	mov.w	r3, #256	; 0x100
   25992:	47a0      	blx	r4
		if (err) {
   25994:	4604      	mov	r4, r0
   25996:	b180      	cbz	r0, 259ba <dk_buttons_init+0x82>
			LOG_ERR("Cannot configure button gpio");
   25998:	2301      	movs	r3, #1
   2599a:	f04f 0000 	mov.w	r0, #0
   2599e:	4a54      	ldr	r2, [pc, #336]	; (25af0 <dk_buttons_init+0x1b8>)
   259a0:	f363 0002 	bfi	r0, r3, #0, #3
   259a4:	4b53      	ldr	r3, [pc, #332]	; (25af4 <dk_buttons_init+0x1bc>)
   259a6:	f36f 00c5 	bfc	r0, #3, #3
   259aa:	1a9b      	subs	r3, r3, r2
   259ac:	08db      	lsrs	r3, r3, #3
   259ae:	4953      	ldr	r1, [pc, #332]	; (25afc <dk_buttons_init+0x1c4>)
   259b0:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Cannot add work to workqueue");
   259b4:	f020 fe75 	bl	466a2 <log_string_sync>
		return err;
   259b8:	e7e1      	b.n	2597e <dk_buttons_init+0x46>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   259ba:	3501      	adds	r5, #1
   259bc:	2d04      	cmp	r5, #4
   259be:	d1c3      	bne.n	25948 <dk_buttons_init+0x10>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   259c0:	4605      	mov	r5, r0
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   259c2:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   259c6:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   259ca:	791a      	ldrb	r2, [r3, #4]
   259cc:	6843      	ldr	r3, [r0, #4]
   259ce:	2100      	movs	r1, #0
   259d0:	681c      	ldr	r4, [r3, #0]
   259d2:	f44f 7381 	mov.w	r3, #258	; 0x102
   259d6:	47a0      	blx	r4
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   259d8:	3501      	adds	r5, #1
   259da:	2d04      	cmp	r5, #4
   259dc:	4604      	mov	r4, r0
   259de:	d010      	beq.n	25a02 <dk_buttons_init+0xca>
   259e0:	2800      	cmp	r0, #0
   259e2:	d0ee      	beq.n	259c2 <dk_buttons_init+0x8a>
		LOG_ERR("Cannot set interrupt mode");
   259e4:	2301      	movs	r3, #1
   259e6:	f04f 0000 	mov.w	r0, #0
   259ea:	4a41      	ldr	r2, [pc, #260]	; (25af0 <dk_buttons_init+0x1b8>)
   259ec:	f363 0002 	bfi	r0, r3, #0, #3
   259f0:	4b40      	ldr	r3, [pc, #256]	; (25af4 <dk_buttons_init+0x1bc>)
   259f2:	f36f 00c5 	bfc	r0, #3, #3
   259f6:	1a9b      	subs	r3, r3, r2
   259f8:	08db      	lsrs	r3, r3, #3
   259fa:	f363 108f 	bfi	r0, r3, #6, #10
   259fe:	4940      	ldr	r1, [pc, #256]	; (25b00 <dk_buttons_init+0x1c8>)
   25a00:	e7d8      	b.n	259b4 <dk_buttons_init+0x7c>
	if (err) {
   25a02:	2800      	cmp	r0, #0
   25a04:	d1ee      	bne.n	259e4 <dk_buttons_init+0xac>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   25a06:	4605      	mov	r5, r0
	u32_t pin_mask = 0;
   25a08:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   25a0a:	f04f 0a01 	mov.w	sl, #1
			button_pins[i].number);
   25a0e:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
		err = gpio_pin_disable_callback(button_devs[i],
   25a12:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
			button_pins[i].number);
   25a16:	791e      	ldrb	r6, [r3, #4]
	if (api->disable_callback == NULL) {
   25a18:	6843      	ldr	r3, [r0, #4]
   25a1a:	695b      	ldr	r3, [r3, #20]
   25a1c:	b19b      	cbz	r3, 25a46 <dk_buttons_init+0x10e>
	return api->disable_callback(port, access_op, pin);
   25a1e:	4632      	mov	r2, r6
   25a20:	2100      	movs	r1, #0
   25a22:	4798      	blx	r3
		if (err) {
   25a24:	4604      	mov	r4, r0
   25a26:	b188      	cbz	r0, 25a4c <dk_buttons_init+0x114>
			LOG_ERR("Cannot disable callbacks()");
   25a28:	2301      	movs	r3, #1
   25a2a:	f04f 0000 	mov.w	r0, #0
   25a2e:	4a30      	ldr	r2, [pc, #192]	; (25af0 <dk_buttons_init+0x1b8>)
   25a30:	f363 0002 	bfi	r0, r3, #0, #3
   25a34:	4b2f      	ldr	r3, [pc, #188]	; (25af4 <dk_buttons_init+0x1bc>)
   25a36:	f36f 00c5 	bfc	r0, #3, #3
   25a3a:	1a9b      	subs	r3, r3, r2
   25a3c:	08db      	lsrs	r3, r3, #3
   25a3e:	f363 108f 	bfi	r0, r3, #6, #10
   25a42:	4930      	ldr	r1, [pc, #192]	; (25b04 <dk_buttons_init+0x1cc>)
   25a44:	e7b6      	b.n	259b4 <dk_buttons_init+0x7c>
		return -ENOTSUP;
   25a46:	f06f 0485 	mvn.w	r4, #133	; 0x85
   25a4a:	e7ed      	b.n	25a28 <dk_buttons_init+0xf0>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   25a4c:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   25a4e:	fa0a f606 	lsl.w	r6, sl, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   25a52:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   25a54:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   25a58:	d1d9      	bne.n	25a0e <dk_buttons_init+0xd6>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   25a5a:	4606      	mov	r6, r0
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   25a5c:	4d2a      	ldr	r5, [pc, #168]	; (25b08 <dk_buttons_init+0x1d0>)
   25a5e:	4b2b      	ldr	r3, [pc, #172]	; (25b0c <dk_buttons_init+0x1d4>)
	callback->pin_mask = pin_mask;
   25a60:	e9c5 3901 	strd	r3, r9, [r5, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   25a64:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
   25a68:	6843      	ldr	r3, [r0, #4]
   25a6a:	68db      	ldr	r3, [r3, #12]
   25a6c:	b19b      	cbz	r3, 25a96 <dk_buttons_init+0x15e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   25a6e:	2201      	movs	r2, #1
   25a70:	4629      	mov	r1, r5
   25a72:	4798      	blx	r3
		if (err) {
   25a74:	4604      	mov	r4, r0
   25a76:	b188      	cbz	r0, 25a9c <dk_buttons_init+0x164>
			LOG_ERR("Cannot add callback");
   25a78:	2301      	movs	r3, #1
   25a7a:	f04f 0000 	mov.w	r0, #0
   25a7e:	4a1c      	ldr	r2, [pc, #112]	; (25af0 <dk_buttons_init+0x1b8>)
   25a80:	f363 0002 	bfi	r0, r3, #0, #3
   25a84:	4b1b      	ldr	r3, [pc, #108]	; (25af4 <dk_buttons_init+0x1bc>)
   25a86:	f36f 00c5 	bfc	r0, #3, #3
   25a8a:	1a9b      	subs	r3, r3, r2
   25a8c:	08db      	lsrs	r3, r3, #3
   25a8e:	f363 108f 	bfi	r0, r3, #6, #10
   25a92:	491f      	ldr	r1, [pc, #124]	; (25b10 <dk_buttons_init+0x1d8>)
   25a94:	e78e      	b.n	259b4 <dk_buttons_init+0x7c>
		return -ENOTSUP;
   25a96:	f06f 0485 	mvn.w	r4, #133	; 0x85
   25a9a:	e7ed      	b.n	25a78 <dk_buttons_init+0x140>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   25a9c:	3601      	adds	r6, #1
   25a9e:	2e04      	cmp	r6, #4
   25aa0:	d1e0      	bne.n	25a64 <dk_buttons_init+0x12c>
	state = STATE_SCANNING;
   25aa2:	2501      	movs	r5, #1
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   25aa4:	491b      	ldr	r1, [pc, #108]	; (25b14 <dk_buttons_init+0x1dc>)
   25aa6:	481c      	ldr	r0, [pc, #112]	; (25b18 <dk_buttons_init+0x1e0>)
   25aa8:	f023 f894 	bl	48bd4 <k_delayed_work_init>
	state = STATE_SCANNING;
   25aac:	4b1b      	ldr	r3, [pc, #108]	; (25b1c <dk_buttons_init+0x1e4>)
   25aae:	4622      	mov	r2, r4
   25ab0:	4919      	ldr	r1, [pc, #100]	; (25b18 <dk_buttons_init+0x1e0>)
   25ab2:	481b      	ldr	r0, [pc, #108]	; (25b20 <dk_buttons_init+0x1e8>)
   25ab4:	701d      	strb	r5, [r3, #0]
   25ab6:	f018 fbc1 	bl	3e23c <k_delayed_work_submit_to_queue>
	if (err) {
   25aba:	4604      	mov	r4, r0
   25abc:	b168      	cbz	r0, 25ada <dk_buttons_init+0x1a2>
		LOG_ERR("Cannot add work to workqueue");
   25abe:	f04f 0000 	mov.w	r0, #0
   25ac2:	4b0c      	ldr	r3, [pc, #48]	; (25af4 <dk_buttons_init+0x1bc>)
   25ac4:	4a0a      	ldr	r2, [pc, #40]	; (25af0 <dk_buttons_init+0x1b8>)
   25ac6:	f365 0002 	bfi	r0, r5, #0, #3
   25aca:	1a9b      	subs	r3, r3, r2
   25acc:	f36f 00c5 	bfc	r0, #3, #3
   25ad0:	08db      	lsrs	r3, r3, #3
   25ad2:	f363 108f 	bfi	r0, r3, #6, #10
   25ad6:	4913      	ldr	r1, [pc, #76]	; (25b24 <dk_buttons_init+0x1ec>)
   25ad8:	e76c      	b.n	259b4 <dk_buttons_init+0x7c>
	dk_read_buttons(NULL, NULL);
   25ada:	4601      	mov	r1, r0
   25adc:	f7ff ff1c 	bl	25918 <dk_read_buttons>
	return 0;
   25ae0:	e74d      	b.n	2597e <dk_buttons_init+0x46>
   25ae2:	bf00      	nop
   25ae4:	000495a4 	.word	0x000495a4
   25ae8:	20023b3c 	.word	0x20023b3c
   25aec:	20023b2c 	.word	0x20023b2c
   25af0:	00049018 	.word	0x00049018
   25af4:	00049068 	.word	0x00049068
   25af8:	0004d43d 	.word	0x0004d43d
   25afc:	0004d3d7 	.word	0x0004d3d7
   25b00:	0004d3f4 	.word	0x0004d3f4
   25b04:	0004d40e 	.word	0x0004d40e
   25b08:	20023b60 	.word	0x20023b60
   25b0c:	00025569 	.word	0x00025569
   25b10:	0004d429 	.word	0x0004d429
   25b14:	0002568d 	.word	0x0002568d
   25b18:	20023b40 	.word	0x20023b40
   25b1c:	2002a88e 	.word	0x2002a88e
   25b20:	2002a324 	.word	0x2002a324
   25b24:	0004d3a2 	.word	0x0004d3a2

00025b28 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   25b28:	4b0a      	ldr	r3, [pc, #40]	; (25b54 <find_node+0x2c>)
{
   25b2a:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   25b2c:	681b      	ldr	r3, [r3, #0]
{
   25b2e:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   25b30:	b143      	cbz	r3, 25b44 <find_node+0x1c>
	return node->next;
   25b32:	2400      	movs	r4, #0
   25b34:	6818      	ldr	r0, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   25b36:	685e      	ldr	r6, [r3, #4]
   25b38:	428e      	cmp	r6, r1
   25b3a:	d105      	bne.n	25b48 <find_node+0x20>
   25b3c:	689e      	ldr	r6, [r3, #8]
   25b3e:	4296      	cmp	r6, r2
   25b40:	d102      	bne.n	25b48 <find_node+0x20>
			*prev_out = prev;
   25b42:	602c      	str	r4, [r5, #0]
			return curr;
		}
		prev = curr;
	}
	return NULL;
   25b44:	4618      	mov	r0, r3
}
   25b46:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   25b48:	2800      	cmp	r0, #0
   25b4a:	d0fc      	beq.n	25b46 <find_node+0x1e>
   25b4c:	461c      	mov	r4, r3
   25b4e:	4603      	mov	r3, r0
   25b50:	6800      	ldr	r0, [r0, #0]
   25b52:	e7f0      	b.n	25b36 <find_node+0xe>
   25b54:	20023b8c 	.word	0x20023b8c

00025b58 <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
   25b58:	b510      	push	{r4, lr}
	list->head = NULL;
   25b5a:	2400      	movs	r4, #0
   25b5c:	4b03      	ldr	r3, [pc, #12]	; (25b6c <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   25b5e:	4804      	ldr	r0, [pc, #16]	; (25b70 <module_init+0x18>)
	list->tail = NULL;
   25b60:	e9c3 4400 	strd	r4, r4, [r3]
   25b64:	f005 fdb0 	bl	2b6c8 <at_cmd_set_notification_handler>
	return 0;
}
   25b68:	4620      	mov	r0, r4
   25b6a:	bd10      	pop	{r4, pc}
   25b6c:	20023b8c 	.word	0x20023b8c
   25b70:	00025b75 	.word	0x00025b75

00025b74 <notif_dispatch>:
{
   25b74:	b538      	push	{r3, r4, r5, lr}
   25b76:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   25b78:	f04f 31ff 	mov.w	r1, #4294967295
   25b7c:	4809      	ldr	r0, [pc, #36]	; (25ba4 <notif_dispatch+0x30>)
   25b7e:	f016 fc45 	bl	3c40c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   25b82:	4b09      	ldr	r3, [pc, #36]	; (25ba8 <notif_dispatch+0x34>)
   25b84:	681b      	ldr	r3, [r3, #0]
   25b86:	b143      	cbz	r3, 25b9a <notif_dispatch+0x26>
	return node->next;
   25b88:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   25b8a:	689a      	ldr	r2, [r3, #8]
   25b8c:	4629      	mov	r1, r5
   25b8e:	6858      	ldr	r0, [r3, #4]
   25b90:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   25b92:	b114      	cbz	r4, 25b9a <notif_dispatch+0x26>
   25b94:	4623      	mov	r3, r4
   25b96:	6824      	ldr	r4, [r4, #0]
   25b98:	e7f7      	b.n	25b8a <notif_dispatch+0x16>
	z_impl_k_mutex_unlock(mutex);
   25b9a:	4802      	ldr	r0, [pc, #8]	; (25ba4 <notif_dispatch+0x30>)
}
   25b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25ba0:	f016 bd0e 	b.w	3c5c0 <z_impl_k_mutex_unlock>
   25ba4:	20032368 	.word	0x20032368
   25ba8:	20023b8c 	.word	0x20023b8c

00025bac <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   25bac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25bae:	4606      	mov	r6, r0
	if (handler == NULL) {
   25bb0:	460d      	mov	r5, r1
   25bb2:	b361      	cbz	r1, 25c0e <at_notif_register_handler+0x62>
	return z_impl_k_mutex_lock(mutex, timeout);
   25bb4:	f04f 31ff 	mov.w	r1, #4294967295
   25bb8:	4816      	ldr	r0, [pc, #88]	; (25c14 <at_notif_register_handler+0x68>)
   25bba:	f016 fc27 	bl	3c40c <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   25bbe:	462a      	mov	r2, r5
   25bc0:	4631      	mov	r1, r6
   25bc2:	a801      	add	r0, sp, #4
   25bc4:	f7ff ffb0 	bl	25b28 <find_node>
   25bc8:	4604      	mov	r4, r0
   25bca:	b120      	cbz	r0, 25bd6 <at_notif_register_handler+0x2a>
	z_impl_k_mutex_unlock(mutex);
   25bcc:	4811      	ldr	r0, [pc, #68]	; (25c14 <at_notif_register_handler+0x68>)
   25bce:	f016 fcf7 	bl	3c5c0 <z_impl_k_mutex_unlock>
	return 0;
   25bd2:	2000      	movs	r0, #0
		LOG_DBG("context=0x%08X, handler=0x%08X", (u32_t)context,
			(u32_t)handler);
		return -EINVAL;
	}
	return append_notif_handler(context, handler);
   25bd4:	e009      	b.n	25bea <at_notif_register_handler+0x3e>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   25bd6:	200c      	movs	r0, #12
   25bd8:	f016 fab0 	bl	3c13c <k_malloc>
   25bdc:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   25bde:	b930      	cbnz	r0, 25bee <at_notif_register_handler+0x42>
   25be0:	480c      	ldr	r0, [pc, #48]	; (25c14 <at_notif_register_handler+0x68>)
   25be2:	f016 fced 	bl	3c5c0 <z_impl_k_mutex_unlock>
		return -ENOBUFS;
   25be6:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   25bea:	b002      	add	sp, #8
   25bec:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   25bee:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   25bf0:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   25bf2:	4a09      	ldr	r2, [pc, #36]	; (25c18 <at_notif_register_handler+0x6c>)
   25bf4:	6044      	str	r4, [r0, #4]
   25bf6:	6084      	str	r4, [r0, #8]
	parent->next = child;
   25bf8:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   25bfa:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   25bfc:	e9c3 6501 	strd	r6, r5, [r3, #4]
   25c00:	b911      	cbnz	r1, 25c08 <at_notif_register_handler+0x5c>
	list->head = node;
   25c02:	e9c2 3300 	strd	r3, r3, [r2]
   25c06:	e7e1      	b.n	25bcc <at_notif_register_handler+0x20>
	parent->next = child;
   25c08:	600b      	str	r3, [r1, #0]
	list->tail = node;
   25c0a:	6053      	str	r3, [r2, #4]
   25c0c:	e7de      	b.n	25bcc <at_notif_register_handler+0x20>
		return -EINVAL;
   25c0e:	f06f 0015 	mvn.w	r0, #21
   25c12:	e7ea      	b.n	25bea <at_notif_register_handler+0x3e>
   25c14:	20032368 	.word	0x20032368
   25c18:	20023b8c 	.word	0x20023b8c

00025c1c <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   25c1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25c1e:	4606      	mov	r6, r0
	if (handler == NULL) {
   25c20:	460d      	mov	r5, r1
   25c22:	b369      	cbz	r1, 25c80 <at_notif_deregister_handler+0x64>
	struct notif_handler *curr, *prev = NULL;
   25c24:	2300      	movs	r3, #0
   25c26:	ac02      	add	r4, sp, #8
   25c28:	f844 3d04 	str.w	r3, [r4, #-4]!
	return z_impl_k_mutex_lock(mutex, timeout);
   25c2c:	f04f 31ff 	mov.w	r1, #4294967295
   25c30:	4815      	ldr	r0, [pc, #84]	; (25c88 <at_notif_deregister_handler+0x6c>)
   25c32:	f016 fbeb 	bl	3c40c <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   25c36:	462a      	mov	r2, r5
   25c38:	4631      	mov	r1, r6
   25c3a:	4620      	mov	r0, r4
   25c3c:	f7ff ff74 	bl	25b28 <find_node>
	if (curr == NULL) {
   25c40:	b930      	cbnz	r0, 25c50 <at_notif_deregister_handler+0x34>
	z_impl_k_mutex_unlock(mutex);
   25c42:	4811      	ldr	r0, [pc, #68]	; (25c88 <at_notif_deregister_handler+0x6c>)
   25c44:	f016 fcbc 	bl	3c5c0 <z_impl_k_mutex_unlock>
		return -ENXIO;
   25c48:	f06f 0005 	mvn.w	r0, #5
		LOG_DBG("context=0x%08X, handler=0x%08X", (u32_t)context,
			(u32_t)handler);
		return -EINVAL;
	}
	return remove_notif_handler(context, handler);
}
   25c4c:	b002      	add	sp, #8
   25c4e:	bd70      	pop	{r4, r5, r6, pc}
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   25c50:	9a01      	ldr	r2, [sp, #4]
   25c52:	6801      	ldr	r1, [r0, #0]
   25c54:	4b0d      	ldr	r3, [pc, #52]	; (25c8c <at_notif_deregister_handler+0x70>)
Z_GENLIST_REMOVE(slist, snode)
   25c56:	b96a      	cbnz	r2, 25c74 <at_notif_deregister_handler+0x58>
   25c58:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   25c5a:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   25c5c:	4290      	cmp	r0, r2
   25c5e:	d100      	bne.n	25c62 <at_notif_deregister_handler+0x46>
	list->tail = node;
   25c60:	6059      	str	r1, [r3, #4]
	parent->next = child;
   25c62:	2400      	movs	r4, #0
   25c64:	6004      	str	r4, [r0, #0]
	k_free(curr);
   25c66:	f022 feae 	bl	489c6 <k_free>
   25c6a:	4807      	ldr	r0, [pc, #28]	; (25c88 <at_notif_deregister_handler+0x6c>)
   25c6c:	f016 fca8 	bl	3c5c0 <z_impl_k_mutex_unlock>
	return 0;
   25c70:	4620      	mov	r0, r4
	return remove_notif_handler(context, handler);
   25c72:	e7eb      	b.n	25c4c <at_notif_deregister_handler+0x30>
   25c74:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   25c76:	6859      	ldr	r1, [r3, #4]
   25c78:	4288      	cmp	r0, r1
	list->tail = node;
   25c7a:	bf08      	it	eq
   25c7c:	605a      	streq	r2, [r3, #4]
   25c7e:	e7f0      	b.n	25c62 <at_notif_deregister_handler+0x46>
		return -EINVAL;
   25c80:	f06f 0015 	mvn.w	r0, #21
   25c84:	e7e2      	b.n	25c4c <at_notif_deregister_handler+0x30>
   25c86:	bf00      	nop
   25c88:	20032368 	.word	0x20032368
   25c8c:	20023b8c 	.word	0x20023b8c

00025c90 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(char *str)
{
   25c90:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   25c92:	4d05      	ldr	r5, [pc, #20]	; (25ca8 <write_uart_string+0x18>)
   25c94:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   25c96:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   25c9a:	b901      	cbnz	r1, 25c9e <write_uart_string+0xe>
	}
}
   25c9c:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   25c9e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
   25ca0:	6843      	ldr	r3, [r0, #4]
   25ca2:	685b      	ldr	r3, [r3, #4]
   25ca4:	4798      	blx	r3
   25ca6:	e7f6      	b.n	25c96 <write_uart_string+0x6>
   25ca8:	20023c68 	.word	0x20023c68

00025cac <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   25cac:	b530      	push	{r4, r5, lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   25cae:	4920      	ldr	r1, [pc, #128]	; (25d30 <cmd_send+0x84>)
{
   25cb0:	b089      	sub	sp, #36	; 0x24
	err = at_cmd_write(at_buf, at_buf,
   25cb2:	f10d 030b 	add.w	r3, sp, #11
   25cb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   25cba:	4608      	mov	r0, r1
   25cbc:	f005 fce2 	bl	2b684 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   25cc0:	1e04      	subs	r4, r0, #0
   25cc2:	da12      	bge.n	25cea <cmd_send+0x3e>
		LOG_ERR("Error while processing AT command: %d", err);
   25cc4:	2501      	movs	r5, #1
   25cc6:	f04f 0000 	mov.w	r0, #0
   25cca:	4a1a      	ldr	r2, [pc, #104]	; (25d34 <cmd_send+0x88>)
   25ccc:	4b1a      	ldr	r3, [pc, #104]	; (25d38 <cmd_send+0x8c>)
   25cce:	f365 0002 	bfi	r0, r5, #0, #3
   25cd2:	1a9b      	subs	r3, r3, r2
   25cd4:	08db      	lsrs	r3, r3, #3
   25cd6:	f36f 00c5 	bfc	r0, #3, #3
   25cda:	f363 108f 	bfi	r0, r3, #6, #10
   25cde:	4622      	mov	r2, r4
   25ce0:	4916      	ldr	r1, [pc, #88]	; (25d3c <cmd_send+0x90>)
   25ce2:	f020 fcde 	bl	466a2 <log_string_sync>
		state = AT_CMD_ERROR;
   25ce6:	f88d 500b 	strb.w	r5, [sp, #11]
	}

	/* Handle the various error responses from modem */
	switch (state) {
   25cea:	f89d 300b 	ldrb.w	r3, [sp, #11]
   25cee:	2b03      	cmp	r3, #3
   25cf0:	d809      	bhi.n	25d06 <cmd_send+0x5a>
   25cf2:	e8df f003 	tbb	[pc, r3]
   25cf6:	0e02      	.short	0x0e02
   25cf8:	1910      	.short	0x1910
	case AT_CMD_OK:
		write_uart_string(at_buf);
   25cfa:	480d      	ldr	r0, [pc, #52]	; (25d30 <cmd_send+0x84>)
   25cfc:	f7ff ffc8 	bl	25c90 <write_uart_string>
		write_uart_string(OK_STR);
   25d00:	480f      	ldr	r0, [pc, #60]	; (25d40 <cmd_send+0x94>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   25d02:	f7ff ffc5 	bl	25c90 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   25d06:	4b0f      	ldr	r3, [pc, #60]	; (25d44 <cmd_send+0x98>)
   25d08:	6818      	ldr	r0, [r3, #0]
		z_arch_syscall_invoke1(*(u32_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   25d0a:	f022 fafc 	bl	48306 <z_impl_uart_irq_rx_enable>
}
   25d0e:	b009      	add	sp, #36	; 0x24
   25d10:	bd30      	pop	{r4, r5, pc}
		write_uart_string(ERROR_STR);
   25d12:	480d      	ldr	r0, [pc, #52]	; (25d48 <cmd_send+0x9c>)
   25d14:	e7f5      	b.n	25d02 <cmd_send+0x56>
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   25d16:	4b0d      	ldr	r3, [pc, #52]	; (25d4c <cmd_send+0xa0>)
   25d18:	9400      	str	r4, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   25d1a:	2213      	movs	r2, #19
   25d1c:	2100      	movs	r1, #0
   25d1e:	a803      	add	r0, sp, #12
   25d20:	f01a faa8 	bl	40274 <__sprintf_chk>
		write_uart_string(str);
   25d24:	a803      	add	r0, sp, #12
   25d26:	e7ec      	b.n	25d02 <cmd_send+0x56>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   25d28:	9400      	str	r4, [sp, #0]
   25d2a:	4b09      	ldr	r3, [pc, #36]	; (25d50 <cmd_send+0xa4>)
   25d2c:	e7f5      	b.n	25d1a <cmd_send+0x6e>
   25d2e:	bf00      	nop
   25d30:	2002a88f 	.word	0x2002a88f
   25d34:	00049018 	.word	0x00049018
   25d38:	00049020 	.word	0x00049020
   25d3c:	0004d527 	.word	0x0004d527
   25d40:	0004d54d 	.word	0x0004d54d
   25d44:	20023c68 	.word	0x20023c68
   25d48:	0004d552 	.word	0x0004d552
   25d4c:	0004d55a 	.word	0x0004d55a
   25d50:	0004d56b 	.word	0x0004d56b

00025d54 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(struct device *dev)
{
   25d54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25d58:	4605      	mov	r5, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
   25d5a:	6843      	ldr	r3, [r0, #4]
   25d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   25d5e:	b103      	cbz	r3, 25d62 <isr+0xe>
		return api->irq_update(dev);
   25d60:	4798      	blx	r3
	if (api->irq_rx_ready) {
   25d62:	686b      	ldr	r3, [r5, #4]
   25d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   25d66:	b1c3      	cbz	r3, 25d9a <isr+0x46>
		return api->irq_rx_ready(dev);
   25d68:	4628      	mov	r0, r5
   25d6a:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   25d6c:	b1a8      	cbz	r0, 25d9a <isr+0x46>
   25d6e:	f8df 813c 	ldr.w	r8, [pc, #316]	; 25eac <isr+0x158>
   25d72:	4e43      	ldr	r6, [pc, #268]	; (25e80 <isr+0x12c>)
   25d74:	4647      	mov	r7, r8
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   25d76:	4b43      	ldr	r3, [pc, #268]	; (25e84 <isr+0x130>)
		if (at_cmd_len > 0) {
   25d78:	4c43      	ldr	r4, [pc, #268]	; (25e88 <isr+0x134>)
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   25d7a:	1af6      	subs	r6, r6, r3
   25d7c:	f3c6 06c9 	ubfx	r6, r6, #3, #10
   25d80:	e8d8 3faf 	lda	r3, [r8]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   25d84:	07db      	lsls	r3, r3, #31
   25d86:	d408      	bmi.n	25d9a <isr+0x46>
	if (api->fifo_read) {
   25d88:	686b      	ldr	r3, [r5, #4]
   25d8a:	699b      	ldr	r3, [r3, #24]
   25d8c:	b12b      	cbz	r3, 25d9a <isr+0x46>
		return api->fifo_read(dev, rx_data, size);
   25d8e:	2201      	movs	r2, #1
   25d90:	f10d 0107 	add.w	r1, sp, #7
   25d94:	4628      	mov	r0, r5
   25d96:	4798      	blx	r3
   25d98:	b910      	cbnz	r0, 25da0 <isr+0x4c>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   25d9a:	b003      	add	sp, #12
   25d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uart_rx_handler(character);
   25da0:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   25da4:	2a08      	cmp	r2, #8
   25da6:	d001      	beq.n	25dac <isr+0x58>
   25da8:	2a7f      	cmp	r2, #127	; 0x7f
   25daa:	d105      	bne.n	25db8 <isr+0x64>
		if (at_cmd_len > 0) {
   25dac:	6823      	ldr	r3, [r4, #0]
   25dae:	2b00      	cmp	r3, #0
   25db0:	d0e6      	beq.n	25d80 <isr+0x2c>
			at_cmd_len--;
   25db2:	3b01      	subs	r3, #1
   25db4:	6023      	str	r3, [r4, #0]
   25db6:	e7e3      	b.n	25d80 <isr+0x2c>
	if (!inside_quotes) {
   25db8:	4934      	ldr	r1, [pc, #208]	; (25e8c <isr+0x138>)
   25dba:	780b      	ldrb	r3, [r1, #0]
   25dbc:	2b00      	cmp	r3, #0
   25dbe:	d140      	bne.n	25e42 <isr+0xee>
		switch (character) {
   25dc0:	2a0a      	cmp	r2, #10
   25dc2:	d031      	beq.n	25e28 <isr+0xd4>
   25dc4:	2a0d      	cmp	r2, #13
   25dc6:	d025      	beq.n	25e14 <isr+0xc0>
   25dc8:	2a00      	cmp	r2, #0
   25dca:	d138      	bne.n	25e3e <isr+0xea>
			if (term_mode == MODE_NULL_TERM) {
   25dcc:	4b30      	ldr	r3, [pc, #192]	; (25e90 <isr+0x13c>)
   25dce:	781b      	ldrb	r3, [r3, #0]
   25dd0:	2b00      	cmp	r3, #0
   25dd2:	d1d5      	bne.n	25d80 <isr+0x2c>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   25dd4:	2300      	movs	r3, #0
   25dd6:	6822      	ldr	r2, [r4, #0]
   25dd8:	482e      	ldr	r0, [pc, #184]	; (25e94 <isr+0x140>)
	inside_quotes = false;
   25dda:	700b      	strb	r3, [r1, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   25ddc:	5483      	strb	r3, [r0, r2]
	cr_state = false;
   25dde:	4a2e      	ldr	r2, [pc, #184]	; (25e98 <isr+0x144>)
	at_cmd_len = 0;
   25de0:	6023      	str	r3, [r4, #0]
	cr_state = false;
   25de2:	7013      	strb	r3, [r2, #0]
	if (at_buf[0]) {
   25de4:	7803      	ldrb	r3, [r0, #0]
   25de6:	2b00      	cmp	r3, #0
   25de8:	d0ca      	beq.n	25d80 <isr+0x2c>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   25dea:	4b2c      	ldr	r3, [pc, #176]	; (25e9c <isr+0x148>)
   25dec:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   25dee:	6843      	ldr	r3, [r0, #4]
   25df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25df2:	b103      	cbz	r3, 25df6 <isr+0xa2>
		api->irq_rx_disable(dev);
   25df4:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25df6:	e8d7 3fef 	ldaex	r3, [r7]
   25dfa:	f043 0201 	orr.w	r2, r3, #1
   25dfe:	e8c7 2fe1 	stlex	r1, r2, [r7]
   25e02:	2900      	cmp	r1, #0
   25e04:	d1f7      	bne.n	25df6 <isr+0xa2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   25e06:	07da      	lsls	r2, r3, #31
   25e08:	d4ba      	bmi.n	25d80 <isr+0x2c>
		k_queue_append(&work_q->queue, work);
   25e0a:	4925      	ldr	r1, [pc, #148]	; (25ea0 <isr+0x14c>)
   25e0c:	4825      	ldr	r0, [pc, #148]	; (25ea4 <isr+0x150>)
   25e0e:	f022 fe0f 	bl	48a30 <k_queue_append>
   25e12:	e7b5      	b.n	25d80 <isr+0x2c>
			if (term_mode == MODE_CR) {
   25e14:	4b1e      	ldr	r3, [pc, #120]	; (25e90 <isr+0x13c>)
   25e16:	781b      	ldrb	r3, [r3, #0]
   25e18:	2b01      	cmp	r3, #1
   25e1a:	d0db      	beq.n	25dd4 <isr+0x80>
			if (term_mode == MODE_CR_LF) {
   25e1c:	2b03      	cmp	r3, #3
   25e1e:	d1af      	bne.n	25d80 <isr+0x2c>
				cr_state = true;
   25e20:	2201      	movs	r2, #1
   25e22:	4b1d      	ldr	r3, [pc, #116]	; (25e98 <isr+0x144>)
   25e24:	701a      	strb	r2, [r3, #0]
   25e26:	e7ab      	b.n	25d80 <isr+0x2c>
			if (term_mode == MODE_LF) {
   25e28:	4b19      	ldr	r3, [pc, #100]	; (25e90 <isr+0x13c>)
   25e2a:	781b      	ldrb	r3, [r3, #0]
   25e2c:	2b02      	cmp	r3, #2
   25e2e:	d0d1      	beq.n	25dd4 <isr+0x80>
			if (term_mode == MODE_CR_LF && cr_state) {
   25e30:	2b03      	cmp	r3, #3
   25e32:	d1a5      	bne.n	25d80 <isr+0x2c>
   25e34:	4b18      	ldr	r3, [pc, #96]	; (25e98 <isr+0x144>)
   25e36:	781b      	ldrb	r3, [r3, #0]
   25e38:	2b00      	cmp	r3, #0
   25e3a:	d1cb      	bne.n	25dd4 <isr+0x80>
   25e3c:	e7a0      	b.n	25d80 <isr+0x2c>
		cr_state = false;
   25e3e:	4816      	ldr	r0, [pc, #88]	; (25e98 <isr+0x144>)
   25e40:	7003      	strb	r3, [r0, #0]
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   25e42:	f8d4 c000 	ldr.w	ip, [r4]
   25e46:	f10c 0001 	add.w	r0, ip, #1
   25e4a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   25e4e:	d30b      	bcc.n	25e68 <isr+0x114>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   25e50:	2301      	movs	r3, #1
   25e52:	f363 0902 	bfi	r9, r3, #0, #3
   25e56:	f36f 09c5 	bfc	r9, #3, #3
   25e5a:	f366 198f 	bfi	r9, r6, #6, #10
   25e5e:	4912      	ldr	r1, [pc, #72]	; (25ea8 <isr+0x154>)
   25e60:	4648      	mov	r0, r9
   25e62:	f020 fc1e 	bl	466a2 <log_string_sync>
   25e66:	e78b      	b.n	25d80 <isr+0x2c>
	at_buf[at_cmd_len] = character;
   25e68:	f8df e028 	ldr.w	lr, [pc, #40]	; 25e94 <isr+0x140>
	if (character == '"') {
   25e6c:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   25e6e:	f80e 200c 	strb.w	r2, [lr, ip]
	at_cmd_len++;
   25e72:	6020      	str	r0, [r4, #0]
	if (character == '"') {
   25e74:	d184      	bne.n	25d80 <isr+0x2c>
	if (!inside_quotes) {
   25e76:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   25e7a:	700b      	strb	r3, [r1, #0]
   25e7c:	e780      	b.n	25d80 <isr+0x2c>
   25e7e:	bf00      	nop
   25e80:	00049020 	.word	0x00049020
   25e84:	00049018 	.word	0x00049018
   25e88:	20023b94 	.word	0x20023b94
   25e8c:	2002b890 	.word	0x2002b890
   25e90:	2002b891 	.word	0x2002b891
   25e94:	2002a88f 	.word	0x2002a88f
   25e98:	2002b88f 	.word	0x2002b88f
   25e9c:	20023c68 	.word	0x20023c68
   25ea0:	20023c5c 	.word	0x20023c5c
   25ea4:	20023b98 	.word	0x20023b98
   25ea8:	0004d57c 	.word	0x0004d57c
   25eac:	20023c64 	.word	0x20023c64

00025eb0 <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(struct device *arg)
{
   25eb0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   25eb4:	f04f 0801 	mov.w	r8, #1
   25eb8:	4b45      	ldr	r3, [pc, #276]	; (25fd0 <at_host_init+0x120>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   25eba:	4946      	ldr	r1, [pc, #280]	; (25fd4 <at_host_init+0x124>)
   25ebc:	2000      	movs	r0, #0
		term_mode = mode;
   25ebe:	f883 8000 	strb.w	r8, [r3]
	err = at_notif_register_handler(NULL, response_handler);
   25ec2:	f7ff fe73 	bl	25bac <at_notif_register_handler>
   25ec6:	4c44      	ldr	r4, [pc, #272]	; (25fd8 <at_host_init+0x128>)
   25ec8:	4b44      	ldr	r3, [pc, #272]	; (25fdc <at_host_init+0x12c>)
	if (err != 0) {
   25eca:	4606      	mov	r6, r0
   25ecc:	1ae4      	subs	r4, r4, r3
   25ece:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   25ed2:	b178      	cbz	r0, 25ef4 <at_host_init+0x44>
		LOG_ERR("Can't register handler err=%d", err);
   25ed4:	f04f 0000 	mov.w	r0, #0
   25ed8:	f368 0002 	bfi	r0, r8, #0, #3
   25edc:	f36f 00c5 	bfc	r0, #3, #3
   25ee0:	f364 108f 	bfi	r0, r4, #6, #10
   25ee4:	4632      	mov	r2, r6
   25ee6:	493e      	ldr	r1, [pc, #248]	; (25fe0 <at_host_init+0x130>)
   25ee8:	f020 fbdb 	bl	466a2 <log_string_sync>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   25eec:	4630      	mov	r0, r6
   25eee:	b002      	add	sp, #8
   25ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25ef4:	483b      	ldr	r0, [pc, #236]	; (25fe4 <at_host_init+0x134>)
   25ef6:	f015 fd81 	bl	3b9fc <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   25efa:	4d3b      	ldr	r5, [pc, #236]	; (25fe8 <at_host_init+0x138>)
   25efc:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   25efe:	b9e8      	cbnz	r0, 25f3c <at_host_init+0x8c>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   25f00:	f04f 0300 	mov.w	r3, #0
   25f04:	f368 0302 	bfi	r3, r8, #0, #3
   25f08:	f360 03c5 	bfi	r3, r0, #3, #3
   25f0c:	f364 138f 	bfi	r3, r4, #6, #10
   25f10:	4a34      	ldr	r2, [pc, #208]	; (25fe4 <at_host_init+0x134>)
   25f12:	4936      	ldr	r1, [pc, #216]	; (25fec <at_host_init+0x13c>)
   25f14:	4618      	mov	r0, r3
   25f16:	f020 fbc4 	bl	466a2 <log_string_sync>
		return -EINVAL;
   25f1a:	f06f 0215 	mvn.w	r2, #21
		LOG_ERR("UART could not be initialized: %d", err);
   25f1e:	2301      	movs	r3, #1
   25f20:	f04f 0000 	mov.w	r0, #0
   25f24:	f363 0002 	bfi	r0, r3, #0, #3
   25f28:	f36f 00c5 	bfc	r0, #3, #3
   25f2c:	f364 108f 	bfi	r0, r4, #6, #10
   25f30:	492f      	ldr	r1, [pc, #188]	; (25ff0 <at_host_init+0x140>)
   25f32:	f020 fbb6 	bl	466a2 <log_string_sync>
		return -EFAULT;
   25f36:	f06f 060d 	mvn.w	r6, #13
   25f3a:	e7d7      	b.n	25eec <at_host_init+0x3c>
	return z_impl_k_uptime_get();
   25f3c:	f022 fe56 	bl	48bec <z_impl_k_uptime_get>
   25f40:	4680      	mov	r8, r0
			LOG_ERR("UART check failed: %d. "
   25f42:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 26008 <at_host_init+0x158>
		err = uart_err_check(uart_dev);
   25f46:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   25f48:	6843      	ldr	r3, [r0, #4]
   25f4a:	689b      	ldr	r3, [r3, #8]
   25f4c:	b333      	cbz	r3, 25f9c <at_host_init+0xec>
		return api->err_check(dev);
   25f4e:	4798      	blx	r3
		if (err) {
   25f50:	4682      	mov	sl, r0
   25f52:	b318      	cbz	r0, 25f9c <at_host_init+0xec>
   25f54:	f022 fe4a 	bl	48bec <z_impl_k_uptime_get>
			if (k_uptime_get_32() - start_time >
   25f58:	eba0 0008 	sub.w	r0, r0, r8
   25f5c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   25f60:	d819      	bhi.n	25f96 <at_host_init+0xe6>
			LOG_ERR("UART check failed: %d. "
   25f62:	2301      	movs	r3, #1
   25f64:	f363 0702 	bfi	r7, r3, #0, #3
   25f68:	f36f 07c5 	bfc	r7, #3, #3
   25f6c:	f364 178f 	bfi	r7, r4, #6, #10
   25f70:	4652      	mov	r2, sl
   25f72:	4649      	mov	r1, r9
   25f74:	4638      	mov	r0, r7
   25f76:	f020 fb94 	bl	466a2 <log_string_sync>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   25f7a:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   25f7c:	6843      	ldr	r3, [r0, #4]
   25f7e:	699b      	ldr	r3, [r3, #24]
   25f80:	b12b      	cbz	r3, 25f8e <at_host_init+0xde>
		return api->fifo_read(dev, rx_data, size);
   25f82:	2201      	movs	r2, #1
   25f84:	f10d 0107 	add.w	r1, sp, #7
   25f88:	4798      	blx	r3
   25f8a:	2800      	cmp	r0, #0
   25f8c:	d1f5      	bne.n	25f7a <at_host_init+0xca>
	return z_impl_k_sleep(ms);
   25f8e:	200a      	movs	r0, #10
   25f90:	f022 fd9b 	bl	48aca <z_impl_k_sleep>
   25f94:	e7d7      	b.n	25f46 <at_host_init+0x96>
   25f96:	f06f 0204 	mvn.w	r2, #4
   25f9a:	e7c0      	b.n	25f1e <at_host_init+0x6e>
	uart_irq_callback_set(uart_dev, isr);
   25f9c:	682a      	ldr	r2, [r5, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
   25f9e:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   25fa0:	b123      	cbz	r3, 25fac <at_host_init+0xfc>
   25fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   25fa4:	b113      	cbz	r3, 25fac <at_host_init+0xfc>
		api->irq_callback_set(dev, cb, user_data);
   25fa6:	4913      	ldr	r1, [pc, #76]	; (25ff4 <at_host_init+0x144>)
   25fa8:	4610      	mov	r0, r2
   25faa:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   25fac:	2200      	movs	r2, #0
   25fae:	4b12      	ldr	r3, [pc, #72]	; (25ff8 <at_host_init+0x148>)
   25fb0:	4912      	ldr	r1, [pc, #72]	; (25ffc <at_host_init+0x14c>)
   25fb2:	601a      	str	r2, [r3, #0]
   25fb4:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   25fb8:	4811      	ldr	r0, [pc, #68]	; (26000 <at_host_init+0x150>)
   25fba:	230a      	movs	r3, #10
   25fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
   25fc0:	4910      	ldr	r1, [pc, #64]	; (26004 <at_host_init+0x154>)
   25fc2:	f018 f917 	bl	3e1f4 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   25fc6:	6828      	ldr	r0, [r5, #0]
   25fc8:	f022 f99d 	bl	48306 <z_impl_uart_irq_rx_enable>
   25fcc:	e78e      	b.n	25eec <at_host_init+0x3c>
   25fce:	bf00      	nop
   25fd0:	2002b891 	.word	0x2002b891
   25fd4:	00048311 	.word	0x00048311
   25fd8:	00049020 	.word	0x00049020
   25fdc:	00049018 	.word	0x00049018
   25fe0:	0004d4a2 	.word	0x0004d4a2
   25fe4:	0004c2ae 	.word	0x0004c2ae
   25fe8:	20023c68 	.word	0x20023c68
   25fec:	0004d4c0 	.word	0x0004d4c0
   25ff0:	0004d505 	.word	0x0004d505
   25ff4:	00025d55 	.word	0x00025d55
   25ff8:	20023c5c 	.word	0x20023c5c
   25ffc:	00025cad 	.word	0x00025cad
   26000:	20023b98 	.word	0x20023b98
   26004:	2002c4f0 	.word	0x2002c4f0
   26008:	0004d4d0 	.word	0x0004d4d0

0002600c <at_parse_process_element>:
}

static int at_parse_process_element(const char **str,
				    int index,
				    struct at_param_list *const list)
{
   2600c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const char *tmpstr = *str;
   26010:	6804      	ldr	r4, [r0, #0]
{
   26012:	b0a2      	sub	sp, #136	; 0x88
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26014:	7823      	ldrb	r3, [r4, #0]
   26016:	4680      	mov	r8, r0
   26018:	460f      	mov	r7, r1
   2601a:	4616      	mov	r6, r2
   2601c:	2b00      	cmp	r3, #0
   2601e:	f000 80ab 	beq.w	26178 <at_parse_process_element+0x16c>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   26022:	4b57      	ldr	r3, [pc, #348]	; (26180 <at_parse_process_element+0x174>)
   26024:	781d      	ldrb	r5, [r3, #0]
   26026:	2d05      	cmp	r5, #5
   26028:	d123      	bne.n	26072 <at_parse_process_element+0x66>
		const char *start_ptr = tmpstr++;
   2602a:	f104 0901 	add.w	r9, r4, #1

		while (is_valid_notification_char(*tmpstr)) {
   2602e:	46ca      	mov	sl, r9
   26030:	f81a 5b01 	ldrb.w	r5, [sl], #1
	chr = toupper(chr);
   26034:	f019 fb22 	bl	3f67c <__locale_ctype_ptr>
   26038:	462b      	mov	r3, r5
   2603a:	4428      	add	r0, r5
   2603c:	7842      	ldrb	r2, [r0, #1]
   2603e:	f002 0203 	and.w	r2, r2, #3
   26042:	2a02      	cmp	r2, #2
   26044:	bf08      	it	eq
   26046:	f1a5 0320 	subeq.w	r3, r5, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   2604a:	3b41      	subs	r3, #65	; 0x41
   2604c:	b2db      	uxtb	r3, r3
   2604e:	2b19      	cmp	r3, #25
   26050:	d90d      	bls.n	2606e <at_parse_process_element+0x62>
			tmpstr++;
		}

		at_params_string_put(list,
   26052:	eba9 0304 	sub.w	r3, r9, r4
   26056:	4622      	mov	r2, r4
   26058:	4639      	mov	r1, r7
   2605a:	4630      	mov	r0, r6
   2605c:	f022 f9ba 	bl	483d4 <at_params_string_put>
   26060:	464c      	mov	r4, r9
				     index,
				     start_ptr, tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   26062:	2000      	movs	r0, #0
	*str = tmpstr;
   26064:	f8c8 4000 	str.w	r4, [r8]
}
   26068:	b022      	add	sp, #136	; 0x88
   2606a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2606e:	46d1      	mov	r9, sl
   26070:	e7dd      	b.n	2602e <at_parse_process_element+0x22>
	} else if (state == OPTIONAL) {
   26072:	2d06      	cmp	r5, #6
   26074:	d103      	bne.n	2607e <at_parse_process_element+0x72>
		at_params_empty_put(list, index);
   26076:	4610      	mov	r0, r2
   26078:	f022 f983 	bl	48382 <at_params_empty_put>
   2607c:	e7f1      	b.n	26062 <at_parse_process_element+0x56>
	} else if (state == STRING) {
   2607e:	2d02      	cmp	r5, #2
   26080:	d117      	bne.n	260b2 <at_parse_process_element+0xa6>
   26082:	4623      	mov	r3, r4
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26084:	f242 4101 	movw	r1, #9217	; 0x2401
		while (!is_dblquote(*tmpstr) &&
   26088:	461d      	mov	r5, r3
   2608a:	f815 2b01 	ldrb.w	r2, [r5], #1
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   2608e:	2a22      	cmp	r2, #34	; 0x22
   26090:	d005      	beq.n	2609e <at_parse_process_element+0x92>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26092:	2a0d      	cmp	r2, #13
   26094:	d80b      	bhi.n	260ae <at_parse_process_element+0xa2>
   26096:	fa21 f202 	lsr.w	r2, r1, r2
   2609a:	07d2      	lsls	r2, r2, #31
   2609c:	d507      	bpl.n	260ae <at_parse_process_element+0xa2>
		at_params_string_put(list,
   2609e:	1b1b      	subs	r3, r3, r4
		at_params_string_put(list,
   260a0:	4622      	mov	r2, r4
   260a2:	4639      	mov	r1, r7
   260a4:	4630      	mov	r0, r6
   260a6:	f022 f995 	bl	483d4 <at_params_string_put>
   260aa:	462c      	mov	r4, r5
   260ac:	e7d9      	b.n	26062 <at_parse_process_element+0x56>
	if ((chr >= 'A') && (chr <= 'Z')) {
   260ae:	462b      	mov	r3, r5
   260b0:	e7ea      	b.n	26088 <at_parse_process_element+0x7c>
	} else if (state == ARRAY) {
   260b2:	2d01      	cmp	r5, #1
   260b4:	d139      	bne.n	2612a <at_parse_process_element+0x11e>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   260b6:	4620      	mov	r0, r4
   260b8:	220a      	movs	r2, #10
   260ba:	a901      	add	r1, sp, #4
   260bc:	f01a fef6 	bl	40eac <strtoul>
		tmpstr = next;
   260c0:	9c01      	ldr	r4, [sp, #4]
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   260c2:	9002      	str	r0, [sp, #8]
		while (!is_array_stop(*tmpstr) &&
   260c4:	46a1      	mov	r9, r4
   260c6:	f819 3b01 	ldrb.w	r3, [r9], #1
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   260ca:	2b29      	cmp	r3, #41	; 0x29
   260cc:	d02b      	beq.n	26126 <at_parse_process_element+0x11a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   260ce:	b353      	cbz	r3, 26126 <at_parse_process_element+0x11a>
	if ((chr == AT_PARAM_SEPARATOR) ||
   260d0:	2b2c      	cmp	r3, #44	; 0x2c
   260d2:	d003      	beq.n	260dc <at_parse_process_element+0xd0>
   260d4:	2b3a      	cmp	r3, #58	; 0x3a
   260d6:	d001      	beq.n	260dc <at_parse_process_element+0xd0>
				tmpstr++;
   260d8:	464c      	mov	r4, r9
   260da:	e7f3      	b.n	260c4 <at_parse_process_element+0xb8>
				      (u32_t)strtoul(++tmpstr, &next, 10);
   260dc:	220a      	movs	r2, #10
   260de:	a901      	add	r1, sp, #4
   260e0:	4648      	mov	r0, r9
   260e2:	f01a fee3 	bl	40eac <strtoul>
				tmparray[i++] =
   260e6:	ab22      	add	r3, sp, #136	; 0x88
   260e8:	f105 0a01 	add.w	sl, r5, #1
   260ec:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   260f0:	f845 0c80 	str.w	r0, [r5, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   260f4:	4648      	mov	r0, r9
   260f6:	f01a fa45 	bl	40584 <strlen>
   260fa:	4604      	mov	r4, r0
   260fc:	9801      	ldr	r0, [sp, #4]
   260fe:	f01a fa41 	bl	40584 <strlen>
   26102:	4284      	cmp	r4, r0
   26104:	d005      	beq.n	26112 <at_parse_process_element+0x106>
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   26106:	f1ba 0f20 	cmp.w	sl, #32
					tmpstr = next;
   2610a:	9c01      	ldr	r4, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   2610c:	d002      	beq.n	26114 <at_parse_process_element+0x108>
   2610e:	4655      	mov	r5, sl
   26110:	e7d8      	b.n	260c4 <at_parse_process_element+0xb8>
				tmparray[i++] =
   26112:	464c      	mov	r4, r9
		at_params_array_put(list, index,
   26114:	ea4f 038a 	mov.w	r3, sl, lsl #2
   26118:	aa02      	add	r2, sp, #8
   2611a:	4639      	mov	r1, r7
   2611c:	4630      	mov	r0, r6
   2611e:	f022 f97f 	bl	48420 <at_params_array_put>
		tmpstr++;
   26122:	3401      	adds	r4, #1
   26124:	e79d      	b.n	26062 <at_parse_process_element+0x56>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26126:	46aa      	mov	sl, r5
   26128:	e7f4      	b.n	26114 <at_parse_process_element+0x108>
	} else if (state == NUMBER) {
   2612a:	2d03      	cmp	r5, #3
   2612c:	d114      	bne.n	26158 <at_parse_process_element+0x14c>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   2612e:	220a      	movs	r2, #10
   26130:	4620      	mov	r0, r4
   26132:	a902      	add	r1, sp, #8
   26134:	f01a feba 	bl	40eac <strtoul>
		if (value <= USHRT_MAX) {
   26138:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   2613c:	4602      	mov	r2, r0
		tmpstr = next;
   2613e:	9c02      	ldr	r4, [sp, #8]
		if (value <= USHRT_MAX) {
   26140:	da05      	bge.n	2614e <at_parse_process_element+0x142>
			at_params_short_put(list, index, (u16_t)value);
   26142:	b282      	uxth	r2, r0
   26144:	4639      	mov	r1, r7
   26146:	4630      	mov	r0, r6
   26148:	f022 f906 	bl	48358 <at_params_short_put>
   2614c:	e789      	b.n	26062 <at_parse_process_element+0x56>
			at_params_int_put(list, index, value);
   2614e:	4639      	mov	r1, r7
   26150:	4630      	mov	r0, r6
   26152:	f022 f92a 	bl	483aa <at_params_int_put>
   26156:	e784      	b.n	26062 <at_parse_process_element+0x56>
	} else if (state == SMS_PDU) {
   26158:	2d04      	cmp	r5, #4
   2615a:	d182      	bne.n	26062 <at_parse_process_element+0x56>
   2615c:	4625      	mov	r5, r4
		while (isxdigit(*tmpstr)) {
   2615e:	f019 fa8d 	bl	3f67c <__locale_ctype_ptr>
   26162:	782b      	ldrb	r3, [r5, #0]
   26164:	1c6a      	adds	r2, r5, #1
   26166:	4418      	add	r0, r3
   26168:	7843      	ldrb	r3, [r0, #1]
   2616a:	f013 0f44 	tst.w	r3, #68	; 0x44
   2616e:	d101      	bne.n	26174 <at_parse_process_element+0x168>
		at_params_string_put(list,
   26170:	1b2b      	subs	r3, r5, r4
   26172:	e795      	b.n	260a0 <at_parse_process_element+0x94>
   26174:	4615      	mov	r5, r2
   26176:	e7f2      	b.n	2615e <at_parse_process_element+0x152>
		return -1;
   26178:	f04f 30ff 	mov.w	r0, #4294967295
   2617c:	e774      	b.n	26068 <at_parse_process_element+0x5c>
   2617e:	bf00      	nop
   26180:	2002b892 	.word	0x2002b892

00026184 <at_parse_detect_type>:
{
   26184:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   26186:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) &&
   26188:	2900      	cmp	r1, #0
{
   2618a:	4606      	mov	r6, r0
   2618c:	7825      	ldrb	r5, [r4, #0]
	if ((index == 0) &&
   2618e:	d109      	bne.n	261a4 <at_parse_detect_type+0x20>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26190:	2d2b      	cmp	r5, #43	; 0x2b
   26192:	4b26      	ldr	r3, [pc, #152]	; (2622c <at_parse_detect_type+0xa8>)
   26194:	d001      	beq.n	2619a <at_parse_detect_type+0x16>
   26196:	2d25      	cmp	r5, #37	; 0x25
   26198:	d102      	bne.n	261a0 <at_parse_detect_type+0x1c>
	state = new_state;
   2619a:	2205      	movs	r2, #5
   2619c:	701a      	strb	r2, [r3, #0]
   2619e:	e017      	b.n	261d0 <at_parse_detect_type+0x4c>
   261a0:	2202      	movs	r2, #2
   261a2:	e7fb      	b.n	2619c <at_parse_detect_type+0x18>
	} else if ((index > 0) &&
   261a4:	dd03      	ble.n	261ae <at_parse_detect_type+0x2a>
   261a6:	2d2b      	cmp	r5, #43	; 0x2b
   261a8:	d03d      	beq.n	26226 <at_parse_detect_type+0xa2>
   261aa:	2d25      	cmp	r5, #37	; 0x25
   261ac:	d03b      	beq.n	26226 <at_parse_detect_type+0xa2>
 * @retval true  If character is number character
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit(chr) ||
   261ae:	f019 fa65 	bl	3f67c <__locale_ctype_ptr>
   261b2:	4428      	add	r0, r5
   261b4:	7843      	ldrb	r3, [r0, #1]
   261b6:	075b      	lsls	r3, r3, #29
   261b8:	d40d      	bmi.n	261d6 <at_parse_detect_type+0x52>
   261ba:	2d2d      	cmp	r5, #45	; 0x2d
   261bc:	d00b      	beq.n	261d6 <at_parse_detect_type+0x52>
	    (chr == '-') ||
   261be:	2d2b      	cmp	r5, #43	; 0x2b
   261c0:	d009      	beq.n	261d6 <at_parse_detect_type+0x52>
	} else if (is_dblquote(*tmpstr)) {
   261c2:	7823      	ldrb	r3, [r4, #0]
	if (chr == '"') {
   261c4:	2b22      	cmp	r3, #34	; 0x22
   261c6:	d109      	bne.n	261dc <at_parse_detect_type+0x58>
	state = new_state;
   261c8:	2202      	movs	r2, #2
   261ca:	4b18      	ldr	r3, [pc, #96]	; (2622c <at_parse_detect_type+0xa8>)
		tmpstr++;
   261cc:	3401      	adds	r4, #1
	state = new_state;
   261ce:	701a      	strb	r2, [r3, #0]
	return 0;
   261d0:	2000      	movs	r0, #0
	*str = tmpstr;
   261d2:	6034      	str	r4, [r6, #0]
}
   261d4:	bd70      	pop	{r4, r5, r6, pc}
	state = new_state;
   261d6:	4b15      	ldr	r3, [pc, #84]	; (2622c <at_parse_detect_type+0xa8>)
   261d8:	2203      	movs	r2, #3
   261da:	e7df      	b.n	2619c <at_parse_detect_type+0x18>
	if (chr == '(') {
   261dc:	2b28      	cmp	r3, #40	; 0x28
   261de:	d013      	beq.n	26208 <at_parse_detect_type+0x84>
	if ((chr == '\r') ||
   261e0:	2b0d      	cmp	r3, #13
   261e2:	d001      	beq.n	261e8 <at_parse_detect_type+0x64>
   261e4:	2b0a      	cmp	r3, #10
   261e6:	d119      	bne.n	2621c <at_parse_detect_type+0x98>
		  (state == NUMBER)) {
   261e8:	4a10      	ldr	r2, [pc, #64]	; (2622c <at_parse_detect_type+0xa8>)
   261ea:	7811      	ldrb	r1, [r2, #0]
	} else if (is_lfcr(*tmpstr) &&
   261ec:	2903      	cmp	r1, #3
   261ee:	d113      	bne.n	26218 <at_parse_detect_type+0x94>
   261f0:	4621      	mov	r1, r4
		while (is_lfcr(*tmpstr)) {
   261f2:	780b      	ldrb	r3, [r1, #0]
   261f4:	460c      	mov	r4, r1
   261f6:	2b0d      	cmp	r3, #13
   261f8:	f101 0101 	add.w	r1, r1, #1
   261fc:	d0f9      	beq.n	261f2 <at_parse_detect_type+0x6e>
   261fe:	2b0a      	cmp	r3, #10
   26200:	d0f7      	beq.n	261f2 <at_parse_detect_type+0x6e>
	state = new_state;
   26202:	2304      	movs	r3, #4
   26204:	7013      	strb	r3, [r2, #0]
   26206:	e7e3      	b.n	261d0 <at_parse_detect_type+0x4c>
   26208:	2201      	movs	r2, #1
   2620a:	4b08      	ldr	r3, [pc, #32]	; (2622c <at_parse_detect_type+0xa8>)
		tmpstr++;
   2620c:	4414      	add	r4, r2
	state = new_state;
   2620e:	701a      	strb	r2, [r3, #0]
   26210:	e7de      	b.n	261d0 <at_parse_detect_type+0x4c>
   26212:	4b06      	ldr	r3, [pc, #24]	; (2622c <at_parse_detect_type+0xa8>)
   26214:	2206      	movs	r2, #6
   26216:	e7c1      	b.n	2619c <at_parse_detect_type+0x18>
	} else if (is_lfcr(*tmpstr) &&
   26218:	2906      	cmp	r1, #6
   2621a:	d0d9      	beq.n	261d0 <at_parse_detect_type+0x4c>
	if ((chr == AT_PARAM_SEPARATOR) ||
   2621c:	2b2c      	cmp	r3, #44	; 0x2c
   2621e:	d0f8      	beq.n	26212 <at_parse_detect_type+0x8e>
   26220:	2b3a      	cmp	r3, #58	; 0x3a
   26222:	d0f6      	beq.n	26212 <at_parse_detect_type+0x8e>
		*str = tmpstr;
   26224:	6034      	str	r4, [r6, #0]
		return -1;
   26226:	f04f 30ff 	mov.w	r0, #4294967295
   2622a:	e7d3      	b.n	261d4 <at_parse_detect_type+0x50>
   2622c:	2002b892 	.word	0x2002b892

00026230 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list * const list,
				  size_t max_params_count)
{
   26230:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   26234:	4689      	mov	r9, r1
   26236:	4616      	mov	r6, r2
   26238:	4698      	mov	r8, r3
	int err = 0;

	if (at_params_str == NULL ||
   2623a:	4604      	mov	r4, r0
   2623c:	2800      	cmp	r0, #0
   2623e:	d07c      	beq.n	2633a <at_parser_max_params_from_str+0x10a>
   26240:	2a00      	cmp	r2, #0
   26242:	d07a      	beq.n	2633a <at_parser_max_params_from_str+0x10a>
	    list == NULL || list->params == NULL) {
   26244:	6853      	ldr	r3, [r2, #4]
   26246:	2b00      	cmp	r3, #0
   26248:	d077      	beq.n	2633a <at_parser_max_params_from_str+0x10a>
	state      = IDLE;
   2624a:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   2624c:	4610      	mov	r0, r2
   2624e:	f000 f8e5 	bl	2641c <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   26252:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   26254:	af02      	add	r7, sp, #8
	max_params_count = MIN(max_params_count, list->param_count);
   26256:	4590      	cmp	r8, r2
	const char *str = *at_params_str;
   26258:	f847 4d04 	str.w	r4, [r7, #-4]!
	max_params_count = MIN(max_params_count, list->param_count);
   2625c:	bf28      	it	cs
   2625e:	4690      	movcs	r8, r2
	int index = 0;
   26260:	462c      	mov	r4, r5
	state      = IDLE;
   26262:	4b37      	ldr	r3, [pc, #220]	; (26340 <at_parser_max_params_from_str+0x110>)
   26264:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) &&
   26266:	9b01      	ldr	r3, [sp, #4]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26268:	781b      	ldrb	r3, [r3, #0]
   2626a:	2b00      	cmp	r3, #0
   2626c:	d049      	beq.n	26302 <at_parser_max_params_from_str+0xd2>
   2626e:	45a0      	cmp	r8, r4
   26270:	d947      	bls.n	26302 <at_parser_max_params_from_str+0xd2>
		if (isspace(*str)) {
   26272:	f019 fa03 	bl	3f67c <__locale_ctype_ptr>
   26276:	9b01      	ldr	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   26278:	4621      	mov	r1, r4
		if (isspace(*str)) {
   2627a:	781a      	ldrb	r2, [r3, #0]
   2627c:	4410      	add	r0, r2
   2627e:	7842      	ldrb	r2, [r0, #1]
		if (at_parse_detect_type(&str, index) == -1) {
   26280:	4638      	mov	r0, r7
		if (isspace(*str)) {
   26282:	0712      	lsls	r2, r2, #28
			str++;
   26284:	bf44      	itt	mi
   26286:	3301      	addmi	r3, #1
   26288:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   2628a:	f7ff ff7b 	bl	26184 <at_parse_detect_type>
   2628e:	1c43      	adds	r3, r0, #1
   26290:	d037      	beq.n	26302 <at_parser_max_params_from_str+0xd2>
		if (at_parse_process_element(&str, index, list) == -1) {
   26292:	4621      	mov	r1, r4
   26294:	4632      	mov	r2, r6
   26296:	4638      	mov	r0, r7
   26298:	f7ff feb8 	bl	2600c <at_parse_process_element>
   2629c:	1c41      	adds	r1, r0, #1
   2629e:	d030      	beq.n	26302 <at_parser_max_params_from_str+0xd2>
		if (is_separator(*str)) {
   262a0:	9b01      	ldr	r3, [sp, #4]
   262a2:	781a      	ldrb	r2, [r3, #0]
	if ((chr == AT_PARAM_SEPARATOR) ||
   262a4:	2a2c      	cmp	r2, #44	; 0x2c
   262a6:	d001      	beq.n	262ac <at_parser_max_params_from_str+0x7c>
   262a8:	2a3a      	cmp	r2, #58	; 0x3a
   262aa:	d117      	bne.n	262dc <at_parser_max_params_from_str+0xac>
			if (is_lfcr(*(str+1))) {
   262ac:	785b      	ldrb	r3, [r3, #1]
	if ((chr == '\r') ||
   262ae:	2b0d      	cmp	r3, #13
   262b0:	d001      	beq.n	262b6 <at_parser_max_params_from_str+0x86>
   262b2:	2b0a      	cmp	r3, #10
   262b4:	d10f      	bne.n	262d6 <at_parser_max_params_from_str+0xa6>
				index++;
   262b6:	3401      	adds	r4, #1
				if (index == max_params) {
   262b8:	45a0      	cmp	r8, r4
   262ba:	d039      	beq.n	26330 <at_parser_max_params_from_str+0x100>
				if (at_parse_detect_type(&str, index) == -1) {
   262bc:	4621      	mov	r1, r4
   262be:	4638      	mov	r0, r7
   262c0:	f7ff ff60 	bl	26184 <at_parse_detect_type>
   262c4:	1c42      	adds	r2, r0, #1
   262c6:	d01c      	beq.n	26302 <at_parser_max_params_from_str+0xd2>
				if (at_parse_process_element(&str,
   262c8:	4632      	mov	r2, r6
   262ca:	4621      	mov	r1, r4
   262cc:	4638      	mov	r0, r7
   262ce:	f7ff fe9d 	bl	2600c <at_parse_process_element>
   262d2:	1c43      	adds	r3, r0, #1
   262d4:	d015      	beq.n	26302 <at_parser_max_params_from_str+0xd2>
			str++;
   262d6:	9b01      	ldr	r3, [sp, #4]
   262d8:	3301      	adds	r3, #1
   262da:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   262dc:	9a01      	ldr	r2, [sp, #4]
   262de:	7813      	ldrb	r3, [r2, #0]
   262e0:	2b0d      	cmp	r3, #13
   262e2:	d11e      	bne.n	26322 <at_parser_max_params_from_str+0xf2>
   262e4:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   262e6:	7813      	ldrb	r3, [r2, #0]
   262e8:	4611      	mov	r1, r2
   262ea:	2b0d      	cmp	r3, #13
   262ec:	f102 0201 	add.w	r2, r2, #1
   262f0:	d0f9      	beq.n	262e6 <at_parser_max_params_from_str+0xb6>
   262f2:	2b0a      	cmp	r3, #10
   262f4:	d0f7      	beq.n	262e6 <at_parser_max_params_from_str+0xb6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   262f6:	b11b      	cbz	r3, 26300 <at_parser_max_params_from_str+0xd0>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   262f8:	2b2b      	cmp	r3, #43	; 0x2b
   262fa:	d001      	beq.n	26300 <at_parser_max_params_from_str+0xd0>
   262fc:	2b25      	cmp	r3, #37	; 0x25
   262fe:	d112      	bne.n	26326 <at_parser_max_params_from_str+0xf6>
				str += i;
   26300:	9101      	str	r1, [sp, #4]
	*at_params_str = str;
   26302:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   26304:	b9b5      	cbnz	r5, 26334 <at_parser_max_params_from_str+0x104>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26306:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   26308:	2a00      	cmp	r2, #0
   2630a:	bf0c      	ite	eq
   2630c:	2000      	moveq	r0, #0
   2630e:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   26312:	f1b9 0f00 	cmp.w	r9, #0
   26316:	d001      	beq.n	2631c <at_parser_max_params_from_str+0xec>
		*next_param_str = (char *)at_params_str;
   26318:	f8c9 3000 	str.w	r3, [r9]
	}

	return err;
}
   2631c:	b003      	add	sp, #12
   2631e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((chr == '\r') ||
   26322:	2b0a      	cmp	r3, #10
   26324:	d0de      	beq.n	262e4 <at_parser_max_params_from_str+0xb4>
		index++;
   26326:	3401      	adds	r4, #1
			oversized = true;
   26328:	45a0      	cmp	r8, r4
   2632a:	bf08      	it	eq
   2632c:	2501      	moveq	r5, #1
   2632e:	e79a      	b.n	26266 <at_parser_max_params_from_str+0x36>
					oversized = true;
   26330:	2501      	movs	r5, #1
   26332:	e7e6      	b.n	26302 <at_parser_max_params_from_str+0xd2>
		return -E2BIG;
   26334:	f06f 0006 	mvn.w	r0, #6
   26338:	e7eb      	b.n	26312 <at_parser_max_params_from_str+0xe2>
		return -EINVAL;
   2633a:	f06f 0015 	mvn.w	r0, #21
   2633e:	e7ed      	b.n	2631c <at_parser_max_params_from_str+0xec>
   26340:	2002b892 	.word	0x2002b892

00026344 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   26344:	b538      	push	{r3, r4, r5, lr}
   26346:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   26348:	4605      	mov	r5, r0
   2634a:	b960      	cbnz	r0, 26366 <at_params_get+0x22>
   2634c:	490a      	ldr	r1, [pc, #40]	; (26378 <at_params_get+0x34>)
   2634e:	232b      	movs	r3, #43	; 0x2b
   26350:	4a0a      	ldr	r2, [pc, #40]	; (2637c <at_params_get+0x38>)
   26352:	480b      	ldr	r0, [pc, #44]	; (26380 <at_params_get+0x3c>)
   26354:	f020 f982 	bl	4665c <printk>
   26358:	480a      	ldr	r0, [pc, #40]	; (26384 <at_params_get+0x40>)
   2635a:	f020 f97f 	bl	4665c <printk>
   2635e:	212b      	movs	r1, #43	; 0x2b
   26360:	4806      	ldr	r0, [pc, #24]	; (2637c <at_params_get+0x38>)
   26362:	f020 f988 	bl	46676 <assert_post_action>

	if (index >= list->param_count) {
   26366:	682b      	ldr	r3, [r5, #0]
   26368:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   2636a:	bf85      	ittet	hi
   2636c:	230c      	movhi	r3, #12
   2636e:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   26370:	2000      	movls	r0, #0
	return &param[index];
   26372:	fb03 0004 	mlahi	r0, r3, r4, r0
}
   26376:	bd38      	pop	{r3, r4, r5, pc}
   26378:	0004d604 	.word	0x0004d604
   2637c:	0004d5d5 	.word	0x0004d5d5
   26380:	0004b5bf 	.word	0x0004b5bf
   26384:	0004d618 	.word	0x0004d618

00026388 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   26388:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2638a:	4604      	mov	r4, r0
   2638c:	b960      	cbnz	r0, 263a8 <at_param_size+0x20>
   2638e:	490e      	ldr	r1, [pc, #56]	; (263c8 <at_param_size+0x40>)
   26390:	2339      	movs	r3, #57	; 0x39
   26392:	4a0e      	ldr	r2, [pc, #56]	; (263cc <at_param_size+0x44>)
   26394:	480e      	ldr	r0, [pc, #56]	; (263d0 <at_param_size+0x48>)
   26396:	f020 f961 	bl	4665c <printk>
   2639a:	480e      	ldr	r0, [pc, #56]	; (263d4 <at_param_size+0x4c>)
   2639c:	f020 f95e 	bl	4665c <printk>
   263a0:	2139      	movs	r1, #57	; 0x39
   263a2:	480a      	ldr	r0, [pc, #40]	; (263cc <at_param_size+0x44>)
   263a4:	f020 f967 	bl	46676 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   263a8:	7823      	ldrb	r3, [r4, #0]
   263aa:	2b01      	cmp	r3, #1
   263ac:	d006      	beq.n	263bc <at_param_size+0x34>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   263ae:	2b02      	cmp	r3, #2
   263b0:	d006      	beq.n	263c0 <at_param_size+0x38>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   263b2:	3b03      	subs	r3, #3
   263b4:	2b01      	cmp	r3, #1
   263b6:	d805      	bhi.n	263c4 <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   263b8:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   263ba:	bd10      	pop	{r4, pc}
		return sizeof(u16_t);
   263bc:	2002      	movs	r0, #2
   263be:	e7fc      	b.n	263ba <at_param_size+0x32>
		return sizeof(u32_t);
   263c0:	2004      	movs	r0, #4
   263c2:	e7fa      	b.n	263ba <at_param_size+0x32>
	return 0;
   263c4:	2000      	movs	r0, #0
   263c6:	e7f8      	b.n	263ba <at_param_size+0x32>
   263c8:	0004d5a4 	.word	0x0004d5a4
   263cc:	0004d5d5 	.word	0x0004d5d5
   263d0:	0004b5bf 	.word	0x0004b5bf
   263d4:	0004d5b9 	.word	0x0004d5b9

000263d8 <at_param_clear>:
{
   263d8:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   263da:	4604      	mov	r4, r0
   263dc:	b960      	cbnz	r0, 263f8 <at_param_clear+0x20>
   263de:	490b      	ldr	r1, [pc, #44]	; (2640c <at_param_clear+0x34>)
   263e0:	231d      	movs	r3, #29
   263e2:	4a0b      	ldr	r2, [pc, #44]	; (26410 <at_param_clear+0x38>)
   263e4:	480b      	ldr	r0, [pc, #44]	; (26414 <at_param_clear+0x3c>)
   263e6:	f020 f939 	bl	4665c <printk>
   263ea:	480b      	ldr	r0, [pc, #44]	; (26418 <at_param_clear+0x40>)
   263ec:	f020 f936 	bl	4665c <printk>
   263f0:	211d      	movs	r1, #29
   263f2:	4807      	ldr	r0, [pc, #28]	; (26410 <at_param_clear+0x38>)
   263f4:	f020 f93f 	bl	46676 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   263f8:	7823      	ldrb	r3, [r4, #0]
   263fa:	3b03      	subs	r3, #3
   263fc:	2b01      	cmp	r3, #1
   263fe:	d802      	bhi.n	26406 <at_param_clear+0x2e>
		k_free(param->value.str_val);
   26400:	68a0      	ldr	r0, [r4, #8]
   26402:	f022 fae0 	bl	489c6 <k_free>
	param->value.int_val = 0;
   26406:	2300      	movs	r3, #0
   26408:	60a3      	str	r3, [r4, #8]
}
   2640a:	bd10      	pop	{r4, pc}
   2640c:	0004d5a4 	.word	0x0004d5a4
   26410:	0004d5d5 	.word	0x0004d5d5
   26414:	0004b5bf 	.word	0x0004b5bf
   26418:	0004d5b9 	.word	0x0004d5b9

0002641c <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   2641c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   26420:	4605      	mov	r5, r0
   26422:	b158      	cbz	r0, 2643c <at_params_list_clear+0x20>
   26424:	6843      	ldr	r3, [r0, #4]
   26426:	b14b      	cbz	r3, 2643c <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   26428:	2400      	movs	r4, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2642a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 26480 <at_params_list_clear+0x64>
   2642e:	f8df a054 	ldr.w	sl, [pc, #84]	; 26484 <at_params_list_clear+0x68>
   26432:	f8df b054 	ldr.w	fp, [pc, #84]	; 26488 <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   26436:	682b      	ldr	r3, [r5, #0]
   26438:	429c      	cmp	r4, r3
   2643a:	d301      	bcc.n	26440 <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   2643c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   26440:	270c      	movs	r7, #12
   26442:	4367      	muls	r7, r4
   26444:	f8d5 9004 	ldr.w	r9, [r5, #4]
   26448:	eb09 0607 	add.w	r6, r9, r7
   2644c:	4630      	mov	r0, r6
   2644e:	f7ff ffc3 	bl	263d8 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   26452:	b966      	cbnz	r6, 2646e <at_params_list_clear+0x52>
   26454:	4651      	mov	r1, sl
   26456:	2314      	movs	r3, #20
   26458:	4642      	mov	r2, r8
   2645a:	4658      	mov	r0, fp
   2645c:	f020 f8fe 	bl	4665c <printk>
   26460:	4806      	ldr	r0, [pc, #24]	; (2647c <at_params_list_clear+0x60>)
   26462:	f020 f8fb 	bl	4665c <printk>
   26466:	2114      	movs	r1, #20
   26468:	4640      	mov	r0, r8
   2646a:	f020 f904 	bl	46676 <assert_post_action>
   2646e:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   26470:	3401      	adds	r4, #1
   26472:	f849 3007 	str.w	r3, [r9, r7]
   26476:	6073      	str	r3, [r6, #4]
   26478:	60b3      	str	r3, [r6, #8]
   2647a:	e7dc      	b.n	26436 <at_params_list_clear+0x1a>
   2647c:	0004d5b9 	.word	0x0004d5b9
   26480:	0004d5d5 	.word	0x0004d5d5
   26484:	0004d5a4 	.word	0x0004d5a4
   26488:	0004b5bf 	.word	0x0004b5bf

0002648c <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   2648c:	b538      	push	{r3, r4, r5, lr}
   2648e:	4605      	mov	r5, r0
			    const char *buf)
{
	int err;
	u32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   26490:	4a08      	ldr	r2, [pc, #32]	; (264b4 <modem_info_parse.isra.0+0x28>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   26492:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   26494:	782b      	ldrb	r3, [r5, #0]
   26496:	2100      	movs	r1, #0
   26498:	f7ff feca 	bl	26230 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err != 0) {
   2649c:	4604      	mov	r4, r0
   2649e:	b938      	cbnz	r0, 264b0 <modem_info_parse.isra.0+0x24>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   264a0:	4804      	ldr	r0, [pc, #16]	; (264b4 <modem_info_parse.isra.0+0x28>)
   264a2:	f022 f837 	bl	48514 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   264a6:	782b      	ldrb	r3, [r5, #0]
		return -EAGAIN;
   264a8:	4298      	cmp	r0, r3
   264aa:	bf88      	it	hi
   264ac:	f06f 040a 	mvnhi.w	r4, #10
	}

	return err;
}
   264b0:	4620      	mov	r0, r4
   264b2:	bd38      	pop	{r3, r4, r5, pc}
   264b4:	20023c6c 	.word	0x20023c6c

000264b8 <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(void *context, char *response)
{
   264b8:	b513      	push	{r0, r1, r4, lr}
   264ba:	460c      	mov	r4, r1
	ARG_UNUSED(context);

	u16_t param_value;
	int err;

	if (!is_cesq_notification(response, strlen(response))) {
   264bc:	4608      	mov	r0, r1
   264be:	f01a f861 	bl	40584 <strlen>
	return strstr(buf, AT_CMD_CESQ_RESP) ? true : false;
   264c2:	491d      	ldr	r1, [pc, #116]	; (26538 <modem_info_rsrp_subscribe_handler+0x80>)
   264c4:	4620      	mov	r0, r4
   264c6:	f01a fa6d 	bl	409a4 <strstr>
	if (!is_cesq_notification(response, strlen(response))) {
   264ca:	b1b0      	cbz	r0, 264fa <modem_info_rsrp_subscribe_handler+0x42>
		return;
	}

	err = modem_info_parse(modem_data[MODEM_INFO_RSRP],
   264cc:	4621      	mov	r1, r4
   264ce:	481b      	ldr	r0, [pc, #108]	; (2653c <modem_info_rsrp_subscribe_handler+0x84>)
   264d0:	f7ff ffdc 	bl	2648c <modem_info_parse.isra.0>
			       response);
	if (err != 0) {
   264d4:	4604      	mov	r4, r0
   264d6:	b190      	cbz	r0, 264fe <modem_info_rsrp_subscribe_handler+0x46>
		LOG_ERR("modem_info_parse failed to parse "
   264d8:	2301      	movs	r3, #1
   264da:	f04f 0000 	mov.w	r0, #0
   264de:	4a18      	ldr	r2, [pc, #96]	; (26540 <modem_info_rsrp_subscribe_handler+0x88>)
   264e0:	f363 0002 	bfi	r0, r3, #0, #3
   264e4:	4b17      	ldr	r3, [pc, #92]	; (26544 <modem_info_rsrp_subscribe_handler+0x8c>)
   264e6:	f36f 00c5 	bfc	r0, #3, #3
   264ea:	1a9b      	subs	r3, r3, r2
   264ec:	4622      	mov	r2, r4
   264ee:	08db      	lsrs	r3, r3, #3
   264f0:	4915      	ldr	r1, [pc, #84]	; (26548 <modem_info_rsrp_subscribe_handler+0x90>)
   264f2:	f363 108f 	bfi	r0, r3, #6, #10

	err = at_params_short_get(&m_param_list,
				  modem_data[MODEM_INFO_RSRP]->param_index,
				  &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   264f6:	f020 f8d4 	bl	466a2 <log_string_sync>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   264fa:	b002      	add	sp, #8
   264fc:	bd10      	pop	{r4, pc}
	err = at_params_short_get(&m_param_list,
   264fe:	f10d 0206 	add.w	r2, sp, #6
   26502:	2101      	movs	r1, #1
   26504:	4811      	ldr	r0, [pc, #68]	; (2654c <modem_info_rsrp_subscribe_handler+0x94>)
   26506:	f021 ffb1 	bl	4846c <at_params_short_get>
	if (err != 0) {
   2650a:	4602      	mov	r2, r0
   2650c:	b170      	cbz	r0, 2652c <modem_info_rsrp_subscribe_handler+0x74>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   2650e:	2301      	movs	r3, #1
   26510:	f04f 0000 	mov.w	r0, #0
   26514:	490a      	ldr	r1, [pc, #40]	; (26540 <modem_info_rsrp_subscribe_handler+0x88>)
   26516:	f363 0002 	bfi	r0, r3, #0, #3
   2651a:	4b0a      	ldr	r3, [pc, #40]	; (26544 <modem_info_rsrp_subscribe_handler+0x8c>)
   2651c:	f364 00c5 	bfi	r0, r4, #3, #3
   26520:	1a5b      	subs	r3, r3, r1
   26522:	08db      	lsrs	r3, r3, #3
   26524:	f363 108f 	bfi	r0, r3, #6, #10
   26528:	4909      	ldr	r1, [pc, #36]	; (26550 <modem_info_rsrp_subscribe_handler+0x98>)
   2652a:	e7e4      	b.n	264f6 <modem_info_rsrp_subscribe_handler+0x3e>
	modem_info_rsrp_cb(param_value);
   2652c:	4b09      	ldr	r3, [pc, #36]	; (26554 <modem_info_rsrp_subscribe_handler+0x9c>)
   2652e:	f89d 0006 	ldrb.w	r0, [sp, #6]
   26532:	681b      	ldr	r3, [r3, #0]
   26534:	4798      	blx	r3
   26536:	e7e0      	b.n	264fa <modem_info_rsrp_subscribe_handler+0x42>
   26538:	0004d660 	.word	0x0004d660
   2653c:	00049719 	.word	0x00049719
   26540:	00049018 	.word	0x00049018
   26544:	000490a0 	.word	0x000490a0
   26548:	0004d666 	.word	0x0004d666
   2654c:	20023c6c 	.word	0x20023c6c
   26550:	0004d69d 	.word	0x0004d69d
   26554:	20023c74 	.word	0x20023c74

00026558 <modem_info_type_get>:
	if (info_type >= MODEM_INFO_COUNT) {
   26558:	2814      	cmp	r0, #20
	return modem_data[info_type]->data_type;
   2655a:	bf9d      	ittte	ls
   2655c:	4b02      	ldrls	r3, [pc, #8]	; (26568 <modem_info_type_get+0x10>)
   2655e:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   26562:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   26564:	20ea      	movhi	r0, #234	; 0xea
}
   26566:	4770      	bx	lr
   26568:	000496a4 	.word	0x000496a4

0002656c <modem_info_name_get>:
{
   2656c:	b570      	push	{r4, r5, r6, lr}
	if (name == NULL) {
   2656e:	460d      	mov	r5, r1
   26570:	b919      	cbnz	r1, 2657a <modem_info_name_get+0xe>
		return -EINVAL;
   26572:	f06f 0415 	mvn.w	r4, #21
}
   26576:	4620      	mov	r0, r4
   26578:	bd70      	pop	{r4, r5, r6, pc}
	len = strlen(modem_data[info]->data_name);
   2657a:	4b07      	ldr	r3, [pc, #28]	; (26598 <modem_info_name_get+0x2c>)
   2657c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   26580:	6870      	ldr	r0, [r6, #4]
   26582:	f019 ffff 	bl	40584 <strlen>
	if (len <= 0) {
   26586:	1e04      	subs	r4, r0, #0
   26588:	ddf3      	ble.n	26572 <modem_info_name_get+0x6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2658a:	4622      	mov	r2, r4
   2658c:	6871      	ldr	r1, [r6, #4]
   2658e:	4628      	mov	r0, r5
   26590:	f7f3 fc8e 	bl	19eb0 <memcpy>
   26594:	e7ef      	b.n	26576 <modem_info_name_get+0xa>
   26596:	bf00      	nop
   26598:	000496a4 	.word	0x000496a4

0002659c <modem_info_short_get>:
{
   2659c:	b530      	push	{r4, r5, lr}
   2659e:	460d      	mov	r5, r1
   265a0:	b0a1      	sub	sp, #132	; 0x84
   265a2:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   265a4:	2280      	movs	r2, #128	; 0x80
   265a6:	2100      	movs	r1, #0
   265a8:	4668      	mov	r0, sp
   265aa:	f019 fbcf 	bl	3fd4c <memset>
	if (buf == NULL) {
   265ae:	b1e5      	cbz	r5, 265ea <modem_info_short_get+0x4e>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   265b0:	4b11      	ldr	r3, [pc, #68]	; (265f8 <modem_info_short_get+0x5c>)
   265b2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   265b6:	7aa3      	ldrb	r3, [r4, #10]
   265b8:	2b03      	cmp	r3, #3
   265ba:	d016      	beq.n	265ea <modem_info_short_get+0x4e>
	err = at_cmd_write(modem_data[info]->cmd,
   265bc:	2300      	movs	r3, #0
   265be:	2280      	movs	r2, #128	; 0x80
   265c0:	4669      	mov	r1, sp
   265c2:	6820      	ldr	r0, [r4, #0]
   265c4:	f005 f85e 	bl	2b684 <at_cmd_write>
	if (err != 0) {
   265c8:	b990      	cbnz	r0, 265f0 <modem_info_short_get+0x54>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   265ca:	4669      	mov	r1, sp
   265cc:	f104 0009 	add.w	r0, r4, #9
   265d0:	f7ff ff5c 	bl	2648c <modem_info_parse.isra.0>
	if (err) {
   265d4:	b938      	cbnz	r0, 265e6 <modem_info_short_get+0x4a>
	err = at_params_short_get(&m_param_list,
   265d6:	462a      	mov	r2, r5
   265d8:	7a21      	ldrb	r1, [r4, #8]
   265da:	4808      	ldr	r0, [pc, #32]	; (265fc <modem_info_short_get+0x60>)
   265dc:	f021 ff46 	bl	4846c <at_params_short_get>
	return sizeof(u16_t);
   265e0:	2800      	cmp	r0, #0
   265e2:	bf08      	it	eq
   265e4:	2002      	moveq	r0, #2
}
   265e6:	b021      	add	sp, #132	; 0x84
   265e8:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   265ea:	f06f 0015 	mvn.w	r0, #21
   265ee:	e7fa      	b.n	265e6 <modem_info_short_get+0x4a>
		return -EIO;
   265f0:	f06f 0004 	mvn.w	r0, #4
   265f4:	e7f7      	b.n	265e6 <modem_info_short_get+0x4a>
   265f6:	bf00      	nop
   265f8:	000496a4 	.word	0x000496a4
   265fc:	20023c6c 	.word	0x20023c6c

00026600 <modem_info_string_get>:
{
   26600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	size_t len = 0;
   26604:	2400      	movs	r4, #0
{
   26606:	460d      	mov	r5, r1
   26608:	b0a3      	sub	sp, #140	; 0x8c
   2660a:	4681      	mov	r9, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2660c:	2280      	movs	r2, #128	; 0x80
   2660e:	4621      	mov	r1, r4
   26610:	a802      	add	r0, sp, #8
	size_t len = 0;
   26612:	9401      	str	r4, [sp, #4]
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   26614:	f019 fb9a 	bl	3fd4c <memset>
	if (buf == NULL) {
   26618:	2d00      	cmp	r5, #0
   2661a:	d06f      	beq.n	266fc <modem_info_string_get+0xfc>
	err = at_cmd_write(modem_data[info]->cmd,
   2661c:	4b3a      	ldr	r3, [pc, #232]	; (26708 <modem_info_string_get+0x108>)
   2661e:	2280      	movs	r2, #128	; 0x80
   26620:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
   26624:	a902      	add	r1, sp, #8
   26626:	4623      	mov	r3, r4
   26628:	6830      	ldr	r0, [r6, #0]
   2662a:	f005 f82b 	bl	2b684 <at_cmd_write>
	if (err != 0) {
   2662e:	4680      	mov	r8, r0
   26630:	2800      	cmp	r0, #0
   26632:	d166      	bne.n	26702 <modem_info_string_get+0x102>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   26634:	a902      	add	r1, sp, #8
   26636:	f106 0009 	add.w	r0, r6, #9
   2663a:	f7ff ff27 	bl	2648c <modem_info_parse.isra.0>
	if (err) {
   2663e:	4604      	mov	r4, r0
   26640:	b1a0      	cbz	r0, 2666c <modem_info_string_get+0x6c>
		LOG_ERR("Unable to parse data: %d", err);
   26642:	2301      	movs	r3, #1
   26644:	f04f 0000 	mov.w	r0, #0
   26648:	4a30      	ldr	r2, [pc, #192]	; (2670c <modem_info_string_get+0x10c>)
   2664a:	f363 0002 	bfi	r0, r3, #0, #3
   2664e:	4b30      	ldr	r3, [pc, #192]	; (26710 <modem_info_string_get+0x110>)
   26650:	f368 00c5 	bfi	r0, r8, #3, #3
   26654:	1a9b      	subs	r3, r3, r2
   26656:	4622      	mov	r2, r4
   26658:	08db      	lsrs	r3, r3, #3
   2665a:	492e      	ldr	r1, [pc, #184]	; (26714 <modem_info_string_get+0x114>)
   2665c:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Unable to obtain short: %d", err);
   26660:	f020 f81f 	bl	466a2 <log_string_sync>
}
   26664:	4620      	mov	r0, r4
   26666:	b023      	add	sp, #140	; 0x8c
   26668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   2666c:	7ab7      	ldrb	r7, [r6, #10]
   2666e:	2f01      	cmp	r7, #1
   26670:	d12f      	bne.n	266d2 <modem_info_string_get+0xd2>
		err = at_params_short_get(&m_param_list,
   26672:	f10d 0202 	add.w	r2, sp, #2
   26676:	7a31      	ldrb	r1, [r6, #8]
   26678:	4827      	ldr	r0, [pc, #156]	; (26718 <modem_info_string_get+0x118>)
   2667a:	f021 fef7 	bl	4846c <at_params_short_get>
		if (err) {
   2667e:	4604      	mov	r4, r0
   26680:	b170      	cbz	r0, 266a0 <modem_info_string_get+0xa0>
			LOG_ERR("Unable to obtain short: %d", err);
   26682:	f04f 0000 	mov.w	r0, #0
   26686:	4a21      	ldr	r2, [pc, #132]	; (2670c <modem_info_string_get+0x10c>)
   26688:	4b21      	ldr	r3, [pc, #132]	; (26710 <modem_info_string_get+0x110>)
   2668a:	f367 0002 	bfi	r0, r7, #0, #3
   2668e:	1a9b      	subs	r3, r3, r2
   26690:	f368 00c5 	bfi	r0, r8, #3, #3
   26694:	08db      	lsrs	r3, r3, #3
   26696:	f363 108f 	bfi	r0, r3, #6, #10
   2669a:	4622      	mov	r2, r4
   2669c:	491f      	ldr	r1, [pc, #124]	; (2671c <modem_info_string_get+0x11c>)
   2669e:	e7df      	b.n	26660 <modem_info_string_get+0x60>
		err = snprintf(buf, MODEM_INFO_MAX_RESPONSE_SIZE,
   266a0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   266a4:	4a1e      	ldr	r2, [pc, #120]	; (26720 <modem_info_string_get+0x120>)
   266a6:	2164      	movs	r1, #100	; 0x64
   266a8:	4628      	mov	r0, r5
   266aa:	f019 fd9b 	bl	401e4 <snprintf>
	if (info == MODEM_INFO_ICCID) {
   266ae:	f1b9 0f0e 	cmp.w	r9, #14
   266b2:	d108      	bne.n	266c6 <modem_info_string_get+0xc6>
   266b4:	462c      	mov	r4, r5
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   266b6:	4628      	mov	r0, r5
   266b8:	f019 ff64 	bl	40584 <strlen>
   266bc:	1b66      	subs	r6, r4, r5
   266be:	42b0      	cmp	r0, r6
   266c0:	f104 0402 	add.w	r4, r4, #2
   266c4:	d811      	bhi.n	266ea <modem_info_string_get+0xea>
	return len <= 0 ? -ENOTSUP : len;
   266c6:	9c01      	ldr	r4, [sp, #4]
   266c8:	2c00      	cmp	r4, #0
   266ca:	bf08      	it	eq
   266cc:	f06f 0485 	mvneq.w	r4, #133	; 0x85
   266d0:	e7c8      	b.n	26664 <modem_info_string_get+0x64>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   266d2:	2f03      	cmp	r7, #3
   266d4:	d1eb      	bne.n	266ae <modem_info_string_get+0xae>
		len = MODEM_INFO_MAX_RESPONSE_SIZE;
   266d6:	2264      	movs	r2, #100	; 0x64
   266d8:	ab22      	add	r3, sp, #136	; 0x88
   266da:	f843 2d84 	str.w	r2, [r3, #-132]!
		err = at_params_string_get(&m_param_list,
   266de:	7a31      	ldrb	r1, [r6, #8]
   266e0:	462a      	mov	r2, r5
   266e2:	480d      	ldr	r0, [pc, #52]	; (26718 <modem_info_string_get+0x118>)
   266e4:	f021 feef 	bl	484c6 <at_params_string_get>
   266e8:	e7e1      	b.n	266ae <modem_info_string_get+0xae>
		current_char = buf[i];
   266ea:	f814 3c02 	ldrb.w	r3, [r4, #-2]
		buf[i] = next_char;
   266ee:	f814 2c01 	ldrb.w	r2, [r4, #-1]
		buf[i + 1] = current_char;
   266f2:	f804 3c01 	strb.w	r3, [r4, #-1]
		buf[i] = next_char;
   266f6:	f804 2c02 	strb.w	r2, [r4, #-2]
   266fa:	e7dc      	b.n	266b6 <modem_info_string_get+0xb6>
		return -EINVAL;
   266fc:	f06f 0415 	mvn.w	r4, #21
   26700:	e7b0      	b.n	26664 <modem_info_string_get+0x64>
		return -EIO;
   26702:	f06f 0404 	mvn.w	r4, #4
   26706:	e7ad      	b.n	26664 <modem_info_string_get+0x64>
   26708:	000496a4 	.word	0x000496a4
   2670c:	00049018 	.word	0x00049018
   26710:	000490a0 	.word	0x000490a0
   26714:	0004d6bd 	.word	0x0004d6bd
   26718:	20023c6c 	.word	0x20023c6c
   2671c:	0004d6d6 	.word	0x0004d6d6
   26720:	0004e42b 	.word	0x0004e42b

00026724 <modem_info_rsrp_register>:

int modem_info_rsrp_register(rsrp_cb_t cb)
{
	modem_info_rsrp_cb = cb;
   26724:	4b13      	ldr	r3, [pc, #76]	; (26774 <modem_info_rsrp_register+0x50>)
{
   26726:	b510      	push	{r4, lr}

	int rc = at_notif_register_handler(NULL,
   26728:	4913      	ldr	r1, [pc, #76]	; (26778 <modem_info_rsrp_register+0x54>)
	modem_info_rsrp_cb = cb;
   2672a:	6018      	str	r0, [r3, #0]
	int rc = at_notif_register_handler(NULL,
   2672c:	2000      	movs	r0, #0
   2672e:	f7ff fa3d 	bl	25bac <at_notif_register_handler>
		modem_info_rsrp_subscribe_handler);
	if (rc != 0) {
   26732:	4604      	mov	r4, r0
   26734:	b190      	cbz	r0, 2675c <modem_info_rsrp_register+0x38>
		LOG_ERR("Can't register handler rc=%d", rc);
   26736:	2301      	movs	r3, #1
   26738:	f04f 0000 	mov.w	r0, #0
   2673c:	4a0f      	ldr	r2, [pc, #60]	; (2677c <modem_info_rsrp_register+0x58>)
   2673e:	f363 0002 	bfi	r0, r3, #0, #3
   26742:	4b0f      	ldr	r3, [pc, #60]	; (26780 <modem_info_rsrp_register+0x5c>)
   26744:	f36f 00c5 	bfc	r0, #3, #3
   26748:	1a9b      	subs	r3, r3, r2
   2674a:	08db      	lsrs	r3, r3, #3
   2674c:	f363 108f 	bfi	r0, r3, #6, #10
   26750:	4622      	mov	r2, r4
   26752:	490c      	ldr	r1, [pc, #48]	; (26784 <modem_info_rsrp_register+0x60>)
   26754:	f01f ffa5 	bl	466a2 <log_string_sync>
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
		return -EIO;
	}

	return 0;
}
   26758:	4620      	mov	r0, r4
   2675a:	bd10      	pop	{r4, pc}
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
   2675c:	4603      	mov	r3, r0
   2675e:	4602      	mov	r2, r0
   26760:	4601      	mov	r1, r0
   26762:	4809      	ldr	r0, [pc, #36]	; (26788 <modem_info_rsrp_register+0x64>)
   26764:	f004 ff8e 	bl	2b684 <at_cmd_write>
   26768:	1e04      	subs	r4, r0, #0
		return -EIO;
   2676a:	bf18      	it	ne
   2676c:	f06f 0404 	mvnne.w	r4, #4
   26770:	e7f2      	b.n	26758 <modem_info_rsrp_register+0x34>
   26772:	bf00      	nop
   26774:	20023c74 	.word	0x20023c74
   26778:	000264b9 	.word	0x000264b9
   2677c:	00049018 	.word	0x00049018
   26780:	000490a0 	.word	0x000490a0
   26784:	0004d639 	.word	0x0004d639
   26788:	0004d656 	.word	0x0004d656

0002678c <modem_info_init>:

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   2678c:	210a      	movs	r1, #10
   2678e:	4801      	ldr	r0, [pc, #4]	; (26794 <modem_info_init+0x8>)
   26790:	f021 bdc1 	b.w	48316 <at_params_list_init>
   26794:	20023c6c 	.word	0x20023c6c

00026798 <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   26798:	b570      	push	{r4, r5, r6, lr}
   2679a:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   2679c:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   267a0:	f7ff feda 	bl	26558 <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   267a4:	2803      	cmp	r0, #3
	data_type = modem_info_type_get(param->type);
   267a6:	4606      	mov	r6, r0
	if (data_type == AT_PARAM_TYPE_STRING) {
   267a8:	d11d      	bne.n	267e6 <modem_data_get+0x4e>
		ret = modem_info_string_get(param->type, param->value_string);
   267aa:	1ca9      	adds	r1, r5, #2
   267ac:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   267b0:	f7ff ff26 	bl	26600 <modem_info_string_get>
		if (ret < 0) {
   267b4:	1e04      	subs	r4, r0, #0
   267b6:	db02      	blt.n	267be <modem_data_get+0x26>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   267b8:	2400      	movs	r4, #0
}
   267ba:	4620      	mov	r0, r4
   267bc:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   267be:	2301      	movs	r3, #1
   267c0:	f04f 0000 	mov.w	r0, #0
   267c4:	4a15      	ldr	r2, [pc, #84]	; (2681c <modem_data_get+0x84>)
   267c6:	f363 0002 	bfi	r0, r3, #0, #3
   267ca:	4b15      	ldr	r3, [pc, #84]	; (26820 <modem_data_get+0x88>)
   267cc:	f36f 00c5 	bfc	r0, #3, #3
   267d0:	1a9b      	subs	r3, r3, r2
   267d2:	08db      	lsrs	r3, r3, #3
   267d4:	f363 108f 	bfi	r0, r3, #6, #10
   267d8:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
   267dc:	4623      	mov	r3, r4
   267de:	4911      	ldr	r1, [pc, #68]	; (26824 <modem_data_get+0x8c>)
   267e0:	f01f ff5f 	bl	466a2 <log_string_sync>
			return ret;
   267e4:	e7e9      	b.n	267ba <modem_data_get+0x22>
	} else if (data_type == AT_PARAM_TYPE_NUM_SHORT) {
   267e6:	2801      	cmp	r0, #1
   267e8:	d1e6      	bne.n	267b8 <modem_data_get+0x20>
		ret = modem_info_short_get(param->type, &param->value);
   267ea:	4629      	mov	r1, r5
   267ec:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   267f0:	f7ff fed4 	bl	2659c <modem_info_short_get>
		if (ret < 0) {
   267f4:	1e04      	subs	r4, r0, #0
   267f6:	dadf      	bge.n	267b8 <modem_data_get+0x20>
			LOG_ERR("Link data not obtained: %d", ret);
   267f8:	f04f 0000 	mov.w	r0, #0
   267fc:	4a07      	ldr	r2, [pc, #28]	; (2681c <modem_data_get+0x84>)
   267fe:	4b08      	ldr	r3, [pc, #32]	; (26820 <modem_data_get+0x88>)
   26800:	f366 0002 	bfi	r0, r6, #0, #3
   26804:	1a9b      	subs	r3, r3, r2
   26806:	08db      	lsrs	r3, r3, #3
   26808:	f36f 00c5 	bfc	r0, #3, #3
   2680c:	f363 108f 	bfi	r0, r3, #6, #10
   26810:	4622      	mov	r2, r4
   26812:	4905      	ldr	r1, [pc, #20]	; (26828 <modem_data_get+0x90>)
   26814:	f01f ff45 	bl	466a2 <log_string_sync>
   26818:	e7cf      	b.n	267ba <modem_data_get+0x22>
   2681a:	bf00      	nop
   2681c:	00049018 	.word	0x00049018
   26820:	000490b0 	.word	0x000490b0
   26824:	0004d83e 	.word	0x0004d83e
   26828:	0004d85c 	.word	0x0004d85c

0002682c <modem_info_params_init>:
	if (modem == NULL) {
   2682c:	2800      	cmp	r0, #0
   2682e:	d043      	beq.n	268b8 <modem_info_params_init+0x8c>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   26830:	2301      	movs	r3, #1
   26832:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   26836:	2302      	movs	r3, #2
   26838:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   2683c:	2303      	movs	r3, #3
   2683e:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   26842:	2305      	movs	r3, #5
   26844:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   26848:	2306      	movs	r3, #6
   2684a:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   2684e:	2307      	movs	r3, #7
   26850:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   26854:	2308      	movs	r3, #8
   26856:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   2685a:	2309      	movs	r3, #9
   2685c:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   26860:	2304      	movs	r3, #4
   26862:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   26866:	230f      	movs	r3, #15
   26868:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   2686c:	2310      	movs	r3, #16
   2686e:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   26872:	2311      	movs	r3, #17
   26874:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   26878:	2314      	movs	r3, #20
   2687a:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   2687e:	230a      	movs	r3, #10
   26880:	f880 3634 	strb.w	r3, [r0, #1588]	; 0x634
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   26884:	230e      	movs	r3, #14
   26886:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   2688a:	2312      	movs	r3, #18
   2688c:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   26890:	230d      	movs	r3, #13
   26892:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   26896:	230b      	movs	r3, #11
   26898:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.imei.type			= MODEM_INFO_IMEI;
   2689c:	2313      	movs	r3, #19
   2689e:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.board			= CONFIG_BOARD;
   268a2:	4b07      	ldr	r3, [pc, #28]	; (268c0 <modem_info_params_init+0x94>)
   268a4:	f8c0 3868 	str.w	r3, [r0, #2152]	; 0x868
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   268a8:	4b06      	ldr	r3, [pc, #24]	; (268c4 <modem_info_params_init+0x98>)
   268aa:	f8c0 386c 	str.w	r3, [r0, #2156]	; 0x86c
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   268ae:	4b06      	ldr	r3, [pc, #24]	; (268c8 <modem_info_params_init+0x9c>)
   268b0:	f8c0 3870 	str.w	r3, [r0, #2160]	; 0x870
	return 0;
   268b4:	2000      	movs	r0, #0
   268b6:	4770      	bx	lr
		return -EINVAL;
   268b8:	f06f 0015 	mvn.w	r0, #21
}
   268bc:	4770      	bx	lr
   268be:	bf00      	nop
   268c0:	0004d8cc 	.word	0x0004d8cc
   268c4:	0004d8dd 	.word	0x0004d8dd
   268c8:	0004d8e4 	.word	0x0004d8e4

000268cc <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   268cc:	b570      	push	{r4, r5, r6, lr}
	int ret;

	if (modem == NULL) {
   268ce:	4604      	mov	r4, r0
   268d0:	2800      	cmp	r0, #0
   268d2:	f000 80c2 	beq.w	26a5a <modem_info_params_get+0x18e>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   268d6:	f7ff ff5f 	bl	26798 <modem_data_get>
   268da:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   268dc:	f104 0070 	add.w	r0, r4, #112	; 0x70
   268e0:	f7ff ff5a 	bl	26798 <modem_data_get>
   268e4:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   268e6:	f504 7044 	add.w	r0, r4, #784	; 0x310
   268ea:	f7ff ff55 	bl	26798 <modem_data_get>
   268ee:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   268f0:	f504 7060 	add.w	r0, r4, #896	; 0x380
   268f4:	f7ff ff50 	bl	26798 <modem_data_get>
   268f8:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   268fa:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   268fe:	f7ff ff4b 	bl	26798 <modem_data_get>
   26902:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   26904:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   26908:	f7ff ff46 	bl	26798 <modem_data_get>
   2690c:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   2690e:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   26912:	f7ff ff41 	bl	26798 <modem_data_get>
   26916:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   26918:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   2691c:	f7ff ff3c 	bl	26798 <modem_data_get>
   26920:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   26922:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   26926:	f7ff ff37 	bl	26798 <modem_data_get>
   2692a:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   2692c:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   26930:	f7ff ff32 	bl	26798 <modem_data_get>
   26934:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.date_time);
   26936:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   2693a:	f7ff ff2d 	bl	26798 <modem_data_get>
   2693e:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
   26942:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   26946:	4405      	add	r5, r0
	memcpy(mcc->value_string, current_operator->value_string, 3);
   26948:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   2694c:	f8a4 21c2 	strh.w	r2, [r4, #450]	; 0x1c2
   26950:	7083      	strb	r3, [r0, #2]
   26952:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
   26956:	f8b4 2155 	ldrh.w	r2, [r4, #341]	; 0x155
   2695a:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
   2695e:	f8a4 2232 	strh.w	r2, [r4, #562]	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   26962:	2100      	movs	r1, #0
   26964:	220a      	movs	r2, #10
   26966:	f01a f9dd 	bl	40d24 <strtol>
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   2696a:	f204 2632 	addw	r6, r4, #562	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2696e:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   26972:	220a      	movs	r2, #10
   26974:	2100      	movs	r1, #0
   26976:	4630      	mov	r0, r6
   26978:	f01a f9d4 	bl	40d24 <strtol>
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   2697c:	2210      	movs	r2, #16
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2697e:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   26982:	2100      	movs	r1, #0
   26984:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   26988:	f01a f9cc 	bl	40d24 <strtol>
   2698c:	f7f1 fe9a 	bl	186c4 <__aeabi_i2d>
   26990:	f504 66b6 	add.w	r6, r4, #1456	; 0x5b0
   26994:	e9c6 0100 	strd	r0, r1, [r6]
	area_code->value_string[4] = '\0';
   26998:	2600      	movs	r6, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   2699a:	2210      	movs	r2, #16
	area_code->value_string[4] = '\0';
   2699c:	f884 60e6 	strb.w	r6, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   269a0:	4631      	mov	r1, r6
   269a2:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   269a6:	f01a f9bd 	bl	40d24 <strtol>
   269aa:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   269ae:	b19d      	cbz	r5, 269d8 <modem_info_params_get+0x10c>
			LOG_ERR("Network data not obtained: %d", ret);
   269b0:	2301      	movs	r3, #1
   269b2:	f04f 0000 	mov.w	r0, #0
   269b6:	4a2a      	ldr	r2, [pc, #168]	; (26a60 <modem_info_params_get+0x194>)
   269b8:	f363 0002 	bfi	r0, r3, #0, #3
   269bc:	4b29      	ldr	r3, [pc, #164]	; (26a64 <modem_info_params_get+0x198>)
   269be:	f366 00c5 	bfi	r0, r6, #3, #3
   269c2:	1a9b      	subs	r3, r3, r2
   269c4:	462a      	mov	r2, r5
   269c6:	08db      	lsrs	r3, r3, #3
   269c8:	4927      	ldr	r1, [pc, #156]	; (26a68 <modem_info_params_get+0x19c>)
   269ca:	f363 108f 	bfi	r0, r3, #6, #10
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   269ce:	f01f fe68 	bl	466a2 <log_string_sync>
			return -EAGAIN;
   269d2:	f06f 000a 	mvn.w	r0, #10
		}
	}

	return 0;
}
   269d6:	bd70      	pop	{r4, r5, r6, pc}
		ret = modem_data_get(&modem->sim.uicc);
   269d8:	f504 60b9 	add.w	r0, r4, #1480	; 0x5c8
   269dc:	f7ff fedc 	bl	26798 <modem_data_get>
   269e0:	4606      	mov	r6, r0
			ret += modem_data_get(&modem->sim.iccid);
   269e2:	f504 60c7 	add.w	r0, r4, #1592	; 0x638
   269e6:	f7ff fed7 	bl	26798 <modem_data_get>
   269ea:	4406      	add	r6, r0
			ret += modem_data_get(&modem->sim.imsi);
   269ec:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   269f0:	f7ff fed2 	bl	26798 <modem_data_get>
		if (ret) {
   269f4:	1836      	adds	r6, r6, r0
   269f6:	d00f      	beq.n	26a18 <modem_info_params_get+0x14c>
			LOG_ERR("Sim data not obtained: %d", ret);
   269f8:	2301      	movs	r3, #1
   269fa:	f04f 0000 	mov.w	r0, #0
   269fe:	4a18      	ldr	r2, [pc, #96]	; (26a60 <modem_info_params_get+0x194>)
   26a00:	f363 0002 	bfi	r0, r3, #0, #3
   26a04:	4b17      	ldr	r3, [pc, #92]	; (26a64 <modem_info_params_get+0x198>)
   26a06:	f365 00c5 	bfi	r0, r5, #3, #3
   26a0a:	1a9b      	subs	r3, r3, r2
   26a0c:	08db      	lsrs	r3, r3, #3
   26a0e:	f363 108f 	bfi	r0, r3, #6, #10
   26a12:	4632      	mov	r2, r6
   26a14:	4915      	ldr	r1, [pc, #84]	; (26a6c <modem_info_params_get+0x1a0>)
   26a16:	e7da      	b.n	269ce <modem_info_params_get+0x102>
		ret = modem_data_get(&modem->device.modem_fw);
   26a18:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   26a1c:	f7ff febc 	bl	26798 <modem_data_get>
   26a20:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   26a22:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   26a26:	f7ff feb7 	bl	26798 <modem_data_get>
   26a2a:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   26a2c:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   26a30:	f7ff feb2 	bl	26798 <modem_data_get>
		if (ret) {
   26a34:	1828      	adds	r0, r5, r0
   26a36:	d0ce      	beq.n	269d6 <modem_info_params_get+0x10a>
			LOG_ERR("Device data not obtained: %d", ret);
   26a38:	2301      	movs	r3, #1
   26a3a:	f04f 0400 	mov.w	r4, #0
   26a3e:	4a08      	ldr	r2, [pc, #32]	; (26a60 <modem_info_params_get+0x194>)
   26a40:	f363 0402 	bfi	r4, r3, #0, #3
   26a44:	4b07      	ldr	r3, [pc, #28]	; (26a64 <modem_info_params_get+0x198>)
   26a46:	f366 04c5 	bfi	r4, r6, #3, #3
   26a4a:	1a9b      	subs	r3, r3, r2
   26a4c:	08db      	lsrs	r3, r3, #3
   26a4e:	f363 148f 	bfi	r4, r3, #6, #10
   26a52:	4602      	mov	r2, r0
   26a54:	4906      	ldr	r1, [pc, #24]	; (26a70 <modem_info_params_get+0x1a4>)
   26a56:	4620      	mov	r0, r4
   26a58:	e7b9      	b.n	269ce <modem_info_params_get+0x102>
		return -EINVAL;
   26a5a:	f06f 0015 	mvn.w	r0, #21
   26a5e:	e7ba      	b.n	269d6 <modem_info_params_get+0x10a>
   26a60:	00049018 	.word	0x00049018
   26a64:	000490b0 	.word	0x000490b0
   26a68:	0004d877 	.word	0x0004d877
   26a6c:	0004d895 	.word	0x0004d895
   26a70:	0004d8af 	.word	0x0004d8af

00026a74 <network_data_add>:

	return total_len;
}

static int network_data_add(struct network_param *network, cJSON *json_obj)
{
   26a74:	b570      	push	{r4, r5, r6, lr}
   26a76:	460e      	mov	r6, r1
   26a78:	b09a      	sub	sp, #104	; 0x68

	static const char lte_string[]	 = "LTE-M";
	static const char nbiot_string[] = "NB-IoT";
	static const char gps_string[]	 = " GPS";

	if (network == NULL || json_obj == NULL) {
   26a7a:	4605      	mov	r5, r0
   26a7c:	2800      	cmp	r0, #0
   26a7e:	d065      	beq.n	26b4c <network_data_add+0xd8>
   26a80:	2900      	cmp	r1, #0
   26a82:	d063      	beq.n	26b4c <network_data_add+0xd8>
		return -EINVAL;
	}

	total_len = json_add_data(&network->current_band, json_obj);
   26a84:	f021 fd73 	bl	4856e <json_add_data>
	total_len += json_add_data(&network->sup_band, json_obj);
   26a88:	4631      	mov	r1, r6
	total_len = json_add_data(&network->current_band, json_obj);
   26a8a:	4604      	mov	r4, r0
	total_len += json_add_data(&network->sup_band, json_obj);
   26a8c:	f105 0070 	add.w	r0, r5, #112	; 0x70
   26a90:	f021 fd6d 	bl	4856e <json_add_data>
	total_len += json_add_data(&network->area_code, json_obj);
   26a94:	4631      	mov	r1, r6
	total_len += json_add_data(&network->sup_band, json_obj);
   26a96:	4404      	add	r4, r0
	total_len += json_add_data(&network->area_code, json_obj);
   26a98:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   26a9c:	f021 fd67 	bl	4856e <json_add_data>
	total_len += json_add_data(&network->current_operator, json_obj);
   26aa0:	4631      	mov	r1, r6
	total_len += json_add_data(&network->area_code, json_obj);
   26aa2:	4404      	add	r4, r0
	total_len += json_add_data(&network->current_operator, json_obj);
   26aa4:	f505 70a8 	add.w	r0, r5, #336	; 0x150
   26aa8:	f021 fd61 	bl	4856e <json_add_data>
	total_len += json_add_data(&network->ip_address, json_obj);
   26aac:	4631      	mov	r1, r6
	total_len += json_add_data(&network->current_operator, json_obj);
   26aae:	4404      	add	r4, r0
	total_len += json_add_data(&network->ip_address, json_obj);
   26ab0:	f505 7044 	add.w	r0, r5, #784	; 0x310
   26ab4:	f021 fd5b 	bl	4856e <json_add_data>
	total_len += json_add_data(&network->ue_mode, json_obj);
   26ab8:	4631      	mov	r1, r6
	total_len += json_add_data(&network->ip_address, json_obj);
   26aba:	4404      	add	r4, r0
	total_len += json_add_data(&network->ue_mode, json_obj);
   26abc:	f505 7060 	add.w	r0, r5, #896	; 0x380
   26ac0:	f021 fd55 	bl	4856e <json_add_data>

	len = modem_info_name_get(network->cellid_hex.type, data_name);
   26ac4:	a901      	add	r1, sp, #4
	total_len += json_add_data(&network->ue_mode, json_obj);
   26ac6:	4404      	add	r4, r0
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   26ac8:	f895 030c 	ldrb.w	r0, [r5, #780]	; 0x30c
   26acc:	f7ff fd4e 	bl	2656c <modem_info_name_get>
	data_name[len] =  '\0';
   26ad0:	ab1a      	add	r3, sp, #104	; 0x68
   26ad2:	4418      	add	r0, r3
   26ad4:	2300      	movs	r3, #0
   26ad6:	f800 3c64 	strb.w	r3, [r0, #-100]
	ret = json_add_num(json_obj, data_name, network->cellid_dec);
   26ada:	f505 63b6 	add.w	r3, r5, #1456	; 0x5b0
	json_num = cJSON_CreateNumber(num);
   26ade:	ed93 0b00 	vldr	d0, [r3]
   26ae2:	f7f3 fe35 	bl	1a750 <cJSON_CreateNumber>
	if (json_num == NULL) {
   26ae6:	4602      	mov	r2, r0
   26ae8:	b120      	cbz	r0, 26af4 <network_data_add+0x80>
	cJSON_AddItemToObject(parent, str, item);
   26aea:	a901      	add	r1, sp, #4
   26aec:	4630      	mov	r0, r6
   26aee:	f020 ffd6 	bl	47a9e <cJSON_AddItemToObject>

	if (ret) {
		LOG_DBG("Unable to add the cell ID.");
	} else {
		total_len += sizeof(double);
   26af2:	3408      	adds	r4, #8
	}

	if (network->lte_mode.value == 1) {
   26af4:	f8b5 33f0 	ldrh.w	r3, [r5, #1008]	; 0x3f0
   26af8:	f505 62b7 	add.w	r2, r5, #1464	; 0x5b8
   26afc:	2b01      	cmp	r3, #1
   26afe:	d11a      	bne.n	26b36 <network_data_add+0xc2>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
   26b00:	4610      	mov	r0, r2
   26b02:	4914      	ldr	r1, [pc, #80]	; (26b54 <network_data_add+0xe0>)
   26b04:	f019 fc4a 	bl	4039c <strcat>
   26b08:	4602      	mov	r2, r0
		strcat(network->network_mode, lte_string);
		total_len += sizeof(lte_string);
   26b0a:	3406      	adds	r4, #6
	} else if (network->nbiot_mode.value == 1) {
		strcat(network->network_mode, nbiot_string);
		total_len += sizeof(nbiot_string);
	}

	if (network->gps_mode.value == 1) {
   26b0c:	f8b5 34d0 	ldrh.w	r3, [r5, #1232]	; 0x4d0
   26b10:	2b01      	cmp	r3, #1
   26b12:	d105      	bne.n	26b20 <network_data_add+0xac>
   26b14:	4610      	mov	r0, r2
   26b16:	4910      	ldr	r1, [pc, #64]	; (26b58 <network_data_add+0xe4>)
   26b18:	f019 fc40 	bl	4039c <strcat>
   26b1c:	4602      	mov	r2, r0
		strcat(network->network_mode, gps_string);
		total_len += sizeof(gps_string);
   26b1e:	3405      	adds	r4, #5
	}

	ret = json_add_str(json_obj, "networkMode", network->network_mode);
   26b20:	490e      	ldr	r1, [pc, #56]	; (26b5c <network_data_add+0xe8>)
   26b22:	4630      	mov	r0, r6
   26b24:	f021 fd0d 	bl	48542 <json_add_str>

	if (ret) {
   26b28:	b110      	cbz	r0, 26b30 <network_data_add+0xbc>
		printk("Unable to add the network mode");
   26b2a:	480d      	ldr	r0, [pc, #52]	; (26b60 <network_data_add+0xec>)
   26b2c:	f01f fd96 	bl	4665c <printk>
	}

	return total_len;
}
   26b30:	4620      	mov	r0, r4
   26b32:	b01a      	add	sp, #104	; 0x68
   26b34:	bd70      	pop	{r4, r5, r6, pc}
	} else if (network->nbiot_mode.value == 1) {
   26b36:	f8b5 3460 	ldrh.w	r3, [r5, #1120]	; 0x460
   26b3a:	2b01      	cmp	r3, #1
   26b3c:	d1e6      	bne.n	26b0c <network_data_add+0x98>
   26b3e:	4610      	mov	r0, r2
   26b40:	4908      	ldr	r1, [pc, #32]	; (26b64 <network_data_add+0xf0>)
   26b42:	f019 fc2b 	bl	4039c <strcat>
		total_len += sizeof(nbiot_string);
   26b46:	3407      	adds	r4, #7
   26b48:	4602      	mov	r2, r0
   26b4a:	e7df      	b.n	26b0c <network_data_add+0x98>
		return -EINVAL;
   26b4c:	f06f 0415 	mvn.w	r4, #21
   26b50:	e7ee      	b.n	26b30 <network_data_add+0xbc>
   26b52:	bf00      	nop
   26b54:	0004d922 	.word	0x0004d922
   26b58:	0004d91d 	.word	0x0004d91d
   26b5c:	0004d94e 	.word	0x0004d94e
   26b60:	0004d95a 	.word	0x0004d95a
   26b64:	0004d947 	.word	0x0004d947

00026b68 <device_data_add>:

	return total_len;
}

static int device_data_add(struct device_param *device, cJSON *json_obj)
{
   26b68:	b570      	push	{r4, r5, r6, lr}
   26b6a:	460d      	mov	r5, r1
	int total_len;

	if (device == NULL || json_obj == NULL) {
   26b6c:	4606      	mov	r6, r0
   26b6e:	b328      	cbz	r0, 26bbc <device_data_add+0x54>
   26b70:	b321      	cbz	r1, 26bbc <device_data_add+0x54>
		return -EINVAL;
	}

	total_len = json_add_data(&device->modem_fw, json_obj);
   26b72:	f021 fcfc 	bl	4856e <json_add_data>
	total_len += json_add_data(&device->battery, json_obj);
   26b76:	4629      	mov	r1, r5
	total_len = json_add_data(&device->modem_fw, json_obj);
   26b78:	4604      	mov	r4, r0
	total_len += json_add_data(&device->battery, json_obj);
   26b7a:	f106 0070 	add.w	r0, r6, #112	; 0x70
   26b7e:	f021 fcf6 	bl	4856e <json_add_data>
	total_len += json_add_data(&device->imei, json_obj);
   26b82:	4629      	mov	r1, r5
	total_len += json_add_data(&device->battery, json_obj);
   26b84:	4404      	add	r4, r0
	total_len += json_add_data(&device->imei, json_obj);
   26b86:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   26b8a:	f021 fcf0 	bl	4856e <json_add_data>
	total_len += json_add_str(json_obj, "board", device->board);
   26b8e:	f8d6 2150 	ldr.w	r2, [r6, #336]	; 0x150
	total_len += json_add_data(&device->imei, json_obj);
   26b92:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "board", device->board);
   26b94:	490b      	ldr	r1, [pc, #44]	; (26bc4 <device_data_add+0x5c>)
   26b96:	4628      	mov	r0, r5
   26b98:	f021 fcd3 	bl	48542 <json_add_str>
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   26b9c:	f8d6 2154 	ldr.w	r2, [r6, #340]	; 0x154
	total_len += json_add_str(json_obj, "board", device->board);
   26ba0:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   26ba2:	4909      	ldr	r1, [pc, #36]	; (26bc8 <device_data_add+0x60>)
   26ba4:	4628      	mov	r0, r5
   26ba6:	f021 fccc 	bl	48542 <json_add_str>
	total_len += json_add_str(json_obj, "appName", device->app_name);
   26baa:	f8d6 2158 	ldr.w	r2, [r6, #344]	; 0x158
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   26bae:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "appName", device->app_name);
   26bb0:	4906      	ldr	r1, [pc, #24]	; (26bcc <device_data_add+0x64>)
   26bb2:	4628      	mov	r0, r5
   26bb4:	f021 fcc5 	bl	48542 <json_add_str>
   26bb8:	4420      	add	r0, r4

	return total_len;
}
   26bba:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   26bbc:	f06f 0015 	mvn.w	r0, #21
   26bc0:	e7fb      	b.n	26bba <device_data_add+0x52>
   26bc2:	bf00      	nop
   26bc4:	0004d904 	.word	0x0004d904
   26bc8:	0004d90a 	.word	0x0004d90a
   26bcc:	0004d915 	.word	0x0004d915

00026bd0 <modem_info_json_object_encode>:

int modem_info_json_object_encode(struct modem_param_info *modem,
				  cJSON *root_obj)
{
   26bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26bd4:	4681      	mov	r9, r0
	if (root_obj == NULL || modem == NULL) {
   26bd6:	460d      	mov	r5, r1
   26bd8:	2900      	cmp	r1, #0
   26bda:	d04f      	beq.n	26c7c <modem_info_json_object_encode+0xac>
   26bdc:	2800      	cmp	r0, #0
   26bde:	d04d      	beq.n	26c7c <modem_info_json_object_encode+0xac>
		return -EINVAL;
	}

	int obj_count = cJSON_GetArraySize(root_obj);
   26be0:	4608      	mov	r0, r1
   26be2:	f020 ff4f 	bl	47a84 <cJSON_GetArraySize>
   26be6:	4604      	mov	r4, r0

	cJSON *network_obj	= cJSON_CreateObject();
   26be8:	f7fe f9b0 	bl	24f4c <cJSON_CreateObject>
   26bec:	4680      	mov	r8, r0
	cJSON *sim_obj		= cJSON_CreateObject();
   26bee:	f7fe f9ad 	bl	24f4c <cJSON_CreateObject>
   26bf2:	4607      	mov	r7, r0
	cJSON *device_obj	= cJSON_CreateObject();
   26bf4:	f7fe f9aa 	bl	24f4c <cJSON_CreateObject>
   26bf8:	4606      	mov	r6, r0

	if (network_obj == NULL || sim_obj == NULL || device_obj == NULL) {
   26bfa:	f1b8 0f00 	cmp.w	r8, #0
   26bfe:	d03a      	beq.n	26c76 <modem_info_json_object_encode+0xa6>
   26c00:	b3cf      	cbz	r7, 26c76 <modem_info_json_object_encode+0xa6>
   26c02:	b3c0      	cbz	r0, 26c76 <modem_info_json_object_encode+0xa6>
		obj_count = -ENOMEM;
		goto delete_object;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
	    (network_data_add(&modem->network, network_obj) > 0)) {
   26c04:	4641      	mov	r1, r8
   26c06:	4648      	mov	r0, r9
   26c08:	f7ff ff34 	bl	26a74 <network_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
   26c0c:	2800      	cmp	r0, #0
   26c0e:	dd06      	ble.n	26c1e <modem_info_json_object_encode+0x4e>
	cJSON_AddItemToObject(parent, str, item);
   26c10:	4642      	mov	r2, r8
   26c12:	491c      	ldr	r1, [pc, #112]	; (26c84 <modem_info_json_object_encode+0xb4>)
   26c14:	4628      	mov	r0, r5
   26c16:	f020 ff42 	bl	47a9e <cJSON_AddItemToObject>

		json_add_obj(root_obj, "networkInfo", network_obj);
		network_obj = NULL;
   26c1a:	f04f 0800 	mov.w	r8, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
	    (sim_data_add(&modem->sim, sim_obj) > 0)) {
   26c1e:	4639      	mov	r1, r7
   26c20:	f509 60b9 	add.w	r0, r9, #1480	; 0x5c8
   26c24:	f021 fce6 	bl	485f4 <sim_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
   26c28:	2800      	cmp	r0, #0
   26c2a:	dd05      	ble.n	26c38 <modem_info_json_object_encode+0x68>
	cJSON_AddItemToObject(parent, str, item);
   26c2c:	463a      	mov	r2, r7
   26c2e:	4916      	ldr	r1, [pc, #88]	; (26c88 <modem_info_json_object_encode+0xb8>)
   26c30:	4628      	mov	r0, r5
   26c32:	f020 ff34 	bl	47a9e <cJSON_AddItemToObject>

		json_add_obj(root_obj, "simInfo", sim_obj);
		sim_obj = NULL;
   26c36:	2700      	movs	r7, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
	    (device_data_add(&modem->device, device_obj) > 0)) {
   26c38:	4631      	mov	r1, r6
   26c3a:	f509 60e3 	add.w	r0, r9, #1816	; 0x718
   26c3e:	f7ff ff93 	bl	26b68 <device_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
   26c42:	2800      	cmp	r0, #0
   26c44:	dd05      	ble.n	26c52 <modem_info_json_object_encode+0x82>
	cJSON_AddItemToObject(parent, str, item);
   26c46:	4632      	mov	r2, r6
   26c48:	4910      	ldr	r1, [pc, #64]	; (26c8c <modem_info_json_object_encode+0xbc>)
   26c4a:	4628      	mov	r0, r5
   26c4c:	f020 ff27 	bl	47a9e <cJSON_AddItemToObject>

		json_add_obj(root_obj, "deviceInfo", device_obj);
		device_obj = NULL;
   26c50:	2600      	movs	r6, #0
	}

delete_object:
	cJSON_Delete(network_obj);
   26c52:	4640      	mov	r0, r8
   26c54:	f7fe f8b4 	bl	24dc0 <cJSON_Delete>
	cJSON_Delete(sim_obj);
   26c58:	4638      	mov	r0, r7
   26c5a:	f7fe f8b1 	bl	24dc0 <cJSON_Delete>
	cJSON_Delete(device_obj);
   26c5e:	4630      	mov	r0, r6
   26c60:	f7fe f8ae 	bl	24dc0 <cJSON_Delete>

	if (obj_count >= 0) {
   26c64:	2c00      	cmp	r4, #0
   26c66:	db03      	blt.n	26c70 <modem_info_json_object_encode+0xa0>
		obj_count = cJSON_GetArraySize(root_obj) - obj_count;
   26c68:	4628      	mov	r0, r5
   26c6a:	f020 ff0b 	bl	47a84 <cJSON_GetArraySize>
   26c6e:	1b04      	subs	r4, r0, r4
	}

	return obj_count;
}
   26c70:	4620      	mov	r0, r4
   26c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		obj_count = -ENOMEM;
   26c76:	f06f 040b 	mvn.w	r4, #11
   26c7a:	e7ea      	b.n	26c52 <modem_info_json_object_encode+0x82>
		return -EINVAL;
   26c7c:	f06f 0415 	mvn.w	r4, #21
   26c80:	e7f6      	b.n	26c70 <modem_info_json_object_encode+0xa0>
   26c82:	bf00      	nop
   26c84:	0004d928 	.word	0x0004d928
   26c88:	0004d934 	.word	0x0004d934
   26c8c:	0004d93c 	.word	0x0004d93c

00026c90 <cloud_get_binding>:

extern struct cloud_backend __cloud_backends_start[0];
extern struct cloud_backend __cloud_backends_end[0];

struct cloud_backend *cloud_get_binding(const char *name)
{
   26c90:	b570      	push	{r4, r5, r6, lr}
   26c92:	4606      	mov	r6, r0
	struct cloud_backend *info;

	for (info = __cloud_backends_start; info != __cloud_backends_end;
   26c94:	4c09      	ldr	r4, [pc, #36]	; (26cbc <cloud_get_binding+0x2c>)
   26c96:	4d0a      	ldr	r5, [pc, #40]	; (26cc0 <cloud_get_binding+0x30>)
   26c98:	42ac      	cmp	r4, r5
   26c9a:	d101      	bne.n	26ca0 <cloud_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   26c9c:	2400      	movs	r4, #0
   26c9e:	e00a      	b.n	26cb6 <cloud_get_binding+0x26>
		if (info->api == NULL) {
   26ca0:	6823      	ldr	r3, [r4, #0]
   26ca2:	b90b      	cbnz	r3, 26ca8 <cloud_get_binding+0x18>
	     info++) {
   26ca4:	3408      	adds	r4, #8
   26ca6:	e7f7      	b.n	26c98 <cloud_get_binding+0x8>
		if (strcmp(name, info->config->name) == 0) {
   26ca8:	6863      	ldr	r3, [r4, #4]
   26caa:	4630      	mov	r0, r6
   26cac:	6819      	ldr	r1, [r3, #0]
   26cae:	f7f3 f975 	bl	19f9c <strcmp>
   26cb2:	2800      	cmp	r0, #0
   26cb4:	d1f6      	bne.n	26ca4 <cloud_get_binding+0x14>
}
   26cb6:	4620      	mov	r0, r4
   26cb8:	bd70      	pop	{r4, r5, r6, pc}
   26cba:	bf00      	nop
   26cbc:	00051ce0 	.word	0x00051ce0
   26cc0:	00051ce8 	.word	0x00051ce8

00026cc4 <uninit>:

	return nrf_cloud_init(&params);
}

static int uninit(const struct cloud_backend *const backend)
{
   26cc4:	b508      	push	{r3, lr}
	LOG_INF("uninit() is not implemented");
   26cc6:	f04f 0000 	mov.w	r0, #0
   26cca:	2303      	movs	r3, #3
   26ccc:	4a07      	ldr	r2, [pc, #28]	; (26cec <uninit+0x28>)
   26cce:	f363 0002 	bfi	r0, r3, #0, #3
   26cd2:	4b07      	ldr	r3, [pc, #28]	; (26cf0 <uninit+0x2c>)
   26cd4:	f36f 00c5 	bfc	r0, #3, #3
   26cd8:	1a9b      	subs	r3, r3, r2
   26cda:	08db      	lsrs	r3, r3, #3
   26cdc:	f363 108f 	bfi	r0, r3, #6, #10
   26ce0:	4904      	ldr	r1, [pc, #16]	; (26cf4 <uninit+0x30>)
   26ce2:	f01f fcde 	bl	466a2 <log_string_sync>

	return 0;
}
   26ce6:	2000      	movs	r0, #0
   26ce8:	bd08      	pop	{r3, pc}
   26cea:	bf00      	nop
   26cec:	00049018 	.word	0x00049018
   26cf0:	000490d0 	.word	0x000490d0
   26cf4:	0004dbbc 	.word	0x0004dbbc

00026cf8 <event_handler>:
{
   26cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   26cfa:	4606      	mov	r6, r0
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   26cfc:	4c75      	ldr	r4, [pc, #468]	; (26ed4 <event_handler+0x1dc>)
{
   26cfe:	b089      	sub	sp, #36	; 0x24
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   26d00:	6823      	ldr	r3, [r4, #0]
	struct cloud_event evt = { 0 };
   26d02:	221c      	movs	r2, #28
   26d04:	2100      	movs	r1, #0
   26d06:	a801      	add	r0, sp, #4
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   26d08:	685d      	ldr	r5, [r3, #4]
	struct cloud_event evt = { 0 };
   26d0a:	f019 f81f 	bl	3fd4c <memset>
	switch (nrf_cloud_evt->type) {
   26d0e:	7833      	ldrb	r3, [r6, #0]
   26d10:	4a71      	ldr	r2, [pc, #452]	; (26ed8 <event_handler+0x1e0>)
   26d12:	4972      	ldr	r1, [pc, #456]	; (26edc <event_handler+0x1e4>)
   26d14:	2b05      	cmp	r3, #5
   26d16:	eba2 0201 	sub.w	r2, r2, r1
   26d1a:	f3c2 02c9 	ubfx	r2, r2, #3, #10
   26d1e:	4627      	mov	r7, r4
   26d20:	f000 8098 	beq.w	26e54 <event_handler+0x15c>
   26d24:	d824      	bhi.n	26d70 <event_handler+0x78>
   26d26:	2b02      	cmp	r3, #2
   26d28:	d063      	beq.n	26df2 <event_handler+0xfa>
   26d2a:	d80f      	bhi.n	26d4c <event_handler+0x54>
   26d2c:	2b01      	cmp	r3, #1
   26d2e:	d04f      	beq.n	26dd0 <event_handler+0xd8>
		LOG_DBG("Unknown event type: %d", nrf_cloud_evt->type);
   26d30:	2104      	movs	r1, #4
   26d32:	f04f 0000 	mov.w	r0, #0
   26d36:	f361 0002 	bfi	r0, r1, #0, #3
   26d3a:	f36f 00c5 	bfc	r0, #3, #3
   26d3e:	f362 108f 	bfi	r0, r2, #6, #10
   26d42:	4967      	ldr	r1, [pc, #412]	; (26ee0 <event_handler+0x1e8>)
   26d44:	4a67      	ldr	r2, [pc, #412]	; (26ee4 <event_handler+0x1ec>)
   26d46:	f01f fcac 	bl	466a2 <log_string_sync>
}
   26d4a:	e090      	b.n	26e6e <event_handler+0x176>
	switch (nrf_cloud_evt->type) {
   26d4c:	2b03      	cmp	r3, #3
   26d4e:	d072      	beq.n	26e36 <event_handler+0x13e>
   26d50:	2b04      	cmp	r3, #4
   26d52:	d1ed      	bne.n	26d30 <event_handler+0x38>
		LOG_DBG("NRF_CLOUD_EVT_READY");
   26d54:	f04f 0000 	mov.w	r0, #0
   26d58:	f363 0002 	bfi	r0, r3, #0, #3
   26d5c:	f36f 00c5 	bfc	r0, #3, #3
   26d60:	f362 108f 	bfi	r0, r2, #6, #10
   26d64:	4960      	ldr	r1, [pc, #384]	; (26ee8 <event_handler+0x1f0>)
   26d66:	4a5f      	ldr	r2, [pc, #380]	; (26ee4 <event_handler+0x1ec>)
   26d68:	f01f fc9b 	bl	466a2 <log_string_sync>
		evt.type = CLOUD_EVT_READY;
   26d6c:	2302      	movs	r3, #2
   26d6e:	e03d      	b.n	26dec <event_handler+0xf4>
	switch (nrf_cloud_evt->type) {
   26d70:	2b08      	cmp	r3, #8
   26d72:	f04f 0704 	mov.w	r7, #4
   26d76:	d07c      	beq.n	26e72 <event_handler+0x17a>
   26d78:	d816      	bhi.n	26da8 <event_handler+0xb0>
   26d7a:	2b06      	cmp	r3, #6
   26d7c:	f000 8087 	beq.w	26e8e <event_handler+0x196>
   26d80:	2b07      	cmp	r3, #7
   26d82:	d1d5      	bne.n	26d30 <event_handler+0x38>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_DATA_ACK");
   26d84:	f04f 0000 	mov.w	r0, #0
   26d88:	f367 0002 	bfi	r0, r7, #0, #3
   26d8c:	f36f 00c5 	bfc	r0, #3, #3
   26d90:	f362 108f 	bfi	r0, r2, #6, #10
   26d94:	4955      	ldr	r1, [pc, #340]	; (26eec <event_handler+0x1f4>)
   26d96:	4a53      	ldr	r2, [pc, #332]	; (26ee4 <event_handler+0x1ec>)
   26d98:	f01f fc83 	bl	466a2 <log_string_sync>
		evt.type = CLOUD_EVT_DATA_SENT;
   26d9c:	f88d 7004 	strb.w	r7, [sp, #4]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   26da0:	68ea      	ldr	r2, [r5, #12]
   26da2:	a901      	add	r1, sp, #4
   26da4:	6820      	ldr	r0, [r4, #0]
   26da6:	e03f      	b.n	26e28 <event_handler+0x130>
	switch (nrf_cloud_evt->type) {
   26da8:	2b09      	cmp	r3, #9
   26daa:	f000 8084 	beq.w	26eb6 <event_handler+0x1be>
   26dae:	2bff      	cmp	r3, #255	; 0xff
   26db0:	d1be      	bne.n	26d30 <event_handler+0x38>
		LOG_DBG("NRF_CLOUD_EVT_ERROR: %d", nrf_cloud_evt->status);
   26db2:	f04f 0000 	mov.w	r0, #0
   26db6:	f367 0002 	bfi	r0, r7, #0, #3
   26dba:	f36f 00c5 	bfc	r0, #3, #3
   26dbe:	f362 108f 	bfi	r0, r2, #6, #10
   26dc2:	6873      	ldr	r3, [r6, #4]
   26dc4:	4a47      	ldr	r2, [pc, #284]	; (26ee4 <event_handler+0x1ec>)
   26dc6:	494a      	ldr	r1, [pc, #296]	; (26ef0 <event_handler+0x1f8>)
   26dc8:	f01f fc6b 	bl	466a2 <log_string_sync>
		evt.type = CLOUD_EVT_ERROR;
   26dcc:	2303      	movs	r3, #3
   26dce:	e00d      	b.n	26dec <event_handler+0xf4>
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_CONNECTED");
   26dd0:	2304      	movs	r3, #4
   26dd2:	f04f 0000 	mov.w	r0, #0
   26dd6:	f363 0002 	bfi	r0, r3, #0, #3
   26dda:	f36f 00c5 	bfc	r0, #3, #3
   26dde:	f362 108f 	bfi	r0, r2, #6, #10
   26de2:	4944      	ldr	r1, [pc, #272]	; (26ef4 <event_handler+0x1fc>)
   26de4:	4a3f      	ldr	r2, [pc, #252]	; (26ee4 <event_handler+0x1ec>)
   26de6:	f01f fc5c 	bl	466a2 <log_string_sync>
		evt.type = CLOUD_EVT_CONNECTED;
   26dea:	2300      	movs	r3, #0
		evt.type = CLOUD_EVT_FOTA_DONE;
   26dec:	f88d 3004 	strb.w	r3, [sp, #4]
   26df0:	e7d6      	b.n	26da0 <event_handler+0xa8>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATION_REQUEST");
   26df2:	2404      	movs	r4, #4
   26df4:	f04f 0000 	mov.w	r0, #0
   26df8:	f364 0002 	bfi	r0, r4, #0, #3
   26dfc:	f36f 00c5 	bfc	r0, #3, #3
   26e00:	f362 108f 	bfi	r0, r2, #6, #10
   26e04:	493c      	ldr	r1, [pc, #240]	; (26ef8 <event_handler+0x200>)
   26e06:	4a37      	ldr	r2, [pc, #220]	; (26ee4 <event_handler+0x1ec>)
   26e08:	f01f fc4b 	bl	466a2 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_REQUEST;
   26e0c:	2306      	movs	r3, #6
   26e0e:	f88d 3004 	strb.w	r3, [sp, #4]
		if (nrf_cloud_evt->param.ua_req.sequence.len > 0) {
   26e12:	68f3      	ldr	r3, [r6, #12]
   26e14:	b15b      	cbz	r3, 26e2e <event_handler+0x136>
			evt.data.pair_info.type = CLOUD_PAIR_SEQUENCE;
   26e16:	2300      	movs	r3, #0
			      (u8_t *)&nrf_cloud_evt->param.ua_req.sequence.len;
   26e18:	360c      	adds	r6, #12
			evt.data.pair_info.len =
   26e1a:	e9cd 6403 	strd	r6, r4, [sp, #12]
			evt.data.pair_info.type = CLOUD_PAIR_SEQUENCE;
   26e1e:	f88d 3008 	strb.w	r3, [sp, #8]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   26e22:	68ea      	ldr	r2, [r5, #12]
   26e24:	6838      	ldr	r0, [r7, #0]
   26e26:	a901      	add	r1, sp, #4
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   26e28:	f021 fbfc 	bl	48624 <cloud_notify_event>
		break;
   26e2c:	e01f      	b.n	26e6e <event_handler+0x176>
			evt.data.pair_info.type = CLOUD_PAIR_PIN;
   26e2e:	2301      	movs	r3, #1
   26e30:	f88d 3008 	strb.w	r3, [sp, #8]
   26e34:	e7f5      	b.n	26e22 <event_handler+0x12a>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATED");
   26e36:	2304      	movs	r3, #4
   26e38:	f04f 0000 	mov.w	r0, #0
   26e3c:	f363 0002 	bfi	r0, r3, #0, #3
   26e40:	f36f 00c5 	bfc	r0, #3, #3
   26e44:	f362 108f 	bfi	r0, r2, #6, #10
   26e48:	492c      	ldr	r1, [pc, #176]	; (26efc <event_handler+0x204>)
   26e4a:	4a26      	ldr	r2, [pc, #152]	; (26ee4 <event_handler+0x1ec>)
   26e4c:	f01f fc29 	bl	466a2 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_DONE;
   26e50:	2307      	movs	r3, #7
   26e52:	e7cb      	b.n	26dec <event_handler+0xf4>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_ATTACHED");
   26e54:	f04f 0000 	mov.w	r0, #0
   26e58:	2304      	movs	r3, #4
   26e5a:	f363 0002 	bfi	r0, r3, #0, #3
   26e5e:	f36f 00c5 	bfc	r0, #3, #3
   26e62:	f362 108f 	bfi	r0, r2, #6, #10
   26e66:	4926      	ldr	r1, [pc, #152]	; (26f00 <event_handler+0x208>)
   26e68:	4a1e      	ldr	r2, [pc, #120]	; (26ee4 <event_handler+0x1ec>)
   26e6a:	f01f fc1a 	bl	466a2 <log_string_sync>
}
   26e6e:	b009      	add	sp, #36	; 0x24
   26e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED");
   26e72:	f04f 0000 	mov.w	r0, #0
   26e76:	f367 0002 	bfi	r0, r7, #0, #3
   26e7a:	f36f 00c5 	bfc	r0, #3, #3
   26e7e:	f362 108f 	bfi	r0, r2, #6, #10
   26e82:	4920      	ldr	r1, [pc, #128]	; (26f04 <event_handler+0x20c>)
   26e84:	4a17      	ldr	r2, [pc, #92]	; (26ee4 <event_handler+0x1ec>)
   26e86:	f01f fc0c 	bl	466a2 <log_string_sync>
		evt.type = CLOUD_EVT_DISCONNECTED;
   26e8a:	2301      	movs	r3, #1
   26e8c:	e7ae      	b.n	26dec <event_handler+0xf4>
		LOG_DBG("NRF_CLOUD_EVT_RX_DATA");
   26e8e:	f04f 0000 	mov.w	r0, #0
   26e92:	f367 0002 	bfi	r0, r7, #0, #3
   26e96:	f36f 00c5 	bfc	r0, #3, #3
   26e9a:	f362 108f 	bfi	r0, r2, #6, #10
   26e9e:	491a      	ldr	r1, [pc, #104]	; (26f08 <event_handler+0x210>)
   26ea0:	4a10      	ldr	r2, [pc, #64]	; (26ee4 <event_handler+0x1ec>)
   26ea2:	f01f fbfe 	bl	466a2 <log_string_sync>
		evt.type = CLOUD_EVT_DATA_RECEIVED;
   26ea6:	2305      	movs	r3, #5
   26ea8:	f88d 3004 	strb.w	r3, [sp, #4]
		evt.data.msg.buf = (char *)nrf_cloud_evt->param.data.ptr;
   26eac:	68f3      	ldr	r3, [r6, #12]
   26eae:	9302      	str	r3, [sp, #8]
		evt.data.msg.len = nrf_cloud_evt->param.data.len;
   26eb0:	68b3      	ldr	r3, [r6, #8]
   26eb2:	9303      	str	r3, [sp, #12]
   26eb4:	e774      	b.n	26da0 <event_handler+0xa8>
		LOG_DBG("NRF_CLOUD_EVT_FOTA_DONE");
   26eb6:	f04f 0000 	mov.w	r0, #0
   26eba:	f367 0002 	bfi	r0, r7, #0, #3
   26ebe:	f36f 00c5 	bfc	r0, #3, #3
   26ec2:	f362 108f 	bfi	r0, r2, #6, #10
   26ec6:	4911      	ldr	r1, [pc, #68]	; (26f0c <event_handler+0x214>)
   26ec8:	4a06      	ldr	r2, [pc, #24]	; (26ee4 <event_handler+0x1ec>)
   26eca:	f01f fbea 	bl	466a2 <log_string_sync>
		evt.type = CLOUD_EVT_FOTA_DONE;
   26ece:	2308      	movs	r3, #8
   26ed0:	e78c      	b.n	26dec <event_handler+0xf4>
   26ed2:	bf00      	nop
   26ed4:	20023c7c 	.word	0x20023c7c
   26ed8:	000490d0 	.word	0x000490d0
   26edc:	00049018 	.word	0x00049018
   26ee0:	0004db08 	.word	0x0004db08
   26ee4:	0004d9ab 	.word	0x0004d9ab
   26ee8:	0004da31 	.word	0x0004da31
   26eec:	0004da6b 	.word	0x0004da6b
   26ef0:	0004dab6 	.word	0x0004dab6
   26ef4:	0004d9be 	.word	0x0004d9be
   26ef8:	0004d9e4 	.word	0x0004d9e4
   26efc:	0004da0f 	.word	0x0004da0f
   26f00:	0004da49 	.word	0x0004da49
   26f04:	0004da8d 	.word	0x0004da8d
   26f08:	0004dad2 	.word	0x0004dad2
   26f0c:	0004daec 	.word	0x0004daec

00026f10 <nfsm_get_current_state>:
	return m_current_state;
   26f10:	4b01      	ldr	r3, [pc, #4]	; (26f18 <nfsm_get_current_state+0x8>)
   26f12:	7818      	ldrb	r0, [r3, #0]
}
   26f14:	4770      	bx	lr
   26f16:	bf00      	nop
   26f18:	2002b893 	.word	0x2002b893

00026f1c <nfsm_set_current_state_and_notify>:
{
   26f1c:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("state: %d", state);
   26f1e:	2304      	movs	r3, #4
{
   26f20:	4605      	mov	r5, r0
	LOG_DBG("state: %d", state);
   26f22:	f04f 0000 	mov.w	r0, #0
   26f26:	4a0d      	ldr	r2, [pc, #52]	; (26f5c <nfsm_set_current_state_and_notify+0x40>)
   26f28:	f363 0002 	bfi	r0, r3, #0, #3
   26f2c:	4b0c      	ldr	r3, [pc, #48]	; (26f60 <nfsm_set_current_state_and_notify+0x44>)
   26f2e:	f36f 00c5 	bfc	r0, #3, #3
   26f32:	1a9b      	subs	r3, r3, r2
   26f34:	08db      	lsrs	r3, r3, #3
   26f36:	f363 108f 	bfi	r0, r3, #6, #10
{
   26f3a:	460c      	mov	r4, r1
	LOG_DBG("state: %d", state);
   26f3c:	462b      	mov	r3, r5
   26f3e:	4a09      	ldr	r2, [pc, #36]	; (26f64 <nfsm_set_current_state_and_notify+0x48>)
   26f40:	4909      	ldr	r1, [pc, #36]	; (26f68 <nfsm_set_current_state_and_notify+0x4c>)
   26f42:	f01f fbae 	bl	466a2 <log_string_sync>
	m_current_state = state;
   26f46:	4b09      	ldr	r3, [pc, #36]	; (26f6c <nfsm_set_current_state_and_notify+0x50>)
   26f48:	701d      	strb	r5, [r3, #0]
	if ((m_event_handler != NULL) && (evt != NULL)) {
   26f4a:	4b09      	ldr	r3, [pc, #36]	; (26f70 <nfsm_set_current_state_and_notify+0x54>)
   26f4c:	681b      	ldr	r3, [r3, #0]
   26f4e:	b123      	cbz	r3, 26f5a <nfsm_set_current_state_and_notify+0x3e>
   26f50:	b11c      	cbz	r4, 26f5a <nfsm_set_current_state_and_notify+0x3e>
		m_event_handler(evt);
   26f52:	4620      	mov	r0, r4
}
   26f54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		m_event_handler(evt);
   26f58:	4718      	bx	r3
}
   26f5a:	bd70      	pop	{r4, r5, r6, pc}
   26f5c:	00049018 	.word	0x00049018
   26f60:	000490d0 	.word	0x000490d0
   26f64:	0004d989 	.word	0x0004d989
   26f68:	0004db23 	.word	0x0004db23
   26f6c:	2002b893 	.word	0x2002b893
   26f70:	20023c78 	.word	0x20023c78

00026f74 <nrf_cloud_init>:
{
   26f74:	b538      	push	{r3, r4, r5, lr}
	if (m_current_state != STATE_IDLE) {
   26f76:	4c0d      	ldr	r4, [pc, #52]	; (26fac <nrf_cloud_init+0x38>)
{
   26f78:	4605      	mov	r5, r0
	if (m_current_state != STATE_IDLE) {
   26f7a:	7823      	ldrb	r3, [r4, #0]
   26f7c:	b983      	cbnz	r3, 26fa0 <nrf_cloud_init+0x2c>
	if (param->event_handler == NULL) {
   26f7e:	6803      	ldr	r3, [r0, #0]
   26f80:	b18b      	cbz	r3, 26fa6 <nrf_cloud_init+0x32>
	err = nfsm_init();
   26f82:	f021 fc63 	bl	4884c <nfsm_init>
	if (err) {
   26f86:	b950      	cbnz	r0, 26f9e <nrf_cloud_init+0x2a>
	err = nrf_codec_init();
   26f88:	f021 fbd2 	bl	48730 <nrf_codec_init>
	if (err) {
   26f8c:	b938      	cbnz	r0, 26f9e <nrf_cloud_init+0x2a>
	err = nct_init();
   26f8e:	f001 fb33 	bl	285f8 <nct_init>
	if (err) {
   26f92:	b920      	cbnz	r0, 26f9e <nrf_cloud_init+0x2a>
	m_event_handler = param->event_handler;
   26f94:	4b06      	ldr	r3, [pc, #24]	; (26fb0 <nrf_cloud_init+0x3c>)
   26f96:	682a      	ldr	r2, [r5, #0]
   26f98:	601a      	str	r2, [r3, #0]
	m_current_state = STATE_INITIALIZED;
   26f9a:	2301      	movs	r3, #1
   26f9c:	7023      	strb	r3, [r4, #0]
}
   26f9e:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
   26fa0:	f06f 000c 	mvn.w	r0, #12
   26fa4:	e7fb      	b.n	26f9e <nrf_cloud_init+0x2a>
		return -EINVAL;
   26fa6:	f06f 0015 	mvn.w	r0, #21
   26faa:	e7f8      	b.n	26f9e <nrf_cloud_init+0x2a>
   26fac:	2002b893 	.word	0x2002b893
   26fb0:	20023c78 	.word	0x20023c78

00026fb4 <init>:
{
   26fb4:	b507      	push	{r0, r1, r2, lr}
	const struct nrf_cloud_init_param params = {
   26fb6:	4a07      	ldr	r2, [pc, #28]	; (26fd4 <init+0x20>)
   26fb8:	ab02      	add	r3, sp, #8
   26fba:	f843 2d04 	str.w	r2, [r3, #-4]!
	backend->config->handler = handler;
   26fbe:	6842      	ldr	r2, [r0, #4]
   26fc0:	6051      	str	r1, [r2, #4]
	nrf_cloud_backend = (struct cloud_backend *)backend;
   26fc2:	4a05      	ldr	r2, [pc, #20]	; (26fd8 <init+0x24>)
   26fc4:	6010      	str	r0, [r2, #0]
	return nrf_cloud_init(&params);
   26fc6:	4618      	mov	r0, r3
   26fc8:	f7ff ffd4 	bl	26f74 <nrf_cloud_init>
}
   26fcc:	b003      	add	sp, #12
   26fce:	f85d fb04 	ldr.w	pc, [sp], #4
   26fd2:	bf00      	nop
   26fd4:	00026cf9 	.word	0x00026cf9
   26fd8:	20023c7c 	.word	0x20023c7c

00026fdc <nrf_cloud_connect>:
	if (NOT_VALID_STATE(STATE_INITIALIZED)) {
   26fdc:	4b04      	ldr	r3, [pc, #16]	; (26ff0 <nrf_cloud_connect+0x14>)
   26fde:	781b      	ldrb	r3, [r3, #0]
   26fe0:	2b01      	cmp	r3, #1
   26fe2:	d801      	bhi.n	26fe8 <nrf_cloud_connect+0xc>
	return nct_connect();
   26fe4:	f001 bc64 	b.w	288b0 <nct_connect>
}
   26fe8:	f06f 000c 	mvn.w	r0, #12
   26fec:	4770      	bx	lr
   26fee:	bf00      	nop
   26ff0:	2002b893 	.word	0x2002b893

00026ff4 <nrf_cloud_disconnect>:
	if (NOT_VALID_STATE(STATE_DC_CONNECTED)) {
   26ff4:	4b04      	ldr	r3, [pc, #16]	; (27008 <nrf_cloud_disconnect+0x14>)
   26ff6:	781b      	ldrb	r3, [r3, #0]
   26ff8:	2b0e      	cmp	r3, #14
   26ffa:	d801      	bhi.n	27000 <nrf_cloud_disconnect+0xc>
	return nct_disconnect();
   26ffc:	f001 be8c 	b.w	28d18 <nct_disconnect>
}
   27000:	f06f 000c 	mvn.w	r0, #12
   27004:	4770      	bx	lr
   27006:	bf00      	nop
   27008:	2002b893 	.word	0x2002b893

0002700c <nrf_cloud_user_associate>:
{
   2700c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (param == NULL) {
   2700e:	4604      	mov	r4, r0
   27010:	b1f0      	cbz	r0, 27050 <nrf_cloud_user_associate+0x44>
	if (NOT_VALID_STATE(STATE_UA_INPUT_WAIT)) {
   27012:	4b12      	ldr	r3, [pc, #72]	; (2705c <nrf_cloud_user_associate+0x50>)
   27014:	781b      	ldrb	r3, [r3, #0]
   27016:	2b09      	cmp	r3, #9
   27018:	d81d      	bhi.n	27056 <nrf_cloud_user_associate+0x4a>
	struct nct_cc_data ua_msg = {
   2701a:	2210      	movs	r2, #16
   2701c:	2100      	movs	r1, #0
   2701e:	4668      	mov	r0, sp
   27020:	f018 fe94 	bl	3fd4c <memset>
   27024:	f242 534b 	movw	r3, #9547	; 0x254b
   27028:	9302      	str	r3, [sp, #8]
   2702a:	2301      	movs	r3, #1
	err = nrf_cloud_encode_ua(param, &ua_msg.data);
   2702c:	4620      	mov	r0, r4
   2702e:	4669      	mov	r1, sp
	struct nct_cc_data ua_msg = {
   27030:	f88d 300c 	strb.w	r3, [sp, #12]
	err = nrf_cloud_encode_ua(param, &ua_msg.data);
   27034:	f000 f8f8 	bl	27228 <nrf_cloud_encode_ua>
	if (err) {
   27038:	4604      	mov	r4, r0
   2703a:	b930      	cbnz	r0, 2704a <nrf_cloud_user_associate+0x3e>
	err = nct_cc_send(&ua_msg);
   2703c:	4668      	mov	r0, sp
   2703e:	f001 fd1b 	bl	28a78 <nct_cc_send>
   27042:	4604      	mov	r4, r0
	nrf_cloud_free((void *)ua_msg.data.ptr);
   27044:	9801      	ldr	r0, [sp, #4]
   27046:	f021 fcbe 	bl	489c6 <k_free>
}
   2704a:	4620      	mov	r0, r4
   2704c:	b004      	add	sp, #16
   2704e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   27050:	f06f 0415 	mvn.w	r4, #21
   27054:	e7f9      	b.n	2704a <nrf_cloud_user_associate+0x3e>
		return -EACCES;
   27056:	f06f 040c 	mvn.w	r4, #12
   2705a:	e7f6      	b.n	2704a <nrf_cloud_user_associate+0x3e>
   2705c:	2002b893 	.word	0x2002b893

00027060 <send>:
	return nrf_cloud_disconnect();
}

static int send(const struct cloud_backend *const backend,
		const struct cloud_msg *const msg)
{
   27060:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err = 0;

	if (msg->endpoint.len != 0) {
   27062:	694d      	ldr	r5, [r1, #20]
   27064:	2d00      	cmp	r5, #0
   27066:	d17b      	bne.n	27160 <send+0x100>
		/* Unsupported case where topic is not the default. */
		return -ENOTSUP;
	}

	switch (msg->endpoint.type) {
   27068:	7b0e      	ldrb	r6, [r1, #12]
   2706a:	2e01      	cmp	r6, #1
   2706c:	d05b      	beq.n	27126 <send+0xc6>
   2706e:	d315      	bcc.n	2709c <send+0x3c>
   27070:	2e03      	cmp	r6, #3
   27072:	d03a      	beq.n	270ea <send+0x8a>
			return err;
		}
		break;
	}
	default:
		LOG_DBG("Unknown cloud endpoint type: %d", msg->endpoint.type);
   27074:	2304      	movs	r3, #4
   27076:	f04f 0000 	mov.w	r0, #0
   2707a:	4a3b      	ldr	r2, [pc, #236]	; (27168 <send+0x108>)
   2707c:	f363 0002 	bfi	r0, r3, #0, #3
   27080:	4b3a      	ldr	r3, [pc, #232]	; (2716c <send+0x10c>)
   27082:	f365 00c5 	bfi	r0, r5, #3, #3
   27086:	1a9b      	subs	r3, r3, r2
   27088:	08db      	lsrs	r3, r3, #3
   2708a:	f363 108f 	bfi	r0, r3, #6, #10
   2708e:	4a38      	ldr	r2, [pc, #224]	; (27170 <send+0x110>)
   27090:	4633      	mov	r3, r6
   27092:	4938      	ldr	r1, [pc, #224]	; (27174 <send+0x114>)
   27094:	f01f fb05 	bl	466a2 <log_string_sync>

	if (err) {
		return err;
	}

	return 0;
   27098:	462c      	mov	r4, r5
   2709a:	e00a      	b.n	270b2 <send+0x52>
		const struct nct_dc_data buf = {
   2709c:	684b      	ldr	r3, [r1, #4]
   2709e:	9502      	str	r5, [sp, #8]
   270a0:	9300      	str	r3, [sp, #0]
   270a2:	680b      	ldr	r3, [r1, #0]
   270a4:	9301      	str	r3, [sp, #4]
		if (msg->qos == CLOUD_QOS_AT_MOST_ONCE) {
   270a6:	7a0b      	ldrb	r3, [r1, #8]
   270a8:	b933      	cbnz	r3, 270b8 <send+0x58>
			err = nct_dc_stream(&buf);
   270aa:	4668      	mov	r0, sp
   270ac:	f021 fbd3 	bl	48856 <nct_dc_stream>
			err = nct_dc_send(&buf);
   270b0:	4604      	mov	r4, r0
}
   270b2:	4620      	mov	r0, r4
   270b4:	b004      	add	sp, #16
   270b6:	bd70      	pop	{r4, r5, r6, pc}
		} else if (msg->qos == CLOUD_QOS_AT_LEAST_ONCE) {
   270b8:	2b01      	cmp	r3, #1
   270ba:	d103      	bne.n	270c4 <send+0x64>
			err = nct_dc_send(&buf);
   270bc:	4668      	mov	r0, sp
   270be:	f021 fbc7 	bl	48850 <nct_dc_send>
   270c2:	e7f5      	b.n	270b0 <send+0x50>
			LOG_ERR("Unsupported QoS setting.");
   270c4:	2301      	movs	r3, #1
   270c6:	f04f 0000 	mov.w	r0, #0
   270ca:	4a27      	ldr	r2, [pc, #156]	; (27168 <send+0x108>)
   270cc:	f363 0002 	bfi	r0, r3, #0, #3
   270d0:	4b26      	ldr	r3, [pc, #152]	; (2716c <send+0x10c>)
   270d2:	f365 00c5 	bfi	r0, r5, #3, #3
   270d6:	1a9b      	subs	r3, r3, r2
   270d8:	08db      	lsrs	r3, r3, #3
   270da:	f363 108f 	bfi	r0, r3, #6, #10
   270de:	4926      	ldr	r1, [pc, #152]	; (27178 <send+0x118>)
   270e0:	f01f fadf 	bl	466a2 <log_string_sync>
			return err;
   270e4:	f06f 0415 	mvn.w	r4, #21
   270e8:	e7e3      	b.n	270b2 <send+0x52>
		const struct nrf_cloud_ua_param ua = {
   270ea:	684b      	ldr	r3, [r1, #4]
		err = nrf_cloud_user_associate(&ua);
   270ec:	4668      	mov	r0, sp
		const struct nrf_cloud_ua_param ua = {
   270ee:	9301      	str	r3, [sp, #4]
   270f0:	680b      	ldr	r3, [r1, #0]
   270f2:	f88d 5000 	strb.w	r5, [sp]
   270f6:	9302      	str	r3, [sp, #8]
		err = nrf_cloud_user_associate(&ua);
   270f8:	f7ff ff88 	bl	2700c <nrf_cloud_user_associate>
		if (err) {
   270fc:	4604      	mov	r4, r0
   270fe:	2800      	cmp	r0, #0
   27100:	d0d7      	beq.n	270b2 <send+0x52>
			LOG_ERR("nrf_cloud_user_associate failed: %d\n", err);
   27102:	2301      	movs	r3, #1
   27104:	f04f 0000 	mov.w	r0, #0
   27108:	4a17      	ldr	r2, [pc, #92]	; (27168 <send+0x108>)
   2710a:	f363 0002 	bfi	r0, r3, #0, #3
   2710e:	4b17      	ldr	r3, [pc, #92]	; (2716c <send+0x10c>)
   27110:	f365 00c5 	bfi	r0, r5, #3, #3
   27114:	1a9b      	subs	r3, r3, r2
   27116:	4622      	mov	r2, r4
   27118:	08db      	lsrs	r3, r3, #3
   2711a:	4918      	ldr	r1, [pc, #96]	; (2717c <send+0x11c>)
   2711c:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   27120:	f01f fabf 	bl	466a2 <log_string_sync>
   27124:	e7c5      	b.n	270b2 <send+0x52>
		struct nct_cc_data shadow_data = {
   27126:	684b      	ldr	r3, [r1, #4]
		err = nct_cc_send(&shadow_data);
   27128:	4668      	mov	r0, sp
		struct nct_cc_data shadow_data = {
   2712a:	9300      	str	r3, [sp, #0]
   2712c:	680b      	ldr	r3, [r1, #0]
   2712e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   27132:	9301      	str	r3, [sp, #4]
   27134:	f88d 600c 	strb.w	r6, [sp, #12]
		err = nct_cc_send(&shadow_data);
   27138:	f001 fc9e 	bl	28a78 <nct_cc_send>
		if (err) {
   2713c:	4604      	mov	r4, r0
   2713e:	2800      	cmp	r0, #0
   27140:	d0b7      	beq.n	270b2 <send+0x52>
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   27142:	f04f 0000 	mov.w	r0, #0
   27146:	4a08      	ldr	r2, [pc, #32]	; (27168 <send+0x108>)
   27148:	4b08      	ldr	r3, [pc, #32]	; (2716c <send+0x10c>)
   2714a:	f366 0002 	bfi	r0, r6, #0, #3
   2714e:	1a9b      	subs	r3, r3, r2
   27150:	f365 00c5 	bfi	r0, r5, #3, #3
   27154:	08db      	lsrs	r3, r3, #3
   27156:	f363 108f 	bfi	r0, r3, #6, #10
   2715a:	4622      	mov	r2, r4
   2715c:	4908      	ldr	r1, [pc, #32]	; (27180 <send+0x120>)
   2715e:	e7df      	b.n	27120 <send+0xc0>
		return -ENOTSUP;
   27160:	f06f 0485 	mvn.w	r4, #133	; 0x85
   27164:	e7a5      	b.n	270b2 <send+0x52>
   27166:	bf00      	nop
   27168:	00049018 	.word	0x00049018
   2716c:	000490d0 	.word	0x000490d0
   27170:	0004d9b9 	.word	0x0004d9b9
   27174:	0004db8e 	.word	0x0004db8e
   27178:	0004db31 	.word	0x0004db31
   2717c:	0004db4a 	.word	0x0004db4a
   27180:	0004db6f 	.word	0x0004db6f

00027184 <nct_input>:
	return nfsm_handle_incoming_event(evt, m_current_state);
   27184:	4b01      	ldr	r3, [pc, #4]	; (2718c <nct_input+0x8>)
   27186:	7819      	ldrb	r1, [r3, #0]
   27188:	f000 bf8e 	b.w	280a8 <nfsm_handle_incoming_event>
   2718c:	2002b893 	.word	0x2002b893

00027190 <nct_apply_update>:
	m_event_handler(&evt);
   27190:	4b01      	ldr	r3, [pc, #4]	; (27198 <nct_apply_update+0x8>)
   27192:	4802      	ldr	r0, [pc, #8]	; (2719c <nct_apply_update+0xc>)
   27194:	681b      	ldr	r3, [r3, #0]
   27196:	4718      	bx	r3
   27198:	20023c78 	.word	0x20023c78
   2719c:	00049734 	.word	0x00049734

000271a0 <encode_ua_button_sequence>:
	}
};

static void encode_ua_button_sequence(const struct nrf_cloud_data *sequence,
				      struct nrf_cloud_data *output)
{
   271a0:	b570      	push	{r4, r5, r6, lr}
   271a2:	460c      	mov	r4, r1
	u32_t len = 0;
	const u8_t *input = sequence->ptr;
	u32_t *encoded = nrf_cloud_calloc((sequence->len / 2) + 1, 1);
   271a4:	2101      	movs	r1, #1
{
   271a6:	4606      	mov	r6, r0
	u32_t *encoded = nrf_cloud_calloc((sequence->len / 2) + 1, 1);
   271a8:	e9d0 0500 	ldrd	r0, r5, [r0]
   271ac:	0840      	lsrs	r0, r0, #1
   271ae:	4408      	add	r0, r1
   271b0:	f021 fc0e 	bl	489d0 <k_calloc>

	if (encoded == NULL) {
   271b4:	4601      	mov	r1, r0
   271b6:	bb70      	cbnz	r0, 27216 <encode_ua_button_sequence+0x76>
		encoded[len++] = ((input[sequence->len - 1] << 4) & 0xF0);
	}

	output->ptr = encoded;
	output->len = len;
}
   271b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Mem alloc failed!");
   271bc:	2301      	movs	r3, #1
   271be:	f04f 0000 	mov.w	r0, #0
   271c2:	4a16      	ldr	r2, [pc, #88]	; (2721c <encode_ua_button_sequence+0x7c>)
   271c4:	f363 0002 	bfi	r0, r3, #0, #3
   271c8:	4b15      	ldr	r3, [pc, #84]	; (27220 <encode_ua_button_sequence+0x80>)
   271ca:	f361 00c5 	bfi	r0, r1, #3, #3
   271ce:	1a9b      	subs	r3, r3, r2
   271d0:	08db      	lsrs	r3, r3, #3
   271d2:	f363 108f 	bfi	r0, r3, #6, #10
   271d6:	4913      	ldr	r1, [pc, #76]	; (27224 <encode_ua_button_sequence+0x84>)
   271d8:	f01f ba63 	b.w	466a2 <log_string_sync>
		    ((input[i] << 4) & 0xF0) + (input[i + 1] & 0x0F);
   271dc:	f815 2013 	ldrb.w	r2, [r5, r3, lsl #1]
   271e0:	4428      	add	r0, r5
   271e2:	7840      	ldrb	r0, [r0, #1]
   271e4:	0112      	lsls	r2, r2, #4
   271e6:	b2d2      	uxtb	r2, r2
   271e8:	f000 000f 	and.w	r0, r0, #15
   271ec:	4402      	add	r2, r0
		encoded[len++] =
   271ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   271f2:	3301      	adds	r3, #1
	for (u32_t i = 0; i < sequence->len; i += 2) {
   271f4:	6832      	ldr	r2, [r6, #0]
   271f6:	0058      	lsls	r0, r3, #1
   271f8:	4282      	cmp	r2, r0
   271fa:	d8ef      	bhi.n	271dc <encode_ua_button_sequence+0x3c>
	if (sequence->len % 2) {
   271fc:	07d0      	lsls	r0, r2, #31
   271fe:	d507      	bpl.n	27210 <encode_ua_button_sequence+0x70>
		encoded[len++] = ((input[sequence->len - 1] << 4) & 0xF0);
   27200:	4415      	add	r5, r2
   27202:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   27206:	0112      	lsls	r2, r2, #4
   27208:	b2d2      	uxtb	r2, r2
   2720a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   2720e:	3301      	adds	r3, #1
	output->len = len;
   27210:	e9c4 3100 	strd	r3, r1, [r4]
}
   27214:	bd70      	pop	{r4, r5, r6, pc}
   27216:	2300      	movs	r3, #0
   27218:	e7ec      	b.n	271f4 <encode_ua_button_sequence+0x54>
   2721a:	bf00      	nop
   2721c:	00049018 	.word	0x00049018
   27220:	000490d8 	.word	0x000490d8
   27224:	0004dbf9 	.word	0x0004dbf9

00027228 <nrf_cloud_encode_ua>:
	return 0;
}

int nrf_cloud_encode_ua(const struct nrf_cloud_ua_param *input,
			struct nrf_cloud_data *output)
{
   27228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2722c:	b085      	sub	sp, #20
   2722e:	9100      	str	r1, [sp, #0]
	__ASSERT_NO_MSG(input != NULL);
   27230:	4604      	mov	r4, r0
   27232:	b948      	cbnz	r0, 27248 <nrf_cloud_encode_ua+0x20>
   27234:	495c      	ldr	r1, [pc, #368]	; (273a8 <nrf_cloud_encode_ua+0x180>)
   27236:	485d      	ldr	r0, [pc, #372]	; (273ac <nrf_cloud_encode_ua+0x184>)
   27238:	23a3      	movs	r3, #163	; 0xa3
   2723a:	4a5d      	ldr	r2, [pc, #372]	; (273b0 <nrf_cloud_encode_ua+0x188>)
   2723c:	f01f fa0e 	bl	4665c <printk>
   27240:	21a3      	movs	r1, #163	; 0xa3
   27242:	485b      	ldr	r0, [pc, #364]	; (273b0 <nrf_cloud_encode_ua+0x188>)
   27244:	f01f fa17 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   27248:	9b00      	ldr	r3, [sp, #0]
   2724a:	b94b      	cbnz	r3, 27260 <nrf_cloud_encode_ua+0x38>
   2724c:	4959      	ldr	r1, [pc, #356]	; (273b4 <nrf_cloud_encode_ua+0x18c>)
   2724e:	4857      	ldr	r0, [pc, #348]	; (273ac <nrf_cloud_encode_ua+0x184>)
   27250:	23a4      	movs	r3, #164	; 0xa4
   27252:	4a57      	ldr	r2, [pc, #348]	; (273b0 <nrf_cloud_encode_ua+0x188>)
   27254:	f01f fa02 	bl	4665c <printk>
   27258:	21a4      	movs	r1, #164	; 0xa4
   2725a:	4855      	ldr	r0, [pc, #340]	; (273b0 <nrf_cloud_encode_ua+0x188>)
   2725c:	f01f fa0b 	bl	46676 <assert_post_action>

	/* Encoded sequence. */
	struct nrf_cloud_data enc_seq = {0};
	const char *method = ua_encode_info[input->type].desc_str;
   27260:	4620      	mov	r0, r4
	struct nrf_cloud_data enc_seq = {0};
   27262:	2300      	movs	r3, #0
	const char *method = ua_encode_info[input->type].desc_str;
   27264:	f810 2b04 	ldrb.w	r2, [r0], #4
	struct nrf_cloud_data enc_seq = {0};
   27268:	e9cd 3302 	strd	r3, r3, [sp, #8]
	const char *method = ua_encode_info[input->type].desc_str;
   2726c:	4b52      	ldr	r3, [pc, #328]	; (273b8 <nrf_cloud_encode_ua+0x190>)
	int ret;

	ua_encode_info[input->type].encode(&input->sequence, &enc_seq);
   2726e:	a902      	add	r1, sp, #8
	const char *method = ua_encode_info[input->type].desc_str;
   27270:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   27274:	9301      	str	r3, [sp, #4]
	ua_encode_info[input->type].encode(&input->sequence, &enc_seq);
   27276:	f7ff ff93 	bl	271a0 <encode_ua_button_sequence>

	cJSON *root_obj = cJSON_CreateObject();
   2727a:	f7fd fe67 	bl	24f4c <cJSON_CreateObject>
   2727e:	4606      	mov	r6, r0
	cJSON *state_obj = cJSON_CreateObject();
   27280:	f7fd fe64 	bl	24f4c <cJSON_CreateObject>
   27284:	4682      	mov	sl, r0
	cJSON *reported_obj = cJSON_CreateObject();
   27286:	f7fd fe61 	bl	24f4c <cJSON_CreateObject>
   2728a:	4681      	mov	r9, r0
	cJSON *pairing_obj = cJSON_CreateObject();
   2728c:	f7fd fe5e 	bl	24f4c <cJSON_CreateObject>
   27290:	4680      	mov	r8, r0
	cJSON *config_obj = cJSON_CreateObject();
   27292:	f7fd fe5b 	bl	24f4c <cJSON_CreateObject>
   27296:	4605      	mov	r5, r0
	cJSON *status_obj = cJSON_CreateObject();
   27298:	f7fd fe58 	bl	24f4c <cJSON_CreateObject>
   2729c:	4607      	mov	r7, r0
	cJSON *pattern_obj = cJSON_CreateIntArray(enc_seq.ptr, enc_seq.len);
   2729e:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
   272a2:	f020 fbff 	bl	47aa4 <cJSON_CreateIntArray>
   272a6:	4683      	mov	fp, r0

	if ((root_obj  == NULL) || (state_obj == NULL) ||
   272a8:	b15e      	cbz	r6, 272c2 <nrf_cloud_encode_ua+0x9a>
   272aa:	f1ba 0f00 	cmp.w	sl, #0
   272ae:	d008      	beq.n	272c2 <nrf_cloud_encode_ua+0x9a>
   272b0:	f1b9 0f00 	cmp.w	r9, #0
   272b4:	d005      	beq.n	272c2 <nrf_cloud_encode_ua+0x9a>
	    (reported_obj == NULL) || (pairing_obj == NULL) ||
   272b6:	f1b8 0f00 	cmp.w	r8, #0
   272ba:	d002      	beq.n	272c2 <nrf_cloud_encode_ua+0x9a>
   272bc:	b10d      	cbz	r5, 272c2 <nrf_cloud_encode_ua+0x9a>
	    (config_obj == NULL) || (status_obj == NULL)   ||
   272be:	b107      	cbz	r7, 272c2 <nrf_cloud_encode_ua+0x9a>
   272c0:	b9e8      	cbnz	r0, 272fe <nrf_cloud_encode_ua+0xd6>
	    (pattern_obj == NULL)) {
		cJSON_Delete(root_obj);
   272c2:	4630      	mov	r0, r6
	ret += json_add_obj(reported_obj, "pairingStatus", status_obj);
	ret += json_add_obj(state_obj, "reported", reported_obj);
	ret += json_add_obj(root_obj, "state", state_obj);

	if (ret != 0) {
		cJSON_Delete(root_obj);
   272c4:	f7fd fd7c 	bl	24dc0 <cJSON_Delete>
		cJSON_Delete(state_obj);
   272c8:	4650      	mov	r0, sl
   272ca:	f7fd fd79 	bl	24dc0 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   272ce:	4648      	mov	r0, r9
   272d0:	f7fd fd76 	bl	24dc0 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   272d4:	4640      	mov	r0, r8
   272d6:	f7fd fd73 	bl	24dc0 <cJSON_Delete>
		cJSON_Delete(config_obj);
   272da:	4628      	mov	r0, r5
   272dc:	f7fd fd70 	bl	24dc0 <cJSON_Delete>
		cJSON_Delete(status_obj);
   272e0:	4638      	mov	r0, r7
   272e2:	f7fd fd6d 	bl	24dc0 <cJSON_Delete>
		cJSON_Delete(pattern_obj);
   272e6:	4658      	mov	r0, fp
   272e8:	f7fd fd6a 	bl	24dc0 <cJSON_Delete>

		nrf_cloud_free((void *)enc_seq.ptr);
   272ec:	9803      	ldr	r0, [sp, #12]
   272ee:	f021 fb6a 	bl	489c6 <k_free>
		return -ENOMEM;
   272f2:	f06f 040b 	mvn.w	r4, #11

	output->ptr = buffer;
	output->len = strlen(buffer);

	return 0;
}
   272f6:	4620      	mov	r0, r4
   272f8:	b005      	add	sp, #20
   272fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ret = json_add_num(config_obj, "iteration", 1);
   272fe:	4b2f      	ldr	r3, [pc, #188]	; (273bc <nrf_cloud_encode_ua+0x194>)
   27300:	2200      	movs	r2, #0
   27302:	492f      	ldr	r1, [pc, #188]	; (273c0 <nrf_cloud_encode_ua+0x198>)
   27304:	4628      	mov	r0, r5
   27306:	f021 f9ae 	bl	48666 <json_add_num>
	ret += json_add_str(config_obj, "method", method);
   2730a:	9a01      	ldr	r2, [sp, #4]
	ret = json_add_num(config_obj, "iteration", 1);
   2730c:	4604      	mov	r4, r0
	ret += json_add_str(config_obj, "method", method);
   2730e:	492d      	ldr	r1, [pc, #180]	; (273c4 <nrf_cloud_encode_ua+0x19c>)
   27310:	4628      	mov	r0, r5
   27312:	f021 f9ba 	bl	4868a <json_add_str>
   27316:	4404      	add	r4, r0
	ret += json_add_num(config_obj, "length", enc_seq.len);
   27318:	9802      	ldr	r0, [sp, #8]
   2731a:	f7f1 f9c3 	bl	186a4 <__aeabi_ui2d>
   2731e:	460b      	mov	r3, r1
   27320:	4602      	mov	r2, r0
   27322:	4929      	ldr	r1, [pc, #164]	; (273c8 <nrf_cloud_encode_ua+0x1a0>)
   27324:	4628      	mov	r0, r5
   27326:	f021 f99e 	bl	48666 <json_add_num>
	ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   2732a:	4a28      	ldr	r2, [pc, #160]	; (273cc <nrf_cloud_encode_ua+0x1a4>)
	ret += json_add_num(config_obj, "length", enc_seq.len);
   2732c:	4404      	add	r4, r0
	ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   2732e:	4928      	ldr	r1, [pc, #160]	; (273d0 <nrf_cloud_encode_ua+0x1a8>)
   27330:	4640      	mov	r0, r8
   27332:	f021 f9aa 	bl	4868a <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   27336:	462a      	mov	r2, r5
	ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   27338:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   2733a:	4926      	ldr	r1, [pc, #152]	; (273d4 <nrf_cloud_encode_ua+0x1ac>)
   2733c:	4640      	mov	r0, r8
   2733e:	f020 fbae 	bl	47a9e <cJSON_AddItemToObject>
	ret += json_add_str(status_obj, "method", method);
   27342:	9a01      	ldr	r2, [sp, #4]
   27344:	491f      	ldr	r1, [pc, #124]	; (273c4 <nrf_cloud_encode_ua+0x19c>)
   27346:	4638      	mov	r0, r7
   27348:	f021 f99f 	bl	4868a <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   2734c:	465a      	mov	r2, fp
   2734e:	4922      	ldr	r1, [pc, #136]	; (273d8 <nrf_cloud_encode_ua+0x1b0>)
	ret += json_add_str(status_obj, "method", method);
   27350:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   27352:	4638      	mov	r0, r7
   27354:	f020 fba3 	bl	47a9e <cJSON_AddItemToObject>
   27358:	4642      	mov	r2, r8
   2735a:	4920      	ldr	r1, [pc, #128]	; (273dc <nrf_cloud_encode_ua+0x1b4>)
   2735c:	4648      	mov	r0, r9
   2735e:	f020 fb9e 	bl	47a9e <cJSON_AddItemToObject>
   27362:	463a      	mov	r2, r7
   27364:	491e      	ldr	r1, [pc, #120]	; (273e0 <nrf_cloud_encode_ua+0x1b8>)
   27366:	4648      	mov	r0, r9
   27368:	f020 fb99 	bl	47a9e <cJSON_AddItemToObject>
   2736c:	464a      	mov	r2, r9
   2736e:	491d      	ldr	r1, [pc, #116]	; (273e4 <nrf_cloud_encode_ua+0x1bc>)
   27370:	4650      	mov	r0, sl
   27372:	f020 fb94 	bl	47a9e <cJSON_AddItemToObject>
   27376:	4630      	mov	r0, r6
   27378:	4652      	mov	r2, sl
   2737a:	4915      	ldr	r1, [pc, #84]	; (273d0 <nrf_cloud_encode_ua+0x1a8>)
   2737c:	f020 fb8f 	bl	47a9e <cJSON_AddItemToObject>
		cJSON_Delete(root_obj);
   27380:	4630      	mov	r0, r6
	if (ret != 0) {
   27382:	2c00      	cmp	r4, #0
   27384:	d19e      	bne.n	272c4 <nrf_cloud_encode_ua+0x9c>
	buffer = cJSON_PrintUnformatted(root_obj);
   27386:	f020 fb7a 	bl	47a7e <cJSON_PrintUnformatted>
   2738a:	4605      	mov	r5, r0
	nrf_cloud_free((void *)enc_seq.ptr);
   2738c:	9803      	ldr	r0, [sp, #12]
   2738e:	f021 fb1a 	bl	489c6 <k_free>
	cJSON_Delete(root_obj);
   27392:	4630      	mov	r0, r6
   27394:	f7fd fd14 	bl	24dc0 <cJSON_Delete>
	output->ptr = buffer;
   27398:	9b00      	ldr	r3, [sp, #0]
	output->len = strlen(buffer);
   2739a:	4628      	mov	r0, r5
	output->ptr = buffer;
   2739c:	605d      	str	r5, [r3, #4]
	output->len = strlen(buffer);
   2739e:	f019 f8f1 	bl	40584 <strlen>
   273a2:	9b00      	ldr	r3, [sp, #0]
   273a4:	6018      	str	r0, [r3, #0]
	return 0;
   273a6:	e7a6      	b.n	272f6 <nrf_cloud_encode_ua+0xce>
   273a8:	0004dd78 	.word	0x0004dd78
   273ac:	0004b5bf 	.word	0x0004b5bf
   273b0:	0004dd38 	.word	0x0004dd38
   273b4:	0004bbc4 	.word	0x0004bbc4
   273b8:	00049768 	.word	0x00049768
   273bc:	3ff00000 	.word	0x3ff00000
   273c0:	0004dd8d 	.word	0x0004dd8d
   273c4:	0004dd97 	.word	0x0004dd97
   273c8:	0004bce7 	.word	0x0004bce7
   273cc:	0004dd9e 	.word	0x0004dd9e
   273d0:	0004bbea 	.word	0x0004bbea
   273d4:	000500cb 	.word	0x000500cb
   273d8:	0004ddab 	.word	0x0004ddab
   273dc:	0004ddb3 	.word	0x0004ddb3
   273e0:	0004ddbb 	.word	0x0004ddbb
   273e4:	0004bbe1 	.word	0x0004bbe1

000273e8 <nrf_cloud_decode_requested_state>:
	return 0;
}

int nrf_cloud_decode_requested_state(const struct nrf_cloud_data *input,
				     enum nfsm_state *requested_state)
{
   273e8:	b570      	push	{r4, r5, r6, lr}
   273ea:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(requested_state != NULL);
   273ec:	460c      	mov	r4, r1
   273ee:	b959      	cbnz	r1, 27408 <nrf_cloud_decode_requested_state+0x20>
   273f0:	4958      	ldr	r1, [pc, #352]	; (27554 <nrf_cloud_decode_requested_state+0x16c>)
   273f2:	4859      	ldr	r0, [pc, #356]	; (27558 <nrf_cloud_decode_requested_state+0x170>)
   273f4:	f44f 739e 	mov.w	r3, #316	; 0x13c
   273f8:	4a58      	ldr	r2, [pc, #352]	; (2755c <nrf_cloud_decode_requested_state+0x174>)
   273fa:	f01f f92f 	bl	4665c <printk>
   273fe:	f44f 719e 	mov.w	r1, #316	; 0x13c
   27402:	4856      	ldr	r0, [pc, #344]	; (2755c <nrf_cloud_decode_requested_state+0x174>)
   27404:	f01f f937 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   27408:	b95d      	cbnz	r5, 27422 <nrf_cloud_decode_requested_state+0x3a>
   2740a:	4955      	ldr	r1, [pc, #340]	; (27560 <nrf_cloud_decode_requested_state+0x178>)
   2740c:	4852      	ldr	r0, [pc, #328]	; (27558 <nrf_cloud_decode_requested_state+0x170>)
   2740e:	f240 133d 	movw	r3, #317	; 0x13d
   27412:	4a52      	ldr	r2, [pc, #328]	; (2755c <nrf_cloud_decode_requested_state+0x174>)
   27414:	f01f f922 	bl	4665c <printk>
   27418:	f240 113d 	movw	r1, #317	; 0x13d
   2741c:	484f      	ldr	r0, [pc, #316]	; (2755c <nrf_cloud_decode_requested_state+0x174>)
   2741e:	f01f f92a 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   27422:	686b      	ldr	r3, [r5, #4]
   27424:	b95b      	cbnz	r3, 2743e <nrf_cloud_decode_requested_state+0x56>
   27426:	494f      	ldr	r1, [pc, #316]	; (27564 <nrf_cloud_decode_requested_state+0x17c>)
   27428:	484b      	ldr	r0, [pc, #300]	; (27558 <nrf_cloud_decode_requested_state+0x170>)
   2742a:	f44f 739f 	mov.w	r3, #318	; 0x13e
   2742e:	4a4b      	ldr	r2, [pc, #300]	; (2755c <nrf_cloud_decode_requested_state+0x174>)
   27430:	f01f f914 	bl	4665c <printk>
   27434:	f44f 719f 	mov.w	r1, #318	; 0x13e
   27438:	4848      	ldr	r0, [pc, #288]	; (2755c <nrf_cloud_decode_requested_state+0x174>)
   2743a:	f01f f91c 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2743e:	682b      	ldr	r3, [r5, #0]
   27440:	b95b      	cbnz	r3, 2745a <nrf_cloud_decode_requested_state+0x72>
   27442:	4949      	ldr	r1, [pc, #292]	; (27568 <nrf_cloud_decode_requested_state+0x180>)
   27444:	4844      	ldr	r0, [pc, #272]	; (27558 <nrf_cloud_decode_requested_state+0x170>)
   27446:	f240 133f 	movw	r3, #319	; 0x13f
   2744a:	4a44      	ldr	r2, [pc, #272]	; (2755c <nrf_cloud_decode_requested_state+0x174>)
   2744c:	f01f f906 	bl	4665c <printk>
   27450:	f240 113f 	movw	r1, #319	; 0x13f
   27454:	4841      	ldr	r0, [pc, #260]	; (2755c <nrf_cloud_decode_requested_state+0x174>)
   27456:	f01f f90e 	bl	46676 <assert_post_action>
	cJSON *desired_obj;
	cJSON *pairing_obj;
	cJSON *pairing_state_obj;
	cJSON *topic_prefix_obj;

	root_obj = cJSON_Parse(input->ptr);
   2745a:	6868      	ldr	r0, [r5, #4]
   2745c:	f020 fb0b 	bl	47a76 <cJSON_Parse>
	if (root_obj == NULL) {
   27460:	4606      	mov	r6, r0
   27462:	b9b8      	cbnz	r0, 27494 <nrf_cloud_decode_requested_state+0xac>
		LOG_ERR("cJSON_Parse failed: %s",
   27464:	2301      	movs	r3, #1
   27466:	f04f 0400 	mov.w	r4, #0
   2746a:	4a40      	ldr	r2, [pc, #256]	; (2756c <nrf_cloud_decode_requested_state+0x184>)
   2746c:	f363 0402 	bfi	r4, r3, #0, #3
   27470:	4b3f      	ldr	r3, [pc, #252]	; (27570 <nrf_cloud_decode_requested_state+0x188>)
   27472:	f360 04c5 	bfi	r4, r0, #3, #3
   27476:	1a9b      	subs	r3, r3, r2
   27478:	08db      	lsrs	r3, r3, #3
   2747a:	6868      	ldr	r0, [r5, #4]
   2747c:	f363 148f 	bfi	r4, r3, #6, #10
   27480:	f01f f921 	bl	466c6 <log_strdup>
   27484:	493b      	ldr	r1, [pc, #236]	; (27574 <nrf_cloud_decode_requested_state+0x18c>)
   27486:	4602      	mov	r2, r0
   27488:	4620      	mov	r0, r4
   2748a:	f01f f90a 	bl	466a2 <log_string_sync>
	pairing_state_obj = json_object_decode(pairing_obj, "state");

	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
		LOG_DBG("No valid state found!");
		cJSON_Delete(root_obj);
		return -ENOENT;
   2748e:	f06f 0001 	mvn.w	r0, #1
	}

	cJSON_Delete(root_obj);

	return 0;
}
   27492:	bd70      	pop	{r4, r5, r6, pc}
	state_obj = json_object_decode(root_obj, "state");
   27494:	4938      	ldr	r1, [pc, #224]	; (27578 <nrf_cloud_decode_requested_state+0x190>)
   27496:	f021 f909 	bl	486ac <json_object_decode>
		desired_obj = json_object_decode(root_obj, "desired");
   2749a:	4938      	ldr	r1, [pc, #224]	; (2757c <nrf_cloud_decode_requested_state+0x194>)
	if (state_obj == NULL) {
   2749c:	b900      	cbnz	r0, 274a0 <nrf_cloud_decode_requested_state+0xb8>
		desired_obj = json_object_decode(root_obj, "desired");
   2749e:	4630      	mov	r0, r6
		desired_obj = json_object_decode(state_obj, "desired");
   274a0:	f021 f904 	bl	486ac <json_object_decode>
	topic_prefix_obj = json_object_decode(desired_obj,
   274a4:	4936      	ldr	r1, [pc, #216]	; (27580 <nrf_cloud_decode_requested_state+0x198>)
		desired_obj = json_object_decode(state_obj, "desired");
   274a6:	4605      	mov	r5, r0
	topic_prefix_obj = json_object_decode(desired_obj,
   274a8:	f021 f900 	bl	486ac <json_object_decode>
	if (topic_prefix_obj != NULL) {
   274ac:	b130      	cbz	r0, 274bc <nrf_cloud_decode_requested_state+0xd4>
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   274ae:	2307      	movs	r3, #7
		(*requested_state) = STATE_UA_PIN_WAIT;
   274b0:	7023      	strb	r3, [r4, #0]
	cJSON_Delete(root_obj);
   274b2:	4630      	mov	r0, r6
   274b4:	f7fd fc84 	bl	24dc0 <cJSON_Delete>
	return 0;
   274b8:	2000      	movs	r0, #0
   274ba:	e7ea      	b.n	27492 <nrf_cloud_decode_requested_state+0xaa>
	pairing_obj = json_object_decode(desired_obj, "pairing");
   274bc:	4931      	ldr	r1, [pc, #196]	; (27584 <nrf_cloud_decode_requested_state+0x19c>)
   274be:	4628      	mov	r0, r5
   274c0:	f021 f8f4 	bl	486ac <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, "state");
   274c4:	492c      	ldr	r1, [pc, #176]	; (27578 <nrf_cloud_decode_requested_state+0x190>)
   274c6:	f021 f8f1 	bl	486ac <json_object_decode>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   274ca:	b110      	cbz	r0, 274d2 <nrf_cloud_decode_requested_state+0xea>
   274cc:	68c3      	ldr	r3, [r0, #12]
   274ce:	2b10      	cmp	r3, #16
   274d0:	d014      	beq.n	274fc <nrf_cloud_decode_requested_state+0x114>
		LOG_DBG("No valid state found!");
   274d2:	2304      	movs	r3, #4
   274d4:	f04f 0000 	mov.w	r0, #0
   274d8:	4a24      	ldr	r2, [pc, #144]	; (2756c <nrf_cloud_decode_requested_state+0x184>)
   274da:	f363 0002 	bfi	r0, r3, #0, #3
   274de:	4b24      	ldr	r3, [pc, #144]	; (27570 <nrf_cloud_decode_requested_state+0x188>)
   274e0:	f36f 00c5 	bfc	r0, #3, #3
   274e4:	1a9b      	subs	r3, r3, r2
   274e6:	08db      	lsrs	r3, r3, #3
   274e8:	f363 108f 	bfi	r0, r3, #6, #10
   274ec:	4a26      	ldr	r2, [pc, #152]	; (27588 <nrf_cloud_decode_requested_state+0x1a0>)
   274ee:	4927      	ldr	r1, [pc, #156]	; (2758c <nrf_cloud_decode_requested_state+0x1a4>)
   274f0:	f01f f8d7 	bl	466a2 <log_string_sync>
		cJSON_Delete(root_obj);
   274f4:	4630      	mov	r0, r6
   274f6:	f7fd fc63 	bl	24dc0 <cJSON_Delete>
   274fa:	e7c8      	b.n	2748e <nrf_cloud_decode_requested_state+0xa6>
	const char *state_str = pairing_state_obj->valuestring;
   274fc:	6905      	ldr	r5, [r0, #16]
	if (compare(state_str, INITIATE_STR)) {
   274fe:	4924      	ldr	r1, [pc, #144]	; (27590 <nrf_cloud_decode_requested_state+0x1a8>)
   27500:	4628      	mov	r0, r5
   27502:	f021 f8d7 	bl	486b4 <compare>
   27506:	b108      	cbz	r0, 2750c <nrf_cloud_decode_requested_state+0x124>
		(*requested_state) = STATE_UA_INITIATE;
   27508:	2308      	movs	r3, #8
   2750a:	e7d1      	b.n	274b0 <nrf_cloud_decode_requested_state+0xc8>
	} else if (compare(state_str, PATTERN_WAIT_STR)) {
   2750c:	4921      	ldr	r1, [pc, #132]	; (27594 <nrf_cloud_decode_requested_state+0x1ac>)
   2750e:	4628      	mov	r0, r5
   27510:	f021 f8d0 	bl	486b4 <compare>
   27514:	b108      	cbz	r0, 2751a <nrf_cloud_decode_requested_state+0x132>
		(*requested_state) = STATE_UA_INPUT_WAIT;
   27516:	2309      	movs	r3, #9
   27518:	e7ca      	b.n	274b0 <nrf_cloud_decode_requested_state+0xc8>
	} else if (compare(state_str, PATTERN_MISMATCH_STR)) {
   2751a:	491f      	ldr	r1, [pc, #124]	; (27598 <nrf_cloud_decode_requested_state+0x1b0>)
   2751c:	4628      	mov	r0, r5
   2751e:	f021 f8c9 	bl	486b4 <compare>
   27522:	b108      	cbz	r0, 27528 <nrf_cloud_decode_requested_state+0x140>
		(*requested_state) = STATE_UA_INPUT_MISMATCH;
   27524:	230a      	movs	r3, #10
   27526:	e7c3      	b.n	274b0 <nrf_cloud_decode_requested_state+0xc8>
	} else if (compare(state_str, TIMEOUT_STR)) {
   27528:	491c      	ldr	r1, [pc, #112]	; (2759c <nrf_cloud_decode_requested_state+0x1b4>)
   2752a:	4628      	mov	r0, r5
   2752c:	f021 f8c2 	bl	486b4 <compare>
   27530:	b108      	cbz	r0, 27536 <nrf_cloud_decode_requested_state+0x14e>
		(*requested_state) = STATE_UA_INPUT_TIMEOUT;
   27532:	230b      	movs	r3, #11
   27534:	e7bc      	b.n	274b0 <nrf_cloud_decode_requested_state+0xc8>
	} else if (compare(state_str, PAIRED_STR)) {
   27536:	491a      	ldr	r1, [pc, #104]	; (275a0 <nrf_cloud_decode_requested_state+0x1b8>)
   27538:	4628      	mov	r0, r5
   2753a:	f021 f8bb 	bl	486b4 <compare>
   2753e:	b108      	cbz	r0, 27544 <nrf_cloud_decode_requested_state+0x15c>
		(*requested_state) = STATE_UA_COMPLETE;
   27540:	230c      	movs	r3, #12
   27542:	e7b5      	b.n	274b0 <nrf_cloud_decode_requested_state+0xc8>
	} else if (compare(state_str, DUA_PIN_STR)) {
   27544:	4917      	ldr	r1, [pc, #92]	; (275a4 <nrf_cloud_decode_requested_state+0x1bc>)
   27546:	4628      	mov	r0, r5
   27548:	f021 f8b4 	bl	486b4 <compare>
   2754c:	2800      	cmp	r0, #0
   2754e:	d0b0      	beq.n	274b2 <nrf_cloud_decode_requested_state+0xca>
		(*requested_state) = STATE_UA_PIN_WAIT;
   27550:	2306      	movs	r3, #6
   27552:	e7ad      	b.n	274b0 <nrf_cloud_decode_requested_state+0xc8>
   27554:	0004dc41 	.word	0x0004dc41
   27558:	0004b5bf 	.word	0x0004b5bf
   2755c:	0004dd38 	.word	0x0004dd38
   27560:	0004dd78 	.word	0x0004dd78
   27564:	0004dc60 	.word	0x0004dc60
   27568:	0004dc7a 	.word	0x0004dc7a
   2756c:	00049018 	.word	0x00049018
   27570:	000490d8 	.word	0x000490d8
   27574:	0004dc8a 	.word	0x0004dc8a
   27578:	0004bbea 	.word	0x0004bbea
   2757c:	0004dca1 	.word	0x0004dca1
   27580:	0004dca9 	.word	0x0004dca9
   27584:	0004ddb3 	.word	0x0004ddb3
   27588:	0004dbd8 	.word	0x0004dbd8
   2758c:	0004dcc4 	.word	0x0004dcc4
   27590:	0004dcde 	.word	0x0004dcde
   27594:	0004dd9e 	.word	0x0004dd9e
   27598:	0004dce7 	.word	0x0004dce7
   2759c:	0004dcf8 	.word	0x0004dcf8
   275a0:	0004dd00 	.word	0x0004dd00
   275a4:	0004dd07 	.word	0x0004dd07

000275a8 <nrf_cloud_encode_state>:

int nrf_cloud_encode_state(u32_t reported_state, struct nrf_cloud_data *output)
{
   275a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275ac:	4604      	mov	r4, r0
   275ae:	b087      	sub	sp, #28
	int ret;

	__ASSERT_NO_MSG(output != NULL);
   275b0:	4689      	mov	r9, r1
   275b2:	b959      	cbnz	r1, 275cc <nrf_cloud_encode_state+0x24>
   275b4:	4991      	ldr	r1, [pc, #580]	; (277fc <nrf_cloud_encode_state+0x254>)
   275b6:	4892      	ldr	r0, [pc, #584]	; (27800 <nrf_cloud_encode_state+0x258>)
   275b8:	f44f 73c0 	mov.w	r3, #384	; 0x180
   275bc:	4a91      	ldr	r2, [pc, #580]	; (27804 <nrf_cloud_encode_state+0x25c>)
   275be:	f01f f84d 	bl	4665c <printk>
   275c2:	f44f 71c0 	mov.w	r1, #384	; 0x180
   275c6:	488f      	ldr	r0, [pc, #572]	; (27804 <nrf_cloud_encode_state+0x25c>)
   275c8:	f01f f855 	bl	46676 <assert_post_action>

	cJSON *root_obj = cJSON_CreateObject();
   275cc:	f7fd fcbe 	bl	24f4c <cJSON_CreateObject>
   275d0:	4607      	mov	r7, r0
	cJSON *state_obj = cJSON_CreateObject();
   275d2:	f7fd fcbb 	bl	24f4c <cJSON_CreateObject>
   275d6:	4680      	mov	r8, r0
	cJSON *reported_obj = cJSON_CreateObject();
   275d8:	f7fd fcb8 	bl	24f4c <cJSON_CreateObject>
   275dc:	4606      	mov	r6, r0
	cJSON *pairing_obj = cJSON_CreateObject();
   275de:	f7fd fcb5 	bl	24f4c <cJSON_CreateObject>
   275e2:	4605      	mov	r5, r0

	if ((root_obj  == NULL) || (state_obj == NULL) ||
   275e4:	b127      	cbz	r7, 275f0 <nrf_cloud_encode_state+0x48>
   275e6:	f1b8 0f00 	cmp.w	r8, #0
   275ea:	d001      	beq.n	275f0 <nrf_cloud_encode_state+0x48>
   275ec:	b106      	cbz	r6, 275f0 <nrf_cloud_encode_state+0x48>
	    (reported_obj == NULL) || (pairing_obj == NULL)) {
   275ee:	b950      	cbnz	r0, 27606 <nrf_cloud_encode_state+0x5e>

		/* Report pairing topics. */
		cJSON *topics_obj = cJSON_CreateObject();

		if (topics_obj == NULL) {
			cJSON_Delete(root_obj);
   275f0:	4638      	mov	r0, r7
	ret += json_add_obj(state_obj, "reported", reported_obj);
	ret += json_add_obj(root_obj, "state", state_obj);

	if (ret != 0) {

		cJSON_Delete(root_obj);
   275f2:	f7fd fbe5 	bl	24dc0 <cJSON_Delete>
		cJSON_Delete(state_obj);
   275f6:	4640      	mov	r0, r8
   275f8:	f7fd fbe2 	bl	24dc0 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   275fc:	4630      	mov	r0, r6
   275fe:	f7fd fbdf 	bl	24dc0 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   27602:	4628      	mov	r0, r5
   27604:	e077      	b.n	276f6 <nrf_cloud_encode_state+0x14e>
	switch (reported_state) {
   27606:	1fa0      	subs	r0, r4, #6
   27608:	2806      	cmp	r0, #6
   2760a:	f200 80e4 	bhi.w	277d6 <nrf_cloud_encode_state+0x22e>
   2760e:	e8df f010 	tbh	[pc, r0, lsl #1]
   27612:	0007      	.short	0x0007
   27614:	004300a5 	.word	0x004300a5
   27618:	009e0057 	.word	0x009e0057
   2761c:	00e000e2 	.word	0x00e000e2
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   27620:	4a79      	ldr	r2, [pc, #484]	; (27808 <nrf_cloud_encode_state+0x260>)
   27622:	497a      	ldr	r1, [pc, #488]	; (2780c <nrf_cloud_encode_state+0x264>)
   27624:	4628      	mov	r0, r5
   27626:	f021 f830 	bl	4868a <json_add_str>
		ret += json_add_null(pairing_obj, "topics");
   2762a:	4979      	ldr	r1, [pc, #484]	; (27810 <nrf_cloud_encode_state+0x268>)
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   2762c:	4604      	mov	r4, r0
		ret += json_add_null(pairing_obj, "topics");
   2762e:	4628      	mov	r0, r5
   27630:	f021 f84f 	bl	486d2 <json_add_null>
		ret += json_add_null(pairing_obj, "config");
   27634:	4977      	ldr	r1, [pc, #476]	; (27814 <nrf_cloud_encode_state+0x26c>)
		ret += json_add_null(pairing_obj, "topics");
   27636:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   27638:	4628      	mov	r0, r5
   2763a:	f021 f84a 	bl	486d2 <json_add_null>
		ret += json_add_null(reported_obj, "stage");
   2763e:	4976      	ldr	r1, [pc, #472]	; (27818 <nrf_cloud_encode_state+0x270>)
		ret += json_add_null(pairing_obj, "config");
   27640:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "stage");
   27642:	4630      	mov	r0, r6
   27644:	f021 f845 	bl	486d2 <json_add_null>
   27648:	4404      	add	r4, r0
		ret += json_add_null(reported_obj,
   2764a:	4630      	mov	r0, r6
   2764c:	4973      	ldr	r1, [pc, #460]	; (2781c <nrf_cloud_encode_state+0x274>)
		ret += json_add_null(pairing_obj, "topics");
   2764e:	f021 f840 	bl	486d2 <json_add_null>
   27652:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   27654:	462a      	mov	r2, r5
   27656:	4972      	ldr	r1, [pc, #456]	; (27820 <nrf_cloud_encode_state+0x278>)
   27658:	4630      	mov	r0, r6
   2765a:	f020 fa20 	bl	47a9e <cJSON_AddItemToObject>
   2765e:	4632      	mov	r2, r6
   27660:	4970      	ldr	r1, [pc, #448]	; (27824 <nrf_cloud_encode_state+0x27c>)
   27662:	4640      	mov	r0, r8
   27664:	f020 fa1b 	bl	47a9e <cJSON_AddItemToObject>
   27668:	4638      	mov	r0, r7
   2766a:	4642      	mov	r2, r8
   2766c:	4967      	ldr	r1, [pc, #412]	; (2780c <nrf_cloud_encode_state+0x264>)
   2766e:	f020 fa16 	bl	47a9e <cJSON_AddItemToObject>
		cJSON_Delete(root_obj);
   27672:	4638      	mov	r0, r7
	if (ret != 0) {
   27674:	2c00      	cmp	r4, #0
   27676:	d1bc      	bne.n	275f2 <nrf_cloud_encode_state+0x4a>
		return -ENOMEM;
	}

	char *buffer;

	buffer = cJSON_PrintUnformatted(root_obj);
   27678:	f020 fa01 	bl	47a7e <cJSON_PrintUnformatted>
   2767c:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   2767e:	4638      	mov	r0, r7
   27680:	f7fd fb9e 	bl	24dc0 <cJSON_Delete>

	if (buffer == NULL) {
   27684:	2d00      	cmp	r5, #0
   27686:	d038      	beq.n	276fa <nrf_cloud_encode_state+0x152>
		return -ENOMEM;
	}

	output->ptr = buffer;
   27688:	f8c9 5004 	str.w	r5, [r9, #4]
	output->len = strlen(buffer);
   2768c:	4628      	mov	r0, r5
   2768e:	f018 ff79 	bl	40584 <strlen>
   27692:	f8c9 0000 	str.w	r0, [r9]

	return 0;
   27696:	e0ac      	b.n	277f2 <nrf_cloud_encode_state+0x24a>
		ret += json_add_str(reported_obj, "stage", "prod");
   27698:	4a63      	ldr	r2, [pc, #396]	; (27828 <nrf_cloud_encode_state+0x280>)
   2769a:	495f      	ldr	r1, [pc, #380]	; (27818 <nrf_cloud_encode_state+0x270>)
   2769c:	4630      	mov	r0, r6
   2769e:	f020 fff4 	bl	4868a <json_add_str>
		ret += json_add_str(pairing_obj, "state", INITIATE_STR);
   276a2:	4a62      	ldr	r2, [pc, #392]	; (2782c <nrf_cloud_encode_state+0x284>)
		ret += json_add_str(reported_obj, "stage", "prod");
   276a4:	4604      	mov	r4, r0
		ret += json_add_str(pairing_obj, "state", INITIATE_STR);
   276a6:	4959      	ldr	r1, [pc, #356]	; (2780c <nrf_cloud_encode_state+0x264>)
   276a8:	4628      	mov	r0, r5
   276aa:	f020 ffee 	bl	4868a <json_add_str>
		ret += json_add_null(pairing_obj, "config");
   276ae:	4959      	ldr	r1, [pc, #356]	; (27814 <nrf_cloud_encode_state+0x26c>)
		ret += json_add_str(pairing_obj, "state", INITIATE_STR);
   276b0:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   276b2:	4628      	mov	r0, r5
   276b4:	f021 f80d 	bl	486d2 <json_add_null>
		ret += json_add_null(pairing_obj, "topics");
   276b8:	4955      	ldr	r1, [pc, #340]	; (27810 <nrf_cloud_encode_state+0x268>)
		ret += json_add_null(pairing_obj, "config");
   276ba:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "topics");
   276bc:	4628      	mov	r0, r5
   276be:	e7c6      	b.n	2764e <nrf_cloud_encode_state+0xa6>
		cJSON *config_obj = cJSON_CreateObject();
   276c0:	f7fd fc44 	bl	24f4c <cJSON_CreateObject>
   276c4:	4682      	mov	sl, r0
		cJSON *method_obj = cJSON_CreateString(
   276c6:	485a      	ldr	r0, [pc, #360]	; (27830 <nrf_cloud_encode_state+0x288>)
   276c8:	f7fd fc1c 	bl	24f04 <cJSON_CreateString>
   276cc:	4683      	mov	fp, r0
		if ((config_obj == NULL) || (method_obj == NULL)) {
   276ce:	f1ba 0f00 	cmp.w	sl, #0
   276d2:	d000      	beq.n	276d6 <nrf_cloud_encode_state+0x12e>
   276d4:	b9a0      	cbnz	r0, 27700 <nrf_cloud_encode_state+0x158>
			cJSON_Delete(root_obj);
   276d6:	4638      	mov	r0, r7
   276d8:	f7fd fb72 	bl	24dc0 <cJSON_Delete>
			cJSON_Delete(state_obj);
   276dc:	4640      	mov	r0, r8
   276de:	f7fd fb6f 	bl	24dc0 <cJSON_Delete>
			cJSON_Delete(reported_obj);
   276e2:	4630      	mov	r0, r6
   276e4:	f7fd fb6c 	bl	24dc0 <cJSON_Delete>
			cJSON_Delete(pairing_obj);
   276e8:	4628      	mov	r0, r5
   276ea:	f7fd fb69 	bl	24dc0 <cJSON_Delete>
			cJSON_Delete(config_obj);
   276ee:	4650      	mov	r0, sl
   276f0:	f7fd fb66 	bl	24dc0 <cJSON_Delete>
			cJSON_Delete(method_obj);
   276f4:	4658      	mov	r0, fp
		cJSON_Delete(pairing_obj);
   276f6:	f7fd fb63 	bl	24dc0 <cJSON_Delete>
		return -ENOMEM;
   276fa:	f06f 040b 	mvn.w	r4, #11
   276fe:	e078      	b.n	277f2 <nrf_cloud_encode_state+0x24a>
		ret += json_add_num(config_obj, "iteration", 1);
   27700:	4b4c      	ldr	r3, [pc, #304]	; (27834 <nrf_cloud_encode_state+0x28c>)
   27702:	2200      	movs	r2, #0
   27704:	494c      	ldr	r1, [pc, #304]	; (27838 <nrf_cloud_encode_state+0x290>)
   27706:	4650      	mov	r0, sl
   27708:	f020 ffad 	bl	48666 <json_add_num>
	cJSON_AddItemToObject(parent, str, item);
   2770c:	465a      	mov	r2, fp
		ret += json_add_num(config_obj, "iteration", 1);
   2770e:	4604      	mov	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   27710:	494a      	ldr	r1, [pc, #296]	; (2783c <nrf_cloud_encode_state+0x294>)
   27712:	4650      	mov	r0, sl
   27714:	f020 f9c3 	bl	47a9e <cJSON_AddItemToObject>
		ret += json_add_num(config_obj, "length", 6);
   27718:	2200      	movs	r2, #0
   2771a:	4b49      	ldr	r3, [pc, #292]	; (27840 <nrf_cloud_encode_state+0x298>)
   2771c:	4949      	ldr	r1, [pc, #292]	; (27844 <nrf_cloud_encode_state+0x29c>)
   2771e:	4650      	mov	r0, sl
   27720:	f020 ffa1 	bl	48666 <json_add_num>
		ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   27724:	4a48      	ldr	r2, [pc, #288]	; (27848 <nrf_cloud_encode_state+0x2a0>)
		ret += json_add_num(config_obj, "length", 6);
   27726:	4404      	add	r4, r0
		ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   27728:	4938      	ldr	r1, [pc, #224]	; (2780c <nrf_cloud_encode_state+0x264>)
   2772a:	4628      	mov	r0, r5
   2772c:	f020 ffad 	bl	4868a <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   27730:	4652      	mov	r2, sl
		ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   27732:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   27734:	4937      	ldr	r1, [pc, #220]	; (27814 <nrf_cloud_encode_state+0x26c>)
   27736:	4628      	mov	r0, r5
   27738:	f020 f9b1 	bl	47a9e <cJSON_AddItemToObject>
		if (ret != 0) {
   2773c:	2c00      	cmp	r4, #0
   2773e:	d089      	beq.n	27654 <nrf_cloud_encode_state+0xac>
			cJSON_Delete(config_obj);
   27740:	4650      	mov	r0, sl
   27742:	f7fd fb3d 	bl	24dc0 <cJSON_Delete>
			cJSON_Delete(method_obj);
   27746:	4658      	mov	r0, fp
			cJSON_Delete(topics_obj);
   27748:	f7fd fb3a 	bl	24dc0 <cJSON_Delete>
   2774c:	e782      	b.n	27654 <nrf_cloud_encode_state+0xac>
		ret += json_add_str(pairing_obj, "state", PATTERN_MISMATCH_STR);
   2774e:	4a3f      	ldr	r2, [pc, #252]	; (2784c <nrf_cloud_encode_state+0x2a4>)
   27750:	492e      	ldr	r1, [pc, #184]	; (2780c <nrf_cloud_encode_state+0x264>)
   27752:	4628      	mov	r0, r5
   27754:	f020 ff99 	bl	4868a <json_add_str>
   27758:	4604      	mov	r4, r0
		break;
   2775a:	e77b      	b.n	27654 <nrf_cloud_encode_state+0xac>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, &m_endp);
   2775c:	aa04      	add	r2, sp, #16
   2775e:	4669      	mov	r1, sp
   27760:	a802      	add	r0, sp, #8
   27762:	f001 fa45 	bl	28bf0 <nct_dc_endpoint_get>
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   27766:	9a05      	ldr	r2, [sp, #20]
   27768:	492c      	ldr	r1, [pc, #176]	; (2781c <nrf_cloud_encode_state+0x274>)
   2776a:	4630      	mov	r0, r6
   2776c:	f020 ff8d 	bl	4868a <json_add_str>
   27770:	4604      	mov	r4, r0
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   27772:	4a37      	ldr	r2, [pc, #220]	; (27850 <nrf_cloud_encode_state+0x2a8>)
   27774:	4925      	ldr	r1, [pc, #148]	; (2780c <nrf_cloud_encode_state+0x264>)
   27776:	4628      	mov	r0, r5
   27778:	f020 ff87 	bl	4868a <json_add_str>
		ret += json_add_null(pairing_obj, "config");
   2777c:	4925      	ldr	r1, [pc, #148]	; (27814 <nrf_cloud_encode_state+0x26c>)
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   2777e:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   27780:	4628      	mov	r0, r5
   27782:	f020 ffa6 	bl	486d2 <json_add_null>
		ret += json_add_null(reported_obj, "pairingStatus");
   27786:	4933      	ldr	r1, [pc, #204]	; (27854 <nrf_cloud_encode_state+0x2ac>)
		ret += json_add_null(pairing_obj, "config");
   27788:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "pairingStatus");
   2778a:	4630      	mov	r0, r6
   2778c:	f020 ffa1 	bl	486d2 <json_add_null>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, NULL);
   27790:	2200      	movs	r2, #0
   27792:	a902      	add	r1, sp, #8
		ret += json_add_null(reported_obj, "pairingStatus");
   27794:	4404      	add	r4, r0
		nct_dc_endpoint_get(&tx_endp, &rx_endp, NULL);
   27796:	a804      	add	r0, sp, #16
   27798:	f001 fa2a 	bl	28bf0 <nct_dc_endpoint_get>
		cJSON *topics_obj = cJSON_CreateObject();
   2779c:	f7fd fbd6 	bl	24f4c <cJSON_CreateObject>
		if (topics_obj == NULL) {
   277a0:	4682      	mov	sl, r0
   277a2:	2800      	cmp	r0, #0
   277a4:	f43f af24 	beq.w	275f0 <nrf_cloud_encode_state+0x48>
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   277a8:	9a05      	ldr	r2, [sp, #20]
   277aa:	492b      	ldr	r1, [pc, #172]	; (27858 <nrf_cloud_encode_state+0x2b0>)
   277ac:	f020 ff6d 	bl	4868a <json_add_str>
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   277b0:	9a03      	ldr	r2, [sp, #12]
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   277b2:	4404      	add	r4, r0
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   277b4:	4929      	ldr	r1, [pc, #164]	; (2785c <nrf_cloud_encode_state+0x2b4>)
   277b6:	4650      	mov	r0, sl
   277b8:	f020 ff67 	bl	4868a <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   277bc:	4652      	mov	r2, sl
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   277be:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   277c0:	4913      	ldr	r1, [pc, #76]	; (27810 <nrf_cloud_encode_state+0x268>)
   277c2:	4628      	mov	r0, r5
   277c4:	f020 f96b 	bl	47a9e <cJSON_AddItemToObject>
		if (ret != 0) {
   277c8:	2c00      	cmp	r4, #0
   277ca:	f43f af43 	beq.w	27654 <nrf_cloud_encode_state+0xac>
			cJSON_Delete(topics_obj);
   277ce:	4650      	mov	r0, sl
   277d0:	e7ba      	b.n	27748 <nrf_cloud_encode_state+0x1a0>
	ret = 0;
   277d2:	2400      	movs	r4, #0
   277d4:	e7cd      	b.n	27772 <nrf_cloud_encode_state+0x1ca>
		cJSON_Delete(root_obj);
   277d6:	4638      	mov	r0, r7
   277d8:	f7fd faf2 	bl	24dc0 <cJSON_Delete>
		cJSON_Delete(state_obj);
   277dc:	4640      	mov	r0, r8
   277de:	f7fd faef 	bl	24dc0 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   277e2:	4630      	mov	r0, r6
   277e4:	f7fd faec 	bl	24dc0 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   277e8:	4628      	mov	r0, r5
   277ea:	f7fd fae9 	bl	24dc0 <cJSON_Delete>
		return -ENOTSUP;
   277ee:	f06f 0485 	mvn.w	r4, #133	; 0x85
}
   277f2:	4620      	mov	r0, r4
   277f4:	b007      	add	sp, #28
   277f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   277fa:	bf00      	nop
   277fc:	0004bbc4 	.word	0x0004bbc4
   27800:	0004b5bf 	.word	0x0004b5bf
   27804:	0004dd38 	.word	0x0004dd38
   27808:	0004dd07 	.word	0x0004dd07
   2780c:	0004bbea 	.word	0x0004bbea
   27810:	0004dd16 	.word	0x0004dd16
   27814:	000500cb 	.word	0x000500cb
   27818:	0004dd1d 	.word	0x0004dd1d
   2781c:	0004dca9 	.word	0x0004dca9
   27820:	0004ddb3 	.word	0x0004ddb3
   27824:	0004bbe1 	.word	0x0004bbe1
   27828:	0004dd23 	.word	0x0004dd23
   2782c:	0004dcde 	.word	0x0004dcde
   27830:	0004dd28 	.word	0x0004dd28
   27834:	3ff00000 	.word	0x3ff00000
   27838:	0004dd8d 	.word	0x0004dd8d
   2783c:	0004dd97 	.word	0x0004dd97
   27840:	40180000 	.word	0x40180000
   27844:	0004bce7 	.word	0x0004bce7
   27848:	0004dd9e 	.word	0x0004dd9e
   2784c:	0004dce7 	.word	0x0004dce7
   27850:	0004dd00 	.word	0x0004dd00
   27854:	0004ddbb 	.word	0x0004ddbb
   27858:	0004dd30 	.word	0x0004dd30
   2785c:	0004dd34 	.word	0x0004dd34

00027860 <nrf_cloud_decode_data_endpoint>:
 */
int nrf_cloud_decode_data_endpoint(const struct nrf_cloud_data *input,
				   struct nrf_cloud_data *tx_endpoint,
				   struct nrf_cloud_data *rx_endpoint,
				   struct nrf_cloud_data *m_endpoint)
{
   27860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27864:	4689      	mov	r9, r1
   27866:	4690      	mov	r8, r2
   27868:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(input != NULL);
   2786a:	4604      	mov	r4, r0
   2786c:	b958      	cbnz	r0, 27886 <nrf_cloud_decode_data_endpoint+0x26>
   2786e:	494f      	ldr	r1, [pc, #316]	; (279ac <nrf_cloud_decode_data_endpoint+0x14c>)
   27870:	484f      	ldr	r0, [pc, #316]	; (279b0 <nrf_cloud_decode_data_endpoint+0x150>)
   27872:	f240 2329 	movw	r3, #553	; 0x229
   27876:	4a4f      	ldr	r2, [pc, #316]	; (279b4 <nrf_cloud_decode_data_endpoint+0x154>)
   27878:	f01e fef0 	bl	4665c <printk>
   2787c:	f240 2129 	movw	r1, #553	; 0x229
   27880:	484c      	ldr	r0, [pc, #304]	; (279b4 <nrf_cloud_decode_data_endpoint+0x154>)
   27882:	f01e fef8 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   27886:	6863      	ldr	r3, [r4, #4]
   27888:	b95b      	cbnz	r3, 278a2 <nrf_cloud_decode_data_endpoint+0x42>
   2788a:	494b      	ldr	r1, [pc, #300]	; (279b8 <nrf_cloud_decode_data_endpoint+0x158>)
   2788c:	4848      	ldr	r0, [pc, #288]	; (279b0 <nrf_cloud_decode_data_endpoint+0x150>)
   2788e:	f240 232a 	movw	r3, #554	; 0x22a
   27892:	4a48      	ldr	r2, [pc, #288]	; (279b4 <nrf_cloud_decode_data_endpoint+0x154>)
   27894:	f01e fee2 	bl	4665c <printk>
   27898:	f240 212a 	movw	r1, #554	; 0x22a
   2789c:	4845      	ldr	r0, [pc, #276]	; (279b4 <nrf_cloud_decode_data_endpoint+0x154>)
   2789e:	f01e feea 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   278a2:	6823      	ldr	r3, [r4, #0]
   278a4:	b95b      	cbnz	r3, 278be <nrf_cloud_decode_data_endpoint+0x5e>
   278a6:	4945      	ldr	r1, [pc, #276]	; (279bc <nrf_cloud_decode_data_endpoint+0x15c>)
   278a8:	4841      	ldr	r0, [pc, #260]	; (279b0 <nrf_cloud_decode_data_endpoint+0x150>)
   278aa:	f240 232b 	movw	r3, #555	; 0x22b
   278ae:	4a41      	ldr	r2, [pc, #260]	; (279b4 <nrf_cloud_decode_data_endpoint+0x154>)
   278b0:	f01e fed4 	bl	4665c <printk>
   278b4:	f240 212b 	movw	r1, #555	; 0x22b
   278b8:	483e      	ldr	r0, [pc, #248]	; (279b4 <nrf_cloud_decode_data_endpoint+0x154>)
   278ba:	f01e fedc 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(tx_endpoint != NULL);
   278be:	f1b9 0f00 	cmp.w	r9, #0
   278c2:	d10b      	bne.n	278dc <nrf_cloud_decode_data_endpoint+0x7c>
   278c4:	493e      	ldr	r1, [pc, #248]	; (279c0 <nrf_cloud_decode_data_endpoint+0x160>)
   278c6:	483a      	ldr	r0, [pc, #232]	; (279b0 <nrf_cloud_decode_data_endpoint+0x150>)
   278c8:	f44f 730b 	mov.w	r3, #556	; 0x22c
   278cc:	4a39      	ldr	r2, [pc, #228]	; (279b4 <nrf_cloud_decode_data_endpoint+0x154>)
   278ce:	f01e fec5 	bl	4665c <printk>
   278d2:	f44f 710b 	mov.w	r1, #556	; 0x22c
   278d6:	4837      	ldr	r0, [pc, #220]	; (279b4 <nrf_cloud_decode_data_endpoint+0x154>)
   278d8:	f01e fecd 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(rx_endpoint != NULL);
   278dc:	f1b8 0f00 	cmp.w	r8, #0
   278e0:	d10b      	bne.n	278fa <nrf_cloud_decode_data_endpoint+0x9a>
   278e2:	4938      	ldr	r1, [pc, #224]	; (279c4 <nrf_cloud_decode_data_endpoint+0x164>)
   278e4:	4832      	ldr	r0, [pc, #200]	; (279b0 <nrf_cloud_decode_data_endpoint+0x150>)
   278e6:	f240 232d 	movw	r3, #557	; 0x22d
   278ea:	4a32      	ldr	r2, [pc, #200]	; (279b4 <nrf_cloud_decode_data_endpoint+0x154>)
   278ec:	f01e feb6 	bl	4665c <printk>
   278f0:	f240 212d 	movw	r1, #557	; 0x22d
   278f4:	482f      	ldr	r0, [pc, #188]	; (279b4 <nrf_cloud_decode_data_endpoint+0x154>)
   278f6:	f01e febe 	bl	46676 <assert_post_action>
	cJSON *root_obj;
	cJSON *m_endpoint_obj = NULL;
	cJSON *state_obj;
	cJSON *parent_obj;

	root_obj = cJSON_Parse(input->ptr);
   278fa:	6860      	ldr	r0, [r4, #4]
   278fc:	f020 f8bb 	bl	47a76 <cJSON_Parse>
	if (root_obj == NULL) {
   27900:	4605      	mov	r5, r0
   27902:	b330      	cbz	r0, 27952 <nrf_cloud_decode_data_endpoint+0xf2>
		return -ENOENT;
	}

	state_obj = json_object_decode(root_obj, "state");
   27904:	4930      	ldr	r1, [pc, #192]	; (279c8 <nrf_cloud_decode_data_endpoint+0x168>)
   27906:	f020 fed1 	bl	486ac <json_object_decode>
	if (state_obj == NULL) {
		parent_obj = json_object_decode(root_obj, "desired");
   2790a:	4930      	ldr	r1, [pc, #192]	; (279cc <nrf_cloud_decode_data_endpoint+0x16c>)
	if (state_obj == NULL) {
   2790c:	b900      	cbnz	r0, 27910 <nrf_cloud_decode_data_endpoint+0xb0>
		parent_obj = json_object_decode(root_obj, "desired");
   2790e:	4628      	mov	r0, r5
	} else {
		parent_obj = json_object_decode(state_obj, "desired");
   27910:	f020 fecc 	bl	486ac <json_object_decode>
   27914:	4606      	mov	r6, r0
	}

	if (m_endpoint != NULL) {
   27916:	b1ff      	cbz	r7, 27958 <nrf_cloud_decode_data_endpoint+0xf8>
		m_endpoint_obj = json_object_decode(parent_obj,
   27918:	492d      	ldr	r1, [pc, #180]	; (279d0 <nrf_cloud_decode_data_endpoint+0x170>)
   2791a:	f020 fec7 	bl	486ac <json_object_decode>
   2791e:	4604      	mov	r4, r0
						  "nrfcloud_mqtt_topic_prefix");
	}

	cJSON *pairing_obj = json_object_decode(parent_obj, "pairing");
   27920:	492c      	ldr	r1, [pc, #176]	; (279d4 <nrf_cloud_decode_data_endpoint+0x174>)
   27922:	4630      	mov	r0, r6
   27924:	f020 fec2 	bl	486ac <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   27928:	4927      	ldr	r1, [pc, #156]	; (279c8 <nrf_cloud_decode_data_endpoint+0x168>)
	cJSON *pairing_obj = json_object_decode(parent_obj, "pairing");
   2792a:	4606      	mov	r6, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   2792c:	f020 febe 	bl	486ac <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   27930:	4929      	ldr	r1, [pc, #164]	; (279d8 <nrf_cloud_decode_data_endpoint+0x178>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   27932:	4682      	mov	sl, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   27934:	4630      	mov	r0, r6
   27936:	f020 feb9 	bl	486ac <json_object_decode>
   2793a:	4606      	mov	r6, r0

	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   2793c:	f1ba 0f00 	cmp.w	sl, #0
   27940:	d004      	beq.n	2794c <nrf_cloud_decode_data_endpoint+0xec>
   27942:	b118      	cbz	r0, 2794c <nrf_cloud_decode_data_endpoint+0xec>
   27944:	f8da 300c 	ldr.w	r3, [sl, #12]
   27948:	2b10      	cmp	r3, #16
   2794a:	d007      	beq.n	2795c <nrf_cloud_decode_data_endpoint+0xfc>
	}

	const char *state_str = pairing_state_obj->valuestring;

	if (!compare(state_str, PAIRED_STR)) {
		cJSON_Delete(root_obj);
   2794c:	4628      	mov	r0, r5
   2794e:	f7fd fa37 	bl	24dc0 <cJSON_Delete>
		return -ENOENT;
   27952:	f06f 0401 	mvn.w	r4, #1
   27956:	e012      	b.n	2797e <nrf_cloud_decode_data_endpoint+0x11e>
	cJSON *m_endpoint_obj = NULL;
   27958:	463c      	mov	r4, r7
   2795a:	e7e1      	b.n	27920 <nrf_cloud_decode_data_endpoint+0xc0>
	if (!compare(state_str, PAIRED_STR)) {
   2795c:	491f      	ldr	r1, [pc, #124]	; (279dc <nrf_cloud_decode_data_endpoint+0x17c>)
   2795e:	f8da 0010 	ldr.w	r0, [sl, #16]
   27962:	f020 fea7 	bl	486b4 <compare>
   27966:	2800      	cmp	r0, #0
   27968:	d0f0      	beq.n	2794c <nrf_cloud_decode_data_endpoint+0xec>
		return -ENOENT;
	}

	if (m_endpoint_obj != NULL) {
   2796a:	b15c      	cbz	r4, 27984 <nrf_cloud_decode_data_endpoint+0x124>
		err = json_decode_and_alloc(m_endpoint_obj, m_endpoint);
   2796c:	4620      	mov	r0, r4
   2796e:	4639      	mov	r1, r7
   27970:	f020 febf 	bl	486f2 <json_decode_and_alloc>
		if (err) {
   27974:	4604      	mov	r4, r0
   27976:	b128      	cbz	r0, 27984 <nrf_cloud_decode_data_endpoint+0x124>

	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");

	err = json_decode_and_alloc(rx_obj, rx_endpoint);
	if (err) {
		cJSON_Delete(root_obj);
   27978:	4628      	mov	r0, r5
		return err;
	}

	cJSON_Delete(root_obj);
   2797a:	f7fd fa21 	bl	24dc0 <cJSON_Delete>

	return err;
}
   2797e:	4620      	mov	r0, r4
   27980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cJSON *tx_obj = json_object_decode(topic_obj, "d2c");
   27984:	4916      	ldr	r1, [pc, #88]	; (279e0 <nrf_cloud_decode_data_endpoint+0x180>)
   27986:	4630      	mov	r0, r6
   27988:	f020 fe90 	bl	486ac <json_object_decode>
	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   2798c:	4649      	mov	r1, r9
   2798e:	f020 feb0 	bl	486f2 <json_decode_and_alloc>
	if (err) {
   27992:	4604      	mov	r4, r0
   27994:	2800      	cmp	r0, #0
   27996:	d1ef      	bne.n	27978 <nrf_cloud_decode_data_endpoint+0x118>
	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");
   27998:	4912      	ldr	r1, [pc, #72]	; (279e4 <nrf_cloud_decode_data_endpoint+0x184>)
   2799a:	4630      	mov	r0, r6
   2799c:	f020 fe86 	bl	486ac <json_object_decode>
	err = json_decode_and_alloc(rx_obj, rx_endpoint);
   279a0:	4641      	mov	r1, r8
   279a2:	f020 fea6 	bl	486f2 <json_decode_and_alloc>
	if (err) {
   279a6:	4604      	mov	r4, r0
   279a8:	e7e6      	b.n	27978 <nrf_cloud_decode_data_endpoint+0x118>
   279aa:	bf00      	nop
   279ac:	0004dd78 	.word	0x0004dd78
   279b0:	0004b5bf 	.word	0x0004b5bf
   279b4:	0004dd38 	.word	0x0004dd38
   279b8:	0004dc60 	.word	0x0004dc60
   279bc:	0004dc7a 	.word	0x0004dc7a
   279c0:	0004dc0b 	.word	0x0004dc0b
   279c4:	0004dc26 	.word	0x0004dc26
   279c8:	0004bbea 	.word	0x0004bbea
   279cc:	0004dca1 	.word	0x0004dca1
   279d0:	0004dca9 	.word	0x0004dca9
   279d4:	0004ddb3 	.word	0x0004ddb3
   279d8:	0004dd16 	.word	0x0004dd16
   279dc:	0004dd00 	.word	0x0004dd00
   279e0:	0004dd30 	.word	0x0004dd30
   279e4:	0004dd34 	.word	0x0004dd34

000279e8 <drop_event_handler>:

	return err;
}

static int drop_event_handler(const struct nct_evt *nct_evt)
{
   279e8:	b510      	push	{r4, lr}
	LOG_DBG("Dropping FSM transition %d", nct_evt->type);
   279ea:	2304      	movs	r3, #4
   279ec:	f04f 0400 	mov.w	r4, #0
   279f0:	4a08      	ldr	r2, [pc, #32]	; (27a14 <drop_event_handler+0x2c>)
   279f2:	f363 0402 	bfi	r4, r3, #0, #3
   279f6:	4b08      	ldr	r3, [pc, #32]	; (27a18 <drop_event_handler+0x30>)
   279f8:	f36f 04c5 	bfc	r4, #3, #3
   279fc:	1a9b      	subs	r3, r3, r2
   279fe:	08db      	lsrs	r3, r3, #3
   27a00:	f363 148f 	bfi	r4, r3, #6, #10
   27a04:	4a05      	ldr	r2, [pc, #20]	; (27a1c <drop_event_handler+0x34>)
   27a06:	7a03      	ldrb	r3, [r0, #8]
   27a08:	4905      	ldr	r1, [pc, #20]	; (27a20 <drop_event_handler+0x38>)
   27a0a:	4620      	mov	r0, r4
   27a0c:	f01e fe49 	bl	466a2 <log_string_sync>
	return 0;
}
   27a10:	2000      	movs	r0, #0
   27a12:	bd10      	pop	{r4, pc}
   27a14:	00049018 	.word	0x00049018
   27a18:	000490e0 	.word	0x000490e0
   27a1c:	0004ddd9 	.word	0x0004ddd9
   27a20:	0004de35 	.word	0x0004de35

00027a24 <state_ua_initiate>:
{
   27a24:	b530      	push	{r4, r5, lr}
   27a26:	b085      	sub	sp, #20
	struct nct_cc_data msg = {
   27a28:	2210      	movs	r2, #16
   27a2a:	2100      	movs	r1, #0
   27a2c:	4668      	mov	r0, sp
   27a2e:	f018 f98d 	bl	3fd4c <memset>
   27a32:	2501      	movs	r5, #1
   27a34:	f641 2385 	movw	r3, #6789	; 0x1a85
	err = nrf_cloud_encode_state(STATE_UA_INITIATE, &msg.data);
   27a38:	4669      	mov	r1, sp
   27a3a:	2008      	movs	r0, #8
	struct nct_cc_data msg = {
   27a3c:	9302      	str	r3, [sp, #8]
   27a3e:	f88d 500c 	strb.w	r5, [sp, #12]
	err = nrf_cloud_encode_state(STATE_UA_INITIATE, &msg.data);
   27a42:	f7ff fdb1 	bl	275a8 <nrf_cloud_encode_state>
	if (err) {
   27a46:	4604      	mov	r4, r0
   27a48:	b190      	cbz	r0, 27a70 <state_ua_initiate+0x4c>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   27a4a:	f04f 0000 	mov.w	r0, #0
   27a4e:	4a0e      	ldr	r2, [pc, #56]	; (27a88 <state_ua_initiate+0x64>)
   27a50:	4b0e      	ldr	r3, [pc, #56]	; (27a8c <state_ua_initiate+0x68>)
   27a52:	f365 0002 	bfi	r0, r5, #0, #3
   27a56:	1a9b      	subs	r3, r3, r2
   27a58:	f36f 00c5 	bfc	r0, #3, #3
   27a5c:	08db      	lsrs	r3, r3, #3
   27a5e:	f363 108f 	bfi	r0, r3, #6, #10
   27a62:	4622      	mov	r2, r4
   27a64:	490a      	ldr	r1, [pc, #40]	; (27a90 <state_ua_initiate+0x6c>)
   27a66:	f01e fe1c 	bl	466a2 <log_string_sync>
}
   27a6a:	4620      	mov	r0, r4
   27a6c:	b005      	add	sp, #20
   27a6e:	bd30      	pop	{r4, r5, pc}
	err = nct_cc_send(&msg);
   27a70:	4668      	mov	r0, sp
   27a72:	f001 f801 	bl	28a78 <nct_cc_send>
   27a76:	4604      	mov	r4, r0
	nrf_cloud_free((void *)msg.data.ptr);
   27a78:	9801      	ldr	r0, [sp, #4]
   27a7a:	f020 ffa4 	bl	489c6 <k_free>
	nfsm_set_current_state_and_notify(STATE_UA_INITIATE, NULL);
   27a7e:	2100      	movs	r1, #0
   27a80:	2008      	movs	r0, #8
   27a82:	f7ff fa4b 	bl	26f1c <nfsm_set_current_state_and_notify>
	return err;
   27a86:	e7f0      	b.n	27a6a <state_ua_initiate+0x46>
   27a88:	00049018 	.word	0x00049018
   27a8c:	000490e0 	.word	0x000490e0
   27a90:	0004df35 	.word	0x0004df35

00027a94 <state_ua_pin_wait>:
{
   27a94:	b530      	push	{r4, r5, lr}
	struct nct_cc_data msg = {
   27a96:	2501      	movs	r5, #1
{
   27a98:	b08b      	sub	sp, #44	; 0x2c
	struct nct_cc_data msg = {
   27a9a:	2210      	movs	r2, #16
   27a9c:	2100      	movs	r1, #0
   27a9e:	a801      	add	r0, sp, #4
   27aa0:	f018 f954 	bl	3fd4c <memset>
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   27aa4:	a901      	add	r1, sp, #4
   27aa6:	2006      	movs	r0, #6
	struct nct_cc_data msg = {
   27aa8:	9503      	str	r5, [sp, #12]
   27aaa:	f88d 5010 	strb.w	r5, [sp, #16]
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   27aae:	f7ff fd7b 	bl	275a8 <nrf_cloud_encode_state>
	if (err) {
   27ab2:	4604      	mov	r4, r0
   27ab4:	b190      	cbz	r0, 27adc <state_ua_pin_wait+0x48>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   27ab6:	f04f 0000 	mov.w	r0, #0
   27aba:	4a1d      	ldr	r2, [pc, #116]	; (27b30 <state_ua_pin_wait+0x9c>)
   27abc:	4b1d      	ldr	r3, [pc, #116]	; (27b34 <state_ua_pin_wait+0xa0>)
   27abe:	f365 0002 	bfi	r0, r5, #0, #3
   27ac2:	1a9b      	subs	r3, r3, r2
   27ac4:	f36f 00c5 	bfc	r0, #3, #3
   27ac8:	08db      	lsrs	r3, r3, #3
   27aca:	f363 108f 	bfi	r0, r3, #6, #10
   27ace:	4622      	mov	r2, r4
   27ad0:	4919      	ldr	r1, [pc, #100]	; (27b38 <state_ua_pin_wait+0xa4>)
   27ad2:	f01e fde6 	bl	466a2 <log_string_sync>
}
   27ad6:	4620      	mov	r0, r4
   27ad8:	b00b      	add	sp, #44	; 0x2c
   27ada:	bd30      	pop	{r4, r5, pc}
	err = nct_cc_send(&msg);
   27adc:	a801      	add	r0, sp, #4
   27ade:	f000 ffcb 	bl	28a78 <nct_cc_send>
	if (err) {
   27ae2:	4604      	mov	r4, r0
   27ae4:	b198      	cbz	r0, 27b0e <state_ua_pin_wait+0x7a>
		LOG_ERR("nct_cc_send failed %d", err);
   27ae6:	f04f 0000 	mov.w	r0, #0
   27aea:	4a11      	ldr	r2, [pc, #68]	; (27b30 <state_ua_pin_wait+0x9c>)
   27aec:	4b11      	ldr	r3, [pc, #68]	; (27b34 <state_ua_pin_wait+0xa0>)
   27aee:	f365 0002 	bfi	r0, r5, #0, #3
   27af2:	1a9b      	subs	r3, r3, r2
   27af4:	08db      	lsrs	r3, r3, #3
   27af6:	f36f 00c5 	bfc	r0, #3, #3
   27afa:	f363 108f 	bfi	r0, r3, #6, #10
   27afe:	4622      	mov	r2, r4
   27b00:	490e      	ldr	r1, [pc, #56]	; (27b3c <state_ua_pin_wait+0xa8>)
   27b02:	f01e fdce 	bl	466a2 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   27b06:	9802      	ldr	r0, [sp, #8]
   27b08:	f020 ff5d 	bl	489c6 <k_free>
		return err;
   27b0c:	e7e3      	b.n	27ad6 <state_ua_pin_wait+0x42>
	nrf_cloud_free((void *)msg.data.ptr);
   27b0e:	9802      	ldr	r0, [sp, #8]
   27b10:	f020 ff59 	bl	489c6 <k_free>
	struct nrf_cloud_evt evt = {
   27b14:	2214      	movs	r2, #20
   27b16:	4621      	mov	r1, r4
   27b18:	eb0d 0002 	add.w	r0, sp, r2
   27b1c:	f018 f916 	bl	3fd4c <memset>
   27b20:	2302      	movs	r3, #2
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   27b22:	a905      	add	r1, sp, #20
   27b24:	2006      	movs	r0, #6
	struct nrf_cloud_evt evt = {
   27b26:	f88d 3014 	strb.w	r3, [sp, #20]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   27b2a:	f7ff f9f7 	bl	26f1c <nfsm_set_current_state_and_notify>
	return 0;
   27b2e:	e7d2      	b.n	27ad6 <state_ua_pin_wait+0x42>
   27b30:	00049018 	.word	0x00049018
   27b34:	000490e0 	.word	0x000490e0
   27b38:	0004df35 	.word	0x0004df35
   27b3c:	0004df56 	.word	0x0004df56

00027b40 <initiate_cmd_handler>:
	}
	}
}

static int initiate_cmd_handler(const struct nct_evt *nct_evt)
{
   27b40:	b513      	push	{r0, r1, r4, lr}
	int err;
	enum nfsm_state expected_state;
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;

	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   27b42:	6840      	ldr	r0, [r0, #4]
   27b44:	f10d 0107 	add.w	r1, sp, #7
   27b48:	f7ff fc4e 	bl	273e8 <nrf_cloud_decode_requested_state>
	if (err) {
   27b4c:	4604      	mov	r4, r0
   27b4e:	b198      	cbz	r0, 27b78 <initiate_cmd_handler+0x38>
		LOG_ERR("nrf_cloud_decode_requested_state Failed %d", err);
   27b50:	2301      	movs	r3, #1
   27b52:	f04f 0000 	mov.w	r0, #0
   27b56:	4a0f      	ldr	r2, [pc, #60]	; (27b94 <initiate_cmd_handler+0x54>)
   27b58:	f363 0002 	bfi	r0, r3, #0, #3
   27b5c:	4b0e      	ldr	r3, [pc, #56]	; (27b98 <initiate_cmd_handler+0x58>)
   27b5e:	f36f 00c5 	bfc	r0, #3, #3
   27b62:	1a9b      	subs	r3, r3, r2
   27b64:	08db      	lsrs	r3, r3, #3
   27b66:	f363 108f 	bfi	r0, r3, #6, #10
   27b6a:	4622      	mov	r2, r4
   27b6c:	490b      	ldr	r1, [pc, #44]	; (27b9c <initiate_cmd_handler+0x5c>)
   27b6e:	f01e fd98 	bl	466a2 <log_string_sync>
		return state_ua_pin_wait();
	}

	/* Any other state is ignored. */
	return 0;
}
   27b72:	4620      	mov	r0, r4
   27b74:	b002      	add	sp, #8
   27b76:	bd10      	pop	{r4, pc}
	if (expected_state == STATE_UA_INITIATE) {
   27b78:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27b7c:	2b08      	cmp	r3, #8
   27b7e:	d103      	bne.n	27b88 <initiate_cmd_handler+0x48>
		return state_ua_initiate();
   27b80:	f7ff ff50 	bl	27a24 <state_ua_initiate>
		return state_ua_pin_wait();
   27b84:	4604      	mov	r4, r0
   27b86:	e7f4      	b.n	27b72 <initiate_cmd_handler+0x32>
	} else if (expected_state == STATE_UA_PIN_WAIT) {
   27b88:	2b06      	cmp	r3, #6
   27b8a:	d1f2      	bne.n	27b72 <initiate_cmd_handler+0x32>
		return state_ua_pin_wait();
   27b8c:	f7ff ff82 	bl	27a94 <state_ua_pin_wait>
   27b90:	e7f8      	b.n	27b84 <initiate_cmd_handler+0x44>
   27b92:	bf00      	nop
   27b94:	00049018 	.word	0x00049018
   27b98:	000490e0 	.word	0x000490e0
   27b9c:	0004de54 	.word	0x0004de54

00027ba0 <state_ua_pin_complete>:
{
   27ba0:	b530      	push	{r4, r5, lr}
   27ba2:	b08b      	sub	sp, #44	; 0x2c
	struct nct_cc_data msg = {
   27ba4:	2210      	movs	r2, #16
   27ba6:	2100      	movs	r1, #0
   27ba8:	a801      	add	r0, sp, #4
   27baa:	f018 f8cf 	bl	3fd4c <memset>
   27bae:	2501      	movs	r5, #1
   27bb0:	f641 63d2 	movw	r3, #7890	; 0x1ed2
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   27bb4:	a901      	add	r1, sp, #4
   27bb6:	2007      	movs	r0, #7
	struct nct_cc_data msg = {
   27bb8:	9303      	str	r3, [sp, #12]
   27bba:	f88d 5010 	strb.w	r5, [sp, #16]
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   27bbe:	f7ff fcf3 	bl	275a8 <nrf_cloud_encode_state>
	if (err) {
   27bc2:	4604      	mov	r4, r0
   27bc4:	b190      	cbz	r0, 27bec <state_ua_pin_complete+0x4c>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   27bc6:	f04f 0000 	mov.w	r0, #0
   27bca:	4a1d      	ldr	r2, [pc, #116]	; (27c40 <state_ua_pin_complete+0xa0>)
   27bcc:	4b1d      	ldr	r3, [pc, #116]	; (27c44 <state_ua_pin_complete+0xa4>)
   27bce:	f365 0002 	bfi	r0, r5, #0, #3
   27bd2:	1a9b      	subs	r3, r3, r2
   27bd4:	f36f 00c5 	bfc	r0, #3, #3
   27bd8:	08db      	lsrs	r3, r3, #3
   27bda:	f363 108f 	bfi	r0, r3, #6, #10
   27bde:	4622      	mov	r2, r4
   27be0:	4919      	ldr	r1, [pc, #100]	; (27c48 <state_ua_pin_complete+0xa8>)
   27be2:	f01e fd5e 	bl	466a2 <log_string_sync>
}
   27be6:	4620      	mov	r0, r4
   27be8:	b00b      	add	sp, #44	; 0x2c
   27bea:	bd30      	pop	{r4, r5, pc}
	err = nct_cc_send(&msg);
   27bec:	a801      	add	r0, sp, #4
   27bee:	f000 ff43 	bl	28a78 <nct_cc_send>
	if (err) {
   27bf2:	4604      	mov	r4, r0
   27bf4:	b198      	cbz	r0, 27c1e <state_ua_pin_complete+0x7e>
		LOG_ERR("nct_cc_send failed %d", err);
   27bf6:	f04f 0000 	mov.w	r0, #0
   27bfa:	4a11      	ldr	r2, [pc, #68]	; (27c40 <state_ua_pin_complete+0xa0>)
   27bfc:	4b11      	ldr	r3, [pc, #68]	; (27c44 <state_ua_pin_complete+0xa4>)
   27bfe:	f365 0002 	bfi	r0, r5, #0, #3
   27c02:	1a9b      	subs	r3, r3, r2
   27c04:	08db      	lsrs	r3, r3, #3
   27c06:	f36f 00c5 	bfc	r0, #3, #3
   27c0a:	f363 108f 	bfi	r0, r3, #6, #10
   27c0e:	4622      	mov	r2, r4
   27c10:	490e      	ldr	r1, [pc, #56]	; (27c4c <state_ua_pin_complete+0xac>)
   27c12:	f01e fd46 	bl	466a2 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   27c16:	9802      	ldr	r0, [sp, #8]
   27c18:	f020 fed5 	bl	489c6 <k_free>
		return err;
   27c1c:	e7e3      	b.n	27be6 <state_ua_pin_complete+0x46>
	nrf_cloud_free((void *)msg.data.ptr);
   27c1e:	9802      	ldr	r0, [sp, #8]
   27c20:	f020 fed1 	bl	489c6 <k_free>
	struct nrf_cloud_evt evt = {
   27c24:	2214      	movs	r2, #20
   27c26:	4621      	mov	r1, r4
   27c28:	eb0d 0002 	add.w	r0, sp, r2
   27c2c:	f018 f88e 	bl	3fd4c <memset>
   27c30:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   27c32:	a905      	add	r1, sp, #20
   27c34:	2007      	movs	r0, #7
	struct nrf_cloud_evt evt = {
   27c36:	f88d 3014 	strb.w	r3, [sp, #20]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   27c3a:	f7ff f96f 	bl	26f1c <nfsm_set_current_state_and_notify>
	return err;
   27c3e:	e7d2      	b.n	27be6 <state_ua_pin_complete+0x46>
   27c40:	00049018 	.word	0x00049018
   27c44:	000490e0 	.word	0x000490e0
   27c48:	0004df35 	.word	0x0004df35
   27c4c:	0004df56 	.word	0x0004df56

00027c50 <state_ua_input_wait>:
{
   27c50:	b530      	push	{r4, r5, lr}
	struct nct_cc_data msg = {
   27c52:	2501      	movs	r5, #1
{
   27c54:	b08b      	sub	sp, #44	; 0x2c
	struct nct_cc_data msg = {
   27c56:	2210      	movs	r2, #16
   27c58:	2100      	movs	r1, #0
   27c5a:	a801      	add	r0, sp, #4
   27c5c:	f018 f876 	bl	3fd4c <memset>
	err = nrf_cloud_encode_state(STATE_UA_INPUT_WAIT, &msg.data);
   27c60:	a901      	add	r1, sp, #4
   27c62:	2009      	movs	r0, #9
	struct nct_cc_data msg = {
   27c64:	9503      	str	r5, [sp, #12]
   27c66:	f88d 5010 	strb.w	r5, [sp, #16]
	err = nrf_cloud_encode_state(STATE_UA_INPUT_WAIT, &msg.data);
   27c6a:	f7ff fc9d 	bl	275a8 <nrf_cloud_encode_state>
	if (err) {
   27c6e:	4604      	mov	r4, r0
   27c70:	b190      	cbz	r0, 27c98 <state_ua_input_wait+0x48>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   27c72:	f04f 0000 	mov.w	r0, #0
   27c76:	4a14      	ldr	r2, [pc, #80]	; (27cc8 <state_ua_input_wait+0x78>)
   27c78:	4b14      	ldr	r3, [pc, #80]	; (27ccc <state_ua_input_wait+0x7c>)
   27c7a:	f365 0002 	bfi	r0, r5, #0, #3
   27c7e:	1a9b      	subs	r3, r3, r2
   27c80:	f36f 00c5 	bfc	r0, #3, #3
   27c84:	08db      	lsrs	r3, r3, #3
   27c86:	f363 108f 	bfi	r0, r3, #6, #10
   27c8a:	4622      	mov	r2, r4
   27c8c:	4910      	ldr	r1, [pc, #64]	; (27cd0 <state_ua_input_wait+0x80>)
   27c8e:	f01e fd08 	bl	466a2 <log_string_sync>
}
   27c92:	4620      	mov	r0, r4
   27c94:	b00b      	add	sp, #44	; 0x2c
   27c96:	bd30      	pop	{r4, r5, pc}
	err = nct_cc_send(&msg);
   27c98:	a801      	add	r0, sp, #4
   27c9a:	f000 feed 	bl	28a78 <nct_cc_send>
   27c9e:	4604      	mov	r4, r0
	nrf_cloud_free((void *)msg.data.ptr);
   27ca0:	9802      	ldr	r0, [sp, #8]
   27ca2:	f020 fe90 	bl	489c6 <k_free>
	struct nrf_cloud_evt evt = {
   27ca6:	2214      	movs	r2, #20
   27ca8:	2100      	movs	r1, #0
   27caa:	eb0d 0002 	add.w	r0, sp, r2
   27cae:	f018 f84d 	bl	3fd4c <memset>
   27cb2:	2302      	movs	r3, #2
   27cb4:	f88d 3014 	strb.w	r3, [sp, #20]
   27cb8:	2306      	movs	r3, #6
	nfsm_set_current_state_and_notify(STATE_UA_INPUT_WAIT, &evt);
   27cba:	a905      	add	r1, sp, #20
   27cbc:	2009      	movs	r0, #9
	struct nrf_cloud_evt evt = {
   27cbe:	9308      	str	r3, [sp, #32]
	nfsm_set_current_state_and_notify(STATE_UA_INPUT_WAIT, &evt);
   27cc0:	f7ff f92c 	bl	26f1c <nfsm_set_current_state_and_notify>
	return err;
   27cc4:	e7e5      	b.n	27c92 <state_ua_input_wait+0x42>
   27cc6:	bf00      	nop
   27cc8:	00049018 	.word	0x00049018
   27ccc:	000490e0 	.word	0x000490e0
   27cd0:	0004df35 	.word	0x0004df35

00027cd4 <state_ua_complete>:
{
   27cd4:	b530      	push	{r4, r5, lr}
   27cd6:	b08b      	sub	sp, #44	; 0x2c
	struct nct_cc_data msg = {
   27cd8:	2210      	movs	r2, #16
   27cda:	2100      	movs	r1, #0
   27cdc:	a801      	add	r0, sp, #4
   27cde:	f018 f835 	bl	3fd4c <memset>
   27ce2:	2501      	movs	r5, #1
   27ce4:	f641 63d2 	movw	r3, #7890	; 0x1ed2
	err = nrf_cloud_encode_state(STATE_UA_COMPLETE, &msg.data);
   27ce8:	a901      	add	r1, sp, #4
   27cea:	200c      	movs	r0, #12
	struct nct_cc_data msg = {
   27cec:	9303      	str	r3, [sp, #12]
   27cee:	f88d 5010 	strb.w	r5, [sp, #16]
	err = nrf_cloud_encode_state(STATE_UA_COMPLETE, &msg.data);
   27cf2:	f7ff fc59 	bl	275a8 <nrf_cloud_encode_state>
	if (err) {
   27cf6:	4604      	mov	r4, r0
   27cf8:	b190      	cbz	r0, 27d20 <state_ua_complete+0x4c>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   27cfa:	f04f 0000 	mov.w	r0, #0
   27cfe:	4a13      	ldr	r2, [pc, #76]	; (27d4c <state_ua_complete+0x78>)
   27d00:	4b13      	ldr	r3, [pc, #76]	; (27d50 <state_ua_complete+0x7c>)
   27d02:	f365 0002 	bfi	r0, r5, #0, #3
   27d06:	1a9b      	subs	r3, r3, r2
   27d08:	f36f 00c5 	bfc	r0, #3, #3
   27d0c:	08db      	lsrs	r3, r3, #3
   27d0e:	f363 108f 	bfi	r0, r3, #6, #10
   27d12:	4622      	mov	r2, r4
   27d14:	490f      	ldr	r1, [pc, #60]	; (27d54 <state_ua_complete+0x80>)
   27d16:	f01e fcc4 	bl	466a2 <log_string_sync>
}
   27d1a:	4620      	mov	r0, r4
   27d1c:	b00b      	add	sp, #44	; 0x2c
   27d1e:	bd30      	pop	{r4, r5, pc}
	err = nct_cc_send(&msg);
   27d20:	a801      	add	r0, sp, #4
   27d22:	f000 fea9 	bl	28a78 <nct_cc_send>
   27d26:	4604      	mov	r4, r0
	nrf_cloud_free((void *)msg.data.ptr);
   27d28:	9802      	ldr	r0, [sp, #8]
   27d2a:	f020 fe4c 	bl	489c6 <k_free>
	struct nrf_cloud_evt evt = {
   27d2e:	2214      	movs	r2, #20
   27d30:	2100      	movs	r1, #0
   27d32:	eb0d 0002 	add.w	r0, sp, r2
   27d36:	f018 f809 	bl	3fd4c <memset>
   27d3a:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_COMPLETE, &evt);
   27d3c:	a905      	add	r1, sp, #20
   27d3e:	200c      	movs	r0, #12
	struct nrf_cloud_evt evt = {
   27d40:	f88d 3014 	strb.w	r3, [sp, #20]
	nfsm_set_current_state_and_notify(STATE_UA_COMPLETE, &evt);
   27d44:	f7ff f8ea 	bl	26f1c <nfsm_set_current_state_and_notify>
	return err;
   27d48:	e7e7      	b.n	27d1a <state_ua_complete+0x46>
   27d4a:	bf00      	nop
   27d4c:	00049018 	.word	0x00049018
   27d50:	000490e0 	.word	0x000490e0
   27d54:	0004df35 	.word	0x0004df35

00027d58 <initiate_n_complete_request_handler>:
{
   27d58:	b530      	push	{r4, r5, lr}
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   27d5a:	6845      	ldr	r5, [r0, #4]
{
   27d5c:	b089      	sub	sp, #36	; 0x24
	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   27d5e:	f10d 0107 	add.w	r1, sp, #7
   27d62:	4628      	mov	r0, r5
   27d64:	f7ff fb40 	bl	273e8 <nrf_cloud_decode_requested_state>
	if (err) {
   27d68:	4604      	mov	r4, r0
   27d6a:	b198      	cbz	r0, 27d94 <initiate_n_complete_request_handler+0x3c>
		LOG_ERR("nrf_cloud_decode_requested_state failed %d", err);
   27d6c:	2301      	movs	r3, #1
   27d6e:	f04f 0000 	mov.w	r0, #0
   27d72:	4a31      	ldr	r2, [pc, #196]	; (27e38 <initiate_n_complete_request_handler+0xe0>)
   27d74:	f363 0002 	bfi	r0, r3, #0, #3
   27d78:	4b30      	ldr	r3, [pc, #192]	; (27e3c <initiate_n_complete_request_handler+0xe4>)
   27d7a:	f36f 00c5 	bfc	r0, #3, #3
   27d7e:	1a9b      	subs	r3, r3, r2
   27d80:	4622      	mov	r2, r4
   27d82:	08db      	lsrs	r3, r3, #3
   27d84:	492e      	ldr	r1, [pc, #184]	; (27e40 <initiate_n_complete_request_handler+0xe8>)
   27d86:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("nrf_cloud_decode_data_endpoint failed %d",
   27d8a:	f01e fc8a 	bl	466a2 <log_string_sync>
}
   27d8e:	4620      	mov	r0, r4
   27d90:	b009      	add	sp, #36	; 0x24
   27d92:	bd30      	pop	{r4, r5, pc}
	switch (expected_state) {
   27d94:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27d98:	3b06      	subs	r3, #6
   27d9a:	2b06      	cmp	r3, #6
   27d9c:	d8f7      	bhi.n	27d8e <initiate_n_complete_request_handler+0x36>
   27d9e:	a201      	add	r2, pc, #4	; (adr r2, 27da4 <initiate_n_complete_request_handler+0x4c>)
   27da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27da4:	00027dc1 	.word	0x00027dc1
   27da8:	00027dc9 	.word	0x00027dc9
   27dac:	00027e09 	.word	0x00027e09
   27db0:	00027e0f 	.word	0x00027e0f
   27db4:	00027d8f 	.word	0x00027d8f
   27db8:	00027d8f 	.word	0x00027d8f
   27dbc:	00027e15 	.word	0x00027e15
		return state_ua_pin_wait();
   27dc0:	f7ff fe68 	bl	27a94 <state_ua_pin_wait>
		return state_ua_complete();
   27dc4:	4604      	mov	r4, r0
   27dc6:	e7e2      	b.n	27d8e <initiate_n_complete_request_handler+0x36>
		err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx,
   27dc8:	ab06      	add	r3, sp, #24
   27dca:	aa02      	add	r2, sp, #8
   27dcc:	a904      	add	r1, sp, #16
   27dce:	4628      	mov	r0, r5
   27dd0:	f7ff fd46 	bl	27860 <nrf_cloud_decode_data_endpoint>
		if (err) {
   27dd4:	4604      	mov	r4, r0
   27dd6:	b178      	cbz	r0, 27df8 <initiate_n_complete_request_handler+0xa0>
			LOG_ERR("nrf_cloud_decode_data_endpoint failed %d",
   27dd8:	2301      	movs	r3, #1
   27dda:	f04f 0000 	mov.w	r0, #0
   27dde:	4a16      	ldr	r2, [pc, #88]	; (27e38 <initiate_n_complete_request_handler+0xe0>)
   27de0:	f363 0002 	bfi	r0, r3, #0, #3
   27de4:	4b15      	ldr	r3, [pc, #84]	; (27e3c <initiate_n_complete_request_handler+0xe4>)
   27de6:	f36f 00c5 	bfc	r0, #3, #3
   27dea:	1a9b      	subs	r3, r3, r2
   27dec:	08db      	lsrs	r3, r3, #3
   27dee:	f363 108f 	bfi	r0, r3, #6, #10
   27df2:	4622      	mov	r2, r4
   27df4:	4913      	ldr	r1, [pc, #76]	; (27e44 <initiate_n_complete_request_handler+0xec>)
   27df6:	e7c8      	b.n	27d8a <initiate_n_complete_request_handler+0x32>
		nct_dc_endpoint_set(&tx, &rx, &m_endpoint);
   27df8:	aa06      	add	r2, sp, #24
   27dfa:	a902      	add	r1, sp, #8
   27dfc:	a804      	add	r0, sp, #16
   27dfe:	f000 fec1 	bl	28b84 <nct_dc_endpoint_set>
		return state_ua_pin_complete();
   27e02:	f7ff fecd 	bl	27ba0 <state_ua_pin_complete>
   27e06:	e7dd      	b.n	27dc4 <initiate_n_complete_request_handler+0x6c>
		return state_ua_initiate();
   27e08:	f7ff fe0c 	bl	27a24 <state_ua_initiate>
   27e0c:	e7da      	b.n	27dc4 <initiate_n_complete_request_handler+0x6c>
		return state_ua_input_wait();
   27e0e:	f7ff ff1f 	bl	27c50 <state_ua_input_wait>
   27e12:	e7d7      	b.n	27dc4 <initiate_n_complete_request_handler+0x6c>
		err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx, NULL);
   27e14:	2300      	movs	r3, #0
   27e16:	aa04      	add	r2, sp, #16
   27e18:	a906      	add	r1, sp, #24
   27e1a:	4628      	mov	r0, r5
   27e1c:	f7ff fd20 	bl	27860 <nrf_cloud_decode_data_endpoint>
		if (err) {
   27e20:	4604      	mov	r4, r0
   27e22:	2800      	cmp	r0, #0
   27e24:	d1d8      	bne.n	27dd8 <initiate_n_complete_request_handler+0x80>
		nct_dc_endpoint_set(&tx, &rx, NULL);
   27e26:	4602      	mov	r2, r0
   27e28:	a904      	add	r1, sp, #16
   27e2a:	a806      	add	r0, sp, #24
   27e2c:	f000 feaa 	bl	28b84 <nct_dc_endpoint_set>
		return state_ua_complete();
   27e30:	f7ff ff50 	bl	27cd4 <state_ua_complete>
   27e34:	e7c6      	b.n	27dc4 <initiate_n_complete_request_handler+0x6c>
   27e36:	bf00      	nop
   27e38:	00049018 	.word	0x00049018
   27e3c:	000490e0 	.word	0x000490e0
   27e40:	0004de7f 	.word	0x0004de7f
   27e44:	0004deaa 	.word	0x0004deaa

00027e48 <all_ua_request_handler>:
{
   27e48:	b530      	push	{r4, r5, lr}
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   27e4a:	6845      	ldr	r5, [r0, #4]
{
   27e4c:	b08d      	sub	sp, #52	; 0x34
	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   27e4e:	f10d 0103 	add.w	r1, sp, #3
   27e52:	4628      	mov	r0, r5
   27e54:	f7ff fac8 	bl	273e8 <nrf_cloud_decode_requested_state>
	if (err) {
   27e58:	4604      	mov	r4, r0
   27e5a:	b188      	cbz	r0, 27e80 <all_ua_request_handler+0x38>
		LOG_ERR("nrf_cloud_decode_requested_state Failed %d", err);
   27e5c:	2301      	movs	r3, #1
   27e5e:	f04f 0000 	mov.w	r0, #0
   27e62:	4a5c      	ldr	r2, [pc, #368]	; (27fd4 <all_ua_request_handler+0x18c>)
   27e64:	f363 0002 	bfi	r0, r3, #0, #3
   27e68:	4b5b      	ldr	r3, [pc, #364]	; (27fd8 <all_ua_request_handler+0x190>)
   27e6a:	f36f 00c5 	bfc	r0, #3, #3
   27e6e:	1a9b      	subs	r3, r3, r2
   27e70:	4622      	mov	r2, r4
   27e72:	08db      	lsrs	r3, r3, #3
   27e74:	4959      	ldr	r1, [pc, #356]	; (27fdc <all_ua_request_handler+0x194>)
   27e76:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   27e7a:	f01e fc12 	bl	466a2 <log_string_sync>
   27e7e:	e00d      	b.n	27e9c <all_ua_request_handler+0x54>
	switch (expected_state) {
   27e80:	f89d 3003 	ldrb.w	r3, [sp, #3]
   27e84:	3b06      	subs	r3, #6
   27e86:	2b06      	cmp	r3, #6
   27e88:	d808      	bhi.n	27e9c <all_ua_request_handler+0x54>
   27e8a:	e8df f003 	tbb	[pc, r3]
   27e8e:	0a04      	.short	0x0a04
   27e90:	98643e3b 	.word	0x98643e3b
   27e94:	41          	.byte	0x41
   27e95:	00          	.byte	0x00
		return state_ua_pin_wait();
   27e96:	f7ff fdfd 	bl	27a94 <state_ua_pin_wait>
		return state_ua_initiate();
   27e9a:	4604      	mov	r4, r0
}
   27e9c:	4620      	mov	r0, r4
   27e9e:	b00d      	add	sp, #52	; 0x34
   27ea0:	bd30      	pop	{r4, r5, pc}
		err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx,
   27ea2:	ab07      	add	r3, sp, #28
   27ea4:	aa01      	add	r2, sp, #4
   27ea6:	a903      	add	r1, sp, #12
   27ea8:	4628      	mov	r0, r5
   27eaa:	f7ff fcd9 	bl	27860 <nrf_cloud_decode_data_endpoint>
		if (err) {
   27eae:	4604      	mov	r4, r0
   27eb0:	b178      	cbz	r0, 27ed2 <all_ua_request_handler+0x8a>
			LOG_ERR("nrf_cloud_decode_data_endpoint failed %d",
   27eb2:	2301      	movs	r3, #1
   27eb4:	f04f 0000 	mov.w	r0, #0
   27eb8:	4a46      	ldr	r2, [pc, #280]	; (27fd4 <all_ua_request_handler+0x18c>)
   27eba:	f363 0002 	bfi	r0, r3, #0, #3
   27ebe:	4b46      	ldr	r3, [pc, #280]	; (27fd8 <all_ua_request_handler+0x190>)
   27ec0:	f36f 00c5 	bfc	r0, #3, #3
   27ec4:	1a9b      	subs	r3, r3, r2
   27ec6:	08db      	lsrs	r3, r3, #3
   27ec8:	f363 108f 	bfi	r0, r3, #6, #10
   27ecc:	4622      	mov	r2, r4
   27ece:	4944      	ldr	r1, [pc, #272]	; (27fe0 <all_ua_request_handler+0x198>)
   27ed0:	e7d3      	b.n	27e7a <all_ua_request_handler+0x32>
		nct_dc_endpoint_set(&tx, &rx, &m_endpoint);
   27ed2:	aa07      	add	r2, sp, #28
   27ed4:	a901      	add	r1, sp, #4
   27ed6:	a803      	add	r0, sp, #12
   27ed8:	f000 fe54 	bl	28b84 <nct_dc_endpoint_set>
		err = state_ua_pin_complete();
   27edc:	f7ff fe60 	bl	27ba0 <state_ua_pin_complete>
		if (err) {
   27ee0:	4604      	mov	r4, r0
   27ee2:	b3a8      	cbz	r0, 27f50 <all_ua_request_handler+0x108>
			LOG_ERR("state_ua_pin_complete failed %d", err);
   27ee4:	2301      	movs	r3, #1
   27ee6:	f04f 0000 	mov.w	r0, #0
   27eea:	4a3a      	ldr	r2, [pc, #232]	; (27fd4 <all_ua_request_handler+0x18c>)
   27eec:	f363 0002 	bfi	r0, r3, #0, #3
   27ef0:	4b39      	ldr	r3, [pc, #228]	; (27fd8 <all_ua_request_handler+0x190>)
   27ef2:	f36f 00c5 	bfc	r0, #3, #3
   27ef6:	1a9b      	subs	r3, r3, r2
   27ef8:	08db      	lsrs	r3, r3, #3
   27efa:	f363 108f 	bfi	r0, r3, #6, #10
   27efe:	4622      	mov	r2, r4
   27f00:	4938      	ldr	r1, [pc, #224]	; (27fe4 <all_ua_request_handler+0x19c>)
   27f02:	e7ba      	b.n	27e7a <all_ua_request_handler+0x32>
		return state_ua_initiate();
   27f04:	f7ff fd8e 	bl	27a24 <state_ua_initiate>
   27f08:	e7c7      	b.n	27e9a <all_ua_request_handler+0x52>
		return state_ua_input_wait();
   27f0a:	f7ff fea1 	bl	27c50 <state_ua_input_wait>
   27f0e:	e7c4      	b.n	27e9a <all_ua_request_handler+0x52>
		err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx, NULL);
   27f10:	2300      	movs	r3, #0
   27f12:	aa03      	add	r2, sp, #12
   27f14:	a907      	add	r1, sp, #28
   27f16:	4628      	mov	r0, r5
   27f18:	f7ff fca2 	bl	27860 <nrf_cloud_decode_data_endpoint>
		if (err) {
   27f1c:	4604      	mov	r4, r0
   27f1e:	b178      	cbz	r0, 27f40 <all_ua_request_handler+0xf8>
			LOG_ERR("nrf_cloud_decode_data_endpoint Failed %d",
   27f20:	2301      	movs	r3, #1
   27f22:	f04f 0000 	mov.w	r0, #0
   27f26:	4a2b      	ldr	r2, [pc, #172]	; (27fd4 <all_ua_request_handler+0x18c>)
   27f28:	f363 0002 	bfi	r0, r3, #0, #3
   27f2c:	4b2a      	ldr	r3, [pc, #168]	; (27fd8 <all_ua_request_handler+0x190>)
   27f2e:	f36f 00c5 	bfc	r0, #3, #3
   27f32:	1a9b      	subs	r3, r3, r2
   27f34:	08db      	lsrs	r3, r3, #3
   27f36:	f363 108f 	bfi	r0, r3, #6, #10
   27f3a:	4622      	mov	r2, r4
   27f3c:	492a      	ldr	r1, [pc, #168]	; (27fe8 <all_ua_request_handler+0x1a0>)
   27f3e:	e79c      	b.n	27e7a <all_ua_request_handler+0x32>
		nct_dc_endpoint_set(&tx, &rx, NULL);
   27f40:	4602      	mov	r2, r0
   27f42:	a903      	add	r1, sp, #12
   27f44:	a807      	add	r0, sp, #28
   27f46:	f000 fe1d 	bl	28b84 <nct_dc_endpoint_set>
		err = state_ua_complete();
   27f4a:	f7ff fec3 	bl	27cd4 <state_ua_complete>
   27f4e:	4604      	mov	r4, r0
		(void) nct_disconnect();
   27f50:	f000 fee2 	bl	28d18 <nct_disconnect>
		return err;
   27f54:	e7a2      	b.n	27e9c <all_ua_request_handler+0x54>
	struct nct_cc_data msg = {
   27f56:	2501      	movs	r5, #1
   27f58:	2210      	movs	r2, #16
   27f5a:	2100      	movs	r1, #0
   27f5c:	a803      	add	r0, sp, #12
   27f5e:	f017 fef5 	bl	3fd4c <memset>
	err = nrf_cloud_encode_state(STATE_UA_INPUT_MISMATCH, &msg.data);
   27f62:	a903      	add	r1, sp, #12
   27f64:	200a      	movs	r0, #10
	struct nct_cc_data msg = {
   27f66:	9505      	str	r5, [sp, #20]
   27f68:	f88d 5018 	strb.w	r5, [sp, #24]
	err = nrf_cloud_encode_state(STATE_UA_INPUT_MISMATCH, &msg.data);
   27f6c:	f7ff fb1c 	bl	275a8 <nrf_cloud_encode_state>
	if (err) {
   27f70:	4604      	mov	r4, r0
   27f72:	b170      	cbz	r0, 27f92 <all_ua_request_handler+0x14a>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   27f74:	f04f 0000 	mov.w	r0, #0
   27f78:	4a16      	ldr	r2, [pc, #88]	; (27fd4 <all_ua_request_handler+0x18c>)
   27f7a:	4b17      	ldr	r3, [pc, #92]	; (27fd8 <all_ua_request_handler+0x190>)
   27f7c:	f365 0002 	bfi	r0, r5, #0, #3
   27f80:	1a9b      	subs	r3, r3, r2
   27f82:	f36f 00c5 	bfc	r0, #3, #3
   27f86:	08db      	lsrs	r3, r3, #3
   27f88:	f363 108f 	bfi	r0, r3, #6, #10
   27f8c:	4622      	mov	r2, r4
   27f8e:	4917      	ldr	r1, [pc, #92]	; (27fec <all_ua_request_handler+0x1a4>)
   27f90:	e773      	b.n	27e7a <all_ua_request_handler+0x32>
	err = nct_cc_send(&msg);
   27f92:	a803      	add	r0, sp, #12
   27f94:	f000 fd70 	bl	28a78 <nct_cc_send>
   27f98:	4604      	mov	r4, r0
	nrf_cloud_free((void *)msg.data.ptr);
   27f9a:	9804      	ldr	r0, [sp, #16]
   27f9c:	f020 fd13 	bl	489c6 <k_free>
	struct nrf_cloud_evt evt = {
   27fa0:	2100      	movs	r1, #0
   27fa2:	2214      	movs	r2, #20
   27fa4:	a807      	add	r0, sp, #28
   27fa6:	f017 fed1 	bl	3fd4c <memset>
   27faa:	2302      	movs	r3, #2
   27fac:	f88d 301c 	strb.w	r3, [sp, #28]
   27fb0:	2306      	movs	r3, #6
	nfsm_set_current_state_and_notify(STATE_UA_INPUT_WAIT, &evt);
   27fb2:	2009      	movs	r0, #9
	struct nrf_cloud_evt evt = {
   27fb4:	930a      	str	r3, [sp, #40]	; 0x28
	nfsm_set_current_state_and_notify(STATE_UA_INPUT_WAIT, &evt);
   27fb6:	a907      	add	r1, sp, #28
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   27fb8:	f7fe ffb0 	bl	26f1c <nfsm_set_current_state_and_notify>
   27fbc:	e76e      	b.n	27e9c <all_ua_request_handler+0x54>
		const struct nrf_cloud_evt evt = {
   27fbe:	2100      	movs	r1, #0
   27fc0:	2214      	movs	r2, #20
   27fc2:	a807      	add	r0, sp, #28
   27fc4:	f017 fec2 	bl	3fd4c <memset>
   27fc8:	23ff      	movs	r3, #255	; 0xff
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   27fca:	a907      	add	r1, sp, #28
		const struct nrf_cloud_evt evt = {
   27fcc:	f88d 301c 	strb.w	r3, [sp, #28]
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   27fd0:	2011      	movs	r0, #17
   27fd2:	e7f1      	b.n	27fb8 <all_ua_request_handler+0x170>
   27fd4:	00049018 	.word	0x00049018
   27fd8:	000490e0 	.word	0x000490e0
   27fdc:	0004de54 	.word	0x0004de54
   27fe0:	0004deaa 	.word	0x0004deaa
   27fe4:	0004ddec 	.word	0x0004ddec
   27fe8:	0004de0c 	.word	0x0004de0c
   27fec:	0004df35 	.word	0x0004df35

00027ff0 <cc_connection_handler>:
{
   27ff0:	b510      	push	{r4, lr}
   27ff2:	4604      	mov	r4, r0
   27ff4:	b086      	sub	sp, #24
	const struct nrf_cloud_evt evt = {
   27ff6:	2100      	movs	r1, #0
   27ff8:	2214      	movs	r2, #20
   27ffa:	a801      	add	r0, sp, #4
   27ffc:	f017 fea6 	bl	3fd4c <memset>
   28000:	23ff      	movs	r3, #255	; 0xff
	if (nct_evt->status != 0) {
   28002:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   28004:	f88d 3004 	strb.w	r3, [sp, #4]
	if (nct_evt->status != 0) {
   28008:	b139      	cbz	r1, 2801a <cc_connection_handler+0x2a>
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   2800a:	a901      	add	r1, sp, #4
   2800c:	2011      	movs	r0, #17
   2800e:	f7fe ff85 	bl	26f1c <nfsm_set_current_state_and_notify>
		return 0;
   28012:	2400      	movs	r4, #0
}
   28014:	4620      	mov	r0, r4
   28016:	b006      	add	sp, #24
   28018:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   2801a:	2004      	movs	r0, #4
   2801c:	f7fe ff7e 	bl	26f1c <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   28020:	4806      	ldr	r0, [pc, #24]	; (2803c <cc_connection_handler+0x4c>)
   28022:	f000 fd29 	bl	28a78 <nct_cc_send>
	if (err) {
   28026:	4604      	mov	r4, r0
   28028:	b120      	cbz	r0, 28034 <cc_connection_handler+0x44>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2802a:	2002      	movs	r0, #2
   2802c:	a901      	add	r1, sp, #4
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2802e:	f7fe ff75 	bl	26f1c <nfsm_set_current_state_and_notify>
   28032:	e7ef      	b.n	28014 <cc_connection_handler+0x24>
   28034:	4601      	mov	r1, r0
   28036:	2005      	movs	r0, #5
   28038:	e7f9      	b.n	2802e <cc_connection_handler+0x3e>
   2803a:	bf00      	nop
   2803c:	00049860 	.word	0x00049860

00028040 <initiate_cmd_in_dc_conn_handler>:

static int initiate_cmd_in_dc_conn_handler(const struct nct_evt *nct_evt)
{
   28040:	b513      	push	{r0, r1, r4, lr}
	int err;
	enum nfsm_state expected_state;
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;

	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   28042:	6840      	ldr	r0, [r0, #4]
   28044:	f10d 0107 	add.w	r1, sp, #7
   28048:	f7ff f9ce 	bl	273e8 <nrf_cloud_decode_requested_state>
	if (err) {
   2804c:	4604      	mov	r4, r0
   2804e:	b198      	cbz	r0, 28078 <initiate_cmd_in_dc_conn_handler+0x38>
		LOG_ERR("nrf_cloud_decode_requested_state Failed %d", err);
   28050:	2301      	movs	r3, #1
   28052:	f04f 0000 	mov.w	r0, #0
   28056:	4a11      	ldr	r2, [pc, #68]	; (2809c <initiate_cmd_in_dc_conn_handler+0x5c>)
   28058:	f363 0002 	bfi	r0, r3, #0, #3
   2805c:	4b10      	ldr	r3, [pc, #64]	; (280a0 <initiate_cmd_in_dc_conn_handler+0x60>)
   2805e:	f36f 00c5 	bfc	r0, #3, #3
   28062:	1a9b      	subs	r3, r3, r2
   28064:	08db      	lsrs	r3, r3, #3
   28066:	f363 108f 	bfi	r0, r3, #6, #10
   2806a:	4622      	mov	r2, r4
   2806c:	490d      	ldr	r1, [pc, #52]	; (280a4 <initiate_cmd_in_dc_conn_handler+0x64>)
   2806e:	f01e fb18 	bl	466a2 <log_string_sync>
		return state_ua_pin_wait();
	}

	/* Any other state is ignored. */
	return 0;
}
   28072:	4620      	mov	r0, r4
   28074:	b002      	add	sp, #8
   28076:	bd10      	pop	{r4, pc}
	if (expected_state == STATE_UA_INITIATE) {
   28078:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2807c:	2b08      	cmp	r3, #8
   2807e:	d105      	bne.n	2808c <initiate_cmd_in_dc_conn_handler+0x4c>
		(void) nct_dc_disconnect();
   28080:	f000 fe1e 	bl	28cc0 <nct_dc_disconnect>
		return state_ua_initiate();
   28084:	f7ff fcce 	bl	27a24 <state_ua_initiate>
		return state_ua_pin_wait();
   28088:	4604      	mov	r4, r0
   2808a:	e7f2      	b.n	28072 <initiate_cmd_in_dc_conn_handler+0x32>
	} else if (expected_state == STATE_UA_PIN_WAIT) {
   2808c:	2b06      	cmp	r3, #6
   2808e:	d1f0      	bne.n	28072 <initiate_cmd_in_dc_conn_handler+0x32>
		(void) nct_dc_disconnect();
   28090:	f000 fe16 	bl	28cc0 <nct_dc_disconnect>
		return state_ua_pin_wait();
   28094:	f7ff fcfe 	bl	27a94 <state_ua_pin_wait>
   28098:	e7f6      	b.n	28088 <initiate_cmd_in_dc_conn_handler+0x48>
   2809a:	bf00      	nop
   2809c:	00049018 	.word	0x00049018
   280a0:	000490e0 	.word	0x000490e0
   280a4:	0004de54 	.word	0x0004de54

000280a8 <nfsm_handle_incoming_event>:
	if (state < STATE_TOTAL) {
   280a8:	2911      	cmp	r1, #17
{
   280aa:	b570      	push	{r4, r5, r6, lr}
   280ac:	4606      	mov	r6, r0
   280ae:	460d      	mov	r5, r1
	if (state < STATE_TOTAL) {
   280b0:	d81c      	bhi.n	280ec <nfsm_handle_incoming_event+0x44>
		int err = state_event_handlers[state][nct_evt->type](nct_evt);
   280b2:	4b16      	ldr	r3, [pc, #88]	; (2810c <nfsm_handle_incoming_event+0x64>)
   280b4:	7a02      	ldrb	r2, [r0, #8]
   280b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   280ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   280be:	4798      	blx	r3
		if (err) {
   280c0:	4604      	mov	r4, r0
   280c2:	b188      	cbz	r0, 280e8 <nfsm_handle_incoming_event+0x40>
			LOG_ERR("Handler failed! state: %d, type: %d",
   280c4:	2301      	movs	r3, #1
   280c6:	f04f 0000 	mov.w	r0, #0
   280ca:	4a11      	ldr	r2, [pc, #68]	; (28110 <nfsm_handle_incoming_event+0x68>)
   280cc:	f363 0002 	bfi	r0, r3, #0, #3
   280d0:	4b10      	ldr	r3, [pc, #64]	; (28114 <nfsm_handle_incoming_event+0x6c>)
   280d2:	f36f 00c5 	bfc	r0, #3, #3
   280d6:	1a9b      	subs	r3, r3, r2
   280d8:	08db      	lsrs	r3, r3, #3
   280da:	f363 108f 	bfi	r0, r3, #6, #10
   280de:	462a      	mov	r2, r5
   280e0:	7a33      	ldrb	r3, [r6, #8]
   280e2:	490d      	ldr	r1, [pc, #52]	; (28118 <nfsm_handle_incoming_event+0x70>)
   280e4:	f01e fadd 	bl	466a2 <log_string_sync>
}
   280e8:	4620      	mov	r0, r4
   280ea:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(false);
   280ec:	f240 1305 	movw	r3, #261	; 0x105
   280f0:	4a0a      	ldr	r2, [pc, #40]	; (2811c <nfsm_handle_incoming_event+0x74>)
   280f2:	490b      	ldr	r1, [pc, #44]	; (28120 <nfsm_handle_incoming_event+0x78>)
   280f4:	480b      	ldr	r0, [pc, #44]	; (28124 <nfsm_handle_incoming_event+0x7c>)
   280f6:	f01e fab1 	bl	4665c <printk>
   280fa:	f240 1105 	movw	r1, #261	; 0x105
   280fe:	4807      	ldr	r0, [pc, #28]	; (2811c <nfsm_handle_incoming_event+0x74>)
   28100:	f01e fab9 	bl	46676 <assert_post_action>
	return -EINVAL;
   28104:	f06f 0415 	mvn.w	r4, #21
   28108:	e7ee      	b.n	280e8 <nfsm_handle_incoming_event+0x40>
   2810a:	bf00      	nop
   2810c:	000498c0 	.word	0x000498c0
   28110:	00049018 	.word	0x00049018
   28114:	000490e0 	.word	0x000490e0
   28118:	0004ded3 	.word	0x0004ded3
   2811c:	0004def7 	.word	0x0004def7
   28120:	000505de 	.word	0x000505de
   28124:	0004b5bf 	.word	0x0004b5bf

00028128 <dc_endpoint_reset>:
};

/* Internal routine to reset data endpoint information. */
static void dc_endpoint_reset(void)
{
	nct.dc_rx_endp.utf8 = NULL;
   28128:	2200      	movs	r2, #0
   2812a:	4b04      	ldr	r3, [pc, #16]	; (2813c <dc_endpoint_reset+0x14>)
	nct.dc_rx_endp.size = 0;
   2812c:	e9c3 222c 	strd	r2, r2, [r3, #176]	; 0xb0

	nct.dc_tx_endp.utf8 = NULL;
	nct.dc_tx_endp.size = 0;
   28130:	e9c3 222a 	strd	r2, r2, [r3, #168]	; 0xa8

	nct.dc_m_endp.utf8 = NULL;
	nct.dc_m_endp.size = 0;
   28134:	e9c3 222e 	strd	r2, r2, [r3, #184]	; 0xb8
}
   28138:	4770      	bx	lr
   2813a:	bf00      	nop
   2813c:	20023c84 	.word	0x20023c84

00028140 <dc_send>:
	}
	dc_endpoint_reset();
}

static u32_t dc_send(const struct nct_dc_data *dc_data, u8_t qos)
{
   28140:	b530      	push	{r4, r5, lr}
   28142:	460d      	mov	r5, r1
   28144:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   28146:	4604      	mov	r4, r0
   28148:	b368      	cbz	r0, 281a6 <dc_send+0x66>
		return -EINVAL;
	}

	struct mqtt_publish_param publish = {
   2814a:	2210      	movs	r2, #16
   2814c:	2100      	movs	r1, #0
   2814e:	a802      	add	r0, sp, #8
   28150:	f017 fdfc 	bl	3fd4c <memset>
		.message.topic.qos = qos,
		.message.topic.topic.size = nct.dc_tx_endp.size,
		.message.topic.topic.utf8 = nct.dc_tx_endp.utf8,
   28154:	4b15      	ldr	r3, [pc, #84]	; (281ac <dc_send+0x6c>)
	struct mqtt_publish_param publish = {
   28156:	f88d 5008 	strb.w	r5, [sp, #8]
   2815a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   2815e:	9200      	str	r2, [sp, #0]
   28160:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
   28164:	9201      	str	r2, [sp, #4]
	};

	/* Populate payload. */
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   28166:	6822      	ldr	r2, [r4, #0]
   28168:	b11a      	cbz	r2, 28172 <dc_send+0x32>
   2816a:	6861      	ldr	r1, [r4, #4]
   2816c:	b109      	cbz	r1, 28172 <dc_send+0x32>
		publish.message.payload.data = (u8_t *)dc_data->data.ptr;
		publish.message.payload.len = dc_data->data.len;
   2816e:	e9cd 1203 	strd	r1, r2, [sp, #12]
	}

	if (dc_data->id != 0) {
   28172:	68a2      	ldr	r2, [r4, #8]
   28174:	b13a      	cbz	r2, 28186 <dc_send+0x46>
		publish.message_id = dc_data->id;
   28176:	f8ad 2014 	strh.w	r2, [sp, #20]
	} else {
		publish.message_id = dc_get_next_message_id();
	}

	return mqtt_publish(&nct.client, &publish);
   2817a:	4669      	mov	r1, sp
   2817c:	480c      	ldr	r0, [pc, #48]	; (281b0 <dc_send+0x70>)
   2817e:	f01f f844 	bl	4720a <mqtt_publish>
}
   28182:	b007      	add	sp, #28
   28184:	bd30      	pop	{r4, r5, pc}
	nct.message_id++;
   28186:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   2818a:	1c51      	adds	r1, r2, #1
	if ((u16_t)nct.message_id == 0) {
   2818c:	b288      	uxth	r0, r1
   2818e:	b130      	cbz	r0, 2819e <dc_send+0x5e>
	nct.message_id++;
   28190:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		publish.message_id = dc_get_next_message_id();
   28194:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   28198:	f8ad 3014 	strh.w	r3, [sp, #20]
   2819c:	e7ed      	b.n	2817a <dc_send+0x3a>
		nct.message_id++;
   2819e:	3202      	adds	r2, #2
   281a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
   281a4:	e7f6      	b.n	28194 <dc_send+0x54>
		return -EINVAL;
   281a6:	f06f 0015 	mvn.w	r0, #21
   281aa:	e7ea      	b.n	28182 <dc_send+0x42>
   281ac:	20023c84 	.word	0x20023c84
   281b0:	20023c9c 	.word	0x20023c9c

000281b4 <dc_endpoint_free>:
{
   281b4:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   281b6:	4c0a      	ldr	r4, [pc, #40]	; (281e0 <dc_endpoint_free+0x2c>)
   281b8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   281bc:	b108      	cbz	r0, 281c2 <dc_endpoint_free+0xe>
		nrf_cloud_free(nct.dc_rx_endp.utf8);
   281be:	f020 fc02 	bl	489c6 <k_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   281c2:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   281c6:	b108      	cbz	r0, 281cc <dc_endpoint_free+0x18>
		nrf_cloud_free(nct.dc_tx_endp.utf8);
   281c8:	f020 fbfd 	bl	489c6 <k_free>
	if (nct.dc_m_endp.utf8 != NULL) {
   281cc:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   281d0:	b108      	cbz	r0, 281d6 <dc_endpoint_free+0x22>
		nrf_cloud_free(nct.dc_m_endp.utf8);
   281d2:	f020 fbf8 	bl	489c6 <k_free>
}
   281d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dc_endpoint_reset();
   281da:	f7ff bfa5 	b.w	28128 <dc_endpoint_reset>
   281de:	bf00      	nop
   281e0:	20023c84 	.word	0x20023c84

000281e4 <aws_fota_cb_handler>:
}

#if defined(CONFIG_AWS_FOTA)
/* Handle AWS FOTA events */
static void aws_fota_cb_handler(enum aws_fota_evt_id evt)
{
   281e4:	b508      	push	{r3, lr}
	switch (evt) {
   281e6:	4603      	mov	r3, r0
   281e8:	b110      	cbz	r0, 281f0 <aws_fota_cb_handler+0xc>
   281ea:	2801      	cmp	r0, #1
   281ec:	d015      	beq.n	2821a <aws_fota_cb_handler+0x36>

	case AWS_FOTA_EVT_ERROR:
		LOG_ERR("AWS_FOTA_EVT_ERROR");
		break;
	}
}
   281ee:	bd08      	pop	{r3, pc}
		LOG_DBG("AWS_FOTA_EVT_DONE, rebooting to apply update.");
   281f0:	2204      	movs	r2, #4
   281f2:	f04f 0000 	mov.w	r0, #0
   281f6:	f362 0002 	bfi	r0, r2, #0, #3
   281fa:	f363 00c5 	bfi	r0, r3, #3, #3
   281fe:	4a0f      	ldr	r2, [pc, #60]	; (2823c <aws_fota_cb_handler+0x58>)
   28200:	4b0f      	ldr	r3, [pc, #60]	; (28240 <aws_fota_cb_handler+0x5c>)
   28202:	4910      	ldr	r1, [pc, #64]	; (28244 <aws_fota_cb_handler+0x60>)
   28204:	1a9b      	subs	r3, r3, r2
   28206:	08db      	lsrs	r3, r3, #3
   28208:	f363 108f 	bfi	r0, r3, #6, #10
   2820c:	4a0e      	ldr	r2, [pc, #56]	; (28248 <aws_fota_cb_handler+0x64>)
   2820e:	f01e fa48 	bl	466a2 <log_string_sync>
}
   28212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		nct_apply_update();
   28216:	f7fe bfbb 	b.w	27190 <nct_apply_update>
		LOG_ERR("AWS_FOTA_EVT_ERROR");
   2821a:	f04f 0000 	mov.w	r0, #0
   2821e:	4907      	ldr	r1, [pc, #28]	; (2823c <aws_fota_cb_handler+0x58>)
   28220:	f363 0002 	bfi	r0, r3, #0, #3
   28224:	4b06      	ldr	r3, [pc, #24]	; (28240 <aws_fota_cb_handler+0x5c>)
   28226:	f36f 00c5 	bfc	r0, #3, #3
   2822a:	1a5b      	subs	r3, r3, r1
   2822c:	08db      	lsrs	r3, r3, #3
   2822e:	f363 108f 	bfi	r0, r3, #6, #10
   28232:	4906      	ldr	r1, [pc, #24]	; (2824c <aws_fota_cb_handler+0x68>)
}
   28234:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("AWS_FOTA_EVT_ERROR");
   28238:	f01e ba33 	b.w	466a2 <log_string_sync>
   2823c:	00049018 	.word	0x00049018
   28240:	000490e8 	.word	0x000490e8
   28244:	0004e048 	.word	0x0004e048
   28248:	0004dfa0 	.word	0x0004dfa0
   2824c:	0004e07a 	.word	0x0004e07a

00028250 <nct_mqtt_evt_handler>:
}

/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
   28250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;
	struct nct_evt evt = {
   28254:	2700      	movs	r7, #0
   28256:	69cb      	ldr	r3, [r1, #28]
{
   28258:	b08e      	sub	sp, #56	; 0x38
   2825a:	4606      	mov	r6, r0
   2825c:	460c      	mov	r4, r1
	struct nct_evt evt = {
   2825e:	e9cd 7705 	strd	r7, r7, [sp, #20]
   28262:	9304      	str	r3, [sp, #16]
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

#if defined(CONFIG_AWS_FOTA)
	err = aws_fota_mqtt_evt_handler(mqtt_client, _mqtt_evt);
   28264:	f001 ffd2 	bl	2a20c <aws_fota_mqtt_evt_handler>
	if (err > 0) {
   28268:	1e02      	subs	r2, r0, #0
   2826a:	f300 8081 	bgt.w	28370 <nct_mqtt_evt_handler+0x120>
		/* Event handled by FOTA library so we can skip it */
		return;
	} else if (err < 0) {
   2826e:	d02e      	beq.n	282ce <nct_mqtt_evt_handler+0x7e>
		LOG_ERR("aws_fota_mqtt_evt_handler: Failed! %d", err);
   28270:	f04f 0801 	mov.w	r8, #1
   28274:	f04f 0000 	mov.w	r0, #0
   28278:	4b9d      	ldr	r3, [pc, #628]	; (284f0 <nct_mqtt_evt_handler+0x2a0>)
   2827a:	4d9e      	ldr	r5, [pc, #632]	; (284f4 <nct_mqtt_evt_handler+0x2a4>)
   2827c:	f368 0002 	bfi	r0, r8, #0, #3
   28280:	1aed      	subs	r5, r5, r3
   28282:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   28286:	f367 00c5 	bfi	r0, r7, #3, #3
   2828a:	f365 108f 	bfi	r0, r5, #6, #10
   2828e:	499a      	ldr	r1, [pc, #616]	; (284f8 <nct_mqtt_evt_handler+0x2a8>)
   28290:	f01e fa07 	bl	466a2 <log_string_sync>
		LOG_DBG("Disconnecting MQTT client...");
   28294:	2304      	movs	r3, #4
   28296:	f04f 0000 	mov.w	r0, #0
   2829a:	f363 0002 	bfi	r0, r3, #0, #3
   2829e:	f367 00c5 	bfi	r0, r7, #3, #3
   282a2:	4a96      	ldr	r2, [pc, #600]	; (284fc <nct_mqtt_evt_handler+0x2ac>)
   282a4:	f365 108f 	bfi	r0, r5, #6, #10
   282a8:	4995      	ldr	r1, [pc, #596]	; (28500 <nct_mqtt_evt_handler+0x2b0>)
   282aa:	f01e f9fa 	bl	466a2 <log_string_sync>

		err = mqtt_disconnect(mqtt_client);
   282ae:	4630      	mov	r0, r6
   282b0:	f01f f800 	bl	472b4 <mqtt_disconnect>
		if (err) {
   282b4:	4602      	mov	r2, r0
   282b6:	b150      	cbz	r0, 282ce <nct_mqtt_evt_handler+0x7e>
			LOG_ERR("Could not disconnect: %d", err);
   282b8:	f04f 0000 	mov.w	r0, #0
   282bc:	f368 0002 	bfi	r0, r8, #0, #3
   282c0:	f367 00c5 	bfi	r0, r7, #3, #3
   282c4:	f365 108f 	bfi	r0, r5, #6, #10
   282c8:	498e      	ldr	r1, [pc, #568]	; (28504 <nct_mqtt_evt_handler+0x2b4>)
   282ca:	f01e f9ea 	bl	466a2 <log_string_sync>
		}
	}
#endif /* defined(CONFIG_AWS_FOTA) */

	switch (_mqtt_evt->type) {
   282ce:	7823      	ldrb	r3, [r4, #0]
   282d0:	2b08      	cmp	r3, #8
   282d2:	d84d      	bhi.n	28370 <nct_mqtt_evt_handler+0x120>
   282d4:	e8df f013 	tbh	[pc, r3, lsl #1]
   282d8:	00f00009 	.word	0x00f00009
   282dc:	00d7001e 	.word	0x00d7001e
   282e0:	004c004c 	.word	0x004c004c
   282e4:	00a3004c 	.word	0x00a3004c
   282e8:	00be      	.short	0x00be
	case MQTT_EVT_CONNACK: {
		LOG_DBG("MQTT_EVT_CONNACK");
   282ea:	2304      	movs	r3, #4
   282ec:	f04f 0000 	mov.w	r0, #0
   282f0:	4a7f      	ldr	r2, [pc, #508]	; (284f0 <nct_mqtt_evt_handler+0x2a0>)
   282f2:	f363 0002 	bfi	r0, r3, #0, #3
   282f6:	4b7f      	ldr	r3, [pc, #508]	; (284f4 <nct_mqtt_evt_handler+0x2a4>)
   282f8:	f36f 00c5 	bfc	r0, #3, #3
   282fc:	1a9b      	subs	r3, r3, r2
   282fe:	08db      	lsrs	r3, r3, #3
   28300:	f363 108f 	bfi	r0, r3, #6, #10
   28304:	4a7d      	ldr	r2, [pc, #500]	; (284fc <nct_mqtt_evt_handler+0x2ac>)
   28306:	4980      	ldr	r1, [pc, #512]	; (28508 <nct_mqtt_evt_handler+0x2b8>)
   28308:	f01e f9cb 	bl	466a2 <log_string_sync>

		evt.type = NCT_EVT_CONNECTED;
   2830c:	2300      	movs	r3, #0
		break;
	}
	case MQTT_EVT_DISCONNECT: {
		LOG_DBG("MQTT_EVT_DISCONNECT: result=%d", _mqtt_evt->result);

		evt.type = NCT_EVT_DISCONNECTED;
   2830e:	f88d 3018 	strb.w	r3, [sp, #24]
   28312:	e05f      	b.n	283d4 <nct_mqtt_evt_handler+0x184>
		LOG_DBG("MQTT_EVT_PUBLISH: id=%d len=%d ",
   28314:	2304      	movs	r3, #4
   28316:	f04f 0000 	mov.w	r0, #0
   2831a:	4a75      	ldr	r2, [pc, #468]	; (284f0 <nct_mqtt_evt_handler+0x2a0>)
   2831c:	f363 0002 	bfi	r0, r3, #0, #3
   28320:	4b74      	ldr	r3, [pc, #464]	; (284f4 <nct_mqtt_evt_handler+0x2a4>)
   28322:	f36f 00c5 	bfc	r0, #3, #3
   28326:	1a9b      	subs	r3, r3, r2
   28328:	6962      	ldr	r2, [r4, #20]
   2832a:	f3c3 05c9 	ubfx	r5, r3, #3, #10
   2832e:	9200      	str	r2, [sp, #0]
   28330:	f365 108f 	bfi	r0, r5, #6, #10
   28334:	4a71      	ldr	r2, [pc, #452]	; (284fc <nct_mqtt_evt_handler+0x2ac>)
   28336:	8b23      	ldrh	r3, [r4, #24]
   28338:	4974      	ldr	r1, [pc, #464]	; (2850c <nct_mqtt_evt_handler+0x2bc>)
   2833a:	f01e f9b2 	bl	466a2 <log_string_sync>
		int err = publish_get_payload(mqtt_client,
   2833e:	6962      	ldr	r2, [r4, #20]
	if (length > sizeof(nct.payload_buf)) {
   28340:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   28344:	d817      	bhi.n	28376 <nct_mqtt_evt_handler+0x126>
	return mqtt_readall_publish_payload(client, nct.payload_buf, length);
   28346:	4972      	ldr	r1, [pc, #456]	; (28510 <nct_mqtt_evt_handler+0x2c0>)
   28348:	4630      	mov	r0, r6
   2834a:	f01f f8a0 	bl	4748e <mqtt_readall_publish_payload>
		if (err < 0) {
   2834e:	1e02      	subs	r2, r0, #0
   28350:	da14      	bge.n	2837c <nct_mqtt_evt_handler+0x12c>
			LOG_ERR("publish_get_payload: failed %d", err);
   28352:	2301      	movs	r3, #1
   28354:	f04f 0000 	mov.w	r0, #0
   28358:	f363 0002 	bfi	r0, r3, #0, #3
   2835c:	f36f 00c5 	bfc	r0, #3, #3
   28360:	f365 108f 	bfi	r0, r5, #6, #10
   28364:	496b      	ldr	r1, [pc, #428]	; (28514 <nct_mqtt_evt_handler+0x2c4>)
   28366:	f01e f99c 	bl	466a2 <log_string_sync>
			mqtt_disconnect(mqtt_client);
   2836a:	4630      	mov	r0, r6
   2836c:	f01e ffa2 	bl	472b4 <mqtt_disconnect>

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
		}
	}
}
   28370:	b00e      	add	sp, #56	; 0x38
   28372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
   28376:	f06f 0279 	mvn.w	r2, #121	; 0x79
   2837a:	e7ea      	b.n	28352 <nct_mqtt_evt_handler+0x102>
	for (u32_t index = 0; index < list_size; index++) {
   2837c:	2500      	movs	r5, #0
   2837e:	f04f 080c 	mov.w	r8, #12
		if (strings_compare(
   28382:	4f65      	ldr	r7, [pc, #404]	; (28518 <nct_mqtt_evt_handler+0x2c8>)
   28384:	fb08 f305 	mul.w	r3, r8, r5
   28388:	18fa      	adds	r2, r7, r3
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   2838a:	6851      	ldr	r1, [r2, #4]
   2838c:	68a2      	ldr	r2, [r4, #8]
   2838e:	6860      	ldr	r0, [r4, #4]
   28390:	428a      	cmp	r2, r1
   28392:	bf28      	it	cs
   28394:	460a      	movcs	r2, r1
   28396:	59d9      	ldr	r1, [r3, r7]
   28398:	f018 f922 	bl	405e0 <strncmp>
		if (strings_compare(
   2839c:	2800      	cmp	r0, #0
   2839e:	d130      	bne.n	28402 <nct_mqtt_evt_handler+0x1b2>
			*opcode = nct_cc_rx_opcode_map[index];
   283a0:	4b5e      	ldr	r3, [pc, #376]	; (2851c <nct_mqtt_evt_handler+0x2cc>)
   283a2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   283a6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			cc.id = p->message_id;
   283aa:	8b23      	ldrh	r3, [r4, #24]
   283ac:	930c      	str	r3, [sp, #48]	; 0x30
			cc.data.ptr = nct.payload_buf;
   283ae:	4b58      	ldr	r3, [pc, #352]	; (28510 <nct_mqtt_evt_handler+0x2c0>)
   283b0:	930b      	str	r3, [sp, #44]	; 0x2c
			cc.data.len = p->message.payload.len;
   283b2:	6963      	ldr	r3, [r4, #20]
   283b4:	930a      	str	r3, [sp, #40]	; 0x28
			evt.type = NCT_EVT_CC_RX_DATA;
   283b6:	2303      	movs	r3, #3
   283b8:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.cc = &cc;
   283bc:	ab0a      	add	r3, sp, #40	; 0x28
			evt.param.dc = &dc;
   283be:	9305      	str	r3, [sp, #20]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   283c0:	7b23      	ldrb	r3, [r4, #12]
   283c2:	2b01      	cmp	r3, #1
   283c4:	d106      	bne.n	283d4 <nct_mqtt_evt_handler+0x184>
			const struct mqtt_puback_param ack = {
   283c6:	8b23      	ldrh	r3, [r4, #24]
   283c8:	a90e      	add	r1, sp, #56	; 0x38
   283ca:	f821 3d2c 	strh.w	r3, [r1, #-44]!
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   283ce:	4630      	mov	r0, r6
   283d0:	f01e ff49 	bl	47266 <mqtt_publish_qos1_ack>
		err = nct_input(&evt);
   283d4:	a804      	add	r0, sp, #16
   283d6:	f7fe fed5 	bl	27184 <nct_input>
		if (err != 0) {
   283da:	4602      	mov	r2, r0
   283dc:	2800      	cmp	r0, #0
   283de:	d0c7      	beq.n	28370 <nct_mqtt_evt_handler+0x120>
			LOG_ERR("nct_input: failed %d", err);
   283e0:	2301      	movs	r3, #1
   283e2:	f04f 0000 	mov.w	r0, #0
   283e6:	4942      	ldr	r1, [pc, #264]	; (284f0 <nct_mqtt_evt_handler+0x2a0>)
   283e8:	f363 0002 	bfi	r0, r3, #0, #3
   283ec:	4b41      	ldr	r3, [pc, #260]	; (284f4 <nct_mqtt_evt_handler+0x2a4>)
   283ee:	f36f 00c5 	bfc	r0, #3, #3
   283f2:	1a5b      	subs	r3, r3, r1
   283f4:	08db      	lsrs	r3, r3, #3
   283f6:	f363 108f 	bfi	r0, r3, #6, #10
   283fa:	4949      	ldr	r1, [pc, #292]	; (28520 <nct_mqtt_evt_handler+0x2d0>)
   283fc:	f01e f951 	bl	466a2 <log_string_sync>
   28400:	e7b6      	b.n	28370 <nct_mqtt_evt_handler+0x120>
	for (u32_t index = 0; index < list_size; index++) {
   28402:	3501      	adds	r5, #1
   28404:	2d03      	cmp	r5, #3
   28406:	d1bd      	bne.n	28384 <nct_mqtt_evt_handler+0x134>
			dc.id = p->message_id;
   28408:	8b23      	ldrh	r3, [r4, #24]
   2840a:	9309      	str	r3, [sp, #36]	; 0x24
			dc.data.ptr = p->message.payload.data;
   2840c:	6923      	ldr	r3, [r4, #16]
   2840e:	9308      	str	r3, [sp, #32]
			dc.data.len = p->message.payload.len;
   28410:	6963      	ldr	r3, [r4, #20]
   28412:	9307      	str	r3, [sp, #28]
			evt.type = NCT_EVT_DC_RX_DATA;
   28414:	2305      	movs	r3, #5
   28416:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.dc = &dc;
   2841a:	ab07      	add	r3, sp, #28
   2841c:	e7cf      	b.n	283be <nct_mqtt_evt_handler+0x16e>
		LOG_DBG("MQTT_EVT_SUBACK: id=%d result=%d",
   2841e:	2304      	movs	r3, #4
   28420:	f04f 0000 	mov.w	r0, #0
   28424:	4a32      	ldr	r2, [pc, #200]	; (284f0 <nct_mqtt_evt_handler+0x2a0>)
   28426:	f363 0002 	bfi	r0, r3, #0, #3
   2842a:	4b32      	ldr	r3, [pc, #200]	; (284f4 <nct_mqtt_evt_handler+0x2a4>)
   2842c:	f36f 00c5 	bfc	r0, #3, #3
   28430:	1a9b      	subs	r3, r3, r2
   28432:	69e2      	ldr	r2, [r4, #28]
   28434:	08db      	lsrs	r3, r3, #3
   28436:	f363 108f 	bfi	r0, r3, #6, #10
   2843a:	9200      	str	r2, [sp, #0]
   2843c:	88a3      	ldrh	r3, [r4, #4]
   2843e:	4a2f      	ldr	r2, [pc, #188]	; (284fc <nct_mqtt_evt_handler+0x2ac>)
   28440:	4938      	ldr	r1, [pc, #224]	; (28524 <nct_mqtt_evt_handler+0x2d4>)
   28442:	f01e f92e 	bl	466a2 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   28446:	f240 42d2 	movw	r2, #1234	; 0x4d2
   2844a:	88a3      	ldrh	r3, [r4, #4]
   2844c:	4293      	cmp	r3, r2
   2844e:	d147      	bne.n	284e0 <nct_mqtt_evt_handler+0x290>
			evt.type = NCT_EVT_CC_CONNECTED;
   28450:	2301      	movs	r3, #1
   28452:	e75c      	b.n	2830e <nct_mqtt_evt_handler+0xbe>
		LOG_DBG("MQTT_EVT_UNSUBACK");
   28454:	2304      	movs	r3, #4
   28456:	f04f 0000 	mov.w	r0, #0
   2845a:	4a25      	ldr	r2, [pc, #148]	; (284f0 <nct_mqtt_evt_handler+0x2a0>)
   2845c:	f363 0002 	bfi	r0, r3, #0, #3
   28460:	4b24      	ldr	r3, [pc, #144]	; (284f4 <nct_mqtt_evt_handler+0x2a4>)
   28462:	f36f 00c5 	bfc	r0, #3, #3
   28466:	1a9b      	subs	r3, r3, r2
   28468:	08db      	lsrs	r3, r3, #3
   2846a:	f363 108f 	bfi	r0, r3, #6, #10
   2846e:	4a23      	ldr	r2, [pc, #140]	; (284fc <nct_mqtt_evt_handler+0x2ac>)
   28470:	492d      	ldr	r1, [pc, #180]	; (28528 <nct_mqtt_evt_handler+0x2d8>)
   28472:	f01e f916 	bl	466a2 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   28476:	f240 43d2 	movw	r3, #1234	; 0x4d2
   2847a:	88a2      	ldrh	r2, [r4, #4]
   2847c:	429a      	cmp	r2, r3
   2847e:	f47f af77 	bne.w	28370 <nct_mqtt_evt_handler+0x120>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   28482:	2307      	movs	r3, #7
   28484:	e743      	b.n	2830e <nct_mqtt_evt_handler+0xbe>
		LOG_DBG("MQTT_EVT_PUBACK: id=%d result=%d",
   28486:	2504      	movs	r5, #4
   28488:	f04f 0000 	mov.w	r0, #0
   2848c:	4a18      	ldr	r2, [pc, #96]	; (284f0 <nct_mqtt_evt_handler+0x2a0>)
   2848e:	4b19      	ldr	r3, [pc, #100]	; (284f4 <nct_mqtt_evt_handler+0x2a4>)
   28490:	f365 0002 	bfi	r0, r5, #0, #3
   28494:	1a9b      	subs	r3, r3, r2
   28496:	69e2      	ldr	r2, [r4, #28]
   28498:	08db      	lsrs	r3, r3, #3
   2849a:	f36f 00c5 	bfc	r0, #3, #3
   2849e:	f363 108f 	bfi	r0, r3, #6, #10
   284a2:	9200      	str	r2, [sp, #0]
   284a4:	88a3      	ldrh	r3, [r4, #4]
   284a6:	4a15      	ldr	r2, [pc, #84]	; (284fc <nct_mqtt_evt_handler+0x2ac>)
   284a8:	4920      	ldr	r1, [pc, #128]	; (2852c <nct_mqtt_evt_handler+0x2dc>)
   284aa:	f01e f8fa 	bl	466a2 <log_string_sync>
		evt.param.data_id = _mqtt_evt->param.puback.message_id;
   284ae:	88a3      	ldrh	r3, [r4, #4]
		evt.type = NCT_EVT_CC_TX_DATA_CNF;
   284b0:	f88d 5018 	strb.w	r5, [sp, #24]
		evt.param.data_id = _mqtt_evt->param.puback.message_id;
   284b4:	9305      	str	r3, [sp, #20]
   284b6:	e78d      	b.n	283d4 <nct_mqtt_evt_handler+0x184>
		LOG_DBG("MQTT_EVT_DISCONNECT: result=%d", _mqtt_evt->result);
   284b8:	2304      	movs	r3, #4
   284ba:	f04f 0000 	mov.w	r0, #0
   284be:	4a0c      	ldr	r2, [pc, #48]	; (284f0 <nct_mqtt_evt_handler+0x2a0>)
   284c0:	f363 0002 	bfi	r0, r3, #0, #3
   284c4:	4b0b      	ldr	r3, [pc, #44]	; (284f4 <nct_mqtt_evt_handler+0x2a4>)
   284c6:	f36f 00c5 	bfc	r0, #3, #3
   284ca:	1a9b      	subs	r3, r3, r2
   284cc:	08db      	lsrs	r3, r3, #3
   284ce:	f363 108f 	bfi	r0, r3, #6, #10
   284d2:	4a0a      	ldr	r2, [pc, #40]	; (284fc <nct_mqtt_evt_handler+0x2ac>)
   284d4:	69e3      	ldr	r3, [r4, #28]
   284d6:	4916      	ldr	r1, [pc, #88]	; (28530 <nct_mqtt_evt_handler+0x2e0>)
   284d8:	f01e f8e3 	bl	466a2 <log_string_sync>
		evt.type = NCT_EVT_DISCONNECTED;
   284dc:	2309      	movs	r3, #9
   284de:	e716      	b.n	2830e <nct_mqtt_evt_handler+0xbe>
		if (_mqtt_evt->param.suback.message_id == NCT_DC_SUBSCRIBE_ID) {
   284e0:	f242 223d 	movw	r2, #8765	; 0x223d
   284e4:	4293      	cmp	r3, r2
   284e6:	f47f af43 	bne.w	28370 <nct_mqtt_evt_handler+0x120>
			evt.type = NCT_EVT_DC_CONNECTED;
   284ea:	2302      	movs	r3, #2
   284ec:	e70f      	b.n	2830e <nct_mqtt_evt_handler+0xbe>
   284ee:	bf00      	nop
   284f0:	00049018 	.word	0x00049018
   284f4:	000490e8 	.word	0x000490e8
   284f8:	0004e408 	.word	0x0004e408
   284fc:	0004dfb4 	.word	0x0004dfb4
   28500:	0004e42e 	.word	0x0004e42e
   28504:	0004e44f 	.word	0x0004e44f
   28508:	0004e468 	.word	0x0004e468
   2850c:	0004e47d 	.word	0x0004e47d
   28510:	20023f48 	.word	0x20023f48
   28514:	0004e4a1 	.word	0x0004e4a1
   28518:	00049980 	.word	0x00049980
   2851c:	000499a4 	.word	0x000499a4
   28520:	0004e543 	.word	0x0004e543
   28524:	0004e4c0 	.word	0x0004e4c0
   28528:	0004e4e5 	.word	0x0004e4e5
   2852c:	0004e4fb 	.word	0x0004e4fb
   28530:	0004e520 	.word	0x0004e520

00028534 <nct_mqtt_connect>:
{
   28534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	mqtt_client_init(&nct.client);
   28538:	4c27      	ldr	r4, [pc, #156]	; (285d8 <nct_mqtt_connect+0xa4>)
	nct.client.password = NULL;
   2853a:	2700      	movs	r7, #0
	mqtt_client_init(&nct.client);
   2853c:	f104 0018 	add.w	r0, r4, #24
   28540:	f01e fe07 	bl	47152 <mqtt_client_init>
	nct.client.evt_cb = nct_mqtt_evt_handler;
   28544:	4b25      	ldr	r3, [pc, #148]	; (285dc <nct_mqtt_connect+0xa8>)
	nct.client.client_id.utf8 = (u8_t *)client_id_buf;
   28546:	4826      	ldr	r0, [pc, #152]	; (285e0 <nct_mqtt_connect+0xac>)
	nct.client.broker = (struct sockaddr *)&nct.broker;
   28548:	f104 0990 	add.w	r9, r4, #144	; 0x90
	nct.client.evt_cb = nct_mqtt_evt_handler;
   2854c:	67a3      	str	r3, [r4, #120]	; 0x78
	nct.client.broker = (struct sockaddr *)&nct.broker;
   2854e:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
	nct.client.client_id.utf8 = (u8_t *)client_id_buf;
   28552:	65e0      	str	r0, [r4, #92]	; 0x5c
	nct.client.client_id.size = strlen(client_id_buf);
   28554:	f018 f816 	bl	40584 <strlen>
	nct.client.protocol_version = MQTT_VERSION_3_1_1;
   28558:	2304      	movs	r3, #4
   2855a:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	nct.client.rx_buf = nct.rx_buf;
   2855e:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   28562:	67e3      	str	r3, [r4, #124]	; 0x7c
   28564:	4626      	mov	r6, r4
	nct.client.rx_buf_size = sizeof(nct.rx_buf);
   28566:	f44f 7380 	mov.w	r3, #256	; 0x100
	nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   2856a:	f04f 0801 	mov.w	r8, #1
	nct.client.tx_buf = nct.tx_buf;
   2856e:	f504 72e2 	add.w	r2, r4, #452	; 0x1c4
   28572:	f104 0544 	add.w	r5, r4, #68	; 0x44
	nct.client.client_id.size = strlen(client_id_buf);
   28576:	6620      	str	r0, [r4, #96]	; 0x60
	nct.client.rx_buf_size = sizeof(nct.rx_buf);
   28578:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	nct.client.tx_buf_size = sizeof(nct.tx_buf);
   2857c:	e9c4 2321 	strd	r2, r3, [r4, #132]	; 0x84
   28580:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   28582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   28584:	e896 0003 	ldmia.w	r6, {r0, r1}
	nct.client.user_name = NULL;
   28588:	e9c4 771a 	strd	r7, r7, [r4, #104]	; 0x68
	int err = aws_fota_init(&nct.client, STRINGIFY(APP_VERSION),
   2858c:	4a15      	ldr	r2, [pc, #84]	; (285e4 <nct_mqtt_connect+0xb0>)
   2858e:	e885 0003 	stmia.w	r5, {r0, r1}
   28592:	4915      	ldr	r1, [pc, #84]	; (285e8 <nct_mqtt_connect+0xb4>)
   28594:	f104 0018 	add.w	r0, r4, #24
	nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   28598:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
	int err = aws_fota_init(&nct.client, STRINGIFY(APP_VERSION),
   2859c:	f002 f8b0 	bl	2a700 <aws_fota_init>
	if (err != 0) {
   285a0:	4605      	mov	r5, r0
   285a2:	b928      	cbnz	r0, 285b0 <nct_mqtt_connect+0x7c>
	return mqtt_connect(&nct.client);
   285a4:	f104 0018 	add.w	r0, r4, #24
}
   285a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_connect(&nct.client);
   285ac:	f01e bdeb 	b.w	47186 <mqtt_connect>
		LOG_ERR("ERROR: aws_fota_init %d", err);
   285b0:	f04f 0000 	mov.w	r0, #0
   285b4:	4a0d      	ldr	r2, [pc, #52]	; (285ec <nct_mqtt_connect+0xb8>)
   285b6:	4b0e      	ldr	r3, [pc, #56]	; (285f0 <nct_mqtt_connect+0xbc>)
   285b8:	f368 0002 	bfi	r0, r8, #0, #3
   285bc:	1a9b      	subs	r3, r3, r2
   285be:	08db      	lsrs	r3, r3, #3
   285c0:	f367 00c5 	bfi	r0, r7, #3, #3
   285c4:	f363 108f 	bfi	r0, r3, #6, #10
   285c8:	462a      	mov	r2, r5
   285ca:	490a      	ldr	r1, [pc, #40]	; (285f4 <nct_mqtt_connect+0xc0>)
   285cc:	f01e f869 	bl	466a2 <log_string_sync>
}
   285d0:	4628      	mov	r0, r5
   285d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   285d6:	bf00      	nop
   285d8:	20023c84 	.word	0x20023c84
   285dc:	00028251 	.word	0x00028251
   285e0:	2002b8bc 	.word	0x2002b8bc
   285e4:	000281e5 	.word	0x000281e5
   285e8:	0004d8dd 	.word	0x0004d8dd
   285ec:	00049018 	.word	0x00049018
   285f0:	000490e8 	.word	0x000490e8
   285f4:	0004e3f0 	.word	0x0004e3f0

000285f8 <nct_init>:

int nct_init(void)
{
   285f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	dc_endpoint_reset();
   285fa:	f7ff fd95 	bl	28128 <dc_endpoint_reset>
	at_socket_fd = nrf_socket(NRF_AF_LTE, 0, NRF_PROTO_AT);
   285fe:	f240 2201 	movw	r2, #513	; 0x201
   28602:	2100      	movs	r1, #0
   28604:	2066      	movs	r0, #102	; 0x66
   28606:	f005 fafb 	bl	2dc00 <nrf_socket>
	__ASSERT_NO_MSG(at_socket_fd >= 0);
   2860a:	1e04      	subs	r4, r0, #0
   2860c:	da0b      	bge.n	28626 <nct_init+0x2e>
   2860e:	4985      	ldr	r1, [pc, #532]	; (28824 <nct_init+0x22c>)
   28610:	4885      	ldr	r0, [pc, #532]	; (28828 <nct_init+0x230>)
   28612:	f240 1309 	movw	r3, #265	; 0x109
   28616:	4a85      	ldr	r2, [pc, #532]	; (2882c <nct_init+0x234>)
   28618:	f01e f820 	bl	4665c <printk>
   2861c:	f240 1109 	movw	r1, #265	; 0x109
   28620:	4882      	ldr	r0, [pc, #520]	; (2882c <nct_init+0x234>)
   28622:	f01e f828 	bl	46676 <assert_post_action>
	bytes_written = nrf_write(at_socket_fd, "AT+CGSN", 7);
   28626:	2207      	movs	r2, #7
   28628:	4981      	ldr	r1, [pc, #516]	; (28830 <nct_init+0x238>)
   2862a:	4620      	mov	r0, r4
   2862c:	f005 fb3e 	bl	2dcac <nrf_write>
	__ASSERT_NO_MSG(bytes_written == 7);
   28630:	2807      	cmp	r0, #7
   28632:	d00b      	beq.n	2864c <nct_init+0x54>
   28634:	497f      	ldr	r1, [pc, #508]	; (28834 <nct_init+0x23c>)
   28636:	487c      	ldr	r0, [pc, #496]	; (28828 <nct_init+0x230>)
   28638:	f44f 7386 	mov.w	r3, #268	; 0x10c
   2863c:	4a7b      	ldr	r2, [pc, #492]	; (2882c <nct_init+0x234>)
   2863e:	f01e f80d 	bl	4665c <printk>
   28642:	f44f 7186 	mov.w	r1, #268	; 0x10c
   28646:	4879      	ldr	r0, [pc, #484]	; (2882c <nct_init+0x234>)
   28648:	f01e f815 	bl	46676 <assert_post_action>
	bytes_read = nrf_read(at_socket_fd, imei_buf, NRF_IMEI_LEN);
   2864c:	220f      	movs	r2, #15
   2864e:	4669      	mov	r1, sp
   28650:	4620      	mov	r0, r4
   28652:	f005 fb77 	bl	2dd44 <nrf_read>
	__ASSERT_NO_MSG(bytes_read == NRF_IMEI_LEN);
   28656:	280f      	cmp	r0, #15
   28658:	d00b      	beq.n	28672 <nct_init+0x7a>
   2865a:	4977      	ldr	r1, [pc, #476]	; (28838 <nct_init+0x240>)
   2865c:	4872      	ldr	r0, [pc, #456]	; (28828 <nct_init+0x230>)
   2865e:	f240 130f 	movw	r3, #271	; 0x10f
   28662:	4a72      	ldr	r2, [pc, #456]	; (2882c <nct_init+0x234>)
   28664:	f01d fffa 	bl	4665c <printk>
   28668:	f240 110f 	movw	r1, #271	; 0x10f
   2866c:	486f      	ldr	r0, [pc, #444]	; (2882c <nct_init+0x234>)
   2866e:	f01e f802 	bl	46676 <assert_post_action>
	imei_buf[NRF_IMEI_LEN] = 0;
   28672:	2300      	movs	r3, #0
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "nrf-%s", imei_buf);
   28674:	4a71      	ldr	r2, [pc, #452]	; (2883c <nct_init+0x244>)
	imei_buf[NRF_IMEI_LEN] = 0;
   28676:	f88d 300f 	strb.w	r3, [sp, #15]
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "nrf-%s", imei_buf);
   2867a:	2114      	movs	r1, #20
   2867c:	466b      	mov	r3, sp
   2867e:	4870      	ldr	r0, [pc, #448]	; (28840 <nct_init+0x248>)
   28680:	f017 fdb0 	bl	401e4 <snprintf>
	ret = nrf_close(at_socket_fd);
   28684:	4620      	mov	r0, r4
   28686:	f005 facd 	bl	2dc24 <nrf_close>
	__ASSERT_NO_MSG(ret == 0);
   2868a:	b158      	cbz	r0, 286a4 <nct_init+0xac>
   2868c:	496d      	ldr	r1, [pc, #436]	; (28844 <nct_init+0x24c>)
   2868e:	4866      	ldr	r0, [pc, #408]	; (28828 <nct_init+0x230>)
   28690:	f240 1315 	movw	r3, #277	; 0x115
   28694:	4a65      	ldr	r2, [pc, #404]	; (2882c <nct_init+0x234>)
   28696:	f01d ffe1 	bl	4665c <printk>
   2869a:	f240 1115 	movw	r1, #277	; 0x115
   2869e:	4863      	ldr	r0, [pc, #396]	; (2882c <nct_init+0x234>)
   286a0:	f01d ffe9 	bl	46676 <assert_post_action>
	LOG_DBG("client_id = %s", log_strdup(id));
   286a4:	2504      	movs	r5, #4
   286a6:	f04f 0600 	mov.w	r6, #0
   286aa:	4b67      	ldr	r3, [pc, #412]	; (28848 <nct_init+0x250>)
   286ac:	4c67      	ldr	r4, [pc, #412]	; (2884c <nct_init+0x254>)
   286ae:	4864      	ldr	r0, [pc, #400]	; (28840 <nct_init+0x248>)
   286b0:	1ae4      	subs	r4, r4, r3
   286b2:	f01e f808 	bl	466c6 <log_strdup>
   286b6:	f365 0602 	bfi	r6, r5, #0, #3
   286ba:	f36f 06c5 	bfc	r6, #3, #3
   286be:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   286c2:	f364 168f 	bfi	r6, r4, #6, #10
   286c6:	4603      	mov	r3, r0
   286c8:	4a61      	ldr	r2, [pc, #388]	; (28850 <nct_init+0x258>)
   286ca:	4962      	ldr	r1, [pc, #392]	; (28854 <nct_init+0x25c>)
   286cc:	4630      	mov	r0, r6
   286ce:	f01d ffe8 	bl	466a2 <log_string_sync>
	ret = snprintf(shadow_base_topic, sizeof(shadow_base_topic),
   286d2:	4b5b      	ldr	r3, [pc, #364]	; (28840 <nct_init+0x248>)
   286d4:	4a60      	ldr	r2, [pc, #384]	; (28858 <nct_init+0x260>)
   286d6:	2127      	movs	r1, #39	; 0x27
   286d8:	4860      	ldr	r0, [pc, #384]	; (2885c <nct_init+0x264>)
   286da:	f017 fd83 	bl	401e4 <snprintf>
	if (ret != NCT_SHADOW_BASE_TOPIC_LEN) {
   286de:	2826      	cmp	r0, #38	; 0x26
   286e0:	d003      	beq.n	286ea <nct_init+0xf2>
		return -ENOMEM;
   286e2:	f06f 000b 	mvn.w	r0, #11
	if (err) {
		return err;
	}

	return nct_provision();
}
   286e6:	b004      	add	sp, #16
   286e8:	bd70      	pop	{r4, r5, r6, pc}
	LOG_DBG("shadow_base_topic: %s", log_strdup(shadow_base_topic));
   286ea:	f04f 0600 	mov.w	r6, #0
   286ee:	485b      	ldr	r0, [pc, #364]	; (2885c <nct_init+0x264>)
   286f0:	f01d ffe9 	bl	466c6 <log_strdup>
   286f4:	f365 0602 	bfi	r6, r5, #0, #3
   286f8:	f36f 06c5 	bfc	r6, #3, #3
   286fc:	f364 168f 	bfi	r6, r4, #6, #10
   28700:	4603      	mov	r3, r0
   28702:	4a57      	ldr	r2, [pc, #348]	; (28860 <nct_init+0x268>)
   28704:	4957      	ldr	r1, [pc, #348]	; (28864 <nct_init+0x26c>)
   28706:	4630      	mov	r0, r6
   28708:	f01d ffcb 	bl	466a2 <log_string_sync>
	ret = snprintf(accepted_topic, sizeof(accepted_topic),
   2870c:	4b4c      	ldr	r3, [pc, #304]	; (28840 <nct_init+0x248>)
   2870e:	4a56      	ldr	r2, [pc, #344]	; (28868 <nct_init+0x270>)
   28710:	2128      	movs	r1, #40	; 0x28
   28712:	4856      	ldr	r0, [pc, #344]	; (2886c <nct_init+0x274>)
   28714:	f017 fd66 	bl	401e4 <snprintf>
	if (ret != NCT_ACCEPTED_TOPIC_LEN) {
   28718:	2827      	cmp	r0, #39	; 0x27
   2871a:	d1e2      	bne.n	286e2 <nct_init+0xea>
	LOG_DBG("accepted_topic: %s", log_strdup(accepted_topic));
   2871c:	f04f 0600 	mov.w	r6, #0
   28720:	4852      	ldr	r0, [pc, #328]	; (2886c <nct_init+0x274>)
   28722:	f01d ffd0 	bl	466c6 <log_strdup>
   28726:	f365 0602 	bfi	r6, r5, #0, #3
   2872a:	f36f 06c5 	bfc	r6, #3, #3
   2872e:	f364 168f 	bfi	r6, r4, #6, #10
   28732:	4603      	mov	r3, r0
   28734:	4a4a      	ldr	r2, [pc, #296]	; (28860 <nct_init+0x268>)
   28736:	494e      	ldr	r1, [pc, #312]	; (28870 <nct_init+0x278>)
   28738:	4630      	mov	r0, r6
   2873a:	f01d ffb2 	bl	466a2 <log_string_sync>
	ret = snprintf(rejected_topic, sizeof(rejected_topic),
   2873e:	4b40      	ldr	r3, [pc, #256]	; (28840 <nct_init+0x248>)
   28740:	4a4c      	ldr	r2, [pc, #304]	; (28874 <nct_init+0x27c>)
   28742:	2134      	movs	r1, #52	; 0x34
   28744:	484c      	ldr	r0, [pc, #304]	; (28878 <nct_init+0x280>)
   28746:	f017 fd4d 	bl	401e4 <snprintf>
	if (ret != NCT_REJECTED_TOPIC_LEN) {
   2874a:	2833      	cmp	r0, #51	; 0x33
   2874c:	d1c9      	bne.n	286e2 <nct_init+0xea>
	LOG_DBG("rejected_topic: %s", log_strdup(rejected_topic));
   2874e:	f04f 0600 	mov.w	r6, #0
   28752:	4849      	ldr	r0, [pc, #292]	; (28878 <nct_init+0x280>)
   28754:	f01d ffb7 	bl	466c6 <log_strdup>
   28758:	f365 0602 	bfi	r6, r5, #0, #3
   2875c:	f36f 06c5 	bfc	r6, #3, #3
   28760:	f364 168f 	bfi	r6, r4, #6, #10
   28764:	4603      	mov	r3, r0
   28766:	4a3e      	ldr	r2, [pc, #248]	; (28860 <nct_init+0x268>)
   28768:	4944      	ldr	r1, [pc, #272]	; (2887c <nct_init+0x284>)
   2876a:	4630      	mov	r0, r6
   2876c:	f01d ff99 	bl	466a2 <log_string_sync>
	ret = snprintf(update_delta_topic, sizeof(update_delta_topic),
   28770:	4b33      	ldr	r3, [pc, #204]	; (28840 <nct_init+0x248>)
   28772:	4a43      	ldr	r2, [pc, #268]	; (28880 <nct_init+0x288>)
   28774:	2134      	movs	r1, #52	; 0x34
   28776:	4843      	ldr	r0, [pc, #268]	; (28884 <nct_init+0x28c>)
   28778:	f017 fd34 	bl	401e4 <snprintf>
	if (ret != NCT_UPDATE_DELTA_TOPIC_LEN) {
   2877c:	2833      	cmp	r0, #51	; 0x33
   2877e:	d1b0      	bne.n	286e2 <nct_init+0xea>
	LOG_DBG("update_delta_topic: %s", log_strdup(update_delta_topic));
   28780:	f04f 0600 	mov.w	r6, #0
   28784:	483f      	ldr	r0, [pc, #252]	; (28884 <nct_init+0x28c>)
   28786:	f01d ff9e 	bl	466c6 <log_strdup>
   2878a:	f365 0602 	bfi	r6, r5, #0, #3
   2878e:	f36f 06c5 	bfc	r6, #3, #3
   28792:	f364 168f 	bfi	r6, r4, #6, #10
   28796:	4603      	mov	r3, r0
   28798:	4a31      	ldr	r2, [pc, #196]	; (28860 <nct_init+0x268>)
   2879a:	493b      	ldr	r1, [pc, #236]	; (28888 <nct_init+0x290>)
   2879c:	4630      	mov	r0, r6
   2879e:	f01d ff80 	bl	466a2 <log_string_sync>
	ret = snprintf(update_topic, sizeof(update_topic),
   287a2:	4b27      	ldr	r3, [pc, #156]	; (28840 <nct_init+0x248>)
   287a4:	4a39      	ldr	r2, [pc, #228]	; (2888c <nct_init+0x294>)
   287a6:	212e      	movs	r1, #46	; 0x2e
   287a8:	4839      	ldr	r0, [pc, #228]	; (28890 <nct_init+0x298>)
   287aa:	f017 fd1b 	bl	401e4 <snprintf>
	if (ret != NCT_UPDATE_TOPIC_LEN) {
   287ae:	282d      	cmp	r0, #45	; 0x2d
   287b0:	d197      	bne.n	286e2 <nct_init+0xea>
	LOG_DBG("update_topic: %s", log_strdup(update_topic));
   287b2:	f04f 0600 	mov.w	r6, #0
   287b6:	4836      	ldr	r0, [pc, #216]	; (28890 <nct_init+0x298>)
   287b8:	f01d ff85 	bl	466c6 <log_strdup>
   287bc:	f365 0602 	bfi	r6, r5, #0, #3
   287c0:	f36f 06c5 	bfc	r6, #3, #3
   287c4:	f364 168f 	bfi	r6, r4, #6, #10
   287c8:	4603      	mov	r3, r0
   287ca:	4a25      	ldr	r2, [pc, #148]	; (28860 <nct_init+0x268>)
   287cc:	4931      	ldr	r1, [pc, #196]	; (28894 <nct_init+0x29c>)
   287ce:	4630      	mov	r0, r6
   287d0:	f01d ff67 	bl	466a2 <log_string_sync>
	ret = snprintf(shadow_get_topic, sizeof(shadow_get_topic),
   287d4:	4b1a      	ldr	r3, [pc, #104]	; (28840 <nct_init+0x248>)
   287d6:	4a30      	ldr	r2, [pc, #192]	; (28898 <nct_init+0x2a0>)
   287d8:	212b      	movs	r1, #43	; 0x2b
   287da:	4830      	ldr	r0, [pc, #192]	; (2889c <nct_init+0x2a4>)
   287dc:	f017 fd02 	bl	401e4 <snprintf>
	if (ret != NCT_SHADOW_GET_LEN) {
   287e0:	282a      	cmp	r0, #42	; 0x2a
   287e2:	f47f af7e 	bne.w	286e2 <nct_init+0xea>
	LOG_DBG("shadow_get_topic: %s", log_strdup(shadow_get_topic));
   287e6:	f04f 0600 	mov.w	r6, #0
   287ea:	482c      	ldr	r0, [pc, #176]	; (2889c <nct_init+0x2a4>)
   287ec:	f01d ff6b 	bl	466c6 <log_strdup>
   287f0:	f365 0602 	bfi	r6, r5, #0, #3
   287f4:	f36f 06c5 	bfc	r6, #3, #3
   287f8:	f364 168f 	bfi	r6, r4, #6, #10
   287fc:	4603      	mov	r3, r0
   287fe:	4a18      	ldr	r2, [pc, #96]	; (28860 <nct_init+0x268>)
   28800:	4630      	mov	r0, r6
   28802:	4927      	ldr	r1, [pc, #156]	; (288a0 <nct_init+0x2a8>)
   28804:	f01d ff4d 	bl	466a2 <log_string_sync>
	nct.tls_config.cipher_count = 0;
   28808:	2202      	movs	r2, #2
   2880a:	2000      	movs	r0, #0
	nct.tls_config.peer_verify = 2;
   2880c:	4b25      	ldr	r3, [pc, #148]	; (288a4 <nct_init+0x2ac>)
	nct.tls_config.cipher_count = 0;
   2880e:	e9c3 2000 	strd	r2, r0, [r3]
	nct.tls_config.sec_tag_count = ARRAY_SIZE(sec_tag_list);
   28812:	2201      	movs	r2, #1
   28814:	60da      	str	r2, [r3, #12]
	nct.tls_config.sec_tag_list = sec_tag_list;
   28816:	4a24      	ldr	r2, [pc, #144]	; (288a8 <nct_init+0x2b0>)
	nct.tls_config.cipher_list = NULL;
   28818:	6098      	str	r0, [r3, #8]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2881a:	611a      	str	r2, [r3, #16]
	nct.tls_config.hostname = NRF_CLOUD_HOSTNAME;
   2881c:	4a23      	ldr	r2, [pc, #140]	; (288ac <nct_init+0x2b4>)
   2881e:	615a      	str	r2, [r3, #20]
	return nct_provision();
   28820:	e761      	b.n	286e6 <nct_init+0xee>
   28822:	bf00      	nop
   28824:	0004e236 	.word	0x0004e236
   28828:	0004b5bf 	.word	0x0004b5bf
   2882c:	0004e1f2 	.word	0x0004e1f2
   28830:	0004d703 	.word	0x0004d703
   28834:	0004e248 	.word	0x0004e248
   28838:	0004e25b 	.word	0x0004e25b
   2883c:	0004e26c 	.word	0x0004e26c
   28840:	2002b8bc 	.word	0x2002b8bc
   28844:	0004d0d4 	.word	0x0004d0d4
   28848:	00049018 	.word	0x00049018
   2884c:	000490e8 	.word	0x000490e8
   28850:	0004df7a 	.word	0x0004df7a
   28854:	0004e273 	.word	0x0004e273
   28858:	0004e286 	.word	0x0004e286
   2885c:	2002b904 	.word	0x2002b904
   28860:	0004df8c 	.word	0x0004df8c
   28864:	0004e29c 	.word	0x0004e29c
   28868:	0004e2b6 	.word	0x0004e2b6
   2886c:	2002b894 	.word	0x2002b894
   28870:	0004e2cd 	.word	0x0004e2cd
   28874:	0004e2e4 	.word	0x0004e2e4
   28878:	2002b8d0 	.word	0x2002b8d0
   2887c:	0004e307 	.word	0x0004e307
   28880:	0004e31e 	.word	0x0004e31e
   28884:	2002b956 	.word	0x2002b956
   28888:	0004e341 	.word	0x0004e341
   2888c:	0004e35c 	.word	0x0004e35c
   28890:	2002b98a 	.word	0x2002b98a
   28894:	0004e379 	.word	0x0004e379
   28898:	0004e38e 	.word	0x0004e38e
   2889c:	2002b92b 	.word	0x2002b92b
   288a0:	0004e3a8 	.word	0x0004e3a8
   288a4:	20023c84 	.word	0x20023c84
   288a8:	20031be8 	.word	0x20031be8
   288ac:	0004e3c1 	.word	0x0004e3c1

000288b0 <nct_connect>:

	return err;
}
#else
int nct_connect(void)
{
   288b0:	b570      	push	{r4, r5, r6, lr}
   288b2:	b08c      	sub	sp, #48	; 0x30
	int err;
	struct addrinfo *result;
	struct addrinfo *addr;
	struct addrinfo hints = {
   288b4:	2220      	movs	r2, #32
   288b6:	2100      	movs	r1, #0
   288b8:	a804      	add	r0, sp, #16
   288ba:	f017 fa47 	bl	3fd4c <memset>
   288be:	2301      	movs	r3, #1

static inline int getaddrinfo(const char *node, const char *service,
			      const struct addrinfo *hints,
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
   288c0:	4d48      	ldr	r5, [pc, #288]	; (289e4 <nct_connect+0x134>)
   288c2:	e9cd 3305 	strd	r3, r3, [sp, #20]
   288c6:	682b      	ldr	r3, [r5, #0]
   288c8:	b94b      	cbnz	r3, 288de <nct_connect+0x2e>
   288ca:	4947      	ldr	r1, [pc, #284]	; (289e8 <nct_connect+0x138>)
   288cc:	4847      	ldr	r0, [pc, #284]	; (289ec <nct_connect+0x13c>)
   288ce:	2393      	movs	r3, #147	; 0x93
   288d0:	4a47      	ldr	r2, [pc, #284]	; (289f0 <nct_connect+0x140>)
   288d2:	f01d fec3 	bl	4665c <printk>
   288d6:	2193      	movs	r1, #147	; 0x93
   288d8:	4845      	ldr	r0, [pc, #276]	; (289f0 <nct_connect+0x140>)
   288da:	f01d fecc 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
   288de:	682b      	ldr	r3, [r5, #0]
   288e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   288e2:	b94b      	cbnz	r3, 288f8 <nct_connect+0x48>
   288e4:	4943      	ldr	r1, [pc, #268]	; (289f4 <nct_connect+0x144>)
   288e6:	4841      	ldr	r0, [pc, #260]	; (289ec <nct_connect+0x13c>)
   288e8:	2394      	movs	r3, #148	; 0x94
   288ea:	4a41      	ldr	r2, [pc, #260]	; (289f0 <nct_connect+0x140>)
   288ec:	f01d feb6 	bl	4665c <printk>
   288f0:	2194      	movs	r1, #148	; 0x94
   288f2:	483f      	ldr	r0, [pc, #252]	; (289f0 <nct_connect+0x140>)
   288f4:	f01d febf 	bl	46676 <assert_post_action>

	return socket_ops->getaddrinfo(node, service, hints, res);
   288f8:	682b      	ldr	r3, [r5, #0]
   288fa:	aa04      	add	r2, sp, #16
   288fc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   288fe:	2100      	movs	r1, #0
   28900:	ab03      	add	r3, sp, #12
   28902:	483d      	ldr	r0, [pc, #244]	; (289f8 <nct_connect+0x148>)
   28904:	47a0      	blx	r4
		.ai_family = NRF_CLOUD_AF_FAMILY,
		.ai_socktype = SOCK_STREAM
	};

	err = getaddrinfo(NRF_CLOUD_HOSTNAME, NULL, &hints, &result);
	if (err) {
   28906:	4604      	mov	r4, r0
   28908:	b1a0      	cbz	r0, 28934 <nct_connect+0x84>
		LOG_DBG("getaddrinfo failed %d", err);
   2890a:	2304      	movs	r3, #4
   2890c:	f04f 0000 	mov.w	r0, #0
   28910:	4a3a      	ldr	r2, [pc, #232]	; (289fc <nct_connect+0x14c>)
   28912:	f363 0002 	bfi	r0, r3, #0, #3
   28916:	4b3a      	ldr	r3, [pc, #232]	; (28a00 <nct_connect+0x150>)
   28918:	f36f 00c5 	bfc	r0, #3, #3
   2891c:	1a9b      	subs	r3, r3, r2
   2891e:	08db      	lsrs	r3, r3, #3
   28920:	f363 108f 	bfi	r0, r3, #6, #10
   28924:	4a37      	ldr	r2, [pc, #220]	; (28a04 <nct_connect+0x154>)
   28926:	4623      	mov	r3, r4
   28928:	4937      	ldr	r1, [pc, #220]	; (28a08 <nct_connect+0x158>)
   2892a:	f01d feba 	bl	466a2 <log_string_sync>

	/* Free the address. */
	freeaddrinfo(result);

	return err;
}
   2892e:	4620      	mov	r0, r4
   28930:	b00c      	add	sp, #48	; 0x30
   28932:	bd70      	pop	{r4, r5, r6, pc}
	addr = result;
   28934:	9903      	ldr	r1, [sp, #12]
	while (addr != NULL) {
   28936:	2900      	cmp	r1, #0
   28938:	d050      	beq.n	289dc <nct_connect+0x12c>
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   2893a:	690b      	ldr	r3, [r1, #16]
   2893c:	4a30      	ldr	r2, [pc, #192]	; (28a00 <nct_connect+0x150>)
   2893e:	482f      	ldr	r0, [pc, #188]	; (289fc <nct_connect+0x14c>)
   28940:	2b08      	cmp	r3, #8
   28942:	eba2 0200 	sub.w	r2, r2, r0
   28946:	f3c2 02c9 	ubfx	r2, r2, #3, #10
   2894a:	d136      	bne.n	289ba <nct_connect+0x10a>
				->sin_addr.s_addr;
   2894c:	694b      	ldr	r3, [r1, #20]
			broker->sin_family = AF_INET;
   2894e:	482f      	ldr	r0, [pc, #188]	; (28a0c <nct_connect+0x15c>)
				->sin_addr.s_addr;
   28950:	685b      	ldr	r3, [r3, #4]
			broker->sin_addr.s_addr =
   28952:	492f      	ldr	r1, [pc, #188]	; (28a10 <nct_connect+0x160>)
   28954:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
			broker->sin_family = AF_INET;
   28958:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
			LOG_DBG("IPv4 Address 0x%08x", broker->sin_addr.s_addr);
   2895c:	2104      	movs	r1, #4
   2895e:	f04f 0000 	mov.w	r0, #0
   28962:	f361 0002 	bfi	r0, r1, #0, #3
   28966:	f364 00c5 	bfi	r0, r4, #3, #3
   2896a:	f362 108f 	bfi	r0, r2, #6, #10
   2896e:	4929      	ldr	r1, [pc, #164]	; (28a14 <nct_connect+0x164>)
   28970:	4a24      	ldr	r2, [pc, #144]	; (28a04 <nct_connect+0x154>)
   28972:	f01d fe96 	bl	466a2 <log_string_sync>
			err = nct_mqtt_connect();
   28976:	f7ff fddd 	bl	28534 <nct_mqtt_connect>
   2897a:	4604      	mov	r4, r0
}

static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
   2897c:	682b      	ldr	r3, [r5, #0]
	freeaddrinfo(result);
   2897e:	9e03      	ldr	r6, [sp, #12]
   28980:	b94b      	cbnz	r3, 28996 <nct_connect+0xe6>
   28982:	4919      	ldr	r1, [pc, #100]	; (289e8 <nct_connect+0x138>)
   28984:	4819      	ldr	r0, [pc, #100]	; (289ec <nct_connect+0x13c>)
   28986:	239b      	movs	r3, #155	; 0x9b
   28988:	4a19      	ldr	r2, [pc, #100]	; (289f0 <nct_connect+0x140>)
   2898a:	f01d fe67 	bl	4665c <printk>
   2898e:	219b      	movs	r1, #155	; 0x9b
   28990:	4817      	ldr	r0, [pc, #92]	; (289f0 <nct_connect+0x140>)
   28992:	f01d fe70 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
   28996:	682b      	ldr	r3, [r5, #0]
   28998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2899a:	b94b      	cbnz	r3, 289b0 <nct_connect+0x100>
   2899c:	491e      	ldr	r1, [pc, #120]	; (28a18 <nct_connect+0x168>)
   2899e:	4813      	ldr	r0, [pc, #76]	; (289ec <nct_connect+0x13c>)
   289a0:	239c      	movs	r3, #156	; 0x9c
   289a2:	4a13      	ldr	r2, [pc, #76]	; (289f0 <nct_connect+0x140>)
   289a4:	f01d fe5a 	bl	4665c <printk>
   289a8:	219c      	movs	r1, #156	; 0x9c
   289aa:	4811      	ldr	r0, [pc, #68]	; (289f0 <nct_connect+0x140>)
   289ac:	f01d fe63 	bl	46676 <assert_post_action>

	return socket_ops->freeaddrinfo(res);
   289b0:	682b      	ldr	r3, [r5, #0]
   289b2:	4630      	mov	r0, r6
   289b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   289b6:	4798      	blx	r3
   289b8:	e7b9      	b.n	2892e <nct_connect+0x7e>
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   289ba:	2104      	movs	r1, #4
   289bc:	f04f 0000 	mov.w	r0, #0
   289c0:	f361 0002 	bfi	r0, r1, #0, #3
   289c4:	f364 00c5 	bfi	r0, r4, #3, #3
   289c8:	2118      	movs	r1, #24
   289ca:	f362 108f 	bfi	r0, r2, #6, #10
   289ce:	2208      	movs	r2, #8
   289d0:	e9cd 2100 	strd	r2, r1, [sp]
   289d4:	4a0b      	ldr	r2, [pc, #44]	; (28a04 <nct_connect+0x154>)
   289d6:	4911      	ldr	r1, [pc, #68]	; (28a1c <nct_connect+0x16c>)
   289d8:	f01d fe63 	bl	466a2 <log_string_sync>
	err = -ENOENT;
   289dc:	f06f 0401 	mvn.w	r4, #1
   289e0:	e7cc      	b.n	2897c <nct_connect+0xcc>
   289e2:	bf00      	nop
   289e4:	20023978 	.word	0x20023978
   289e8:	0004b6f3 	.word	0x0004b6f3
   289ec:	0004b5bf 	.word	0x0004b5bf
   289f0:	0004b6c2 	.word	0x0004b6c2
   289f4:	0004e0fc 	.word	0x0004e0fc
   289f8:	0004e3c1 	.word	0x0004e3c1
   289fc:	00049018 	.word	0x00049018
   28a00:	000490e8 	.word	0x000490e8
   28a04:	0004dfc9 	.word	0x0004dfc9
   28a08:	0004e114 	.word	0x0004e114
   28a0c:	b3220001 	.word	0xb3220001
   28a10:	20023c84 	.word	0x20023c84
   28a14:	0004e12e 	.word	0x0004e12e
   28a18:	0004e16d 	.word	0x0004e16d
   28a1c:	0004e146 	.word	0x0004e146

00028a20 <nct_cc_connect>:
#endif /* defined(CONFIG_NRF_CLOUD_STATIC_IPV4) */

int nct_cc_connect(void)
{
   28a20:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_cc_connect");
   28a22:	2304      	movs	r3, #4
   28a24:	f04f 0000 	mov.w	r0, #0
   28a28:	4a0c      	ldr	r2, [pc, #48]	; (28a5c <nct_cc_connect+0x3c>)
   28a2a:	f363 0002 	bfi	r0, r3, #0, #3
   28a2e:	4b0c      	ldr	r3, [pc, #48]	; (28a60 <nct_cc_connect+0x40>)
   28a30:	f36f 00c5 	bfc	r0, #3, #3
   28a34:	1a9b      	subs	r3, r3, r2
   28a36:	08db      	lsrs	r3, r3, #3
   28a38:	f363 108f 	bfi	r0, r3, #6, #10
   28a3c:	4a09      	ldr	r2, [pc, #36]	; (28a64 <nct_cc_connect+0x44>)
   28a3e:	490a      	ldr	r1, [pc, #40]	; (28a68 <nct_cc_connect+0x48>)
   28a40:	f01d fe2f 	bl	466a2 <log_string_sync>

	const struct mqtt_subscription_list subscription_list = {
   28a44:	4b09      	ldr	r3, [pc, #36]	; (28a6c <nct_cc_connect+0x4c>)
		.list = (struct mqtt_topic *)&nct_cc_rx_list,
		.list_count = ARRAY_SIZE(nct_cc_rx_list),
		.message_id = NCT_CC_SUBSCRIBE_ID
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   28a46:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   28a48:	9300      	str	r3, [sp, #0]
   28a4a:	4b09      	ldr	r3, [pc, #36]	; (28a70 <nct_cc_connect+0x50>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   28a4c:	4809      	ldr	r0, [pc, #36]	; (28a74 <nct_cc_connect+0x54>)
	const struct mqtt_subscription_list subscription_list = {
   28a4e:	9301      	str	r3, [sp, #4]
	return mqtt_subscribe(&nct.client, &subscription_list);
   28a50:	f01e fc57 	bl	47302 <mqtt_subscribe>
}
   28a54:	b003      	add	sp, #12
   28a56:	f85d fb04 	ldr.w	pc, [sp], #4
   28a5a:	bf00      	nop
   28a5c:	00049018 	.word	0x00049018
   28a60:	000490e8 	.word	0x000490e8
   28a64:	0004dfd5 	.word	0x0004dfd5
   28a68:	0004e08d 	.word	0x0004e08d
   28a6c:	00049980 	.word	0x00049980
   28a70:	04d20003 	.word	0x04d20003
   28a74:	20023c9c 	.word	0x20023c9c

00028a78 <nct_cc_send>:

int nct_cc_send(const struct nct_cc_data *cc_data)
{
   28a78:	b570      	push	{r4, r5, r6, lr}
   28a7a:	4b38      	ldr	r3, [pc, #224]	; (28b5c <nct_cc_send+0xe4>)
   28a7c:	4c38      	ldr	r4, [pc, #224]	; (28b60 <nct_cc_send+0xe8>)
   28a7e:	b088      	sub	sp, #32
   28a80:	1ae4      	subs	r4, r4, r3
   28a82:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	static u32_t msg_id;

	if (cc_data == NULL) {
   28a86:	4605      	mov	r5, r0
   28a88:	b980      	cbnz	r0, 28aac <nct_cc_send+0x34>
		LOG_ERR("cc_data == NULL");
   28a8a:	2301      	movs	r3, #1
   28a8c:	f04f 0000 	mov.w	r0, #0
   28a90:	f363 0002 	bfi	r0, r3, #0, #3
   28a94:	f365 00c5 	bfi	r0, r5, #3, #3
   28a98:	f364 108f 	bfi	r0, r4, #6, #10
   28a9c:	4931      	ldr	r1, [pc, #196]	; (28b64 <nct_cc_send+0xec>)
   28a9e:	f01d fe00 	bl	466a2 <log_string_sync>
		return -EINVAL;
   28aa2:	f06f 0515 	mvn.w	r5, #21
	if (err) {
		LOG_ERR("mqtt_publish failed %d", err);
	}

	return err;
}
   28aa6:	4628      	mov	r0, r5
   28aa8:	b008      	add	sp, #32
   28aaa:	bd70      	pop	{r4, r5, r6, pc}
	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   28aac:	7b06      	ldrb	r6, [r0, #12]
   28aae:	2e01      	cmp	r6, #1
   28ab0:	d90f      	bls.n	28ad2 <nct_cc_send+0x5a>
		LOG_ERR("opcode = %d", cc_data->opcode);
   28ab2:	2301      	movs	r3, #1
   28ab4:	f04f 0000 	mov.w	r0, #0
   28ab8:	f363 0002 	bfi	r0, r3, #0, #3
   28abc:	f36f 00c5 	bfc	r0, #3, #3
   28ac0:	f364 108f 	bfi	r0, r4, #6, #10
   28ac4:	4632      	mov	r2, r6
   28ac6:	4928      	ldr	r1, [pc, #160]	; (28b68 <nct_cc_send+0xf0>)
   28ac8:	f01d fdeb 	bl	466a2 <log_string_sync>
		return -ENOTSUP;
   28acc:	f06f 0585 	mvn.w	r5, #133	; 0x85
   28ad0:	e7e9      	b.n	28aa6 <nct_cc_send+0x2e>
	struct mqtt_publish_param publish = {
   28ad2:	2210      	movs	r2, #16
   28ad4:	2100      	movs	r1, #0
   28ad6:	eb0d 0002 	add.w	r0, sp, r2
   28ada:	f017 f937 	bl	3fd4c <memset>
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   28ade:	230c      	movs	r3, #12
   28ae0:	4373      	muls	r3, r6
   28ae2:	4922      	ldr	r1, [pc, #136]	; (28b6c <nct_cc_send+0xf4>)
   28ae4:	18ca      	adds	r2, r1, r3
	struct mqtt_publish_param publish = {
   28ae6:	58cb      	ldr	r3, [r1, r3]
   28ae8:	9302      	str	r3, [sp, #8]
   28aea:	6853      	ldr	r3, [r2, #4]
   28aec:	9303      	str	r3, [sp, #12]
   28aee:	7a13      	ldrb	r3, [r2, #8]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   28af0:	682a      	ldr	r2, [r5, #0]
	struct mqtt_publish_param publish = {
   28af2:	f88d 3010 	strb.w	r3, [sp, #16]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   28af6:	b11a      	cbz	r2, 28b00 <nct_cc_send+0x88>
   28af8:	686b      	ldr	r3, [r5, #4]
   28afa:	b10b      	cbz	r3, 28b00 <nct_cc_send+0x88>
		publish.message.payload.len = cc_data->data.len;
   28afc:	e9cd 3205 	strd	r3, r2, [sp, #20]
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   28b00:	68ab      	ldr	r3, [r5, #8]
   28b02:	b333      	cbz	r3, 28b52 <nct_cc_send+0xda>
	LOG_DBG("mqtt_publish: id=%d opcode=%d len=%d",
   28b04:	2104      	movs	r1, #4
   28b06:	f04f 0000 	mov.w	r0, #0
   28b0a:	f361 0002 	bfi	r0, r1, #0, #3
   28b0e:	f36f 00c5 	bfc	r0, #3, #3
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   28b12:	b29b      	uxth	r3, r3
	LOG_DBG("mqtt_publish: id=%d opcode=%d len=%d",
   28b14:	f364 108f 	bfi	r0, r4, #6, #10
   28b18:	e9cd 6200 	strd	r6, r2, [sp]
   28b1c:	4914      	ldr	r1, [pc, #80]	; (28b70 <nct_cc_send+0xf8>)
   28b1e:	4a15      	ldr	r2, [pc, #84]	; (28b74 <nct_cc_send+0xfc>)
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   28b20:	f8ad 301c 	strh.w	r3, [sp, #28]
	LOG_DBG("mqtt_publish: id=%d opcode=%d len=%d",
   28b24:	f01d fdbd 	bl	466a2 <log_string_sync>
	int err = mqtt_publish(&nct.client, &publish);
   28b28:	a902      	add	r1, sp, #8
   28b2a:	4813      	ldr	r0, [pc, #76]	; (28b78 <nct_cc_send+0x100>)
   28b2c:	f01e fb6d 	bl	4720a <mqtt_publish>
	if (err) {
   28b30:	4605      	mov	r5, r0
   28b32:	2800      	cmp	r0, #0
   28b34:	d0b7      	beq.n	28aa6 <nct_cc_send+0x2e>
		LOG_ERR("mqtt_publish failed %d", err);
   28b36:	2301      	movs	r3, #1
   28b38:	f04f 0000 	mov.w	r0, #0
   28b3c:	f363 0002 	bfi	r0, r3, #0, #3
   28b40:	f36f 00c5 	bfc	r0, #3, #3
   28b44:	f364 108f 	bfi	r0, r4, #6, #10
   28b48:	462a      	mov	r2, r5
   28b4a:	490c      	ldr	r1, [pc, #48]	; (28b7c <nct_cc_send+0x104>)
   28b4c:	f01d fda9 	bl	466a2 <log_string_sync>
   28b50:	e7a9      	b.n	28aa6 <nct_cc_send+0x2e>
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   28b52:	490b      	ldr	r1, [pc, #44]	; (28b80 <nct_cc_send+0x108>)
   28b54:	680b      	ldr	r3, [r1, #0]
   28b56:	3301      	adds	r3, #1
   28b58:	600b      	str	r3, [r1, #0]
   28b5a:	e7d3      	b.n	28b04 <nct_cc_send+0x8c>
   28b5c:	00049018 	.word	0x00049018
   28b60:	000490e8 	.word	0x000490e8
   28b64:	0004e0a0 	.word	0x0004e0a0
   28b68:	0004e0b0 	.word	0x0004e0b0
   28b6c:	000499b0 	.word	0x000499b0
   28b70:	0004e0bc 	.word	0x0004e0bc
   28b74:	0004dfe4 	.word	0x0004dfe4
   28b78:	20023c9c 	.word	0x20023c9c
   28b7c:	0004e0e5 	.word	0x0004e0e5
   28b80:	20023c80 	.word	0x20023c80

00028b84 <nct_dc_endpoint_set>:
}

void nct_dc_endpoint_set(const struct nrf_cloud_data *tx_endp,
			 const struct nrf_cloud_data *rx_endp,
			 const struct nrf_cloud_data *m_endp)
{
   28b84:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("nct_dc_endpoint_set");
   28b86:	2304      	movs	r3, #4
{
   28b88:	4606      	mov	r6, r0
	LOG_DBG("nct_dc_endpoint_set");
   28b8a:	f04f 0000 	mov.w	r0, #0
{
   28b8e:	460d      	mov	r5, r1
   28b90:	4614      	mov	r4, r2
	LOG_DBG("nct_dc_endpoint_set");
   28b92:	f363 0002 	bfi	r0, r3, #0, #3
   28b96:	4a11      	ldr	r2, [pc, #68]	; (28bdc <nct_dc_endpoint_set+0x58>)
   28b98:	4b11      	ldr	r3, [pc, #68]	; (28be0 <nct_dc_endpoint_set+0x5c>)
   28b9a:	f36f 00c5 	bfc	r0, #3, #3
   28b9e:	1a9b      	subs	r3, r3, r2
   28ba0:	08db      	lsrs	r3, r3, #3
   28ba2:	f363 108f 	bfi	r0, r3, #6, #10
   28ba6:	4a0f      	ldr	r2, [pc, #60]	; (28be4 <nct_dc_endpoint_set+0x60>)
   28ba8:	490f      	ldr	r1, [pc, #60]	; (28be8 <nct_dc_endpoint_set+0x64>)
   28baa:	f01d fd7a 	bl	466a2 <log_string_sync>

	/* In case the endpoint was previous set, free and reset
	 * before copying new one.
	 */
	dc_endpoint_free();
   28bae:	f7ff fb01 	bl	281b4 <dc_endpoint_free>

	nct.dc_tx_endp.utf8 = (u8_t *)tx_endp->ptr;
   28bb2:	6872      	ldr	r2, [r6, #4]
   28bb4:	4b0d      	ldr	r3, [pc, #52]	; (28bec <nct_dc_endpoint_set+0x68>)
   28bb6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	nct.dc_tx_endp.size = tx_endp->len;
   28bba:	6832      	ldr	r2, [r6, #0]
   28bbc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	nct.dc_rx_endp.utf8 = (u8_t *)rx_endp->ptr;
   28bc0:	686a      	ldr	r2, [r5, #4]
   28bc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	nct.dc_rx_endp.size = rx_endp->len;
   28bc6:	682a      	ldr	r2, [r5, #0]
   28bc8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	if (m_endp != NULL) {
   28bcc:	b12c      	cbz	r4, 28bda <nct_dc_endpoint_set+0x56>
		nct.dc_m_endp.utf8 = (u8_t *)m_endp->ptr;
   28bce:	6862      	ldr	r2, [r4, #4]
   28bd0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		nct.dc_m_endp.size = m_endp->len;
   28bd4:	6822      	ldr	r2, [r4, #0]
   28bd6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	}
}
   28bda:	bd70      	pop	{r4, r5, r6, pc}
   28bdc:	00049018 	.word	0x00049018
   28be0:	000490e8 	.word	0x000490e8
   28be4:	0004dff0 	.word	0x0004dff0
   28be8:	0004e1c7 	.word	0x0004e1c7
   28bec:	20023c84 	.word	0x20023c84

00028bf0 <nct_dc_endpoint_get>:

void nct_dc_endpoint_get(struct nrf_cloud_data *const tx_endp,
			 struct nrf_cloud_data *const rx_endp,
			 struct nrf_cloud_data *const m_endp)
{
   28bf0:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("nct_dc_endpoint_get");
   28bf2:	2304      	movs	r3, #4
{
   28bf4:	4606      	mov	r6, r0
	LOG_DBG("nct_dc_endpoint_get");
   28bf6:	f04f 0000 	mov.w	r0, #0
{
   28bfa:	460d      	mov	r5, r1
   28bfc:	4614      	mov	r4, r2
	LOG_DBG("nct_dc_endpoint_get");
   28bfe:	f363 0002 	bfi	r0, r3, #0, #3
   28c02:	4a10      	ldr	r2, [pc, #64]	; (28c44 <nct_dc_endpoint_get+0x54>)
   28c04:	4b10      	ldr	r3, [pc, #64]	; (28c48 <nct_dc_endpoint_get+0x58>)
   28c06:	f36f 00c5 	bfc	r0, #3, #3
   28c0a:	1a9b      	subs	r3, r3, r2
   28c0c:	08db      	lsrs	r3, r3, #3
   28c0e:	f363 108f 	bfi	r0, r3, #6, #10
   28c12:	4a0e      	ldr	r2, [pc, #56]	; (28c4c <nct_dc_endpoint_get+0x5c>)
   28c14:	490e      	ldr	r1, [pc, #56]	; (28c50 <nct_dc_endpoint_get+0x60>)
   28c16:	f01d fd44 	bl	466a2 <log_string_sync>

	tx_endp->ptr = nct.dc_tx_endp.utf8;
   28c1a:	4b0e      	ldr	r3, [pc, #56]	; (28c54 <nct_dc_endpoint_get+0x64>)
   28c1c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   28c20:	6072      	str	r2, [r6, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   28c22:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
   28c26:	6032      	str	r2, [r6, #0]

	rx_endp->ptr = nct.dc_rx_endp.utf8;
   28c28:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   28c2c:	606a      	str	r2, [r5, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   28c2e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   28c32:	602a      	str	r2, [r5, #0]

	if (m_endp != NULL) {
   28c34:	b12c      	cbz	r4, 28c42 <nct_dc_endpoint_get+0x52>
		m_endp->ptr = nct.dc_m_endp.utf8;
   28c36:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
		m_endp->len = nct.dc_m_endp.size;
   28c3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
		m_endp->ptr = nct.dc_m_endp.utf8;
   28c3e:	6062      	str	r2, [r4, #4]
		m_endp->len = nct.dc_m_endp.size;
   28c40:	6023      	str	r3, [r4, #0]
	}
}
   28c42:	bd70      	pop	{r4, r5, r6, pc}
   28c44:	00049018 	.word	0x00049018
   28c48:	000490e8 	.word	0x000490e8
   28c4c:	0004e004 	.word	0x0004e004
   28c50:	0004e1af 	.word	0x0004e1af
   28c54:	20023c84 	.word	0x20023c84

00028c58 <nct_dc_connect>:

int nct_dc_connect(void)
{
   28c58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("nct_dc_connect");
   28c5a:	2304      	movs	r3, #4
   28c5c:	f04f 0000 	mov.w	r0, #0
   28c60:	4a11      	ldr	r2, [pc, #68]	; (28ca8 <nct_dc_connect+0x50>)
   28c62:	f363 0002 	bfi	r0, r3, #0, #3
   28c66:	4b11      	ldr	r3, [pc, #68]	; (28cac <nct_dc_connect+0x54>)
   28c68:	f36f 00c5 	bfc	r0, #3, #3
   28c6c:	1a9b      	subs	r3, r3, r2
   28c6e:	08db      	lsrs	r3, r3, #3
   28c70:	f363 108f 	bfi	r0, r3, #6, #10
   28c74:	4a0e      	ldr	r2, [pc, #56]	; (28cb0 <nct_dc_connect+0x58>)
   28c76:	490f      	ldr	r1, [pc, #60]	; (28cb4 <nct_dc_connect+0x5c>)
   28c78:	f01d fd13 	bl	466a2 <log_string_sync>

	struct mqtt_topic subscribe_topic = {
		.topic = {
			.utf8 = nct.dc_rx_endp.utf8,
   28c7c:	480e      	ldr	r0, [pc, #56]	; (28cb8 <nct_dc_connect+0x60>)
		.list = &subscribe_topic,
		.list_count = 1,
		.message_id = NCT_DC_SUBSCRIBE_ID
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   28c7e:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   28c80:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
	return mqtt_subscribe(&nct.client, &subscription_list);
   28c84:	3018      	adds	r0, #24
	struct mqtt_topic subscribe_topic = {
   28c86:	9303      	str	r3, [sp, #12]
   28c88:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   28c8c:	9304      	str	r3, [sp, #16]
   28c8e:	2301      	movs	r3, #1
   28c90:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   28c94:	ab03      	add	r3, sp, #12
   28c96:	9301      	str	r3, [sp, #4]
   28c98:	4b08      	ldr	r3, [pc, #32]	; (28cbc <nct_dc_connect+0x64>)
   28c9a:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   28c9c:	f01e fb31 	bl	47302 <mqtt_subscribe>
}
   28ca0:	b007      	add	sp, #28
   28ca2:	f85d fb04 	ldr.w	pc, [sp], #4
   28ca6:	bf00      	nop
   28ca8:	00049018 	.word	0x00049018
   28cac:	000490e8 	.word	0x000490e8
   28cb0:	0004e018 	.word	0x0004e018
   28cb4:	0004e186 	.word	0x0004e186
   28cb8:	20023c84 	.word	0x20023c84
   28cbc:	223d0001 	.word	0x223d0001

00028cc0 <nct_dc_disconnect>:
{
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
}

int nct_dc_disconnect(void)
{
   28cc0:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_dc_disconnect");
   28cc2:	2304      	movs	r3, #4
   28cc4:	f04f 0000 	mov.w	r0, #0
   28cc8:	4a0d      	ldr	r2, [pc, #52]	; (28d00 <nct_dc_disconnect+0x40>)
   28cca:	f363 0002 	bfi	r0, r3, #0, #3
   28cce:	4b0d      	ldr	r3, [pc, #52]	; (28d04 <nct_dc_disconnect+0x44>)
   28cd0:	f36f 00c5 	bfc	r0, #3, #3
   28cd4:	1a9b      	subs	r3, r3, r2
   28cd6:	08db      	lsrs	r3, r3, #3
   28cd8:	f363 108f 	bfi	r0, r3, #6, #10
   28cdc:	4a0a      	ldr	r2, [pc, #40]	; (28d08 <nct_dc_disconnect+0x48>)
   28cde:	490b      	ldr	r1, [pc, #44]	; (28d0c <nct_dc_disconnect+0x4c>)
   28ce0:	f01d fcdf 	bl	466a2 <log_string_sync>

	const struct mqtt_subscription_list subscription_list = {
   28ce4:	480a      	ldr	r0, [pc, #40]	; (28d10 <nct_dc_disconnect+0x50>)
		.list = (struct mqtt_topic *)&nct.dc_rx_endp,
		.list_count = 1,
		.message_id = NCT_DC_SUBSCRIBE_ID
	};

	return mqtt_unsubscribe(&nct.client, &subscription_list);
   28ce6:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   28ce8:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
   28cec:	9300      	str	r3, [sp, #0]
   28cee:	4b09      	ldr	r3, [pc, #36]	; (28d14 <nct_dc_disconnect+0x54>)
	return mqtt_unsubscribe(&nct.client, &subscription_list);
   28cf0:	3018      	adds	r0, #24
	const struct mqtt_subscription_list subscription_list = {
   28cf2:	9301      	str	r3, [sp, #4]
	return mqtt_unsubscribe(&nct.client, &subscription_list);
   28cf4:	f01e fb2c 	bl	47350 <mqtt_unsubscribe>
}
   28cf8:	b003      	add	sp, #12
   28cfa:	f85d fb04 	ldr.w	pc, [sp], #4
   28cfe:	bf00      	nop
   28d00:	00049018 	.word	0x00049018
   28d04:	000490e8 	.word	0x000490e8
   28d08:	0004e027 	.word	0x0004e027
   28d0c:	0004e199 	.word	0x0004e199
   28d10:	20023c84 	.word	0x20023c84
   28d14:	223d0001 	.word	0x223d0001

00028d18 <nct_disconnect>:

int nct_disconnect(void)
{
   28d18:	b508      	push	{r3, lr}
	LOG_DBG("nct_disconnect");
   28d1a:	f04f 0000 	mov.w	r0, #0
   28d1e:	2304      	movs	r3, #4
   28d20:	4a0a      	ldr	r2, [pc, #40]	; (28d4c <nct_disconnect+0x34>)
   28d22:	f363 0002 	bfi	r0, r3, #0, #3
   28d26:	4b0a      	ldr	r3, [pc, #40]	; (28d50 <nct_disconnect+0x38>)
   28d28:	f36f 00c5 	bfc	r0, #3, #3
   28d2c:	1a9b      	subs	r3, r3, r2
   28d2e:	08db      	lsrs	r3, r3, #3
   28d30:	f363 108f 	bfi	r0, r3, #6, #10
   28d34:	4a07      	ldr	r2, [pc, #28]	; (28d54 <nct_disconnect+0x3c>)
   28d36:	4908      	ldr	r1, [pc, #32]	; (28d58 <nct_disconnect+0x40>)
   28d38:	f01d fcb3 	bl	466a2 <log_string_sync>

	dc_endpoint_free();
   28d3c:	f7ff fa3a 	bl	281b4 <dc_endpoint_free>
	return mqtt_disconnect(&nct.client);
}
   28d40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   28d44:	4805      	ldr	r0, [pc, #20]	; (28d5c <nct_disconnect+0x44>)
   28d46:	f01e bab5 	b.w	472b4 <mqtt_disconnect>
   28d4a:	bf00      	nop
   28d4c:	00049018 	.word	0x00049018
   28d50:	000490e8 	.word	0x000490e8
   28d54:	0004e039 	.word	0x0004e039
   28d58:	0004e1df 	.word	0x0004e1df
   28d5c:	20023c9c 	.word	0x20023c9c

00028d60 <nct_process>:

void nct_process(void)
{
   28d60:	b510      	push	{r4, lr}
	mqtt_input(&nct.client);
   28d62:	4c04      	ldr	r4, [pc, #16]	; (28d74 <nct_process+0x14>)
   28d64:	4620      	mov	r0, r4
   28d66:	f01e fb66 	bl	47436 <mqtt_input>
	mqtt_live(&nct.client);
   28d6a:	4620      	mov	r0, r4
}
   28d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mqtt_live(&nct.client);
   28d70:	f01e bb39 	b.w	473e6 <mqtt_live>
   28d74:	20023c9c 	.word	0x20023c9c

00028d78 <nct_socket_get>:

int nct_socket_get(void)
{
	return nct.client.transport.tls.sock;
}
   28d78:	4b01      	ldr	r3, [pc, #4]	; (28d80 <nct_socket_get+0x8>)
   28d7a:	6c18      	ldr	r0, [r3, #64]	; 0x40
   28d7c:	4770      	bx	lr
   28d7e:	bf00      	nop
   28d80:	20023c84 	.word	0x20023c84

00028d84 <fragment_evt_send>:

	return 0;
}

static int fragment_evt_send(const struct download_client *client)
{
   28d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE,
   28d86:	f241 0304 	movw	r3, #4100	; 0x1004
   28d8a:	58c3      	ldr	r3, [r0, r3]
{
   28d8c:	4604      	mov	r4, r0
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE,
   28d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   28d92:	d90e      	bls.n	28db2 <fragment_evt_send+0x2e>
   28d94:	4919      	ldr	r1, [pc, #100]	; (28dfc <fragment_evt_send+0x78>)
   28d96:	f44f 73b1 	mov.w	r3, #354	; 0x162
   28d9a:	4a19      	ldr	r2, [pc, #100]	; (28e00 <fragment_evt_send+0x7c>)
   28d9c:	4819      	ldr	r0, [pc, #100]	; (28e04 <fragment_evt_send+0x80>)
   28d9e:	f01d fc5d 	bl	4665c <printk>
   28da2:	4819      	ldr	r0, [pc, #100]	; (28e08 <fragment_evt_send+0x84>)
   28da4:	f01d fc5a 	bl	4665c <printk>
   28da8:	f44f 71b1 	mov.w	r1, #354	; 0x162
   28dac:	4814      	ldr	r0, [pc, #80]	; (28e00 <fragment_evt_send+0x7c>)
   28dae:	f01d fc62 	bl	46676 <assert_post_action>
		 "Fragment overflow!");

	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   28db2:	f241 0304 	movw	r3, #4100	; 0x1004
   28db6:	58e3      	ldr	r3, [r4, r3]
   28db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   28dbc:	d90e      	bls.n	28ddc <fragment_evt_send+0x58>
   28dbe:	490f      	ldr	r1, [pc, #60]	; (28dfc <fragment_evt_send+0x78>)
   28dc0:	f240 1365 	movw	r3, #357	; 0x165
   28dc4:	4a0e      	ldr	r2, [pc, #56]	; (28e00 <fragment_evt_send+0x7c>)
   28dc6:	480f      	ldr	r0, [pc, #60]	; (28e04 <fragment_evt_send+0x80>)
   28dc8:	f01d fc48 	bl	4665c <printk>
   28dcc:	480f      	ldr	r0, [pc, #60]	; (28e0c <fragment_evt_send+0x88>)
   28dce:	f01d fc45 	bl	4665c <printk>
   28dd2:	f240 1165 	movw	r1, #357	; 0x165
   28dd6:	480a      	ldr	r0, [pc, #40]	; (28e00 <fragment_evt_send+0x7c>)
   28dd8:	f01d fc4d 	bl	46676 <assert_post_action>
		 "Buffer overflow!");

	const struct download_client_evt evt = {
   28ddc:	2300      	movs	r3, #0
   28dde:	f88d 3004 	strb.w	r3, [sp, #4]
		.id = DOWNLOAD_CLIENT_EVT_FRAGMENT,
		.fragment = {
			.buf = client->buf,
   28de2:	1d23      	adds	r3, r4, #4
	const struct download_client_evt evt = {
   28de4:	9302      	str	r3, [sp, #8]
			.len = client->offset,
   28de6:	f241 0304 	movw	r3, #4100	; 0x1004
	const struct download_client_evt evt = {
   28dea:	58e3      	ldr	r3, [r4, r3]
		}
	};

	return client->callback(&evt);
   28dec:	a801      	add	r0, sp, #4
	const struct download_client_evt evt = {
   28dee:	9303      	str	r3, [sp, #12]
	return client->callback(&evt);
   28df0:	f242 03d8 	movw	r3, #8408	; 0x20d8
   28df4:	58e3      	ldr	r3, [r4, r3]
   28df6:	4798      	blx	r3
}
   28df8:	b004      	add	sp, #16
   28dfa:	bd10      	pop	{r4, pc}
   28dfc:	0004e871 	.word	0x0004e871
   28e00:	0004e82b 	.word	0x0004e82b
   28e04:	0004b5bf 	.word	0x0004b5bf
   28e08:	0004e888 	.word	0x0004e888
   28e0c:	0004e89d 	.word	0x0004e89d

00028e10 <setsockopt>:
{
   28e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT_NO_MSG(socket_ops);
   28e14:	4c15      	ldr	r4, [pc, #84]	; (28e6c <setsockopt+0x5c>)
{
   28e16:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   28e18:	6823      	ldr	r3, [r4, #0]
{
   28e1a:	4605      	mov	r5, r0
   28e1c:	460e      	mov	r6, r1
   28e1e:	4617      	mov	r7, r2
   28e20:	f8dd 9020 	ldr.w	r9, [sp, #32]
	__ASSERT_NO_MSG(socket_ops);
   28e24:	b94b      	cbnz	r3, 28e3a <setsockopt+0x2a>
   28e26:	4912      	ldr	r1, [pc, #72]	; (28e70 <setsockopt+0x60>)
   28e28:	4812      	ldr	r0, [pc, #72]	; (28e74 <setsockopt+0x64>)
   28e2a:	2357      	movs	r3, #87	; 0x57
   28e2c:	4a12      	ldr	r2, [pc, #72]	; (28e78 <setsockopt+0x68>)
   28e2e:	f01d fc15 	bl	4665c <printk>
   28e32:	2157      	movs	r1, #87	; 0x57
   28e34:	4810      	ldr	r0, [pc, #64]	; (28e78 <setsockopt+0x68>)
   28e36:	f01d fc1e 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   28e3a:	6823      	ldr	r3, [r4, #0]
   28e3c:	69db      	ldr	r3, [r3, #28]
   28e3e:	b94b      	cbnz	r3, 28e54 <setsockopt+0x44>
   28e40:	490e      	ldr	r1, [pc, #56]	; (28e7c <setsockopt+0x6c>)
   28e42:	480c      	ldr	r0, [pc, #48]	; (28e74 <setsockopt+0x64>)
   28e44:	2358      	movs	r3, #88	; 0x58
   28e46:	4a0c      	ldr	r2, [pc, #48]	; (28e78 <setsockopt+0x68>)
   28e48:	f01d fc08 	bl	4665c <printk>
   28e4c:	2158      	movs	r1, #88	; 0x58
   28e4e:	480a      	ldr	r0, [pc, #40]	; (28e78 <setsockopt+0x68>)
   28e50:	f01d fc11 	bl	46676 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   28e54:	6823      	ldr	r3, [r4, #0]
   28e56:	f8cd 9020 	str.w	r9, [sp, #32]
   28e5a:	69dc      	ldr	r4, [r3, #28]
   28e5c:	463a      	mov	r2, r7
   28e5e:	4643      	mov	r3, r8
   28e60:	4631      	mov	r1, r6
   28e62:	4628      	mov	r0, r5
   28e64:	46a4      	mov	ip, r4
}
   28e66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   28e6a:	4760      	bx	ip
   28e6c:	20023978 	.word	0x20023978
   28e70:	0004b6f3 	.word	0x0004b6f3
   28e74:	0004b5bf 	.word	0x0004b5bf
   28e78:	0004b6c2 	.word	0x0004b6c2
   28e7c:	0004d0ff 	.word	0x0004d0ff

00028e80 <close>:
{
   28e80:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   28e82:	4c10      	ldr	r4, [pc, #64]	; (28ec4 <close+0x44>)
{
   28e84:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   28e86:	6823      	ldr	r3, [r4, #0]
   28e88:	b94b      	cbnz	r3, 28e9e <close+0x1e>
   28e8a:	490f      	ldr	r1, [pc, #60]	; (28ec8 <close+0x48>)
   28e8c:	480f      	ldr	r0, [pc, #60]	; (28ecc <close+0x4c>)
   28e8e:	2321      	movs	r3, #33	; 0x21
   28e90:	4a0f      	ldr	r2, [pc, #60]	; (28ed0 <close+0x50>)
   28e92:	f01d fbe3 	bl	4665c <printk>
   28e96:	2121      	movs	r1, #33	; 0x21
   28e98:	480d      	ldr	r0, [pc, #52]	; (28ed0 <close+0x50>)
   28e9a:	f01d fbec 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   28e9e:	6823      	ldr	r3, [r4, #0]
   28ea0:	685b      	ldr	r3, [r3, #4]
   28ea2:	b94b      	cbnz	r3, 28eb8 <close+0x38>
   28ea4:	490b      	ldr	r1, [pc, #44]	; (28ed4 <close+0x54>)
   28ea6:	4809      	ldr	r0, [pc, #36]	; (28ecc <close+0x4c>)
   28ea8:	2322      	movs	r3, #34	; 0x22
   28eaa:	4a09      	ldr	r2, [pc, #36]	; (28ed0 <close+0x50>)
   28eac:	f01d fbd6 	bl	4665c <printk>
   28eb0:	2122      	movs	r1, #34	; 0x22
   28eb2:	4807      	ldr	r0, [pc, #28]	; (28ed0 <close+0x50>)
   28eb4:	f01d fbdf 	bl	46676 <assert_post_action>
	return socket_ops->close(sock);
   28eb8:	6823      	ldr	r3, [r4, #0]
   28eba:	4628      	mov	r0, r5
}
   28ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   28ec0:	685b      	ldr	r3, [r3, #4]
   28ec2:	4718      	bx	r3
   28ec4:	20023978 	.word	0x20023978
   28ec8:	0004b6f3 	.word	0x0004b6f3
   28ecc:	0004b5bf 	.word	0x0004b5bf
   28ed0:	0004b6c2 	.word	0x0004b6c2
   28ed4:	0004d027 	.word	0x0004d027

00028ed8 <get_request_send>:
{
   28ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT_NO_MSG(client);
   28edc:	4605      	mov	r5, r0
{
   28ede:	b087      	sub	sp, #28
	__ASSERT_NO_MSG(client);
   28ee0:	b948      	cbnz	r0, 28ef6 <get_request_send+0x1e>
   28ee2:	4956      	ldr	r1, [pc, #344]	; (2903c <get_request_send+0x164>)
   28ee4:	4856      	ldr	r0, [pc, #344]	; (29040 <get_request_send+0x168>)
   28ee6:	23f2      	movs	r3, #242	; 0xf2
   28ee8:	4a56      	ldr	r2, [pc, #344]	; (29044 <get_request_send+0x16c>)
   28eea:	f01d fbb7 	bl	4665c <printk>
   28eee:	21f2      	movs	r1, #242	; 0xf2
   28ef0:	4854      	ldr	r0, [pc, #336]	; (29044 <get_request_send+0x16c>)
   28ef2:	f01d fbc0 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(client->host);
   28ef6:	f241 0314 	movw	r3, #4116	; 0x1014
   28efa:	58eb      	ldr	r3, [r5, r3]
   28efc:	b94b      	cbnz	r3, 28f12 <get_request_send+0x3a>
   28efe:	4952      	ldr	r1, [pc, #328]	; (29048 <get_request_send+0x170>)
   28f00:	484f      	ldr	r0, [pc, #316]	; (29040 <get_request_send+0x168>)
   28f02:	23f3      	movs	r3, #243	; 0xf3
   28f04:	4a4f      	ldr	r2, [pc, #316]	; (29044 <get_request_send+0x16c>)
   28f06:	f01d fba9 	bl	4665c <printk>
   28f0a:	21f3      	movs	r1, #243	; 0xf3
   28f0c:	484d      	ldr	r0, [pc, #308]	; (29044 <get_request_send+0x16c>)
   28f0e:	f01d fbb2 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(client->file);
   28f12:	f241 0318 	movw	r3, #4120	; 0x1018
   28f16:	58eb      	ldr	r3, [r5, r3]
   28f18:	b94b      	cbnz	r3, 28f2e <get_request_send+0x56>
   28f1a:	494c      	ldr	r1, [pc, #304]	; (2904c <get_request_send+0x174>)
   28f1c:	4848      	ldr	r0, [pc, #288]	; (29040 <get_request_send+0x168>)
   28f1e:	23f4      	movs	r3, #244	; 0xf4
   28f20:	4a48      	ldr	r2, [pc, #288]	; (29044 <get_request_send+0x16c>)
   28f22:	f01d fb9b 	bl	4665c <printk>
   28f26:	21f4      	movs	r1, #244	; 0xf4
   28f28:	4846      	ldr	r0, [pc, #280]	; (29044 <get_request_send+0x16c>)
   28f2a:	f01d fba4 	bl	46676 <assert_post_action>
	off = client->progress + CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE - 1;
   28f2e:	f241 030c 	movw	r3, #4108	; 0x100c
	if (client->file_size != 0) {
   28f32:	f241 0108 	movw	r1, #4104	; 0x1008
	off = client->progress + CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE - 1;
   28f36:	58ea      	ldr	r2, [r5, r3]
	if (client->file_size != 0) {
   28f38:	5869      	ldr	r1, [r5, r1]
	off = client->progress + CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE - 1;
   28f3a:	f602 73ff 	addw	r3, r2, #4095	; 0xfff
	if (client->file_size != 0) {
   28f3e:	b111      	cbz	r1, 28f46 <get_request_send+0x6e>
		off = MIN(off, client->file_size);
   28f40:	428b      	cmp	r3, r1
   28f42:	bf28      	it	cs
   28f44:	460b      	movcs	r3, r1
	len = snprintf(client->buf, CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   28f46:	e9cd 2301 	strd	r2, r3, [sp, #4]
   28f4a:	f241 0314 	movw	r3, #4116	; 0x1014
   28f4e:	58eb      	ldr	r3, [r5, r3]
   28f50:	f105 0904 	add.w	r9, r5, #4
   28f54:	9300      	str	r3, [sp, #0]
   28f56:	f241 0318 	movw	r3, #4120	; 0x1018
   28f5a:	4a3d      	ldr	r2, [pc, #244]	; (29050 <get_request_send+0x178>)
   28f5c:	58eb      	ldr	r3, [r5, r3]
   28f5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   28f62:	4648      	mov	r0, r9
   28f64:	f017 f93e 	bl	401e4 <snprintf>
	if (len < 0 || len > CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE) {
   28f68:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	len = snprintf(client->buf, CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   28f6c:	4604      	mov	r4, r0
	if (len < 0 || len > CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE) {
   28f6e:	d947      	bls.n	29000 <get_request_send+0x128>
		LOG_ERR("Cannot create GET request, buffer too small");
   28f70:	2301      	movs	r3, #1
   28f72:	f04f 0000 	mov.w	r0, #0
   28f76:	4a37      	ldr	r2, [pc, #220]	; (29054 <get_request_send+0x17c>)
   28f78:	f363 0002 	bfi	r0, r3, #0, #3
   28f7c:	4b36      	ldr	r3, [pc, #216]	; (29058 <get_request_send+0x180>)
   28f7e:	f36f 00c5 	bfc	r0, #3, #3
   28f82:	1a9b      	subs	r3, r3, r2
   28f84:	08db      	lsrs	r3, r3, #3
   28f86:	f363 108f 	bfi	r0, r3, #6, #10
   28f8a:	4934      	ldr	r1, [pc, #208]	; (2905c <get_request_send+0x184>)
   28f8c:	f01d fb89 	bl	466a2 <log_string_sync>
		return -ENOMEM;
   28f90:	f06f 000b 	mvn.w	r0, #11
}
   28f94:	b007      	add	sp, #28
   28f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sent = send(client->fd, client->buf + off, len, 0);
   28f9a:	9b05      	ldr	r3, [sp, #20]
   28f9c:	f8d5 a000 	ldr.w	sl, [r5]
   28fa0:	eb09 0b03 	add.w	fp, r9, r3
	__ASSERT_NO_MSG(socket_ops);
   28fa4:	f8d8 3000 	ldr.w	r3, [r8]
   28fa8:	b94b      	cbnz	r3, 28fbe <get_request_send+0xe6>
   28faa:	492d      	ldr	r1, [pc, #180]	; (29060 <get_request_send+0x188>)
   28fac:	4824      	ldr	r0, [pc, #144]	; (29040 <get_request_send+0x168>)
   28fae:	237e      	movs	r3, #126	; 0x7e
   28fb0:	4632      	mov	r2, r6
   28fb2:	f01d fb53 	bl	4665c <printk>
   28fb6:	217e      	movs	r1, #126	; 0x7e
   28fb8:	4630      	mov	r0, r6
   28fba:	f01d fb5c 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   28fbe:	f8d8 3000 	ldr.w	r3, [r8]
   28fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28fc4:	b94b      	cbnz	r3, 28fda <get_request_send+0x102>
   28fc6:	4927      	ldr	r1, [pc, #156]	; (29064 <get_request_send+0x18c>)
   28fc8:	481d      	ldr	r0, [pc, #116]	; (29040 <get_request_send+0x168>)
   28fca:	237f      	movs	r3, #127	; 0x7f
   28fcc:	4632      	mov	r2, r6
   28fce:	f01d fb45 	bl	4665c <printk>
   28fd2:	217f      	movs	r1, #127	; 0x7f
   28fd4:	4630      	mov	r0, r6
   28fd6:	f01d fb4e 	bl	46676 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   28fda:	f8d8 3000 	ldr.w	r3, [r8]
   28fde:	4622      	mov	r2, r4
   28fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28fe2:	4659      	mov	r1, fp
   28fe4:	461f      	mov	r7, r3
   28fe6:	4650      	mov	r0, sl
   28fe8:	2300      	movs	r3, #0
   28fea:	47b8      	blx	r7
		if (sent <= 0) {
   28fec:	2800      	cmp	r0, #0
   28fee:	dd0d      	ble.n	2900c <get_request_send+0x134>
		off += sent;
   28ff0:	9b05      	ldr	r3, [sp, #20]
		len -= sent;
   28ff2:	1a24      	subs	r4, r4, r0
		off += sent;
   28ff4:	4403      	add	r3, r0
   28ff6:	9305      	str	r3, [sp, #20]
	while (len) {
   28ff8:	2c00      	cmp	r4, #0
   28ffa:	d1ce      	bne.n	28f9a <get_request_send+0xc2>
	return 0;
   28ffc:	4620      	mov	r0, r4
   28ffe:	e7c9      	b.n	28f94 <get_request_send+0xbc>
	size_t off = 0;
   29000:	2300      	movs	r3, #0
	__ASSERT_NO_MSG(socket_ops);
   29002:	f8df 806c 	ldr.w	r8, [pc, #108]	; 29070 <get_request_send+0x198>
   29006:	9305      	str	r3, [sp, #20]
   29008:	4e17      	ldr	r6, [pc, #92]	; (29068 <get_request_send+0x190>)
   2900a:	e7f5      	b.n	28ff8 <get_request_send+0x120>
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   2900c:	2301      	movs	r3, #1
   2900e:	f04f 0400 	mov.w	r4, #0
   29012:	4a10      	ldr	r2, [pc, #64]	; (29054 <get_request_send+0x17c>)
   29014:	f363 0402 	bfi	r4, r3, #0, #3
   29018:	4b0f      	ldr	r3, [pc, #60]	; (29058 <get_request_send+0x180>)
   2901a:	f36f 04c5 	bfc	r4, #3, #3
   2901e:	1a9b      	subs	r3, r3, r2
   29020:	08db      	lsrs	r3, r3, #3
   29022:	f363 148f 	bfi	r4, r3, #6, #10
   29026:	f01d fd4d 	bl	46ac4 <__errno>
   2902a:	4910      	ldr	r1, [pc, #64]	; (2906c <get_request_send+0x194>)
   2902c:	6802      	ldr	r2, [r0, #0]
   2902e:	4620      	mov	r0, r4
   29030:	f01d fb37 	bl	466a2 <log_string_sync>
			return -EIO;
   29034:	f06f 0004 	mvn.w	r0, #4
		return err;
   29038:	e7ac      	b.n	28f94 <get_request_send+0xbc>
   2903a:	bf00      	nop
   2903c:	0004e97f 	.word	0x0004e97f
   29040:	0004b5bf 	.word	0x0004b5bf
   29044:	0004e82b 	.word	0x0004e82b
   29048:	0004e8b0 	.word	0x0004e8b0
   2904c:	0004e8bd 	.word	0x0004e8bd
   29050:	0004e8ca 	.word	0x0004e8ca
   29054:	00049018 	.word	0x00049018
   29058:	00049070 	.word	0x00049070
   2905c:	0004e915 	.word	0x0004e915
   29060:	0004b6f3 	.word	0x0004b6f3
   29064:	0004d071 	.word	0x0004d071
   29068:	0004b6c2 	.word	0x0004b6c2
   2906c:	0004e941 	.word	0x0004e941
   29070:	20023978 	.word	0x20023978

00029074 <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   29074:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   29076:	4605      	mov	r5, r0
{
   29078:	b087      	sub	sp, #28
	if (client == NULL || callback == NULL) {
   2907a:	b1f8      	cbz	r0, 290bc <download_client_init+0x48>
   2907c:	b1f1      	cbz	r1, 290bc <download_client_init+0x48>
		return -EINVAL;
	}

	client->fd = -1;
   2907e:	f04f 33ff 	mov.w	r3, #4294967295
   29082:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   29084:	f242 03d8 	movw	r3, #8408	; 0x20d8
   29088:	50c1      	str	r1, [r0, r3]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2908a:	2400      	movs	r4, #0
   2908c:	230e      	movs	r3, #14
   2908e:	e9cd 0400 	strd	r0, r4, [sp]
   29092:	f500 5186 	add.w	r1, r0, #4288	; 0x10c0
   29096:	f500 5081 	add.w	r0, r0, #4128	; 0x1020
   2909a:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2909e:	e9cd 4404 	strd	r4, r4, [sp, #16]
   290a2:	4b08      	ldr	r3, [pc, #32]	; (290c4 <download_client_init+0x50>)
   290a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   290a8:	3118      	adds	r1, #24
   290aa:	3008      	adds	r0, #8
   290ac:	f014 fee4 	bl	3de78 <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   290b0:	f241 0324 	movw	r3, #4132	; 0x1024
   290b4:	50e8      	str	r0, [r5, r3]
		k_thread_create(&client->thread, client->thread_stack,
				K_THREAD_STACK_SIZEOF(client->thread_stack),
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	return 0;
   290b6:	4620      	mov	r0, r4
}
   290b8:	b007      	add	sp, #28
   290ba:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   290bc:	f06f 0015 	mvn.w	r0, #21
   290c0:	e7fa      	b.n	290b8 <download_client_init+0x44>
   290c2:	bf00      	nop
   290c4:	000294fd 	.word	0x000294fd

000290c8 <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   290c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   290cc:	b0a1      	sub	sp, #132	; 0x84
   290ce:	9104      	str	r1, [sp, #16]
   290d0:	4690      	mov	r8, r2
	int err;

	if (client == NULL || host == NULL || config == NULL) {
   290d2:	4606      	mov	r6, r0
   290d4:	b928      	cbnz	r0, 290e2 <download_client_connect+0x1a>
		client->fd =
			resolve_and_connect(AF_INET, host, config);
	}

	if (client->fd < 0) {
		return -EINVAL;
   290d6:	f06f 0715 	mvn.w	r7, #21
	if (err) {
		return err;
	}

	return 0;
}
   290da:	4638      	mov	r0, r7
   290dc:	b021      	add	sp, #132	; 0x84
   290de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (client == NULL || host == NULL || config == NULL) {
   290e2:	9b04      	ldr	r3, [sp, #16]
   290e4:	2b00      	cmp	r3, #0
   290e6:	d0f6      	beq.n	290d6 <download_client_connect+0xe>
   290e8:	2a00      	cmp	r2, #0
   290ea:	d0f4      	beq.n	290d6 <download_client_connect+0xe>
		if (config->sec_tag != -1) {
   290ec:	6813      	ldr	r3, [r2, #0]
   290ee:	3301      	adds	r3, #1
   290f0:	d1f1      	bne.n	290d6 <download_client_connect+0xe>
	if (client->fd != -1) {
   290f2:	6807      	ldr	r7, [r0, #0]
   290f4:	1c7b      	adds	r3, r7, #1
   290f6:	f040 81a5 	bne.w	29444 <download_client_connect+0x37c>
	struct addrinfo hints = {
   290fa:	2220      	movs	r2, #32
   290fc:	2100      	movs	r1, #0
   290fe:	eb0d 0002 	add.w	r0, sp, r2
   29102:	f016 fe23 	bl	3fd4c <memset>
   29106:	2301      	movs	r3, #1
   29108:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   2910c:	2306      	movs	r3, #6
	__ASSERT_NO_MSG(socket_ops);
   2910e:	4ca8      	ldr	r4, [pc, #672]	; (293b0 <download_client_connect+0x2e8>)
   29110:	930b      	str	r3, [sp, #44]	; 0x2c
   29112:	f8d8 3004 	ldr.w	r3, [r8, #4]
   29116:	930e      	str	r3, [sp, #56]	; 0x38
   29118:	6823      	ldr	r3, [r4, #0]
   2911a:	b94b      	cbnz	r3, 29130 <download_client_connect+0x68>
   2911c:	49a5      	ldr	r1, [pc, #660]	; (293b4 <download_client_connect+0x2ec>)
   2911e:	48a6      	ldr	r0, [pc, #664]	; (293b8 <download_client_connect+0x2f0>)
   29120:	2393      	movs	r3, #147	; 0x93
   29122:	4aa6      	ldr	r2, [pc, #664]	; (293bc <download_client_connect+0x2f4>)
   29124:	f01d fa9a 	bl	4665c <printk>
   29128:	2193      	movs	r1, #147	; 0x93
   2912a:	48a4      	ldr	r0, [pc, #656]	; (293bc <download_client_connect+0x2f4>)
   2912c:	f01d faa3 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
   29130:	6823      	ldr	r3, [r4, #0]
   29132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   29134:	b94b      	cbnz	r3, 2914a <download_client_connect+0x82>
   29136:	49a2      	ldr	r1, [pc, #648]	; (293c0 <download_client_connect+0x2f8>)
   29138:	489f      	ldr	r0, [pc, #636]	; (293b8 <download_client_connect+0x2f0>)
   2913a:	2394      	movs	r3, #148	; 0x94
   2913c:	4a9f      	ldr	r2, [pc, #636]	; (293bc <download_client_connect+0x2f4>)
   2913e:	f01d fa8d 	bl	4665c <printk>
   29142:	2194      	movs	r1, #148	; 0x94
   29144:	489d      	ldr	r0, [pc, #628]	; (293bc <download_client_connect+0x2f4>)
   29146:	f01d fa96 	bl	46676 <assert_post_action>
	return socket_ops->getaddrinfo(node, service, hints, res);
   2914a:	6823      	ldr	r3, [r4, #0]
   2914c:	aa08      	add	r2, sp, #32
   2914e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
   29150:	2100      	movs	r1, #0
   29152:	ab07      	add	r3, sp, #28
   29154:	9804      	ldr	r0, [sp, #16]
   29156:	47a8      	blx	r5
   29158:	4d9a      	ldr	r5, [pc, #616]	; (293c4 <download_client_connect+0x2fc>)
   2915a:	4b9b      	ldr	r3, [pc, #620]	; (293c8 <download_client_connect+0x300>)
   2915c:	1aed      	subs	r5, r5, r3
   2915e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	if (err) {
   29162:	b1a8      	cbz	r0, 29190 <download_client_connect+0xc8>
		LOG_WRN("Failed to resolve hostname %s on %s", log_strdup(host),
   29164:	2302      	movs	r3, #2
   29166:	f04f 0400 	mov.w	r4, #0
   2916a:	9804      	ldr	r0, [sp, #16]
   2916c:	f363 0402 	bfi	r4, r3, #0, #3
   29170:	f01d faa9 	bl	466c6 <log_strdup>
   29174:	f36f 04c5 	bfc	r4, #3, #3
   29178:	f365 148f 	bfi	r4, r5, #6, #10
   2917c:	4602      	mov	r2, r0
   2917e:	4b93      	ldr	r3, [pc, #588]	; (293cc <download_client_connect+0x304>)
   29180:	4993      	ldr	r1, [pc, #588]	; (293d0 <download_client_connect+0x308>)
   29182:	4620      	mov	r0, r4
   29184:	f01d fa8d 	bl	466a2 <log_string_sync>
		client->fd =
   29188:	f04f 33ff 	mov.w	r3, #4294967295
   2918c:	6033      	str	r3, [r6, #0]
   2918e:	e7a2      	b.n	290d6 <download_client_connect+0xe>
	LOG_INF("Attempting to connect over %s",
   29190:	2303      	movs	r3, #3
   29192:	f04f 0a00 	mov.w	sl, #0
   29196:	f363 0a02 	bfi	sl, r3, #0, #3
   2919a:	f360 0ac5 	bfi	sl, r0, #3, #3
   2919e:	488b      	ldr	r0, [pc, #556]	; (293cc <download_client_connect+0x304>)
   291a0:	f01d fa91 	bl	466c6 <log_strdup>
   291a4:	f365 1a8f 	bfi	sl, r5, #6, #10
   291a8:	4602      	mov	r2, r0
   291aa:	498a      	ldr	r1, [pc, #552]	; (293d4 <download_client_connect+0x30c>)
   291ac:	4650      	mov	r0, sl
   291ae:	f01d fa78 	bl	466a2 <log_string_sync>
	__ASSERT_NO_MSG(socket_ops);
   291b2:	6823      	ldr	r3, [r4, #0]
   291b4:	b94b      	cbnz	r3, 291ca <download_client_connect+0x102>
   291b6:	497f      	ldr	r1, [pc, #508]	; (293b4 <download_client_connect+0x2ec>)
   291b8:	487f      	ldr	r0, [pc, #508]	; (293b8 <download_client_connect+0x2f0>)
   291ba:	2319      	movs	r3, #25
   291bc:	4a7f      	ldr	r2, [pc, #508]	; (293bc <download_client_connect+0x2f4>)
   291be:	f01d fa4d 	bl	4665c <printk>
   291c2:	2119      	movs	r1, #25
   291c4:	487d      	ldr	r0, [pc, #500]	; (293bc <download_client_connect+0x2f4>)
   291c6:	f01d fa56 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   291ca:	6823      	ldr	r3, [r4, #0]
   291cc:	681b      	ldr	r3, [r3, #0]
   291ce:	b94b      	cbnz	r3, 291e4 <download_client_connect+0x11c>
   291d0:	4981      	ldr	r1, [pc, #516]	; (293d8 <download_client_connect+0x310>)
   291d2:	4879      	ldr	r0, [pc, #484]	; (293b8 <download_client_connect+0x2f0>)
   291d4:	231a      	movs	r3, #26
   291d6:	4a79      	ldr	r2, [pc, #484]	; (293bc <download_client_connect+0x2f4>)
   291d8:	f01d fa40 	bl	4665c <printk>
   291dc:	211a      	movs	r1, #26
   291de:	4877      	ldr	r0, [pc, #476]	; (293bc <download_client_connect+0x2f4>)
   291e0:	f01d fa49 	bl	46676 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   291e4:	2101      	movs	r1, #1
   291e6:	6823      	ldr	r3, [r4, #0]
   291e8:	2206      	movs	r2, #6
   291ea:	681b      	ldr	r3, [r3, #0]
   291ec:	4608      	mov	r0, r1
   291ee:	4798      	blx	r3
	if (fd < 0) {
   291f0:	1e03      	subs	r3, r0, #0
   291f2:	9303      	str	r3, [sp, #12]
   291f4:	da36      	bge.n	29264 <download_client_connect+0x19c>
		LOG_ERR("Failed to create socket, errno %d", errno);
   291f6:	2301      	movs	r3, #1
   291f8:	f04f 0700 	mov.w	r7, #0
   291fc:	f363 0702 	bfi	r7, r3, #0, #3
   29200:	f01d fc60 	bl	46ac4 <__errno>
   29204:	f36f 07c5 	bfc	r7, #3, #3
   29208:	f365 178f 	bfi	r7, r5, #6, #10
   2920c:	6802      	ldr	r2, [r0, #0]
   2920e:	4973      	ldr	r1, [pc, #460]	; (293dc <download_client_connect+0x314>)
   29210:	4638      	mov	r0, r7
   29212:	f01d fa46 	bl	466a2 <log_string_sync>
	err = getaddrinfo(host, NULL, &hints, &info);
   29216:	2700      	movs	r7, #0
	__ASSERT_NO_MSG(socket_ops);
   29218:	6823      	ldr	r3, [r4, #0]
	freeaddrinfo(info);
   2921a:	f8dd 901c 	ldr.w	r9, [sp, #28]
   2921e:	b94b      	cbnz	r3, 29234 <download_client_connect+0x16c>
   29220:	4964      	ldr	r1, [pc, #400]	; (293b4 <download_client_connect+0x2ec>)
   29222:	4865      	ldr	r0, [pc, #404]	; (293b8 <download_client_connect+0x2f0>)
   29224:	239b      	movs	r3, #155	; 0x9b
   29226:	4a65      	ldr	r2, [pc, #404]	; (293bc <download_client_connect+0x2f4>)
   29228:	f01d fa18 	bl	4665c <printk>
   2922c:	219b      	movs	r1, #155	; 0x9b
   2922e:	4863      	ldr	r0, [pc, #396]	; (293bc <download_client_connect+0x2f4>)
   29230:	f01d fa21 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
   29234:	6823      	ldr	r3, [r4, #0]
   29236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   29238:	b94b      	cbnz	r3, 2924e <download_client_connect+0x186>
   2923a:	4969      	ldr	r1, [pc, #420]	; (293e0 <download_client_connect+0x318>)
   2923c:	485e      	ldr	r0, [pc, #376]	; (293b8 <download_client_connect+0x2f0>)
   2923e:	239c      	movs	r3, #156	; 0x9c
   29240:	4a5e      	ldr	r2, [pc, #376]	; (293bc <download_client_connect+0x2f4>)
   29242:	f01d fa0b 	bl	4665c <printk>
   29246:	219c      	movs	r1, #156	; 0x9c
   29248:	485c      	ldr	r0, [pc, #368]	; (293bc <download_client_connect+0x2f4>)
   2924a:	f01d fa14 	bl	46676 <assert_post_action>
	return socket_ops->freeaddrinfo(res);
   2924e:	6823      	ldr	r3, [r4, #0]
   29250:	4648      	mov	r0, r9
   29252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   29254:	4798      	blx	r3
	if (err) {
   29256:	2f00      	cmp	r7, #0
   29258:	f000 80d2 	beq.w	29400 <download_client_connect+0x338>
		close(fd);
   2925c:	9803      	ldr	r0, [sp, #12]
   2925e:	f7ff fe0f 	bl	28e80 <close>
   29262:	e791      	b.n	29188 <download_client_connect+0xc0>
	if (cfg->apn != NULL) {
   29264:	f8d8 0004 	ldr.w	r0, [r8, #4]
   29268:	2800      	cmp	r0, #0
   2926a:	d058      	beq.n	2931e <download_client_connect+0x256>
		LOG_INF("Setting up APN: %s", log_strdup(cfg->apn));
   2926c:	2303      	movs	r3, #3
   2926e:	f04f 0a00 	mov.w	sl, #0
   29272:	f363 0a02 	bfi	sl, r3, #0, #3
   29276:	f01d fa26 	bl	466c6 <log_strdup>
   2927a:	f36f 0ac5 	bfc	sl, #3, #3
   2927e:	f365 1a8f 	bfi	sl, r5, #6, #10
   29282:	4602      	mov	r2, r0
   29284:	4957      	ldr	r1, [pc, #348]	; (293e4 <download_client_connect+0x31c>)
   29286:	4650      	mov	r0, sl
   29288:	f01d fa0b 	bl	466a2 <log_string_sync>
	struct ifreq ifr = {0};
   2928c:	2240      	movs	r2, #64	; 0x40
		err = socket_apn_set(fd, cfg->apn);
   2928e:	f8d8 b004 	ldr.w	fp, [r8, #4]
	struct ifreq ifr = {0};
   29292:	2100      	movs	r1, #0
   29294:	eb0d 0002 	add.w	r0, sp, r2
   29298:	f016 fd58 	bl	3fd4c <memset>
	__ASSERT_NO_MSG(apn);
   2929c:	f1bb 0f00 	cmp.w	fp, #0
   292a0:	d109      	bne.n	292b6 <download_client_connect+0x1ee>
   292a2:	4951      	ldr	r1, [pc, #324]	; (293e8 <download_client_connect+0x320>)
   292a4:	4844      	ldr	r0, [pc, #272]	; (293b8 <download_client_connect+0x2f0>)
   292a6:	2362      	movs	r3, #98	; 0x62
   292a8:	4a50      	ldr	r2, [pc, #320]	; (293ec <download_client_connect+0x324>)
   292aa:	f01d f9d7 	bl	4665c <printk>
   292ae:	2162      	movs	r1, #98	; 0x62
   292b0:	484e      	ldr	r0, [pc, #312]	; (293ec <download_client_connect+0x324>)
   292b2:	f01d f9e0 	bl	46676 <assert_post_action>
	len = strlen(apn);
   292b6:	4658      	mov	r0, fp
   292b8:	f017 f964 	bl	40584 <strlen>
	if (len >= sizeof(ifr.ifr_name)) {
   292bc:	283f      	cmp	r0, #63	; 0x3f
	len = strlen(apn);
   292be:	4682      	mov	sl, r0
	if (len >= sizeof(ifr.ifr_name)) {
   292c0:	d90c      	bls.n	292dc <download_client_connect+0x214>
		LOG_ERR("Access point name is too long.");
   292c2:	2301      	movs	r3, #1
   292c4:	f04f 0000 	mov.w	r0, #0
   292c8:	f363 0002 	bfi	r0, r3, #0, #3
   292cc:	f36f 00c5 	bfc	r0, #3, #3
   292d0:	f365 108f 	bfi	r0, r5, #6, #10
   292d4:	4946      	ldr	r1, [pc, #280]	; (293f0 <download_client_connect+0x328>)
   292d6:	f01d f9e4 	bl	466a2 <log_string_sync>
   292da:	e79d      	b.n	29218 <download_client_connect+0x150>
	memcpy(ifr.ifr_name, apn, len);
   292dc:	2340      	movs	r3, #64	; 0x40
   292de:	4602      	mov	r2, r0
   292e0:	4659      	mov	r1, fp
   292e2:	eb0d 0003 	add.w	r0, sp, r3
   292e6:	f016 fd1d 	bl	3fd24 <__memcpy_chk>
	err = setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, &ifr, len);
   292ea:	f8cd a000 	str.w	sl, [sp]
   292ee:	ab10      	add	r3, sp, #64	; 0x40
   292f0:	2219      	movs	r2, #25
   292f2:	2101      	movs	r1, #1
   292f4:	9803      	ldr	r0, [sp, #12]
   292f6:	f7ff fd8b 	bl	28e10 <setsockopt>
	if (err) {
   292fa:	b180      	cbz	r0, 2931e <download_client_connect+0x256>
		LOG_ERR("Failed to bind socket, errno %d", errno);
   292fc:	2301      	movs	r3, #1
   292fe:	f04f 0900 	mov.w	r9, #0
   29302:	f363 0902 	bfi	r9, r3, #0, #3
   29306:	f01d fbdd 	bl	46ac4 <__errno>
   2930a:	f36f 09c5 	bfc	r9, #3, #3
   2930e:	f365 198f 	bfi	r9, r5, #6, #10
   29312:	6802      	ldr	r2, [r0, #0]
   29314:	4937      	ldr	r1, [pc, #220]	; (293f4 <download_client_connect+0x32c>)
   29316:	4648      	mov	r0, r9
   29318:	f01d f9c3 	bl	466a2 <log_string_sync>
   2931c:	e77c      	b.n	29218 <download_client_connect+0x150>
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   2931e:	f8dd a01c 	ldr.w	sl, [sp, #28]
	__ASSERT_NO_MSG(socket_ops);
   29322:	f8df b098 	ldr.w	fp, [pc, #152]	; 293bc <download_client_connect+0x2f4>
   29326:	f1ba 0f00 	cmp.w	sl, #0
   2932a:	f43f af75 	beq.w	29218 <download_client_connect+0x150>
		struct sockaddr * const sa = addr->ai_addr;
   2932e:	f8da 7014 	ldr.w	r7, [sl, #20]
		switch (sa->sa_family) {
   29332:	883b      	ldrh	r3, [r7, #0]
   29334:	2b01      	cmp	r3, #1
   29336:	d001      	beq.n	2933c <download_client_connect+0x274>
   29338:	2b02      	cmp	r3, #2
   2933a:	d102      	bne.n	29342 <download_client_connect+0x27a>
			((struct sockaddr_in *)sa)->sin_port = port;
   2933c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
   29340:	807b      	strh	r3, [r7, #2]
		err = connect(fd, sa, addr->ai_addrlen);
   29342:	f8da 3010 	ldr.w	r3, [sl, #16]
   29346:	9305      	str	r3, [sp, #20]
   29348:	6823      	ldr	r3, [r4, #0]
   2934a:	b94b      	cbnz	r3, 29360 <download_client_connect+0x298>
   2934c:	4919      	ldr	r1, [pc, #100]	; (293b4 <download_client_connect+0x2ec>)
   2934e:	481a      	ldr	r0, [pc, #104]	; (293b8 <download_client_connect+0x2f0>)
   29350:	2345      	movs	r3, #69	; 0x45
   29352:	465a      	mov	r2, fp
   29354:	f01d f982 	bl	4665c <printk>
   29358:	2145      	movs	r1, #69	; 0x45
   2935a:	4658      	mov	r0, fp
   2935c:	f01d f98b 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   29360:	6823      	ldr	r3, [r4, #0]
   29362:	695b      	ldr	r3, [r3, #20]
   29364:	b94b      	cbnz	r3, 2937a <download_client_connect+0x2b2>
   29366:	4924      	ldr	r1, [pc, #144]	; (293f8 <download_client_connect+0x330>)
   29368:	4813      	ldr	r0, [pc, #76]	; (293b8 <download_client_connect+0x2f0>)
   2936a:	2346      	movs	r3, #70	; 0x46
   2936c:	465a      	mov	r2, fp
   2936e:	f01d f975 	bl	4665c <printk>
   29372:	2146      	movs	r1, #70	; 0x46
   29374:	4658      	mov	r0, fp
   29376:	f01d f97e 	bl	46676 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   2937a:	6823      	ldr	r3, [r4, #0]
   2937c:	4639      	mov	r1, r7
   2937e:	695b      	ldr	r3, [r3, #20]
   29380:	9a05      	ldr	r2, [sp, #20]
   29382:	9803      	ldr	r0, [sp, #12]
   29384:	4798      	blx	r3
		if (err) {
   29386:	4607      	mov	r7, r0
   29388:	2800      	cmp	r0, #0
   2938a:	f43f af45 	beq.w	29218 <download_client_connect+0x150>
			LOG_ERR("Unable to connect, errno %d", errno);
   2938e:	2301      	movs	r3, #1
   29390:	f363 0902 	bfi	r9, r3, #0, #3
   29394:	f01d fb96 	bl	46ac4 <__errno>
   29398:	f36f 09c5 	bfc	r9, #3, #3
   2939c:	f365 198f 	bfi	r9, r5, #6, #10
   293a0:	6802      	ldr	r2, [r0, #0]
   293a2:	4916      	ldr	r1, [pc, #88]	; (293fc <download_client_connect+0x334>)
   293a4:	4648      	mov	r0, r9
   293a6:	f01d f97c 	bl	466a2 <log_string_sync>
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   293aa:	f8da a01c 	ldr.w	sl, [sl, #28]
   293ae:	e7ba      	b.n	29326 <download_client_connect+0x25e>
   293b0:	20023978 	.word	0x20023978
   293b4:	0004b6f3 	.word	0x0004b6f3
   293b8:	0004b5bf 	.word	0x0004b5bf
   293bc:	0004b6c2 	.word	0x0004b6c2
   293c0:	0004e0fc 	.word	0x0004e0fc
   293c4:	00049070 	.word	0x00049070
   293c8:	00049018 	.word	0x00049018
   293cc:	0004e56c 	.word	0x0004e56c
   293d0:	0004e571 	.word	0x0004e571
   293d4:	0004e595 	.word	0x0004e595
   293d8:	0004d039 	.word	0x0004d039
   293dc:	0004e5b3 	.word	0x0004e5b3
   293e0:	0004e16d 	.word	0x0004e16d
   293e4:	0004e5d5 	.word	0x0004e5d5
   293e8:	0004e5e8 	.word	0x0004e5e8
   293ec:	0004e82b 	.word	0x0004e82b
   293f0:	0004e5ec 	.word	0x0004e5ec
   293f4:	0004e60b 	.word	0x0004e60b
   293f8:	0004d04c 	.word	0x0004d04c
   293fc:	0004e62b 	.word	0x0004e62b
		client->fd =
   29400:	9b03      	ldr	r3, [sp, #12]
	if (client->fd < 0) {
   29402:	2b00      	cmp	r3, #0
		client->fd =
   29404:	6033      	str	r3, [r6, #0]
	if (client->fd < 0) {
   29406:	f6ff ae66 	blt.w	290d6 <download_client_connect+0xe>
	client->config = *config;
   2940a:	e898 0003 	ldmia.w	r8, {r0, r1}
	client->host = host;
   2940e:	f241 0314 	movw	r3, #4116	; 0x1014
   29412:	9a04      	ldr	r2, [sp, #16]
	LOG_INF("Connected to %s", log_strdup(host));
   29414:	f04f 0400 	mov.w	r4, #0
	client->host = host;
   29418:	50f2      	str	r2, [r6, r3]
	LOG_INF("Connected to %s", log_strdup(host));
   2941a:	2303      	movs	r3, #3
	client->config = *config;
   2941c:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
   29420:	361c      	adds	r6, #28
   29422:	e886 0003 	stmia.w	r6, {r0, r1}
	LOG_INF("Connected to %s", log_strdup(host));
   29426:	4610      	mov	r0, r2
   29428:	f363 0402 	bfi	r4, r3, #0, #3
   2942c:	f01d f94b 	bl	466c6 <log_strdup>
   29430:	f367 04c5 	bfi	r4, r7, #3, #3
   29434:	f365 148f 	bfi	r4, r5, #6, #10
   29438:	4602      	mov	r2, r0
   2943a:	4903      	ldr	r1, [pc, #12]	; (29448 <download_client_connect+0x380>)
   2943c:	4620      	mov	r0, r4
   2943e:	f01d f930 	bl	466a2 <log_string_sync>
   29442:	e64a      	b.n	290da <download_client_connect+0x12>
		return 0;
   29444:	2700      	movs	r7, #0
   29446:	e648      	b.n	290da <download_client_connect+0x12>
   29448:	0004e647 	.word	0x0004e647

0002944c <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   2944c:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   2944e:	4604      	mov	r4, r0
   29450:	b310      	cbz	r0, 29498 <download_client_disconnect+0x4c>
   29452:	6800      	ldr	r0, [r0, #0]
   29454:	2800      	cmp	r0, #0
   29456:	db1f      	blt.n	29498 <download_client_disconnect+0x4c>
		return -EINVAL;
	}

	err = close(client->fd);
   29458:	f7ff fd12 	bl	28e80 <close>
	if (err) {
   2945c:	b1c0      	cbz	r0, 29490 <download_client_disconnect+0x44>
		LOG_ERR("Failed to close socket, errno %d", errno);
   2945e:	2301      	movs	r3, #1
   29460:	f04f 0400 	mov.w	r4, #0
   29464:	4a0e      	ldr	r2, [pc, #56]	; (294a0 <download_client_disconnect+0x54>)
   29466:	f363 0402 	bfi	r4, r3, #0, #3
   2946a:	4b0e      	ldr	r3, [pc, #56]	; (294a4 <download_client_disconnect+0x58>)
   2946c:	f36f 04c5 	bfc	r4, #3, #3
   29470:	1a9b      	subs	r3, r3, r2
   29472:	08db      	lsrs	r3, r3, #3
   29474:	f363 148f 	bfi	r4, r3, #6, #10
   29478:	f01d fb24 	bl	46ac4 <__errno>
   2947c:	490a      	ldr	r1, [pc, #40]	; (294a8 <download_client_disconnect+0x5c>)
   2947e:	6802      	ldr	r2, [r0, #0]
   29480:	4620      	mov	r0, r4
   29482:	f01d f90e 	bl	466a2 <log_string_sync>
		return -errno;
   29486:	f01d fb1d 	bl	46ac4 <__errno>
   2948a:	6800      	ldr	r0, [r0, #0]
   2948c:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   2948e:	bd10      	pop	{r4, pc}
	client->fd = -1;
   29490:	f04f 33ff 	mov.w	r3, #4294967295
   29494:	6023      	str	r3, [r4, #0]
	return 0;
   29496:	e7fa      	b.n	2948e <download_client_disconnect+0x42>
		return -EINVAL;
   29498:	f06f 0015 	mvn.w	r0, #21
   2949c:	e7f7      	b.n	2948e <download_client_disconnect+0x42>
   2949e:	bf00      	nop
   294a0:	00049018 	.word	0x00049018
   294a4:	00049070 	.word	0x00049070
   294a8:	0004e657 	.word	0x0004e657

000294ac <reconnect>:
{
   294ac:	b510      	push	{r4, lr}
	LOG_INF("Reconnecting..");
   294ae:	2303      	movs	r3, #3
{
   294b0:	4604      	mov	r4, r0
	LOG_INF("Reconnecting..");
   294b2:	f04f 0000 	mov.w	r0, #0
   294b6:	4a0e      	ldr	r2, [pc, #56]	; (294f0 <reconnect+0x44>)
   294b8:	f363 0002 	bfi	r0, r3, #0, #3
   294bc:	4b0d      	ldr	r3, [pc, #52]	; (294f4 <reconnect+0x48>)
   294be:	f36f 00c5 	bfc	r0, #3, #3
   294c2:	1a9b      	subs	r3, r3, r2
   294c4:	08db      	lsrs	r3, r3, #3
   294c6:	f363 108f 	bfi	r0, r3, #6, #10
   294ca:	490b      	ldr	r1, [pc, #44]	; (294f8 <reconnect+0x4c>)
   294cc:	f01d f8e9 	bl	466a2 <log_string_sync>
	err = download_client_disconnect(dl);
   294d0:	4620      	mov	r0, r4
   294d2:	f7ff ffbb 	bl	2944c <download_client_disconnect>
	if (err) {
   294d6:	b950      	cbnz	r0, 294ee <reconnect+0x42>
	err = download_client_connect(dl, dl->host, &dl->config);
   294d8:	f241 0314 	movw	r3, #4116	; 0x1014
   294dc:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
   294e0:	58e1      	ldr	r1, [r4, r3]
   294e2:	4620      	mov	r0, r4
}
   294e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   294e8:	321c      	adds	r2, #28
   294ea:	f7ff bded 	b.w	290c8 <download_client_connect>
}
   294ee:	bd10      	pop	{r4, pc}
   294f0:	00049018 	.word	0x00049018
   294f4:	00049070 	.word	0x00049070
   294f8:	0004e967 	.word	0x0004e967

000294fc <download_thread>:
{
   294fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29500:	4604      	mov	r4, r0
   29502:	4b86      	ldr	r3, [pc, #536]	; (2971c <download_thread+0x220>)
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   29504:	4a86      	ldr	r2, [pc, #536]	; (29720 <download_thread+0x224>)
{
   29506:	b091      	sub	sp, #68	; 0x44
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   29508:	1a9b      	subs	r3, r3, r2
   2950a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   2950e:	9302      	str	r3, [sp, #8]
	k_thread_suspend(dl->tid);
   29510:	f500 5381 	add.w	r3, r0, #4128	; 0x1020
   29514:	3304      	adds	r3, #4
   29516:	930a      	str	r3, [sp, #40]	; 0x28
   29518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2951a:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_suspend(thread);
   2951c:	f014 fd92 	bl	3e044 <z_impl_k_thread_suspend>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   29520:	f504 5580 	add.w	r5, r4, #4096	; 0x1000
   29524:	3504      	adds	r5, #4
   29526:	682b      	ldr	r3, [r5, #0]
   29528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2952c:	d30e      	bcc.n	2954c <download_thread+0x50>
   2952e:	497d      	ldr	r1, [pc, #500]	; (29724 <download_thread+0x228>)
   29530:	f240 139b 	movw	r3, #411	; 0x19b
   29534:	4a7c      	ldr	r2, [pc, #496]	; (29728 <download_thread+0x22c>)
   29536:	487d      	ldr	r0, [pc, #500]	; (2972c <download_thread+0x230>)
   29538:	f01d f890 	bl	4665c <printk>
   2953c:	487c      	ldr	r0, [pc, #496]	; (29730 <download_thread+0x234>)
   2953e:	f01d f88d 	bl	4665c <printk>
   29542:	f240 119b 	movw	r1, #411	; 0x19b
   29546:	4878      	ldr	r0, [pc, #480]	; (29728 <download_thread+0x22c>)
   29548:	f01d f895 	bl	46676 <assert_post_action>
		len = recv(dl->fd, dl->buf + dl->offset,
   2954c:	4626      	mov	r6, r4
   2954e:	f856 3b04 	ldr.w	r3, [r6], #4
   29552:	682f      	ldr	r7, [r5, #0]
   29554:	930b      	str	r3, [sp, #44]	; 0x2c
	__ASSERT_NO_MSG(socket_ops);
   29556:	4b77      	ldr	r3, [pc, #476]	; (29734 <download_thread+0x238>)
   29558:	eb06 0907 	add.w	r9, r6, r7
   2955c:	681b      	ldr	r3, [r3, #0]
   2955e:	f5c7 5780 	rsb	r7, r7, #4096	; 0x1000
   29562:	b94b      	cbnz	r3, 29578 <download_thread+0x7c>
   29564:	4974      	ldr	r1, [pc, #464]	; (29738 <download_thread+0x23c>)
   29566:	4871      	ldr	r0, [pc, #452]	; (2972c <download_thread+0x230>)
   29568:	2369      	movs	r3, #105	; 0x69
   2956a:	4a74      	ldr	r2, [pc, #464]	; (2973c <download_thread+0x240>)
   2956c:	f01d f876 	bl	4665c <printk>
   29570:	2169      	movs	r1, #105	; 0x69
   29572:	4872      	ldr	r0, [pc, #456]	; (2973c <download_thread+0x240>)
   29574:	f01d f87f 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   29578:	4b6e      	ldr	r3, [pc, #440]	; (29734 <download_thread+0x238>)
   2957a:	681b      	ldr	r3, [r3, #0]
   2957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2957e:	b94b      	cbnz	r3, 29594 <download_thread+0x98>
   29580:	496f      	ldr	r1, [pc, #444]	; (29740 <download_thread+0x244>)
   29582:	486a      	ldr	r0, [pc, #424]	; (2972c <download_thread+0x230>)
   29584:	236a      	movs	r3, #106	; 0x6a
   29586:	4a6d      	ldr	r2, [pc, #436]	; (2973c <download_thread+0x240>)
   29588:	f01d f868 	bl	4665c <printk>
   2958c:	216a      	movs	r1, #106	; 0x6a
   2958e:	486b      	ldr	r0, [pc, #428]	; (2973c <download_thread+0x240>)
   29590:	f01d f871 	bl	46676 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   29594:	4b67      	ldr	r3, [pc, #412]	; (29734 <download_thread+0x238>)
   29596:	463a      	mov	r2, r7
   29598:	681b      	ldr	r3, [r3, #0]
   2959a:	4649      	mov	r1, r9
   2959c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2959e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   295a0:	469c      	mov	ip, r3
   295a2:	2300      	movs	r3, #0
   295a4:	4667      	mov	r7, ip
   295a6:	47b8      	blx	r7
		if ((len == 0) || (len == -1)) {
   295a8:	1e43      	subs	r3, r0, #1
   295aa:	3303      	adds	r3, #3
   295ac:	4681      	mov	r9, r0
			if ((dl->offset > 0) && (dl->has_header)) {
   295ae:	682b      	ldr	r3, [r5, #0]
		if ((len == 0) || (len == -1)) {
   295b0:	d95f      	bls.n	29672 <download_thread+0x176>
			if ((dl->offset > 0) && (dl->has_header)) {
   295b2:	b1d3      	cbz	r3, 295ea <download_thread+0xee>
   295b4:	f241 0310 	movw	r3, #4112	; 0x1010
   295b8:	5ce3      	ldrb	r3, [r4, r3]
   295ba:	b1b3      	cbz	r3, 295ea <download_thread+0xee>
				rc = fragment_evt_send(dl);
   295bc:	4620      	mov	r0, r4
   295be:	f7ff fbe1 	bl	28d84 <fragment_evt_send>
				if (rc) {
   295c2:	b190      	cbz	r0, 295ea <download_thread+0xee>
					LOG_INF("Fragment refused, download "
   295c4:	2303      	movs	r3, #3
   295c6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   295ca:	f363 0202 	bfi	r2, r3, #0, #3
   295ce:	b293      	uxth	r3, r2
   295d0:	f36f 03c5 	bfc	r3, #3, #3
   295d4:	9a02      	ldr	r2, [sp, #8]
   295d6:	b29b      	uxth	r3, r3
   295d8:	f362 138f 	bfi	r3, r2, #6, #10
   295dc:	f8ad 3014 	strh.w	r3, [sp, #20]
			LOG_INF("Fragment refused, download stopped.");
   295e0:	4958      	ldr	r1, [pc, #352]	; (29744 <download_thread+0x248>)
   295e2:	b298      	uxth	r0, r3
   295e4:	f01d f85d 	bl	466a2 <log_string_sync>
   295e8:	e796      	b.n	29518 <download_thread+0x1c>
   295ea:	f504 5603 	add.w	r6, r4, #8384	; 0x20c0
			if (len == -1) {
   295ee:	f1b9 3fff 	cmp.w	r9, #4294967295
   295f2:	f106 0618 	add.w	r6, r6, #24
   295f6:	f040 815f 	bne.w	298b8 <download_thread+0x3bc>
				LOG_ERR("Error in recv(), errno %d", errno);
   295fa:	2301      	movs	r3, #1
   295fc:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   29600:	f363 0202 	bfi	r2, r3, #0, #3
   29604:	b293      	uxth	r3, r2
   29606:	f36f 03c5 	bfc	r3, #3, #3
   2960a:	9a02      	ldr	r2, [sp, #8]
   2960c:	b29b      	uxth	r3, r3
   2960e:	f362 138f 	bfi	r3, r2, #6, #10
   29612:	f8ad 3018 	strh.w	r3, [sp, #24]
   29616:	f01d fa55 	bl	46ac4 <__errno>
   2961a:	494b      	ldr	r1, [pc, #300]	; (29748 <download_thread+0x24c>)
   2961c:	6802      	ldr	r2, [r0, #0]
   2961e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   29622:	f01d f83e 	bl	466a2 <log_string_sync>
				rc = error_evt_send(dl, ENOTCONN);
   29626:	2180      	movs	r1, #128	; 0x80
   29628:	4630      	mov	r0, r6
   2962a:	f01f f917 	bl	4885c <error_evt_send.isra.1>
			if (rc) {
   2962e:	2800      	cmp	r0, #0
   29630:	f47f af72 	bne.w	29518 <download_thread+0x1c>
			reconnect(dl);
   29634:	4620      	mov	r0, r4
   29636:	f7ff ff39 	bl	294ac <reconnect>
		dl->offset = 0;
   2963a:	2700      	movs	r7, #0
			rc = error_evt_send(dl, ECONNRESET);
   2963c:	f242 09d8 	movw	r9, #8408	; 0x20d8
		dl->has_header = false;
   29640:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
   29644:	3610      	adds	r6, #16
   29646:	f04f 0300 	mov.w	r3, #0
		dl->offset = 0;
   2964a:	602f      	str	r7, [r5, #0]
		rc = get_request_send(dl);
   2964c:	4620      	mov	r0, r4
		dl->has_header = false;
   2964e:	7033      	strb	r3, [r6, #0]
		rc = get_request_send(dl);
   29650:	f7ff fc42 	bl	28ed8 <get_request_send>
		if (rc) {
   29654:	2800      	cmp	r0, #0
   29656:	f43f af66 	beq.w	29526 <download_thread+0x2a>
			rc = error_evt_send(dl, ECONNRESET);
   2965a:	2168      	movs	r1, #104	; 0x68
   2965c:	eb04 0009 	add.w	r0, r4, r9
   29660:	f01f f8fc 	bl	4885c <error_evt_send.isra.1>
			if (rc) {
   29664:	2800      	cmp	r0, #0
   29666:	f47f af57 	bne.w	29518 <download_thread+0x1c>
			reconnect(dl);
   2966a:	4620      	mov	r0, r4
   2966c:	f7ff ff1e 	bl	294ac <reconnect>
			goto send_again;
   29670:	e7e9      	b.n	29646 <download_thread+0x14a>
		dl->offset += len;
   29672:	4403      	add	r3, r0
   29674:	602b      	str	r3, [r5, #0]
		if (!dl->has_header) {
   29676:	f241 0310 	movw	r3, #4112	; 0x1010
   2967a:	5ce3      	ldrb	r3, [r4, r3]
   2967c:	2b00      	cmp	r3, #0
   2967e:	f040 80b5 	bne.w	297ec <download_thread+0x2f0>
	p = strstr(client->buf, "\r\n\r\n");
   29682:	4932      	ldr	r1, [pc, #200]	; (2974c <download_thread+0x250>)
   29684:	4630      	mov	r0, r6
   29686:	f017 f98d 	bl	409a4 <strstr>
	if (!p) {
   2968a:	4607      	mov	r7, r0
   2968c:	2800      	cmp	r0, #0
   2968e:	f43f af4a 	beq.w	29526 <download_thread+0x2a>
	hdr = p + strlen("\r\n\r\n") - client->buf;
   29692:	482e      	ldr	r0, [pc, #184]	; (2974c <download_thread+0x250>)
   29694:	f016 ff76 	bl	40584 <strlen>
   29698:	183b      	adds	r3, r7, r0
   2969a:	1b9f      	subs	r7, r3, r6
	__ASSERT(hdr < sizeof(client->buf), "Buffer overflow");
   2969c:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
	hdr = p + strlen("\r\n\r\n") - client->buf;
   296a0:	930b      	str	r3, [sp, #44]	; 0x2c
	__ASSERT(hdr < sizeof(client->buf), "Buffer overflow");
   296a2:	d30e      	bcc.n	296c2 <download_thread+0x1c6>
   296a4:	492a      	ldr	r1, [pc, #168]	; (29750 <download_thread+0x254>)
   296a6:	f240 1329 	movw	r3, #297	; 0x129
   296aa:	4a1f      	ldr	r2, [pc, #124]	; (29728 <download_thread+0x22c>)
   296ac:	481f      	ldr	r0, [pc, #124]	; (2972c <download_thread+0x230>)
   296ae:	f01c ffd5 	bl	4665c <printk>
   296b2:	481f      	ldr	r0, [pc, #124]	; (29730 <download_thread+0x234>)
   296b4:	f01c ffd2 	bl	4665c <printk>
   296b8:	f240 1129 	movw	r1, #297	; 0x129
   296bc:	481a      	ldr	r0, [pc, #104]	; (29728 <download_thread+0x22c>)
   296be:	f01c ffda 	bl	46676 <assert_post_action>
	if (client->file_size == 0) {
   296c2:	f241 0308 	movw	r3, #4104	; 0x1008
   296c6:	58e3      	ldr	r3, [r4, r3]
   296c8:	2b00      	cmp	r3, #0
   296ca:	d151      	bne.n	29770 <download_thread+0x274>
		p = strstr(client->buf, "Content-Range: bytes");
   296cc:	4921      	ldr	r1, [pc, #132]	; (29754 <download_thread+0x258>)
   296ce:	4630      	mov	r0, r6
   296d0:	f017 f968 	bl	409a4 <strstr>
		if (!p) {
   296d4:	b990      	cbnz	r0, 296fc <download_thread+0x200>
			LOG_ERR("Server did not send "
   296d6:	2201      	movs	r2, #1
   296d8:	9b02      	ldr	r3, [sp, #8]
   296da:	f362 0802 	bfi	r8, r2, #0, #3
   296de:	f360 08c5 	bfi	r8, r0, #3, #3
   296e2:	f363 188f 	bfi	r8, r3, #6, #10
   296e6:	4640      	mov	r0, r8
   296e8:	491b      	ldr	r1, [pc, #108]	; (29758 <download_thread+0x25c>)
			LOG_ERR("Server did not send file size in response");
   296ea:	f01c ffda 	bl	466a2 <log_string_sync>
				error_evt_send(dl, EBADMSG);
   296ee:	f504 5003 	add.w	r0, r4, #8384	; 0x20c0
   296f2:	214d      	movs	r1, #77	; 0x4d
   296f4:	3018      	adds	r0, #24
   296f6:	f01f f8b1 	bl	4885c <error_evt_send.isra.1>
				break;
   296fa:	e70d      	b.n	29518 <download_thread+0x1c>
		p = strstr(p, "/");
   296fc:	4917      	ldr	r1, [pc, #92]	; (2975c <download_thread+0x260>)
   296fe:	f017 f951 	bl	409a4 <strstr>
		if (!p) {
   29702:	bb78      	cbnz	r0, 29764 <download_thread+0x268>
			LOG_ERR("Server did not send file size in response");
   29704:	2301      	movs	r3, #1
   29706:	f363 0b02 	bfi	fp, r3, #0, #3
   2970a:	9b02      	ldr	r3, [sp, #8]
   2970c:	f360 0bc5 	bfi	fp, r0, #3, #3
   29710:	f363 1b8f 	bfi	fp, r3, #6, #10
   29714:	4912      	ldr	r1, [pc, #72]	; (29760 <download_thread+0x264>)
   29716:	4658      	mov	r0, fp
   29718:	e7e7      	b.n	296ea <download_thread+0x1ee>
   2971a:	bf00      	nop
   2971c:	00049070 	.word	0x00049070
   29720:	00049018 	.word	0x00049018
   29724:	0004e68d 	.word	0x0004e68d
   29728:	0004e82b 	.word	0x0004e82b
   2972c:	0004b5bf 	.word	0x0004b5bf
   29730:	0004e6aa 	.word	0x0004e6aa
   29734:	20023978 	.word	0x20023978
   29738:	0004b6f3 	.word	0x0004b6f3
   2973c:	0004b6c2 	.word	0x0004b6c2
   29740:	0004d060 	.word	0x0004d060
   29744:	0004e6bc 	.word	0x0004e6bc
   29748:	0004e6e0 	.word	0x0004e6e0
   2974c:	0004e910 	.word	0x0004e910
   29750:	0004e6fa 	.word	0x0004e6fa
   29754:	0004e714 	.word	0x0004e714
   29758:	0004e729 	.word	0x0004e729
   2975c:	0004e759 	.word	0x0004e759
   29760:	0004e75b 	.word	0x0004e75b
		client->file_size = atoi(p + 1);
   29764:	3001      	adds	r0, #1
   29766:	f015 ff5f 	bl	3f628 <atoi>
   2976a:	f241 0308 	movw	r3, #4104	; 0x1008
   2976e:	50e0      	str	r0, [r4, r3]
	p = strstr(client->buf, "Connection: close");
   29770:	495b      	ldr	r1, [pc, #364]	; (298e0 <download_thread+0x3e4>)
   29772:	4630      	mov	r0, r6
   29774:	f017 f916 	bl	409a4 <strstr>
	if (p) {
   29778:	b1a8      	cbz	r0, 297a6 <download_thread+0x2aa>
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   2977a:	2302      	movs	r3, #2
   2977c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   29780:	4958      	ldr	r1, [pc, #352]	; (298e4 <download_thread+0x3e8>)
   29782:	f363 0202 	bfi	r2, r3, #0, #3
   29786:	b293      	uxth	r3, r2
   29788:	f36f 03c5 	bfc	r3, #3, #3
   2978c:	9a02      	ldr	r2, [sp, #8]
   2978e:	b29b      	uxth	r3, r3
   29790:	f362 138f 	bfi	r3, r2, #6, #10
   29794:	b298      	uxth	r0, r3
   29796:	f8ad 300c 	strh.w	r3, [sp, #12]
   2979a:	f01c ff82 	bl	466a2 <log_string_sync>
		client->connection_close = true;
   2979e:	f241 0311 	movw	r3, #4113	; 0x1011
   297a2:	2201      	movs	r2, #1
   297a4:	54e2      	strb	r2, [r4, r3]
	if (client->offset != hdr) {
   297a6:	682a      	ldr	r2, [r5, #0]
   297a8:	4297      	cmp	r7, r2
   297aa:	d05c      	beq.n	29866 <download_thread+0x36a>
		LOG_WRN("Copying %u payload bytes", client->offset - hdr);
   297ac:	2302      	movs	r3, #2
   297ae:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   297b2:	1bd2      	subs	r2, r2, r7
   297b4:	f363 0102 	bfi	r1, r3, #0, #3
   297b8:	b28b      	uxth	r3, r1
   297ba:	f36f 03c5 	bfc	r3, #3, #3
   297be:	9902      	ldr	r1, [sp, #8]
   297c0:	b29b      	uxth	r3, r3
   297c2:	f361 138f 	bfi	r3, r1, #6, #10
   297c6:	b298      	uxth	r0, r3
   297c8:	4947      	ldr	r1, [pc, #284]	; (298e8 <download_thread+0x3ec>)
   297ca:	f8ad 3010 	strh.w	r3, [sp, #16]
   297ce:	f01c ff68 	bl	466a2 <log_string_sync>
		memcpy(client->buf, client->buf + hdr, client->offset - hdr);
   297d2:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   297d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   297d6:	1bd2      	subs	r2, r2, r7
   297d8:	4630      	mov	r0, r6
   297da:	f7f0 fb69 	bl	19eb0 <memcpy>
		client->offset -= hdr;
   297de:	682b      	ldr	r3, [r5, #0]
   297e0:	1bdf      	subs	r7, r3, r7
   297e2:	602f      	str	r7, [r5, #0]
			dl->has_header = true;
   297e4:	2301      	movs	r3, #1
   297e6:	f241 0210 	movw	r2, #4112	; 0x1010
   297ea:	54a3      	strb	r3, [r4, r2]
		dl->progress += MIN(dl->offset, len);
   297ec:	f241 070c 	movw	r7, #4108	; 0x100c
   297f0:	6829      	ldr	r1, [r5, #0]
   297f2:	59e2      	ldr	r2, [r4, r7]
   297f4:	f241 0308 	movw	r3, #4104	; 0x1008
   297f8:	4549      	cmp	r1, r9
   297fa:	bf94      	ite	ls
   297fc:	1852      	addls	r2, r2, r1
   297fe:	444a      	addhi	r2, r9
		if ((dl->offset < CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE) &&
   29800:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
		dl->progress += MIN(dl->offset, len);
   29804:	51e2      	str	r2, [r4, r7]
   29806:	58e3      	ldr	r3, [r4, r3]
		if ((dl->offset < CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE) &&
   29808:	d202      	bcs.n	29810 <download_thread+0x314>
   2980a:	429a      	cmp	r2, r3
   2980c:	f47f ae8b 	bne.w	29526 <download_thread+0x2a>
		LOG_INF("Downloaded %u/%u bytes (%d%%)", dl->progress,
   29810:	2603      	movs	r6, #3
   29812:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   29816:	9802      	ldr	r0, [sp, #8]
   29818:	f366 0102 	bfi	r1, r6, #0, #3
   2981c:	b289      	uxth	r1, r1
   2981e:	f36f 01c5 	bfc	r1, #3, #3
   29822:	b289      	uxth	r1, r1
   29824:	f360 118f 	bfi	r1, r0, #6, #10
   29828:	f8ad 1020 	strh.w	r1, [sp, #32]
   2982c:	2164      	movs	r1, #100	; 0x64
   2982e:	4351      	muls	r1, r2
   29830:	fbb1 f1f3 	udiv	r1, r1, r3
   29834:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   29838:	9100      	str	r1, [sp, #0]
   2983a:	492c      	ldr	r1, [pc, #176]	; (298ec <download_thread+0x3f0>)
   2983c:	f01c ff31 	bl	466a2 <log_string_sync>
		rc = fragment_evt_send(dl);
   29840:	4620      	mov	r0, r4
   29842:	f7ff fa9f 	bl	28d84 <fragment_evt_send>
		if (rc) {
   29846:	4681      	mov	r9, r0
   29848:	b180      	cbz	r0, 2986c <download_thread+0x370>
			LOG_INF("Fragment refused, download stopped.");
   2984a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2984e:	9a02      	ldr	r2, [sp, #8]
   29850:	f366 0302 	bfi	r3, r6, #0, #3
   29854:	b29b      	uxth	r3, r3
   29856:	f36f 03c5 	bfc	r3, #3, #3
   2985a:	b29b      	uxth	r3, r3
   2985c:	f362 138f 	bfi	r3, r2, #6, #10
   29860:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   29864:	e6bc      	b.n	295e0 <download_thread+0xe4>
		client->offset = 0;
   29866:	2300      	movs	r3, #0
   29868:	602b      	str	r3, [r5, #0]
   2986a:	e7bb      	b.n	297e4 <download_thread+0x2e8>
		if (dl->progress == dl->file_size) {
   2986c:	f241 0308 	movw	r3, #4104	; 0x1008
   29870:	59e2      	ldr	r2, [r4, r7]
   29872:	58e3      	ldr	r3, [r4, r3]
   29874:	429a      	cmp	r2, r3
   29876:	d117      	bne.n	298a8 <download_thread+0x3ac>
			LOG_INF("Download complete");
   29878:	9b02      	ldr	r3, [sp, #8]
   2987a:	f366 0a02 	bfi	sl, r6, #0, #3
   2987e:	f360 0ac5 	bfi	sl, r0, #3, #3
   29882:	f363 1a8f 	bfi	sl, r3, #6, #10
   29886:	4650      	mov	r0, sl
   29888:	4919      	ldr	r1, [pc, #100]	; (298f0 <download_thread+0x3f4>)
   2988a:	f01c ff0a 	bl	466a2 <log_string_sync>
			const struct download_client_evt evt = {
   2988e:	2302      	movs	r3, #2
   29890:	e9cd 990d 	strd	r9, r9, [sp, #52]	; 0x34
   29894:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			dl->callback(&evt);
   29898:	f242 03d8 	movw	r3, #8408	; 0x20d8
			const struct download_client_evt evt = {
   2989c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
			dl->callback(&evt);
   298a0:	58e3      	ldr	r3, [r4, r3]
   298a2:	a80d      	add	r0, sp, #52	; 0x34
   298a4:	4798      	blx	r3
   298a6:	e637      	b.n	29518 <download_thread+0x1c>
		if (dl->connection_close) {
   298a8:	f241 0311 	movw	r3, #4113	; 0x1011
   298ac:	5ce2      	ldrb	r2, [r4, r3]
   298ae:	2a00      	cmp	r2, #0
   298b0:	f43f aec3 	beq.w	2963a <download_thread+0x13e>
			dl->connection_close = false;
   298b4:	54e0      	strb	r0, [r4, r3]
   298b6:	e6bd      	b.n	29634 <download_thread+0x138>
				LOG_WRN("Peer closed connection!");
   298b8:	2302      	movs	r3, #2
   298ba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   298be:	490d      	ldr	r1, [pc, #52]	; (298f4 <download_thread+0x3f8>)
   298c0:	f363 0202 	bfi	r2, r3, #0, #3
   298c4:	b293      	uxth	r3, r2
   298c6:	f36f 03c5 	bfc	r3, #3, #3
   298ca:	9a02      	ldr	r2, [sp, #8]
   298cc:	b29b      	uxth	r3, r3
   298ce:	f362 138f 	bfi	r3, r2, #6, #10
   298d2:	b298      	uxth	r0, r3
   298d4:	f8ad 301c 	strh.w	r3, [sp, #28]
   298d8:	f01c fee3 	bl	466a2 <log_string_sync>
				rc = error_evt_send(dl, ECONNRESET);
   298dc:	2168      	movs	r1, #104	; 0x68
   298de:	e6a3      	b.n	29628 <download_thread+0x12c>
   298e0:	0004e785 	.word	0x0004e785
   298e4:	0004e797 	.word	0x0004e797
   298e8:	0004e7ca 	.word	0x0004e7ca
   298ec:	0004e7e3 	.word	0x0004e7e3
   298f0:	0004e801 	.word	0x0004e801
   298f4:	0004e813 	.word	0x0004e813

000298f8 <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   298f8:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   298fa:	4604      	mov	r4, r0
   298fc:	b3a0      	cbz	r0, 29968 <download_client_start+0x70>
   298fe:	6803      	ldr	r3, [r0, #0]
   29900:	2b00      	cmp	r3, #0
   29902:	db31      	blt.n	29968 <download_client_start+0x70>
		return -EINVAL;
	}

	client->file = file;
   29904:	f241 0318 	movw	r3, #4120	; 0x1018
	client->file_size = 0;
	client->progress = from;
   29908:	f241 060c 	movw	r6, #4108	; 0x100c
	client->file = file;
   2990c:	50c1      	str	r1, [r0, r3]
	client->file_size = 0;
   2990e:	2300      	movs	r3, #0
   29910:	f241 0008 	movw	r0, #4104	; 0x1008
   29914:	5023      	str	r3, [r4, r0]
	client->progress = from;
   29916:	51a2      	str	r2, [r4, r6]

	client->offset = 0;
   29918:	f241 0204 	movw	r2, #4100	; 0x1004
   2991c:	50a3      	str	r3, [r4, r2]
	client->has_header = false;
   2991e:	f241 0210 	movw	r2, #4112	; 0x1010

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   29922:	f04f 0500 	mov.w	r5, #0
	client->has_header = false;
   29926:	54a3      	strb	r3, [r4, r2]
	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   29928:	2203      	movs	r2, #3
   2992a:	f362 0502 	bfi	r5, r2, #0, #3
   2992e:	f363 05c5 	bfi	r5, r3, #3, #3
   29932:	4a0f      	ldr	r2, [pc, #60]	; (29970 <download_client_start+0x78>)
   29934:	4b0f      	ldr	r3, [pc, #60]	; (29974 <download_client_start+0x7c>)
   29936:	4608      	mov	r0, r1
   29938:	1a9b      	subs	r3, r3, r2
   2993a:	08db      	lsrs	r3, r3, #3
   2993c:	f363 158f 	bfi	r5, r3, #6, #10
   29940:	f01c fec1 	bl	466c6 <log_strdup>
   29944:	59a3      	ldr	r3, [r4, r6]
   29946:	4602      	mov	r2, r0
   29948:	490b      	ldr	r1, [pc, #44]	; (29978 <download_client_start+0x80>)
   2994a:	4628      	mov	r0, r5
   2994c:	f01c fea9 	bl	466a2 <log_string_sync>
		client->progress);

	err = get_request_send(client);
   29950:	4620      	mov	r0, r4
   29952:	f7ff fac1 	bl	28ed8 <get_request_send>
	if (err) {
   29956:	4605      	mov	r5, r0
   29958:	b920      	cbnz	r0, 29964 <download_client_start+0x6c>
		return err;
	}

	/* Let the thread run */
	k_thread_resume(client->tid);
   2995a:	f241 0324 	movw	r3, #4132	; 0x1024
   2995e:	58e0      	ldr	r0, [r4, r3]
	z_impl_k_thread_resume(thread);
   29960:	f014 fbc2 	bl	3e0e8 <z_impl_k_thread_resume>

	return 0;
}
   29964:	4628      	mov	r0, r5
   29966:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   29968:	f06f 0515 	mvn.w	r5, #21
   2996c:	e7fa      	b.n	29964 <download_client_start+0x6c>
   2996e:	bf00      	nop
   29970:	00049018 	.word	0x00049018
   29974:	00049070 	.word	0x00049070
   29978:	0004e678 	.word	0x0004e678

0002997c <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   2997c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   2997e:	a801      	add	r0, sp, #4
   29980:	f000 ff88 	bl	2a894 <dfu_target_offset_get>

	err = download_client_start(&dlc, dlc.file, offset);
   29984:	f241 0318 	movw	r3, #4120	; 0x1018
   29988:	4814      	ldr	r0, [pc, #80]	; (299dc <download_with_offset+0x60>)
   2998a:	9a01      	ldr	r2, [sp, #4]
   2998c:	58c1      	ldr	r1, [r0, r3]
   2998e:	f7ff ffb3 	bl	298f8 <download_client_start>

	LOG_INF("Downloading from offset: 0x%x", offset);
   29992:	2303      	movs	r3, #3
	err = download_client_start(&dlc, dlc.file, offset);
   29994:	4605      	mov	r5, r0
	LOG_INF("Downloading from offset: 0x%x", offset);
   29996:	f04f 0000 	mov.w	r0, #0
   2999a:	4c11      	ldr	r4, [pc, #68]	; (299e0 <download_with_offset+0x64>)
   2999c:	f363 0002 	bfi	r0, r3, #0, #3
   299a0:	4b10      	ldr	r3, [pc, #64]	; (299e4 <download_with_offset+0x68>)
   299a2:	f36f 00c5 	bfc	r0, #3, #3
   299a6:	1ae4      	subs	r4, r4, r3
   299a8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   299ac:	f364 108f 	bfi	r0, r4, #6, #10
   299b0:	9a01      	ldr	r2, [sp, #4]
   299b2:	490d      	ldr	r1, [pc, #52]	; (299e8 <download_with_offset+0x6c>)
   299b4:	f01c fe75 	bl	466a2 <log_string_sync>
	if (err != 0) {
   299b8:	b16d      	cbz	r5, 299d6 <download_with_offset+0x5a>
		LOG_ERR("%s failed with error %d", __func__, err);
   299ba:	2301      	movs	r3, #1
   299bc:	f04f 0000 	mov.w	r0, #0
   299c0:	f363 0002 	bfi	r0, r3, #0, #3
   299c4:	f36f 00c5 	bfc	r0, #3, #3
   299c8:	f364 108f 	bfi	r0, r4, #6, #10
   299cc:	462b      	mov	r3, r5
   299ce:	4a07      	ldr	r2, [pc, #28]	; (299ec <download_with_offset+0x70>)
   299d0:	4907      	ldr	r1, [pc, #28]	; (299f0 <download_with_offset+0x74>)
   299d2:	f01c fe66 	bl	466a2 <log_string_sync>
	}
}
   299d6:	b003      	add	sp, #12
   299d8:	bd30      	pop	{r4, r5, pc}
   299da:	bf00      	nop
   299dc:	20020988 	.word	0x20020988
   299e0:	00049078 	.word	0x00049078
   299e4:	00049018 	.word	0x00049018
   299e8:	0004ea64 	.word	0x0004ea64
   299ec:	0004e986 	.word	0x0004e986
   299f0:	0004ea82 	.word	0x0004ea82

000299f4 <download_client_callback>:
{
   299f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (event == NULL) {
   299f6:	4605      	mov	r5, r0
   299f8:	2800      	cmp	r0, #0
   299fa:	f000 80cf 	beq.w	29b9c <download_client_callback+0x1a8>
	switch (event->id) {
   299fe:	7806      	ldrb	r6, [r0, #0]
   29a00:	2e01      	cmp	r6, #1
   29a02:	f000 80a1 	beq.w	29b48 <download_client_callback+0x154>
   29a06:	d303      	bcc.n	29a10 <download_client_callback+0x1c>
   29a08:	2e02      	cmp	r6, #2
   29a0a:	d077      	beq.n	29afc <download_client_callback+0x108>
	return 0;
   29a0c:	2400      	movs	r4, #0
   29a0e:	e00d      	b.n	29a2c <download_client_callback+0x38>
		if (first_fragment) {
   29a10:	4e64      	ldr	r6, [pc, #400]	; (29ba4 <download_client_callback+0x1b0>)
   29a12:	7833      	ldrb	r3, [r6, #0]
   29a14:	2b00      	cmp	r3, #0
   29a16:	d054      	beq.n	29ac2 <download_client_callback+0xce>
			err = download_client_file_size_get(&dlc, &file_size);
   29a18:	4669      	mov	r1, sp
   29a1a:	4863      	ldr	r0, [pc, #396]	; (29ba8 <download_client_callback+0x1b4>)
   29a1c:	f01e ff2d 	bl	4887a <download_client_file_size_get>
			if (err != 0) {
   29a20:	4604      	mov	r4, r0
   29a22:	b130      	cbz	r0, 29a32 <download_client_callback+0x3e>
				callback(FOTA_DOWNLOAD_EVT_ERROR);
   29a24:	4b61      	ldr	r3, [pc, #388]	; (29bac <download_client_callback+0x1b8>)
   29a26:	681b      	ldr	r3, [r3, #0]
   29a28:	2001      	movs	r0, #1
   29a2a:	4798      	blx	r3
}
   29a2c:	4620      	mov	r0, r4
   29a2e:	b003      	add	sp, #12
   29a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
			first_fragment = false;
   29a32:	7030      	strb	r0, [r6, #0]
   29a34:	4607      	mov	r7, r0
			int img_type = dfu_target_img_type(event->fragment.buf,
   29a36:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   29a3a:	f000 fec7 	bl	2a7cc <dfu_target_img_type>
			err = dfu_target_init(img_type, file_size);
   29a3e:	9900      	ldr	r1, [sp, #0]
   29a40:	f000 fef2 	bl	2a828 <dfu_target_init>
   29a44:	4e5a      	ldr	r6, [pc, #360]	; (29bb0 <download_client_callback+0x1bc>)
   29a46:	4b5b      	ldr	r3, [pc, #364]	; (29bb4 <download_client_callback+0x1c0>)
			if ((err < 0) && (err != -EBUSY)) {
   29a48:	1e04      	subs	r4, r0, #0
   29a4a:	eba6 0603 	sub.w	r6, r6, r3
   29a4e:	f3c6 06c9 	ubfx	r6, r6, #3, #10
   29a52:	da10      	bge.n	29a76 <download_client_callback+0x82>
   29a54:	f114 0f10 	cmn.w	r4, #16
   29a58:	d00d      	beq.n	29a76 <download_client_callback+0x82>
				LOG_ERR("dfu_target_init error %d", err);
   29a5a:	2301      	movs	r3, #1
   29a5c:	f04f 0000 	mov.w	r0, #0
   29a60:	f363 0002 	bfi	r0, r3, #0, #3
   29a64:	f367 00c5 	bfi	r0, r7, #3, #3
   29a68:	f366 108f 	bfi	r0, r6, #6, #10
   29a6c:	4622      	mov	r2, r4
   29a6e:	4952      	ldr	r1, [pc, #328]	; (29bb8 <download_client_callback+0x1c4>)
   29a70:	f01c fe17 	bl	466a2 <log_string_sync>
				return err;
   29a74:	e7da      	b.n	29a2c <download_client_callback+0x38>
			err = dfu_target_offset_get(&offset);
   29a76:	a801      	add	r0, sp, #4
   29a78:	f000 ff0c 	bl	2a894 <dfu_target_offset_get>
			LOG_INF("Offset: 0x%x", offset);
   29a7c:	2403      	movs	r4, #3
   29a7e:	f04f 0000 	mov.w	r0, #0
   29a82:	f364 0002 	bfi	r0, r4, #0, #3
   29a86:	f36f 00c5 	bfc	r0, #3, #3
   29a8a:	f366 108f 	bfi	r0, r6, #6, #10
   29a8e:	9a01      	ldr	r2, [sp, #4]
   29a90:	494a      	ldr	r1, [pc, #296]	; (29bbc <download_client_callback+0x1c8>)
   29a92:	f01c fe06 	bl	466a2 <log_string_sync>
			if (offset != 0) {
   29a96:	9b01      	ldr	r3, [sp, #4]
   29a98:	b19b      	cbz	r3, 29ac2 <download_client_callback+0xce>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   29a9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29a9e:	4948      	ldr	r1, [pc, #288]	; (29bc0 <download_client_callback+0x1cc>)
   29aa0:	4848      	ldr	r0, [pc, #288]	; (29bc4 <download_client_callback+0x1d0>)
   29aa2:	f014 fbcb 	bl	3e23c <k_delayed_work_submit_to_queue>
				LOG_INF("Refuse fragment, restart with offset");
   29aa6:	f04f 0000 	mov.w	r0, #0
   29aaa:	f364 0002 	bfi	r0, r4, #0, #3
   29aae:	f36f 00c5 	bfc	r0, #3, #3
   29ab2:	f366 108f 	bfi	r0, r6, #6, #10
   29ab6:	4944      	ldr	r1, [pc, #272]	; (29bc8 <download_client_callback+0x1d4>)
   29ab8:	f01c fdf3 	bl	466a2 <log_string_sync>
				return -1;
   29abc:	f04f 34ff 	mov.w	r4, #4294967295
   29ac0:	e7b4      	b.n	29a2c <download_client_callback+0x38>
		err = dfu_target_write(event->fragment.buf,
   29ac2:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   29ac6:	f000 feef 	bl	2a8a8 <dfu_target_write>
		if (err != 0) {
   29aca:	4604      	mov	r4, r0
   29acc:	2800      	cmp	r0, #0
   29ace:	d0ad      	beq.n	29a2c <download_client_callback+0x38>
			LOG_ERR("dfu_target_write error %d", err);
   29ad0:	2501      	movs	r5, #1
   29ad2:	f04f 0000 	mov.w	r0, #0
   29ad6:	4a37      	ldr	r2, [pc, #220]	; (29bb4 <download_client_callback+0x1c0>)
   29ad8:	4b35      	ldr	r3, [pc, #212]	; (29bb0 <download_client_callback+0x1bc>)
   29ada:	f365 0002 	bfi	r0, r5, #0, #3
   29ade:	1a9b      	subs	r3, r3, r2
   29ae0:	08db      	lsrs	r3, r3, #3
   29ae2:	f36f 00c5 	bfc	r0, #3, #3
   29ae6:	f363 108f 	bfi	r0, r3, #6, #10
   29aea:	4622      	mov	r2, r4
   29aec:	4937      	ldr	r1, [pc, #220]	; (29bcc <download_client_callback+0x1d8>)
   29aee:	f01c fdd8 	bl	466a2 <log_string_sync>
			err = download_client_disconnect(&dlc);
   29af2:	482d      	ldr	r0, [pc, #180]	; (29ba8 <download_client_callback+0x1b4>)
   29af4:	f7ff fcaa 	bl	2944c <download_client_disconnect>
   29af8:	4604      	mov	r4, r0
   29afa:	e793      	b.n	29a24 <download_client_callback+0x30>
		err = dfu_target_done(true);
   29afc:	2001      	movs	r0, #1
   29afe:	f000 fedf 	bl	2a8c0 <dfu_target_done>
   29b02:	4d2a      	ldr	r5, [pc, #168]	; (29bac <download_client_callback+0x1b8>)
		if (err != 0) {
   29b04:	4604      	mov	r4, r0
   29b06:	b190      	cbz	r0, 29b2e <download_client_callback+0x13a>
			LOG_ERR("dfu_target_done error: %d", err);
   29b08:	2601      	movs	r6, #1
   29b0a:	f04f 0000 	mov.w	r0, #0
   29b0e:	4a29      	ldr	r2, [pc, #164]	; (29bb4 <download_client_callback+0x1c0>)
   29b10:	4b27      	ldr	r3, [pc, #156]	; (29bb0 <download_client_callback+0x1bc>)
   29b12:	f366 0002 	bfi	r0, r6, #0, #3
   29b16:	1a9b      	subs	r3, r3, r2
   29b18:	08db      	lsrs	r3, r3, #3
   29b1a:	f36f 00c5 	bfc	r0, #3, #3
   29b1e:	f363 108f 	bfi	r0, r3, #6, #10
   29b22:	4622      	mov	r2, r4
   29b24:	492a      	ldr	r1, [pc, #168]	; (29bd0 <download_client_callback+0x1dc>)
   29b26:	f01c fdbc 	bl	466a2 <log_string_sync>
			callback(FOTA_DOWNLOAD_EVT_ERROR);
   29b2a:	682b      	ldr	r3, [r5, #0]
   29b2c:	e77c      	b.n	29a28 <download_client_callback+0x34>
		err = download_client_disconnect(&dlc);
   29b2e:	481e      	ldr	r0, [pc, #120]	; (29ba8 <download_client_callback+0x1b4>)
   29b30:	f7ff fc8c 	bl	2944c <download_client_disconnect>
			callback(FOTA_DOWNLOAD_EVT_ERROR);
   29b34:	682b      	ldr	r3, [r5, #0]
		if (err != 0) {
   29b36:	4604      	mov	r4, r0
   29b38:	2800      	cmp	r0, #0
   29b3a:	f47f af75 	bne.w	29a28 <download_client_callback+0x34>
		callback(FOTA_DOWNLOAD_EVT_FINISHED);
   29b3e:	4798      	blx	r3
		first_fragment = true;
   29b40:	2201      	movs	r2, #1
   29b42:	4b18      	ldr	r3, [pc, #96]	; (29ba4 <download_client_callback+0x1b0>)
   29b44:	701a      	strb	r2, [r3, #0]
		break;
   29b46:	e771      	b.n	29a2c <download_client_callback+0x38>
		download_client_disconnect(&dlc);
   29b48:	4817      	ldr	r0, [pc, #92]	; (29ba8 <download_client_callback+0x1b4>)
   29b4a:	f7ff fc7f 	bl	2944c <download_client_disconnect>
		LOG_ERR("Download client error");
   29b4e:	f04f 0000 	mov.w	r0, #0
   29b52:	4b18      	ldr	r3, [pc, #96]	; (29bb4 <download_client_callback+0x1c0>)
   29b54:	4c16      	ldr	r4, [pc, #88]	; (29bb0 <download_client_callback+0x1bc>)
   29b56:	f366 0002 	bfi	r0, r6, #0, #3
   29b5a:	1ae4      	subs	r4, r4, r3
   29b5c:	f36f 00c5 	bfc	r0, #3, #3
   29b60:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   29b64:	f364 108f 	bfi	r0, r4, #6, #10
   29b68:	491a      	ldr	r1, [pc, #104]	; (29bd4 <download_client_callback+0x1e0>)
   29b6a:	f01c fd9a 	bl	466a2 <log_string_sync>
		err = dfu_target_done(false);
   29b6e:	2000      	movs	r0, #0
   29b70:	f000 fea6 	bl	2a8c0 <dfu_target_done>
		if (err != 0) {
   29b74:	b150      	cbz	r0, 29b8c <download_client_callback+0x198>
			LOG_ERR("Unable to deinitialze resources used "
   29b76:	f04f 0000 	mov.w	r0, #0
   29b7a:	f366 0002 	bfi	r0, r6, #0, #3
   29b7e:	f36f 00c5 	bfc	r0, #3, #3
   29b82:	f364 108f 	bfi	r0, r4, #6, #10
   29b86:	4914      	ldr	r1, [pc, #80]	; (29bd8 <download_client_callback+0x1e4>)
   29b88:	f01c fd8b 	bl	466a2 <log_string_sync>
		first_fragment = true;
   29b8c:	2001      	movs	r0, #1
   29b8e:	4b05      	ldr	r3, [pc, #20]	; (29ba4 <download_client_callback+0x1b0>)
   29b90:	7018      	strb	r0, [r3, #0]
		callback(FOTA_DOWNLOAD_EVT_ERROR);
   29b92:	4b06      	ldr	r3, [pc, #24]	; (29bac <download_client_callback+0x1b8>)
   29b94:	681b      	ldr	r3, [r3, #0]
   29b96:	4798      	blx	r3
		return event->error;
   29b98:	686c      	ldr	r4, [r5, #4]
   29b9a:	e747      	b.n	29a2c <download_client_callback+0x38>
		return -EINVAL;
   29b9c:	f06f 0415 	mvn.w	r4, #21
   29ba0:	e744      	b.n	29a2c <download_client_callback+0x38>
   29ba2:	bf00      	nop
   29ba4:	200321a9 	.word	0x200321a9
   29ba8:	20020988 	.word	0x20020988
   29bac:	20024748 	.word	0x20024748
   29bb0:	00049078 	.word	0x00049078
   29bb4:	00049018 	.word	0x00049018
   29bb8:	0004e99b 	.word	0x0004e99b
   29bbc:	0004e9b4 	.word	0x0004e9b4
   29bc0:	2002474c 	.word	0x2002474c
   29bc4:	2002a324 	.word	0x2002a324
   29bc8:	0004e9c1 	.word	0x0004e9c1
   29bcc:	0004e9e6 	.word	0x0004e9e6
   29bd0:	0004ea00 	.word	0x0004ea00
   29bd4:	0004ea1a 	.word	0x0004ea1a
   29bd8:	0004ea30 	.word	0x0004ea30

00029bdc <fota_download_start>:

int fota_download_start(char *host, char *file)
{
   29bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err = -1;

	struct download_client_cfg config = {
   29bde:	f04f 33ff 	mov.w	r3, #4294967295
   29be2:	2200      	movs	r2, #0
{
   29be4:	460d      	mov	r5, r1
	struct download_client_cfg config = {
   29be6:	e9cd 3200 	strd	r3, r2, [sp]
		.sec_tag = -1, /* HTTP */
	};

	if (host == NULL || file == NULL || callback == NULL) {
   29bea:	4601      	mov	r1, r0
   29bec:	b1b0      	cbz	r0, 29c1c <fota_download_start+0x40>
   29bee:	b1ad      	cbz	r5, 29c1c <fota_download_start+0x40>
   29bf0:	4b0c      	ldr	r3, [pc, #48]	; (29c24 <fota_download_start+0x48>)
   29bf2:	681b      	ldr	r3, [r3, #0]
   29bf4:	b193      	cbz	r3, 29c1c <fota_download_start+0x40>
		LOG_INF("B1 update, selected file:\n%s", update);
		file = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   29bf6:	466a      	mov	r2, sp
   29bf8:	480b      	ldr	r0, [pc, #44]	; (29c28 <fota_download_start+0x4c>)
   29bfa:	f7ff fa65 	bl	290c8 <download_client_connect>
	if (err != 0) {
   29bfe:	4604      	mov	r4, r0
   29c00:	b948      	cbnz	r0, 29c16 <fota_download_start+0x3a>
		return err;
	}


	err = download_client_start(&dlc, file, 0);
   29c02:	4602      	mov	r2, r0
   29c04:	4629      	mov	r1, r5
   29c06:	4808      	ldr	r0, [pc, #32]	; (29c28 <fota_download_start+0x4c>)
   29c08:	f7ff fe76 	bl	298f8 <download_client_start>
	if (err != 0) {
   29c0c:	4604      	mov	r4, r0
   29c0e:	b110      	cbz	r0, 29c16 <fota_download_start+0x3a>
		download_client_disconnect(&dlc);
   29c10:	4805      	ldr	r0, [pc, #20]	; (29c28 <fota_download_start+0x4c>)
   29c12:	f7ff fc1b 	bl	2944c <download_client_disconnect>
		return err;
	}

	return 0;
}
   29c16:	4620      	mov	r0, r4
   29c18:	b003      	add	sp, #12
   29c1a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   29c1c:	f06f 0415 	mvn.w	r4, #21
   29c20:	e7f9      	b.n	29c16 <fota_download_start+0x3a>
   29c22:	bf00      	nop
   29c24:	20024748 	.word	0x20024748
   29c28:	20020988 	.word	0x20020988

00029c2c <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   29c2c:	b508      	push	{r3, lr}
	if (client_callback == NULL) {
   29c2e:	b158      	cbz	r0, 29c48 <fota_download_init+0x1c>
		return -EINVAL;
	}

	callback = client_callback;
   29c30:	4b07      	ldr	r3, [pc, #28]	; (29c50 <fota_download_init+0x24>)

	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   29c32:	4908      	ldr	r1, [pc, #32]	; (29c54 <fota_download_init+0x28>)
	callback = client_callback;
   29c34:	6018      	str	r0, [r3, #0]
	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   29c36:	4808      	ldr	r0, [pc, #32]	; (29c58 <fota_download_init+0x2c>)
   29c38:	f01e ffcc 	bl	48bd4 <k_delayed_work_init>
	if (err != 0) {
		return err;
	}

	return 0;
}
   29c3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	int err = download_client_init(&dlc, download_client_callback);
   29c40:	4906      	ldr	r1, [pc, #24]	; (29c5c <fota_download_init+0x30>)
   29c42:	4807      	ldr	r0, [pc, #28]	; (29c60 <fota_download_init+0x34>)
   29c44:	f7ff ba16 	b.w	29074 <download_client_init>
}
   29c48:	f06f 0015 	mvn.w	r0, #21
   29c4c:	bd08      	pop	{r3, pc}
   29c4e:	bf00      	nop
   29c50:	20024748 	.word	0x20024748
   29c54:	0002997d 	.word	0x0002997d
   29c58:	2002474c 	.word	0x2002474c
   29c5c:	000299f5 	.word	0x000299f5
   29c60:	20020988 	.word	0x20020988

00029c64 <construct_topic>:
 */
#define TOPIC_TEMPLATE "$aws/things/%s/jobs/%s%s%s%s"
static int construct_topic(const u8_t *client_id, const u8_t *job_id,
			   const struct topic_conf *conf, u8_t *out_buf,
			   struct mqtt_topic *topic, bool remove_suffix)
{
   29c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   29c68:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   29c6a:	4688      	mov	r8, r1
   29c6c:	4615      	mov	r5, r2
   29c6e:	461f      	mov	r7, r3
	if (client_id == NULL || job_id == NULL || conf == NULL ||
   29c70:	4681      	mov	r9, r0
   29c72:	2800      	cmp	r0, #0
   29c74:	d060      	beq.n	29d38 <construct_topic+0xd4>
   29c76:	2900      	cmp	r1, #0
   29c78:	d05e      	beq.n	29d38 <construct_topic+0xd4>
   29c7a:	6853      	ldr	r3, [r2, #4]
   29c7c:	2b00      	cmp	r3, #0
   29c7e:	d05b      	beq.n	29d38 <construct_topic+0xd4>
	    conf->name == NULL || conf->suffix == NULL ||
   29c80:	6894      	ldr	r4, [r2, #8]
   29c82:	2c00      	cmp	r4, #0
   29c84:	d058      	beq.n	29d38 <construct_topic+0xd4>
   29c86:	2f00      	cmp	r7, #0
   29c88:	d056      	beq.n	29d38 <construct_topic+0xd4>
	    out_buf == NULL || topic == NULL) {
		return -EINVAL;
	}

	const char *suffix = remove_suffix  ? "" : conf->suffix;
   29c8a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   29c8e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 29d58 <construct_topic+0xf4>
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   29c92:	4608      	mov	r0, r1
	const char *suffix = remove_suffix  ? "" : conf->suffix;
   29c94:	2b00      	cmp	r3, #0
   29c96:	bf18      	it	ne
   29c98:	4654      	movne	r4, sl
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   29c9a:	f016 fc73 	bl	40584 <strlen>
   29c9e:	4a28      	ldr	r2, [pc, #160]	; (29d40 <construct_topic+0xdc>)
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   29ca0:	686b      	ldr	r3, [r5, #4]
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   29ca2:	2800      	cmp	r0, #0
   29ca4:	bf14      	ite	ne
   29ca6:	4610      	movne	r0, r2
   29ca8:	4650      	moveq	r0, sl
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   29caa:	9403      	str	r4, [sp, #12]
   29cac:	e9cd 0301 	strd	r0, r3, [sp, #4]
   29cb0:	f8cd 8000 	str.w	r8, [sp]
   29cb4:	464b      	mov	r3, r9
   29cb6:	4a23      	ldr	r2, [pc, #140]	; (29d44 <construct_topic+0xe0>)
   29cb8:	2195      	movs	r1, #149	; 0x95
   29cba:	4638      	mov	r0, r7
   29cbc:	f016 fa92 	bl	401e4 <snprintf>
			client_id, job_id, slash_after_job_id, conf->name,
			suffix);

	if (ret >= AWS_JOBS_TOPIC_MAX_LEN) {
   29cc0:	2894      	cmp	r0, #148	; 0x94
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   29cc2:	4604      	mov	r4, r0
   29cc4:	f04f 0301 	mov.w	r3, #1
	if (ret >= AWS_JOBS_TOPIC_MAX_LEN) {
   29cc8:	dd19      	ble.n	29cfe <construct_topic+0x9a>
		LOG_ERR("Unable to fit formated string into to allocate "
   29cca:	f04f 0400 	mov.w	r4, #0
   29cce:	4a1e      	ldr	r2, [pc, #120]	; (29d48 <construct_topic+0xe4>)
   29cd0:	f363 0402 	bfi	r4, r3, #0, #3
   29cd4:	4b1d      	ldr	r3, [pc, #116]	; (29d4c <construct_topic+0xe8>)
   29cd6:	f36f 04c5 	bfc	r4, #3, #3
   29cda:	1a9b      	subs	r3, r3, r2
   29cdc:	08db      	lsrs	r3, r3, #3
   29cde:	6868      	ldr	r0, [r5, #4]
   29ce0:	f363 148f 	bfi	r4, r3, #6, #10
   29ce4:	f01c fcef 	bl	466c6 <log_strdup>
   29ce8:	4919      	ldr	r1, [pc, #100]	; (29d50 <construct_topic+0xec>)
   29cea:	4602      	mov	r2, r0
   29cec:	4620      	mov	r0, r4
   29cee:	f01c fcd8 	bl	466a2 <log_string_sync>
			"memory for %s", log_strdup(conf->name));
		return -ENOMEM;
   29cf2:	f06f 040b 	mvn.w	r4, #11

	topic->topic.size = ret;
	topic->topic.utf8 = out_buf;
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
	return 0;
}
   29cf6:	4620      	mov	r0, r4
   29cf8:	b004      	add	sp, #16
   29cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (ret < 0) {
   29cfe:	2800      	cmp	r0, #0
   29d00:	da15      	bge.n	29d2e <construct_topic+0xca>
		LOG_ERR("Output error for %s was encountered with return value "
   29d02:	f04f 0600 	mov.w	r6, #0
   29d06:	4a10      	ldr	r2, [pc, #64]	; (29d48 <construct_topic+0xe4>)
   29d08:	f363 0602 	bfi	r6, r3, #0, #3
   29d0c:	4b0f      	ldr	r3, [pc, #60]	; (29d4c <construct_topic+0xe8>)
   29d0e:	6868      	ldr	r0, [r5, #4]
   29d10:	1a9b      	subs	r3, r3, r2
   29d12:	08db      	lsrs	r3, r3, #3
   29d14:	f36f 06c5 	bfc	r6, #3, #3
   29d18:	f363 168f 	bfi	r6, r3, #6, #10
   29d1c:	f01c fcd3 	bl	466c6 <log_strdup>
   29d20:	4623      	mov	r3, r4
   29d22:	4602      	mov	r2, r0
   29d24:	490b      	ldr	r1, [pc, #44]	; (29d54 <construct_topic+0xf0>)
   29d26:	4630      	mov	r0, r6
   29d28:	f01c fcbb 	bl	466a2 <log_string_sync>
		return ret;
   29d2c:	e7e3      	b.n	29cf6 <construct_topic+0x92>
	topic->topic.utf8 = out_buf;
   29d2e:	e9c6 7000 	strd	r7, r0, [r6]
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
   29d32:	7233      	strb	r3, [r6, #8]
	return 0;
   29d34:	2400      	movs	r4, #0
   29d36:	e7de      	b.n	29cf6 <construct_topic+0x92>
		return -EINVAL;
   29d38:	f06f 0415 	mvn.w	r4, #21
   29d3c:	e7db      	b.n	29cf6 <construct_topic+0x92>
   29d3e:	bf00      	nop
   29d40:	0004e759 	.word	0x0004e759
   29d44:	0004eb5d 	.word	0x0004eb5d
   29d48:	00049018 	.word	0x00049018
   29d4c:	00049038 	.word	0x00049038
   29d50:	0004eb7a 	.word	0x0004eb7a
   29d54:	0004ebb7 	.word	0x0004ebb7
   29d58:	00050483 	.word	0x00050483

00029d5c <reg_topic>:

static int reg_topic(struct mqtt_client *const client, u8_t *topic_buf,
		     struct topic_conf const *conf, const u8_t *job_id,
		     bool subscribe)
{
   29d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   29d5e:	b089      	sub	sp, #36	; 0x24
   29d60:	468c      	mov	ip, r1
   29d62:	4617      	mov	r7, r2
   29d64:	4619      	mov	r1, r3
   29d66:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
	if (client == NULL) {
   29d6a:	4604      	mov	r4, r0
   29d6c:	2800      	cmp	r0, #0
   29d6e:	d042      	beq.n	29df6 <reg_topic+0x9a>
		return -EINVAL;
	}

	struct mqtt_topic topic;
	int err = construct_topic(client->client_id.utf8, job_id, conf,
   29d70:	2300      	movs	r3, #0
   29d72:	ae05      	add	r6, sp, #20
   29d74:	9301      	str	r3, [sp, #4]
   29d76:	9600      	str	r6, [sp, #0]
   29d78:	4663      	mov	r3, ip
   29d7a:	6c40      	ldr	r0, [r0, #68]	; 0x44
   29d7c:	f7ff ff72 	bl	29c64 <construct_topic>
				  topic_buf, &topic, false);

	const struct mqtt_subscription_list subscription_list = {
   29d80:	2301      	movs	r3, #1
   29d82:	f8ad 3010 	strh.w	r3, [sp, #16]
   29d86:	683b      	ldr	r3, [r7, #0]
   29d88:	9603      	str	r6, [sp, #12]
   29d8a:	f8ad 3012 	strh.w	r3, [sp, #18]
		.list = &topic,
		.list_count = 1,
		.message_id = conf->msg_id
	};

	if (err) {
   29d8e:	b9d8      	cbnz	r0, 29dc8 <reg_topic+0x6c>
   29d90:	4a1a      	ldr	r2, [pc, #104]	; (29dfc <reg_topic+0xa0>)
   29d92:	4b1b      	ldr	r3, [pc, #108]	; (29e00 <reg_topic+0xa4>)
   29d94:	2103      	movs	r1, #3
   29d96:	1a9b      	subs	r3, r3, r2
   29d98:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   29d9c:	9a05      	ldr	r2, [sp, #20]
		return err;
	}

	if (subscribe) {
   29d9e:	b1ad      	cbz	r5, 29dcc <reg_topic+0x70>
		LOG_INF("Subscribe: %s", log_strdup(topic.topic.utf8));
   29da0:	f04f 0500 	mov.w	r5, #0
   29da4:	f361 0502 	bfi	r5, r1, #0, #3
   29da8:	f360 05c5 	bfi	r5, r0, #3, #3
   29dac:	4610      	mov	r0, r2
   29dae:	f363 158f 	bfi	r5, r3, #6, #10
   29db2:	f01c fc88 	bl	466c6 <log_strdup>
   29db6:	4913      	ldr	r1, [pc, #76]	; (29e04 <reg_topic+0xa8>)
   29db8:	4602      	mov	r2, r0
   29dba:	4628      	mov	r0, r5
   29dbc:	f01c fc71 	bl	466a2 <log_string_sync>
		return mqtt_subscribe(client, &subscription_list);
   29dc0:	a903      	add	r1, sp, #12
   29dc2:	4620      	mov	r0, r4
   29dc4:	f01d fa9d 	bl	47302 <mqtt_subscribe>
	}

	LOG_INF("Unsubscribe: %s", log_strdup(topic.topic.utf8));
	return mqtt_unsubscribe(client, &subscription_list);
}
   29dc8:	b009      	add	sp, #36	; 0x24
   29dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("Unsubscribe: %s", log_strdup(topic.topic.utf8));
   29dcc:	f04f 0500 	mov.w	r5, #0
   29dd0:	f361 0502 	bfi	r5, r1, #0, #3
   29dd4:	f360 05c5 	bfi	r5, r0, #3, #3
   29dd8:	4610      	mov	r0, r2
   29dda:	f363 158f 	bfi	r5, r3, #6, #10
   29dde:	f01c fc72 	bl	466c6 <log_strdup>
   29de2:	4909      	ldr	r1, [pc, #36]	; (29e08 <reg_topic+0xac>)
   29de4:	4602      	mov	r2, r0
   29de6:	4628      	mov	r0, r5
   29de8:	f01c fc5b 	bl	466a2 <log_string_sync>
	return mqtt_unsubscribe(client, &subscription_list);
   29dec:	a903      	add	r1, sp, #12
   29dee:	4620      	mov	r0, r4
   29df0:	f01d faae 	bl	47350 <mqtt_unsubscribe>
   29df4:	e7e8      	b.n	29dc8 <reg_topic+0x6c>
		return -EINVAL;
   29df6:	f06f 0015 	mvn.w	r0, #21
   29dfa:	e7e5      	b.n	29dc8 <reg_topic+0x6c>
   29dfc:	00049018 	.word	0x00049018
   29e00:	00049038 	.word	0x00049038
   29e04:	0004ec15 	.word	0x0004ec15
   29e08:	0004ec23 	.word	0x0004ec23

00029e0c <publish>:
}

static int publish(struct mqtt_client *const client, const u8_t *job_id,
		   const struct topic_conf *conf, u8_t *payload_data,
		   size_t payload_data_len, u8_t *topic_buf)
{
   29e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29e10:	4698      	mov	r8, r3
	struct mqtt_topic topic;

	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   29e12:	2301      	movs	r3, #1
{
   29e14:	b08c      	sub	sp, #48	; 0x30
	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   29e16:	af03      	add	r7, sp, #12
   29e18:	9301      	str	r3, [sp, #4]
   29e1a:	9700      	str	r7, [sp, #0]
{
   29e1c:	4606      	mov	r6, r0
	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   29e1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   29e20:	6c40      	ldr	r0, [r0, #68]	; 0x44
   29e22:	f7ff ff1f 	bl	29c64 <construct_topic>
				  topic_buf, &topic, true);

	if (ret) {
   29e26:	4604      	mov	r4, r0
   29e28:	2800      	cmp	r0, #0
   29e2a:	d140      	bne.n	29eae <publish+0xa2>
		return ret;
	}

	LOG_INF("Publish topic: %s", log_strdup(topic.topic.utf8));
   29e2c:	f04f 0a03 	mov.w	sl, #3
   29e30:	f04f 0900 	mov.w	r9, #0
   29e34:	4b20      	ldr	r3, [pc, #128]	; (29eb8 <publish+0xac>)
   29e36:	f36a 0902 	bfi	r9, sl, #0, #3
   29e3a:	4d20      	ldr	r5, [pc, #128]	; (29ebc <publish+0xb0>)
   29e3c:	f360 09c5 	bfi	r9, r0, #3, #3
   29e40:	9803      	ldr	r0, [sp, #12]
   29e42:	1aed      	subs	r5, r5, r3
   29e44:	f01c fc3f 	bl	466c6 <log_strdup>
   29e48:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   29e4c:	f365 198f 	bfi	r9, r5, #6, #10
   29e50:	4602      	mov	r2, r0
   29e52:	4648      	mov	r0, r9
	LOG_INF("Publish payload %s", log_strdup(payload_data));
   29e54:	f04f 0900 	mov.w	r9, #0
	LOG_INF("Publish topic: %s", log_strdup(topic.topic.utf8));
   29e58:	4919      	ldr	r1, [pc, #100]	; (29ec0 <publish+0xb4>)
   29e5a:	f01c fc22 	bl	466a2 <log_string_sync>
	LOG_INF("Publish payload %s", log_strdup(payload_data));
   29e5e:	4640      	mov	r0, r8
   29e60:	f01c fc31 	bl	466c6 <log_strdup>
   29e64:	f36a 0902 	bfi	r9, sl, #0, #3
   29e68:	f364 09c5 	bfi	r9, r4, #3, #3
   29e6c:	f365 198f 	bfi	r9, r5, #6, #10
   29e70:	4602      	mov	r2, r0
   29e72:	4914      	ldr	r1, [pc, #80]	; (29ec4 <publish+0xb8>)
   29e74:	4648      	mov	r0, r9
   29e76:	f01c fc14 	bl	466a2 <log_string_sync>

	struct mqtt_publish_param param = {
   29e7a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   29e7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   29e80:	ad06      	add	r5, sp, #24
   29e82:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   29e86:	930a      	str	r3, [sp, #40]	; 0x28
   29e88:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
		.message.topic = topic,
		.message.payload.data = payload_data,
		.message.payload.len = payload_data_len,
		.message_id = sys_rand32_get(),
   29e8c:	f7f7 fe1e 	bl	21acc <sys_rand32_get>
	struct mqtt_publish_param param = {
   29e90:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   29e94:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   29e98:	f364 0300 	bfi	r3, r4, #0, #1
   29e9c:	f364 0341 	bfi	r3, r4, #1, #1
		.dup_flag = 0,
		.retain_flag = 0,
	};

	return mqtt_publish(client, &param);
   29ea0:	4629      	mov	r1, r5
   29ea2:	4630      	mov	r0, r6
	struct mqtt_publish_param param = {
   29ea4:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	return mqtt_publish(client, &param);
   29ea8:	f01d f9af 	bl	4720a <mqtt_publish>
   29eac:	4604      	mov	r4, r0
}
   29eae:	4620      	mov	r0, r4
   29eb0:	b00c      	add	sp, #48	; 0x30
   29eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29eb6:	bf00      	nop
   29eb8:	00049018 	.word	0x00049018
   29ebc:	00049038 	.word	0x00049038
   29ec0:	0004ebf0 	.word	0x0004ebf0
   29ec4:	0004ec02 	.word	0x0004ec02

00029ec8 <aws_jobs_subscribe_topic_notify_next>:
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", true);
   29ec8:	2301      	movs	r3, #1
{
   29eca:	b507      	push	{r0, r1, r2, lr}
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", true);
   29ecc:	4a03      	ldr	r2, [pc, #12]	; (29edc <aws_jobs_subscribe_topic_notify_next+0x14>)
   29ece:	9300      	str	r3, [sp, #0]
   29ed0:	4b03      	ldr	r3, [pc, #12]	; (29ee0 <aws_jobs_subscribe_topic_notify_next+0x18>)
   29ed2:	f7ff ff43 	bl	29d5c <reg_topic>
}
   29ed6:	b003      	add	sp, #12
   29ed8:	f85d fb04 	ldr.w	pc, [sp], #4
   29edc:	000499d4 	.word	0x000499d4
   29ee0:	00050483 	.word	0x00050483

00029ee4 <aws_jobs_unsubscribe_topic_notify_next>:
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", false);
   29ee4:	2300      	movs	r3, #0
{
   29ee6:	b507      	push	{r0, r1, r2, lr}
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", false);
   29ee8:	4a03      	ldr	r2, [pc, #12]	; (29ef8 <aws_jobs_unsubscribe_topic_notify_next+0x14>)
   29eea:	9300      	str	r3, [sp, #0]
   29eec:	4b03      	ldr	r3, [pc, #12]	; (29efc <aws_jobs_unsubscribe_topic_notify_next+0x18>)
   29eee:	f7ff ff35 	bl	29d5c <reg_topic>
}
   29ef2:	b003      	add	sp, #12
   29ef4:	f85d fb04 	ldr.w	pc, [sp], #4
   29ef8:	000499d4 	.word	0x000499d4
   29efc:	00050483 	.word	0x00050483

00029f00 <aws_jobs_subscribe_topic_get>:
{
   29f00:	b513      	push	{r0, r1, r4, lr}
	return reg_topic(client, topic_buf, &TOPIC_GET_CONF, job_id, true);
   29f02:	2301      	movs	r3, #1
{
   29f04:	4614      	mov	r4, r2
	return reg_topic(client, topic_buf, &TOPIC_GET_CONF, job_id, true);
   29f06:	9300      	str	r3, [sp, #0]
   29f08:	4a03      	ldr	r2, [pc, #12]	; (29f18 <aws_jobs_subscribe_topic_get+0x18>)
   29f0a:	460b      	mov	r3, r1
   29f0c:	4621      	mov	r1, r4
   29f0e:	f7ff ff25 	bl	29d5c <reg_topic>
}
   29f12:	b002      	add	sp, #8
   29f14:	bd10      	pop	{r4, pc}
   29f16:	bf00      	nop
   29f18:	000499c8 	.word	0x000499c8

00029f1c <aws_jobs_subscribe_topic_update>:
{
   29f1c:	b513      	push	{r0, r1, r4, lr}
	return reg_topic(client, topic_buf, &TOPIC_UPDATE_CONF, job_id, true);
   29f1e:	2301      	movs	r3, #1
{
   29f20:	4614      	mov	r4, r2
	return reg_topic(client, topic_buf, &TOPIC_UPDATE_CONF, job_id, true);
   29f22:	9300      	str	r3, [sp, #0]
   29f24:	4a03      	ldr	r2, [pc, #12]	; (29f34 <aws_jobs_subscribe_topic_update+0x18>)
   29f26:	460b      	mov	r3, r1
   29f28:	4621      	mov	r1, r4
   29f2a:	f7ff ff17 	bl	29d5c <reg_topic>
}
   29f2e:	b002      	add	sp, #8
   29f30:	bd10      	pop	{r4, pc}
   29f32:	bf00      	nop
   29f34:	000499e0 	.word	0x000499e0

00029f38 <aws_jobs_update_job_execution>:
				  const u8_t *job_id,
				  enum execution_status status,
				  const u8_t *status_details,
				  int expected_version,
				  const u8_t *client_token, u8_t *topic_buf)
{
   29f38:	b570      	push	{r4, r5, r6, lr}
   29f3a:	f5ad 6dab 	sub.w	sp, sp, #1368	; 0x558
   29f3e:	460e      	mov	r6, r1
   29f40:	4605      	mov	r5, r0
   29f42:	f8dd 156c 	ldr.w	r1, [sp, #1388]	; 0x56c
	/* The rest of the parameters are checked later */
	if (status_details == NULL || client_token == NULL) {
   29f46:	2b00      	cmp	r3, #0
   29f48:	d04a      	beq.n	29fe0 <aws_jobs_update_job_execution+0xa8>
   29f4a:	2900      	cmp	r1, #0
   29f4c:	d048      	beq.n	29fe0 <aws_jobs_update_job_execution+0xa8>
	 * is actually 32kb set it to what is the limiting factor which is the
	 * MQTT buffer size for reception.
	 */
	u8_t update_job_payload[CONFIG_UPDATE_JOB_PAYLOAD_LEN];

	int ret = snprintf(update_job_payload, sizeof(update_job_payload),
   29f4e:	9102      	str	r1, [sp, #8]
   29f50:	f8dd 1568 	ldr.w	r1, [sp, #1384]	; 0x568
   29f54:	a804      	add	r0, sp, #16
   29f56:	e9cd 3100 	strd	r3, r1, [sp]
   29f5a:	4b23      	ldr	r3, [pc, #140]	; (29fe8 <aws_jobs_update_job_execution+0xb0>)
   29f5c:	f240 5146 	movw	r1, #1350	; 0x546
   29f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   29f64:	4a21      	ldr	r2, [pc, #132]	; (29fec <aws_jobs_update_job_execution+0xb4>)
   29f66:	f016 f93d 	bl	401e4 <snprintf>
			   UPDATE_JOB_PAYLOAD, execution_status_strings[status],
			   status_details, expected_version, client_token);

	if (ret >= CONFIG_UPDATE_JOB_PAYLOAD_LEN) {
   29f6a:	f240 5345 	movw	r3, #1349	; 0x545
   29f6e:	4298      	cmp	r0, r3
	int ret = snprintf(update_job_payload, sizeof(update_job_payload),
   29f70:	4604      	mov	r4, r0
	if (ret >= CONFIG_UPDATE_JOB_PAYLOAD_LEN) {
   29f72:	dd15      	ble.n	29fa0 <aws_jobs_update_job_execution+0x68>
		LOG_ERR("Unable to fit formated string in provided buffer.");
   29f74:	2301      	movs	r3, #1
   29f76:	f04f 0000 	mov.w	r0, #0
   29f7a:	4a1d      	ldr	r2, [pc, #116]	; (29ff0 <aws_jobs_update_job_execution+0xb8>)
   29f7c:	f363 0002 	bfi	r0, r3, #0, #3
   29f80:	4b1c      	ldr	r3, [pc, #112]	; (29ff4 <aws_jobs_update_job_execution+0xbc>)
   29f82:	f36f 00c5 	bfc	r0, #3, #3
   29f86:	1a9b      	subs	r3, r3, r2
   29f88:	08db      	lsrs	r3, r3, #3
   29f8a:	f363 108f 	bfi	r0, r3, #6, #10
   29f8e:	491a      	ldr	r1, [pc, #104]	; (29ff8 <aws_jobs_update_job_execution+0xc0>)
   29f90:	f01c fb87 	bl	466a2 <log_string_sync>
		return -ENOMEM;
   29f94:	f06f 040b 	mvn.w	r4, #11
	}

	return publish(client, job_id, &TOPIC_UPDATE_CONF, update_job_payload,
		       ret, topic_buf);

}
   29f98:	4620      	mov	r0, r4
   29f9a:	f50d 6dab 	add.w	sp, sp, #1368	; 0x558
   29f9e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (ret < 0) {
   29fa0:	2800      	cmp	r0, #0
   29fa2:	da11      	bge.n	29fc8 <aws_jobs_update_job_execution+0x90>
		LOG_ERR("Error when creating payload %d", ret);
   29fa4:	2301      	movs	r3, #1
   29fa6:	f04f 0000 	mov.w	r0, #0
   29faa:	4a11      	ldr	r2, [pc, #68]	; (29ff0 <aws_jobs_update_job_execution+0xb8>)
   29fac:	f363 0002 	bfi	r0, r3, #0, #3
   29fb0:	4b10      	ldr	r3, [pc, #64]	; (29ff4 <aws_jobs_update_job_execution+0xbc>)
   29fb2:	f36f 00c5 	bfc	r0, #3, #3
   29fb6:	1a9b      	subs	r3, r3, r2
   29fb8:	08db      	lsrs	r3, r3, #3
   29fba:	f363 108f 	bfi	r0, r3, #6, #10
   29fbe:	4622      	mov	r2, r4
   29fc0:	490e      	ldr	r1, [pc, #56]	; (29ffc <aws_jobs_update_job_execution+0xc4>)
   29fc2:	f01c fb6e 	bl	466a2 <log_string_sync>
		return ret;
   29fc6:	e7e7      	b.n	29f98 <aws_jobs_update_job_execution+0x60>
	return publish(client, job_id, &TOPIC_UPDATE_CONF, update_job_payload,
   29fc8:	f8dd 3570 	ldr.w	r3, [sp, #1392]	; 0x570
   29fcc:	4a0c      	ldr	r2, [pc, #48]	; (2a000 <aws_jobs_update_job_execution+0xc8>)
   29fce:	e9cd 0300 	strd	r0, r3, [sp]
   29fd2:	4631      	mov	r1, r6
   29fd4:	ab04      	add	r3, sp, #16
   29fd6:	4628      	mov	r0, r5
   29fd8:	f7ff ff18 	bl	29e0c <publish>
   29fdc:	4604      	mov	r4, r0
   29fde:	e7db      	b.n	29f98 <aws_jobs_update_job_execution+0x60>
		return -EINVAL;
   29fe0:	f06f 0415 	mvn.w	r4, #21
   29fe4:	e7d8      	b.n	29f98 <aws_jobs_update_job_execution+0x60>
   29fe6:	bf00      	nop
   29fe8:	000499ec 	.word	0x000499ec
   29fec:	0004eabc 	.word	0x0004eabc
   29ff0:	00049018 	.word	0x00049018
   29ff4:	00049038 	.word	0x00049038
   29ff8:	0004eb0c 	.word	0x0004eb0c
   29ffc:	0004eb3e 	.word	0x0004eb3e
   2a000:	000499e0 	.word	0x000499e0

0002a004 <aws_jobs_get_job_execution>:

#define JOB_ID_GET_PAYLOAD "{\"clientToken\": \"\"}"
int aws_jobs_get_job_execution(struct mqtt_client *const client,
			       const char *job_id, u8_t *topic_buf)
{
   2a004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   2a006:	4c08      	ldr	r4, [pc, #32]	; (2a028 <aws_jobs_get_job_execution+0x24>)
{
   2a008:	4605      	mov	r5, r0
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   2a00a:	4620      	mov	r0, r4
{
   2a00c:	4617      	mov	r7, r2
   2a00e:	460e      	mov	r6, r1
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   2a010:	f016 fab8 	bl	40584 <strlen>
   2a014:	4623      	mov	r3, r4
   2a016:	e9cd 0700 	strd	r0, r7, [sp]
   2a01a:	4a04      	ldr	r2, [pc, #16]	; (2a02c <aws_jobs_get_job_execution+0x28>)
   2a01c:	4631      	mov	r1, r6
   2a01e:	4628      	mov	r0, r5
   2a020:	f7ff fef4 	bl	29e0c <publish>
		       strlen(JOB_ID_GET_PAYLOAD), topic_buf);
}
   2a024:	b003      	add	sp, #12
   2a026:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a028:	0004eaa8 	.word	0x0004eaa8
   2a02c:	000499c8 	.word	0x000499c8

0002a030 <update_job_execution.constprop.0>:

#define AWS_FOTA_STATUS_DETAILS_TEMPLATE "{\"nextState\":\"%s\"}"
#define STATUS_DETAILS_MAX_LEN  (sizeof("{\"nextState\":\"\"}") \
				+ (sizeof("download_firmware") + 2))

static int update_job_execution(struct mqtt_client *const client,
   2a030:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a032:	461f      	mov	r7, r3
				enum fota_status next_state,
				int version_number,
				const char *client_token)
{
	char status_details[STATUS_DETAILS_MAX_LEN + 1];
	int ret = snprintf(status_details,
   2a034:	4b25      	ldr	r3, [pc, #148]	; (2a0cc <update_job_execution.constprop.0+0x9c>)
static int update_job_execution(struct mqtt_client *const client,
   2a036:	b08f      	sub	sp, #60	; 0x3c
	int ret = snprintf(status_details,
   2a038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
static int update_job_execution(struct mqtt_client *const client,
   2a03c:	4605      	mov	r5, r0
   2a03e:	460e      	mov	r6, r1
	int ret = snprintf(status_details,
   2a040:	4a23      	ldr	r2, [pc, #140]	; (2a0d0 <update_job_execution.constprop.0+0xa0>)
   2a042:	2126      	movs	r1, #38	; 0x26
   2a044:	a804      	add	r0, sp, #16
   2a046:	f016 f8cd 	bl	401e4 <snprintf>
			   sizeof(status_details),
			   AWS_FOTA_STATUS_DETAILS_TEMPLATE,
			   fota_status_strings[next_state]);
	__ASSERT(ret >= 0, "snprintf returned error %d\n", ret);
   2a04a:	1e04      	subs	r4, r0, #0
   2a04c:	da0d      	bge.n	2a06a <update_job_execution.constprop.0+0x3a>
   2a04e:	2361      	movs	r3, #97	; 0x61
   2a050:	4a20      	ldr	r2, [pc, #128]	; (2a0d4 <update_job_execution.constprop.0+0xa4>)
   2a052:	4921      	ldr	r1, [pc, #132]	; (2a0d8 <update_job_execution.constprop.0+0xa8>)
   2a054:	4821      	ldr	r0, [pc, #132]	; (2a0dc <update_job_execution.constprop.0+0xac>)
   2a056:	f01c fb01 	bl	4665c <printk>
   2a05a:	4621      	mov	r1, r4
   2a05c:	4820      	ldr	r0, [pc, #128]	; (2a0e0 <update_job_execution.constprop.0+0xb0>)
   2a05e:	f01c fafd 	bl	4665c <printk>
   2a062:	2161      	movs	r1, #97	; 0x61
   2a064:	481b      	ldr	r0, [pc, #108]	; (2a0d4 <update_job_execution.constprop.0+0xa4>)
   2a066:	f01c fb06 	bl	46676 <assert_post_action>
	__ASSERT(ret < STATUS_DETAILS_MAX_LEN,
   2a06a:	2c24      	cmp	r4, #36	; 0x24
   2a06c:	d90d      	bls.n	2a08a <update_job_execution.constprop.0+0x5a>
   2a06e:	2363      	movs	r3, #99	; 0x63
   2a070:	4a18      	ldr	r2, [pc, #96]	; (2a0d4 <update_job_execution.constprop.0+0xa4>)
   2a072:	491c      	ldr	r1, [pc, #112]	; (2a0e4 <update_job_execution.constprop.0+0xb4>)
   2a074:	4819      	ldr	r0, [pc, #100]	; (2a0dc <update_job_execution.constprop.0+0xac>)
   2a076:	f01c faf1 	bl	4665c <printk>
   2a07a:	1c61      	adds	r1, r4, #1
   2a07c:	481a      	ldr	r0, [pc, #104]	; (2a0e8 <update_job_execution.constprop.0+0xb8>)
   2a07e:	f01c faed 	bl	4665c <printk>
   2a082:	2163      	movs	r1, #99	; 0x63
   2a084:	4813      	ldr	r0, [pc, #76]	; (2a0d4 <update_job_execution.constprop.0+0xa4>)
   2a086:	f01c faf6 	bl	46676 <assert_post_action>
		"Not enough space for status, need %d bytes\n", ret+1);

	ret =  aws_jobs_update_job_execution(client, job_id, state,
   2a08a:	4b18      	ldr	r3, [pc, #96]	; (2a0ec <update_job_execution.constprop.0+0xbc>)
   2a08c:	4632      	mov	r2, r6
   2a08e:	9302      	str	r3, [sp, #8]
   2a090:	4b17      	ldr	r3, [pc, #92]	; (2a0f0 <update_job_execution.constprop.0+0xc0>)
   2a092:	4918      	ldr	r1, [pc, #96]	; (2a0f4 <update_job_execution.constprop.0+0xc4>)
   2a094:	e9cd 7300 	strd	r7, r3, [sp]
   2a098:	4628      	mov	r0, r5
   2a09a:	ab04      	add	r3, sp, #16
   2a09c:	f7ff ff4c 	bl	29f38 <aws_jobs_update_job_execution>
					     status_details, version_number,
					     client_token, update_topic);

	if (ret < 0) {
   2a0a0:	1e04      	subs	r4, r0, #0
   2a0a2:	da10      	bge.n	2a0c6 <update_job_execution.constprop.0+0x96>
		LOG_ERR("aws_jobs_update_job_execution failed: %d", ret);
   2a0a4:	2301      	movs	r3, #1
   2a0a6:	f04f 0000 	mov.w	r0, #0
   2a0aa:	4a13      	ldr	r2, [pc, #76]	; (2a0f8 <update_job_execution.constprop.0+0xc8>)
   2a0ac:	f363 0002 	bfi	r0, r3, #0, #3
   2a0b0:	4b12      	ldr	r3, [pc, #72]	; (2a0fc <update_job_execution.constprop.0+0xcc>)
   2a0b2:	f36f 00c5 	bfc	r0, #3, #3
   2a0b6:	1a9b      	subs	r3, r3, r2
   2a0b8:	08db      	lsrs	r3, r3, #3
   2a0ba:	f363 108f 	bfi	r0, r3, #6, #10
   2a0be:	4622      	mov	r2, r4
   2a0c0:	490f      	ldr	r1, [pc, #60]	; (2a100 <update_job_execution.constprop.0+0xd0>)
   2a0c2:	f01c faee 	bl	466a2 <log_string_sync>
	}

	return ret;
}
   2a0c6:	4620      	mov	r0, r4
   2a0c8:	b00f      	add	sp, #60	; 0x3c
   2a0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a0cc:	00049a0c 	.word	0x00049a0c
   2a0d0:	0004efd8 	.word	0x0004efd8
   2a0d4:	0004efeb 	.word	0x0004efeb
   2a0d8:	0004f023 	.word	0x0004f023
   2a0dc:	0004b5bf 	.word	0x0004b5bf
   2a0e0:	0004f02c 	.word	0x0004f02c
   2a0e4:	0004f04a 	.word	0x0004f04a
   2a0e8:	0004f095 	.word	0x0004f095
   2a0ec:	2002c269 	.word	0x2002c269
   2a0f0:	00050483 	.word	0x00050483
   2a0f4:	2002bc4d 	.word	0x2002bc4d
   2a0f8:	00049018 	.word	0x00049018
   2a0fc:	00049030 	.word	0x00049030
   2a100:	0004f0c3 	.word	0x0004f0c3

0002a104 <http_fota_handler>:
	}
	return 0;
}

static void http_fota_handler(enum fota_download_evt_id evt)
{
   2a104:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(c != NULL);
   2a106:	4d26      	ldr	r5, [pc, #152]	; (2a1a0 <http_fota_handler+0x9c>)
{
   2a108:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(c != NULL);
   2a10a:	682b      	ldr	r3, [r5, #0]
   2a10c:	b95b      	cbnz	r3, 2a126 <http_fota_handler+0x22>
   2a10e:	4925      	ldr	r1, [pc, #148]	; (2a1a4 <http_fota_handler+0xa0>)
   2a110:	4825      	ldr	r0, [pc, #148]	; (2a1a8 <http_fota_handler+0xa4>)
   2a112:	f240 1355 	movw	r3, #341	; 0x155
   2a116:	4a25      	ldr	r2, [pc, #148]	; (2a1ac <http_fota_handler+0xa8>)
   2a118:	f01c faa0 	bl	4665c <printk>
   2a11c:	f240 1155 	movw	r1, #341	; 0x155
   2a120:	4822      	ldr	r0, [pc, #136]	; (2a1ac <http_fota_handler+0xa8>)
   2a122:	f01c faa8 	bl	46676 <assert_post_action>

	int err = 0;

	switch (evt) {
   2a126:	b114      	cbz	r4, 2a12e <http_fota_handler+0x2a>
   2a128:	2c01      	cmp	r4, #1
   2a12a:	d021      	beq.n	2a170 <http_fota_handler+0x6c>
				     fota_state, doc_version_number, "");
		callback(AWS_FOTA_EVT_ERROR);
		break;
	}

}
   2a12c:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("FOTA download completed evt recived");
   2a12e:	2303      	movs	r3, #3
   2a130:	f04f 0000 	mov.w	r0, #0
   2a134:	4a1e      	ldr	r2, [pc, #120]	; (2a1b0 <http_fota_handler+0xac>)
   2a136:	f363 0002 	bfi	r0, r3, #0, #3
   2a13a:	4b1e      	ldr	r3, [pc, #120]	; (2a1b4 <http_fota_handler+0xb0>)
   2a13c:	f364 00c5 	bfi	r0, r4, #3, #3
   2a140:	1a9b      	subs	r3, r3, r2
   2a142:	08db      	lsrs	r3, r3, #3
   2a144:	f363 108f 	bfi	r0, r3, #6, #10
   2a148:	491b      	ldr	r1, [pc, #108]	; (2a1b8 <http_fota_handler+0xb4>)
   2a14a:	f01c faaa 	bl	466a2 <log_string_sync>
		fota_state = APPLY_UPDATE;
   2a14e:	2202      	movs	r2, #2
   2a150:	4b1a      	ldr	r3, [pc, #104]	; (2a1bc <http_fota_handler+0xb8>)
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS,
   2a152:	2101      	movs	r1, #1
		fota_state = APPLY_UPDATE;
   2a154:	701a      	strb	r2, [r3, #0]
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS,
   2a156:	4b1a      	ldr	r3, [pc, #104]	; (2a1c0 <http_fota_handler+0xbc>)
   2a158:	6828      	ldr	r0, [r5, #0]
   2a15a:	681b      	ldr	r3, [r3, #0]
   2a15c:	f7ff ff68 	bl	2a030 <update_job_execution.constprop.0>
		if (err != 0) {
   2a160:	2800      	cmp	r0, #0
   2a162:	d0e3      	beq.n	2a12c <http_fota_handler+0x28>
}
   2a164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			callback(AWS_FOTA_EVT_ERROR);
   2a168:	4b16      	ldr	r3, [pc, #88]	; (2a1c4 <http_fota_handler+0xc0>)
   2a16a:	2001      	movs	r0, #1
   2a16c:	681b      	ldr	r3, [r3, #0]
   2a16e:	4718      	bx	r3
		LOG_ERR("FOTA download failed, report back");
   2a170:	f04f 0000 	mov.w	r0, #0
   2a174:	4a0e      	ldr	r2, [pc, #56]	; (2a1b0 <http_fota_handler+0xac>)
   2a176:	4b0f      	ldr	r3, [pc, #60]	; (2a1b4 <http_fota_handler+0xb0>)
   2a178:	f364 0002 	bfi	r0, r4, #0, #3
   2a17c:	1a9b      	subs	r3, r3, r2
   2a17e:	08db      	lsrs	r3, r3, #3
   2a180:	f36f 00c5 	bfc	r0, #3, #3
   2a184:	f363 108f 	bfi	r0, r3, #6, #10
   2a188:	490f      	ldr	r1, [pc, #60]	; (2a1c8 <http_fota_handler+0xc4>)
   2a18a:	f01c fa8a 	bl	466a2 <log_string_sync>
		(void) update_job_execution(c, job_id, AWS_JOBS_FAILED,
   2a18e:	4b0c      	ldr	r3, [pc, #48]	; (2a1c0 <http_fota_handler+0xbc>)
   2a190:	4a0a      	ldr	r2, [pc, #40]	; (2a1bc <http_fota_handler+0xb8>)
   2a192:	681b      	ldr	r3, [r3, #0]
   2a194:	7812      	ldrb	r2, [r2, #0]
   2a196:	2103      	movs	r1, #3
   2a198:	6828      	ldr	r0, [r5, #0]
   2a19a:	f7ff ff49 	bl	2a030 <update_job_execution.constprop.0>
   2a19e:	e7e1      	b.n	2a164 <http_fota_handler+0x60>
   2a1a0:	2002476c 	.word	0x2002476c
   2a1a4:	0004ef54 	.word	0x0004ef54
   2a1a8:	0004b5bf 	.word	0x0004b5bf
   2a1ac:	0004efeb 	.word	0x0004efeb
   2a1b0:	00049018 	.word	0x00049018
   2a1b4:	00049030 	.word	0x00049030
   2a1b8:	0004ef65 	.word	0x0004ef65
   2a1bc:	2002bab8 	.word	0x2002bab8
   2a1c0:	20031bec 	.word	0x20031bec
   2a1c4:	20024770 	.word	0x20024770
   2a1c8:	0004ef89 	.word	0x0004ef89

0002a1cc <get_published_payload.constprop.1>:
	if (length > sizeof(payload_buf)) {
   2a1cc:	f240 5346 	movw	r3, #1350	; 0x546
static int get_published_payload(struct mqtt_client *client, u8_t *write_buf,
   2a1d0:	b570      	push	{r4, r5, r6, lr}
	u8_t *end = buf + length;
   2a1d2:	4c0d      	ldr	r4, [pc, #52]	; (2a208 <get_published_payload.constprop.1+0x3c>)
	if (length > sizeof(payload_buf)) {
   2a1d4:	4299      	cmp	r1, r3
static int get_published_payload(struct mqtt_client *client, u8_t *write_buf,
   2a1d6:	4606      	mov	r6, r0
	u8_t *end = buf + length;
   2a1d8:	eb04 0501 	add.w	r5, r4, r1
	if (length > sizeof(payload_buf)) {
   2a1dc:	d80d      	bhi.n	2a1fa <get_published_payload.constprop.1+0x2e>
	while (buf < end) {
   2a1de:	42a5      	cmp	r5, r4
   2a1e0:	d801      	bhi.n	2a1e6 <get_published_payload.constprop.1+0x1a>
	return 0;
   2a1e2:	2000      	movs	r0, #0
}
   2a1e4:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buf, end - buf);
   2a1e6:	1b2a      	subs	r2, r5, r4
   2a1e8:	4621      	mov	r1, r4
   2a1ea:	4630      	mov	r0, r6
   2a1ec:	f01d f94c 	bl	47488 <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   2a1f0:	2800      	cmp	r0, #0
   2a1f2:	dbf7      	blt.n	2a1e4 <get_published_payload.constprop.1+0x18>
		} else if (ret == 0) {
   2a1f4:	d004      	beq.n	2a200 <get_published_payload.constprop.1+0x34>
		buf += ret;
   2a1f6:	4404      	add	r4, r0
   2a1f8:	e7f1      	b.n	2a1de <get_published_payload.constprop.1+0x12>
		return -EMSGSIZE;
   2a1fa:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2a1fe:	e7f1      	b.n	2a1e4 <get_published_payload.constprop.1+0x18>
			return -EIO;
   2a200:	f06f 0004 	mvn.w	r0, #4
   2a204:	e7ee      	b.n	2a1e4 <get_published_payload.constprop.1+0x18>
   2a206:	bf00      	nop
   2a208:	2002bd23 	.word	0x2002bd23

0002a20c <aws_fota_mqtt_evt_handler>:
{
   2a20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (evt->type) {
   2a210:	780b      	ldrb	r3, [r1, #0]
{
   2a212:	b087      	sub	sp, #28
   2a214:	4605      	mov	r5, r0
   2a216:	460e      	mov	r6, r1
	switch (evt->type) {
   2a218:	2b07      	cmp	r3, #7
   2a21a:	f200 81f4 	bhi.w	2a606 <aws_fota_mqtt_evt_handler+0x3fa>
   2a21e:	e8df f013 	tbh	[pc, r3, lsl #1]
   2a222:	0008      	.short	0x0008
   2a224:	003c01f2 	.word	0x003c01f2
   2a228:	01f20201 	.word	0x01f20201
   2a22c:	01f201f2 	.word	0x01f201f2
   2a230:	0213      	.short	0x0213
		if (evt->result != 0) {
   2a232:	69cc      	ldr	r4, [r1, #28]
   2a234:	2c00      	cmp	r4, #0
   2a236:	f040 81e6 	bne.w	2a606 <aws_fota_mqtt_evt_handler+0x3fa>
		err = aws_jobs_subscribe_topic_notify_next(client,
   2a23a:	49c6      	ldr	r1, [pc, #792]	; (2a554 <aws_fota_mqtt_evt_handler+0x348>)
   2a23c:	f7ff fe44 	bl	29ec8 <aws_jobs_subscribe_topic_notify_next>
		if (err) {
   2a240:	4607      	mov	r7, r0
   2a242:	b198      	cbz	r0, 2a26c <aws_fota_mqtt_evt_handler+0x60>
			LOG_ERR("Unable to subscribe to notify-next topic");
   2a244:	2301      	movs	r3, #1
   2a246:	f04f 0000 	mov.w	r0, #0
   2a24a:	4ac3      	ldr	r2, [pc, #780]	; (2a558 <aws_fota_mqtt_evt_handler+0x34c>)
   2a24c:	f363 0002 	bfi	r0, r3, #0, #3
   2a250:	4bc2      	ldr	r3, [pc, #776]	; (2a55c <aws_fota_mqtt_evt_handler+0x350>)
   2a252:	f364 00c5 	bfi	r0, r4, #3, #3
   2a256:	1a9b      	subs	r3, r3, r2
   2a258:	08db      	lsrs	r3, r3, #3
   2a25a:	49c1      	ldr	r1, [pc, #772]	; (2a560 <aws_fota_mqtt_evt_handler+0x354>)
   2a25c:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Unable to subscribe to jobs/$next/get");
   2a260:	f01c fa1f 	bl	466a2 <log_string_sync>
}
   2a264:	4638      	mov	r0, r7
   2a266:	b007      	add	sp, #28
   2a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = aws_jobs_subscribe_topic_get(client, "$next", get_topic);
   2a26c:	4abd      	ldr	r2, [pc, #756]	; (2a564 <aws_fota_mqtt_evt_handler+0x358>)
   2a26e:	49be      	ldr	r1, [pc, #760]	; (2a568 <aws_fota_mqtt_evt_handler+0x35c>)
   2a270:	4628      	mov	r0, r5
   2a272:	f7ff fe45 	bl	29f00 <aws_jobs_subscribe_topic_get>
		if (err) {
   2a276:	4607      	mov	r7, r0
   2a278:	2800      	cmp	r0, #0
   2a27a:	d0f3      	beq.n	2a264 <aws_fota_mqtt_evt_handler+0x58>
			LOG_ERR("Unable to subscribe to jobs/$next/get");
   2a27c:	2301      	movs	r3, #1
   2a27e:	f04f 0000 	mov.w	r0, #0
   2a282:	4ab5      	ldr	r2, [pc, #724]	; (2a558 <aws_fota_mqtt_evt_handler+0x34c>)
   2a284:	f363 0002 	bfi	r0, r3, #0, #3
   2a288:	4bb4      	ldr	r3, [pc, #720]	; (2a55c <aws_fota_mqtt_evt_handler+0x350>)
   2a28a:	f364 00c5 	bfi	r0, r4, #3, #3
   2a28e:	1a9b      	subs	r3, r3, r2
   2a290:	08db      	lsrs	r3, r3, #3
   2a292:	f363 108f 	bfi	r0, r3, #6, #10
   2a296:	49b5      	ldr	r1, [pc, #724]	; (2a56c <aws_fota_mqtt_evt_handler+0x360>)
   2a298:	e7e2      	b.n	2a260 <aws_fota_mqtt_evt_handler+0x54>
	LOG_INF("Received topic: %s", log_strdup(topic));
   2a29a:	f04f 0803 	mov.w	r8, #3
		err = aws_fota_on_publish_evt(client,
   2a29e:	e9d1 7a01 	ldrd	r7, sl, [r1, #4]
	LOG_INF("Received topic: %s", log_strdup(topic));
   2a2a2:	f04f 0b00 	mov.w	fp, #0
   2a2a6:	4bac      	ldr	r3, [pc, #688]	; (2a558 <aws_fota_mqtt_evt_handler+0x34c>)
   2a2a8:	4cac      	ldr	r4, [pc, #688]	; (2a55c <aws_fota_mqtt_evt_handler+0x350>)
   2a2aa:	4638      	mov	r0, r7
   2a2ac:	1ae4      	subs	r4, r4, r3
		err = aws_fota_on_publish_evt(client,
   2a2ae:	f8d1 9014 	ldr.w	r9, [r1, #20]
	LOG_INF("Received topic: %s", log_strdup(topic));
   2a2b2:	f01c fa08 	bl	466c6 <log_strdup>
   2a2b6:	f368 0b02 	bfi	fp, r8, #0, #3
   2a2ba:	f36f 0bc5 	bfc	fp, #3, #3
   2a2be:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2a2c2:	f364 1b8f 	bfi	fp, r4, #6, #10
   2a2c6:	4602      	mov	r2, r0
   2a2c8:	49a9      	ldr	r1, [pc, #676]	; (2a570 <aws_fota_mqtt_evt_handler+0x364>)
   2a2ca:	4658      	mov	r0, fp
   2a2cc:	f01c f9e9 	bl	466a2 <log_string_sync>
	bool is_get_next_topic = aws_jobs_cmp(get_topic, topic, topic_len, "");
   2a2d0:	4ba8      	ldr	r3, [pc, #672]	; (2a574 <aws_fota_mqtt_evt_handler+0x368>)
   2a2d2:	4652      	mov	r2, sl
   2a2d4:	4639      	mov	r1, r7
   2a2d6:	48a3      	ldr	r0, [pc, #652]	; (2a564 <aws_fota_mqtt_evt_handler+0x358>)
   2a2d8:	f01e fada 	bl	48890 <aws_jobs_cmp>
	bool is_notify_next_topic = aws_jobs_cmp(notify_next_topic, topic,
   2a2dc:	4ba5      	ldr	r3, [pc, #660]	; (2a574 <aws_fota_mqtt_evt_handler+0x368>)
	bool is_get_next_topic = aws_jobs_cmp(get_topic, topic, topic_len, "");
   2a2de:	4683      	mov	fp, r0
	bool is_notify_next_topic = aws_jobs_cmp(notify_next_topic, topic,
   2a2e0:	4652      	mov	r2, sl
   2a2e2:	4639      	mov	r1, r7
   2a2e4:	489b      	ldr	r0, [pc, #620]	; (2a554 <aws_fota_mqtt_evt_handler+0x348>)
   2a2e6:	f01e fad3 	bl	48890 <aws_jobs_cmp>
	if (is_notify_next_topic || is_get_next_topic) {
   2a2ea:	b910      	cbnz	r0, 2a2f2 <aws_fota_mqtt_evt_handler+0xe6>
   2a2ec:	f1bb 0f00 	cmp.w	fp, #0
   2a2f0:	d06c      	beq.n	2a3cc <aws_fota_mqtt_evt_handler+0x1c0>
		err = get_published_payload(client, payload_buf, payload_len);
   2a2f2:	4649      	mov	r1, r9
   2a2f4:	4628      	mov	r0, r5
   2a2f6:	f7ff ff69 	bl	2a1cc <get_published_payload.constprop.1>
		if (err) {
   2a2fa:	4607      	mov	r7, r0
   2a2fc:	b158      	cbz	r0, 2a316 <aws_fota_mqtt_evt_handler+0x10a>
			LOG_ERR("Error when getting the payload: %d", err);
   2a2fe:	f04f 0000 	mov.w	r0, #0
   2a302:	2301      	movs	r3, #1
   2a304:	f363 0002 	bfi	r0, r3, #0, #3
   2a308:	f36f 00c5 	bfc	r0, #3, #3
			LOG_ERR("Error when getting the payload: %d", err);
   2a30c:	f364 108f 	bfi	r0, r4, #6, #10
   2a310:	463a      	mov	r2, r7
   2a312:	4999      	ldr	r1, [pc, #612]	; (2a578 <aws_fota_mqtt_evt_handler+0x36c>)
   2a314:	e041      	b.n	2a39a <aws_fota_mqtt_evt_handler+0x18e>
		err = aws_fota_parse_notify_next_document(payload_buf,
   2a316:	4b99      	ldr	r3, [pc, #612]	; (2a57c <aws_fota_mqtt_evt_handler+0x370>)
   2a318:	4a99      	ldr	r2, [pc, #612]	; (2a580 <aws_fota_mqtt_evt_handler+0x374>)
   2a31a:	9300      	str	r3, [sp, #0]
   2a31c:	4649      	mov	r1, r9
   2a31e:	4b99      	ldr	r3, [pc, #612]	; (2a584 <aws_fota_mqtt_evt_handler+0x378>)
   2a320:	4899      	ldr	r0, [pc, #612]	; (2a588 <aws_fota_mqtt_evt_handler+0x37c>)
   2a322:	f000 fa2f 	bl	2a784 <aws_fota_parse_notify_next_document>
		if (err < 0) {
   2a326:	1e07      	subs	r7, r0, #0
   2a328:	da0d      	bge.n	2a346 <aws_fota_mqtt_evt_handler+0x13a>
			LOG_ERR("Error when parsing the json: %d", err);
   2a32a:	2301      	movs	r3, #1
   2a32c:	f04f 0000 	mov.w	r0, #0
   2a330:	f363 0002 	bfi	r0, r3, #0, #3
   2a334:	f36f 00c5 	bfc	r0, #3, #3
   2a338:	f364 108f 	bfi	r0, r4, #6, #10
   2a33c:	463a      	mov	r2, r7
   2a33e:	4993      	ldr	r1, [pc, #588]	; (2a58c <aws_fota_mqtt_evt_handler+0x380>)
   2a340:	f01c f9af 	bl	466a2 <log_string_sync>
   2a344:	e78e      	b.n	2a264 <aws_fota_mqtt_evt_handler+0x58>
		} else  if (err == 1) {
   2a346:	2f01      	cmp	r7, #1
   2a348:	d116      	bne.n	2a378 <aws_fota_mqtt_evt_handler+0x16c>
			LOG_INF("Got only one field: %s",
   2a34a:	2303      	movs	r3, #3
   2a34c:	f04f 0500 	mov.w	r5, #0
   2a350:	488d      	ldr	r0, [pc, #564]	; (2a588 <aws_fota_mqtt_evt_handler+0x37c>)
   2a352:	f363 0502 	bfi	r5, r3, #0, #3
   2a356:	f01c f9b6 	bl	466c6 <log_strdup>
   2a35a:	f36f 05c5 	bfc	r5, #3, #3
   2a35e:	f364 158f 	bfi	r5, r4, #6, #10
   2a362:	4602      	mov	r2, r0
   2a364:	498a      	ldr	r1, [pc, #552]	; (2a590 <aws_fota_mqtt_evt_handler+0x384>)
   2a366:	4628      	mov	r0, r5
   2a368:	f01c f99b 	bl	466a2 <log_string_sync>
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2a36c:	7b33      	ldrb	r3, [r6, #12]
   2a36e:	2b01      	cmp	r3, #1
   2a370:	f000 814b 	beq.w	2a60a <aws_fota_mqtt_evt_handler+0x3fe>
		return 1;
   2a374:	2701      	movs	r7, #1
   2a376:	e775      	b.n	2a264 <aws_fota_mqtt_evt_handler+0x58>
		err = aws_jobs_unsubscribe_topic_notify_next(client,
   2a378:	4976      	ldr	r1, [pc, #472]	; (2a554 <aws_fota_mqtt_evt_handler+0x348>)
   2a37a:	4628      	mov	r0, r5
   2a37c:	f7ff fdb2 	bl	29ee4 <aws_jobs_unsubscribe_topic_notify_next>
		if (err) {
   2a380:	4607      	mov	r7, r0
   2a382:	b168      	cbz	r0, 2a3a0 <aws_fota_mqtt_evt_handler+0x194>
			LOG_ERR("Error when unsubscribing notify_next_topic: "
   2a384:	f04f 0000 	mov.w	r0, #0
   2a388:	2301      	movs	r3, #1
   2a38a:	463a      	mov	r2, r7
   2a38c:	f363 0002 	bfi	r0, r3, #0, #3
   2a390:	f36f 00c5 	bfc	r0, #3, #3
   2a394:	497f      	ldr	r1, [pc, #508]	; (2a594 <aws_fota_mqtt_evt_handler+0x388>)
   2a396:	f364 108f 	bfi	r0, r4, #6, #10
			LOG_ERR("Error when getting the payload: %d", err);
   2a39a:	f01c f982 	bl	466a2 <log_string_sync>
   2a39e:	e08d      	b.n	2a4bc <aws_fota_mqtt_evt_handler+0x2b0>
		err = aws_jobs_subscribe_topic_update(client, job_id,
   2a3a0:	4a7d      	ldr	r2, [pc, #500]	; (2a598 <aws_fota_mqtt_evt_handler+0x38c>)
   2a3a2:	4977      	ldr	r1, [pc, #476]	; (2a580 <aws_fota_mqtt_evt_handler+0x374>)
   2a3a4:	4628      	mov	r0, r5
   2a3a6:	f7ff fdb9 	bl	29f1c <aws_jobs_subscribe_topic_update>
   2a3aa:	2301      	movs	r3, #1
		if (err) {
   2a3ac:	4607      	mov	r7, r0
   2a3ae:	b150      	cbz	r0, 2a3c6 <aws_fota_mqtt_evt_handler+0x1ba>
			LOG_ERR("Error when subscribing job_id_update: "
   2a3b0:	f04f 0000 	mov.w	r0, #0
   2a3b4:	f363 0002 	bfi	r0, r3, #0, #3
   2a3b8:	f36f 00c5 	bfc	r0, #3, #3
   2a3bc:	f364 108f 	bfi	r0, r4, #6, #10
   2a3c0:	463a      	mov	r2, r7
   2a3c2:	4976      	ldr	r1, [pc, #472]	; (2a59c <aws_fota_mqtt_evt_handler+0x390>)
   2a3c4:	e7e9      	b.n	2a39a <aws_fota_mqtt_evt_handler+0x18e>
		fota_state = DOWNLOAD_FIRMWARE;
   2a3c6:	4a76      	ldr	r2, [pc, #472]	; (2a5a0 <aws_fota_mqtt_evt_handler+0x394>)
   2a3c8:	7013      	strb	r3, [r2, #0]
   2a3ca:	e7cf      	b.n	2a36c <aws_fota_mqtt_evt_handler+0x160>
	} else if (aws_jobs_cmp(update_topic, topic, topic_len, "accepted")) {
   2a3cc:	4b75      	ldr	r3, [pc, #468]	; (2a5a4 <aws_fota_mqtt_evt_handler+0x398>)
   2a3ce:	4652      	mov	r2, sl
   2a3d0:	4639      	mov	r1, r7
   2a3d2:	4871      	ldr	r0, [pc, #452]	; (2a598 <aws_fota_mqtt_evt_handler+0x38c>)
   2a3d4:	f01e fa5c 	bl	48890 <aws_jobs_cmp>
   2a3d8:	9002      	str	r0, [sp, #8]
   2a3da:	2800      	cmp	r0, #0
   2a3dc:	f000 8094 	beq.w	2a508 <aws_fota_mqtt_evt_handler+0x2fc>
		LOG_DBG("Job document update was accepted");
   2a3e0:	2304      	movs	r3, #4
   2a3e2:	f04f 0000 	mov.w	r0, #0
   2a3e6:	f363 0002 	bfi	r0, r3, #0, #3
   2a3ea:	f36b 00c5 	bfi	r0, fp, #3, #3
   2a3ee:	f364 108f 	bfi	r0, r4, #6, #10
   2a3f2:	4a6d      	ldr	r2, [pc, #436]	; (2a5a8 <aws_fota_mqtt_evt_handler+0x39c>)
   2a3f4:	496d      	ldr	r1, [pc, #436]	; (2a5ac <aws_fota_mqtt_evt_handler+0x3a0>)
   2a3f6:	f01c f954 	bl	466a2 <log_string_sync>
		err = get_published_payload(client, payload_buf, payload_len);
   2a3fa:	4649      	mov	r1, r9
   2a3fc:	4628      	mov	r0, r5
   2a3fe:	f7ff fee5 	bl	2a1cc <get_published_payload.constprop.1>
		if (err) {
   2a402:	4607      	mov	r7, r0
   2a404:	2800      	cmp	r0, #0
   2a406:	d159      	bne.n	2a4bc <aws_fota_mqtt_evt_handler+0x2b0>
		doc_version_number++;
   2a408:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 2a5d4 <aws_fota_mqtt_evt_handler+0x3c8>
		if (fota_state == DOWNLOAD_FIRMWARE) {
   2a40c:	4a64      	ldr	r2, [pc, #400]	; (2a5a0 <aws_fota_mqtt_evt_handler+0x394>)
		doc_version_number++;
   2a40e:	f8da 3000 	ldr.w	r3, [sl]
		if (fota_state == DOWNLOAD_FIRMWARE) {
   2a412:	f892 9000 	ldrb.w	r9, [r2]
		doc_version_number++;
   2a416:	3301      	adds	r3, #1
		if (fota_state == DOWNLOAD_FIRMWARE) {
   2a418:	f1b9 0f01 	cmp.w	r9, #1
		doc_version_number++;
   2a41c:	f8ca 3000 	str.w	r3, [sl]
   2a420:	4b63      	ldr	r3, [pc, #396]	; (2a5b0 <aws_fota_mqtt_evt_handler+0x3a4>)
		if (fota_state == DOWNLOAD_FIRMWARE) {
   2a422:	d128      	bne.n	2a476 <aws_fota_mqtt_evt_handler+0x26a>
			LOG_INF("Start downloading firmware from %s%s",
   2a424:	f04f 0500 	mov.w	r5, #0
   2a428:	f368 0502 	bfi	r5, r8, #0, #3
   2a42c:	f360 05c5 	bfi	r5, r0, #3, #3
   2a430:	4854      	ldr	r0, [pc, #336]	; (2a584 <aws_fota_mqtt_evt_handler+0x378>)
			execution_state = AWS_JOBS_IN_PROGRESS;
   2a432:	f883 9000 	strb.w	r9, [r3]
			LOG_INF("Start downloading firmware from %s%s",
   2a436:	f01c f946 	bl	466c6 <log_strdup>
   2a43a:	4607      	mov	r7, r0
   2a43c:	484f      	ldr	r0, [pc, #316]	; (2a57c <aws_fota_mqtt_evt_handler+0x370>)
   2a43e:	f01c f942 	bl	466c6 <log_strdup>
   2a442:	f364 158f 	bfi	r5, r4, #6, #10
   2a446:	4603      	mov	r3, r0
   2a448:	463a      	mov	r2, r7
   2a44a:	495a      	ldr	r1, [pc, #360]	; (2a5b4 <aws_fota_mqtt_evt_handler+0x3a8>)
   2a44c:	4628      	mov	r0, r5
   2a44e:	f01c f928 	bl	466a2 <log_string_sync>
			err = fota_download_start(hostname, file_path);
   2a452:	494a      	ldr	r1, [pc, #296]	; (2a57c <aws_fota_mqtt_evt_handler+0x370>)
   2a454:	484b      	ldr	r0, [pc, #300]	; (2a584 <aws_fota_mqtt_evt_handler+0x378>)
   2a456:	f7ff fbc1 	bl	29bdc <fota_download_start>
			if (err) {
   2a45a:	4607      	mov	r7, r0
   2a45c:	2800      	cmp	r0, #0
   2a45e:	d085      	beq.n	2a36c <aws_fota_mqtt_evt_handler+0x160>
				LOG_ERR("Error when trying to start firmware"
   2a460:	f04f 0000 	mov.w	r0, #0
   2a464:	f369 0002 	bfi	r0, r9, #0, #3
   2a468:	f36b 00c5 	bfi	r0, fp, #3, #3
   2a46c:	f364 108f 	bfi	r0, r4, #6, #10
   2a470:	463a      	mov	r2, r7
   2a472:	4951      	ldr	r1, [pc, #324]	; (2a5b8 <aws_fota_mqtt_evt_handler+0x3ac>)
   2a474:	e791      	b.n	2a39a <aws_fota_mqtt_evt_handler+0x18e>
		} else if (execution_state == AWS_JOBS_IN_PROGRESS &&
   2a476:	7819      	ldrb	r1, [r3, #0]
   2a478:	2901      	cmp	r1, #1
   2a47a:	d123      	bne.n	2a4c4 <aws_fota_mqtt_evt_handler+0x2b8>
   2a47c:	f1b9 0f02 	cmp.w	r9, #2
   2a480:	f47f af74 	bne.w	2a36c <aws_fota_mqtt_evt_handler+0x160>
			LOG_INF("Firmware download completed");
   2a484:	f04f 0000 	mov.w	r0, #0
   2a488:	f368 0002 	bfi	r0, r8, #0, #3
   2a48c:	f367 00c5 	bfi	r0, r7, #3, #3
   2a490:	f364 108f 	bfi	r0, r4, #6, #10
   2a494:	4949      	ldr	r1, [pc, #292]	; (2a5bc <aws_fota_mqtt_evt_handler+0x3b0>)
   2a496:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2a49a:	f01c f902 	bl	466a2 <log_string_sync>
			execution_state = AWS_JOBS_SUCCEEDED;
   2a49e:	9b03      	ldr	r3, [sp, #12]
			err = update_job_execution(client, job_id,
   2a4a0:	9a02      	ldr	r2, [sp, #8]
			execution_state = AWS_JOBS_SUCCEEDED;
   2a4a2:	f883 9000 	strb.w	r9, [r3]
			err = update_job_execution(client, job_id,
   2a4a6:	7812      	ldrb	r2, [r2, #0]
   2a4a8:	f8da 3000 	ldr.w	r3, [sl]
   2a4ac:	4649      	mov	r1, r9
   2a4ae:	4628      	mov	r0, r5
   2a4b0:	f7ff fdbe 	bl	2a030 <update_job_execution.constprop.0>
			if (err) {
   2a4b4:	4607      	mov	r7, r0
   2a4b6:	2800      	cmp	r0, #0
   2a4b8:	f43f af58 	beq.w	2a36c <aws_fota_mqtt_evt_handler+0x160>
		if (err < 1) {
   2a4bc:	2f00      	cmp	r7, #0
   2a4be:	f73f af55 	bgt.w	2a36c <aws_fota_mqtt_evt_handler+0x160>
   2a4c2:	e6cf      	b.n	2a264 <aws_fota_mqtt_evt_handler+0x58>
		} else if (execution_state == AWS_JOBS_SUCCEEDED &&
   2a4c4:	2902      	cmp	r1, #2
   2a4c6:	f47f af51 	bne.w	2a36c <aws_fota_mqtt_evt_handler+0x160>
   2a4ca:	f1b9 0f02 	cmp.w	r9, #2
   2a4ce:	f47f af4d 	bne.w	2a36c <aws_fota_mqtt_evt_handler+0x160>
			LOG_INF("Job document updated with SUCCEDED");
   2a4d2:	f04f 0000 	mov.w	r0, #0
   2a4d6:	f368 0002 	bfi	r0, r8, #0, #3
   2a4da:	f367 00c5 	bfi	r0, r7, #3, #3
   2a4de:	f364 108f 	bfi	r0, r4, #6, #10
   2a4e2:	4937      	ldr	r1, [pc, #220]	; (2a5c0 <aws_fota_mqtt_evt_handler+0x3b4>)
   2a4e4:	f01c f8dd 	bl	466a2 <log_string_sync>
			LOG_INF("Ready to reboot");
   2a4e8:	f04f 0000 	mov.w	r0, #0
   2a4ec:	f368 0002 	bfi	r0, r8, #0, #3
   2a4f0:	f367 00c5 	bfi	r0, r7, #3, #3
   2a4f4:	f364 108f 	bfi	r0, r4, #6, #10
   2a4f8:	4932      	ldr	r1, [pc, #200]	; (2a5c4 <aws_fota_mqtt_evt_handler+0x3b8>)
   2a4fa:	f01c f8d2 	bl	466a2 <log_string_sync>
			callback(AWS_FOTA_EVT_DONE);
   2a4fe:	4b32      	ldr	r3, [pc, #200]	; (2a5c8 <aws_fota_mqtt_evt_handler+0x3bc>)
   2a500:	4638      	mov	r0, r7
   2a502:	681b      	ldr	r3, [r3, #0]
   2a504:	4798      	blx	r3
   2a506:	e731      	b.n	2a36c <aws_fota_mqtt_evt_handler+0x160>
	} else if (aws_jobs_cmp(update_topic, topic, topic_len, "rejected")) {
   2a508:	4b30      	ldr	r3, [pc, #192]	; (2a5cc <aws_fota_mqtt_evt_handler+0x3c0>)
   2a50a:	4652      	mov	r2, sl
   2a50c:	4639      	mov	r1, r7
   2a50e:	4822      	ldr	r0, [pc, #136]	; (2a598 <aws_fota_mqtt_evt_handler+0x38c>)
   2a510:	f01e f9be 	bl	48890 <aws_jobs_cmp>
   2a514:	2800      	cmp	r0, #0
   2a516:	d066      	beq.n	2a5e6 <aws_fota_mqtt_evt_handler+0x3da>
		LOG_ERR("Job document update was rejected");
   2a518:	f04f 0801 	mov.w	r8, #1
   2a51c:	f04f 0000 	mov.w	r0, #0
   2a520:	9b02      	ldr	r3, [sp, #8]
   2a522:	f368 0002 	bfi	r0, r8, #0, #3
   2a526:	f363 00c5 	bfi	r0, r3, #3, #3
   2a52a:	f364 108f 	bfi	r0, r4, #6, #10
   2a52e:	4928      	ldr	r1, [pc, #160]	; (2a5d0 <aws_fota_mqtt_evt_handler+0x3c4>)
   2a530:	f01c f8b7 	bl	466a2 <log_string_sync>
		err = get_published_payload(client, payload_buf, payload_len);
   2a534:	4649      	mov	r1, r9
   2a536:	4628      	mov	r0, r5
   2a538:	f7ff fe48 	bl	2a1cc <get_published_payload.constprop.1>
		if (err) {
   2a53c:	4607      	mov	r7, r0
   2a53e:	2800      	cmp	r0, #0
   2a540:	d04a      	beq.n	2a5d8 <aws_fota_mqtt_evt_handler+0x3cc>
			LOG_ERR("Error when getting the payload: %d", err);
   2a542:	f04f 0000 	mov.w	r0, #0
   2a546:	9b02      	ldr	r3, [sp, #8]
   2a548:	f368 0002 	bfi	r0, r8, #0, #3
   2a54c:	f363 00c5 	bfi	r0, r3, #3, #3
   2a550:	e6dc      	b.n	2a30c <aws_fota_mqtt_evt_handler+0x100>
   2a552:	bf00      	nop
   2a554:	2002bc8e 	.word	0x2002bc8e
   2a558:	00049018 	.word	0x00049018
   2a55c:	00049030 	.word	0x00049030
   2a560:	0004ecce 	.word	0x0004ecce
   2a564:	2002bab9 	.word	0x2002bab9
   2a568:	0004ecf7 	.word	0x0004ecf7
   2a56c:	0004ecfd 	.word	0x0004ecfd
   2a570:	0004ed23 	.word	0x0004ed23
   2a574:	00050483 	.word	0x00050483
   2a578:	0004ed36 	.word	0x0004ed36
   2a57c:	2002b9b9 	.word	0x2002b9b9
   2a580:	2002bc4d 	.word	0x2002bc4d
   2a584:	2002bb4e 	.word	0x2002bb4e
   2a588:	2002bd23 	.word	0x2002bd23
   2a58c:	0004ed59 	.word	0x0004ed59
   2a590:	0004ed79 	.word	0x0004ed79
   2a594:	0004ed90 	.word	0x0004ed90
   2a598:	2002c269 	.word	0x2002c269
   2a59c:	0004edbf 	.word	0x0004edbf
   2a5a0:	2002bab8 	.word	0x2002bab8
   2a5a4:	0004ee04 	.word	0x0004ee04
   2a5a8:	0004ec9a 	.word	0x0004ec9a
   2a5ac:	0004ede8 	.word	0x0004ede8
   2a5b0:	2002b9b8 	.word	0x2002b9b8
   2a5b4:	0004ee0d 	.word	0x0004ee0d
   2a5b8:	0004ee32 	.word	0x0004ee32
   2a5bc:	0004ee62 	.word	0x0004ee62
   2a5c0:	0004ee7e 	.word	0x0004ee7e
   2a5c4:	0004eea1 	.word	0x0004eea1
   2a5c8:	20024770 	.word	0x20024770
   2a5cc:	0004eec9 	.word	0x0004eec9
   2a5d0:	0004eeb1 	.word	0x0004eeb1
   2a5d4:	20031bec 	.word	0x20031bec
		callback(AWS_FOTA_EVT_ERROR);
   2a5d8:	4b3d      	ldr	r3, [pc, #244]	; (2a6d0 <aws_fota_mqtt_evt_handler+0x4c4>)
   2a5da:	4640      	mov	r0, r8
   2a5dc:	681b      	ldr	r3, [r3, #0]
   2a5de:	4798      	blx	r3
		return -EFAULT;
   2a5e0:	f06f 070d 	mvn.w	r7, #13
   2a5e4:	e63e      	b.n	2a264 <aws_fota_mqtt_evt_handler+0x58>
	LOG_INF("Recived an unhandled MQTT publish event on topic: %s",
   2a5e6:	f04f 0500 	mov.w	r5, #0
   2a5ea:	f368 0502 	bfi	r5, r8, #0, #3
   2a5ee:	f360 05c5 	bfi	r5, r0, #3, #3
   2a5f2:	4638      	mov	r0, r7
   2a5f4:	f01c f867 	bl	466c6 <log_strdup>
   2a5f8:	f364 158f 	bfi	r5, r4, #6, #10
   2a5fc:	4602      	mov	r2, r0
   2a5fe:	4628      	mov	r0, r5
   2a600:	4934      	ldr	r1, [pc, #208]	; (2a6d4 <aws_fota_mqtt_evt_handler+0x4c8>)
			LOG_ERR("MQTT PUBACK error %d", evt->result);
   2a602:	f01c f84e 	bl	466a2 <log_string_sync>
			return 0;
   2a606:	2700      	movs	r7, #0
   2a608:	e62c      	b.n	2a264 <aws_fota_mqtt_evt_handler+0x58>
			const struct mqtt_puback_param ack = {
   2a60a:	8b33      	ldrh	r3, [r6, #24]
   2a60c:	a906      	add	r1, sp, #24
   2a60e:	f821 3d04 	strh.w	r3, [r1, #-4]!
			err = mqtt_publish_qos1_ack(c, &ack);
   2a612:	4b31      	ldr	r3, [pc, #196]	; (2a6d8 <aws_fota_mqtt_evt_handler+0x4cc>)
   2a614:	6818      	ldr	r0, [r3, #0]
   2a616:	f01c fe26 	bl	47266 <mqtt_publish_qos1_ack>
		return 1;
   2a61a:	2800      	cmp	r0, #0
   2a61c:	bf14      	ite	ne
   2a61e:	4607      	movne	r7, r0
   2a620:	2701      	moveq	r7, #1
   2a622:	e61f      	b.n	2a264 <aws_fota_mqtt_evt_handler+0x58>
		if (evt->result != 0) {
   2a624:	69ca      	ldr	r2, [r1, #28]
   2a626:	2a00      	cmp	r2, #0
   2a628:	d0ed      	beq.n	2a606 <aws_fota_mqtt_evt_handler+0x3fa>
			LOG_ERR("MQTT PUBACK error %d", evt->result);
   2a62a:	2301      	movs	r3, #1
   2a62c:	f04f 0000 	mov.w	r0, #0
   2a630:	492a      	ldr	r1, [pc, #168]	; (2a6dc <aws_fota_mqtt_evt_handler+0x4d0>)
   2a632:	f363 0002 	bfi	r0, r3, #0, #3
   2a636:	4b2a      	ldr	r3, [pc, #168]	; (2a6e0 <aws_fota_mqtt_evt_handler+0x4d4>)
   2a638:	f36f 00c5 	bfc	r0, #3, #3
   2a63c:	1a5b      	subs	r3, r3, r1
   2a63e:	08db      	lsrs	r3, r3, #3
   2a640:	f363 108f 	bfi	r0, r3, #6, #10
   2a644:	4927      	ldr	r1, [pc, #156]	; (2a6e4 <aws_fota_mqtt_evt_handler+0x4d8>)
   2a646:	e7dc      	b.n	2a602 <aws_fota_mqtt_evt_handler+0x3f6>
		if (evt->result != 0) {
   2a648:	69cf      	ldr	r7, [r1, #28]
   2a64a:	2f00      	cmp	r7, #0
   2a64c:	d1db      	bne.n	2a606 <aws_fota_mqtt_evt_handler+0x3fa>
		if (evt->param.suback.message_id == SUBSCRIBE_NOTIFY_NEXT) {
   2a64e:	888b      	ldrh	r3, [r1, #4]
   2a650:	f5b3 6f04 	cmp.w	r3, #2112	; 0x840
   2a654:	d119      	bne.n	2a68a <aws_fota_mqtt_evt_handler+0x47e>
			LOG_INF("subscribed to notify-next topic");
   2a656:	2303      	movs	r3, #3
   2a658:	f04f 0000 	mov.w	r0, #0
   2a65c:	4a1f      	ldr	r2, [pc, #124]	; (2a6dc <aws_fota_mqtt_evt_handler+0x4d0>)
   2a65e:	f363 0002 	bfi	r0, r3, #0, #3
   2a662:	4b1f      	ldr	r3, [pc, #124]	; (2a6e0 <aws_fota_mqtt_evt_handler+0x4d4>)
   2a664:	f367 00c5 	bfi	r0, r7, #3, #3
   2a668:	1a9b      	subs	r3, r3, r2
   2a66a:	08db      	lsrs	r3, r3, #3
   2a66c:	f363 108f 	bfi	r0, r3, #6, #10
   2a670:	491d      	ldr	r1, [pc, #116]	; (2a6e8 <aws_fota_mqtt_evt_handler+0x4dc>)
   2a672:	f01c f816 	bl	466a2 <log_string_sync>
			err = aws_jobs_get_job_execution(client, "$next",
   2a676:	4a1d      	ldr	r2, [pc, #116]	; (2a6ec <aws_fota_mqtt_evt_handler+0x4e0>)
   2a678:	491d      	ldr	r1, [pc, #116]	; (2a6f0 <aws_fota_mqtt_evt_handler+0x4e4>)
   2a67a:	4628      	mov	r0, r5
   2a67c:	f7ff fcc2 	bl	2a004 <aws_jobs_get_job_execution>
			if (err) {
   2a680:	4607      	mov	r7, r0
   2a682:	2800      	cmp	r0, #0
   2a684:	f43f ae76 	beq.w	2a374 <aws_fota_mqtt_evt_handler+0x168>
   2a688:	e5ec      	b.n	2a264 <aws_fota_mqtt_evt_handler+0x58>
		if (evt->param.suback.message_id == SUBSCRIBE_GET) {
   2a68a:	f640 0241 	movw	r2, #2113	; 0x841
   2a68e:	4293      	cmp	r3, r2
   2a690:	d10e      	bne.n	2a6b0 <aws_fota_mqtt_evt_handler+0x4a4>
			LOG_INF("subscribed to get topic");
   2a692:	2303      	movs	r3, #3
   2a694:	f04f 0000 	mov.w	r0, #0
   2a698:	4a10      	ldr	r2, [pc, #64]	; (2a6dc <aws_fota_mqtt_evt_handler+0x4d0>)
   2a69a:	f363 0002 	bfi	r0, r3, #0, #3
   2a69e:	4b10      	ldr	r3, [pc, #64]	; (2a6e0 <aws_fota_mqtt_evt_handler+0x4d4>)
   2a6a0:	f367 00c5 	bfi	r0, r7, #3, #3
   2a6a4:	1a9b      	subs	r3, r3, r2
   2a6a6:	08db      	lsrs	r3, r3, #3
   2a6a8:	f363 108f 	bfi	r0, r3, #6, #10
   2a6ac:	4911      	ldr	r1, [pc, #68]	; (2a6f4 <aws_fota_mqtt_evt_handler+0x4e8>)
   2a6ae:	e5d7      	b.n	2a260 <aws_fota_mqtt_evt_handler+0x54>
		if ((fota_state == DOWNLOAD_FIRMWARE) &&
   2a6b0:	4a11      	ldr	r2, [pc, #68]	; (2a6f8 <aws_fota_mqtt_evt_handler+0x4ec>)
   2a6b2:	7812      	ldrb	r2, [r2, #0]
   2a6b4:	2a01      	cmp	r2, #1
   2a6b6:	f47f add5 	bne.w	2a264 <aws_fota_mqtt_evt_handler+0x58>
   2a6ba:	f640 0143 	movw	r1, #2115	; 0x843
   2a6be:	428b      	cmp	r3, r1
   2a6c0:	f47f add0 	bne.w	2a264 <aws_fota_mqtt_evt_handler+0x58>
			err = update_job_execution(client, job_id,
   2a6c4:	4b0d      	ldr	r3, [pc, #52]	; (2a6fc <aws_fota_mqtt_evt_handler+0x4f0>)
   2a6c6:	4611      	mov	r1, r2
   2a6c8:	681b      	ldr	r3, [r3, #0]
   2a6ca:	f7ff fcb1 	bl	2a030 <update_job_execution.constprop.0>
   2a6ce:	e7d7      	b.n	2a680 <aws_fota_mqtt_evt_handler+0x474>
   2a6d0:	20024770 	.word	0x20024770
   2a6d4:	0004eed2 	.word	0x0004eed2
   2a6d8:	2002476c 	.word	0x2002476c
   2a6dc:	00049018 	.word	0x00049018
   2a6e0:	00049030 	.word	0x00049030
   2a6e4:	0004ef07 	.word	0x0004ef07
   2a6e8:	0004ef1c 	.word	0x0004ef1c
   2a6ec:	2002bab9 	.word	0x2002bab9
   2a6f0:	0004ecf7 	.word	0x0004ecf7
   2a6f4:	0004ef3c 	.word	0x0004ef3c
   2a6f8:	2002bab8 	.word	0x2002bab8
   2a6fc:	20031bec 	.word	0x20031bec

0002a700 <aws_fota_init>:

int aws_fota_init(struct mqtt_client *const client,
		  const char *app_version,
		  aws_fota_callback_t evt_handler)
{
   2a700:	b570      	push	{r4, r5, r6, lr}
   2a702:	460d      	mov	r5, r1
   2a704:	4614      	mov	r4, r2
	int err;

	if (client == NULL || app_version == NULL || evt_handler == NULL) {
   2a706:	4606      	mov	r6, r0
   2a708:	b918      	cbnz	r0, 2a712 <aws_fota_init+0x12>
		return -EINVAL;
   2a70a:	f06f 0415 	mvn.w	r4, #21
	}

	strncpy(version, app_version, CONFIG_AWS_FOTA_VERSION_STRING_MAX_LEN);

	return 0;
}
   2a70e:	4620      	mov	r0, r4
   2a710:	bd70      	pop	{r4, r5, r6, pc}
	if (client == NULL || app_version == NULL || evt_handler == NULL) {
   2a712:	2900      	cmp	r1, #0
   2a714:	d0f9      	beq.n	2a70a <aws_fota_init+0xa>
   2a716:	2a00      	cmp	r2, #0
   2a718:	d0f7      	beq.n	2a70a <aws_fota_init+0xa>
	if (strlen(app_version) >= CONFIG_AWS_FOTA_VERSION_STRING_MAX_LEN) {
   2a71a:	4608      	mov	r0, r1
   2a71c:	f015 ff32 	bl	40584 <strlen>
   2a720:	287f      	cmp	r0, #127	; 0x7f
   2a722:	d8f2      	bhi.n	2a70a <aws_fota_init+0xa>
	c = client;
   2a724:	4b10      	ldr	r3, [pc, #64]	; (2a768 <aws_fota_init+0x68>)
	err = fota_download_init(http_fota_handler);
   2a726:	4811      	ldr	r0, [pc, #68]	; (2a76c <aws_fota_init+0x6c>)
	c = client;
   2a728:	601e      	str	r6, [r3, #0]
	callback = evt_handler;
   2a72a:	4b11      	ldr	r3, [pc, #68]	; (2a770 <aws_fota_init+0x70>)
   2a72c:	601c      	str	r4, [r3, #0]
	err = fota_download_init(http_fota_handler);
   2a72e:	f7ff fa7d 	bl	29c2c <fota_download_init>
	if (err != 0) {
   2a732:	4604      	mov	r4, r0
   2a734:	b188      	cbz	r0, 2a75a <aws_fota_init+0x5a>
		LOG_ERR("fota_download_init error %d", err);
   2a736:	2301      	movs	r3, #1
   2a738:	f04f 0000 	mov.w	r0, #0
   2a73c:	4a0d      	ldr	r2, [pc, #52]	; (2a774 <aws_fota_init+0x74>)
   2a73e:	f363 0002 	bfi	r0, r3, #0, #3
   2a742:	4b0d      	ldr	r3, [pc, #52]	; (2a778 <aws_fota_init+0x78>)
   2a744:	f36f 00c5 	bfc	r0, #3, #3
   2a748:	1a9b      	subs	r3, r3, r2
   2a74a:	08db      	lsrs	r3, r3, #3
   2a74c:	f363 108f 	bfi	r0, r3, #6, #10
   2a750:	4622      	mov	r2, r4
   2a752:	490a      	ldr	r1, [pc, #40]	; (2a77c <aws_fota_init+0x7c>)
   2a754:	f01b ffa5 	bl	466a2 <log_string_sync>
		return err;
   2a758:	e7d9      	b.n	2a70e <aws_fota_init+0xe>
	strncpy(version, app_version, CONFIG_AWS_FOTA_VERSION_STRING_MAX_LEN);
   2a75a:	2280      	movs	r2, #128	; 0x80
   2a75c:	4629      	mov	r1, r5
   2a75e:	4808      	ldr	r0, [pc, #32]	; (2a780 <aws_fota_init+0x80>)
   2a760:	f015 ff84 	bl	4066c <strncpy>
	return 0;
   2a764:	e7d3      	b.n	2a70e <aws_fota_init+0xe>
   2a766:	bf00      	nop
   2a768:	2002476c 	.word	0x2002476c
   2a76c:	0002a105 	.word	0x0002a105
   2a770:	20024770 	.word	0x20024770
   2a774:	00049018 	.word	0x00049018
   2a778:	00049030 	.word	0x00049030
   2a77c:	0004ecb2 	.word	0x0004ecb2
   2a780:	2002c2fe 	.word	0x2002c2fe

0002a784 <aws_fota_parse_notify_next_document>:
}

int aws_fota_parse_notify_next_document(char *job_document,
		u32_t payload_len, char *job_id_buf, char *hostname_buf,
		char *file_path_buf)
{
   2a784:	b570      	push	{r4, r5, r6, lr}
   2a786:	b090      	sub	sp, #64	; 0x40
   2a788:	461d      	mov	r5, r3
	struct notify_next_obj job;
	struct job_document_obj *job_doc_obj;

	int ret = json_obj_parse(job_document,
   2a78a:	ab03      	add	r3, sp, #12
   2a78c:	9300      	str	r3, [sp, #0]
{
   2a78e:	4616      	mov	r6, r2
	int ret = json_obj_parse(job_document,
   2a790:	2302      	movs	r3, #2
   2a792:	4a0d      	ldr	r2, [pc, #52]	; (2a7c8 <aws_fota_parse_notify_next_document+0x44>)
   2a794:	f7f6 fc6a 	bl	2106c <json_obj_parse>
				 ARRAY_SIZE(notify_next_obj_descr),
				 &job);
	job_doc_obj = &job.execution.job_document;

	/* Check if the execution field of the object has been parsed */
	if (ret & 0x02) {
   2a798:	0783      	lsls	r3, r0, #30
	int ret = json_obj_parse(job_document,
   2a79a:	4604      	mov	r4, r0
	if (ret & 0x02) {
   2a79c:	d511      	bpl.n	2a7c2 <aws_fota_parse_notify_next_document+0x3e>
		if (job.execution.job_id != 0) {
   2a79e:	9904      	ldr	r1, [sp, #16]
   2a7a0:	b119      	cbz	r1, 2a7aa <aws_fota_parse_notify_next_document+0x26>
			strncpy_nullterm(job_id_buf, job.execution.job_id,
   2a7a2:	2241      	movs	r2, #65	; 0x41
   2a7a4:	4630      	mov	r0, r6
   2a7a6:	f01e f8a8 	bl	488fa <strncpy_nullterm>
				      AWS_JOBS_JOB_ID_MAX_LEN);
		}
		if (job_doc_obj->location.host != 0) {
   2a7aa:	990e      	ldr	r1, [sp, #56]	; 0x38
   2a7ac:	b119      	cbz	r1, 2a7b6 <aws_fota_parse_notify_next_document+0x32>
			strncpy_nullterm(hostname_buf,
   2a7ae:	22ff      	movs	r2, #255	; 0xff
   2a7b0:	4628      	mov	r0, r5
   2a7b2:	f01e f8a2 	bl	488fa <strncpy_nullterm>
					 job_doc_obj->location.host,
					 CONFIG_AWS_FOTA_HOSTNAME_MAX_LEN);
		}
		if (job_doc_obj->location.path != 0) {
   2a7b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2a7b8:	b119      	cbz	r1, 2a7c2 <aws_fota_parse_notify_next_document+0x3e>
			strncpy_nullterm(file_path_buf,
   2a7ba:	22ff      	movs	r2, #255	; 0xff
   2a7bc:	9814      	ldr	r0, [sp, #80]	; 0x50
   2a7be:	f01e f89c 	bl	488fa <strncpy_nullterm>
					  CONFIG_AWS_FOTA_FILE_PATH_MAX_LEN);
		}

	}
	return ret;
}
   2a7c2:	4620      	mov	r0, r4
   2a7c4:	b010      	add	sp, #64	; 0x40
   2a7c6:	bd70      	pop	{r4, r5, r6, pc}
   2a7c8:	00049af8 	.word	0x00049af8

0002a7cc <dfu_target_img_type>:
LOG_MODULE_REGISTER(dfu_target, CONFIG_DFU_TARGET_LOG_LEVEL);

static const struct dfu_target *current_target;

int dfu_target_img_type(const void *const buf, size_t len)
{
   2a7cc:	b538      	push	{r3, r4, r5, lr}
   2a7ce:	4605      	mov	r5, r0
   2a7d0:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_DFU_TARGET_MCUBOOT) &&
	    dfu_target_mcuboot_identify(buf)) {
   2a7d2:	f000 fbc7 	bl	2af64 <dfu_target_mcuboot_identify>
	if (IS_ENABLED(CONFIG_DFU_TARGET_MCUBOOT) &&
   2a7d6:	b9c8      	cbnz	r0, 2a80c <dfu_target_img_type+0x40>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}

	if (IS_ENABLED(CONFIG_DFU_TARGET_MODEM) &&
	    dfu_target_modem_identify(buf)) {
   2a7d8:	4628      	mov	r0, r5
   2a7da:	f000 f9b1 	bl	2ab40 <dfu_target_modem_identify>
	if (IS_ENABLED(CONFIG_DFU_TARGET_MODEM) &&
   2a7de:	b9b8      	cbnz	r0, 2a810 <dfu_target_img_type+0x44>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
	}

	if (len < MIN_SIZE_IDENTIFY_BUF) {
   2a7e0:	2c1f      	cmp	r4, #31
   2a7e2:	d917      	bls.n	2a814 <dfu_target_img_type+0x48>
		return -EAGAIN;
	}

	LOG_ERR("No supported image type found");
   2a7e4:	2301      	movs	r3, #1
   2a7e6:	f04f 0200 	mov.w	r2, #0
   2a7ea:	490c      	ldr	r1, [pc, #48]	; (2a81c <dfu_target_img_type+0x50>)
   2a7ec:	f363 0202 	bfi	r2, r3, #0, #3
   2a7f0:	4b0b      	ldr	r3, [pc, #44]	; (2a820 <dfu_target_img_type+0x54>)
   2a7f2:	f360 02c5 	bfi	r2, r0, #3, #3
   2a7f6:	1a5b      	subs	r3, r3, r1
   2a7f8:	08db      	lsrs	r3, r3, #3
   2a7fa:	f363 128f 	bfi	r2, r3, #6, #10
   2a7fe:	4610      	mov	r0, r2
   2a800:	4908      	ldr	r1, [pc, #32]	; (2a824 <dfu_target_img_type+0x58>)
   2a802:	f01b ff4e 	bl	466a2 <log_string_sync>
	return -ENOTSUP;
   2a806:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2a80a:	bd38      	pop	{r3, r4, r5, pc}
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   2a80c:	2001      	movs	r0, #1
   2a80e:	e7fc      	b.n	2a80a <dfu_target_img_type+0x3e>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   2a810:	2002      	movs	r0, #2
   2a812:	e7fa      	b.n	2a80a <dfu_target_img_type+0x3e>
		return -EAGAIN;
   2a814:	f06f 000a 	mvn.w	r0, #10
   2a818:	e7f7      	b.n	2a80a <dfu_target_img_type+0x3e>
   2a81a:	bf00      	nop
   2a81c:	00049018 	.word	0x00049018
   2a820:	00049050 	.word	0x00049050
   2a824:	0004f1c4 	.word	0x0004f1c4

0002a828 <dfu_target_init>:

int dfu_target_init(int img_type, size_t file_size)
{
	const struct dfu_target *new_target = NULL;

	if (IS_ENABLED(CONFIG_BOOTLOADER_MCUBOOT) &&
   2a828:	2801      	cmp	r0, #1
{
   2a82a:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_BOOTLOADER_MCUBOOT) &&
   2a82c:	d00e      	beq.n	2a84c <dfu_target_init+0x24>
	    img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
		new_target = &dfu_target_mcuboot;
	} else if (IS_ENABLED(CONFIG_DFU_TARGET_MODEM) &&
   2a82e:	2802      	cmp	r0, #2
   2a830:	d10e      	bne.n	2a850 <dfu_target_init+0x28>
		   img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
		new_target = &dfu_target_modem;
   2a832:	4b12      	ldr	r3, [pc, #72]	; (2a87c <dfu_target_init+0x54>)
	/* The user is re-initializing with an previously aborted target.
	 * Avoid re-initializing generally to ensure that the download can
	 * continue where it left off. Re-initializing is required for modem
	 * upgrades to re-open the DFU socket that is closed on abort.
	 */
	if (new_target == current_target
   2a834:	4a12      	ldr	r2, [pc, #72]	; (2a880 <dfu_target_init+0x58>)
   2a836:	6814      	ldr	r4, [r2, #0]
   2a838:	42a3      	cmp	r3, r4
   2a83a:	d101      	bne.n	2a840 <dfu_target_init+0x18>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   2a83c:	2802      	cmp	r0, #2
   2a83e:	d11a      	bne.n	2a876 <dfu_target_init+0x4e>
	}

	current_target = new_target;

	return current_target->init(file_size);
}
   2a840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	current_target = new_target;
   2a844:	6013      	str	r3, [r2, #0]
	return current_target->init(file_size);
   2a846:	4608      	mov	r0, r1
   2a848:	681b      	ldr	r3, [r3, #0]
   2a84a:	4718      	bx	r3
		new_target = &dfu_target_mcuboot;
   2a84c:	4b0d      	ldr	r3, [pc, #52]	; (2a884 <dfu_target_init+0x5c>)
   2a84e:	e7f1      	b.n	2a834 <dfu_target_init+0xc>
		LOG_ERR("Unknown image type");
   2a850:	2301      	movs	r3, #1
   2a852:	f04f 0000 	mov.w	r0, #0
   2a856:	4a0c      	ldr	r2, [pc, #48]	; (2a888 <dfu_target_init+0x60>)
   2a858:	f363 0002 	bfi	r0, r3, #0, #3
   2a85c:	4b0b      	ldr	r3, [pc, #44]	; (2a88c <dfu_target_init+0x64>)
   2a85e:	f36f 00c5 	bfc	r0, #3, #3
   2a862:	1a9b      	subs	r3, r3, r2
   2a864:	08db      	lsrs	r3, r3, #3
   2a866:	f363 108f 	bfi	r0, r3, #6, #10
   2a86a:	4909      	ldr	r1, [pc, #36]	; (2a890 <dfu_target_init+0x68>)
   2a86c:	f01b ff19 	bl	466a2 <log_string_sync>
		return -ENOTSUP;
   2a870:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2a874:	bd10      	pop	{r4, pc}
		return 0;
   2a876:	2000      	movs	r0, #0
   2a878:	e7fc      	b.n	2a874 <dfu_target_init+0x4c>
   2a87a:	bf00      	nop
   2a87c:	00049b28 	.word	0x00049b28
   2a880:	20024774 	.word	0x20024774
   2a884:	00049b18 	.word	0x00049b18
   2a888:	00049018 	.word	0x00049018
   2a88c:	00049050 	.word	0x00049050
   2a890:	0004f1e2 	.word	0x0004f1e2

0002a894 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   2a894:	4b03      	ldr	r3, [pc, #12]	; (2a8a4 <dfu_target_offset_get+0x10>)
   2a896:	681b      	ldr	r3, [r3, #0]
   2a898:	b10b      	cbz	r3, 2a89e <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   2a89a:	685b      	ldr	r3, [r3, #4]
   2a89c:	4718      	bx	r3
}
   2a89e:	f06f 000c 	mvn.w	r0, #12
   2a8a2:	4770      	bx	lr
   2a8a4:	20024774 	.word	0x20024774

0002a8a8 <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   2a8a8:	4b04      	ldr	r3, [pc, #16]	; (2a8bc <dfu_target_write+0x14>)
   2a8aa:	681b      	ldr	r3, [r3, #0]
   2a8ac:	b113      	cbz	r3, 2a8b4 <dfu_target_write+0xc>
   2a8ae:	b108      	cbz	r0, 2a8b4 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   2a8b0:	689b      	ldr	r3, [r3, #8]
   2a8b2:	4718      	bx	r3
}
   2a8b4:	f06f 000c 	mvn.w	r0, #12
   2a8b8:	4770      	bx	lr
   2a8ba:	bf00      	nop
   2a8bc:	20024774 	.word	0x20024774

0002a8c0 <dfu_target_done>:

int dfu_target_done(bool successful)
{
   2a8c0:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   2a8c2:	4d10      	ldr	r5, [pc, #64]	; (2a904 <dfu_target_done+0x44>)
{
   2a8c4:	4606      	mov	r6, r0
	if (current_target == NULL) {
   2a8c6:	682b      	ldr	r3, [r5, #0]
   2a8c8:	b1c3      	cbz	r3, 2a8fc <dfu_target_done+0x3c>
		return -EACCES;
	}

	err = current_target->done(successful);
   2a8ca:	68db      	ldr	r3, [r3, #12]
   2a8cc:	4798      	blx	r3
   2a8ce:	4604      	mov	r4, r0

	if (successful) {
   2a8d0:	b10e      	cbz	r6, 2a8d6 <dfu_target_done+0x16>
		current_target = NULL;
   2a8d2:	2300      	movs	r3, #0
   2a8d4:	602b      	str	r3, [r5, #0]
	}

	if (err != 0) {
   2a8d6:	b17c      	cbz	r4, 2a8f8 <dfu_target_done+0x38>
		LOG_ERR("Unable to clean up dfu_target");
   2a8d8:	2301      	movs	r3, #1
   2a8da:	f04f 0000 	mov.w	r0, #0
   2a8de:	4a0a      	ldr	r2, [pc, #40]	; (2a908 <dfu_target_done+0x48>)
   2a8e0:	f363 0002 	bfi	r0, r3, #0, #3
   2a8e4:	4b09      	ldr	r3, [pc, #36]	; (2a90c <dfu_target_done+0x4c>)
   2a8e6:	f36f 00c5 	bfc	r0, #3, #3
   2a8ea:	1a9b      	subs	r3, r3, r2
   2a8ec:	08db      	lsrs	r3, r3, #3
   2a8ee:	f363 108f 	bfi	r0, r3, #6, #10
   2a8f2:	4907      	ldr	r1, [pc, #28]	; (2a910 <dfu_target_done+0x50>)
   2a8f4:	f01b fed5 	bl	466a2 <log_string_sync>
		return err;
	}

	return 0;
}
   2a8f8:	4620      	mov	r0, r4
   2a8fa:	bd70      	pop	{r4, r5, r6, pc}
		return -EACCES;
   2a8fc:	f06f 040c 	mvn.w	r4, #12
   2a900:	e7fa      	b.n	2a8f8 <dfu_target_done+0x38>
   2a902:	bf00      	nop
   2a904:	20024774 	.word	0x20024774
   2a908:	00049018 	.word	0x00049018
   2a90c:	00049050 	.word	0x00049050
   2a910:	0004f1a6 	.word	0x0004f1a6

0002a914 <getsockopt.constprop.2>:
static inline int getsockopt(int sock, int level, int optname,
   2a914:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   2a918:	4c15      	ldr	r4, [pc, #84]	; (2a970 <getsockopt.constprop.2+0x5c>)
static inline int getsockopt(int sock, int level, int optname,
   2a91a:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   2a91c:	6823      	ldr	r3, [r4, #0]
static inline int getsockopt(int sock, int level, int optname,
   2a91e:	4605      	mov	r5, r0
   2a920:	460e      	mov	r6, r1
   2a922:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   2a924:	b94b      	cbnz	r3, 2a93a <getsockopt.constprop.2+0x26>
   2a926:	4913      	ldr	r1, [pc, #76]	; (2a974 <getsockopt.constprop.2+0x60>)
   2a928:	4813      	ldr	r0, [pc, #76]	; (2a978 <getsockopt.constprop.2+0x64>)
   2a92a:	2360      	movs	r3, #96	; 0x60
   2a92c:	4a13      	ldr	r2, [pc, #76]	; (2a97c <getsockopt.constprop.2+0x68>)
   2a92e:	f01b fe95 	bl	4665c <printk>
   2a932:	2160      	movs	r1, #96	; 0x60
   2a934:	4811      	ldr	r0, [pc, #68]	; (2a97c <getsockopt.constprop.2+0x68>)
   2a936:	f01b fe9e 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getsockopt);
   2a93a:	6823      	ldr	r3, [r4, #0]
   2a93c:	6a1b      	ldr	r3, [r3, #32]
   2a93e:	b94b      	cbnz	r3, 2a954 <getsockopt.constprop.2+0x40>
   2a940:	490f      	ldr	r1, [pc, #60]	; (2a980 <getsockopt.constprop.2+0x6c>)
   2a942:	480d      	ldr	r0, [pc, #52]	; (2a978 <getsockopt.constprop.2+0x64>)
   2a944:	2361      	movs	r3, #97	; 0x61
   2a946:	4a0d      	ldr	r2, [pc, #52]	; (2a97c <getsockopt.constprop.2+0x68>)
   2a948:	f01b fe88 	bl	4665c <printk>
   2a94c:	2161      	movs	r1, #97	; 0x61
   2a94e:	480b      	ldr	r0, [pc, #44]	; (2a97c <getsockopt.constprop.2+0x68>)
   2a950:	f01b fe91 	bl	46676 <assert_post_action>
	return socket_ops->getsockopt(sock, level, optname, optval, optlen);
   2a954:	6823      	ldr	r3, [r4, #0]
   2a956:	f8cd 8000 	str.w	r8, [sp]
   2a95a:	6a1c      	ldr	r4, [r3, #32]
   2a95c:	4632      	mov	r2, r6
   2a95e:	463b      	mov	r3, r7
   2a960:	f240 2103 	movw	r1, #515	; 0x203
   2a964:	4628      	mov	r0, r5
   2a966:	47a0      	blx	r4
}
   2a968:	b002      	add	sp, #8
   2a96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a96e:	bf00      	nop
   2a970:	20023978 	.word	0x20023978
   2a974:	0004b6f3 	.word	0x0004b6f3
   2a978:	0004b5bf 	.word	0x0004b5bf
   2a97c:	0004b6c2 	.word	0x0004b6c2
   2a980:	0004f436 	.word	0x0004f436

0002a984 <get_modem_error>:

static int  fd;
static int  offset;

static int get_modem_error(void)
{
   2a984:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int rc;
	int err = 0;
	socklen_t len;

	len = sizeof(err);
   2a986:	2204      	movs	r2, #4
	int err = 0;
   2a988:	2500      	movs	r5, #0
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   2a98a:	4811      	ldr	r0, [pc, #68]	; (2a9d0 <get_modem_error+0x4c>)
	len = sizeof(err);
   2a98c:	ab02      	add	r3, sp, #8
   2a98e:	f843 2d04 	str.w	r2, [r3, #-4]!
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   2a992:	2114      	movs	r1, #20
   2a994:	466a      	mov	r2, sp
   2a996:	6800      	ldr	r0, [r0, #0]
	int err = 0;
   2a998:	9500      	str	r5, [sp, #0]
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   2a99a:	f7ff ffbb 	bl	2a914 <getsockopt.constprop.2>
	if (rc) {
   2a99e:	b198      	cbz	r0, 2a9c8 <get_modem_error+0x44>
		LOG_ERR("Unable to fetch modem error, errno %d", errno);
   2a9a0:	2301      	movs	r3, #1
   2a9a2:	f04f 0400 	mov.w	r4, #0
   2a9a6:	4a0b      	ldr	r2, [pc, #44]	; (2a9d4 <get_modem_error+0x50>)
   2a9a8:	f363 0402 	bfi	r4, r3, #0, #3
   2a9ac:	4b0a      	ldr	r3, [pc, #40]	; (2a9d8 <get_modem_error+0x54>)
   2a9ae:	f365 04c5 	bfi	r4, r5, #3, #3
   2a9b2:	1a9b      	subs	r3, r3, r2
   2a9b4:	08db      	lsrs	r3, r3, #3
   2a9b6:	f363 148f 	bfi	r4, r3, #6, #10
   2a9ba:	f01c f883 	bl	46ac4 <__errno>
   2a9be:	4907      	ldr	r1, [pc, #28]	; (2a9dc <get_modem_error+0x58>)
   2a9c0:	6802      	ldr	r2, [r0, #0]
   2a9c2:	4620      	mov	r0, r4
   2a9c4:	f01b fe6d 	bl	466a2 <log_string_sync>
	}

	return err;
}
   2a9c8:	9800      	ldr	r0, [sp, #0]
   2a9ca:	b003      	add	sp, #12
   2a9cc:	bd30      	pop	{r4, r5, pc}
   2a9ce:	bf00      	nop
   2a9d0:	20024778 	.word	0x20024778
   2a9d4:	00049018 	.word	0x00049018
   2a9d8:	00049060 	.word	0x00049060
   2a9dc:	0004f410 	.word	0x0004f410

0002a9e0 <setsockopt.constprop.3>:
static inline int setsockopt(int sock, int level, int optname,
   2a9e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   2a9e4:	4c15      	ldr	r4, [pc, #84]	; (2aa3c <setsockopt.constprop.3+0x5c>)
static inline int setsockopt(int sock, int level, int optname,
   2a9e6:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   2a9e8:	6823      	ldr	r3, [r4, #0]
static inline int setsockopt(int sock, int level, int optname,
   2a9ea:	4605      	mov	r5, r0
   2a9ec:	460e      	mov	r6, r1
   2a9ee:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   2a9f0:	b94b      	cbnz	r3, 2aa06 <setsockopt.constprop.3+0x26>
   2a9f2:	4913      	ldr	r1, [pc, #76]	; (2aa40 <setsockopt.constprop.3+0x60>)
   2a9f4:	4813      	ldr	r0, [pc, #76]	; (2aa44 <setsockopt.constprop.3+0x64>)
   2a9f6:	2357      	movs	r3, #87	; 0x57
   2a9f8:	4a13      	ldr	r2, [pc, #76]	; (2aa48 <setsockopt.constprop.3+0x68>)
   2a9fa:	f01b fe2f 	bl	4665c <printk>
   2a9fe:	2157      	movs	r1, #87	; 0x57
   2aa00:	4811      	ldr	r0, [pc, #68]	; (2aa48 <setsockopt.constprop.3+0x68>)
   2aa02:	f01b fe38 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   2aa06:	6823      	ldr	r3, [r4, #0]
   2aa08:	69db      	ldr	r3, [r3, #28]
   2aa0a:	b94b      	cbnz	r3, 2aa20 <setsockopt.constprop.3+0x40>
   2aa0c:	490f      	ldr	r1, [pc, #60]	; (2aa4c <setsockopt.constprop.3+0x6c>)
   2aa0e:	480d      	ldr	r0, [pc, #52]	; (2aa44 <setsockopt.constprop.3+0x64>)
   2aa10:	2358      	movs	r3, #88	; 0x58
   2aa12:	4a0d      	ldr	r2, [pc, #52]	; (2aa48 <setsockopt.constprop.3+0x68>)
   2aa14:	f01b fe22 	bl	4665c <printk>
   2aa18:	2158      	movs	r1, #88	; 0x58
   2aa1a:	480b      	ldr	r0, [pc, #44]	; (2aa48 <setsockopt.constprop.3+0x68>)
   2aa1c:	f01b fe2b 	bl	46676 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   2aa20:	6823      	ldr	r3, [r4, #0]
   2aa22:	f8cd 8000 	str.w	r8, [sp]
   2aa26:	69dc      	ldr	r4, [r3, #28]
   2aa28:	4632      	mov	r2, r6
   2aa2a:	463b      	mov	r3, r7
   2aa2c:	f240 2103 	movw	r1, #515	; 0x203
   2aa30:	4628      	mov	r0, r5
   2aa32:	47a0      	blx	r4
}
   2aa34:	b002      	add	sp, #8
   2aa36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2aa3a:	bf00      	nop
   2aa3c:	20023978 	.word	0x20023978
   2aa40:	0004b6f3 	.word	0x0004b6f3
   2aa44:	0004b5bf 	.word	0x0004b5bf
   2aa48:	0004b6c2 	.word	0x0004b6c2
   2aa4c:	0004d0ff 	.word	0x0004d0ff

0002aa50 <delete_banked_modem_fw>:
}

static int delete_banked_modem_fw(void)
{
	int err;
	socklen_t len = sizeof(offset);
   2aa50:	2304      	movs	r3, #4
{
   2aa52:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	LOG_INF("Deleting firmware image, this can take several minutes");
   2aa56:	f04f 0000 	mov.w	r0, #0
	socklen_t len = sizeof(offset);
   2aa5a:	9301      	str	r3, [sp, #4]
	LOG_INF("Deleting firmware image, this can take several minutes");
   2aa5c:	2303      	movs	r3, #3
   2aa5e:	4c30      	ldr	r4, [pc, #192]	; (2ab20 <delete_banked_modem_fw+0xd0>)
   2aa60:	f363 0002 	bfi	r0, r3, #0, #3
   2aa64:	4b2f      	ldr	r3, [pc, #188]	; (2ab24 <delete_banked_modem_fw+0xd4>)
   2aa66:	f36f 00c5 	bfc	r0, #3, #3
   2aa6a:	1ae4      	subs	r4, r4, r3
   2aa6c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2aa70:	f364 108f 	bfi	r0, r4, #6, #10
   2aa74:	492c      	ldr	r1, [pc, #176]	; (2ab28 <delete_banked_modem_fw+0xd8>)
   2aa76:	f01b fe14 	bl	466a2 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   2aa7a:	2300      	movs	r3, #0
   2aa7c:	4d2b      	ldr	r5, [pc, #172]	; (2ab2c <delete_banked_modem_fw+0xdc>)
   2aa7e:	461a      	mov	r2, r3
   2aa80:	2106      	movs	r1, #6
   2aa82:	6828      	ldr	r0, [r5, #0]
   2aa84:	f7ff ffac 	bl	2a9e0 <setsockopt.constprop.3>
	if (err < 0) {
   2aa88:	2800      	cmp	r0, #0
   2aa8a:	db25      	blt.n	2aad8 <delete_banked_modem_fw+0x88>
		LOG_ERR("Failed to delete backup, errno %d", errno);
		return -EFAULT;
	}

	while (true) {
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2aa8c:	4f28      	ldr	r7, [pc, #160]	; (2ab30 <delete_banked_modem_fw+0xe0>)
		if (err < 0) {
			if (errno == ENOEXEC) {
				err = get_modem_error();
				if (err != DFU_ERASE_PENDING) {
					LOG_ERR("DFU error: %d", err);
   2aa8e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 2ab3c <delete_banked_modem_fw+0xec>
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2aa92:	ab01      	add	r3, sp, #4
   2aa94:	463a      	mov	r2, r7
   2aa96:	2107      	movs	r1, #7
   2aa98:	6828      	ldr	r0, [r5, #0]
   2aa9a:	f7ff ff3b 	bl	2a914 <getsockopt.constprop.2>
		if (err < 0) {
   2aa9e:	2800      	cmp	r0, #0
   2aaa0:	da2f      	bge.n	2ab02 <delete_banked_modem_fw+0xb2>
			if (errno == ENOEXEC) {
   2aaa2:	f01c f80f 	bl	46ac4 <__errno>
   2aaa6:	6803      	ldr	r3, [r0, #0]
   2aaa8:	2b08      	cmp	r3, #8
   2aaaa:	d1f2      	bne.n	2aa92 <delete_banked_modem_fw+0x42>
				err = get_modem_error();
   2aaac:	f7ff ff6a 	bl	2a984 <get_modem_error>
				if (err != DFU_ERASE_PENDING) {
   2aab0:	f110 0f11 	cmn.w	r0, #17
				err = get_modem_error();
   2aab4:	4602      	mov	r2, r0
				if (err != DFU_ERASE_PENDING) {
   2aab6:	d00a      	beq.n	2aace <delete_banked_modem_fw+0x7e>
					LOG_ERR("DFU error: %d", err);
   2aab8:	2301      	movs	r3, #1
   2aaba:	f363 0602 	bfi	r6, r3, #0, #3
   2aabe:	f36f 06c5 	bfc	r6, #3, #3
   2aac2:	f364 168f 	bfi	r6, r4, #6, #10
   2aac6:	4641      	mov	r1, r8
   2aac8:	4630      	mov	r0, r6
   2aaca:	f01b fdea 	bl	466a2 <log_string_sync>
	return z_impl_k_sleep(ms);
   2aace:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   2aad2:	f01d fffa 	bl	48aca <z_impl_k_sleep>
   2aad6:	e7dc      	b.n	2aa92 <delete_banked_modem_fw+0x42>
		LOG_ERR("Failed to delete backup, errno %d", errno);
   2aad8:	2301      	movs	r3, #1
   2aada:	f04f 0500 	mov.w	r5, #0
   2aade:	f363 0502 	bfi	r5, r3, #0, #3
   2aae2:	f01b ffef 	bl	46ac4 <__errno>
   2aae6:	f36f 05c5 	bfc	r5, #3, #3
   2aaea:	f364 158f 	bfi	r5, r4, #6, #10
   2aaee:	6802      	ldr	r2, [r0, #0]
   2aaf0:	4910      	ldr	r1, [pc, #64]	; (2ab34 <delete_banked_modem_fw+0xe4>)
   2aaf2:	4628      	mov	r0, r5
   2aaf4:	f01b fdd5 	bl	466a2 <log_string_sync>
		return -EFAULT;
   2aaf8:	f06f 000d 	mvn.w	r0, #13
			break;
		}
	}

	return 0;
}
   2aafc:	b002      	add	sp, #8
   2aafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_INF("Modem FW delete complete");
   2ab02:	2303      	movs	r3, #3
   2ab04:	f04f 0000 	mov.w	r0, #0
   2ab08:	f363 0002 	bfi	r0, r3, #0, #3
   2ab0c:	f36f 00c5 	bfc	r0, #3, #3
   2ab10:	f364 108f 	bfi	r0, r4, #6, #10
   2ab14:	4908      	ldr	r1, [pc, #32]	; (2ab38 <delete_banked_modem_fw+0xe8>)
   2ab16:	f01b fdc4 	bl	466a2 <log_string_sync>
	return 0;
   2ab1a:	2000      	movs	r0, #0
   2ab1c:	e7ee      	b.n	2aafc <delete_banked_modem_fw+0xac>
   2ab1e:	bf00      	nop
   2ab20:	00049060 	.word	0x00049060
   2ab24:	00049018 	.word	0x00049018
   2ab28:	0004f1f5 	.word	0x0004f1f5
   2ab2c:	20024778 	.word	0x20024778
   2ab30:	2002477c 	.word	0x2002477c
   2ab34:	0004f22c 	.word	0x0004f22c
   2ab38:	0004f25c 	.word	0x0004f25c
   2ab3c:	0004f24e 	.word	0x0004f24e

0002ab40 <dfu_target_modem_identify>:
	return err;
}

bool dfu_target_modem_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   2ab40:	6840      	ldr	r0, [r0, #4]

}
   2ab42:	4b02      	ldr	r3, [pc, #8]	; (2ab4c <dfu_target_modem_identify+0xc>)
   2ab44:	1ac3      	subs	r3, r0, r3
   2ab46:	4258      	negs	r0, r3
   2ab48:	4158      	adcs	r0, r3
   2ab4a:	4770      	bx	lr
   2ab4c:	7544656d 	.word	0x7544656d

0002ab50 <dfu_target_modem_init>:
	/* We have no way of checking the amount of flash available in the modem
	 * with the current API
	 */
	ARG_UNUSED(file_size);
	int err;
	socklen_t len = sizeof(offset);
   2ab50:	2304      	movs	r3, #4
{
   2ab52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(socket_ops);
   2ab56:	4c6a      	ldr	r4, [pc, #424]	; (2ad00 <dfu_target_modem_init+0x1b0>)
   2ab58:	b099      	sub	sp, #100	; 0x64
	socklen_t len = sizeof(offset);
   2ab5a:	9303      	str	r3, [sp, #12]
   2ab5c:	6823      	ldr	r3, [r4, #0]
   2ab5e:	b94b      	cbnz	r3, 2ab74 <dfu_target_modem_init+0x24>
   2ab60:	4968      	ldr	r1, [pc, #416]	; (2ad04 <dfu_target_modem_init+0x1b4>)
   2ab62:	4869      	ldr	r0, [pc, #420]	; (2ad08 <dfu_target_modem_init+0x1b8>)
   2ab64:	2319      	movs	r3, #25
   2ab66:	4a69      	ldr	r2, [pc, #420]	; (2ad0c <dfu_target_modem_init+0x1bc>)
   2ab68:	f01b fd78 	bl	4665c <printk>
   2ab6c:	2119      	movs	r1, #25
   2ab6e:	4867      	ldr	r0, [pc, #412]	; (2ad0c <dfu_target_modem_init+0x1bc>)
   2ab70:	f01b fd81 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   2ab74:	6823      	ldr	r3, [r4, #0]
   2ab76:	681b      	ldr	r3, [r3, #0]
   2ab78:	b94b      	cbnz	r3, 2ab8e <dfu_target_modem_init+0x3e>
   2ab7a:	4965      	ldr	r1, [pc, #404]	; (2ad10 <dfu_target_modem_init+0x1c0>)
   2ab7c:	4862      	ldr	r0, [pc, #392]	; (2ad08 <dfu_target_modem_init+0x1b8>)
   2ab7e:	231a      	movs	r3, #26
   2ab80:	4a62      	ldr	r2, [pc, #392]	; (2ad0c <dfu_target_modem_init+0x1bc>)
   2ab82:	f01b fd6b 	bl	4665c <printk>
   2ab86:	211a      	movs	r1, #26
   2ab88:	4860      	ldr	r0, [pc, #384]	; (2ad0c <dfu_target_modem_init+0x1bc>)
   2ab8a:	f01b fd74 	bl	46676 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   2ab8e:	6823      	ldr	r3, [r4, #0]
   2ab90:	f240 2203 	movw	r2, #515	; 0x203
   2ab94:	681b      	ldr	r3, [r3, #0]
   2ab96:	2101      	movs	r1, #1
   2ab98:	2067      	movs	r0, #103	; 0x67
   2ab9a:	4798      	blx	r3
   2ab9c:	4c5d      	ldr	r4, [pc, #372]	; (2ad14 <dfu_target_modem_init+0x1c4>)
   2ab9e:	4b5e      	ldr	r3, [pc, #376]	; (2ad18 <dfu_target_modem_init+0x1c8>)
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   2aba0:	4d5e      	ldr	r5, [pc, #376]	; (2ad1c <dfu_target_modem_init+0x1cc>)
   2aba2:	1ae4      	subs	r4, r4, r3
	if (fd < 0) {
   2aba4:	2800      	cmp	r0, #0
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   2aba6:	6028      	str	r0, [r5, #0]
   2aba8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2abac:	462e      	mov	r6, r5
	if (fd < 0) {
   2abae:	da35      	bge.n	2ac1c <dfu_target_modem_init+0xcc>
		LOG_ERR("Failed to open Modem DFU socket.");
   2abb0:	2301      	movs	r3, #1
   2abb2:	f04f 0000 	mov.w	r0, #0
   2abb6:	f363 0002 	bfi	r0, r3, #0, #3
   2abba:	f36f 00c5 	bfc	r0, #3, #3
   2abbe:	f364 108f 	bfi	r0, r4, #6, #10
   2abc2:	4957      	ldr	r1, [pc, #348]	; (2ad20 <dfu_target_modem_init+0x1d0>)
   2abc4:	f01b fd6d 	bl	466a2 <log_string_sync>
		return fd;
   2abc8:	6828      	ldr	r0, [r5, #0]

	err = modem_dfu_socket_init();
	if (err < 0) {
   2abca:	2800      	cmp	r0, #0
   2abcc:	db52      	blt.n	2ac74 <dfu_target_modem_init+0x124>
		return err;
	}

	/* Check offset, store to local variable */
	err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2abce:	ab03      	add	r3, sp, #12
   2abd0:	4a54      	ldr	r2, [pc, #336]	; (2ad24 <dfu_target_modem_init+0x1d4>)
   2abd2:	2107      	movs	r1, #7
   2abd4:	6830      	ldr	r0, [r6, #0]
   2abd6:	f7ff fe9d 	bl	2a914 <getsockopt.constprop.2>
	if (err < 0) {
   2abda:	2800      	cmp	r0, #0
   2abdc:	da15      	bge.n	2ac0a <dfu_target_modem_init+0xba>
		if (errno == ENOEXEC) {
   2abde:	f01b ff71 	bl	46ac4 <__errno>
   2abe2:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   2abe4:	f04f 0500 	mov.w	r5, #0
		if (errno == ENOEXEC) {
   2abe8:	2b08      	cmp	r3, #8
   2abea:	f04f 0301 	mov.w	r3, #1
			LOG_ERR("Modem error: %d", get_modem_error());
   2abee:	f363 0502 	bfi	r5, r3, #0, #3
   2abf2:	f36f 05c5 	bfc	r5, #3, #3
   2abf6:	f364 158f 	bfi	r5, r4, #6, #10
		if (errno == ENOEXEC) {
   2abfa:	d157      	bne.n	2acac <dfu_target_modem_init+0x15c>
			LOG_ERR("Modem error: %d", get_modem_error());
   2abfc:	f7ff fec2 	bl	2a984 <get_modem_error>
   2ac00:	4602      	mov	r2, r0
   2ac02:	4949      	ldr	r1, [pc, #292]	; (2ad28 <dfu_target_modem_init+0x1d8>)
		} else {
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2ac04:	4628      	mov	r0, r5
   2ac06:	f01b fd4c 	bl	466a2 <log_string_sync>
		}
	}

	if (offset == DIRTY_IMAGE) {
   2ac0a:	4d46      	ldr	r5, [pc, #280]	; (2ad24 <dfu_target_modem_init+0x1d4>)
   2ac0c:	682a      	ldr	r2, [r5, #0]
   2ac0e:	f5b2 1f20 	cmp.w	r2, #2621440	; 0x280000
   2ac12:	d150      	bne.n	2acb6 <dfu_target_modem_init+0x166>
		delete_banked_modem_fw();
   2ac14:	f7ff ff1c 	bl	2aa50 <delete_banked_modem_fw>
		if (err != 0) {
			LOG_INF("Error while setting offset: %d", offset);
		}
	}

	return 0;
   2ac18:	2000      	movs	r0, #0
   2ac1a:	e02b      	b.n	2ac74 <dfu_target_modem_init+0x124>
	LOG_INF("Modem DFU Socket created");
   2ac1c:	2703      	movs	r7, #3
   2ac1e:	f04f 0000 	mov.w	r0, #0
	len = sizeof(version);
   2ac22:	f04f 0824 	mov.w	r8, #36	; 0x24
	LOG_INF("Modem DFU Socket created");
   2ac26:	f367 0002 	bfi	r0, r7, #0, #3
   2ac2a:	f36f 00c5 	bfc	r0, #3, #3
   2ac2e:	f364 108f 	bfi	r0, r4, #6, #10
   2ac32:	493e      	ldr	r1, [pc, #248]	; (2ad2c <dfu_target_modem_init+0x1dc>)
   2ac34:	f01b fd35 	bl	466a2 <log_string_sync>
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   2ac38:	f10d 0914 	add.w	r9, sp, #20
	len = sizeof(version);
   2ac3c:	ab18      	add	r3, sp, #96	; 0x60
   2ac3e:	f843 8d50 	str.w	r8, [r3, #-80]!
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   2ac42:	464a      	mov	r2, r9
   2ac44:	2101      	movs	r1, #1
   2ac46:	6828      	ldr	r0, [r5, #0]
   2ac48:	f7ff fe64 	bl	2a914 <getsockopt.constprop.2>
	if (err < 0) {
   2ac4c:	2800      	cmp	r0, #0
   2ac4e:	da14      	bge.n	2ac7a <dfu_target_modem_init+0x12a>
		LOG_ERR("Firmware version request failed, errno %d", errno);
   2ac50:	2301      	movs	r3, #1
   2ac52:	f04f 0500 	mov.w	r5, #0
   2ac56:	f363 0502 	bfi	r5, r3, #0, #3
   2ac5a:	f01b ff33 	bl	46ac4 <__errno>
   2ac5e:	f36f 05c5 	bfc	r5, #3, #3
   2ac62:	f364 158f 	bfi	r5, r4, #6, #10
   2ac66:	6802      	ldr	r2, [r0, #0]
   2ac68:	4931      	ldr	r1, [pc, #196]	; (2ad30 <dfu_target_modem_init+0x1e0>)
   2ac6a:	4628      	mov	r0, r5
   2ac6c:	f01b fd19 	bl	466a2 <log_string_sync>
		return -1;
   2ac70:	f04f 30ff 	mov.w	r0, #4294967295
}
   2ac74:	b019      	add	sp, #100	; 0x64
   2ac76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   2ac7a:	f04f 0500 	mov.w	r5, #0
	snprintf(version_string, sizeof(version_string), "%.*s",
   2ac7e:	4643      	mov	r3, r8
   2ac80:	4a2c      	ldr	r2, [pc, #176]	; (2ad34 <dfu_target_modem_init+0x1e4>)
   2ac82:	2125      	movs	r1, #37	; 0x25
   2ac84:	f8cd 9000 	str.w	r9, [sp]
   2ac88:	a80e      	add	r0, sp, #56	; 0x38
   2ac8a:	f015 faab 	bl	401e4 <snprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   2ac8e:	a80e      	add	r0, sp, #56	; 0x38
   2ac90:	f01b fd19 	bl	466c6 <log_strdup>
   2ac94:	f367 0502 	bfi	r5, r7, #0, #3
   2ac98:	f36f 05c5 	bfc	r5, #3, #3
   2ac9c:	f364 158f 	bfi	r5, r4, #6, #10
   2aca0:	4602      	mov	r2, r0
   2aca2:	4925      	ldr	r1, [pc, #148]	; (2ad38 <dfu_target_modem_init+0x1e8>)
   2aca4:	4628      	mov	r0, r5
   2aca6:	f01b fcfc 	bl	466a2 <log_string_sync>
   2acaa:	e790      	b.n	2abce <dfu_target_modem_init+0x7e>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2acac:	f01b ff0a 	bl	46ac4 <__errno>
   2acb0:	4922      	ldr	r1, [pc, #136]	; (2ad3c <dfu_target_modem_init+0x1ec>)
   2acb2:	6802      	ldr	r2, [r0, #0]
   2acb4:	e7a6      	b.n	2ac04 <dfu_target_modem_init+0xb4>
	} else if (offset != 0) {
   2acb6:	2a00      	cmp	r2, #0
   2acb8:	d0ae      	beq.n	2ac18 <dfu_target_modem_init+0xc8>
		LOG_INF("Setting offset to 0x%x", offset);
   2acba:	2703      	movs	r7, #3
   2acbc:	f04f 0000 	mov.w	r0, #0
   2acc0:	f367 0002 	bfi	r0, r7, #0, #3
   2acc4:	f36f 00c5 	bfc	r0, #3, #3
   2acc8:	f364 108f 	bfi	r0, r4, #6, #10
   2accc:	491c      	ldr	r1, [pc, #112]	; (2ad40 <dfu_target_modem_init+0x1f0>)
   2acce:	f01b fce8 	bl	466a2 <log_string_sync>
		len = sizeof(offset);
   2acd2:	2304      	movs	r3, #4
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   2acd4:	462a      	mov	r2, r5
   2acd6:	2107      	movs	r1, #7
   2acd8:	6830      	ldr	r0, [r6, #0]
		len = sizeof(offset);
   2acda:	9303      	str	r3, [sp, #12]
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   2acdc:	f7ff fe80 	bl	2a9e0 <setsockopt.constprop.3>
		if (err != 0) {
   2ace0:	2800      	cmp	r0, #0
   2ace2:	d099      	beq.n	2ac18 <dfu_target_modem_init+0xc8>
			LOG_INF("Error while setting offset: %d", offset);
   2ace4:	f04f 0000 	mov.w	r0, #0
   2ace8:	f367 0002 	bfi	r0, r7, #0, #3
   2acec:	f36f 00c5 	bfc	r0, #3, #3
   2acf0:	f364 108f 	bfi	r0, r4, #6, #10
   2acf4:	682a      	ldr	r2, [r5, #0]
   2acf6:	4913      	ldr	r1, [pc, #76]	; (2ad44 <dfu_target_modem_init+0x1f4>)
   2acf8:	f01b fcd3 	bl	466a2 <log_string_sync>
   2acfc:	e78c      	b.n	2ac18 <dfu_target_modem_init+0xc8>
   2acfe:	bf00      	nop
   2ad00:	20023978 	.word	0x20023978
   2ad04:	0004b6f3 	.word	0x0004b6f3
   2ad08:	0004b5bf 	.word	0x0004b5bf
   2ad0c:	0004b6c2 	.word	0x0004b6c2
   2ad10:	0004d039 	.word	0x0004d039
   2ad14:	00049060 	.word	0x00049060
   2ad18:	00049018 	.word	0x00049018
   2ad1c:	20024778 	.word	0x20024778
   2ad20:	0004f301 	.word	0x0004f301
   2ad24:	2002477c 	.word	0x2002477c
   2ad28:	0004f385 	.word	0x0004f385
   2ad2c:	0004f322 	.word	0x0004f322
   2ad30:	0004f33b 	.word	0x0004f33b
   2ad34:	0004f365 	.word	0x0004f365
   2ad38:	0004f36a 	.word	0x0004f36a
   2ad3c:	0004f395 	.word	0x0004f395
   2ad40:	0004f3b2 	.word	0x0004f3b2
   2ad44:	0004f3c9 	.word	0x0004f3c9

0002ad48 <dfu_target_modem_offset_get>:

int dfu_target_modem_offset_get(size_t *out)
{
	*out = offset;
   2ad48:	4b02      	ldr	r3, [pc, #8]	; (2ad54 <dfu_target_modem_offset_get+0xc>)
   2ad4a:	681b      	ldr	r3, [r3, #0]
   2ad4c:	6003      	str	r3, [r0, #0]
	return 0;
}
   2ad4e:	2000      	movs	r0, #0
   2ad50:	4770      	bx	lr
   2ad52:	bf00      	nop
   2ad54:	2002477c 	.word	0x2002477c

0002ad58 <dfu_target_modem_write>:

int dfu_target_modem_write(const void *const buf, size_t len)
{
   2ad58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = 0;
	int sent = 0;
	int modem_error = 0;

	sent = send(fd, buf, len, 0);
   2ad5a:	4b2f      	ldr	r3, [pc, #188]	; (2ae18 <dfu_target_modem_write+0xc0>)
	__ASSERT_NO_MSG(socket_ops);
   2ad5c:	4c2f      	ldr	r4, [pc, #188]	; (2ae1c <dfu_target_modem_write+0xc4>)
   2ad5e:	681f      	ldr	r7, [r3, #0]
   2ad60:	6823      	ldr	r3, [r4, #0]
{
   2ad62:	4605      	mov	r5, r0
   2ad64:	460e      	mov	r6, r1
   2ad66:	b94b      	cbnz	r3, 2ad7c <dfu_target_modem_write+0x24>
   2ad68:	492d      	ldr	r1, [pc, #180]	; (2ae20 <dfu_target_modem_write+0xc8>)
   2ad6a:	482e      	ldr	r0, [pc, #184]	; (2ae24 <dfu_target_modem_write+0xcc>)
   2ad6c:	237e      	movs	r3, #126	; 0x7e
   2ad6e:	4a2e      	ldr	r2, [pc, #184]	; (2ae28 <dfu_target_modem_write+0xd0>)
   2ad70:	f01b fc74 	bl	4665c <printk>
   2ad74:	217e      	movs	r1, #126	; 0x7e
   2ad76:	482c      	ldr	r0, [pc, #176]	; (2ae28 <dfu_target_modem_write+0xd0>)
   2ad78:	f01b fc7d 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   2ad7c:	6823      	ldr	r3, [r4, #0]
   2ad7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2ad80:	b94b      	cbnz	r3, 2ad96 <dfu_target_modem_write+0x3e>
   2ad82:	492a      	ldr	r1, [pc, #168]	; (2ae2c <dfu_target_modem_write+0xd4>)
   2ad84:	4827      	ldr	r0, [pc, #156]	; (2ae24 <dfu_target_modem_write+0xcc>)
   2ad86:	237f      	movs	r3, #127	; 0x7f
   2ad88:	4a27      	ldr	r2, [pc, #156]	; (2ae28 <dfu_target_modem_write+0xd0>)
   2ad8a:	f01b fc67 	bl	4665c <printk>
   2ad8e:	217f      	movs	r1, #127	; 0x7f
   2ad90:	4825      	ldr	r0, [pc, #148]	; (2ae28 <dfu_target_modem_write+0xd0>)
   2ad92:	f01b fc70 	bl	46676 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   2ad96:	6823      	ldr	r3, [r4, #0]
   2ad98:	4632      	mov	r2, r6
   2ad9a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   2ad9c:	4629      	mov	r1, r5
   2ad9e:	2300      	movs	r3, #0
   2ada0:	4638      	mov	r0, r7
   2ada2:	47a0      	blx	r4
	if (sent > 0) {
   2ada4:	2800      	cmp	r0, #0
   2ada6:	dc2e      	bgt.n	2ae06 <dfu_target_modem_write+0xae>
		return 0;
	}

	if (errno != ENOEXEC) {
   2ada8:	f01b fe8c 	bl	46ac4 <__errno>
   2adac:	6803      	ldr	r3, [r0, #0]
   2adae:	2b08      	cmp	r3, #8
   2adb0:	d12b      	bne.n	2ae0a <dfu_target_modem_write+0xb2>
		return -EFAULT;
	}

	modem_error = get_modem_error();
   2adb2:	f7ff fde7 	bl	2a984 <get_modem_error>
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   2adb6:	f04f 0400 	mov.w	r4, #0
   2adba:	2301      	movs	r3, #1
   2adbc:	4a1c      	ldr	r2, [pc, #112]	; (2ae30 <dfu_target_modem_write+0xd8>)
   2adbe:	f363 0402 	bfi	r4, r3, #0, #3
   2adc2:	4b1c      	ldr	r3, [pc, #112]	; (2ae34 <dfu_target_modem_write+0xdc>)
   2adc4:	f36f 04c5 	bfc	r4, #3, #3
   2adc8:	1a9b      	subs	r3, r3, r2
   2adca:	08db      	lsrs	r3, r3, #3
	modem_error = get_modem_error();
   2adcc:	4607      	mov	r7, r0
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   2adce:	f363 148f 	bfi	r4, r3, #6, #10
   2add2:	f01b fe77 	bl	46ac4 <__errno>
   2add6:	463b      	mov	r3, r7
   2add8:	6802      	ldr	r2, [r0, #0]
   2adda:	4917      	ldr	r1, [pc, #92]	; (2ae38 <dfu_target_modem_write+0xe0>)
   2addc:	4620      	mov	r0, r4
   2adde:	f01b fc60 	bl	466a2 <log_string_sync>
	switch (modem_error) {
   2ade2:	f117 0f0e 	cmn.w	r7, #14
   2ade6:	d006      	beq.n	2adf6 <dfu_target_modem_write+0x9e>
		} else {
			return 0;
		}
	}

	return -EFAULT;
   2ade8:	3709      	adds	r7, #9
   2adea:	bf0c      	ite	eq
   2adec:	f06f 0015 	mvneq.w	r0, #21
   2adf0:	f06f 000d 	mvnne.w	r0, #13
}
   2adf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		delete_banked_modem_fw();
   2adf6:	f7ff fe2b 	bl	2aa50 <delete_banked_modem_fw>
		err = dfu_target_modem_write(buf, len);
   2adfa:	4631      	mov	r1, r6
   2adfc:	4628      	mov	r0, r5
   2adfe:	f7ff ffab 	bl	2ad58 <dfu_target_modem_write>
		if (err < 0) {
   2ae02:	2800      	cmp	r0, #0
   2ae04:	db04      	blt.n	2ae10 <dfu_target_modem_write+0xb8>
			return 0;
   2ae06:	2000      	movs	r0, #0
   2ae08:	e7f4      	b.n	2adf4 <dfu_target_modem_write+0x9c>
		return -EFAULT;
   2ae0a:	f06f 000d 	mvn.w	r0, #13
   2ae0e:	e7f1      	b.n	2adf4 <dfu_target_modem_write+0x9c>
			return -EINVAL;
   2ae10:	f06f 0015 	mvn.w	r0, #21
   2ae14:	e7ee      	b.n	2adf4 <dfu_target_modem_write+0x9c>
   2ae16:	bf00      	nop
   2ae18:	20024778 	.word	0x20024778
   2ae1c:	20023978 	.word	0x20023978
   2ae20:	0004b6f3 	.word	0x0004b6f3
   2ae24:	0004b5bf 	.word	0x0004b5bf
   2ae28:	0004b6c2 	.word	0x0004b6c2
   2ae2c:	0004d071 	.word	0x0004d071
   2ae30:	00049018 	.word	0x00049018
   2ae34:	00049060 	.word	0x00049060
   2ae38:	0004f3e8 	.word	0x0004f3e8

0002ae3c <dfu_target_modem_done>:

int dfu_target_modem_done(bool successful)
{
   2ae3c:	b570      	push	{r4, r5, r6, lr}
   2ae3e:	4b3d      	ldr	r3, [pc, #244]	; (2af34 <dfu_target_modem_done+0xf8>)
   2ae40:	4c3d      	ldr	r4, [pc, #244]	; (2af38 <dfu_target_modem_done+0xfc>)
   2ae42:	2203      	movs	r2, #3
   2ae44:	1ae4      	subs	r4, r4, r3
   2ae46:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2ae4a:	4e3c      	ldr	r6, [pc, #240]	; (2af3c <dfu_target_modem_done+0x100>)
	int err = 0;

	if (successful) {
   2ae4c:	2800      	cmp	r0, #0
   2ae4e:	d062      	beq.n	2af16 <dfu_target_modem_done+0xda>
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   2ae50:	f04f 0000 	mov.w	r0, #0
   2ae54:	f362 0002 	bfi	r0, r2, #0, #3
   2ae58:	f36f 00c5 	bfc	r0, #3, #3
   2ae5c:	f364 108f 	bfi	r0, r4, #6, #10
   2ae60:	4937      	ldr	r1, [pc, #220]	; (2af40 <dfu_target_modem_done+0x104>)
   2ae62:	f01b fc1e 	bl	466a2 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_APPLY, NULL, 0);
   2ae66:	2300      	movs	r3, #0
   2ae68:	2104      	movs	r1, #4
   2ae6a:	461a      	mov	r2, r3
   2ae6c:	6830      	ldr	r0, [r6, #0]
   2ae6e:	f7ff fdb7 	bl	2a9e0 <setsockopt.constprop.3>
	if (err < 0) {
   2ae72:	1e05      	subs	r5, r0, #0
   2ae74:	da15      	bge.n	2aea2 <dfu_target_modem_done+0x66>
		if (errno == ENOEXEC) {
   2ae76:	f01b fe25 	bl	46ac4 <__errno>
   2ae7a:	6803      	ldr	r3, [r0, #0]
   2ae7c:	2b08      	cmp	r3, #8
   2ae7e:	f04f 0301 	mov.w	r3, #1
   2ae82:	d13d      	bne.n	2af00 <dfu_target_modem_done+0xc4>
			LOG_ERR("SO_DFU_APPLY failed, modem error %d",
   2ae84:	f04f 0500 	mov.w	r5, #0
   2ae88:	f363 0502 	bfi	r5, r3, #0, #3
   2ae8c:	f7ff fd7a 	bl	2a984 <get_modem_error>
   2ae90:	f36f 05c5 	bfc	r5, #3, #3
   2ae94:	f364 158f 	bfi	r5, r4, #6, #10
   2ae98:	4602      	mov	r2, r0
   2ae9a:	4628      	mov	r0, r5
   2ae9c:	4929      	ldr	r1, [pc, #164]	; (2af44 <dfu_target_modem_done+0x108>)
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   2ae9e:	f01b fc00 	bl	466a2 <log_string_sync>
	__ASSERT_NO_MSG(socket_ops);
   2aea2:	4d29      	ldr	r5, [pc, #164]	; (2af48 <dfu_target_modem_done+0x10c>)
	} else {
		LOG_INF("Modem upgrade aborted.");
	}


	err = close(fd);
   2aea4:	6836      	ldr	r6, [r6, #0]
   2aea6:	682b      	ldr	r3, [r5, #0]
   2aea8:	b94b      	cbnz	r3, 2aebe <dfu_target_modem_done+0x82>
   2aeaa:	4928      	ldr	r1, [pc, #160]	; (2af4c <dfu_target_modem_done+0x110>)
   2aeac:	4828      	ldr	r0, [pc, #160]	; (2af50 <dfu_target_modem_done+0x114>)
   2aeae:	2321      	movs	r3, #33	; 0x21
   2aeb0:	4a28      	ldr	r2, [pc, #160]	; (2af54 <dfu_target_modem_done+0x118>)
   2aeb2:	f01b fbd3 	bl	4665c <printk>
   2aeb6:	2121      	movs	r1, #33	; 0x21
   2aeb8:	4826      	ldr	r0, [pc, #152]	; (2af54 <dfu_target_modem_done+0x118>)
   2aeba:	f01b fbdc 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   2aebe:	682b      	ldr	r3, [r5, #0]
   2aec0:	685b      	ldr	r3, [r3, #4]
   2aec2:	b94b      	cbnz	r3, 2aed8 <dfu_target_modem_done+0x9c>
   2aec4:	4924      	ldr	r1, [pc, #144]	; (2af58 <dfu_target_modem_done+0x11c>)
   2aec6:	4822      	ldr	r0, [pc, #136]	; (2af50 <dfu_target_modem_done+0x114>)
   2aec8:	2322      	movs	r3, #34	; 0x22
   2aeca:	4a22      	ldr	r2, [pc, #136]	; (2af54 <dfu_target_modem_done+0x118>)
   2aecc:	f01b fbc6 	bl	4665c <printk>
   2aed0:	2122      	movs	r1, #34	; 0x22
   2aed2:	4820      	ldr	r0, [pc, #128]	; (2af54 <dfu_target_modem_done+0x118>)
   2aed4:	f01b fbcf 	bl	46676 <assert_post_action>
	return socket_ops->close(sock);
   2aed8:	682b      	ldr	r3, [r5, #0]
   2aeda:	4630      	mov	r0, r6
   2aedc:	685b      	ldr	r3, [r3, #4]
   2aede:	4798      	blx	r3
	if (err < 0) {
   2aee0:	1e05      	subs	r5, r0, #0
   2aee2:	da25      	bge.n	2af30 <dfu_target_modem_done+0xf4>
		LOG_ERR("Failed to close modem DFU socket.");
   2aee4:	f04f 0000 	mov.w	r0, #0
   2aee8:	2301      	movs	r3, #1
   2aeea:	f363 0002 	bfi	r0, r3, #0, #3
   2aeee:	f36f 00c5 	bfc	r0, #3, #3
   2aef2:	f364 108f 	bfi	r0, r4, #6, #10
   2aef6:	4919      	ldr	r1, [pc, #100]	; (2af5c <dfu_target_modem_done+0x120>)
   2aef8:	f01b fbd3 	bl	466a2 <log_string_sync>
		return err;
	}

	return 0;
}
   2aefc:	4628      	mov	r0, r5
   2aefe:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   2af00:	f04f 0000 	mov.w	r0, #0
   2af04:	f363 0002 	bfi	r0, r3, #0, #3
   2af08:	f36f 00c5 	bfc	r0, #3, #3
   2af0c:	f364 108f 	bfi	r0, r4, #6, #10
   2af10:	462a      	mov	r2, r5
   2af12:	490c      	ldr	r1, [pc, #48]	; (2af44 <dfu_target_modem_done+0x108>)
   2af14:	e7c3      	b.n	2ae9e <dfu_target_modem_done+0x62>
		LOG_INF("Modem upgrade aborted.");
   2af16:	f04f 0300 	mov.w	r3, #0
   2af1a:	f362 0302 	bfi	r3, r2, #0, #3
   2af1e:	f360 03c5 	bfi	r3, r0, #3, #3
   2af22:	f364 138f 	bfi	r3, r4, #6, #10
   2af26:	490e      	ldr	r1, [pc, #56]	; (2af60 <dfu_target_modem_done+0x124>)
   2af28:	4618      	mov	r0, r3
   2af2a:	f01b fbba 	bl	466a2 <log_string_sync>
   2af2e:	e7b8      	b.n	2aea2 <dfu_target_modem_done+0x66>
	return 0;
   2af30:	2500      	movs	r5, #0
   2af32:	e7e3      	b.n	2aefc <dfu_target_modem_done+0xc0>
   2af34:	00049018 	.word	0x00049018
   2af38:	00049060 	.word	0x00049060
   2af3c:	20024778 	.word	0x20024778
   2af40:	0004f275 	.word	0x0004f275
   2af44:	0004f2a4 	.word	0x0004f2a4
   2af48:	20023978 	.word	0x20023978
   2af4c:	0004b6f3 	.word	0x0004b6f3
   2af50:	0004b5bf 	.word	0x0004b5bf
   2af54:	0004b6c2 	.word	0x0004b6c2
   2af58:	0004d027 	.word	0x0004d027
   2af5c:	0004f2df 	.word	0x0004f2df
   2af60:	0004f2c8 	.word	0x0004f2c8

0002af64 <dfu_target_mcuboot_identify>:
}

bool dfu_target_mcuboot_identify(const void *const buf)
{
	/* MCUBoot headers starts with 4 byte magic word */
	return *((const u32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   2af64:	6800      	ldr	r0, [r0, #0]
}
   2af66:	4b02      	ldr	r3, [pc, #8]	; (2af70 <dfu_target_mcuboot_identify+0xc>)
   2af68:	1ac3      	subs	r3, r0, r3
   2af6a:	4258      	negs	r0, r3
   2af6c:	4158      	adcs	r0, r3
   2af6e:	4770      	bx	lr
   2af70:	96f3b83d 	.word	0x96f3b83d

0002af74 <dfu_target_mcuboot_init>:

int dfu_target_mcuboot_init(size_t file_size)
{
   2af74:	b538      	push	{r3, r4, r5, lr}
   2af76:	4605      	mov	r5, r0
	int err = flash_img_init(&flash_img);
   2af78:	4818      	ldr	r0, [pc, #96]	; (2afdc <dfu_target_mcuboot_init+0x68>)
   2af7a:	f01b fc54 	bl	46826 <flash_img_init>

	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   2af7e:	f5b5 2fd2 	cmp.w	r5, #430080	; 0x69000
	int err = flash_img_init(&flash_img);
   2af82:	4604      	mov	r4, r0
	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   2af84:	d913      	bls.n	2afae <dfu_target_mcuboot_init+0x3a>
		LOG_ERR("Requested file too big to fit in flash");
   2af86:	2301      	movs	r3, #1
   2af88:	f04f 0000 	mov.w	r0, #0
   2af8c:	4a14      	ldr	r2, [pc, #80]	; (2afe0 <dfu_target_mcuboot_init+0x6c>)
   2af8e:	f363 0002 	bfi	r0, r3, #0, #3
   2af92:	4b14      	ldr	r3, [pc, #80]	; (2afe4 <dfu_target_mcuboot_init+0x70>)
   2af94:	f36f 00c5 	bfc	r0, #3, #3
   2af98:	1a9b      	subs	r3, r3, r2
   2af9a:	08db      	lsrs	r3, r3, #3
   2af9c:	f363 108f 	bfi	r0, r3, #6, #10
   2afa0:	4911      	ldr	r1, [pc, #68]	; (2afe8 <dfu_target_mcuboot_init+0x74>)
   2afa2:	f01b fb7e 	bl	466a2 <log_string_sync>
		return -EFBIG;
   2afa6:	f06f 041a 	mvn.w	r4, #26
	}

	offset = 0;

	return 0;
}
   2afaa:	4620      	mov	r0, r4
   2afac:	bd38      	pop	{r3, r4, r5, pc}
	if (err != 0) {
   2afae:	b188      	cbz	r0, 2afd4 <dfu_target_mcuboot_init+0x60>
		LOG_ERR("flash_img_init error %d", err);
   2afb0:	2301      	movs	r3, #1
   2afb2:	f04f 0000 	mov.w	r0, #0
   2afb6:	4a0a      	ldr	r2, [pc, #40]	; (2afe0 <dfu_target_mcuboot_init+0x6c>)
   2afb8:	f363 0002 	bfi	r0, r3, #0, #3
   2afbc:	4b09      	ldr	r3, [pc, #36]	; (2afe4 <dfu_target_mcuboot_init+0x70>)
   2afbe:	f36f 00c5 	bfc	r0, #3, #3
   2afc2:	1a9b      	subs	r3, r3, r2
   2afc4:	08db      	lsrs	r3, r3, #3
   2afc6:	f363 108f 	bfi	r0, r3, #6, #10
   2afca:	4622      	mov	r2, r4
   2afcc:	4907      	ldr	r1, [pc, #28]	; (2afec <dfu_target_mcuboot_init+0x78>)
   2afce:	f01b fb68 	bl	466a2 <log_string_sync>
		return err;
   2afd2:	e7ea      	b.n	2afaa <dfu_target_mcuboot_init+0x36>
	offset = 0;
   2afd4:	4b06      	ldr	r3, [pc, #24]	; (2aff0 <dfu_target_mcuboot_init+0x7c>)
   2afd6:	6018      	str	r0, [r3, #0]
	return 0;
   2afd8:	e7e7      	b.n	2afaa <dfu_target_mcuboot_init+0x36>
   2afda:	bf00      	nop
   2afdc:	20024780 	.word	0x20024780
   2afe0:	00049018 	.word	0x00049018
   2afe4:	00049058 	.word	0x00049058
   2afe8:	0004f4d6 	.word	0x0004f4d6
   2afec:	0004f4fd 	.word	0x0004f4fd
   2aff0:	20024990 	.word	0x20024990

0002aff4 <dfu_target_mcuboot_offset_get>:

int dfu_target_mcuboot_offset_get(size_t *out)
{
	*out = offset;
   2aff4:	4b02      	ldr	r3, [pc, #8]	; (2b000 <dfu_target_mcuboot_offset_get+0xc>)
   2aff6:	681b      	ldr	r3, [r3, #0]
   2aff8:	6003      	str	r3, [r0, #0]
	return 0;
}
   2affa:	2000      	movs	r0, #0
   2affc:	4770      	bx	lr
   2affe:	bf00      	nop
   2b000:	20024990 	.word	0x20024990

0002b004 <dfu_target_mcuboot_write>:

int dfu_target_mcuboot_write(const void *const buf, size_t len)
{
   2b004:	b538      	push	{r3, r4, r5, lr}
	int err = flash_img_buffered_write(&flash_img, (u8_t *)buf, len, false);
   2b006:	460a      	mov	r2, r1
{
   2b008:	460d      	mov	r5, r1
	int err = flash_img_buffered_write(&flash_img, (u8_t *)buf, len, false);
   2b00a:	2300      	movs	r3, #0
   2b00c:	4601      	mov	r1, r0
   2b00e:	480e      	ldr	r0, [pc, #56]	; (2b048 <dfu_target_mcuboot_write+0x44>)
   2b010:	f01b fbc1 	bl	46796 <flash_img_buffered_write>

	if (err != 0) {
   2b014:	4604      	mov	r4, r0
   2b016:	b190      	cbz	r0, 2b03e <dfu_target_mcuboot_write+0x3a>
		LOG_ERR("flash_img_buffered_write error %d", err);
   2b018:	2301      	movs	r3, #1
   2b01a:	f04f 0000 	mov.w	r0, #0
   2b01e:	4a0b      	ldr	r2, [pc, #44]	; (2b04c <dfu_target_mcuboot_write+0x48>)
   2b020:	f363 0002 	bfi	r0, r3, #0, #3
   2b024:	4b0a      	ldr	r3, [pc, #40]	; (2b050 <dfu_target_mcuboot_write+0x4c>)
   2b026:	f36f 00c5 	bfc	r0, #3, #3
   2b02a:	1a9b      	subs	r3, r3, r2
   2b02c:	08db      	lsrs	r3, r3, #3
   2b02e:	f363 108f 	bfi	r0, r3, #6, #10
   2b032:	4622      	mov	r2, r4
   2b034:	4907      	ldr	r1, [pc, #28]	; (2b054 <dfu_target_mcuboot_write+0x50>)
   2b036:	f01b fb34 	bl	466a2 <log_string_sync>
	}

	offset += len;

	return 0;
}
   2b03a:	4620      	mov	r0, r4
   2b03c:	bd38      	pop	{r3, r4, r5, pc}
	offset += len;
   2b03e:	4b06      	ldr	r3, [pc, #24]	; (2b058 <dfu_target_mcuboot_write+0x54>)
   2b040:	6819      	ldr	r1, [r3, #0]
   2b042:	4429      	add	r1, r5
   2b044:	6019      	str	r1, [r3, #0]
	return 0;
   2b046:	e7f8      	b.n	2b03a <dfu_target_mcuboot_write+0x36>
   2b048:	20024780 	.word	0x20024780
   2b04c:	00049018 	.word	0x00049018
   2b050:	00049058 	.word	0x00049058
   2b054:	0004f515 	.word	0x0004f515
   2b058:	20024990 	.word	0x20024990

0002b05c <dfu_target_mcuboot_done>:

int dfu_target_mcuboot_done(bool successful)
{
   2b05c:	b538      	push	{r3, r4, r5, lr}
   2b05e:	4d22      	ldr	r5, [pc, #136]	; (2b0e8 <dfu_target_mcuboot_done+0x8c>)
   2b060:	4b22      	ldr	r3, [pc, #136]	; (2b0ec <dfu_target_mcuboot_done+0x90>)
	if (successful) {
   2b062:	4604      	mov	r4, r0
   2b064:	1aed      	subs	r5, r5, r3
   2b066:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2b06a:	b388      	cbz	r0, 2b0d0 <dfu_target_mcuboot_done+0x74>
		int err = flash_img_buffered_write(&flash_img, NULL, 0, true);
   2b06c:	2200      	movs	r2, #0
   2b06e:	2301      	movs	r3, #1
   2b070:	4611      	mov	r1, r2
   2b072:	481f      	ldr	r0, [pc, #124]	; (2b0f0 <dfu_target_mcuboot_done+0x94>)
   2b074:	f01b fb8f 	bl	46796 <flash_img_buffered_write>

		if (err != 0) {
   2b078:	4604      	mov	r4, r0
   2b07a:	b170      	cbz	r0, 2b09a <dfu_target_mcuboot_done+0x3e>
			LOG_ERR("flash_img_buffered_write error %d", err);
   2b07c:	f04f 0000 	mov.w	r0, #0
   2b080:	2301      	movs	r3, #1
   2b082:	4622      	mov	r2, r4
   2b084:	f363 0002 	bfi	r0, r3, #0, #3
   2b088:	f36f 00c5 	bfc	r0, #3, #3
   2b08c:	4919      	ldr	r1, [pc, #100]	; (2b0f4 <dfu_target_mcuboot_done+0x98>)
   2b08e:	f365 108f 	bfi	r0, r5, #6, #10
			return err;
		}

		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
		if (err != 0) {
			LOG_ERR("boot_request_upgrade error %d", err);
   2b092:	f01b fb06 	bl	466a2 <log_string_sync>
	} else {
		LOG_INF("MCUBoot image upgrade aborted.");
	}

	return 0;
}
   2b096:	4620      	mov	r0, r4
   2b098:	bd38      	pop	{r3, r4, r5, pc}
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
   2b09a:	f7f6 fbc7 	bl	2182c <boot_request_upgrade>
		if (err != 0) {
   2b09e:	4604      	mov	r4, r0
			LOG_ERR("boot_request_upgrade error %d", err);
   2b0a0:	f04f 0000 	mov.w	r0, #0
		if (err != 0) {
   2b0a4:	b14c      	cbz	r4, 2b0ba <dfu_target_mcuboot_done+0x5e>
			LOG_ERR("boot_request_upgrade error %d", err);
   2b0a6:	2301      	movs	r3, #1
   2b0a8:	f363 0002 	bfi	r0, r3, #0, #3
   2b0ac:	f36f 00c5 	bfc	r0, #3, #3
   2b0b0:	f365 108f 	bfi	r0, r5, #6, #10
   2b0b4:	4622      	mov	r2, r4
   2b0b6:	4910      	ldr	r1, [pc, #64]	; (2b0f8 <dfu_target_mcuboot_done+0x9c>)
   2b0b8:	e7eb      	b.n	2b092 <dfu_target_mcuboot_done+0x36>
		LOG_INF("MCUBoot image upgrade scheduled. Reset the device to "
   2b0ba:	2303      	movs	r3, #3
   2b0bc:	f363 0002 	bfi	r0, r3, #0, #3
   2b0c0:	f364 00c5 	bfi	r0, r4, #3, #3
   2b0c4:	490d      	ldr	r1, [pc, #52]	; (2b0fc <dfu_target_mcuboot_done+0xa0>)
   2b0c6:	f365 108f 	bfi	r0, r5, #6, #10
		LOG_INF("MCUBoot image upgrade aborted.");
   2b0ca:	f01b faea 	bl	466a2 <log_string_sync>
   2b0ce:	e7e2      	b.n	2b096 <dfu_target_mcuboot_done+0x3a>
   2b0d0:	f04f 0000 	mov.w	r0, #0
   2b0d4:	2303      	movs	r3, #3
   2b0d6:	f363 0002 	bfi	r0, r3, #0, #3
   2b0da:	f364 00c5 	bfi	r0, r4, #3, #3
   2b0de:	f365 108f 	bfi	r0, r5, #6, #10
   2b0e2:	4907      	ldr	r1, [pc, #28]	; (2b100 <dfu_target_mcuboot_done+0xa4>)
   2b0e4:	e7f1      	b.n	2b0ca <dfu_target_mcuboot_done+0x6e>
   2b0e6:	bf00      	nop
   2b0e8:	00049058 	.word	0x00049058
   2b0ec:	00049018 	.word	0x00049018
   2b0f0:	20024780 	.word	0x20024780
   2b0f4:	0004f515 	.word	0x0004f515
   2b0f8:	0004f45e 	.word	0x0004f45e
   2b0fc:	0004f47c 	.word	0x0004f47c
   2b100:	0004f4b7 	.word	0x0004f4b7

0002b104 <abi_getter>:
extern const struct fw_info_abi * const _ext_abis_start[];
extern const u32_t _ext_abis_size;
__noinit fw_info_abi_getter abi_getter_in;

int abi_getter(u32_t id, u32_t index, const struct fw_info_abi **abi)
{
   2b104:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!abi) {
   2b106:	b1da      	cbz	r2, 2b140 <abi_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   2b108:	2300      	movs	r3, #0
	bool id_found = false;
   2b10a:	461c      	mov	r4, r3
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   2b10c:	4e0e      	ldr	r6, [pc, #56]	; (2b148 <abi_getter+0x44>)
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
   2b10e:	4f0f      	ldr	r7, [pc, #60]	; (2b14c <abi_getter+0x48>)
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   2b110:	42b3      	cmp	r3, r6
   2b112:	d306      	bcc.n	2b122 <abi_getter+0x1e>
				*abi = ext_abi;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
   2b114:	2c00      	cmp	r4, #0
   2b116:	bf14      	ite	ne
   2b118:	f06f 0008 	mvnne.w	r0, #8
   2b11c:	f06f 0001 	mvneq.w	r0, #1
   2b120:	e009      	b.n	2b136 <abi_getter+0x32>
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
   2b122:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
		if (ext_abi->abi_id == id) {
   2b126:	f8d5 c00c 	ldr.w	ip, [r5, #12]
   2b12a:	4560      	cmp	r0, ip
   2b12c:	d106      	bne.n	2b13c <abi_getter+0x38>
			if (index-- == 0) {
   2b12e:	1e4c      	subs	r4, r1, #1
   2b130:	b911      	cbnz	r1, 2b138 <abi_getter+0x34>
				return 0;
   2b132:	4608      	mov	r0, r1
				*abi = ext_abi;
   2b134:	6015      	str	r5, [r2, #0]
}
   2b136:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
   2b138:	4621      	mov	r1, r4
			id_found = true;
   2b13a:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   2b13c:	3301      	adds	r3, #1
   2b13e:	e7e7      	b.n	2b110 <abi_getter+0xc>
		return -EFAULT;
   2b140:	f06f 000d 	mvn.w	r0, #13
   2b144:	e7f7      	b.n	2b136 <abi_getter+0x32>
   2b146:	bf00      	nop
   2b148:	00000000 	.word	0x00000000
   2b14c:	00050a58 	.word	0x00050a58

0002b150 <close>:
{
   2b150:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   2b152:	4c10      	ldr	r4, [pc, #64]	; (2b194 <close+0x44>)
{
   2b154:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   2b156:	6823      	ldr	r3, [r4, #0]
   2b158:	b94b      	cbnz	r3, 2b16e <close+0x1e>
   2b15a:	490f      	ldr	r1, [pc, #60]	; (2b198 <close+0x48>)
   2b15c:	480f      	ldr	r0, [pc, #60]	; (2b19c <close+0x4c>)
   2b15e:	2321      	movs	r3, #33	; 0x21
   2b160:	4a0f      	ldr	r2, [pc, #60]	; (2b1a0 <close+0x50>)
   2b162:	f01b fa7b 	bl	4665c <printk>
   2b166:	2121      	movs	r1, #33	; 0x21
   2b168:	480d      	ldr	r0, [pc, #52]	; (2b1a0 <close+0x50>)
   2b16a:	f01b fa84 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   2b16e:	6823      	ldr	r3, [r4, #0]
   2b170:	685b      	ldr	r3, [r3, #4]
   2b172:	b94b      	cbnz	r3, 2b188 <close+0x38>
   2b174:	490b      	ldr	r1, [pc, #44]	; (2b1a4 <close+0x54>)
   2b176:	4809      	ldr	r0, [pc, #36]	; (2b19c <close+0x4c>)
   2b178:	2322      	movs	r3, #34	; 0x22
   2b17a:	4a09      	ldr	r2, [pc, #36]	; (2b1a0 <close+0x50>)
   2b17c:	f01b fa6e 	bl	4665c <printk>
   2b180:	2122      	movs	r1, #34	; 0x22
   2b182:	4807      	ldr	r0, [pc, #28]	; (2b1a0 <close+0x50>)
   2b184:	f01b fa77 	bl	46676 <assert_post_action>
	return socket_ops->close(sock);
   2b188:	6823      	ldr	r3, [r4, #0]
   2b18a:	4628      	mov	r0, r5
}
   2b18c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   2b190:	685b      	ldr	r3, [r3, #4]
   2b192:	4718      	bx	r3
   2b194:	20023978 	.word	0x20023978
   2b198:	0004b6f3 	.word	0x0004b6f3
   2b19c:	0004b5bf 	.word	0x0004b5bf
   2b1a0:	0004b6c2 	.word	0x0004b6c2
   2b1a4:	0004d027 	.word	0x0004d027

0002b1a8 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   2b1a8:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   2b1aa:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   2b1ac:	b118      	cbz	r0, 2b1b6 <callback_worker+0xe>
		data->callback(data->data);
   2b1ae:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   2b1b2:	300c      	adds	r0, #12
   2b1b4:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   2b1b6:	a901      	add	r1, sp, #4
   2b1b8:	4802      	ldr	r0, [pc, #8]	; (2b1c4 <callback_worker+0x1c>)
   2b1ba:	f010 fe65 	bl	3be88 <k_mem_slab_free>
}
   2b1be:	b003      	add	sp, #12
   2b1c0:	f85d fb04 	ldr.w	pc, [sp], #4
   2b1c4:	200322c0 	.word	0x200322c0

0002b1c8 <open_socket>:
{
   2b1c8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(socket_ops);
   2b1ca:	4c16      	ldr	r4, [pc, #88]	; (2b224 <open_socket+0x5c>)
   2b1cc:	6823      	ldr	r3, [r4, #0]
   2b1ce:	b94b      	cbnz	r3, 2b1e4 <open_socket+0x1c>
   2b1d0:	4915      	ldr	r1, [pc, #84]	; (2b228 <open_socket+0x60>)
   2b1d2:	4816      	ldr	r0, [pc, #88]	; (2b22c <open_socket+0x64>)
   2b1d4:	2319      	movs	r3, #25
   2b1d6:	4a16      	ldr	r2, [pc, #88]	; (2b230 <open_socket+0x68>)
   2b1d8:	f01b fa40 	bl	4665c <printk>
   2b1dc:	2119      	movs	r1, #25
   2b1de:	4814      	ldr	r0, [pc, #80]	; (2b230 <open_socket+0x68>)
   2b1e0:	f01b fa49 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   2b1e4:	6823      	ldr	r3, [r4, #0]
   2b1e6:	681b      	ldr	r3, [r3, #0]
   2b1e8:	b94b      	cbnz	r3, 2b1fe <open_socket+0x36>
   2b1ea:	4912      	ldr	r1, [pc, #72]	; (2b234 <open_socket+0x6c>)
   2b1ec:	480f      	ldr	r0, [pc, #60]	; (2b22c <open_socket+0x64>)
   2b1ee:	231a      	movs	r3, #26
   2b1f0:	4a0f      	ldr	r2, [pc, #60]	; (2b230 <open_socket+0x68>)
   2b1f2:	f01b fa33 	bl	4665c <printk>
   2b1f6:	211a      	movs	r1, #26
   2b1f8:	480d      	ldr	r0, [pc, #52]	; (2b230 <open_socket+0x68>)
   2b1fa:	f01b fa3c 	bl	46676 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   2b1fe:	6823      	ldr	r3, [r4, #0]
   2b200:	f240 2201 	movw	r2, #513	; 0x201
   2b204:	681b      	ldr	r3, [r3, #0]
   2b206:	2100      	movs	r1, #0
   2b208:	2066      	movs	r0, #102	; 0x66
   2b20a:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   2b20c:	4b0a      	ldr	r3, [pc, #40]	; (2b238 <open_socket+0x70>)
   2b20e:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   2b210:	3001      	adds	r0, #1
   2b212:	d104      	bne.n	2b21e <open_socket+0x56>
		return -errno;
   2b214:	f01b fc56 	bl	46ac4 <__errno>
   2b218:	6800      	ldr	r0, [r0, #0]
   2b21a:	4240      	negs	r0, r0
}
   2b21c:	bd10      	pop	{r4, pc}
	return 0;
   2b21e:	2000      	movs	r0, #0
   2b220:	e7fc      	b.n	2b21c <open_socket+0x54>
   2b222:	bf00      	nop
   2b224:	20023978 	.word	0x20023978
   2b228:	0004b6f3 	.word	0x0004b6f3
   2b22c:	0004b5bf 	.word	0x0004b5bf
   2b230:	0004b6c2 	.word	0x0004b6c2
   2b234:	0004d039 	.word	0x0004d039
   2b238:	20024994 	.word	0x20024994

0002b23c <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   2b23c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2b240:	4680      	mov	r8, r0
   2b242:	460d      	mov	r5, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   2b244:	f015 f99e 	bl	40584 <strlen>
	__ASSERT_NO_MSG(socket_ops);
   2b248:	4c32      	ldr	r4, [pc, #200]	; (2b314 <at_write+0xd8>)
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2b24a:	4b33      	ldr	r3, [pc, #204]	; (2b318 <at_write+0xdc>)
	int bytes_to_send = strlen(cmd);
   2b24c:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2b24e:	681f      	ldr	r7, [r3, #0]
   2b250:	6823      	ldr	r3, [r4, #0]
   2b252:	b94b      	cbnz	r3, 2b268 <at_write+0x2c>
   2b254:	4931      	ldr	r1, [pc, #196]	; (2b31c <at_write+0xe0>)
   2b256:	4832      	ldr	r0, [pc, #200]	; (2b320 <at_write+0xe4>)
   2b258:	237e      	movs	r3, #126	; 0x7e
   2b25a:	4a32      	ldr	r2, [pc, #200]	; (2b324 <at_write+0xe8>)
   2b25c:	f01b f9fe 	bl	4665c <printk>
   2b260:	217e      	movs	r1, #126	; 0x7e
   2b262:	4830      	ldr	r0, [pc, #192]	; (2b324 <at_write+0xe8>)
   2b264:	f01b fa07 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   2b268:	6823      	ldr	r3, [r4, #0]
   2b26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b26c:	b94b      	cbnz	r3, 2b282 <at_write+0x46>
   2b26e:	492e      	ldr	r1, [pc, #184]	; (2b328 <at_write+0xec>)
   2b270:	482b      	ldr	r0, [pc, #172]	; (2b320 <at_write+0xe4>)
   2b272:	237f      	movs	r3, #127	; 0x7f
   2b274:	4a2b      	ldr	r2, [pc, #172]	; (2b324 <at_write+0xe8>)
   2b276:	f01b f9f1 	bl	4665c <printk>
   2b27a:	217f      	movs	r1, #127	; 0x7f
   2b27c:	4829      	ldr	r0, [pc, #164]	; (2b324 <at_write+0xe8>)
   2b27e:	f01b f9fa 	bl	46676 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   2b282:	6823      	ldr	r3, [r4, #0]
   2b284:	4632      	mov	r2, r6
   2b286:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   2b288:	4641      	mov	r1, r8
   2b28a:	2300      	movs	r3, #0
   2b28c:	4638      	mov	r0, r7
   2b28e:	47a0      	blx	r4

	if (bytes_sent == -1) {
   2b290:	1c43      	adds	r3, r0, #1
   2b292:	4604      	mov	r4, r0
   2b294:	d122      	bne.n	2b2dc <at_write+0xa0>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   2b296:	2601      	movs	r6, #1
   2b298:	f04f 0400 	mov.w	r4, #0
   2b29c:	4a23      	ldr	r2, [pc, #140]	; (2b32c <at_write+0xf0>)
   2b29e:	4b24      	ldr	r3, [pc, #144]	; (2b330 <at_write+0xf4>)
   2b2a0:	f366 0402 	bfi	r4, r6, #0, #3
   2b2a4:	1a9b      	subs	r3, r3, r2
   2b2a6:	08db      	lsrs	r3, r3, #3
   2b2a8:	f36f 04c5 	bfc	r4, #3, #3
   2b2ac:	f363 148f 	bfi	r4, r3, #6, #10
   2b2b0:	f01b fc08 	bl	46ac4 <__errno>
   2b2b4:	491f      	ldr	r1, [pc, #124]	; (2b334 <at_write+0xf8>)
   2b2b6:	6802      	ldr	r2, [r0, #0]
   2b2b8:	4620      	mov	r0, r4
   2b2ba:	f01b f9f2 	bl	466a2 <log_string_sync>
		ret.code  = -errno;
   2b2be:	f01b fc01 	bl	46ac4 <__errno>
   2b2c2:	6803      	ldr	r3, [r0, #0]
		ret.state = AT_CMD_ERROR;
   2b2c4:	f88d 6004 	strb.w	r6, [sp, #4]
		ret.code  = -errno;
   2b2c8:	425b      	negs	r3, r3
   2b2ca:	9300      	str	r3, [sp, #0]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   2b2cc:	b115      	cbz	r5, 2b2d4 <at_write+0x98>
		*state = ret.state;
   2b2ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2b2d2:	702b      	strb	r3, [r5, #0]
	}

	return ret.code;
}
   2b2d4:	9800      	ldr	r0, [sp, #0]
   2b2d6:	b002      	add	sp, #8
   2b2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke3(*(u32_t *)&q, *(u32_t *)&data, *(u32_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(q, data, timeout);
   2b2dc:	f04f 32ff 	mov.w	r2, #4294967295
   2b2e0:	4669      	mov	r1, sp
   2b2e2:	4815      	ldr	r0, [pc, #84]	; (2b338 <at_write+0xfc>)
   2b2e4:	f010 ffe0 	bl	3c2a8 <z_impl_k_msgq_get>
		if (bytes_sent != bytes_to_send) {
   2b2e8:	42a6      	cmp	r6, r4
   2b2ea:	d0ef      	beq.n	2b2cc <at_write+0x90>
			LOG_ERR("Bytes sent (%d) was not the "
   2b2ec:	2301      	movs	r3, #1
   2b2ee:	f04f 0000 	mov.w	r0, #0
   2b2f2:	4a0e      	ldr	r2, [pc, #56]	; (2b32c <at_write+0xf0>)
   2b2f4:	f363 0002 	bfi	r0, r3, #0, #3
   2b2f8:	4b0d      	ldr	r3, [pc, #52]	; (2b330 <at_write+0xf4>)
   2b2fa:	f36f 00c5 	bfc	r0, #3, #3
   2b2fe:	1a9b      	subs	r3, r3, r2
   2b300:	08db      	lsrs	r3, r3, #3
   2b302:	f363 108f 	bfi	r0, r3, #6, #10
   2b306:	4622      	mov	r2, r4
   2b308:	4633      	mov	r3, r6
   2b30a:	490c      	ldr	r1, [pc, #48]	; (2b33c <at_write+0x100>)
   2b30c:	f01b f9c9 	bl	466a2 <log_string_sync>
   2b310:	e7dc      	b.n	2b2cc <at_write+0x90>
   2b312:	bf00      	nop
   2b314:	20023978 	.word	0x20023978
   2b318:	20024994 	.word	0x20024994
   2b31c:	0004b6f3 	.word	0x0004b6f3
   2b320:	0004b5bf 	.word	0x0004b5bf
   2b324:	0004b6c2 	.word	0x0004b6c2
   2b328:	0004d071 	.word	0x0004d071
   2b32c:	00049018 	.word	0x00049018
   2b330:	00049018 	.word	0x00049018
   2b334:	0004f56c 	.word	0x0004f56c
   2b338:	2003237c 	.word	0x2003237c
   2b33c:	0004f58f 	.word	0x0004f58f

0002b340 <socket_thread_fn>:
{
   2b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					LOG_ERR("Response buffer not large "
   2b344:	4b9a      	ldr	r3, [pc, #616]	; (2b5b0 <socket_thread_fn+0x270>)
   2b346:	4c9b      	ldr	r4, [pc, #620]	; (2b5b4 <socket_thread_fn+0x274>)
{
   2b348:	b087      	sub	sp, #28
					LOG_ERR("Response buffer not large "
   2b34a:	1ae4      	subs	r4, r4, r3
   2b34c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   2b350:	f04f 32ff 	mov.w	r2, #4294967295
   2b354:	a903      	add	r1, sp, #12
   2b356:	4898      	ldr	r0, [pc, #608]	; (2b5b8 <socket_thread_fn+0x278>)
   2b358:	f010 fd32 	bl	3bdc0 <k_mem_slab_alloc>
		ret.code  = 0;
   2b35c:	2300      	movs	r3, #0
		item->callback = NULL;
   2b35e:	9d03      	ldr	r5, [sp, #12]
		ret.code  = 0;
   2b360:	9304      	str	r3, [sp, #16]
		item->callback = NULL;
   2b362:	f8c5 3a98 	str.w	r3, [r5, #2712]	; 0xa98
		ret.state = AT_CMD_OK;
   2b366:	f88d 3014 	strb.w	r3, [sp, #20]
	__ASSERT_NO_MSG(socket_ops);
   2b36a:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 2b610 <socket_thread_fn+0x2d0>
		bytes_read = recv(common_socket_fd, item->data,
   2b36e:	4b93      	ldr	r3, [pc, #588]	; (2b5bc <socket_thread_fn+0x27c>)
   2b370:	350c      	adds	r5, #12
   2b372:	f8d3 b000 	ldr.w	fp, [r3]
   2b376:	f8da 3000 	ldr.w	r3, [sl]
   2b37a:	b94b      	cbnz	r3, 2b390 <socket_thread_fn+0x50>
   2b37c:	4990      	ldr	r1, [pc, #576]	; (2b5c0 <socket_thread_fn+0x280>)
   2b37e:	4891      	ldr	r0, [pc, #580]	; (2b5c4 <socket_thread_fn+0x284>)
   2b380:	2369      	movs	r3, #105	; 0x69
   2b382:	4a91      	ldr	r2, [pc, #580]	; (2b5c8 <socket_thread_fn+0x288>)
   2b384:	f01b f96a 	bl	4665c <printk>
   2b388:	2169      	movs	r1, #105	; 0x69
   2b38a:	488f      	ldr	r0, [pc, #572]	; (2b5c8 <socket_thread_fn+0x288>)
   2b38c:	f01b f973 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   2b390:	f8da 3000 	ldr.w	r3, [sl]
   2b394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b396:	b94b      	cbnz	r3, 2b3ac <socket_thread_fn+0x6c>
   2b398:	498c      	ldr	r1, [pc, #560]	; (2b5cc <socket_thread_fn+0x28c>)
   2b39a:	488a      	ldr	r0, [pc, #552]	; (2b5c4 <socket_thread_fn+0x284>)
   2b39c:	236a      	movs	r3, #106	; 0x6a
   2b39e:	4a8a      	ldr	r2, [pc, #552]	; (2b5c8 <socket_thread_fn+0x288>)
   2b3a0:	f01b f95c 	bl	4665c <printk>
   2b3a4:	216a      	movs	r1, #106	; 0x6a
   2b3a6:	4888      	ldr	r0, [pc, #544]	; (2b5c8 <socket_thread_fn+0x288>)
   2b3a8:	f01b f965 	bl	46676 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   2b3ac:	f8da 3000 	ldr.w	r3, [sl]
   2b3b0:	f640 228c 	movw	r2, #2700	; 0xa8c
   2b3b4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   2b3b8:	4629      	mov	r1, r5
   2b3ba:	2300      	movs	r3, #0
   2b3bc:	4658      	mov	r0, fp
   2b3be:	47d0      	blx	sl
		if (bytes_read < 0) {
   2b3c0:	1e02      	subs	r2, r0, #0
   2b3c2:	da56      	bge.n	2b472 <socket_thread_fn+0x132>
			LOG_ERR("AT socket recv failed with err %d",
   2b3c4:	2501      	movs	r5, #1
   2b3c6:	f365 0602 	bfi	r6, r5, #0, #3
   2b3ca:	f36f 06c5 	bfc	r6, #3, #3
   2b3ce:	f364 168f 	bfi	r6, r4, #6, #10
   2b3d2:	4630      	mov	r0, r6
   2b3d4:	497e      	ldr	r1, [pc, #504]	; (2b5d0 <socket_thread_fn+0x290>)
   2b3d6:	f01b f964 	bl	466a2 <log_string_sync>
			if ((close(common_socket_fd) == 0) &&
   2b3da:	4b78      	ldr	r3, [pc, #480]	; (2b5bc <socket_thread_fn+0x27c>)
   2b3dc:	6818      	ldr	r0, [r3, #0]
   2b3de:	f7ff feb7 	bl	2b150 <close>
   2b3e2:	bb78      	cbnz	r0, 2b444 <socket_thread_fn+0x104>
			    (open_socket() == 0)) {
   2b3e4:	f7ff fef0 	bl	2b1c8 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   2b3e8:	bb60      	cbnz	r0, 2b444 <socket_thread_fn+0x104>
				LOG_INF("AT socket recovered");
   2b3ea:	2303      	movs	r3, #3
   2b3ec:	f363 0702 	bfi	r7, r3, #0, #3
   2b3f0:	f360 07c5 	bfi	r7, r0, #3, #3
   2b3f4:	f364 178f 	bfi	r7, r4, #6, #10
   2b3f8:	4976      	ldr	r1, [pc, #472]	; (2b5d4 <socket_thread_fn+0x294>)
   2b3fa:	4638      	mov	r0, r7
   2b3fc:	f01b f951 	bl	466a2 <log_string_sync>
				ret.state = AT_CMD_ERROR;
   2b400:	f88d 5014 	strb.w	r5, [sp, #20]
				ret.code  = -errno;
   2b404:	f01b fb5e 	bl	46ac4 <__errno>
   2b408:	6803      	ldr	r3, [r0, #0]
   2b40a:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   2b40c:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   2b40e:	9903      	ldr	r1, [sp, #12]
   2b410:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   2b414:	2b00      	cmp	r3, #0
   2b416:	f040 80a7 	bne.w	2b568 <socket_thread_fn+0x228>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   2b41a:	a903      	add	r1, sp, #12
   2b41c:	4866      	ldr	r0, [pc, #408]	; (2b5b8 <socket_thread_fn+0x278>)
   2b41e:	f010 fd33 	bl	3be88 <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   2b422:	4b6d      	ldr	r3, [pc, #436]	; (2b5d8 <socket_thread_fn+0x298>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   2b424:	689b      	ldr	r3, [r3, #8]
   2b426:	2b00      	cmp	r3, #0
   2b428:	d192      	bne.n	2b350 <socket_thread_fn+0x10>
   2b42a:	f89d 2014 	ldrb.w	r2, [sp, #20]
   2b42e:	2a04      	cmp	r2, #4
   2b430:	d08e      	beq.n	2b350 <socket_thread_fn+0x10>
			current_cmd_handler = NULL;
   2b432:	4a6a      	ldr	r2, [pc, #424]	; (2b5dc <socket_thread_fn+0x29c>)
   2b434:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(q, data, timeout);
   2b436:	f04f 32ff 	mov.w	r2, #4294967295
   2b43a:	a904      	add	r1, sp, #16
   2b43c:	4868      	ldr	r0, [pc, #416]	; (2b5e0 <socket_thread_fn+0x2a0>)
   2b43e:	f010 fe8d 	bl	3c15c <z_impl_k_msgq_put>
   2b442:	e785      	b.n	2b350 <socket_thread_fn+0x10>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   2b444:	2301      	movs	r3, #1
   2b446:	f04f 0500 	mov.w	r5, #0
   2b44a:	f363 0502 	bfi	r5, r3, #0, #3
   2b44e:	f01b fb39 	bl	46ac4 <__errno>
   2b452:	f36f 05c5 	bfc	r5, #3, #3
   2b456:	f364 158f 	bfi	r5, r4, #6, #10
   2b45a:	6802      	ldr	r2, [r0, #0]
   2b45c:	4961      	ldr	r1, [pc, #388]	; (2b5e4 <socket_thread_fn+0x2a4>)
   2b45e:	4628      	mov	r0, r5
   2b460:	f01b f91f 	bl	466a2 <log_string_sync>
			close(common_socket_fd);
   2b464:	4b55      	ldr	r3, [pc, #340]	; (2b5bc <socket_thread_fn+0x27c>)
   2b466:	6818      	ldr	r0, [r3, #0]
   2b468:	f7ff fe72 	bl	2b150 <close>
}
   2b46c:	b007      	add	sp, #28
   2b46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   2b472:	f640 238c 	movw	r3, #2700	; 0xa8c
   2b476:	429a      	cmp	r2, r3
   2b478:	d004      	beq.n	2b484 <socket_thread_fn+0x144>
			   item->data[bytes_read - 1] != '\0') {
   2b47a:	f8dd a00c 	ldr.w	sl, [sp, #12]
   2b47e:	4452      	add	r2, sl
		} else if (bytes_read == sizeof(item->data) ||
   2b480:	7ad3      	ldrb	r3, [r2, #11]
   2b482:	b16b      	cbz	r3, 2b4a0 <socket_thread_fn+0x160>
			LOG_ERR("AT message to large for reception buffer or "
   2b484:	2301      	movs	r3, #1
   2b486:	f363 0802 	bfi	r8, r3, #0, #3
   2b48a:	f36f 08c5 	bfc	r8, #3, #3
   2b48e:	f364 188f 	bfi	r8, r4, #6, #10
   2b492:	4955      	ldr	r1, [pc, #340]	; (2b5e8 <socket_thread_fn+0x2a8>)
   2b494:	4640      	mov	r0, r8
   2b496:	f01b f904 	bl	466a2 <log_string_sync>
			ret.code  = -ENOBUFS;
   2b49a:	f06f 0368 	mvn.w	r3, #104	; 0x68
   2b49e:	e7b5      	b.n	2b40c <socket_thread_fn+0xcc>
	ret->state = AT_CMD_NOTIFICATION;
   2b4a0:	2204      	movs	r2, #4
		payload_len = get_return_code(item->data, &ret);
   2b4a2:	f10a 050c 	add.w	r5, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   2b4a6:	4951      	ldr	r1, [pc, #324]	; (2b5ec <socket_thread_fn+0x2ac>)
   2b4a8:	4628      	mov	r0, r5
   2b4aa:	9301      	str	r3, [sp, #4]
	ret->state = AT_CMD_NOTIFICATION;
   2b4ac:	f88d 2014 	strb.w	r2, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   2b4b0:	f015 fa78 	bl	409a4 <strstr>
		if (tmpstr) {
   2b4b4:	4683      	mov	fp, r0
   2b4b6:	b120      	cbz	r0, 2b4c2 <socket_thread_fn+0x182>
			ret->state = AT_CMD_OK;
   2b4b8:	9b01      	ldr	r3, [sp, #4]
   2b4ba:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   2b4be:	9304      	str	r3, [sp, #16]
   2b4c0:	e00d      	b.n	2b4de <socket_thread_fn+0x19e>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   2b4c2:	494b      	ldr	r1, [pc, #300]	; (2b5f0 <socket_thread_fn+0x2b0>)
   2b4c4:	4628      	mov	r0, r5
   2b4c6:	f015 fa6d 	bl	409a4 <strstr>
		if (tmpstr) {
   2b4ca:	4683      	mov	fp, r0
   2b4cc:	b320      	cbz	r0, 2b518 <socket_thread_fn+0x1d8>
			ret->state = AT_CMD_ERROR_CMS;
   2b4ce:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2b4d0:	f10a 0017 	add.w	r0, sl, #23
			ret->state = AT_CMD_ERROR_CME;
   2b4d4:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2b4d8:	f014 f8a6 	bl	3f628 <atoi>
   2b4dc:	9004      	str	r0, [sp, #16]
		buf[new_len++] = '\0';
   2b4de:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   2b4e0:	ebab 0205 	sub.w	r2, fp, r5
		buf[new_len++] = '\0';
   2b4e4:	3201      	adds	r2, #1
   2b4e6:	f88b 3000 	strb.w	r3, [fp]
		if (ret.state != AT_CMD_NOTIFICATION) {
   2b4ea:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2b4ee:	2b04      	cmp	r3, #4
   2b4f0:	d055      	beq.n	2b59e <socket_thread_fn+0x25e>
			if ((response_buf_len > 0) &&
   2b4f2:	f8df a120 	ldr.w	sl, [pc, #288]	; 2b614 <socket_thread_fn+0x2d4>
   2b4f6:	f8da 3000 	ldr.w	r3, [sl]
   2b4fa:	b383      	cbz	r3, 2b55e <socket_thread_fn+0x21e>
			    (response_buf != NULL)) {
   2b4fc:	4d3d      	ldr	r5, [pc, #244]	; (2b5f4 <socket_thread_fn+0x2b4>)
   2b4fe:	6828      	ldr	r0, [r5, #0]
			if ((response_buf_len > 0) &&
   2b500:	b368      	cbz	r0, 2b55e <socket_thread_fn+0x21e>
				if (response_buf_len > payload_len) {
   2b502:	4293      	cmp	r3, r2
   2b504:	d91c      	bls.n	2b540 <socket_thread_fn+0x200>
   2b506:	9903      	ldr	r1, [sp, #12]
   2b508:	310c      	adds	r1, #12
   2b50a:	f7ee fcd1 	bl	19eb0 <memcpy>
				response_buf_len = 0;
   2b50e:	2300      	movs	r3, #0
   2b510:	f8ca 3000 	str.w	r3, [sl]
				response_buf     = NULL;
   2b514:	602b      	str	r3, [r5, #0]
				goto next;
   2b516:	e77a      	b.n	2b40e <socket_thread_fn+0xce>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   2b518:	4937      	ldr	r1, [pc, #220]	; (2b5f8 <socket_thread_fn+0x2b8>)
   2b51a:	4628      	mov	r0, r5
   2b51c:	f015 fa42 	bl	409a4 <strstr>
		if (tmpstr) {
   2b520:	4683      	mov	fp, r0
   2b522:	b108      	cbz	r0, 2b528 <socket_thread_fn+0x1e8>
			ret->state = AT_CMD_ERROR_CME;
   2b524:	2303      	movs	r3, #3
   2b526:	e7d3      	b.n	2b4d0 <socket_thread_fn+0x190>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   2b528:	4934      	ldr	r1, [pc, #208]	; (2b5fc <socket_thread_fn+0x2bc>)
   2b52a:	4628      	mov	r0, r5
   2b52c:	f015 fa3a 	bl	409a4 <strstr>
		if (tmpstr) {
   2b530:	4683      	mov	fp, r0
   2b532:	b378      	cbz	r0, 2b594 <socket_thread_fn+0x254>
			ret->state = AT_CMD_ERROR;
   2b534:	2301      	movs	r3, #1
   2b536:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   2b53a:	f06f 0307 	mvn.w	r3, #7
   2b53e:	e7be      	b.n	2b4be <socket_thread_fn+0x17e>
					LOG_ERR("Response buffer not large "
   2b540:	2301      	movs	r3, #1
   2b542:	f363 0902 	bfi	r9, r3, #0, #3
   2b546:	f36f 09c5 	bfc	r9, #3, #3
   2b54a:	f364 198f 	bfi	r9, r4, #6, #10
   2b54e:	492c      	ldr	r1, [pc, #176]	; (2b600 <socket_thread_fn+0x2c0>)
   2b550:	4648      	mov	r0, r9
   2b552:	f01b f8a6 	bl	466a2 <log_string_sync>
					ret.code  = -EMSGSIZE;
   2b556:	f06f 0379 	mvn.w	r3, #121	; 0x79
   2b55a:	9304      	str	r3, [sp, #16]
   2b55c:	e7d7      	b.n	2b50e <socket_thread_fn+0x1ce>
		if (payload_len == 0) {
   2b55e:	2a00      	cmp	r2, #0
   2b560:	f43f af55 	beq.w	2b40e <socket_thread_fn+0xce>
			item->callback = current_cmd_handler;
   2b564:	4b1d      	ldr	r3, [pc, #116]	; (2b5dc <socket_thread_fn+0x29c>)
   2b566:	e01e      	b.n	2b5a6 <socket_thread_fn+0x266>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2b568:	4b26      	ldr	r3, [pc, #152]	; (2b604 <socket_thread_fn+0x2c4>)
   2b56a:	2200      	movs	r2, #0
   2b56c:	604b      	str	r3, [r1, #4]
   2b56e:	460b      	mov	r3, r1
   2b570:	600a      	str	r2, [r1, #0]
   2b572:	f843 2f08 	str.w	r2, [r3, #8]!
   2b576:	e8d3 2fef 	ldaex	r2, [r3]
   2b57a:	f042 0001 	orr.w	r0, r2, #1
   2b57e:	e8c3 0fe5 	stlex	r5, r0, [r3]
   2b582:	2d00      	cmp	r5, #0
   2b584:	d1f7      	bne.n	2b576 <socket_thread_fn+0x236>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2b586:	07d3      	lsls	r3, r2, #31
   2b588:	f53f af4b 	bmi.w	2b422 <socket_thread_fn+0xe2>
		k_queue_append(&work_q->queue, work);
   2b58c:	481e      	ldr	r0, [pc, #120]	; (2b608 <socket_thread_fn+0x2c8>)
   2b58e:	f01d fa4f 	bl	48a30 <k_queue_append>
   2b592:	e746      	b.n	2b422 <socket_thread_fn+0xe2>
		new_len = strlen(buf) + 1;
   2b594:	4628      	mov	r0, r5
   2b596:	f014 fff5 	bl	40584 <strlen>
   2b59a:	1c42      	adds	r2, r0, #1
   2b59c:	e7a5      	b.n	2b4ea <socket_thread_fn+0x1aa>
		if (payload_len == 0) {
   2b59e:	2a00      	cmp	r2, #0
   2b5a0:	f43f af35 	beq.w	2b40e <socket_thread_fn+0xce>
			item->callback = notification_handler;
   2b5a4:	4b19      	ldr	r3, [pc, #100]	; (2b60c <socket_thread_fn+0x2cc>)
			item->callback = current_cmd_handler;
   2b5a6:	681a      	ldr	r2, [r3, #0]
   2b5a8:	9b03      	ldr	r3, [sp, #12]
   2b5aa:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   2b5ae:	e72e      	b.n	2b40e <socket_thread_fn+0xce>
   2b5b0:	00049018 	.word	0x00049018
   2b5b4:	00049018 	.word	0x00049018
   2b5b8:	200322c0 	.word	0x200322c0
   2b5bc:	20024994 	.word	0x20024994
   2b5c0:	0004b6f3 	.word	0x0004b6f3
   2b5c4:	0004b5bf 	.word	0x0004b5bf
   2b5c8:	0004b6c2 	.word	0x0004b6c2
   2b5cc:	0004d060 	.word	0x0004d060
   2b5d0:	0004f5c1 	.word	0x0004f5c1
   2b5d4:	0004f5e3 	.word	0x0004f5e3
   2b5d8:	20032310 	.word	0x20032310
   2b5dc:	20024998 	.word	0x20024998
   2b5e0:	2003237c 	.word	0x2003237c
   2b5e4:	0004f5f7 	.word	0x0004f5f7
   2b5e8:	0004f62e 	.word	0x0004f62e
   2b5ec:	0004f678 	.word	0x0004f678
   2b5f0:	0004f67b 	.word	0x0004f67b
   2b5f4:	200249a0 	.word	0x200249a0
   2b5f8:	0004f687 	.word	0x0004f687
   2b5fc:	0004e087 	.word	0x0004e087
   2b600:	0004f693 	.word	0x0004f693
   2b604:	0002b1a9 	.word	0x0002b1a9
   2b608:	2002a324 	.word	0x2002a324
   2b60c:	2002499c 	.word	0x2002499c
   2b610:	20023978 	.word	0x20023978
   2b614:	200249a4 	.word	0x200249a4

0002b618 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   2b618:	b510      	push	{r4, lr}
   2b61a:	b086      	sub	sp, #24
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   2b61c:	f7ff fdd4 	bl	2b1c8 <open_socket>
	if (err) {
   2b620:	4604      	mov	r4, r0
   2b622:	b198      	cbz	r0, 2b64c <at_cmd_driver_init+0x34>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   2b624:	2301      	movs	r3, #1
   2b626:	f04f 0000 	mov.w	r0, #0
   2b62a:	4a10      	ldr	r2, [pc, #64]	; (2b66c <at_cmd_driver_init+0x54>)
   2b62c:	f363 0002 	bfi	r0, r3, #0, #3
   2b630:	4b0f      	ldr	r3, [pc, #60]	; (2b670 <at_cmd_driver_init+0x58>)
   2b632:	f36f 00c5 	bfc	r0, #3, #3
   2b636:	1a9b      	subs	r3, r3, r2
   2b638:	08db      	lsrs	r3, r3, #3
   2b63a:	f363 108f 	bfi	r0, r3, #6, #10
   2b63e:	4622      	mov	r2, r4
   2b640:	490c      	ldr	r1, [pc, #48]	; (2b674 <at_cmd_driver_init+0x5c>)
   2b642:	f01b f82e 	bl	466a2 <log_string_sync>
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   2b646:	4620      	mov	r0, r4
   2b648:	b006      	add	sp, #24
   2b64a:	bd10      	pop	{r4, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2b64c:	230a      	movs	r3, #10
   2b64e:	e9cd 0004 	strd	r0, r0, [sp, #16]
   2b652:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2b656:	e9cd 0000 	strd	r0, r0, [sp]
   2b65a:	4b07      	ldr	r3, [pc, #28]	; (2b678 <at_cmd_driver_init+0x60>)
   2b65c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2b660:	4906      	ldr	r1, [pc, #24]	; (2b67c <at_cmd_driver_init+0x64>)
   2b662:	4807      	ldr	r0, [pc, #28]	; (2b680 <at_cmd_driver_init+0x68>)
   2b664:	f012 fc08 	bl	3de78 <z_impl_k_thread_create>
   2b668:	e7ed      	b.n	2b646 <at_cmd_driver_init+0x2e>
   2b66a:	bf00      	nop
   2b66c:	00049018 	.word	0x00049018
   2b670:	00049018 	.word	0x00049018
   2b674:	0004f54a 	.word	0x0004f54a
   2b678:	0002b341 	.word	0x0002b341
   2b67c:	2002c6f0 	.word	0x2002c6f0
   2b680:	200249a8 	.word	0x200249a8

0002b684 <at_cmd_write>:
{
   2b684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b688:	4605      	mov	r5, r0
   2b68a:	4688      	mov	r8, r1
   2b68c:	4617      	mov	r7, r2
   2b68e:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   2b690:	4c0a      	ldr	r4, [pc, #40]	; (2b6bc <at_cmd_write+0x38>)
   2b692:	f04f 31ff 	mov.w	r1, #4294967295
   2b696:	4620      	mov	r0, r4
   2b698:	f012 faa8 	bl	3dbec <z_impl_k_sem_take>
	response_buf     = buf;
   2b69c:	4b08      	ldr	r3, [pc, #32]	; (2b6c0 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   2b69e:	4631      	mov	r1, r6
	response_buf     = buf;
   2b6a0:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   2b6a4:	4b07      	ldr	r3, [pc, #28]	; (2b6c4 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   2b6a6:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   2b6a8:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   2b6aa:	f7ff fdc7 	bl	2b23c <at_write>
   2b6ae:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   2b6b0:	4620      	mov	r0, r4
   2b6b2:	f012 fa53 	bl	3db5c <z_impl_k_sem_give>
}
   2b6b6:	4628      	mov	r0, r5
   2b6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b6bc:	20032310 	.word	0x20032310
   2b6c0:	200249a0 	.word	0x200249a0
   2b6c4:	200249a4 	.word	0x200249a4

0002b6c8 <at_cmd_set_notification_handler>:
{
   2b6c8:	b538      	push	{r3, r4, r5, lr}
   2b6ca:	4605      	mov	r5, r0
	return z_impl_k_sem_take(sem, timeout);
   2b6cc:	4c06      	ldr	r4, [pc, #24]	; (2b6e8 <at_cmd_set_notification_handler+0x20>)
   2b6ce:	f04f 31ff 	mov.w	r1, #4294967295
   2b6d2:	4620      	mov	r0, r4
   2b6d4:	f012 fa8a 	bl	3dbec <z_impl_k_sem_take>
	notification_handler = handler;
   2b6d8:	4b04      	ldr	r3, [pc, #16]	; (2b6ec <at_cmd_set_notification_handler+0x24>)
   2b6da:	601d      	str	r5, [r3, #0]
	z_impl_k_sem_give(sem);
   2b6dc:	4620      	mov	r0, r4
}
   2b6de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b6e2:	f012 ba3b 	b.w	3db5c <z_impl_k_sem_give>
   2b6e6:	bf00      	nop
   2b6e8:	20032310 	.word	0x20032310
   2b6ec:	2002499c 	.word	0x2002499c

0002b6f0 <w_lte_lc_init>:
		k_sem_give(&link);
	}
}

static int w_lte_lc_init(void)
{
   2b6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (at_cmd_write(nw_mode_preferred, NULL, 0, NULL) != 0) {
   2b6f2:	2300      	movs	r3, #0
   2b6f4:	482e      	ldr	r0, [pc, #184]	; (2b7b0 <w_lte_lc_init+0xc0>)
   2b6f6:	461a      	mov	r2, r3
   2b6f8:	4619      	mov	r1, r3
   2b6fa:	f7ff ffc3 	bl	2b684 <at_cmd_write>
   2b6fe:	4603      	mov	r3, r0
   2b700:	b118      	cbz	r0, 2b70a <w_lte_lc_init+0x1a>
		return -EIO;
   2b702:	f06f 0504 	mvn.w	r5, #4
	}
	LOG_INF("PDN Auth: %s", log_strdup(cgauth));
#endif

	return 0;
}
   2b706:	4628      	mov	r0, r5
   2b708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (at_cmd_write(mdm_trace, NULL, 0, NULL) != 0) {
   2b70a:	4602      	mov	r2, r0
   2b70c:	4601      	mov	r1, r0
   2b70e:	4829      	ldr	r0, [pc, #164]	; (2b7b4 <w_lte_lc_init+0xc4>)
   2b710:	f7ff ffb8 	bl	2b684 <at_cmd_write>
   2b714:	4603      	mov	r3, r0
   2b716:	2800      	cmp	r0, #0
   2b718:	d1f3      	bne.n	2b702 <w_lte_lc_init+0x12>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   2b71a:	4602      	mov	r2, r0
   2b71c:	4601      	mov	r1, r0
   2b71e:	4826      	ldr	r0, [pc, #152]	; (2b7b8 <w_lte_lc_init+0xc8>)
   2b720:	f7ff ffb0 	bl	2b684 <at_cmd_write>
   2b724:	4603      	mov	r3, r0
   2b726:	2800      	cmp	r0, #0
   2b728:	d1eb      	bne.n	2b702 <w_lte_lc_init+0x12>
	if (at_cmd_write(lock_bands, NULL, 0, NULL) != 0) {
   2b72a:	4602      	mov	r2, r0
   2b72c:	4601      	mov	r1, r0
   2b72e:	4823      	ldr	r0, [pc, #140]	; (2b7bc <w_lte_lc_init+0xcc>)
   2b730:	f7ff ffa8 	bl	2b684 <at_cmd_write>
   2b734:	4603      	mov	r3, r0
   2b736:	2800      	cmp	r0, #0
   2b738:	d1e3      	bne.n	2b702 <w_lte_lc_init+0x12>
	if (at_cmd_write(lock_plmn, NULL, 0, NULL) != 0) {
   2b73a:	4602      	mov	r2, r0
   2b73c:	4601      	mov	r1, r0
   2b73e:	4820      	ldr	r0, [pc, #128]	; (2b7c0 <w_lte_lc_init+0xd0>)
   2b740:	f7ff ffa0 	bl	2b684 <at_cmd_write>
   2b744:	4603      	mov	r3, r0
   2b746:	2800      	cmp	r0, #0
   2b748:	d1db      	bne.n	2b702 <w_lte_lc_init+0x12>
	if (at_cmd_write(legacy_pco, NULL, 0, NULL) != 0) {
   2b74a:	4602      	mov	r2, r0
   2b74c:	4601      	mov	r1, r0
   2b74e:	481d      	ldr	r0, [pc, #116]	; (2b7c4 <w_lte_lc_init+0xd4>)
   2b750:	f7ff ff98 	bl	2b684 <at_cmd_write>
   2b754:	4605      	mov	r5, r0
   2b756:	2800      	cmp	r0, #0
   2b758:	d1d3      	bne.n	2b702 <w_lte_lc_init+0x12>
	LOG_INF("Using legacy LTE PCO mode...");
   2b75a:	2703      	movs	r7, #3
   2b75c:	f04f 0000 	mov.w	r0, #0
   2b760:	4b19      	ldr	r3, [pc, #100]	; (2b7c8 <w_lte_lc_init+0xd8>)
   2b762:	4c1a      	ldr	r4, [pc, #104]	; (2b7cc <w_lte_lc_init+0xdc>)
   2b764:	f367 0002 	bfi	r0, r7, #0, #3
   2b768:	1ae4      	subs	r4, r4, r3
   2b76a:	f365 00c5 	bfi	r0, r5, #3, #3
   2b76e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2b772:	f364 108f 	bfi	r0, r4, #6, #10
   2b776:	4916      	ldr	r1, [pc, #88]	; (2b7d0 <w_lte_lc_init+0xe0>)
   2b778:	f01a ff93 	bl	466a2 <log_string_sync>
	if (at_cmd_write(cgdcont, NULL, 0, NULL) != 0) {
   2b77c:	462b      	mov	r3, r5
   2b77e:	462a      	mov	r2, r5
   2b780:	4629      	mov	r1, r5
   2b782:	4814      	ldr	r0, [pc, #80]	; (2b7d4 <w_lte_lc_init+0xe4>)
   2b784:	f7ff ff7e 	bl	2b684 <at_cmd_write>
   2b788:	4605      	mov	r5, r0
   2b78a:	2800      	cmp	r0, #0
   2b78c:	d1b9      	bne.n	2b702 <w_lte_lc_init+0x12>
	LOG_INF("PDP Context: %s", log_strdup(cgdcont));
   2b78e:	f04f 0600 	mov.w	r6, #0
   2b792:	f367 0602 	bfi	r6, r7, #0, #3
   2b796:	f360 06c5 	bfi	r6, r0, #3, #3
   2b79a:	480e      	ldr	r0, [pc, #56]	; (2b7d4 <w_lte_lc_init+0xe4>)
   2b79c:	f01a ff93 	bl	466c6 <log_strdup>
   2b7a0:	f364 168f 	bfi	r6, r4, #6, #10
   2b7a4:	4602      	mov	r2, r0
   2b7a6:	490c      	ldr	r1, [pc, #48]	; (2b7d8 <w_lte_lc_init+0xe8>)
   2b7a8:	4630      	mov	r0, r6
   2b7aa:	f01a ff7a 	bl	466a2 <log_string_sync>
	return 0;
   2b7ae:	e7aa      	b.n	2b706 <w_lte_lc_init+0x16>
   2b7b0:	0004f7c7 	.word	0x0004f7c7
   2b7b4:	0004f793 	.word	0x0004f793
   2b7b8:	0004f72a 	.word	0x0004f72a
   2b7bc:	0004f765 	.word	0x0004f765
   2b7c0:	0004f77f 	.word	0x0004f77f
   2b7c4:	0004f75a 	.word	0x0004f75a
   2b7c8:	00049018 	.word	0x00049018
   2b7cc:	00049098 	.word	0x00049098
   2b7d0:	0004f99b 	.word	0x0004f99b
   2b7d4:	0004f735 	.word	0x0004f735
   2b7d8:	0004f9b8 	.word	0x0004f9b8

0002b7dc <parse_nw_reg_status>:
 *
 * @return Zero on success or (negative) error code otherwise.
 */
static int parse_nw_reg_status(const char *at_response,
			       enum lte_lc_nw_reg_status *status)
{
   2b7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err, reg_status;
	struct at_param_list resp_list = {0};
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   2b7de:	2307      	movs	r3, #7
	struct at_param_list resp_list = {0};
   2b7e0:	2500      	movs	r5, #0
{
   2b7e2:	b087      	sub	sp, #28
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   2b7e4:	9502      	str	r5, [sp, #8]
{
   2b7e6:	460e      	mov	r6, r1
	struct at_param_list resp_list = {0};
   2b7e8:	e9cd 5504 	strd	r5, r5, [sp, #16]
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   2b7ec:	f8cd 500b 	str.w	r5, [sp, #11]
	size_t response_prefix_len = sizeof(response_prefix);
   2b7f0:	9301      	str	r3, [sp, #4]

	if ((at_response == NULL) || (status == NULL)) {
   2b7f2:	4607      	mov	r7, r0
   2b7f4:	2800      	cmp	r0, #0
   2b7f6:	f000 8098 	beq.w	2b92a <parse_nw_reg_status+0x14e>
   2b7fa:	2900      	cmp	r1, #0
   2b7fc:	f000 8095 	beq.w	2b92a <parse_nw_reg_status+0x14e>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT);
   2b800:	210a      	movs	r1, #10
   2b802:	a804      	add	r0, sp, #16
   2b804:	f01c fd87 	bl	48316 <at_params_list_init>
	if (err) {
   2b808:	4604      	mov	r4, r0
   2b80a:	b198      	cbz	r0, 2b834 <parse_nw_reg_status+0x58>
		LOG_ERR("Could not init AT params list, error: %d", err);
   2b80c:	2301      	movs	r3, #1
   2b80e:	f04f 0000 	mov.w	r0, #0
   2b812:	4a47      	ldr	r2, [pc, #284]	; (2b930 <parse_nw_reg_status+0x154>)
   2b814:	f363 0002 	bfi	r0, r3, #0, #3
   2b818:	4b46      	ldr	r3, [pc, #280]	; (2b934 <parse_nw_reg_status+0x158>)
   2b81a:	f365 00c5 	bfi	r0, r5, #3, #3
   2b81e:	1a9b      	subs	r3, r3, r2
   2b820:	08db      	lsrs	r3, r3, #3
   2b822:	f363 108f 	bfi	r0, r3, #6, #10
   2b826:	4622      	mov	r2, r4
   2b828:	4943      	ldr	r1, [pc, #268]	; (2b938 <parse_nw_reg_status+0x15c>)
   2b82a:	f01a ff3a 	bl	466a2 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   2b82e:	4620      	mov	r0, r4
   2b830:	b007      	add	sp, #28
   2b832:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_max_params_from_str(at_response,
   2b834:	4601      	mov	r1, r0
   2b836:	230a      	movs	r3, #10
   2b838:	aa04      	add	r2, sp, #16
   2b83a:	4638      	mov	r0, r7
   2b83c:	f7fa fcf8 	bl	26230 <at_parser_max_params_from_str>
	if (err) {
   2b840:	4604      	mov	r4, r0
   2b842:	b1a0      	cbz	r0, 2b86e <parse_nw_reg_status+0x92>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   2b844:	2301      	movs	r3, #1
   2b846:	f04f 0000 	mov.w	r0, #0
   2b84a:	4a39      	ldr	r2, [pc, #228]	; (2b930 <parse_nw_reg_status+0x154>)
   2b84c:	f363 0002 	bfi	r0, r3, #0, #3
   2b850:	4b38      	ldr	r3, [pc, #224]	; (2b934 <parse_nw_reg_status+0x158>)
   2b852:	f365 00c5 	bfi	r0, r5, #3, #3
   2b856:	1a9b      	subs	r3, r3, r2
   2b858:	4622      	mov	r2, r4
   2b85a:	08db      	lsrs	r3, r3, #3
   2b85c:	4937      	ldr	r1, [pc, #220]	; (2b93c <parse_nw_reg_status+0x160>)
   2b85e:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not get response prefix, error: %d", err);
   2b862:	f01a ff1e 	bl	466a2 <log_string_sync>
	at_params_list_free(&resp_list);
   2b866:	a804      	add	r0, sp, #16
   2b868:	f01c fd68 	bl	4833c <at_params_list_free>
	return err;
   2b86c:	e7df      	b.n	2b82e <parse_nw_reg_status+0x52>
	err = at_params_string_get(&resp_list,
   2b86e:	4601      	mov	r1, r0
   2b870:	ab01      	add	r3, sp, #4
   2b872:	aa02      	add	r2, sp, #8
   2b874:	a804      	add	r0, sp, #16
   2b876:	f01c fe26 	bl	484c6 <at_params_string_get>
	if (err) {
   2b87a:	4604      	mov	r4, r0
   2b87c:	b178      	cbz	r0, 2b89e <parse_nw_reg_status+0xc2>
		LOG_ERR("Could not get response prefix, error: %d", err);
   2b87e:	2301      	movs	r3, #1
   2b880:	f04f 0000 	mov.w	r0, #0
   2b884:	4a2a      	ldr	r2, [pc, #168]	; (2b930 <parse_nw_reg_status+0x154>)
   2b886:	f363 0002 	bfi	r0, r3, #0, #3
   2b88a:	4b2a      	ldr	r3, [pc, #168]	; (2b934 <parse_nw_reg_status+0x158>)
   2b88c:	f365 00c5 	bfi	r0, r5, #3, #3
   2b890:	1a9b      	subs	r3, r3, r2
   2b892:	08db      	lsrs	r3, r3, #3
   2b894:	f363 108f 	bfi	r0, r3, #6, #10
   2b898:	4622      	mov	r2, r4
   2b89a:	4929      	ldr	r1, [pc, #164]	; (2b940 <parse_nw_reg_status+0x164>)
   2b89c:	e7e1      	b.n	2b862 <parse_nw_reg_status+0x86>
	if (!response_is_valid(response_prefix, response_prefix_len,
   2b89e:	4a29      	ldr	r2, [pc, #164]	; (2b944 <parse_nw_reg_status+0x168>)
   2b8a0:	9901      	ldr	r1, [sp, #4]
   2b8a2:	a802      	add	r0, sp, #8
   2b8a4:	f01d f840 	bl	48928 <response_is_valid>
   2b8a8:	2800      	cmp	r0, #0
   2b8aa:	d0dc      	beq.n	2b866 <parse_nw_reg_status+0x8a>
	err = at_params_int_get(&resp_list, AT_CEREG_REG_STATUS_INDEX,
   2b8ac:	2101      	movs	r1, #1
   2b8ae:	466a      	mov	r2, sp
   2b8b0:	a804      	add	r0, sp, #16
   2b8b2:	f01c fdf1 	bl	48498 <at_params_int_get>
   2b8b6:	491f      	ldr	r1, [pc, #124]	; (2b934 <parse_nw_reg_status+0x158>)
   2b8b8:	4b1d      	ldr	r3, [pc, #116]	; (2b930 <parse_nw_reg_status+0x154>)
	if (err) {
   2b8ba:	4604      	mov	r4, r0
   2b8bc:	1ac9      	subs	r1, r1, r3
   2b8be:	f3c1 01c9 	ubfx	r1, r1, #3, #10
   2b8c2:	b158      	cbz	r0, 2b8dc <parse_nw_reg_status+0x100>
		LOG_ERR("Could not get registration status, error: %d", err);
   2b8c4:	f04f 0000 	mov.w	r0, #0
   2b8c8:	2301      	movs	r3, #1
   2b8ca:	f363 0002 	bfi	r0, r3, #0, #3
   2b8ce:	f365 00c5 	bfi	r0, r5, #3, #3
   2b8d2:	f361 108f 	bfi	r0, r1, #6, #10
   2b8d6:	4622      	mov	r2, r4
   2b8d8:	491b      	ldr	r1, [pc, #108]	; (2b948 <parse_nw_reg_status+0x16c>)
   2b8da:	e7c2      	b.n	2b862 <parse_nw_reg_status+0x86>
	switch (reg_status) {
   2b8dc:	9b00      	ldr	r3, [sp, #0]
   2b8de:	2b08      	cmp	r3, #8
   2b8e0:	d002      	beq.n	2b8e8 <parse_nw_reg_status+0x10c>
   2b8e2:	dc10      	bgt.n	2b906 <parse_nw_reg_status+0x12a>
   2b8e4:	2b05      	cmp	r3, #5
   2b8e6:	d810      	bhi.n	2b90a <parse_nw_reg_status+0x12e>
		LOG_DBG("Network registration status: %d", reg_status);
   2b8e8:	2204      	movs	r2, #4
   2b8ea:	f04f 0000 	mov.w	r0, #0
   2b8ee:	f362 0002 	bfi	r0, r2, #0, #3
   2b8f2:	f36f 00c5 	bfc	r0, #3, #3
   2b8f6:	f361 108f 	bfi	r0, r1, #6, #10
		*status = reg_status;
   2b8fa:	7033      	strb	r3, [r6, #0]
		LOG_DBG("Network registration status: %d", reg_status);
   2b8fc:	4a13      	ldr	r2, [pc, #76]	; (2b94c <parse_nw_reg_status+0x170>)
   2b8fe:	4914      	ldr	r1, [pc, #80]	; (2b950 <parse_nw_reg_status+0x174>)
   2b900:	f01a fecf 	bl	466a2 <log_string_sync>
   2b904:	e7af      	b.n	2b866 <parse_nw_reg_status+0x8a>
	switch (reg_status) {
   2b906:	2b5a      	cmp	r3, #90	; 0x5a
   2b908:	d0ee      	beq.n	2b8e8 <parse_nw_reg_status+0x10c>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   2b90a:	2201      	movs	r2, #1
   2b90c:	f04f 0000 	mov.w	r0, #0
   2b910:	f362 0002 	bfi	r0, r2, #0, #3
   2b914:	f36f 00c5 	bfc	r0, #3, #3
   2b918:	f361 108f 	bfi	r0, r1, #6, #10
   2b91c:	461a      	mov	r2, r3
   2b91e:	490d      	ldr	r1, [pc, #52]	; (2b954 <parse_nw_reg_status+0x178>)
   2b920:	f01a febf 	bl	466a2 <log_string_sync>
		err = -EIO;
   2b924:	f06f 0404 	mvn.w	r4, #4
   2b928:	e79d      	b.n	2b866 <parse_nw_reg_status+0x8a>
		return -EINVAL;
   2b92a:	f06f 0415 	mvn.w	r4, #21
   2b92e:	e77e      	b.n	2b82e <parse_nw_reg_status+0x52>
   2b930:	00049018 	.word	0x00049018
   2b934:	00049098 	.word	0x00049098
   2b938:	0004f7e8 	.word	0x0004f7e8
   2b93c:	0004f811 	.word	0x0004f811
   2b940:	0004f83e 	.word	0x0004f83e
   2b944:	0004f867 	.word	0x0004f867
   2b948:	0004f86e 	.word	0x0004f86e
   2b94c:	0004f6cc 	.word	0x0004f6cc
   2b950:	0004f89b 	.word	0x0004f89b
   2b954:	0004f8bf 	.word	0x0004f8bf

0002b958 <at_handler>:
{
   2b958:	b507      	push	{r0, r1, r2, lr}
	if (response == NULL) {
   2b95a:	4608      	mov	r0, r1
   2b95c:	b999      	cbnz	r1, 2b986 <at_handler+0x2e>
		LOG_ERR("Response buffer is NULL-pointer");
   2b95e:	2301      	movs	r3, #1
   2b960:	f04f 0200 	mov.w	r2, #0
   2b964:	f363 0202 	bfi	r2, r3, #0, #3
   2b968:	f361 02c5 	bfi	r2, r1, #3, #3
   2b96c:	4b15      	ldr	r3, [pc, #84]	; (2b9c4 <at_handler+0x6c>)
   2b96e:	4916      	ldr	r1, [pc, #88]	; (2b9c8 <at_handler+0x70>)
   2b970:	1a5b      	subs	r3, r3, r1
   2b972:	08db      	lsrs	r3, r3, #3
   2b974:	f363 128f 	bfi	r2, r3, #6, #10
   2b978:	4610      	mov	r0, r2
   2b97a:	4914      	ldr	r1, [pc, #80]	; (2b9cc <at_handler+0x74>)
		LOG_ERR("Could not get network registration status");
   2b97c:	f01a fe91 	bl	466a2 <log_string_sync>
}
   2b980:	b003      	add	sp, #12
   2b982:	f85d fb04 	ldr.w	pc, [sp], #4
	err = parse_nw_reg_status(response, &status);
   2b986:	f10d 0107 	add.w	r1, sp, #7
   2b98a:	f7ff ff27 	bl	2b7dc <parse_nw_reg_status>
	if (err) {
   2b98e:	b170      	cbz	r0, 2b9ae <at_handler+0x56>
		LOG_ERR("Could not get network registration status");
   2b990:	2301      	movs	r3, #1
   2b992:	f04f 0000 	mov.w	r0, #0
   2b996:	4a0c      	ldr	r2, [pc, #48]	; (2b9c8 <at_handler+0x70>)
   2b998:	f363 0002 	bfi	r0, r3, #0, #3
   2b99c:	4b09      	ldr	r3, [pc, #36]	; (2b9c4 <at_handler+0x6c>)
   2b99e:	f36f 00c5 	bfc	r0, #3, #3
   2b9a2:	1a9b      	subs	r3, r3, r2
   2b9a4:	08db      	lsrs	r3, r3, #3
   2b9a6:	f363 108f 	bfi	r0, r3, #6, #10
   2b9aa:	4909      	ldr	r1, [pc, #36]	; (2b9d0 <at_handler+0x78>)
   2b9ac:	e7e6      	b.n	2b97c <at_handler+0x24>
	if ((status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   2b9ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2b9b2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2b9b6:	2b01      	cmp	r3, #1
   2b9b8:	d1e2      	bne.n	2b980 <at_handler+0x28>
   2b9ba:	4806      	ldr	r0, [pc, #24]	; (2b9d4 <at_handler+0x7c>)
   2b9bc:	f012 f8ce 	bl	3db5c <z_impl_k_sem_give>
   2b9c0:	e7de      	b.n	2b980 <at_handler+0x28>
   2b9c2:	bf00      	nop
   2b9c4:	00049098 	.word	0x00049098
   2b9c8:	00049018 	.word	0x00049018
   2b9cc:	0004f6e0 	.word	0x0004f6e0
   2b9d0:	0004f700 	.word	0x0004f700
   2b9d4:	20024a58 	.word	0x20024a58

0002b9d8 <w_lte_lc_connect>:
{
   2b9d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_impl_k_sem_init(sem, initial_count, limit);
   2b9dc:	2201      	movs	r2, #1
   2b9de:	2100      	movs	r1, #0
   2b9e0:	4841      	ldr	r0, [pc, #260]	; (2bae8 <w_lte_lc_connect+0x110>)
   2b9e2:	f012 f885 	bl	3daf0 <z_impl_k_sem_init>
	rc = at_notif_register_handler(NULL, at_handler);
   2b9e6:	4941      	ldr	r1, [pc, #260]	; (2baec <w_lte_lc_connect+0x114>)
   2b9e8:	2000      	movs	r0, #0
   2b9ea:	f7fa f8df 	bl	25bac <at_notif_register_handler>
   2b9ee:	4c40      	ldr	r4, [pc, #256]	; (2baf0 <w_lte_lc_connect+0x118>)
   2b9f0:	4b40      	ldr	r3, [pc, #256]	; (2baf4 <w_lte_lc_connect+0x11c>)
	if (rc != 0) {
   2b9f2:	4605      	mov	r5, r0
   2b9f4:	1ae4      	subs	r4, r4, r3
   2b9f6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2b9fa:	b178      	cbz	r0, 2ba1c <w_lte_lc_connect+0x44>
		LOG_ERR("Can't register handler rc=%d", rc);
   2b9fc:	f04f 0000 	mov.w	r0, #0
   2ba00:	2301      	movs	r3, #1
   2ba02:	462a      	mov	r2, r5
   2ba04:	f363 0002 	bfi	r0, r3, #0, #3
   2ba08:	f36f 00c5 	bfc	r0, #3, #3
   2ba0c:	493a      	ldr	r1, [pc, #232]	; (2baf8 <w_lte_lc_connect+0x120>)
   2ba0e:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Can't de-register handler rc=%d", rc);
   2ba12:	f01a fe46 	bl	466a2 <log_string_sync>
}
   2ba16:	4628      	mov	r0, r5
   2ba18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ba1c:	f04f 0902 	mov.w	r9, #2
	const char *current_network_mode = nw_mode_preferred;
   2ba20:	4d36      	ldr	r5, [pc, #216]	; (2bafc <w_lte_lc_connect+0x124>)
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   2ba22:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 2bb20 <w_lte_lc_connect+0x148>
		LOG_DBG("Network mode: %s", log_strdup(current_network_mode));
   2ba26:	2304      	movs	r3, #4
   2ba28:	4628      	mov	r0, r5
   2ba2a:	f363 0702 	bfi	r7, r3, #0, #3
   2ba2e:	f01a fe4a 	bl	466c6 <log_strdup>
   2ba32:	f36f 07c5 	bfc	r7, #3, #3
   2ba36:	f364 178f 	bfi	r7, r4, #6, #10
   2ba3a:	4603      	mov	r3, r0
   2ba3c:	4a30      	ldr	r2, [pc, #192]	; (2bb00 <w_lte_lc_connect+0x128>)
   2ba3e:	4931      	ldr	r1, [pc, #196]	; (2bb04 <w_lte_lc_connect+0x12c>)
   2ba40:	4638      	mov	r0, r7
   2ba42:	f01a fe2e 	bl	466a2 <log_string_sync>
		if (at_cmd_write(current_network_mode, NULL, 0, NULL) != 0) {
   2ba46:	2300      	movs	r3, #0
   2ba48:	4628      	mov	r0, r5
   2ba4a:	461a      	mov	r2, r3
   2ba4c:	4619      	mov	r1, r3
   2ba4e:	f7ff fe19 	bl	2b684 <at_cmd_write>
   2ba52:	4603      	mov	r3, r0
   2ba54:	bb88      	cbnz	r0, 2baba <w_lte_lc_connect+0xe2>
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   2ba56:	4602      	mov	r2, r0
   2ba58:	4601      	mov	r1, r0
   2ba5a:	4658      	mov	r0, fp
   2ba5c:	f7ff fe12 	bl	2b684 <at_cmd_write>
   2ba60:	4682      	mov	sl, r0
   2ba62:	bb50      	cbnz	r0, 2baba <w_lte_lc_connect+0xe2>
	return z_impl_k_sem_take(sem, timeout);
   2ba64:	4928      	ldr	r1, [pc, #160]	; (2bb08 <w_lte_lc_connect+0x130>)
   2ba66:	4820      	ldr	r0, [pc, #128]	; (2bae8 <w_lte_lc_connect+0x110>)
   2ba68:	f012 f8c0 	bl	3dbec <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   2ba6c:	f110 0f0b 	cmn.w	r0, #11
   2ba70:	4605      	mov	r5, r0
   2ba72:	d124      	bne.n	2babe <w_lte_lc_connect+0xe6>
			LOG_INF("Network connection attempt timed out");
   2ba74:	2503      	movs	r5, #3
   2ba76:	f365 0802 	bfi	r8, r5, #0, #3
   2ba7a:	f36a 08c5 	bfi	r8, sl, #3, #3
   2ba7e:	f364 188f 	bfi	r8, r4, #6, #10
   2ba82:	4922      	ldr	r1, [pc, #136]	; (2bb0c <w_lte_lc_connect+0x134>)
   2ba84:	4640      	mov	r0, r8
   2ba86:	f01a fe0c 	bl	466a2 <log_string_sync>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   2ba8a:	f1b9 0f01 	cmp.w	r9, #1
   2ba8e:	d028      	beq.n	2bae2 <w_lte_lc_connect+0x10a>
				if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   2ba90:	4653      	mov	r3, sl
   2ba92:	4652      	mov	r2, sl
   2ba94:	4651      	mov	r1, sl
   2ba96:	481e      	ldr	r0, [pc, #120]	; (2bb10 <w_lte_lc_connect+0x138>)
   2ba98:	f7ff fdf4 	bl	2b684 <at_cmd_write>
   2ba9c:	b968      	cbnz	r0, 2baba <w_lte_lc_connect+0xe2>
				LOG_INF("Using fallback network mode");
   2ba9e:	f365 0602 	bfi	r6, r5, #0, #3
   2baa2:	f360 06c5 	bfi	r6, r0, #3, #3
   2baa6:	f364 168f 	bfi	r6, r4, #6, #10
   2baaa:	491a      	ldr	r1, [pc, #104]	; (2bb14 <w_lte_lc_connect+0x13c>)
   2baac:	4630      	mov	r0, r6
   2baae:	f01a fdf8 	bl	466a2 <log_string_sync>
				current_network_mode = nw_mode_fallback;
   2bab2:	4d19      	ldr	r5, [pc, #100]	; (2bb18 <w_lte_lc_connect+0x140>)
   2bab4:	f04f 0901 	mov.w	r9, #1
   2bab8:	e7b5      	b.n	2ba26 <w_lte_lc_connect+0x4e>
			err = -EIO;
   2baba:	f06f 0504 	mvn.w	r5, #4
	rc = at_notif_deregister_handler(NULL, at_handler);
   2babe:	490b      	ldr	r1, [pc, #44]	; (2baec <w_lte_lc_connect+0x114>)
   2bac0:	2000      	movs	r0, #0
   2bac2:	f7fa f8ab 	bl	25c1c <at_notif_deregister_handler>
	if (rc != 0) {
   2bac6:	4602      	mov	r2, r0
   2bac8:	2800      	cmp	r0, #0
   2baca:	d0a4      	beq.n	2ba16 <w_lte_lc_connect+0x3e>
		LOG_ERR("Can't de-register handler rc=%d", rc);
   2bacc:	2101      	movs	r1, #1
   2bace:	f04f 0000 	mov.w	r0, #0
   2bad2:	f361 0002 	bfi	r0, r1, #0, #3
   2bad6:	f36f 00c5 	bfc	r0, #3, #3
   2bada:	f364 108f 	bfi	r0, r4, #6, #10
   2bade:	490f      	ldr	r1, [pc, #60]	; (2bb1c <w_lte_lc_connect+0x144>)
   2bae0:	e797      	b.n	2ba12 <w_lte_lc_connect+0x3a>
				err = -ETIMEDOUT;
   2bae2:	f06f 0573 	mvn.w	r5, #115	; 0x73
   2bae6:	e7ea      	b.n	2babe <w_lte_lc_connect+0xe6>
   2bae8:	20024a58 	.word	0x20024a58
   2baec:	0002b959 	.word	0x0002b959
   2baf0:	00049098 	.word	0x00049098
   2baf4:	00049018 	.word	0x00049018
   2baf8:	0004d639 	.word	0x0004d639
   2bafc:	0004f7c7 	.word	0x0004f7c7
   2bb00:	0004f6bb 	.word	0x0004f6bb
   2bb04:	0004f925 	.word	0x0004f925
   2bb08:	000927c0 	.word	0x000927c0
   2bb0c:	0004f93a 	.word	0x0004f93a
   2bb10:	0004f7de 	.word	0x0004f7de
   2bb14:	0004f95f 	.word	0x0004f95f
   2bb18:	0004f7b0 	.word	0x0004f7b0
   2bb1c:	0004f97b 	.word	0x0004f97b
   2bb20:	0004f7a6 	.word	0x0004f7a6

0002bb24 <lte_lc_power_off>:
{
   2bb24:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   2bb26:	2300      	movs	r3, #0
   2bb28:	4804      	ldr	r0, [pc, #16]	; (2bb3c <lte_lc_power_off+0x18>)
   2bb2a:	461a      	mov	r2, r3
   2bb2c:	4619      	mov	r1, r3
   2bb2e:	f7ff fda9 	bl	2b684 <at_cmd_write>
   2bb32:	2800      	cmp	r0, #0
}
   2bb34:	bf18      	it	ne
   2bb36:	f06f 0004 	mvnne.w	r0, #4
   2bb3a:	bd08      	pop	{r3, pc}
   2bb3c:	0004f8e7 	.word	0x0004f8e7

0002bb40 <lte_lc_psm_req>:
{
   2bb40:	b538      	push	{r3, r4, r5, lr}
	if (at_cmd_write(enable ? psm_req : psm_disable,
   2bb42:	2300      	movs	r3, #0
   2bb44:	4d07      	ldr	r5, [pc, #28]	; (2bb64 <lte_lc_psm_req+0x24>)
   2bb46:	4c08      	ldr	r4, [pc, #32]	; (2bb68 <lte_lc_psm_req+0x28>)
   2bb48:	461a      	mov	r2, r3
   2bb4a:	4298      	cmp	r0, r3
   2bb4c:	bf14      	ite	ne
   2bb4e:	4628      	movne	r0, r5
   2bb50:	4620      	moveq	r0, r4
   2bb52:	4619      	mov	r1, r3
   2bb54:	f7ff fd96 	bl	2b684 <at_cmd_write>
   2bb58:	2800      	cmp	r0, #0
}
   2bb5a:	bf18      	it	ne
   2bb5c:	f06f 0004 	mvnne.w	r0, #4
   2bb60:	bd38      	pop	{r3, r4, r5, pc}
   2bb62:	bf00      	nop
   2bb64:	0004f8fb 	.word	0x0004f8fb
   2bb68:	0004f8f1 	.word	0x0004f8f1

0002bb6c <sensor_sim_channel_get>:

static int sensor_sim_channel_get(struct device *dev,
				  enum sensor_channel chan,
				  struct sensor_value *sample)
{
   2bb6c:	b538      	push	{r3, r4, r5, lr}
   2bb6e:	4614      	mov	r4, r2
	switch (chan) {
   2bb70:	2910      	cmp	r1, #16
   2bb72:	d82f      	bhi.n	2bbd4 <sensor_sim_channel_get+0x68>
   2bb74:	e8df f001 	tbb	[pc, r1]
   2bb78:	18140d09 	.word	0x18140d09
   2bb7c:	2e2e2e2e 	.word	0x2e2e2e2e
   2bb80:	2e2e2e2e 	.word	0x2e2e2e2e
   2bb84:	2e2c282e 	.word	0x2e2c282e
   2bb88:	2a          	.byte	0x2a
   2bb89:	00          	.byte	0x00
	case SENSOR_CHAN_ACCEL_X:
		double_to_sensor_value(accel_samples[0], sample);
   2bb8a:	4b14      	ldr	r3, [pc, #80]	; (2bbdc <sensor_sim_channel_get+0x70>)
		break;
	case SENSOR_CHAN_HUMIDITY:
		double_to_sensor_value(humidity_sample, sample);
		break;
	case SENSOR_CHAN_PRESS:
		double_to_sensor_value(pressure_sample, sample);
   2bb8c:	e9d3 0100 	ldrd	r0, r1, [r3]
   2bb90:	e002      	b.n	2bb98 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[1], sample);
   2bb92:	4b12      	ldr	r3, [pc, #72]	; (2bbdc <sensor_sim_channel_get+0x70>)
   2bb94:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
		double_to_sensor_value(pressure_sample, sample);
   2bb98:	f7ee fe0e 	bl	1a7b8 <double_to_sensor_value>
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   2bb9c:	2000      	movs	r0, #0
}
   2bb9e:	bd38      	pop	{r3, r4, r5, pc}
		double_to_sensor_value(accel_samples[2], sample);
   2bba0:	4b0e      	ldr	r3, [pc, #56]	; (2bbdc <sensor_sim_channel_get+0x70>)
   2bba2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   2bba6:	e7f7      	b.n	2bb98 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[0], sample);
   2bba8:	4d0c      	ldr	r5, [pc, #48]	; (2bbdc <sensor_sim_channel_get+0x70>)
   2bbaa:	e9d5 0100 	ldrd	r0, r1, [r5]
   2bbae:	f7ee fe03 	bl	1a7b8 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[1], ++sample);
   2bbb2:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   2bbb6:	f104 0208 	add.w	r2, r4, #8
   2bbba:	f7ee fdfd 	bl	1a7b8 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[2], ++sample);
   2bbbe:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   2bbc2:	f104 0210 	add.w	r2, r4, #16
   2bbc6:	e7e7      	b.n	2bb98 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(temp_sample, sample);
   2bbc8:	4b05      	ldr	r3, [pc, #20]	; (2bbe0 <sensor_sim_channel_get+0x74>)
   2bbca:	e7df      	b.n	2bb8c <sensor_sim_channel_get+0x20>
		double_to_sensor_value(humidity_sample, sample);
   2bbcc:	4b05      	ldr	r3, [pc, #20]	; (2bbe4 <sensor_sim_channel_get+0x78>)
   2bbce:	e7dd      	b.n	2bb8c <sensor_sim_channel_get+0x20>
		double_to_sensor_value(pressure_sample, sample);
   2bbd0:	4b05      	ldr	r3, [pc, #20]	; (2bbe8 <sensor_sim_channel_get+0x7c>)
   2bbd2:	e7db      	b.n	2bb8c <sensor_sim_channel_get+0x20>
		return -ENOTSUP;
   2bbd4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2bbd8:	e7e1      	b.n	2bb9e <sensor_sim_channel_get+0x32>
   2bbda:	bf00      	nop
   2bbdc:	20022a68 	.word	0x20022a68
   2bbe0:	20022d78 	.word	0x20022d78
   2bbe4:	20022a80 	.word	0x20022a80
   2bbe8:	20022a88 	.word	0x20022a88

0002bbec <sensor_sim_trigger_set>:
{
   2bbec:	b508      	push	{r3, lr}
	struct sensor_sim_data *drv_data = dev->driver_data;
   2bbee:	6883      	ldr	r3, [r0, #8]
	switch (trig->type) {
   2bbf0:	8808      	ldrh	r0, [r1, #0]
   2bbf2:	2801      	cmp	r0, #1
   2bbf4:	d104      	bne.n	2bc00 <sensor_sim_trigger_set+0x14>
		drv_data->drdy_trigger = *trig;
   2bbf6:	6808      	ldr	r0, [r1, #0]
		drv_data->drdy_handler = handler;
   2bbf8:	631a      	str	r2, [r3, #48]	; 0x30
		drv_data->drdy_trigger = *trig;
   2bbfa:	6358      	str	r0, [r3, #52]	; 0x34
	int ret = 0;
   2bbfc:	2000      	movs	r0, #0
}
   2bbfe:	bd08      	pop	{r3, pc}
		LOG_ERR("Unsupported sensor trigger");
   2bc00:	2301      	movs	r3, #1
   2bc02:	f04f 0000 	mov.w	r0, #0
   2bc06:	4a08      	ldr	r2, [pc, #32]	; (2bc28 <sensor_sim_trigger_set+0x3c>)
   2bc08:	f363 0002 	bfi	r0, r3, #0, #3
   2bc0c:	4b07      	ldr	r3, [pc, #28]	; (2bc2c <sensor_sim_trigger_set+0x40>)
   2bc0e:	f36f 00c5 	bfc	r0, #3, #3
   2bc12:	1a9b      	subs	r3, r3, r2
   2bc14:	08db      	lsrs	r3, r3, #3
   2bc16:	f363 108f 	bfi	r0, r3, #6, #10
   2bc1a:	4905      	ldr	r1, [pc, #20]	; (2bc30 <sensor_sim_trigger_set+0x44>)
   2bc1c:	f01a fd41 	bl	466a2 <log_string_sync>
   2bc20:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return ret;
   2bc24:	e7eb      	b.n	2bbfe <sensor_sim_trigger_set+0x12>
   2bc26:	bf00      	nop
   2bc28:	00049018 	.word	0x00049018
   2bc2c:	00049100 	.word	0x00049100
   2bc30:	0004f9c8 	.word	0x0004f9c8

0002bc34 <generate_sine.constprop.2>:
static double generate_sine(double offset, double amplitude)
   2bc34:	b508      	push	{r3, lr}
	return z_impl_k_uptime_get();
   2bc36:	f01c ffd9 	bl	48bec <z_impl_k_uptime_get>
	return offset + amplitude * sin(time % 65535);
   2bc3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2bc3e:	fbb0 f3f3 	udiv	r3, r0, r3
   2bc42:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
   2bc46:	1ac0      	subs	r0, r0, r3
   2bc48:	f7ec fd2c 	bl	186a4 <__aeabi_ui2d>
   2bc4c:	ec41 0b10 	vmov	d0, r0, r1
   2bc50:	f7f2 fa8a 	bl	1e168 <sin>
   2bc54:	2200      	movs	r2, #0
   2bc56:	4b05      	ldr	r3, [pc, #20]	; (2bc6c <generate_sine.constprop.2+0x38>)
   2bc58:	ec51 0b10 	vmov	r0, r1, d0
   2bc5c:	f7ec fd9c 	bl	18798 <__aeabi_dmul>
   2bc60:	2200      	movs	r2, #0
   2bc62:	2300      	movs	r3, #0
   2bc64:	f7ec fbe2 	bl	1842c <__adddf3>
}
   2bc68:	bd08      	pop	{r3, pc}
   2bc6a:	bf00      	nop
   2bc6c:	40340000 	.word	0x40340000

0002bc70 <sensor_sim_init>:
{
   2bc70:	b530      	push	{r4, r5, lr}
	struct sensor_sim_data *drv_data = dev->driver_data;
   2bc72:	6885      	ldr	r5, [r0, #8]
{
   2bc74:	b087      	sub	sp, #28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2bc76:	2400      	movs	r4, #0
   2bc78:	f06f 0305 	mvn.w	r3, #5
   2bc7c:	f44f 7200 	mov.w	r2, #512	; 0x200
   2bc80:	f105 0138 	add.w	r1, r5, #56	; 0x38
   2bc84:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2bc88:	e9cd 0400 	strd	r0, r4, [sp]
   2bc8c:	4b06      	ldr	r3, [pc, #24]	; (2bca8 <sensor_sim_init+0x38>)
   2bc8e:	e9cd 4404 	strd	r4, r4, [sp, #16]
   2bc92:	f505 700e 	add.w	r0, r5, #568	; 0x238
   2bc96:	f012 f8ef 	bl	3de78 <z_impl_k_thread_create>
   2bc9a:	f7f6 f9ef 	bl	2207c <z_timer_cycle_get_32>
	srand(k_cycle_get_32());
   2bc9e:	f014 f8ab 	bl	3fdf8 <srand>
}
   2bca2:	4620      	mov	r0, r4
   2bca4:	b007      	add	sp, #28
   2bca6:	bd30      	pop	{r4, r5, pc}
   2bca8:	00048967 	.word	0x00048967

0002bcac <start>:
	return err;
}
#endif

static int start(struct device *dev)
{
   2bcac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int retval;
	struct gps_drv_data *drv_data = dev->driver_data;
	nrf_gnss_fix_retry_t    fix_retry    = 0;
   2bcb0:	2400      	movs	r4, #0
	nrf_gnss_fix_interval_t fix_interval = 1;
   2bcb2:	2501      	movs	r5, #1
{
   2bcb4:	b0a1      	sub	sp, #132	; 0x84
	struct gps_drv_data *drv_data = dev->driver_data;
   2bcb6:	6887      	ldr	r7, [r0, #8]
	char buf[50] = {0};
   2bcb8:	2232      	movs	r2, #50	; 0x32
   2bcba:	4621      	mov	r1, r4
   2bcbc:	a813      	add	r0, sp, #76	; 0x4c
	nrf_gnss_fix_retry_t    fix_retry    = 0;
   2bcbe:	f8ad 4010 	strh.w	r4, [sp, #16]
	nrf_gnss_fix_interval_t fix_interval = 1;
   2bcc2:	f8ad 5012 	strh.w	r5, [sp, #18]
	nrf_gnss_nmea_mask_t    nmea_mask    = 0;
	nrf_gnss_delete_mask_t  delete_mask  = 0;
   2bcc6:	9406      	str	r4, [sp, #24]
#endif
#ifdef CONFIG_NRF9160_GPS_NMEA_GLL
	nmea_mask |= NRF_GNSS_NMEA_GLL_MASK;
#endif
#ifdef CONFIG_NRF9160_GPS_NMEA_GGA
	nmea_mask |= NRF_GNSS_NMEA_GGA_MASK;
   2bcc8:	f8ad 5014 	strh.w	r5, [sp, #20]
	char buf[50] = {0};
   2bccc:	f014 f83e 	bl	3fd4c <memset>
	err = at_params_list_init(&at_resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   2bcd0:	2105      	movs	r1, #5
   2bcd2:	a807      	add	r0, sp, #28
	struct at_param_list at_resp_list = {0};
   2bcd4:	e9cd 4407 	strd	r4, r4, [sp, #28]
	err = at_params_list_init(&at_resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   2bcd8:	f01c fb1d 	bl	48316 <at_params_list_init>
   2bcdc:	4ec0      	ldr	r6, [pc, #768]	; (2bfe0 <start+0x334>)
   2bcde:	4bc1      	ldr	r3, [pc, #772]	; (2bfe4 <start+0x338>)
	if (err) {
   2bce0:	4681      	mov	r9, r0
   2bce2:	1af6      	subs	r6, r6, r3
   2bce4:	f3c6 06c9 	ubfx	r6, r6, #3, #10
   2bce8:	b1c0      	cbz	r0, 2bd1c <start+0x70>
		LOG_ERR("Could init AT params list, error: %d", err);
   2bcea:	f04f 0000 	mov.w	r0, #0
   2bcee:	f365 0002 	bfi	r0, r5, #0, #3
   2bcf2:	f364 00c5 	bfi	r0, r4, #3, #3
   2bcf6:	f366 108f 	bfi	r0, r6, #6, #10
   2bcfa:	464a      	mov	r2, r9
   2bcfc:	49ba      	ldr	r1, [pc, #744]	; (2bfe8 <start+0x33c>)
   2bcfe:	f01a fcd0 	bl	466a2 <log_string_sync>
	nmea_mask |= NRF_GNSS_NMEA_RMC_MASK;
#endif

#ifdef CONFIG_NRF9160_GPS_HANDLE_MODEM_CONFIGURATION
	if (enable_gps(dev) != 0) {
		LOG_ERR("Failed to enable GPS");
   2bd02:	f04f 0000 	mov.w	r0, #0
   2bd06:	2301      	movs	r3, #1
   2bd08:	f363 0002 	bfi	r0, r3, #0, #3
   2bd0c:	f36f 00c5 	bfc	r0, #3, #3
   2bd10:	49b6      	ldr	r1, [pc, #728]	; (2bfec <start+0x340>)
   2bd12:	f366 108f 	bfi	r0, r6, #6, #10
				NRF_SO_GNSS_START,
				&delete_mask,
				sizeof(delete_mask));

	if (retval != 0) {
		LOG_ERR("Failed to start GPS");
   2bd16:	f01a fcc4 	bl	466a2 <log_string_sync>
   2bd1a:	e15b      	b.n	2bfd4 <start+0x328>
	err = at_cmd_write(AT_XSYSTEMMODE_REQUEST, buf, sizeof(buf), NULL);
   2bd1c:	4603      	mov	r3, r0
   2bd1e:	2232      	movs	r2, #50	; 0x32
   2bd20:	a913      	add	r1, sp, #76	; 0x4c
   2bd22:	48b3      	ldr	r0, [pc, #716]	; (2bff0 <start+0x344>)
   2bd24:	f7ff fcae 	bl	2b684 <at_cmd_write>
	if (err) {
   2bd28:	4680      	mov	r8, r0
   2bd2a:	2800      	cmp	r0, #0
   2bd2c:	d044      	beq.n	2bdb8 <start+0x10c>
		LOG_ERR("Could not get modem's system mode");
   2bd2e:	f04f 0000 	mov.w	r0, #0
   2bd32:	f365 0002 	bfi	r0, r5, #0, #3
   2bd36:	f369 00c5 	bfi	r0, r9, #3, #3
   2bd3a:	f366 108f 	bfi	r0, r6, #6, #10
   2bd3e:	49ad      	ldr	r1, [pc, #692]	; (2bff4 <start+0x348>)
   2bd40:	f01a fcaf 	bl	466a2 <log_string_sync>
		err = -EIO;
   2bd44:	f06f 0404 	mvn.w	r4, #4
	at_params_list_free(&at_resp_list);
   2bd48:	a807      	add	r0, sp, #28
   2bd4a:	f01c faf7 	bl	4833c <at_params_list_free>
	if (enable_gps(dev) != 0) {
   2bd4e:	2c00      	cmp	r4, #0
   2bd50:	d1d7      	bne.n	2bd02 <start+0x56>
	if (drv_data->socket < 0) {
   2bd52:	6a3b      	ldr	r3, [r7, #32]
   2bd54:	2b00      	cmp	r3, #0
   2bd56:	da17      	bge.n	2bd88 <start+0xdc>
		drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   2bd58:	f44f 7201 	mov.w	r2, #516	; 0x204
   2bd5c:	2102      	movs	r1, #2
   2bd5e:	2001      	movs	r0, #1
   2bd60:	f001 ff4e 	bl	2dc00 <nrf_socket>
   2bd64:	4602      	mov	r2, r0
		if (drv_data->socket >= 0) {
   2bd66:	2a00      	cmp	r2, #0
		drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   2bd68:	6238      	str	r0, [r7, #32]
			LOG_DBG("GPS socket created");
   2bd6a:	f04f 0000 	mov.w	r0, #0
		if (drv_data->socket >= 0) {
   2bd6e:	f2c0 8127 	blt.w	2bfc0 <start+0x314>
			LOG_DBG("GPS socket created");
   2bd72:	2304      	movs	r3, #4
   2bd74:	f363 0002 	bfi	r0, r3, #0, #3
   2bd78:	f364 00c5 	bfi	r0, r4, #3, #3
   2bd7c:	f366 108f 	bfi	r0, r6, #6, #10
   2bd80:	4a9d      	ldr	r2, [pc, #628]	; (2bff8 <start+0x34c>)
   2bd82:	499e      	ldr	r1, [pc, #632]	; (2bffc <start+0x350>)
   2bd84:	f01a fc8d 	bl	466a2 <log_string_sync>
	retval = nrf_setsockopt(drv_data->socket,
   2bd88:	2402      	movs	r4, #2
   2bd8a:	9400      	str	r4, [sp, #0]
   2bd8c:	ab04      	add	r3, sp, #16
   2bd8e:	4622      	mov	r2, r4
   2bd90:	f44f 7101 	mov.w	r1, #516	; 0x204
   2bd94:	6a38      	ldr	r0, [r7, #32]
   2bd96:	f002 f835 	bl	2de04 <nrf_setsockopt>
	if (retval != 0) {
   2bd9a:	4680      	mov	r8, r0
   2bd9c:	2800      	cmp	r0, #0
   2bd9e:	f000 8155 	beq.w	2c04c <start+0x3a0>
		LOG_ERR("Failed to set fix retry value");
   2bda2:	f04f 0000 	mov.w	r0, #0
   2bda6:	2301      	movs	r3, #1
   2bda8:	f363 0002 	bfi	r0, r3, #0, #3
   2bdac:	f36f 00c5 	bfc	r0, #3, #3
   2bdb0:	f366 108f 	bfi	r0, r6, #6, #10
   2bdb4:	4992      	ldr	r1, [pc, #584]	; (2c000 <start+0x354>)
   2bdb6:	e7ae      	b.n	2bd16 <start+0x6a>
	err = at_parser_max_params_from_str(buf,
   2bdb8:	4601      	mov	r1, r0
   2bdba:	2305      	movs	r3, #5
   2bdbc:	aa07      	add	r2, sp, #28
   2bdbe:	a813      	add	r0, sp, #76	; 0x4c
   2bdc0:	f7fa fa36 	bl	26230 <at_parser_max_params_from_str>
	if (err) {
   2bdc4:	4604      	mov	r4, r0
   2bdc6:	b160      	cbz	r0, 2bde2 <start+0x136>
		LOG_ERR("Could not parse AT response, error: %d", err);
   2bdc8:	f04f 0000 	mov.w	r0, #0
   2bdcc:	4622      	mov	r2, r4
   2bdce:	f365 0002 	bfi	r0, r5, #0, #3
   2bdd2:	f368 00c5 	bfi	r0, r8, #3, #3
   2bdd6:	498b      	ldr	r1, [pc, #556]	; (2c004 <start+0x358>)
   2bdd8:	f366 108f 	bfi	r0, r6, #6, #10
		LOG_ERR("Could not get GPS mode state, error: %d", err);
   2bddc:	f01a fc61 	bl	466a2 <log_string_sync>
   2bde0:	e7b2      	b.n	2bd48 <start+0x9c>
	err = at_params_short_get(&at_resp_list,
   2bde2:	f10d 0216 	add.w	r2, sp, #22
   2bde6:	2103      	movs	r1, #3
   2bde8:	a807      	add	r0, sp, #28
   2bdea:	f01c fb3f 	bl	4846c <at_params_short_get>
	if (err) {
   2bdee:	4604      	mov	r4, r0
   2bdf0:	b150      	cbz	r0, 2be08 <start+0x15c>
		LOG_ERR("Could not get GPS mode state, error: %d", err);
   2bdf2:	f04f 0000 	mov.w	r0, #0
   2bdf6:	f365 0002 	bfi	r0, r5, #0, #3
   2bdfa:	f368 00c5 	bfi	r0, r8, #3, #3
   2bdfe:	f366 108f 	bfi	r0, r6, #6, #10
   2be02:	4622      	mov	r2, r4
   2be04:	4980      	ldr	r1, [pc, #512]	; (2c008 <start+0x35c>)
   2be06:	e7e9      	b.n	2bddc <start+0x130>
	if (gps_param_value != 1) {
   2be08:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   2be0c:	2b01      	cmp	r3, #1
   2be0e:	d050      	beq.n	2beb2 <start+0x206>
		u16_t values[AT_XSYSTEMMODE_PARAMS_COUNT] = {0};
   2be10:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
   2be14:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
		LOG_DBG("GPS mode is not enabled, attempting to enable it");
   2be18:	2304      	movs	r3, #4
   2be1a:	f04f 0000 	mov.w	r0, #0
   2be1e:	f363 0002 	bfi	r0, r3, #0, #3
   2be22:	f364 00c5 	bfi	r0, r4, #3, #3
   2be26:	f366 108f 	bfi	r0, r6, #6, #10
   2be2a:	4a78      	ldr	r2, [pc, #480]	; (2c00c <start+0x360>)
   2be2c:	4978      	ldr	r1, [pc, #480]	; (2c010 <start+0x364>)
   2be2e:	f01a fc38 	bl	466a2 <log_string_sync>
			at_params_short_get(&at_resp_list, i, &values[i]);
   2be32:	ab09      	add	r3, sp, #36	; 0x24
   2be34:	eb03 0244 	add.w	r2, r3, r4, lsl #1
   2be38:	4621      	mov	r1, r4
   2be3a:	a807      	add	r0, sp, #28
		for (size_t i = 0; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   2be3c:	3401      	adds	r4, #1
			at_params_short_get(&at_resp_list, i, &values[i]);
   2be3e:	f01c fb15 	bl	4846c <at_params_short_get>
		for (size_t i = 0; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   2be42:	2c05      	cmp	r4, #5
   2be44:	d1f5      	bne.n	2be32 <start+0x186>
		values[AT_XSYSTEMMODE_GPS_PARAM_INDEX] = 1;
   2be46:	2501      	movs	r5, #1
		len = snprintf(cmd, sizeof(cmd), AT_XSYSTEMMODE_PROTO,
   2be48:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   2be4c:	211c      	movs	r1, #28
   2be4e:	9201      	str	r2, [sp, #4]
   2be50:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   2be54:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2be58:	9200      	str	r2, [sp, #0]
   2be5a:	9502      	str	r5, [sp, #8]
   2be5c:	4a6d      	ldr	r2, [pc, #436]	; (2c014 <start+0x368>)
   2be5e:	a80c      	add	r0, sp, #48	; 0x30
		values[AT_XSYSTEMMODE_GPS_PARAM_INDEX] = 1;
   2be60:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
		LOG_DBG("Sending AT command: %s", log_strdup(cmd));
   2be64:	f04f 0400 	mov.w	r4, #0
		len = snprintf(cmd, sizeof(cmd), AT_XSYSTEMMODE_PROTO,
   2be68:	f014 f9bc 	bl	401e4 <snprintf>
		LOG_DBG("Sending AT command: %s", log_strdup(cmd));
   2be6c:	2304      	movs	r3, #4
   2be6e:	a80c      	add	r0, sp, #48	; 0x30
   2be70:	f363 0402 	bfi	r4, r3, #0, #3
   2be74:	f01a fc27 	bl	466c6 <log_strdup>
   2be78:	f36f 04c5 	bfc	r4, #3, #3
   2be7c:	f366 148f 	bfi	r4, r6, #6, #10
   2be80:	4603      	mov	r3, r0
   2be82:	4a62      	ldr	r2, [pc, #392]	; (2c00c <start+0x360>)
   2be84:	4620      	mov	r0, r4
   2be86:	4964      	ldr	r1, [pc, #400]	; (2c018 <start+0x36c>)
   2be88:	f01a fc0b 	bl	466a2 <log_string_sync>
		err = at_cmd_write(cmd, NULL, 0, NULL);
   2be8c:	2300      	movs	r3, #0
   2be8e:	a80c      	add	r0, sp, #48	; 0x30
   2be90:	461a      	mov	r2, r3
   2be92:	4619      	mov	r1, r3
   2be94:	f7ff fbf6 	bl	2b684 <at_cmd_write>
		if (err) {
   2be98:	4604      	mov	r4, r0
   2be9a:	b150      	cbz	r0, 2beb2 <start+0x206>
			LOG_ERR("Could not enable GPS mode, error: %d", err);
   2be9c:	f04f 0000 	mov.w	r0, #0
   2bea0:	f365 0002 	bfi	r0, r5, #0, #3
   2bea4:	f36f 00c5 	bfc	r0, #3, #3
   2bea8:	f366 108f 	bfi	r0, r6, #6, #10
   2beac:	4622      	mov	r2, r4
   2beae:	495b      	ldr	r1, [pc, #364]	; (2c01c <start+0x370>)
   2beb0:	e794      	b.n	2bddc <start+0x130>
	LOG_DBG("GPS mode is enabled");
   2beb2:	f04f 0804 	mov.w	r8, #4
   2beb6:	f04f 0000 	mov.w	r0, #0
   2beba:	f368 0002 	bfi	r0, r8, #0, #3
   2bebe:	f36f 00c5 	bfc	r0, #3, #3
   2bec2:	f366 108f 	bfi	r0, r6, #6, #10
   2bec6:	4a51      	ldr	r2, [pc, #324]	; (2c00c <start+0x360>)
   2bec8:	4955      	ldr	r1, [pc, #340]	; (2c020 <start+0x374>)
   2beca:	f01a fbea 	bl	466a2 <log_string_sync>
	err = at_cmd_write(AT_CFUN_REQUEST, buf, sizeof(buf), NULL);
   2bece:	2300      	movs	r3, #0
   2bed0:	2232      	movs	r2, #50	; 0x32
   2bed2:	a913      	add	r1, sp, #76	; 0x4c
   2bed4:	4853      	ldr	r0, [pc, #332]	; (2c024 <start+0x378>)
   2bed6:	f7ff fbd5 	bl	2b684 <at_cmd_write>
	if (err) {
   2beda:	4604      	mov	r4, r0
   2bedc:	b158      	cbz	r0, 2bef6 <start+0x24a>
		LOG_ERR("Could not get functional mode, error: %d", err);
   2bede:	f04f 0000 	mov.w	r0, #0
   2bee2:	2301      	movs	r3, #1
   2bee4:	f363 0002 	bfi	r0, r3, #0, #3
   2bee8:	f36f 00c5 	bfc	r0, #3, #3
   2beec:	f366 108f 	bfi	r0, r6, #6, #10
   2bef0:	4622      	mov	r2, r4
   2bef2:	494d      	ldr	r1, [pc, #308]	; (2c028 <start+0x37c>)
   2bef4:	e772      	b.n	2bddc <start+0x130>
	err = at_parser_max_params_from_str(buf,
   2bef6:	4601      	mov	r1, r0
   2bef8:	2302      	movs	r3, #2
   2befa:	aa07      	add	r2, sp, #28
   2befc:	a813      	add	r0, sp, #76	; 0x4c
   2befe:	f7fa f997 	bl	26230 <at_parser_max_params_from_str>
	if (err) {
   2bf02:	4604      	mov	r4, r0
   2bf04:	b158      	cbz	r0, 2bf1e <start+0x272>
		LOG_ERR("Could not parse functional mode response, error: %d",
   2bf06:	f04f 0000 	mov.w	r0, #0
   2bf0a:	2301      	movs	r3, #1
   2bf0c:	f363 0002 	bfi	r0, r3, #0, #3
   2bf10:	f36f 00c5 	bfc	r0, #3, #3
   2bf14:	f366 108f 	bfi	r0, r6, #6, #10
   2bf18:	4622      	mov	r2, r4
   2bf1a:	4944      	ldr	r1, [pc, #272]	; (2c02c <start+0x380>)
   2bf1c:	e75e      	b.n	2bddc <start+0x130>
	err = at_params_short_get(&at_resp_list, 1, &functional_mode);
   2bf1e:	aa0c      	add	r2, sp, #48	; 0x30
   2bf20:	2101      	movs	r1, #1
   2bf22:	a807      	add	r0, sp, #28
   2bf24:	f01c faa2 	bl	4846c <at_params_short_get>
	if (err) {
   2bf28:	4604      	mov	r4, r0
		LOG_ERR("Could not get value of functional mode, error: %d",
   2bf2a:	f04f 0000 	mov.w	r0, #0
	if (err) {
   2bf2e:	b14c      	cbz	r4, 2bf44 <start+0x298>
		LOG_ERR("Could not get value of functional mode, error: %d",
   2bf30:	2301      	movs	r3, #1
   2bf32:	f363 0002 	bfi	r0, r3, #0, #3
   2bf36:	f36f 00c5 	bfc	r0, #3, #3
   2bf3a:	f366 108f 	bfi	r0, r6, #6, #10
   2bf3e:	4622      	mov	r2, r4
   2bf40:	493b      	ldr	r1, [pc, #236]	; (2c030 <start+0x384>)
   2bf42:	e74b      	b.n	2bddc <start+0x130>
	LOG_DBG("Functional mode: %d", functional_mode);
   2bf44:	f368 0002 	bfi	r0, r8, #0, #3
   2bf48:	f364 00c5 	bfi	r0, r4, #3, #3
   2bf4c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2bf50:	f366 108f 	bfi	r0, r6, #6, #10
   2bf54:	4a2d      	ldr	r2, [pc, #180]	; (2c00c <start+0x360>)
   2bf56:	4937      	ldr	r1, [pc, #220]	; (2c034 <start+0x388>)
   2bf58:	f01a fba3 	bl	466a2 <log_string_sync>
	if (functional_mode != FUNCTIONAL_MODE_ENABLED) {
   2bf5c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2bf60:	2b01      	cmp	r3, #1
   2bf62:	f43f aef1 	beq.w	2bd48 <start+0x9c>
		LOG_DBG("Functional mode was %d, attemping to set to %d",
   2bf66:	f04f 0000 	mov.w	r0, #0
   2bf6a:	2501      	movs	r5, #1
   2bf6c:	f368 0002 	bfi	r0, r8, #0, #3
   2bf70:	f364 00c5 	bfi	r0, r4, #3, #3
   2bf74:	f366 108f 	bfi	r0, r6, #6, #10
   2bf78:	4a24      	ldr	r2, [pc, #144]	; (2c00c <start+0x360>)
   2bf7a:	492f      	ldr	r1, [pc, #188]	; (2c038 <start+0x38c>)
   2bf7c:	9500      	str	r5, [sp, #0]
   2bf7e:	f01a fb90 	bl	466a2 <log_string_sync>
		err = at_cmd_write(AT_CFUN_1, NULL, 0, NULL);
   2bf82:	4623      	mov	r3, r4
   2bf84:	4622      	mov	r2, r4
   2bf86:	4621      	mov	r1, r4
   2bf88:	482c      	ldr	r0, [pc, #176]	; (2c03c <start+0x390>)
   2bf8a:	f7ff fb7b 	bl	2b684 <at_cmd_write>
		if (err) {
   2bf8e:	4604      	mov	r4, r0
			LOG_ERR("Could not set functional mode to %d",
   2bf90:	f04f 0000 	mov.w	r0, #0
		if (err) {
   2bf94:	b144      	cbz	r4, 2bfa8 <start+0x2fc>
			LOG_ERR("Could not set functional mode to %d",
   2bf96:	f365 0002 	bfi	r0, r5, #0, #3
   2bf9a:	f36f 00c5 	bfc	r0, #3, #3
   2bf9e:	f366 108f 	bfi	r0, r6, #6, #10
   2bfa2:	462a      	mov	r2, r5
   2bfa4:	4926      	ldr	r1, [pc, #152]	; (2c040 <start+0x394>)
   2bfa6:	e719      	b.n	2bddc <start+0x130>
		LOG_DBG("Functional mode set to %d", FUNCTIONAL_MODE_ENABLED);
   2bfa8:	f368 0002 	bfi	r0, r8, #0, #3
   2bfac:	f364 00c5 	bfi	r0, r4, #3, #3
   2bfb0:	f366 108f 	bfi	r0, r6, #6, #10
   2bfb4:	462b      	mov	r3, r5
   2bfb6:	4a15      	ldr	r2, [pc, #84]	; (2c00c <start+0x360>)
   2bfb8:	4922      	ldr	r1, [pc, #136]	; (2c044 <start+0x398>)
   2bfba:	f01a fb72 	bl	466a2 <log_string_sync>
   2bfbe:	e6c3      	b.n	2bd48 <start+0x9c>
			LOG_ERR("Could not init socket (err: %d)",
   2bfc0:	2101      	movs	r1, #1
   2bfc2:	f361 0002 	bfi	r0, r1, #0, #3
   2bfc6:	f364 00c5 	bfi	r0, r4, #3, #3
   2bfca:	f366 108f 	bfi	r0, r6, #6, #10
   2bfce:	491e      	ldr	r1, [pc, #120]	; (2c048 <start+0x39c>)
   2bfd0:	f01a fb67 	bl	466a2 <log_string_sync>
		return -EIO;
   2bfd4:	f06f 0404 	mvn.w	r4, #4
	k_sem_give(&drv_data->thread_run_sem);

	LOG_DBG("GPS operational");

	return retval;
}
   2bfd8:	4620      	mov	r0, r4
   2bfda:	b021      	add	sp, #132	; 0x84
   2bfdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2bfe0:	000490c8 	.word	0x000490c8
   2bfe4:	00049018 	.word	0x00049018
   2bfe8:	0004fc19 	.word	0x0004fc19
   2bfec:	0004fe87 	.word	0x0004fe87
   2bff0:	0004d71d 	.word	0x0004d71d
   2bff4:	0004fc3e 	.word	0x0004fc3e
   2bff8:	0004fa1a 	.word	0x0004fa1a
   2bffc:	0004fe9c 	.word	0x0004fe9c
   2c000:	0004fed3 	.word	0x0004fed3
   2c004:	0004fc60 	.word	0x0004fc60
   2c008:	0004fc87 	.word	0x0004fc87
   2c00c:	0004fa0f 	.word	0x0004fa0f
   2c010:	0004fcaf 	.word	0x0004fcaf
   2c014:	0004fce4 	.word	0x0004fce4
   2c018:	0004fd00 	.word	0x0004fd00
   2c01c:	0004fd1b 	.word	0x0004fd1b
   2c020:	0004fd40 	.word	0x0004fd40
   2c024:	0004fd58 	.word	0x0004fd58
   2c028:	0004fd61 	.word	0x0004fd61
   2c02c:	0004fd8a 	.word	0x0004fd8a
   2c030:	0004fdbe 	.word	0x0004fdbe
   2c034:	0004fdf0 	.word	0x0004fdf0
   2c038:	0004fe08 	.word	0x0004fe08
   2c03c:	0004fe3b 	.word	0x0004fe3b
   2c040:	0004fe45 	.word	0x0004fe45
   2c044:	0004fe69 	.word	0x0004fe69
   2c048:	0004feb3 	.word	0x0004feb3
	retval = nrf_setsockopt(drv_data->socket,
   2c04c:	9400      	str	r4, [sp, #0]
   2c04e:	f10d 0312 	add.w	r3, sp, #18
   2c052:	2201      	movs	r2, #1
   2c054:	f44f 7101 	mov.w	r1, #516	; 0x204
   2c058:	6a38      	ldr	r0, [r7, #32]
   2c05a:	f001 fed3 	bl	2de04 <nrf_setsockopt>
	if (retval != 0) {
   2c05e:	4605      	mov	r5, r0
   2c060:	b150      	cbz	r0, 2c078 <start+0x3cc>
		LOG_ERR("Failed to set fix interval value");
   2c062:	f04f 0000 	mov.w	r0, #0
   2c066:	2301      	movs	r3, #1
   2c068:	f363 0002 	bfi	r0, r3, #0, #3
   2c06c:	f368 00c5 	bfi	r0, r8, #3, #3
   2c070:	f366 108f 	bfi	r0, r6, #6, #10
   2c074:	4922      	ldr	r1, [pc, #136]	; (2c100 <start+0x454>)
   2c076:	e64e      	b.n	2bd16 <start+0x6a>
	retval = nrf_setsockopt(drv_data->socket,
   2c078:	9400      	str	r4, [sp, #0]
   2c07a:	ab05      	add	r3, sp, #20
   2c07c:	2204      	movs	r2, #4
   2c07e:	f44f 7101 	mov.w	r1, #516	; 0x204
   2c082:	6a38      	ldr	r0, [r7, #32]
   2c084:	f001 febe 	bl	2de04 <nrf_setsockopt>
	if (retval != 0) {
   2c088:	4680      	mov	r8, r0
   2c08a:	b150      	cbz	r0, 2c0a2 <start+0x3f6>
		LOG_ERR("Failed to set nmea mask");
   2c08c:	f04f 0000 	mov.w	r0, #0
   2c090:	2301      	movs	r3, #1
   2c092:	f363 0002 	bfi	r0, r3, #0, #3
   2c096:	f365 00c5 	bfi	r0, r5, #3, #3
   2c09a:	f366 108f 	bfi	r0, r6, #6, #10
   2c09e:	4919      	ldr	r1, [pc, #100]	; (2c104 <start+0x458>)
   2c0a0:	e639      	b.n	2bd16 <start+0x6a>
	retval = nrf_setsockopt(drv_data->socket,
   2c0a2:	2504      	movs	r5, #4
   2c0a4:	9500      	str	r5, [sp, #0]
   2c0a6:	2207      	movs	r2, #7
   2c0a8:	ab06      	add	r3, sp, #24
   2c0aa:	f44f 7101 	mov.w	r1, #516	; 0x204
   2c0ae:	6a38      	ldr	r0, [r7, #32]
   2c0b0:	f001 fea8 	bl	2de04 <nrf_setsockopt>
   2c0b4:	2201      	movs	r2, #1
	if (retval != 0) {
   2c0b6:	4604      	mov	r4, r0
   2c0b8:	b148      	cbz	r0, 2c0ce <start+0x422>
		LOG_ERR("Failed to start GPS");
   2c0ba:	f04f 0000 	mov.w	r0, #0
   2c0be:	f362 0002 	bfi	r0, r2, #0, #3
   2c0c2:	f368 00c5 	bfi	r0, r8, #3, #3
   2c0c6:	f366 108f 	bfi	r0, r6, #6, #10
   2c0ca:	490f      	ldr	r1, [pc, #60]	; (2c108 <start+0x45c>)
   2c0cc:	e623      	b.n	2bd16 <start+0x6a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2c0ce:	f107 031c 	add.w	r3, r7, #28
   2c0d2:	e8d3 1fef 	ldaex	r1, [r3]
   2c0d6:	e8c3 2fe0 	stlex	r0, r2, [r3]
   2c0da:	2800      	cmp	r0, #0
   2c0dc:	d1f9      	bne.n	2c0d2 <start+0x426>
	z_impl_k_sem_give(sem);
   2c0de:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
   2c0e2:	f011 fd3b 	bl	3db5c <z_impl_k_sem_give>
	LOG_DBG("GPS operational");
   2c0e6:	f04f 0000 	mov.w	r0, #0
   2c0ea:	f365 0002 	bfi	r0, r5, #0, #3
   2c0ee:	f364 00c5 	bfi	r0, r4, #3, #3
   2c0f2:	f366 108f 	bfi	r0, r6, #6, #10
   2c0f6:	4a05      	ldr	r2, [pc, #20]	; (2c10c <start+0x460>)
   2c0f8:	4905      	ldr	r1, [pc, #20]	; (2c110 <start+0x464>)
   2c0fa:	f01a fad2 	bl	466a2 <log_string_sync>
	return retval;
   2c0fe:	e76b      	b.n	2bfd8 <start+0x32c>
   2c100:	0004fef1 	.word	0x0004fef1
   2c104:	0004ff12 	.word	0x0004ff12
   2c108:	0004ff2a 	.word	0x0004ff2a
   2c10c:	0004fa1a 	.word	0x0004fa1a
   2c110:	0004ff3e 	.word	0x0004ff3e

0002c114 <channel_get>:
	return 0;
}

static int channel_get(struct device *dev, enum gps_channel chan,
		       struct gps_data *sample)
{
   2c114:	b570      	push	{r4, r5, r6, lr}
   2c116:	4615      	mov	r5, r2
	switch (chan) {
   2c118:	b121      	cbz	r1, 2c124 <channel_get+0x10>
   2c11a:	2901      	cmp	r1, #1
   2c11c:	d011      	beq.n	2c142 <channel_get+0x2e>
		break;
	case GPS_CHAN_PVT:
		memcpy(sample, &fresh_pvt, sizeof(struct gps_data));
		break;
	default:
		return -ENOTSUP;
   2c11e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c122:	e00d      	b.n	2c140 <channel_get+0x2c>
		memcpy(sample->nmea.buf, fresh_nmea.nmea.buf,
   2c124:	4e0a      	ldr	r6, [pc, #40]	; (2c150 <channel_get+0x3c>)
   2c126:	f105 0008 	add.w	r0, r5, #8
   2c12a:	f896 205b 	ldrb.w	r2, [r6, #91]	; 0x5b
   2c12e:	f106 0108 	add.w	r1, r6, #8
   2c132:	f7ed febd 	bl	19eb0 <memcpy>
		sample->nmea.len = fresh_nmea.nmea.len;
   2c136:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
   2c13a:	f885 305b 	strb.w	r3, [r5, #91]	; 0x5b
   2c13e:	2000      	movs	r0, #0
	}

	return 0;
}
   2c140:	bd70      	pop	{r4, r5, r6, pc}
   2c142:	22c0      	movs	r2, #192	; 0xc0
   2c144:	4903      	ldr	r1, [pc, #12]	; (2c154 <channel_get+0x40>)
   2c146:	4628      	mov	r0, r5
   2c148:	f7ed feb2 	bl	19eb0 <memcpy>
   2c14c:	e7f7      	b.n	2c13e <channel_get+0x2a>
   2c14e:	bf00      	nop
   2c150:	20022d88 	.word	0x20022d88
   2c154:	20022e48 	.word	0x20022e48

0002c158 <trigger_set>:
}

static int trigger_set(struct device *dev,
			       const struct gps_trigger *trig,
			       gps_trigger_handler_t handler)
{
   2c158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int ret = 0;
	struct gps_drv_data *drv_data = dev->driver_data;
	(void)drv_data;

	switch (trig->type) {
   2c15a:	780b      	ldrb	r3, [r1, #0]
{
   2c15c:	460e      	mov	r6, r1
	switch (trig->type) {
   2c15e:	3b01      	subs	r3, #1
   2c160:	2b01      	cmp	r3, #1
{
   2c162:	4617      	mov	r7, r2
	struct gps_drv_data *drv_data = dev->driver_data;
   2c164:	6884      	ldr	r4, [r0, #8]
	switch (trig->type) {
   2c166:	d80e      	bhi.n	2c186 <trigger_set+0x2e>
	case GPS_TRIG_DATA_READY:
	case GPS_TRIG_FIX:
		k_mutex_lock(&drv_data->trigger_mutex, K_FOREVER);
   2c168:	f104 0508 	add.w	r5, r4, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   2c16c:	f04f 31ff 	mov.w	r1, #4294967295
   2c170:	4628      	mov	r0, r5
   2c172:	f010 f94b 	bl	3c40c <z_impl_k_mutex_lock>
		drv_data->trigger_handler = handler;
		drv_data->trigger = *trig;
   2c176:	8833      	ldrh	r3, [r6, #0]
		drv_data->trigger_handler = handler;
   2c178:	6027      	str	r7, [r4, #0]
		drv_data->trigger = *trig;
   2c17a:	80a3      	strh	r3, [r4, #4]
	z_impl_k_mutex_unlock(mutex);
   2c17c:	4628      	mov	r0, r5
   2c17e:	f010 fa1f 	bl	3c5c0 <z_impl_k_mutex_unlock>
	int ret = 0;
   2c182:	2000      	movs	r0, #0
		ret = -ENOTSUP;
		break;
	}

	return ret;
}
   2c184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("Unsupported GPS trigger");
   2c186:	2301      	movs	r3, #1
   2c188:	f04f 0000 	mov.w	r0, #0
   2c18c:	4a07      	ldr	r2, [pc, #28]	; (2c1ac <trigger_set+0x54>)
   2c18e:	f363 0002 	bfi	r0, r3, #0, #3
   2c192:	4b07      	ldr	r3, [pc, #28]	; (2c1b0 <trigger_set+0x58>)
   2c194:	f36f 00c5 	bfc	r0, #3, #3
   2c198:	1a9b      	subs	r3, r3, r2
   2c19a:	08db      	lsrs	r3, r3, #3
   2c19c:	f363 108f 	bfi	r0, r3, #6, #10
   2c1a0:	4904      	ldr	r1, [pc, #16]	; (2c1b4 <trigger_set+0x5c>)
   2c1a2:	f01a fa7e 	bl	466a2 <log_string_sync>
   2c1a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return ret;
   2c1aa:	e7eb      	b.n	2c184 <trigger_set+0x2c>
   2c1ac:	00049018 	.word	0x00049018
   2c1b0:	000490c8 	.word	0x000490c8
   2c1b4:	0004ff82 	.word	0x0004ff82

0002c1b8 <gps_thread>:
{
   2c1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool operation_blocked = false;
   2c1bc:	2500      	movs	r5, #0
	struct gps_drv_data *drv_data = dev->driver_data;
   2c1be:	6883      	ldr	r3, [r0, #8]
{
   2c1c0:	b0c3      	sub	sp, #268	; 0x10c
	struct gps_drv_data *drv_data = dev->driver_data;
   2c1c2:	9303      	str	r3, [sp, #12]
				LOG_DBG("NMEA data ready");
   2c1c4:	4a62      	ldr	r2, [pc, #392]	; (2c350 <gps_thread+0x198>)
   2c1c6:	4b63      	ldr	r3, [pc, #396]	; (2c354 <gps_thread+0x19c>)
{
   2c1c8:	900b      	str	r0, [sp, #44]	; 0x2c
				LOG_DBG("NMEA data ready");
   2c1ca:	1a9b      	subs	r3, r3, r2
   2c1cc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   2c1d0:	9304      	str	r3, [sp, #16]
	return z_impl_k_sem_take(sem, timeout);
   2c1d2:	9b03      	ldr	r3, [sp, #12]
   2c1d4:	f04f 31ff 	mov.w	r1, #4294967295
   2c1d8:	f603 00d8 	addw	r0, r3, #2264	; 0x8d8
   2c1dc:	f011 fd06 	bl	3dbec <z_impl_k_sem_take>
		len = recv(drv_data->socket, &raw_gps_data,
   2c1e0:	9b03      	ldr	r3, [sp, #12]
   2c1e2:	6a1b      	ldr	r3, [r3, #32]
   2c1e4:	9309      	str	r3, [sp, #36]	; 0x24
	__ASSERT_NO_MSG(socket_ops);
   2c1e6:	4b5c      	ldr	r3, [pc, #368]	; (2c358 <gps_thread+0x1a0>)
   2c1e8:	681b      	ldr	r3, [r3, #0]
   2c1ea:	b94b      	cbnz	r3, 2c200 <gps_thread+0x48>
   2c1ec:	495b      	ldr	r1, [pc, #364]	; (2c35c <gps_thread+0x1a4>)
   2c1ee:	485c      	ldr	r0, [pc, #368]	; (2c360 <gps_thread+0x1a8>)
   2c1f0:	2369      	movs	r3, #105	; 0x69
   2c1f2:	4a5c      	ldr	r2, [pc, #368]	; (2c364 <gps_thread+0x1ac>)
   2c1f4:	f01a fa32 	bl	4665c <printk>
   2c1f8:	2169      	movs	r1, #105	; 0x69
   2c1fa:	485a      	ldr	r0, [pc, #360]	; (2c364 <gps_thread+0x1ac>)
   2c1fc:	f01a fa3b 	bl	46676 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   2c200:	4b55      	ldr	r3, [pc, #340]	; (2c358 <gps_thread+0x1a0>)
   2c202:	681b      	ldr	r3, [r3, #0]
   2c204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2c206:	b94b      	cbnz	r3, 2c21c <gps_thread+0x64>
   2c208:	4957      	ldr	r1, [pc, #348]	; (2c368 <gps_thread+0x1b0>)
   2c20a:	4855      	ldr	r0, [pc, #340]	; (2c360 <gps_thread+0x1a8>)
   2c20c:	236a      	movs	r3, #106	; 0x6a
   2c20e:	4a55      	ldr	r2, [pc, #340]	; (2c364 <gps_thread+0x1ac>)
   2c210:	f01a fa24 	bl	4665c <printk>
   2c214:	216a      	movs	r1, #106	; 0x6a
   2c216:	4853      	ldr	r0, [pc, #332]	; (2c364 <gps_thread+0x1ac>)
   2c218:	f01a fa2d 	bl	46676 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   2c21c:	4b4e      	ldr	r3, [pc, #312]	; (2c358 <gps_thread+0x1a0>)
   2c21e:	22d8      	movs	r2, #216	; 0xd8
   2c220:	681b      	ldr	r3, [r3, #0]
   2c222:	a90c      	add	r1, sp, #48	; 0x30
   2c224:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   2c226:	9809      	ldr	r0, [sp, #36]	; 0x24
   2c228:	2300      	movs	r3, #0
   2c22a:	47a0      	blx	r4
		if (len <= 0) {
   2c22c:	1e02      	subs	r2, r0, #0
   2c22e:	dc12      	bgt.n	2c256 <gps_thread+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c230:	9b03      	ldr	r3, [sp, #12]
   2c232:	331c      	adds	r3, #28
   2c234:	e8d3 3faf 	lda	r3, [r3]
			if (!atomic_get(&drv_data->gps_is_active)) {
   2c238:	2b00      	cmp	r3, #0
   2c23a:	d0ca      	beq.n	2c1d2 <gps_thread+0x1a>
			LOG_ERR("recv() returned error: %d", len);
   2c23c:	2301      	movs	r3, #1
   2c23e:	f363 0b02 	bfi	fp, r3, #0, #3
   2c242:	9b04      	ldr	r3, [sp, #16]
   2c244:	f36f 0bc5 	bfc	fp, #3, #3
   2c248:	f363 1b8f 	bfi	fp, r3, #6, #10
   2c24c:	4947      	ldr	r1, [pc, #284]	; (2c36c <gps_thread+0x1b4>)
   2c24e:	4658      	mov	r0, fp
   2c250:	f01a fa27 	bl	466a2 <log_string_sync>
			continue;
   2c254:	e7c4      	b.n	2c1e0 <gps_thread+0x28>
		switch (raw_gps_data.data_id) {
   2c256:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
   2c25a:	2c01      	cmp	r4, #1
   2c25c:	d040      	beq.n	2c2e0 <gps_thread+0x128>
   2c25e:	2c02      	cmp	r4, #2
   2c260:	d1be      	bne.n	2c1e0 <gps_thread+0x28>
			if (operation_blocked) {
   2c262:	2d00      	cmp	r5, #0
   2c264:	d1bc      	bne.n	2c1e0 <gps_thread+0x28>
			memcpy(fresh_nmea.nmea.buf, raw_gps_data.nmea, len);
   2c266:	4c42      	ldr	r4, [pc, #264]	; (2c370 <gps_thread+0x1b8>)
   2c268:	23b8      	movs	r3, #184	; 0xb8
   2c26a:	a90e      	add	r1, sp, #56	; 0x38
   2c26c:	f104 0008 	add.w	r0, r4, #8
   2c270:	f013 fd58 	bl	3fd24 <__memcpy_chk>
			fresh_nmea.nmea.len = strlen(raw_gps_data.nmea);
   2c274:	a80e      	add	r0, sp, #56	; 0x38
   2c276:	f014 f985 	bl	40584 <strlen>
			if ((drv_data->trigger.chan == GPS_CHAN_NMEA) &&
   2c27a:	9b03      	ldr	r3, [sp, #12]
			fresh_nmea.nmea.len = strlen(raw_gps_data.nmea);
   2c27c:	f884 005b 	strb.w	r0, [r4, #91]	; 0x5b
			if ((drv_data->trigger.chan == GPS_CHAN_NMEA) &&
   2c280:	889c      	ldrh	r4, [r3, #4]
   2c282:	2c01      	cmp	r4, #1
   2c284:	d10d      	bne.n	2c2a2 <gps_thread+0xea>
				LOG_DBG("NMEA data ready");
   2c286:	2304      	movs	r3, #4
   2c288:	f363 0802 	bfi	r8, r3, #0, #3
   2c28c:	9b04      	ldr	r3, [sp, #16]
   2c28e:	f365 08c5 	bfi	r8, r5, #3, #3
   2c292:	f363 188f 	bfi	r8, r3, #6, #10
   2c296:	4a37      	ldr	r2, [pc, #220]	; (2c374 <gps_thread+0x1bc>)
   2c298:	4937      	ldr	r1, [pc, #220]	; (2c378 <gps_thread+0x1c0>)
   2c29a:	4640      	mov	r0, r8
   2c29c:	f01a fa01 	bl	466a2 <log_string_sync>
				trigger_send = true;
   2c2a0:	4625      	mov	r5, r4
			if ((drv_data->trigger.type == GPS_TRIG_FIX)
   2c2a2:	9b03      	ldr	r3, [sp, #12]
   2c2a4:	791b      	ldrb	r3, [r3, #4]
   2c2a6:	2b02      	cmp	r3, #2
   2c2a8:	f040 816d 	bne.w	2c586 <gps_thread+0x3ce>
			    && is_fix(&fresh_pvt.pvt)) {
   2c2ac:	4b33      	ldr	r3, [pc, #204]	; (2c37c <gps_thread+0x1c4>)
   2c2ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   2c2b2:	07db      	lsls	r3, r3, #31
   2c2b4:	f140 8167 	bpl.w	2c586 <gps_thread+0x3ce>
				if (drv_data->trigger.chan == GPS_CHAN_NMEA) {
   2c2b8:	9b03      	ldr	r3, [sp, #12]
				LOG_DBG("NMEA: Position fix");
   2c2ba:	4a2e      	ldr	r2, [pc, #184]	; (2c374 <gps_thread+0x1bc>)
				if (drv_data->trigger.chan == GPS_CHAN_NMEA) {
   2c2bc:	795b      	ldrb	r3, [r3, #5]
				LOG_DBG("NMEA: Position fix");
   2c2be:	4930      	ldr	r1, [pc, #192]	; (2c380 <gps_thread+0x1c8>)
					trigger_send = true;
   2c2c0:	2b00      	cmp	r3, #0
				LOG_DBG("NMEA: Position fix");
   2c2c2:	f04f 0304 	mov.w	r3, #4
   2c2c6:	f363 0902 	bfi	r9, r3, #0, #3
   2c2ca:	9b04      	ldr	r3, [sp, #16]
   2c2cc:	f36f 09c5 	bfc	r9, #3, #3
   2c2d0:	f363 198f 	bfi	r9, r3, #6, #10
   2c2d4:	4648      	mov	r0, r9
					trigger_send = true;
   2c2d6:	bf08      	it	eq
   2c2d8:	2501      	moveq	r5, #1
				LOG_DBG("NMEA: Position fix");
   2c2da:	f01a f9e2 	bl	466a2 <log_string_sync>
   2c2de:	e152      	b.n	2c586 <gps_thread+0x3ce>
			if (gps_is_blocked(&raw_gps_data.pvt)) {
   2c2e0:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
   2c2e4:	f013 0210 	ands.w	r2, r3, #16
   2c2e8:	9209      	str	r2, [sp, #36]	; 0x24
   2c2ea:	d017      	beq.n	2c31c <gps_thread+0x164>
				if (operation_blocked) {
   2c2ec:	2d00      	cmp	r5, #0
   2c2ee:	f47f af77 	bne.w	2c1e0 <gps_thread+0x28>
				LOG_DBG("Waiting for time window to operate");
   2c2f2:	2304      	movs	r3, #4
   2c2f4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2c2f8:	4922      	ldr	r1, [pc, #136]	; (2c384 <gps_thread+0x1cc>)
   2c2fa:	f363 0202 	bfi	r2, r3, #0, #3
   2c2fe:	b293      	uxth	r3, r2
   2c300:	f365 03c5 	bfi	r3, r5, #3, #3
   2c304:	9a04      	ldr	r2, [sp, #16]
   2c306:	b29b      	uxth	r3, r3
   2c308:	f362 138f 	bfi	r3, r2, #6, #10
   2c30c:	b298      	uxth	r0, r3
   2c30e:	4a19      	ldr	r2, [pc, #100]	; (2c374 <gps_thread+0x1bc>)
   2c310:	f8ad 3014 	strh.w	r3, [sp, #20]
				operation_blocked = true;
   2c314:	4625      	mov	r5, r4
				LOG_DBG("Waiting for time window to operate");
   2c316:	f01a f9c4 	bl	466a2 <log_string_sync>
				continue;
   2c31a:	e761      	b.n	2c1e0 <gps_thread+0x28>
			if (pvt_deadline_missed(&raw_gps_data.pvt)) {
   2c31c:	f013 0408 	ands.w	r4, r3, #8
   2c320:	d034      	beq.n	2c38c <gps_thread+0x1d4>
				LOG_DBG("Invalid PVT frame, discarding");
   2c322:	2304      	movs	r3, #4
   2c324:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2c328:	4917      	ldr	r1, [pc, #92]	; (2c388 <gps_thread+0x1d0>)
   2c32a:	f363 0202 	bfi	r2, r3, #0, #3
   2c32e:	b293      	uxth	r3, r2
   2c330:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2c332:	f362 03c5 	bfi	r3, r2, #3, #3
   2c336:	9a04      	ldr	r2, [sp, #16]
   2c338:	b29b      	uxth	r3, r3
   2c33a:	f362 138f 	bfi	r3, r2, #6, #10
   2c33e:	b298      	uxth	r0, r3
   2c340:	4a0c      	ldr	r2, [pc, #48]	; (2c374 <gps_thread+0x1bc>)
   2c342:	f8ad 3018 	strh.w	r3, [sp, #24]
   2c346:	f01a f9ac 	bl	466a2 <log_string_sync>
	z_impl_k_mutex_unlock(mutex);
   2c34a:	2500      	movs	r5, #0
   2c34c:	e748      	b.n	2c1e0 <gps_thread+0x28>
   2c34e:	bf00      	nop
   2c350:	00049018 	.word	0x00049018
   2c354:	000490c8 	.word	0x000490c8
   2c358:	20023978 	.word	0x20023978
   2c35c:	0004b6f3 	.word	0x0004b6f3
   2c360:	0004b5bf 	.word	0x0004b5bf
   2c364:	0004b6c2 	.word	0x0004b6c2
   2c368:	0004d060 	.word	0x0004d060
   2c36c:	0004fa54 	.word	0x0004fa54
   2c370:	20022d88 	.word	0x20022d88
   2c374:	0004fa04 	.word	0x0004fa04
   2c378:	0004fb45 	.word	0x0004fb45
   2c37c:	20022e48 	.word	0x20022e48
   2c380:	0004fb59 	.word	0x0004fb59
   2c384:	0004fa6e 	.word	0x0004fa6e
   2c388:	0004fa95 	.word	0x0004fa95
	u8_t  n_tracked = 0;
   2c38c:	4625      	mov	r5, r4
	u8_t  n_used = 0;
   2c38e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   2c392:	ab0c      	add	r3, sp, #48	; 0x30
   2c394:	191a      	adds	r2, r3, r4
		u8_t sv = pvt_data->pvt.sv[i].sv;
   2c396:	f892 c046 	ldrb.w	ip, [r2, #70]	; 0x46
		if (sv) { /* SV number 0 indicates no satellite */
   2c39a:	f1bc 0f00 	cmp.w	ip, #0
   2c39e:	d02c      	beq.n	2c3fa <gps_thread+0x242>
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   2c3a0:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
			n_tracked++;
   2c3a4:	3501      	adds	r5, #1
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   2c3a6:	f3c2 0140 	ubfx	r1, r2, #1, #1
			n_tracked++;
   2c3aa:	b2ed      	uxtb	r5, r5
			if (used) {
   2c3ac:	b119      	cbz	r1, 2c3b6 <gps_thread+0x1fe>
				n_used++;
   2c3ae:	9809      	ldr	r0, [sp, #36]	; 0x24
   2c3b0:	3001      	adds	r0, #1
   2c3b2:	b2c3      	uxtb	r3, r0
   2c3b4:	9309      	str	r3, [sp, #36]	; 0x24
				  NRF_GNSS_SV_FLAG_UNHEALTHY) ? true : false;
   2c3b6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
			if (unhealthy) {
   2c3ba:	b11a      	cbz	r2, 2c3c4 <gps_thread+0x20c>
				n_unhealthy++;
   2c3bc:	980a      	ldr	r0, [sp, #40]	; 0x28
   2c3be:	3001      	adds	r0, #1
   2c3c0:	b2c3      	uxtb	r3, r0
   2c3c2:	930a      	str	r3, [sp, #40]	; 0x28
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   2c3c4:	2004      	movs	r0, #4
   2c3c6:	9b04      	ldr	r3, [sp, #16]
   2c3c8:	f360 0702 	bfi	r7, r0, #0, #3
   2c3cc:	f36f 07c5 	bfc	r7, #3, #3
   2c3d0:	f363 178f 	bfi	r7, r3, #6, #10
   2c3d4:	4878      	ldr	r0, [pc, #480]	; (2c5b8 <gps_thread+0x400>)
   2c3d6:	4b79      	ldr	r3, [pc, #484]	; (2c5bc <gps_thread+0x404>)
   2c3d8:	2900      	cmp	r1, #0
   2c3da:	bf18      	it	ne
   2c3dc:	4618      	movne	r0, r3
   2c3de:	4b78      	ldr	r3, [pc, #480]	; (2c5c0 <gps_thread+0x408>)
   2c3e0:	4601      	mov	r1, r0
   2c3e2:	4878      	ldr	r0, [pc, #480]	; (2c5c4 <gps_thread+0x40c>)
   2c3e4:	2a00      	cmp	r2, #0
   2c3e6:	bf18      	it	ne
   2c3e8:	4603      	movne	r3, r0
   2c3ea:	4a77      	ldr	r2, [pc, #476]	; (2c5c8 <gps_thread+0x410>)
   2c3ec:	e9cd 1300 	strd	r1, r3, [sp]
   2c3f0:	4638      	mov	r0, r7
   2c3f2:	4663      	mov	r3, ip
   2c3f4:	4975      	ldr	r1, [pc, #468]	; (2c5cc <gps_thread+0x414>)
   2c3f6:	f01a f954 	bl	466a2 <log_string_sync>
   2c3fa:	340c      	adds	r4, #12
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   2c3fc:	2c90      	cmp	r4, #144	; 0x90
   2c3fe:	d1c8      	bne.n	2c392 <gps_thread+0x1da>
	LOG_DBG("Tracking: %d Using: %d Unhealthy: %d", n_tracked,
   2c400:	2404      	movs	r4, #4
   2c402:	9b04      	ldr	r3, [sp, #16]
   2c404:	f364 0a02 	bfi	sl, r4, #0, #3
   2c408:	f36f 0ac5 	bfc	sl, #3, #3
   2c40c:	f363 1a8f 	bfi	sl, r3, #6, #10
   2c410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c412:	4a6d      	ldr	r2, [pc, #436]	; (2c5c8 <gps_thread+0x410>)
   2c414:	9301      	str	r3, [sp, #4]
   2c416:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2c418:	496d      	ldr	r1, [pc, #436]	; (2c5d0 <gps_thread+0x418>)
   2c41a:	9300      	str	r3, [sp, #0]
   2c41c:	4650      	mov	r0, sl
   2c41e:	462b      	mov	r3, r5
   2c420:	f01a f93f 	bl	466a2 <log_string_sync>
	LOG_DBG("Seconds since last fix %lld",
   2c424:	f364 0602 	bfi	r6, r4, #0, #3
   2c428:	9b04      	ldr	r3, [sp, #16]
   2c42a:	f36f 06c5 	bfc	r6, #3, #3
   2c42e:	f363 168f 	bfi	r6, r3, #6, #10
	return z_impl_k_uptime_get();
   2c432:	f01c fbdb 	bl	48bec <z_impl_k_uptime_get>
   2c436:	4b67      	ldr	r3, [pc, #412]	; (2c5d4 <gps_thread+0x41c>)
   2c438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2c43c:	e9d3 4500 	ldrd	r4, r5, [r3]
   2c440:	1b00      	subs	r0, r0, r4
   2c442:	f04f 0300 	mov.w	r3, #0
   2c446:	eb61 0105 	sbc.w	r1, r1, r5
   2c44a:	f7ec fcb7 	bl	18dbc <__aeabi_uldivmod>
   2c44e:	4a5e      	ldr	r2, [pc, #376]	; (2c5c8 <gps_thread+0x410>)
   2c450:	e9cd 0100 	strd	r0, r1, [sp]
   2c454:	4960      	ldr	r1, [pc, #384]	; (2c5d8 <gps_thread+0x420>)
   2c456:	4630      	mov	r0, r6
   2c458:	f01a f923 	bl	466a2 <log_string_sync>
	dest->latitude = src->latitude;
   2c45c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   2c460:	4b5e      	ldr	r3, [pc, #376]	; (2c5dc <gps_thread+0x424>)
	dest->altitude = src->altitude;
   2c462:	9a12      	ldr	r2, [sp, #72]	; 0x48
	dest->latitude = src->latitude;
   2c464:	e9c3 0102 	strd	r0, r1, [r3, #8]
	dest->longitude = src->longitude;
   2c468:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
	dest->altitude = src->altitude;
   2c46c:	619a      	str	r2, [r3, #24]
	dest->accuracy = src->accuracy;
   2c46e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	dest->longitude = src->longitude;
   2c470:	e9c3 0104 	strd	r0, r1, [r3, #16]
	dest->accuracy = src->accuracy;
   2c474:	61da      	str	r2, [r3, #28]
	dest->speed = src->speed;
   2c476:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2c478:	f103 0178 	add.w	r1, r3, #120	; 0x78
   2c47c:	621a      	str	r2, [r3, #32]
	dest->heading = src->heading;
   2c47e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2c480:	625a      	str	r2, [r3, #36]	; 0x24
	dest->flags = src->flags;
   2c482:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
   2c486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dest->datetime.year = src->datetime.year;
   2c48a:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   2c48e:	875a      	strh	r2, [r3, #58]	; 0x3a
	dest->datetime.month = src->datetime.month;
   2c490:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   2c494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	dest->datetime.day = src->datetime.day;
   2c498:	f89d 205b 	ldrb.w	r2, [sp, #91]	; 0x5b
   2c49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	dest->datetime.hour = src->datetime.hour;
   2c4a0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   2c4a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	dest->datetime.minute = src->datetime.minute;
   2c4a8:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   2c4ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	dest->datetime.seconds = src->datetime.seconds;
   2c4b0:	f89d 205e 	ldrb.w	r2, [sp, #94]	; 0x5e
   2c4b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dest->datetime.ms = src->datetime.ms;
   2c4b8:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
   2c4bc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	dest->pdop = src->pdop;
   2c4c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c4c2:	629a      	str	r2, [r3, #40]	; 0x28
	dest->hdop = src->hdop;
   2c4c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2c4c6:	62da      	str	r2, [r3, #44]	; 0x2c
	dest->vdop = src->vdop;
   2c4c8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2c4ca:	631a      	str	r2, [r3, #48]	; 0x30
	dest->tdop = src->tdop;
   2c4cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   2c4ce:	635a      	str	r2, [r3, #52]	; 0x34
   2c4d0:	aa0c      	add	r2, sp, #48	; 0x30
		dest->sv[i].sv = src->sv[i].sv;
   2c4d2:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
   2c4d6:	330a      	adds	r3, #10
   2c4d8:	8758      	strh	r0, [r3, #58]	; 0x3a
		dest->sv[i].cn0 = src->sv[i].cn0;
   2c4da:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
   2c4de:	320c      	adds	r2, #12
   2c4e0:	8798      	strh	r0, [r3, #60]	; 0x3c
		dest->sv[i].elevation = src->sv[i].elevation;
   2c4e2:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   2c4e6:	87d8      	strh	r0, [r3, #62]	; 0x3e
		dest->sv[i].azimuth = src->sv[i].azimuth;
   2c4e8:	f8b2 0042 	ldrh.w	r0, [r2, #66]	; 0x42
   2c4ec:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
		dest->sv[i].flags = src->sv[i].flags;
   2c4f0:	f892 0044 	ldrb.w	r0, [r2, #68]	; 0x44
   2c4f4:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
		dest->sv[i].signal = src->sv[i].signal;
   2c4f8:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
   2c4fc:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
	for (size_t i = 0;
   2c500:	428b      	cmp	r3, r1
   2c502:	d1e6      	bne.n	2c4d2 <gps_thread+0x31a>
			if ((drv_data->trigger.chan == GPS_CHAN_PVT)
   2c504:	9b03      	ldr	r3, [sp, #12]
   2c506:	889a      	ldrh	r2, [r3, #4]
   2c508:	f240 1301 	movw	r3, #257	; 0x101
   2c50c:	429a      	cmp	r2, r3
   2c50e:	d150      	bne.n	2c5b2 <gps_thread+0x3fa>
				LOG_DBG("PVT data ready");
   2c510:	2304      	movs	r3, #4
   2c512:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2c516:	4932      	ldr	r1, [pc, #200]	; (2c5e0 <gps_thread+0x428>)
   2c518:	f363 0202 	bfi	r2, r3, #0, #3
   2c51c:	b293      	uxth	r3, r2
   2c51e:	f36f 03c5 	bfc	r3, #3, #3
   2c522:	9a04      	ldr	r2, [sp, #16]
   2c524:	b29b      	uxth	r3, r3
   2c526:	f362 138f 	bfi	r3, r2, #6, #10
   2c52a:	b298      	uxth	r0, r3
   2c52c:	4a2d      	ldr	r2, [pc, #180]	; (2c5e4 <gps_thread+0x42c>)
   2c52e:	f8ad 301c 	strh.w	r3, [sp, #28]
				trigger_send = true;
   2c532:	2501      	movs	r5, #1
				LOG_DBG("PVT data ready");
   2c534:	f01a f8b5 	bl	466a2 <log_string_sync>
			if ((drv_data->trigger.type == GPS_TRIG_FIX) &&
   2c538:	9b03      	ldr	r3, [sp, #12]
   2c53a:	791b      	ldrb	r3, [r3, #4]
   2c53c:	2b02      	cmp	r3, #2
   2c53e:	d122      	bne.n	2c586 <gps_thread+0x3ce>
			    is_fix(&fresh_pvt.pvt)) {
   2c540:	4b26      	ldr	r3, [pc, #152]	; (2c5dc <gps_thread+0x424>)
			if ((drv_data->trigger.type == GPS_TRIG_FIX) &&
   2c542:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   2c546:	07da      	lsls	r2, r3, #31
   2c548:	d51d      	bpl.n	2c586 <gps_thread+0x3ce>
				if (drv_data->trigger.chan == GPS_CHAN_PVT) {
   2c54a:	9b03      	ldr	r3, [sp, #12]
				LOG_DBG("PVT: Position fix");
   2c54c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
				if (drv_data->trigger.chan == GPS_CHAN_PVT) {
   2c550:	795b      	ldrb	r3, [r3, #5]
				LOG_DBG("PVT: Position fix");
   2c552:	4925      	ldr	r1, [pc, #148]	; (2c5e8 <gps_thread+0x430>)
					trigger_send = true;
   2c554:	2b01      	cmp	r3, #1
				LOG_DBG("PVT: Position fix");
   2c556:	f04f 0304 	mov.w	r3, #4
   2c55a:	f363 0202 	bfi	r2, r3, #0, #3
   2c55e:	b293      	uxth	r3, r2
   2c560:	f36f 03c5 	bfc	r3, #3, #3
   2c564:	9a04      	ldr	r2, [sp, #16]
   2c566:	b29b      	uxth	r3, r3
   2c568:	f362 138f 	bfi	r3, r2, #6, #10
   2c56c:	b298      	uxth	r0, r3
   2c56e:	4a1d      	ldr	r2, [pc, #116]	; (2c5e4 <gps_thread+0x42c>)
					trigger_send = true;
   2c570:	bf08      	it	eq
   2c572:	2501      	moveq	r5, #1
				LOG_DBG("PVT: Position fix");
   2c574:	f8ad 3020 	strh.w	r3, [sp, #32]
   2c578:	f01a f893 	bl	466a2 <log_string_sync>
   2c57c:	f01c fb36 	bl	48bec <z_impl_k_uptime_get>
				fix_timestamp = k_uptime_get();
   2c580:	4b14      	ldr	r3, [pc, #80]	; (2c5d4 <gps_thread+0x41c>)
   2c582:	e9c3 0100 	strd	r0, r1, [r3]
		if (!trigger_send) {
   2c586:	2d00      	cmp	r5, #0
   2c588:	f43f ae2a 	beq.w	2c1e0 <gps_thread+0x28>
		k_mutex_lock(&drv_data->trigger_mutex, K_FOREVER);
   2c58c:	9b03      	ldr	r3, [sp, #12]
   2c58e:	f103 0408 	add.w	r4, r3, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   2c592:	f04f 31ff 	mov.w	r1, #4294967295
   2c596:	4620      	mov	r0, r4
   2c598:	f00f ff38 	bl	3c40c <z_impl_k_mutex_lock>
		if (drv_data->trigger_handler != NULL) {
   2c59c:	9b03      	ldr	r3, [sp, #12]
   2c59e:	681b      	ldr	r3, [r3, #0]
   2c5a0:	b11b      	cbz	r3, 2c5aa <gps_thread+0x3f2>
			drv_data->trigger_handler(dev, &drv_data->trigger);
   2c5a2:	9a03      	ldr	r2, [sp, #12]
   2c5a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2c5a6:	1d11      	adds	r1, r2, #4
   2c5a8:	4798      	blx	r3
	z_impl_k_mutex_unlock(mutex);
   2c5aa:	4620      	mov	r0, r4
   2c5ac:	f010 f808 	bl	3c5c0 <z_impl_k_mutex_unlock>
   2c5b0:	e6cb      	b.n	2c34a <gps_thread+0x192>
   2c5b2:	2500      	movs	r5, #0
   2c5b4:	e7c0      	b.n	2c538 <gps_thread+0x380>
   2c5b6:	bf00      	nop
   2c5b8:	0004fa33 	.word	0x0004fa33
   2c5bc:	0004fa2a 	.word	0x0004fa2a
   2c5c0:	0004fa48 	.word	0x0004fa48
   2c5c4:	0004fa3c 	.word	0x0004fa3c
   2c5c8:	0004f9ee 	.word	0x0004f9ee
   2c5cc:	0004fab7 	.word	0x0004fab7
   2c5d0:	0004fad3 	.word	0x0004fad3
   2c5d4:	20022d80 	.word	0x20022d80
   2c5d8:	0004fafc 	.word	0x0004fafc
   2c5dc:	20022e48 	.word	0x20022e48
   2c5e0:	0004fb1c 	.word	0x0004fb1c
   2c5e4:	0004fa04 	.word	0x0004fa04
   2c5e8:	0004fb2f 	.word	0x0004fb2f

0002c5ec <stop>:
{
   2c5ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	LOG_DBG("Stopping GPS");
   2c5ee:	2304      	movs	r3, #4
	struct gps_drv_data *drv_data = dev->driver_data;
   2c5f0:	6886      	ldr	r6, [r0, #8]
	LOG_DBG("Stopping GPS");
   2c5f2:	f04f 0000 	mov.w	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2c5f6:	2500      	movs	r5, #0
   2c5f8:	f363 0002 	bfi	r0, r3, #0, #3
   2c5fc:	4c16      	ldr	r4, [pc, #88]	; (2c658 <stop+0x6c>)
   2c5fe:	4b17      	ldr	r3, [pc, #92]	; (2c65c <stop+0x70>)
   2c600:	f36f 00c5 	bfc	r0, #3, #3
   2c604:	1ae4      	subs	r4, r4, r3
   2c606:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2c60a:	f364 108f 	bfi	r0, r4, #6, #10
   2c60e:	4a14      	ldr	r2, [pc, #80]	; (2c660 <stop+0x74>)
   2c610:	4914      	ldr	r1, [pc, #80]	; (2c664 <stop+0x78>)
   2c612:	f01a f846 	bl	466a2 <log_string_sync>
   2c616:	f106 031c 	add.w	r3, r6, #28
   2c61a:	e8d3 2fef 	ldaex	r2, [r3]
   2c61e:	e8c3 5fe1 	stlex	r1, r5, [r3]
   2c622:	2900      	cmp	r1, #0
   2c624:	d1f9      	bne.n	2c61a <stop+0x2e>
	retval = nrf_setsockopt(drv_data->socket,
   2c626:	9500      	str	r5, [sp, #0]
   2c628:	462b      	mov	r3, r5
   2c62a:	2208      	movs	r2, #8
   2c62c:	f44f 7101 	mov.w	r1, #516	; 0x204
   2c630:	6a30      	ldr	r0, [r6, #32]
   2c632:	f001 fbe7 	bl	2de04 <nrf_setsockopt>
	if (retval != 0) {
   2c636:	b168      	cbz	r0, 2c654 <stop+0x68>
		LOG_ERR("Failed to stop GPS");
   2c638:	2301      	movs	r3, #1
   2c63a:	f04f 0000 	mov.w	r0, #0
   2c63e:	f363 0002 	bfi	r0, r3, #0, #3
   2c642:	f365 00c5 	bfi	r0, r5, #3, #3
   2c646:	f364 108f 	bfi	r0, r4, #6, #10
   2c64a:	4907      	ldr	r1, [pc, #28]	; (2c668 <stop+0x7c>)
   2c64c:	f01a f829 	bl	466a2 <log_string_sync>
		return -EIO;
   2c650:	f06f 0004 	mvn.w	r0, #4
}
   2c654:	b002      	add	sp, #8
   2c656:	bd70      	pop	{r4, r5, r6, pc}
   2c658:	000490c8 	.word	0x000490c8
   2c65c:	00049018 	.word	0x00049018
   2c660:	0004fa25 	.word	0x0004fa25
   2c664:	0004ff52 	.word	0x0004ff52
   2c668:	0004ff63 	.word	0x0004ff63

0002c66c <init>:
	drv_data->socket = -1;
   2c66c:	f04f 33ff 	mov.w	r3, #4294967295
{
   2c670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c674:	4606      	mov	r6, r0
   2c676:	2400      	movs	r4, #0
	struct gps_drv_data *drv_data = dev->driver_data;
   2c678:	6885      	ldr	r5, [r0, #8]
{
   2c67a:	b086      	sub	sp, #24
	drv_data->socket = -1;
   2c67c:	622b      	str	r3, [r5, #32]
   2c67e:	f105 031c 	add.w	r3, r5, #28
   2c682:	e8d3 2fef 	ldaex	r2, [r3]
   2c686:	e8c3 4fe1 	stlex	r1, r4, [r3]
   2c68a:	2900      	cmp	r1, #0
   2c68c:	d1f9      	bne.n	2c682 <init+0x16>
	z_impl_k_sem_init(sem, initial_count, limit);
   2c68e:	2201      	movs	r2, #1
   2c690:	4621      	mov	r1, r4
   2c692:	f605 00d8 	addw	r0, r5, #2264	; 0x8d8
   2c696:	f011 fa2b 	bl	3daf0 <z_impl_k_sem_init>
	z_impl_k_mutex_init(mutex);
   2c69a:	f105 0008 	add.w	r0, r5, #8
   2c69e:	f01c f9ac 	bl	489fa <z_impl_k_mutex_init>
	struct gps_drv_data *drv_data = dev->driver_data;
   2c6a2:	68b0      	ldr	r0, [r6, #8]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2c6a4:	230a      	movs	r3, #10
   2c6a6:	f100 0128 	add.w	r1, r0, #40	; 0x28
   2c6aa:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2c6ae:	e9cd 6400 	strd	r6, r4, [sp]
   2c6b2:	4b30      	ldr	r3, [pc, #192]	; (2c774 <init+0x108>)
   2c6b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2c6b8:	e9cd 4404 	strd	r4, r4, [sp, #16]
   2c6bc:	f600 0028 	addw	r0, r0, #2088	; 0x828
   2c6c0:	f011 fbda 	bl	3de78 <z_impl_k_thread_create>
		err = at_cmd_write(CONFIG_NRF9160_GPS_MAGPIO_STRING,
   2c6c4:	4623      	mov	r3, r4
   2c6c6:	4622      	mov	r2, r4
   2c6c8:	4621      	mov	r1, r4
   2c6ca:	482b      	ldr	r0, [pc, #172]	; (2c778 <init+0x10c>)
   2c6cc:	f7fe ffda 	bl	2b684 <at_cmd_write>
   2c6d0:	4e2a      	ldr	r6, [pc, #168]	; (2c77c <init+0x110>)
   2c6d2:	4b2b      	ldr	r3, [pc, #172]	; (2c780 <init+0x114>)
		if (err) {
   2c6d4:	4605      	mov	r5, r0
   2c6d6:	1af6      	subs	r6, r6, r3
   2c6d8:	f3c6 06c9 	ubfx	r6, r6, #3, #10
   2c6dc:	b180      	cbz	r0, 2c700 <init+0x94>
			LOG_ERR("Could not confiugure MAGPIO, error: %d", err);
   2c6de:	f04f 0000 	mov.w	r0, #0
   2c6e2:	2301      	movs	r3, #1
   2c6e4:	462a      	mov	r2, r5
   2c6e6:	f363 0002 	bfi	r0, r3, #0, #3
   2c6ea:	f364 00c5 	bfi	r0, r4, #3, #3
   2c6ee:	4925      	ldr	r1, [pc, #148]	; (2c784 <init+0x118>)
   2c6f0:	f366 108f 	bfi	r0, r6, #6, #10
			LOG_ERR("Could not confiugure COEX0, error: %d", err);
   2c6f4:	f019 ffd5 	bl	466a2 <log_string_sync>
}
   2c6f8:	4628      	mov	r0, r5
   2c6fa:	b006      	add	sp, #24
   2c6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_DBG("MAGPIO set: %s",
   2c700:	f04f 0804 	mov.w	r8, #4
   2c704:	f04f 0700 	mov.w	r7, #0
   2c708:	f368 0702 	bfi	r7, r8, #0, #3
   2c70c:	f360 07c5 	bfi	r7, r0, #3, #3
   2c710:	4819      	ldr	r0, [pc, #100]	; (2c778 <init+0x10c>)
   2c712:	f019 ffd8 	bl	466c6 <log_strdup>
   2c716:	f366 178f 	bfi	r7, r6, #6, #10
   2c71a:	4603      	mov	r3, r0
   2c71c:	4a1a      	ldr	r2, [pc, #104]	; (2c788 <init+0x11c>)
   2c71e:	491b      	ldr	r1, [pc, #108]	; (2c78c <init+0x120>)
   2c720:	4638      	mov	r0, r7
   2c722:	f019 ffbe 	bl	466a2 <log_string_sync>
		err = at_cmd_write(CONFIG_NRF9160_GPS_COEX0_STRING,
   2c726:	462b      	mov	r3, r5
   2c728:	462a      	mov	r2, r5
   2c72a:	4629      	mov	r1, r5
   2c72c:	4818      	ldr	r0, [pc, #96]	; (2c790 <init+0x124>)
   2c72e:	f7fe ffa9 	bl	2b684 <at_cmd_write>
		if (err) {
   2c732:	4605      	mov	r5, r0
   2c734:	b158      	cbz	r0, 2c74e <init+0xe2>
			LOG_ERR("Could not confiugure COEX0, error: %d", err);
   2c736:	f04f 0000 	mov.w	r0, #0
   2c73a:	2301      	movs	r3, #1
   2c73c:	f363 0002 	bfi	r0, r3, #0, #3
   2c740:	f364 00c5 	bfi	r0, r4, #3, #3
   2c744:	f366 108f 	bfi	r0, r6, #6, #10
   2c748:	462a      	mov	r2, r5
   2c74a:	4912      	ldr	r1, [pc, #72]	; (2c794 <init+0x128>)
   2c74c:	e7d2      	b.n	2c6f4 <init+0x88>
		LOG_DBG("COEX0 set: %s",
   2c74e:	f04f 0400 	mov.w	r4, #0
   2c752:	f368 0402 	bfi	r4, r8, #0, #3
   2c756:	f360 04c5 	bfi	r4, r0, #3, #3
   2c75a:	480d      	ldr	r0, [pc, #52]	; (2c790 <init+0x124>)
   2c75c:	f019 ffb3 	bl	466c6 <log_strdup>
   2c760:	f366 148f 	bfi	r4, r6, #6, #10
   2c764:	4603      	mov	r3, r0
   2c766:	4a08      	ldr	r2, [pc, #32]	; (2c788 <init+0x11c>)
   2c768:	490b      	ldr	r1, [pc, #44]	; (2c798 <init+0x12c>)
   2c76a:	4620      	mov	r0, r4
   2c76c:	f019 ff99 	bl	466a2 <log_string_sync>
   2c770:	e7c2      	b.n	2c6f8 <init+0x8c>
   2c772:	bf00      	nop
   2c774:	0002c1b9 	.word	0x0002c1b9
   2c778:	0004fb70 	.word	0x0004fb70
   2c77c:	000490c8 	.word	0x000490c8
   2c780:	00049018 	.word	0x00049018
   2c784:	0004fb8f 	.word	0x0004fb8f
   2c788:	0004fa20 	.word	0x0004fa20
   2c78c:	0004fbb6 	.word	0x0004fbb6
   2c790:	0004fbc9 	.word	0x0004fbc9
   2c794:	0004fbe1 	.word	0x0004fbe1
   2c798:	0004fc07 	.word	0x0004fc07

0002c79c <ip_client_event_handler>:
   2c79c:	1b08f850 	.word	0x1b08f850
   2c7a0:	f0060c09 	.word	0xf0060c09
   2c7a4:	bf00bc4d 	.word	0xbf00bc4d

0002c7a8 <rpc_ip_client_init>:
   2c7a8:	f00b4801 	.word	0xf00b4801
   2c7ac:	bf00bc01 	.word	0xbf00bc01
   2c7b0:	00049b5c 	.word	0x00049b5c

0002c7b4 <rpc_ip_client_request_alloc>:
   2c7b4:	b5102300 	.word	0xb5102300
   2c7b8:	9301b082 	.word	0x9301b082
   2c7bc:	4604b158 	.word	0x4604b158
   2c7c0:	2004aa01 	.word	0x2004aa01
   2c7c4:	fe2cf00b 	.word	0xfe2cf00b
   2c7c8:	9b01b918 	.word	0x9b01b918
   2c7cc:	3308b10b 	.word	0x3308b10b
   2c7d0:	b0026023 	.word	0xb0026023
   2c7d4:	2007bd10 	.word	0x2007bd10
   2c7d8:	bd10b002 	.word	0xbd10b002

0002c7dc <rpc_ip_client_request_send>:
   2c7dc:	4370f401 	.word	0x4370f401
   2c7e0:	4fe0f5b3 	.word	0x4fe0f5b3
   2c7e4:	b160d10b 	.word	0xb160d10b
   2c7e8:	f8304603 	.word	0xf8304603
   2c7ec:	20042c08 	.word	0x20042c08
   2c7f0:	4101ea42 	.word	0x4101ea42
   2c7f4:	1d08f843 	.word	0x1d08f843
   2c7f8:	f00b4619 	.word	0xf00b4619
   2c7fc:	200fbdf9 	.word	0x200fbdf9
   2c800:	20074770 	.word	0x20074770
   2c804:	bf004770 	.word	0xbf004770

0002c808 <rpc_ip_client_message_free>:
   2c808:	f1a0b120 	.word	0xf1a0b120
   2c80c:	20040108 	.word	0x20040108
   2c810:	be38f00b 	.word	0xbe38f00b
   2c814:	47702007 	.word	0x47702007

0002c818 <rpc_ip_client_data_free>:
   2c818:	4601b118 	.word	0x4601b118
   2c81c:	f00b2004 	.word	0xf00b2004
   2c820:	2007bf43 	.word	0x2007bf43
   2c824:	bf004770 	.word	0xbf004770

0002c828 <symbol_0001c77>:
   2c828:	4603b430 	.word	0x4603b430
   2c82c:	f5b26800 	.word	0xf5b26800
   2c830:	eba03f80 	.word	0xeba03f80
   2c834:	d2140101 	.word	0xd2140101
   2c838:	dd512902 	.word	0xdd512902
   2c83c:	60191e41 	.word	0x60191e41
   2c840:	2c01f800 	.word	0x2c01f800
   2c844:	24826819 	.word	0x24826819
   2c848:	60181e48 	.word	0x60181e48
   2c84c:	0a122003 	.word	0x0a122003
   2c850:	2c01f801 	.word	0x2c01f801
   2c854:	1e51681a 	.word	0x1e51681a
   2c858:	f8026019 	.word	0xf8026019
   2c85c:	bc304c01 	.word	0xbc304c01
   2c860:	f1b24770 	.word	0xf1b24770
   2c864:	d21a7f80 	.word	0xd21a7f80
   2c868:	dd392903 	.word	0xdd392903
   2c86c:	1e412483 	.word	0x1e412483
   2c870:	f8006019 	.word	0xf8006019
   2c874:	68192c01 	.word	0x68192c01
   2c878:	1e4d0a10 	.word	0x1e4d0a10
   2c87c:	f801601d 	.word	0xf801601d
   2c880:	68190c01 	.word	0x68190c01
   2c884:	1e480c12 	.word	0x1e480c12
   2c888:	f8016018 	.word	0xf8016018
   2c88c:	681a2c01 	.word	0x681a2c01
   2c890:	1e512004 	.word	0x1e512004
   2c894:	f8026019 	.word	0xf8026019
   2c898:	bc304c01 	.word	0xbc304c01
   2c89c:	29044770 	.word	0x29044770
   2c8a0:	2484dd1e 	.word	0x2484dd1e
   2c8a4:	60191e41 	.word	0x60191e41
   2c8a8:	2c01f800 	.word	0x2c01f800
   2c8ac:	0a106819 	.word	0x0a106819
   2c8b0:	601d1e4d 	.word	0x601d1e4d
   2c8b4:	0c01f801 	.word	0x0c01f801
   2c8b8:	0c106819 	.word	0x0c106819
   2c8bc:	601d1e4d 	.word	0x601d1e4d
   2c8c0:	0c01f801 	.word	0x0c01f801
   2c8c4:	0e126819 	.word	0x0e126819
   2c8c8:	60181e48 	.word	0x60181e48
   2c8cc:	2c01f801 	.word	0x2c01f801
   2c8d0:	2005681a 	.word	0x2005681a
   2c8d4:	60191e51 	.word	0x60191e51
   2c8d8:	4c01f802 	.word	0x4c01f802
   2c8dc:	4770bc30 	.word	0x4770bc30
   2c8e0:	006bf06f 	.word	0x006bf06f
   2c8e4:	bf00e7bb 	.word	0xbf00e7bb

0002c8e8 <symbol_000646e>:
   2c8e8:	6804b430 	.word	0x6804b430
   2c8ec:	46032a7f 	.word	0x46032a7f
   2c8f0:	0101eba4 	.word	0x0101eba4
   2c8f4:	2900d808 	.word	0x2900d808
   2c8f8:	1e61dd6c 	.word	0x1e61dd6c
   2c8fc:	20016001 	.word	0x20016001
   2c900:	2c01f804 	.word	0x2c01f804
   2c904:	4770bc30 	.word	0x4770bc30
   2c908:	d80e2aff 	.word	0xd80e2aff
   2c90c:	dd612901 	.word	0xdd612901
   2c910:	1e602181 	.word	0x1e602181
   2c914:	f8046018 	.word	0xf8046018
   2c918:	681a2c01 	.word	0x681a2c01
   2c91c:	1e542002 	.word	0x1e542002
   2c920:	f802601c 	.word	0xf802601c
   2c924:	bc301c01 	.word	0xbc301c01
   2c928:	f5b24770 	.word	0xf5b24770
   2c92c:	d31c3f80 	.word	0xd31c3f80
   2c930:	7f80f1b2 	.word	0x7f80f1b2
   2c934:	2903d22e 	.word	0x2903d22e
   2c938:	2583dd4c 	.word	0x2583dd4c
   2c93c:	60011e61 	.word	0x60011e61
   2c940:	2c01f804 	.word	0x2c01f804
   2c944:	0a106801 	.word	0x0a106801
   2c948:	601c1e4c 	.word	0x601c1e4c
   2c94c:	0c01f801 	.word	0x0c01f801
   2c950:	0c126819 	.word	0x0c126819
   2c954:	60181e48 	.word	0x60181e48
   2c958:	2c01f801 	.word	0x2c01f801
   2c95c:	2004681a 	.word	0x2004681a
   2c960:	60191e51 	.word	0x60191e51
   2c964:	5c01f802 	.word	0x5c01f802
   2c968:	2902e7cc 	.word	0x2902e7cc
   2c96c:	2582dd32 	.word	0x2582dd32
   2c970:	60011e61 	.word	0x60011e61
   2c974:	2c01f804 	.word	0x2c01f804
   2c978:	0a126801 	.word	0x0a126801
   2c97c:	60181e48 	.word	0x60181e48
   2c980:	2c01f801 	.word	0x2c01f801
   2c984:	2003681a 	.word	0x2003681a
   2c988:	60191e51 	.word	0x60191e51
   2c98c:	5c01f802 	.word	0x5c01f802
   2c990:	4770bc30 	.word	0x4770bc30
   2c994:	dd1d2904 	.word	0xdd1d2904
   2c998:	1e612584 	.word	0x1e612584
   2c99c:	f8046001 	.word	0xf8046001
   2c9a0:	68012c01 	.word	0x68012c01
   2c9a4:	1e4c0a10 	.word	0x1e4c0a10
   2c9a8:	f801601c 	.word	0xf801601c
   2c9ac:	68190c01 	.word	0x68190c01
   2c9b0:	1e4c0c10 	.word	0x1e4c0c10
   2c9b4:	f801601c 	.word	0xf801601c
   2c9b8:	68190c01 	.word	0x68190c01
   2c9bc:	1e480e12 	.word	0x1e480e12
   2c9c0:	f8016018 	.word	0xf8016018
   2c9c4:	681a2c01 	.word	0x681a2c01
   2c9c8:	1e512005 	.word	0x1e512005
   2c9cc:	f8026019 	.word	0xf8026019
   2c9d0:	e7975c01 	.word	0xe7975c01
   2c9d4:	006bf06f 	.word	0x006bf06f
   2c9d8:	bf00e794 	.word	0xbf00e794

0002c9dc <symbol_00036c0>:
   2c9dc:	1a596803 	.word	0x1a596803
   2c9e0:	dd052900 	.word	0xdd052900
   2c9e4:	60011e59 	.word	0x60011e59
   2c9e8:	f8032001 	.word	0xf8032001
   2c9ec:	47702c01 	.word	0x47702c01
   2c9f0:	006bf06f 	.word	0x006bf06f
   2c9f4:	bf004770 	.word	0xbf004770

0002c9f8 <symbol_0008475>:
   2c9f8:	6805b5f8 	.word	0x6805b5f8
   2c9fc:	d83f42a9 	.word	0xd83f42a9
   2ca00:	1a69460f 	.word	0x1a69460f
   2ca04:	d83b428b 	.word	0xd83b428b
   2ca08:	461c4606 	.word	0x461c4606
   2ca0c:	46111ae8 	.word	0x46111ae8
   2ca10:	461a6030 	.word	0x461a6030
   2ca14:	fa4cf7ed 	.word	0xfa4cf7ed
   2ca18:	46202c00 	.word	0x46202c00
   2ca1c:	2c7fdb15 	.word	0x2c7fdb15
   2ca20:	6833d814 	.word	0x6833d814
   2ca24:	2a001bda 	.word	0x2a001bda
   2ca28:	2001dd2a 	.word	0x2001dd2a
   2ca2c:	60321e5a 	.word	0x60321e5a
   2ca30:	4c01f803 	.word	0x4c01f803
   2ca34:	34016833 	.word	0x34016833
   2ca38:	2f001bdf 	.word	0x2f001bdf
   2ca3c:	2206dd20 	.word	0x2206dd20
   2ca40:	60311e59 	.word	0x60311e59
   2ca44:	f8034420 	.word	0xf8034420
   2ca48:	bdf82c01 	.word	0xbdf82c01
   2ca4c:	d80f2cff 	.word	0xd80f2cff
   2ca50:	1bda6833 	.word	0x1bda6833
   2ca54:	dd132a01 	.word	0xdd132a01
   2ca58:	1e592281 	.word	0x1e592281
   2ca5c:	f8036031 	.word	0xf8036031
   2ca60:	68334c01 	.word	0x68334c01
   2ca64:	1e592002 	.word	0x1e592002
   2ca68:	f8036031 	.word	0xf8036031
   2ca6c:	e7e12c01 	.word	0xe7e12c01
   2ca70:	46394622 	.word	0x46394622
   2ca74:	f7ff4630 	.word	0xf7ff4630
   2ca78:	2800fed7 	.word	0x2800fed7
   2ca7c:	bdf8dada 	.word	0xbdf8dada
   2ca80:	006bf06f 	.word	0x006bf06f
   2ca84:	bf00bdf8 	.word	0xbf00bdf8

0002ca88 <symbol_0002662>:
   2ca88:	41f0e92d 	.word	0x41f0e92d
   2ca8c:	8018f8dd 	.word	0x8018f8dd
   2ca90:	f1b86805 	.word	0xf1b86805
   2ca94:	d1130f00 	.word	0xd1130f00
   2ca98:	2c001a6c 	.word	0x2c001a6c
   2ca9c:	8087f340 	.word	0x8087f340
   2caa0:	60041e6c 	.word	0x60041e6c
   2caa4:	8c01f805 	.word	0x8c01f805
   2caa8:	1a656804 	.word	0x1a656804
   2caac:	dd7e2d00 	.word	0xdd7e2d00
   2cab0:	f04f2505 	.word	0xf04f2505
   2cab4:	1e660802 	.word	0x1e660802
   2cab8:	f8046006 	.word	0xf8046006
   2cabc:	68055c01 	.word	0x68055c01
   2cac0:	d87442a9 	.word	0xd87442a9
   2cac4:	42a31a6c 	.word	0x42a31a6c
   2cac8:	4606d871 	.word	0x4606d871
   2cacc:	1ae8461c 	.word	0x1ae8461c
   2cad0:	6030460f 	.word	0x6030460f
   2cad4:	461a4611 	.word	0x461a4611
   2cad8:	f9eaf7ed 	.word	0xf9eaf7ed
   2cadc:	46202c00 	.word	0x46202c00
   2cae0:	2c7fdb2f 	.word	0x2c7fdb2f
   2cae4:	6833d841 	.word	0x6833d841
   2cae8:	2a001bda 	.word	0x2a001bda
   2caec:	2001dd5f 	.word	0x2001dd5f
   2caf0:	60321e5a 	.word	0x60321e5a
   2caf4:	4c01f803 	.word	0x4c01f803
   2caf8:	34016833 	.word	0x34016833
   2cafc:	2a001bda 	.word	0x2a001bda
   2cb00:	2206dd55 	.word	0x2206dd55
   2cb04:	1e594404 	.word	0x1e594404
   2cb08:	60312c00 	.word	0x60312c00
   2cb0c:	f8034620 	.word	0xf8034620
   2cb10:	db162c01 	.word	0xdb162c01
   2cb14:	2c7f4444 	.word	0x2c7f4444
   2cb18:	6833d815 	.word	0x6833d815
   2cb1c:	2a001bda 	.word	0x2a001bda
   2cb20:	2001dd45 	.word	0x2001dd45
   2cb24:	60321e5a 	.word	0x60321e5a
   2cb28:	4c01f803 	.word	0x4c01f803
   2cb2c:	34016833 	.word	0x34016833
   2cb30:	2f001bdf 	.word	0x2f001bdf
   2cb34:	2230dd3b 	.word	0x2230dd3b
   2cb38:	60311e59 	.word	0x60311e59
   2cb3c:	f8034420 	.word	0xf8034420
   2cb40:	e8bd2c01 	.word	0xe8bd2c01
   2cb44:	2cff81f0 	.word	0x2cff81f0
   2cb48:	6833d821 	.word	0x6833d821
   2cb4c:	2a011bda 	.word	0x2a011bda
   2cb50:	2281dd2d 	.word	0x2281dd2d
   2cb54:	60311e59 	.word	0x60311e59
   2cb58:	4c01f803 	.word	0x4c01f803
   2cb5c:	20026833 	.word	0x20026833
   2cb60:	60311e59 	.word	0x60311e59
   2cb64:	2c01f803 	.word	0x2c01f803
   2cb68:	2cffe7e0 	.word	0x2cffe7e0
   2cb6c:	6833d817 	.word	0x6833d817
   2cb70:	2a011bda 	.word	0x2a011bda
   2cb74:	2281dd1b 	.word	0x2281dd1b
   2cb78:	60311e59 	.word	0x60311e59
   2cb7c:	4c01f803 	.word	0x4c01f803
   2cb80:	20026833 	.word	0x20026833
   2cb84:	60311e59 	.word	0x60311e59
   2cb88:	2c01f803 	.word	0x2c01f803
   2cb8c:	4622e7b4 	.word	0x4622e7b4
   2cb90:	46304639 	.word	0x46304639
   2cb94:	fe48f7ff 	.word	0xfe48f7ff
   2cb98:	dbd22800 	.word	0xdbd22800
   2cb9c:	4622e7c6 	.word	0x4622e7c6
   2cba0:	46304639 	.word	0x46304639
   2cba4:	fe40f7ff 	.word	0xfe40f7ff
   2cba8:	daa52800 	.word	0xdaa52800
   2cbac:	f06fe7c9 	.word	0xf06fe7c9
   2cbb0:	e7c6006b 	.word	0xe7c6006b

0002cbb4 <symbol_0005bf5>:
   2cbb4:	4ff0e92d 	.word	0x4ff0e92d
   2cbb8:	b0d72400 	.word	0xb0d72400
   2cbbc:	73abf50d 	.word	0x73abf50d
   2cbc0:	46914688 	.word	0x46914688
   2cbc4:	4306e9cd 	.word	0x4306e9cd
   2cbc8:	f0014607 	.word	0xf0014607
   2cbcc:	2802f9a9 	.word	0x2802f9a9
   2cbd0:	2385d159 	.word	0x2385d159
   2cbd4:	ae0b6878 	.word	0xae0b6878
   2cbd8:	46229301 	.word	0x46229301
   2cbdc:	0188f100 	.word	0x0188f100
   2cbe0:	ab0a9600 	.word	0xab0a9600
   2cbe4:	f004940a 	.word	0xf004940a
   2cbe8:	ad2dfca7 	.word	0xad2dfca7
   2cbec:	b9684604 	.word	0xb9684604
   2cbf0:	42a89807 	.word	0x42a89807
   2cbf4:	9a0ad37f 	.word	0x9a0ad37f
   2cbf8:	42931b43 	.word	0x42931b43
   2cbfc:	1a83d37b 	.word	0x1a83d37b
   2cc00:	46314618 	.word	0x46314618
   2cc04:	f7ed9307 	.word	0xf7ed9307
   2cc08:	9c0af953 	.word	0x9c0af953
   2cc0c:	db312c00 	.word	0xdb312c00
   2cc10:	1b5a9b07 	.word	0x1b5a9b07
   2cc14:	dd6e2a00 	.word	0xdd6e2a00
   2cc18:	1e5a2100 	.word	0x1e5a2100
   2cc1c:	0a01f104 	.word	0x0a01f104
   2cc20:	a8079207 	.word	0xa8079207
   2cc24:	1c01f803 	.word	0x1c01f803
   2cc28:	46294652 	.word	0x46294652
   2cc2c:	fe5cf7ff 	.word	0xfe5cf7ff
   2cc30:	db1f1e04 	.word	0xdb1f1e04
   2cc34:	46292203 	.word	0x46292203
   2cc38:	f7ffa807 	.word	0xf7ffa807
   2cc3c:	f1b0fecf 	.word	0xf1b0fecf
   2cc40:	db1b0b00 	.word	0xdb1b0b00
   2cc44:	f0014638 	.word	0xf0014638
   2cc48:	aa08f96b 	.word	0xaa08f96b
   2cc4c:	f00ba909 	.word	0xf00ba909
   2cc50:	4603fe3b 	.word	0x4603fe3b
   2cc54:	2b00b1c8 	.word	0x2b00b1c8
   2cc58:	f1c3db50 	.word	0xf1c3db50
   2cc5c:	a90602a2 	.word	0xa90602a2
   2cc60:	9101e9cd 	.word	0x9101e9cd
   2cc64:	8000f8cd 	.word	0x8000f8cd
   2cc68:	4925442a 	.word	0x4925442a
   2cc6c:	f0054825 	.word	0xf0054825
   2cc70:	4604f8b1 	.word	0x4604f8b1
   2cc74:	b0574620 	.word	0xb0574620
   2cc78:	8ff0e8bd 	.word	0x8ff0e8bd
   2cc7c:	4620465c 	.word	0x4620465c
   2cc80:	e8bdb057 	.word	0xe8bdb057
   2cc84:	4c208ff0 	.word	0x4c208ff0
   2cc88:	9005e7f4 	.word	0x9005e7f4
   2cc8c:	f0014638 	.word	0xf0014638
   2cc90:	2802f947 	.word	0x2802f947
   2cc94:	d01d9b05 	.word	0xd01d9b05
   2cc98:	e9dd4618 	.word	0xe9dd4618
   2cc9c:	90003208 	.word	0x90003208
   2cca0:	a8074629 	.word	0xa8074629
   2cca4:	fef0f7ff 	.word	0xfef0f7ff
   2cca8:	db222800 	.word	0xdb222800
   2ccac:	44a34454 	.word	0x44a34454
   2ccb0:	465a4483 	.word	0x465a4483
   2ccb4:	a8074629 	.word	0xa8074629
   2ccb8:	fe16f7ff 	.word	0xfe16f7ff
   2ccbc:	dbd91e04 	.word	0xdbd91e04
   2ccc0:	2230a807 	.word	0x2230a807
   2ccc4:	f7ff4629 	.word	0xf7ff4629
   2ccc8:	1e03fe89 	.word	0x1e03fe89
   2cccc:	44a3db16 	.word	0x44a3db16
   2ccd0:	e7c0445b 	.word	0xe7c0445b
   2ccd4:	4632687b 	.word	0x4632687b
   2ccd8:	a90a7818 	.word	0xa90a7818
   2ccdc:	fe10f00b 	.word	0xfe10f00b
   2cce0:	6833b928 	.word	0x6833b928
   2cce4:	46299a0a 	.word	0x46299a0a
   2cce8:	f7ffa807 	.word	0xf7ffa807
   2ccec:	2800fe85 	.word	0x2800fe85
   2ccf0:	4604dad3 	.word	0x4604dad3
   2ccf4:	f06fe7be 	.word	0xf06fe7be
   2ccf8:	e7bb046b 	.word	0xe7bb046b
   2ccfc:	e7b9461c 	.word	0xe7b9461c
   2cd00:	00049b6c 	.word	0x00049b6c
   2cd04:	00049b88 	.word	0x00049b88
   2cd08:	ffffc680 	.word	0xffffc680

0002cd0c <authenticated_atcmd_init>:
   2cd0c:	4c3bb5f0 	.word	0x4c3bb5f0
   2cd10:	6826b0c7 	.word	0x6826b0c7
   2cd14:	2701bb16 	.word	0x2701bb16
   2cd18:	60274839 	.word	0x60274839
   2cd1c:	fc32f013 	.word	0xfc32f013
   2cd20:	f5c04605 	.word	0xf5c04605
   2cd24:	46317380 	.word	0x46317380
   2cd28:	7280f44f 	.word	0x7280f44f
   2cd2c:	9302a806 	.word	0x9302a806
   2cd30:	f80cf013 	.word	0xf80cf013
   2cd34:	4932462a 	.word	0x4932462a
   2cd38:	f7eda806 	.word	0xf7eda806
   2cd3c:	aa06f8b9 	.word	0xaa06f8b9
   2cd40:	ab029700 	.word	0xab029700
   2cd44:	2120442a 	.word	0x2120442a
   2cd48:	f00b482e 	.word	0xf00b482e
   2cd4c:	4606f839 	.word	0x4606f839
   2cd50:	2300b138 	.word	0x2300b138
   2cd54:	60232023 	.word	0x60232023
   2cd58:	bdf0b047 	.word	0xbdf0b047
   2cd5c:	b047200e 	.word	0xb047200e
   2cd60:	2022bdf0 	.word	0x2022bdf0
   2cd64:	60279b02 	.word	0x60279b02
   2cd68:	af06441d 	.word	0xaf06441d
   2cd6c:	5578ab06 	.word	0x5578ab06
   2cd70:	f240442b 	.word	0xf240442b
   2cd74:	21022201 	.word	0x21022201
   2cd78:	705e2066 	.word	0x705e2066
   2cd7c:	f9c6f000 	.word	0xf9c6f000
   2cd80:	dbe61e07 	.word	0xdbe61e07
   2cd84:	f0134820 	.word	0xf0134820
   2cd88:	4633fbfd 	.word	0x4633fbfd
   2cd8c:	491e4602 	.word	0x491e4602
   2cd90:	6600e9cd 	.word	0x6600e9cd
   2cd94:	f0004638 	.word	0xf0004638
   2cd98:	3502f963 	.word	0x3502f963
   2cd9c:	4633a903 	.word	0x4633a903
   2cda0:	e9cd220a 	.word	0xe9cd220a
   2cda4:	46386600 	.word	0x46386600
   2cda8:	fa42f000 	.word	0xfa42f000
   2cdac:	6600e9cd 	.word	0x6600e9cd
   2cdb0:	462aa906 	.word	0x462aa906
   2cdb4:	46384633 	.word	0x46384633
   2cdb8:	f952f000 	.word	0xf952f000
   2cdbc:	d00342a8 	.word	0xd00342a8
   2cdc0:	f0004638 	.word	0xf0004638
   2cdc4:	e7c4f9ed 	.word	0xe7c4f9ed
   2cdc8:	6600e9cd 	.word	0x6600e9cd
   2cdcc:	220a4633 	.word	0x220a4633
   2cdd0:	4638a903 	.word	0x4638a903
   2cdd4:	fa2cf000 	.word	0xfa2cf000
   2cdd8:	ddf12801 	.word	0xddf12801
   2cddc:	2202a803 	.word	0x2202a803
   2cde0:	f013490a 	.word	0xf013490a
   2cde4:	4605fbfd 	.word	0x4605fbfd
   2cde8:	d1e92800 	.word	0xd1e92800
   2cdec:	46382302 	.word	0x46382302
   2cdf0:	f0006023 	.word	0xf0006023
   2cdf4:	4628f9d5 	.word	0x4628f9d5
   2cdf8:	bf00e7ae 	.word	0xbf00e7ae
   2cdfc:	20024a70 	.word	0x20024a70
   2ce00:	00049ba4 	.word	0x00049ba4
   2ce04:	2002c388 	.word	0x2002c388
   2ce08:	00049bb4 	.word	0x00049bb4
   2ce0c:	00049bc4 	.word	0x00049bc4

0002ce10 <authenticated_atcmd_shutdown>:
   2ce10:	4b012200 	.word	0x4b012200
   2ce14:	4770601a 	.word	0x4770601a
   2ce18:	20024a70 	.word	0x20024a70

0002ce1c <gnss_client_event_handler>:
   2ce1c:	1b08f850 	.word	0x1b08f850
   2ce20:	f0060c09 	.word	0xf0060c09
   2ce24:	bf00bee9 	.word	0xbf00bee9

0002ce28 <rpc_gnss_client_init>:
   2ce28:	f00b4801 	.word	0xf00b4801
   2ce2c:	bf00b8c1 	.word	0xbf00b8c1
   2ce30:	00049c4c 	.word	0x00049c4c

0002ce34 <rpc_gnss_client_request_alloc>:
   2ce34:	b5102300 	.word	0xb5102300
   2ce38:	9301b082 	.word	0x9301b082
   2ce3c:	4604b158 	.word	0x4604b158
   2ce40:	2007aa01 	.word	0x2007aa01
   2ce44:	faecf00b 	.word	0xfaecf00b
   2ce48:	9b01b918 	.word	0x9b01b918
   2ce4c:	3308b10b 	.word	0x3308b10b
   2ce50:	b0026023 	.word	0xb0026023
   2ce54:	2007bd10 	.word	0x2007bd10
   2ce58:	bd10b002 	.word	0xbd10b002

0002ce5c <rpc_gnss_client_request_send>:
   2ce5c:	4370f401 	.word	0x4370f401
   2ce60:	5f80f5b3 	.word	0x5f80f5b3
   2ce64:	b160d10b 	.word	0xb160d10b
   2ce68:	f8304603 	.word	0xf8304603
   2ce6c:	20072c08 	.word	0x20072c08
   2ce70:	4101ea42 	.word	0x4101ea42
   2ce74:	1d08f843 	.word	0x1d08f843
   2ce78:	f00b4619 	.word	0xf00b4619
   2ce7c:	200fbab9 	.word	0x200fbab9
   2ce80:	20074770 	.word	0x20074770
   2ce84:	bf004770 	.word	0xbf004770

0002ce88 <rpc_gnss_client_message_free>:
   2ce88:	f1a0b120 	.word	0xf1a0b120
   2ce8c:	20070108 	.word	0x20070108
   2ce90:	baf8f00b 	.word	0xbaf8f00b
   2ce94:	47702007 	.word	0x47702007

0002ce98 <rpc_gnss_client_data_free>:
   2ce98:	4601b118 	.word	0x4601b118
   2ce9c:	f00b2007 	.word	0xf00b2007
   2cea0:	2007bc03 	.word	0x2007bc03
   2cea4:	bf004770 	.word	0xbf004770

0002cea8 <eckey_can_do>:
   2cea8:	28023802 	.word	0x28023802
   2ceac:	2000bf8c 	.word	0x2000bf8c
   2ceb0:	47702001 	.word	0x47702001

0002ceb4 <eckey_get_bitlen>:
   2ceb4:	47706d80 	.word	0x47706d80

0002ceb8 <eckey_debug>:
   2ceb8:	4b032202 	.word	0x4b032202
   2cebc:	60883088 	.word	0x60883088
   2cec0:	604b700a 	.word	0x604b700a
   2cec4:	bf004770 	.word	0xbf004770
   2cec8:	00049c5c 	.word	0x00049c5c

0002cecc <eckeydh_can_do>:
   2cecc:	28013802 	.word	0x28013802
   2ced0:	2000bf8c 	.word	0x2000bf8c
   2ced4:	47702001 	.word	0x47702001

0002ced8 <eckey_free_wrap>:
   2ced8:	4604b510 	.word	0x4604b510
   2cedc:	fd24f003 	.word	0xfd24f003
   2cee0:	e8bd4620 	.word	0xe8bd4620
   2cee4:	f00c4010 	.word	0xf00c4010
   2cee8:	bf00b947 	.word	0xbf00b947

0002ceec <eckey_alloc_wrap>:
   2ceec:	21acb510 	.word	0x21acb510
   2cef0:	f00c2001 	.word	0xf00c2001
   2cef4:	4604f92d 	.word	0x4604f92d
   2cef8:	f003b108 	.word	0xf003b108
   2cefc:	4620fcaf 	.word	0x4620fcaf
   2cf00:	bf00bd10 	.word	0xbf00bd10

0002cf04 <eckey_check_pair>:
   2cf04:	bc88f004 	.word	0xbc88f004

0002cf08 <symbol_0005c7f>:
   2cf08:	4ff0e92d 	.word	0x4ff0e92d
   2cf0c:	c024f8dd 	.word	0xc024f8dd
   2cf10:	0f00f1bc 	.word	0x0f00f1bc
   2cf14:	4c42d065 	.word	0x4c42d065
   2cf18:	540cfba4 	.word	0x540cfba4
   2cf1c:	eb040864 	.word	0xeb040864
   2cf20:	45c40844 	.word	0x45c40844
   2cf24:	3401bf18 	.word	0x3401bf18
   2cf28:	4f80f1b4 	.word	0x4f80f1b4
   2cf2c:	00a4d271 	.word	0x00a4d271
   2cf30:	428c3401 	.word	0x428c3401
   2cf34:	2800d869 	.word	0x2800d869
   2cf38:	f1b8d067 	.word	0xf1b8d067
   2cf3c:	d0610f00 	.word	0xd0610f00
   2cf40:	27004686 	.word	0x27004686
   2cf44:	1cdc4e37 	.word	0x1cdc4e37
   2cf48:	f8142500 	.word	0xf8142500
   2cf4c:	f8141c03 	.word	0xf8141c03
   2cf50:	f8143c02 	.word	0xf8143c02
   2cf54:	ea4fbc01 	.word	0xea4fbc01
   2cf58:	010909a1 	.word	0x010909a1
   2cf5c:	0130f001 	.word	0x0130f001
   2cf60:	1a13eb06 	.word	0x1a13eb06
   2cf64:	9009f816 	.word	0x9009f816
   2cf68:	f81a009b 	.word	0xf81a009b
   2cf6c:	f003a001 	.word	0xf003a001
   2cf70:	eb06013c 	.word	0xeb06013c
   2cf74:	5c59139b 	.word	0x5c59139b
   2cf78:	0507f369 	.word	0x0507f369
   2cf7c:	033ff00b 	.word	0x033ff00b
   2cf80:	f36a5cf3 	.word	0xf36a5cf3
   2cf84:	f361250f 	.word	0xf361250f
   2cf88:	37034517 	.word	0x37034517
   2cf8c:	651ff363 	.word	0x651ff363
   2cf90:	0104f10e 	.word	0x0104f10e
   2cf94:	f8ce45b8 	.word	0xf8ce45b8
   2cf98:	46235000 	.word	0x46235000
   2cf9c:	f104468e 	.word	0xf104468e
   2cfa0:	d8d10403 	.word	0xd8d10403
   2cfa4:	d91445bc 	.word	0xd91445bc
   2cfa8:	4d1e781c 	.word	0x4d1e781c
   2cfac:	10a63701 	.word	0x10a63701
   2cfb0:	ea4f4567 	.word	0xea4f4567
   2cfb4:	f0041404 	.word	0xf0041404
   2cfb8:	f8150430 	.word	0xf8150430
   2cfbc:	d315e006 	.word	0xd315e006
   2cfc0:	5d2b263d 	.word	0x5d2b263d
   2cfc4:	e000f881 	.word	0xe000f881
   2cfc8:	233d704b 	.word	0x233d704b
   2cfcc:	70cb708e 	.word	0x70cb708e
   2cfd0:	23003104 	.word	0x23003104
   2cfd4:	1a08469c 	.word	0x1a08469c
   2cfd8:	700b6010 	.word	0x700b6010
   2cfdc:	e8bd4660 	.word	0xe8bd4660
   2cfe0:	f8c28ff0 	.word	0xf8c28ff0
   2cfe4:	4660c000 	.word	0x4660c000
   2cfe8:	8ff0e8bd 	.word	0x8ff0e8bd
   2cfec:	f881785b 	.word	0xf881785b
   2cff0:	eb05e000 	.word	0xeb05e000
   2cff4:	5d341613 	.word	0x5d341613
   2cff8:	f003009b 	.word	0xf003009b
   2cffc:	704c033c 	.word	0x704c033c
   2d000:	e7e25cee 	.word	0xe7e25cee
   2d004:	46014647 	.word	0x46014647
   2d008:	6014e7cc 	.word	0x6014e7cc
   2d00c:	0c29f06f 	.word	0x0c29f06f
   2d010:	f04fe7e4 	.word	0xf04fe7e4
   2d014:	f06f33ff 	.word	0xf06f33ff
   2d018:	60130c29 	.word	0x60130c29
   2d01c:	bf00e7de 	.word	0xbf00e7de
   2d020:	aaaaaaab 	.word	0xaaaaaaab
   2d024:	00049cc4 	.word	0x00049cc4

0002d028 <packet_free_cb>:
   2d028:	f0006800 	.word	0xf0006800
   2d02c:	bf00b9eb 	.word	0xbf00b9eb

0002d030 <packet_free_cb>:
   2d030:	4604b510 	.word	0x4604b510
   2d034:	f0066800 	.word	0xf0066800
   2d038:	68a0faaf 	.word	0x68a0faaf
   2d03c:	e8bdb118 	.word	0xe8bdb118
   2d040:	f00c4010 	.word	0xf00c4010
   2d044:	bd10b899 	.word	0xbd10b899

0002d048 <packet_free_cb>:
   2d048:	4604b510 	.word	0x4604b510
   2d04c:	f7ff6800 	.word	0xf7ff6800
   2d050:	68a0ff23 	.word	0x68a0ff23
   2d054:	e8bdb118 	.word	0xe8bdb118
   2d058:	f00c4010 	.word	0xf00c4010
   2d05c:	bd10b88d 	.word	0xbd10b88d

0002d060 <at_interface_write>:
   2d060:	b083b5f0 	.word	0xb083b5f0
   2d064:	4615460f 	.word	0x4615460f
   2d068:	f0044606 	.word	0xf0044606
   2d06c:	2800fdcf 	.word	0x2800fdcf
   2d070:	6803d047 	.word	0x6803d047
   2d074:	039b4604 	.word	0x039b4604
   2d078:	6803d543 	.word	0x6803d543
   2d07c:	f4234629 	.word	0xf4234629
   2d080:	60033300 	.word	0x60033300
   2d084:	a8016803 	.word	0xa8016803
   2d088:	1300f443 	.word	0x1300f443
   2d08c:	f0006023 	.word	0xf0006023
   2d090:	bba0f98f 	.word	0xbba0f98f
   2d094:	9b012204 	.word	0x9b012204
   2d098:	7258721a 	.word	0x7258721a
   2d09c:	72d87298 	.word	0x72d87298
   2d0a0:	b98560de 	.word	0xb98560de
   2d0a4:	21014618 	.word	0x21014618
   2d0a8:	f996f000 	.word	0xf996f000
   2d0ac:	f44fb9d0 	.word	0xf44fb9d0
   2d0b0:	46303200 	.word	0x46303200
   2d0b4:	f04f4611 	.word	0xf04f4611
   2d0b8:	f00433ff 	.word	0xf00433ff
   2d0bc:	b9a8fd3b 	.word	0xb9a8fd3b
   2d0c0:	b0034628 	.word	0xb0034628
   2d0c4:	4639bdf0 	.word	0x4639bdf0
   2d0c8:	462a6818 	.word	0x462a6818
   2d0cc:	fef0f7ec 	.word	0xfef0f7ec
   2d0d0:	98012101 	.word	0x98012101
   2d0d4:	f980f000 	.word	0xf980f000
   2d0d8:	d0e82800 	.word	0xd0e82800
   2d0dc:	68189b01 	.word	0x68189b01
   2d0e0:	f990f000 	.word	0xf990f000
   2d0e4:	f0009801 	.word	0xf0009801
   2d0e8:	2023f985 	.word	0x2023f985
   2d0ec:	f4436823 	.word	0xf4436823
   2d0f0:	60233300 	.word	0x60233300
   2d0f4:	f830f7f8 	.word	0xf830f7f8
   2d0f8:	30fff04f 	.word	0x30fff04f
   2d0fc:	200ce7e1 	.word	0x200ce7e1
   2d100:	2016e7f4 	.word	0x2016e7f4
   2d104:	bf00e7f6 	.word	0xbf00e7f6

0002d108 <at_interface_init>:
   2d108:	b94cf000 	.word	0xb94cf000

0002d10c <at_interface_open>:
   2d10c:	41f0e92d 	.word	0x41f0e92d
   2d110:	b0822500 	.word	0xb0822500
   2d114:	f843ab02 	.word	0xf843ab02
   2d118:	46805d08 	.word	0x46805d08
   2d11c:	4618460f 	.word	0x4618460f
   2d120:	21024616 	.word	0x21024616
   2d124:	f0044a1d 	.word	0xf0044a1d
   2d128:	9b00fc61 	.word	0x9b00fc61
   2d12c:	b30b4604 	.word	0xb30b4604
   2d130:	8703e9c3 	.word	0x8703e9c3
   2d134:	4629615e 	.word	0x4629615e
   2d138:	f000a801 	.word	0xf000a801
   2d13c:	b9e8f939 	.word	0xb9e8f939
   2d140:	9b012204 	.word	0x9b012204
   2d144:	72582105 	.word	0x72582105
   2d148:	72d87298 	.word	0x72d87298
   2d14c:	60dc721a 	.word	0x60dc721a
   2d150:	f0004618 	.word	0xf0004618
   2d154:	b9d8f941 	.word	0xb9d8f941
   2d158:	f04f2202 	.word	0xf04f2202
   2d15c:	461133ff 	.word	0x461133ff
   2d160:	f0044620 	.word	0xf0044620
   2d164:	4605fce7 	.word	0x4605fce7
   2d168:	9a00b948 	.word	0x9a00b948
   2d16c:	f4436813 	.word	0xf4436813
   2d170:	60133300 	.word	0x60133300
   2d174:	b0024620 	.word	0xb0024620
   2d178:	81f0e8bd 	.word	0x81f0e8bd
   2d17c:	4620250c 	.word	0x4620250c
   2d180:	fc8af004 	.word	0xfc8af004
   2d184:	f7f74628 	.word	0xf7f74628
   2d188:	f04fffe7 	.word	0xf04fffe7
   2d18c:	e7f134ff 	.word	0xe7f134ff
   2d190:	f0009801 	.word	0xf0009801
   2d194:	2523f92f 	.word	0x2523f92f
   2d198:	bf00e7f1 	.word	0xbf00e7f1
   2d19c:	0002d029 	.word	0x0002d029

0002d1a0 <at_interface_close>:
   2d1a0:	b083b5f0 	.word	0xb083b5f0
   2d1a4:	f0044606 	.word	0xf0044606
   2d1a8:	2800fd31 	.word	0x2800fd31
   2d1ac:	230dd03d 	.word	0x230dd03d
   2d1b0:	60036807 	.word	0x60036807
   2d1b4:	46046803 	.word	0x46046803
   2d1b8:	d41f039b 	.word	0xd41f039b
   2d1bc:	a8012100 	.word	0xa8012100
   2d1c0:	f8f6f000 	.word	0xf8f6f000
   2d1c4:	2204bb20 	.word	0x2204bb20
   2d1c8:	21069b01 	.word	0x21069b01
   2d1cc:	72987258 	.word	0x72987258
   2d1d0:	721a72d8 	.word	0x721a72d8
   2d1d4:	461860de 	.word	0x461860de
   2d1d8:	f8fef000 	.word	0xf8fef000
   2d1dc:	220eb9d0 	.word	0x220eb9d0
   2d1e0:	33fff04f 	.word	0x33fff04f
   2d1e4:	46304611 	.word	0x46304611
   2d1e8:	fca4f004 	.word	0xfca4f004
   2d1ec:	b9a84605 	.word	0xb9a84605
   2d1f0:	f0044630 	.word	0xf0044630
   2d1f4:	4628fc51 	.word	0x4628fc51
   2d1f8:	bdf0b003 	.word	0xbdf0b003
   2d1fc:	21006803 	.word	0x21006803
   2d200:	3300f423 	.word	0x3300f423
   2d204:	a8016003 	.word	0xa8016003
   2d208:	f8d2f000 	.word	0xf8d2f000
   2d20c:	d0da2800 	.word	0xd0da2800
   2d210:	e003250c 	.word	0xe003250c
   2d214:	f0009801 	.word	0xf0009801
   2d218:	2523f8ed 	.word	0x2523f8ed
   2d21c:	46286027 	.word	0x46286027
   2d220:	ff9af7f7 	.word	0xff9af7f7
   2d224:	35fff04f 	.word	0x35fff04f
   2d228:	2516e7e5 	.word	0x2516e7e5
   2d22c:	bf00e7f7 	.word	0xbf00e7f7

0002d230 <at_interface_read>:
   2d230:	41f0e92d 	.word	0x41f0e92d
   2d234:	4688b084 	.word	0x4688b084
   2d238:	461e4615 	.word	0x461e4615
   2d23c:	f0044607 	.word	0xf0044607
   2d240:	2800fce5 	.word	0x2800fce5
   2d244:	2300d049 	.word	0x2300d049
   2d248:	8500e9cd 	.word	0x8500e9cd
   2d24c:	0502f016 	.word	0x0502f016
   2d250:	e9cd4604 	.word	0xe9cd4604
   2d254:	d00e3302 	.word	0xd00e3302
   2d258:	2d00e01e 	.word	0x2d00e01e
   2d25c:	f44fd133 	.word	0xf44fd133
   2d260:	6a233280 	.word	0x6a233280
   2d264:	2b004611 	.word	0x2b004611
   2d268:	f04fbf08 	.word	0xf04fbf08
   2d26c:	463833ff 	.word	0x463833ff
   2d270:	fc60f004 	.word	0xfc60f004
   2d274:	68234605 	.word	0x68234605
   2d278:	f42369e0 	.word	0xf42369e0
   2d27c:	60233380 	.word	0x60233380
   2d280:	46326803 	.word	0x46326803
   2d284:	4669689b 	.word	0x4669689b
   2d288:	f1b04798 	.word	0xf1b04798
   2d28c:	dbe40800 	.word	0xdbe40800
   2d290:	b0044640 	.word	0xb0044640
   2d294:	81f0e8bd 	.word	0x81f0e8bd
   2d298:	69c06803 	.word	0x69c06803
   2d29c:	3380f423 	.word	0x3380f423
   2d2a0:	68036023 	.word	0x68036023
   2d2a4:	689b4632 	.word	0x689b4632
   2d2a8:	47984669 	.word	0x47984669
   2d2ac:	0800f1b0 	.word	0x0800f1b0
   2d2b0:	f1b8daee 	.word	0xf1b8daee
   2d2b4:	d1eb3fff 	.word	0xd1eb3fff
   2d2b8:	f7f72023 	.word	0xf7f72023
   2d2bc:	4640ff4d 	.word	0x4640ff4d
   2d2c0:	e8bdb004 	.word	0xe8bdb004
   2d2c4:	f1b881f0 	.word	0xf1b881f0
   2d2c8:	d1e13fff 	.word	0xd1e13fff
   2d2cc:	f7f74628 	.word	0xf7f74628
   2d2d0:	4640ff43 	.word	0x4640ff43
   2d2d4:	e8bdb004 	.word	0xe8bdb004
   2d2d8:	201681f0 	.word	0x201681f0
   2d2dc:	ff3cf7f7 	.word	0xff3cf7f7
   2d2e0:	38fff04f 	.word	0x38fff04f
   2d2e4:	bf00e7d4 	.word	0xbf00e7d4

0002d2e8 <at_interface_getopt>:
   2d2e8:	bceef004 	.word	0xbceef004

0002d2ec <at_interface_setopt>:
   2d2ec:	bcb6f004 	.word	0xbcb6f004

0002d2f0 <rpc_at_event_handler>:
   2d2f0:	4606b570 	.word	0x4606b570
   2d2f4:	68c0b084 	.word	0x68c0b084
   2d2f8:	f004460d 	.word	0xf004460d
   2d2fc:	4604fc87 	.word	0x4604fc87
   2d300:	6803b348 	.word	0x6803b348
   2d304:	2b01b29b 	.word	0x2b01b29b
   2d308:	6803d01f 	.word	0x6803d01f
   2d30c:	2b0db29b 	.word	0x2b0db29b
   2d310:	6803d029 	.word	0x6803d029
   2d314:	2b02b29b 	.word	0x2b02b29b
   2d318:	3d03d02d 	.word	0x3d03d02d
   2d31c:	d8172d01 	.word	0xd8172d01
   2d320:	68732500 	.word	0x68732500
   2d324:	e9cd6832 	.word	0xe9cd6832
   2d328:	e9cd5502 	.word	0xe9cd5502
   2d32c:	69e02300 	.word	0x69e02300
   2d330:	68034669 	.word	0x68034669
   2d334:	4798685b 	.word	0x4798685b
   2d338:	d0193001 	.word	0xd0193001
   2d33c:	68234628 	.word	0x68234628
   2d340:	3380f443 	.word	0x3380f443
   2d344:	b0046023 	.word	0xb0046023
   2d348:	2d02bd70 	.word	0x2d02bd70
   2d34c:	6005d1e5 	.word	0x6005d1e5
   2d350:	b0042000 	.word	0xb0042000
   2d354:	6830bd70 	.word	0x6830bd70
   2d358:	d0f92800 	.word	0xd0f92800
   2d35c:	f852f000 	.word	0xf852f000
   2d360:	b0044620 	.word	0xb0044620
   2d364:	2d02bd70 	.word	0x2d02bd70
   2d368:	230ed1d7 	.word	0x230ed1d7
   2d36c:	e7ef6003 	.word	0xe7ef6003
   2d370:	b0042002 	.word	0xb0042002
   2d374:	6803bd70 	.word	0x6803bd70
   2d378:	d5ce029b 	.word	0xd5ce029b
   2d37c:	d1cc2d02 	.word	0xd1cc2d02
   2d380:	f4236803 	.word	0xf4236803
   2d384:	60031300 	.word	0x60031300
   2d388:	f4436803 	.word	0xf4436803
   2d38c:	60033300 	.word	0x60033300
   2d390:	bf00e7de 	.word	0xbf00e7de

0002d394 <at_client_evt_handler>:
   2d394:	f850b120 	.word	0xf850b120
   2d398:	0c091b08 	.word	0x0c091b08
   2d39c:	bfa8f7ff 	.word	0xbfa8f7ff
   2d3a0:	bf004770 	.word	0xbf004770

0002d3a4 <rpc_at_client_init>:
   2d3a4:	f00a4801 	.word	0xf00a4801
   2d3a8:	bf00be03 	.word	0xbf00be03
   2d3ac:	00049d04 	.word	0x00049d04

0002d3b0 <rpc_at_client_request_alloc>:
   2d3b0:	2300b180 	.word	0x2300b180
   2d3b4:	b082b510 	.word	0xb082b510
   2d3b8:	4604aa02 	.word	0x4604aa02
   2d3bc:	3d04f842 	.word	0x3d04f842
   2d3c0:	f00b2003 	.word	0xf00b2003
   2d3c4:	b918f82d 	.word	0xb918f82d
   2d3c8:	b10b9b01 	.word	0xb10b9b01
   2d3cc:	60233308 	.word	0x60233308
   2d3d0:	bd10b002 	.word	0xbd10b002
   2d3d4:	4770200e 	.word	0x4770200e

0002d3d8 <rpc_at_client_request_send>:
   2d3d8:	4603b150 	.word	0x4603b150
   2d3dc:	2c08f830 	.word	0x2c08f830
   2d3e0:	ea422003 	.word	0xea422003
   2d3e4:	f8434101 	.word	0xf8434101
   2d3e8:	46191d08 	.word	0x46191d08
   2d3ec:	b800f00b 	.word	0xb800f00b
   2d3f0:	4770200e 	.word	0x4770200e

0002d3f4 <rpc_at_client_message_free>:
   2d3f4:	f1a0b120 	.word	0xf1a0b120
   2d3f8:	20030108 	.word	0x20030108
   2d3fc:	b842f00b 	.word	0xb842f00b
   2d400:	4770200e 	.word	0x4770200e

0002d404 <rpc_at_client_data_free>:
   2d404:	4601b118 	.word	0x4601b118
   2d408:	f00b2003 	.word	0xf00b2003
   2d40c:	200eb94d 	.word	0x200eb94d
   2d410:	bf004770 	.word	0xbf004770

0002d414 <logobj_event_handler>:
   2d414:	4b3bb530 	.word	0x4b3bb530
   2d418:	681db085 	.word	0x681db085
   2d41c:	d04c2d00 	.word	0xd04c2d00
   2d420:	0302f248 	.word	0x0302f248
   2d424:	d0534299 	.word	0xd0534299
   2d428:	f248d91c 	.word	0xf248d91c
   2d42c:	42990303 	.word	0x42990303
   2d430:	f249d05a 	.word	0xf249d05a
   2d434:	42990301 	.word	0x42990301
   2d438:	2400d147 	.word	0x2400d147
   2d43c:	68026843 	.word	0x68026843
   2d440:	4402e9cd 	.word	0x4402e9cd
   2d444:	2300e9cd 	.word	0x2300e9cd
   2d448:	466969e8 	.word	0x466969e8
   2d44c:	685b6803 	.word	0x685b6803
   2d450:	30014798 	.word	0x30014798
   2d454:	4620d04e 	.word	0x4620d04e
   2d458:	f443682b 	.word	0xf443682b
   2d45c:	602b3380 	.word	0x602b3380
   2d460:	bd30b005 	.word	0xbd30b005
   2d464:	0301f248 	.word	0x0301f248
   2d468:	d12e4299 	.word	0xd12e4299
   2d46c:	2b0068c3 	.word	0x2b0068c3
   2d470:	6828d135 	.word	0x6828d135
   2d474:	0080f410 	.word	0x0080f410
   2d478:	682bd03e 	.word	0x682bd03e
   2d47c:	2b01b29b 	.word	0x2b01b29b
   2d480:	682bd105 	.word	0x682bd105
   2d484:	041b0c1b 	.word	0x041b0c1b
   2d488:	0302f043 	.word	0x0302f043
   2d48c:	4b1e602b 	.word	0x4b1e602b
   2d490:	f002781a 	.word	0xf002781a
   2d494:	2a0001ff 	.word	0x2a0001ff
   2d498:	4a1cd031 	.word	0x4a1cd031
   2d49c:	b9097811 	.word	0xb9097811
   2d4a0:	70112101 	.word	0x70112101
   2d4a4:	70182000 	.word	0x70182000
   2d4a8:	f423682b 	.word	0xf423682b
   2d4ac:	602b0380 	.word	0x602b0380
   2d4b0:	f443682b 	.word	0xf443682b
   2d4b4:	602b0300 	.word	0x602b0300
   2d4b8:	6800e7d2 	.word	0x6800e7d2
   2d4bc:	d0cf2800 	.word	0xd0cf2800
   2d4c0:	f86af006 	.word	0xf86af006
   2d4c4:	b0054628 	.word	0xb0054628
   2d4c8:	2000bd30 	.word	0x2000bd30
   2d4cc:	bd30b005 	.word	0xbd30b005
   2d4d0:	f413682b 	.word	0xf413682b
   2d4d4:	d00b0380 	.word	0xd00b0380
   2d4d8:	280068c0 	.word	0x280068c0
   2d4dc:	230ed0e4 	.word	0x230ed0e4
   2d4e0:	606b2000 	.word	0x606b2000
   2d4e4:	bd30b005 	.word	0xbd30b005
   2d4e8:	2b0168c3 	.word	0x2b0168c3
   2d4ec:	e7f6d1a5 	.word	0xe7f6d1a5
   2d4f0:	e7b54618 	.word	0xe7b54618
   2d4f4:	e7b32002 	.word	0xe7b32002
   2d4f8:	606b230e 	.word	0x606b230e
   2d4fc:	4a03e7b0 	.word	0x4a03e7b0
   2d500:	e7cf7011 	.word	0xe7cf7011
   2d504:	20024a78 	.word	0x20024a78
   2d508:	2002c37e 	.word	0x2002c37e
   2d50c:	2002c37f 	.word	0x2002c37f

0002d510 <logobj_interface_init>:
   2d510:	b5102300 	.word	0xb5102300
   2d514:	4a084907 	.word	0x4a084907
   2d518:	48094c08 	.word	0x48094c08
   2d51c:	60037023 	.word	0x60037023
   2d520:	6013700b 	.word	0x6013700b
   2d524:	fffcf005 	.word	0xfffcf005
   2d528:	bf183000 	.word	0xbf183000
   2d52c:	42402001 	.word	0x42402001
   2d530:	bf00bd10 	.word	0xbf00bd10
   2d534:	2002c37e 	.word	0x2002c37e
   2d538:	20024a74 	.word	0x20024a74
   2d53c:	2002c37f 	.word	0x2002c37f
   2d540:	20024a78 	.word	0x20024a78

0002d544 <logobj_interface_open>:
   2d544:	e92d2300 	.word	0xe92d2300
   2d548:	286647f0 	.word	0x286647f0
   2d54c:	9300b082 	.word	0x9300b082
   2d550:	2902d172 	.word	0x2902d172
   2d554:	d16f4689 	.word	0xd16f4689
   2d558:	2305f240 	.word	0x2305f240
   2d55c:	4692429a 	.word	0x4692429a
   2d560:	4f48d16a 	.word	0x4f48d16a
   2d564:	2d00683d 	.word	0x2d00683d
   2d568:	4680d17c 	.word	0x4680d17c
   2d56c:	46684a46 	.word	0x46684a46
   2d570:	fa3cf004 	.word	0xfa3cf004
   2d574:	46069b00 	.word	0x46069b00
   2d578:	d07d2b00 	.word	0xd07d2b00
   2d57c:	22044629 	.word	0x22044629
   2d580:	603b4842 	.word	0x603b4842
   2d584:	fbe2f012 	.word	0xfbe2f012
   2d588:	46299c00 	.word	0x46299c00
   2d58c:	8903e9c4 	.word	0x8903e9c4
   2d590:	a014f8c4 	.word	0xa014f8c4
   2d594:	f005a801 	.word	0xf005a801
   2d598:	2800ffc9 	.word	0x2800ffc9
   2d59c:	2201d13c 	.word	0x2201d13c
   2d5a0:	9b012104 	.word	0x9b012104
   2d5a4:	73584d3a 	.word	0x73584d3a
   2d5a8:	73d87398 	.word	0x73d87398
   2d5ac:	72987258 	.word	0x72987258
   2d5b0:	721972d8 	.word	0x721972d8
   2d5b4:	731a702a 	.word	0x731a702a
   2d5b8:	46186822 	.word	0x46186822
   2d5bc:	0280f442 	.word	0x0280f442
   2d5c0:	f2476022 	.word	0xf2476022
   2d5c4:	f0050101 	.word	0xf0050101
   2d5c8:	bb38ffc9 	.word	0xbb38ffc9
   2d5cc:	0200f44f 	.word	0x0200f44f
   2d5d0:	33fff04f 	.word	0x33fff04f
   2d5d4:	46304611 	.word	0x46304611
   2d5d8:	faacf004 	.word	0xfaacf004
   2d5dc:	b3104604 	.word	0xb3104604
   2d5e0:	2e009a00 	.word	0x2e009a00
   2d5e4:	f4436813 	.word	0xf4436813
   2d5e8:	60133300 	.word	0x60133300
   2d5ec:	68139a00 	.word	0x68139a00
   2d5f0:	0380f423 	.word	0x0380f423
   2d5f4:	9a006013 	.word	0x9a006013
   2d5f8:	f4236813 	.word	0xf4236813
   2d5fc:	60130300 	.word	0x60130300
   2d600:	2300da36 	.word	0x2300da36
   2d604:	603b4620 	.word	0x603b4620
   2d608:	36fff04f 	.word	0x36fff04f
   2d60c:	fda4f7f7 	.word	0xfda4f7f7
   2d610:	b0024630 	.word	0xb0024630
   2d614:	87f0e8bd 	.word	0x87f0e8bd
   2d618:	e7e1240c 	.word	0xe7e1240c
   2d61c:	f0059801 	.word	0xf0059801
   2d620:	2405ffb3 	.word	0x2405ffb3
   2d624:	4630e7dc 	.word	0x4630e7dc
   2d628:	faf0f004 	.word	0xfaf0f004
   2d62c:	6844b150 	.word	0x6844b150
   2d630:	2300b144 	.word	0x2300b144
   2d634:	e7d36043 	.word	0xe7d36043
   2d638:	f7f72016 	.word	0xf7f72016
   2d63c:	f04ffd8d 	.word	0xf04ffd8d
   2d640:	e7e536ff 	.word	0xe7e536ff
   2d644:	68139a00 	.word	0x68139a00
   2d648:	3300f443 	.word	0x3300f443
   2d64c:	9a006013 	.word	0x9a006013
   2d650:	f4236813 	.word	0xf4236813
   2d654:	60130380 	.word	0x60130380
   2d658:	68139a00 	.word	0x68139a00
   2d65c:	0300f423 	.word	0x0300f423
   2d660:	e7d56013 	.word	0xe7d56013
   2d664:	f7f72001 	.word	0xf7f72001
   2d668:	f04ffd77 	.word	0xf04ffd77
   2d66c:	e7cf36ff 	.word	0xe7cf36ff
   2d670:	f0044630 	.word	0xf0044630
   2d674:	e7c4fa11 	.word	0xe7c4fa11
   2d678:	f7f72018 	.word	0xf7f72018
   2d67c:	f04ffd6d 	.word	0xf04ffd6d
   2d680:	e7c536ff 	.word	0xe7c536ff
   2d684:	20024a78 	.word	0x20024a78
   2d688:	0002d031 	.word	0x0002d031
   2d68c:	20024a74 	.word	0x20024a74
   2d690:	2002c37e 	.word	0x2002c37e

0002d694 <logobj_interface_read>:
   2d694:	43f0e92d 	.word	0x43f0e92d
   2d698:	2900b085 	.word	0x2900b085
   2d69c:	2a00d05e 	.word	0x2a00d05e
   2d6a0:	dd5b4616 	.word	0xdd5b4616
   2d6a4:	4680461f 	.word	0x4680461f
   2d6a8:	f004460d 	.word	0xf004460d
   2d6ac:	4604faaf 	.word	0x4604faaf
   2d6b0:	d0592800 	.word	0xd0592800
   2d6b4:	07ba69c0 	.word	0x07ba69c0
   2d6b8:	68db6803 	.word	0x68db6803
   2d6bc:	4798d524 	.word	0x4798d524
   2d6c0:	d03b3001 	.word	0xd03b3001
   2d6c4:	69e06823 	.word	0x69e06823
   2d6c8:	3380f413 	.word	0x3380f413
   2d6cc:	2100d038 	.word	0x2100d038
   2d6d0:	463a6823 	.word	0x463a6823
   2d6d4:	3380f423 	.word	0x3380f423
   2d6d8:	e9cd6023 	.word	0xe9cd6023
   2d6dc:	e9cd1102 	.word	0xe9cd1102
   2d6e0:	68035600 	.word	0x68035600
   2d6e4:	689b4669 	.word	0x689b4669
   2d6e8:	46054798 	.word	0x46054798
   2d6ec:	680369e0 	.word	0x680369e0
   2d6f0:	479868db 	.word	0x479868db
   2d6f4:	d0033001 	.word	0xd0033001
   2d6f8:	f4436823 	.word	0xf4436823
   2d6fc:	60233380 	.word	0x60233380
   2d700:	b0054628 	.word	0xb0054628
   2d704:	83f0e8bd 	.word	0x83f0e8bd
   2d708:	f0126822 	.word	0xf0126822
   2d70c:	d1d65980 	.word	0xd1d65980
   2d710:	1c434798 	.word	0x1c434798
   2d714:	f44fd1d6 	.word	0xf44fd1d6
   2d718:	6a233280 	.word	0x6a233280
   2d71c:	2b004611 	.word	0x2b004611
   2d720:	4603bf08 	.word	0x4603bf08
   2d724:	f0044640 	.word	0xf0044640
   2d728:	b158fa05 	.word	0xb158fa05
   2d72c:	35fff04f 	.word	0x35fff04f
   2d730:	fd12f7f7 	.word	0xfd12f7f7
   2d734:	b0054628 	.word	0xb0054628
   2d738:	83f0e8bd 	.word	0x83f0e8bd
   2d73c:	e7f52023 	.word	0xe7f52023
   2d740:	e7d4461d 	.word	0xe7d4461d
   2d744:	f0044640 	.word	0xf0044640
   2d748:	4603fa61 	.word	0x4603fa61
   2d74c:	d0b92800 	.word	0xd0b92800
   2d750:	28006840 	.word	0x28006840
   2d754:	f8c3d0b6 	.word	0xf8c3d0b6
   2d758:	e7e79004 	.word	0xe7e79004
   2d75c:	f7f72016 	.word	0xf7f72016
   2d760:	f04ffcfb 	.word	0xf04ffcfb
   2d764:	e7cb35ff 	.word	0xe7cb35ff
   2d768:	f7f72009 	.word	0xf7f72009
   2d76c:	f04ffcf5 	.word	0xf04ffcf5
   2d770:	e7c535ff 	.word	0xe7c535ff

0002d774 <logobj_interface_write>:
   2d774:	41f0e92d 	.word	0x41f0e92d
   2d778:	2900b082 	.word	0x2900b082
   2d77c:	2a04d05b 	.word	0x2a04d05b
   2d780:	461ed159 	.word	0x461ed159
   2d784:	460d4607 	.word	0x460d4607
   2d788:	fa40f004 	.word	0xfa40f004
   2d78c:	28004604 	.word	0x28004604
   2d790:	07b0d067 	.word	0x07b0d067
   2d794:	6823d526 	.word	0x6823d526
   2d798:	d55e039b 	.word	0xd55e039b
   2d79c:	68232600 	.word	0x68232600
   2d7a0:	f4232100 	.word	0xf4232100
   2d7a4:	60233300 	.word	0x60233300
   2d7a8:	f8d5a801 	.word	0xf8d5a801
   2d7ac:	f0058000 	.word	0xf0058000
   2d7b0:	b9f8febd 	.word	0xb9f8febd
   2d7b4:	9b012504 	.word	0x9b012504
   2d7b8:	0103f247 	.word	0x0103f247
   2d7bc:	800cf8c3 	.word	0x800cf8c3
   2d7c0:	72987258 	.word	0x72987258
   2d7c4:	721d72d8 	.word	0x721d72d8
   2d7c8:	f0054618 	.word	0xf0054618
   2d7cc:	4680fec7 	.word	0x4680fec7
   2d7d0:	b9cebb40 	.word	0xb9cebb40
   2d7d4:	68234628 	.word	0x68234628
   2d7d8:	3300f443 	.word	0x3300f443
   2d7dc:	b0026023 	.word	0xb0026023
   2d7e0:	81f0e8bd 	.word	0x81f0e8bd
   2d7e4:	00d96823 	.word	0x00d96823
   2d7e8:	6823d4d5 	.word	0x6823d4d5
   2d7ec:	d536039a 	.word	0xd536039a
   2d7f0:	e7d42601 	.word	0xe7d42601
   2d7f4:	6823200c 	.word	0x6823200c
   2d7f8:	3300f443 	.word	0x3300f443
   2d7fc:	f7f76023 	.word	0xf7f76023
   2d800:	f04ffcab 	.word	0xf04ffcab
   2d804:	e7ea30ff 	.word	0xe7ea30ff
   2d808:	3280f44f 	.word	0x3280f44f
   2d80c:	33fff04f 	.word	0x33fff04f
   2d810:	46384611 	.word	0x46384611
   2d814:	f98ef004 	.word	0xf98ef004
   2d818:	6823b198 	.word	0x6823b198
   2d81c:	3300f443 	.word	0x3300f443
   2d820:	e7ec6023 	.word	0xe7ec6023
   2d824:	f0059801 	.word	0xf0059801
   2d828:	6823feaf 	.word	0x6823feaf
   2d82c:	f4432005 	.word	0xf4432005
   2d830:	60233300 	.word	0x60233300
   2d834:	2016e7e3 	.word	0x2016e7e3
   2d838:	fc8ef7f7 	.word	0xfc8ef7f7
   2d83c:	30fff04f 	.word	0x30fff04f
   2d840:	4638e7cd 	.word	0x4638e7cd
   2d844:	f9e2f004 	.word	0xf9e2f004
   2d848:	28004603 	.word	0x28004603
   2d84c:	6840d0c2 	.word	0x6840d0c2
   2d850:	d0bf2800 	.word	0xd0bf2800
   2d854:	8004f8c3 	.word	0x8004f8c3
   2d858:	2073e7df 	.word	0x2073e7df
   2d85c:	2009e7cf 	.word	0x2009e7cf
   2d860:	2009e7cd 	.word	0x2009e7cd
   2d864:	fc78f7f7 	.word	0xfc78f7f7
   2d868:	30fff04f 	.word	0x30fff04f
   2d86c:	bf00e7b7 	.word	0xbf00e7b7

0002d870 <logobj_interface_setopt>:
   2d870:	2901b5f0 	.word	0x2901b5f0
   2d874:	d068b085 	.word	0xd068b085
   2d878:	f240461e 	.word	0xf240461e
   2d87c:	42992305 	.word	0x42992305
   2d880:	8095f040 	.word	0x8095f040
   2d884:	46154607 	.word	0x46154607
   2d888:	f9c0f004 	.word	0xf9c0f004
   2d88c:	28004604 	.word	0x28004604
   2d890:	80b2f000 	.word	0x80b2f000
   2d894:	d0192d01 	.word	0xd0192d01
   2d898:	d0102d02 	.word	0xd0102d02
   2d89c:	6803252a 	.word	0x6803252a
   2d8a0:	0380f423 	.word	0x0380f423
   2d8a4:	68236023 	.word	0x68236023
   2d8a8:	f4234628 	.word	0xf4234628
   2d8ac:	60230300 	.word	0x60230300
   2d8b0:	fc52f7f7 	.word	0xfc52f7f7
   2d8b4:	35fff04f 	.word	0x35fff04f
   2d8b8:	b0054628 	.word	0xb0054628
   2d8bc:	b116bdf0 	.word	0xb116bdf0
   2d8c0:	2b019b0a 	.word	0x2b019b0a
   2d8c4:	6823d049 	.word	0x6823d049
   2d8c8:	e7e92516 	.word	0xe7e92516
   2d8cc:	d0fa2e00 	.word	0xd0fa2e00
   2d8d0:	2b049b0a 	.word	0x2b049b0a
   2d8d4:	2100d1f7 	.word	0x2100d1f7
   2d8d8:	f005a803 	.word	0xf005a803
   2d8dc:	4605fe27 	.word	0x4605fe27
   2d8e0:	d16a2800 	.word	0xd16a2800
   2d8e4:	22089803 	.word	0x22089803
   2d8e8:	300c4629 	.word	0x300c4629
   2d8ec:	fa2ef012 	.word	0xfa2ef012
   2d8f0:	46319803 	.word	0x46319803
   2d8f4:	300c9a0a 	.word	0x300c9a0a
   2d8f8:	fadaf7ec 	.word	0xfadaf7ec
   2d8fc:	98032308 	.word	0x98032308
   2d900:	0102f247 	.word	0x0102f247
   2d904:	72457203 	.word	0x72457203
   2d908:	72c57285 	.word	0x72c57285
   2d90c:	f4436823 	.word	0xf4436823
   2d910:	60230380 	.word	0x60230380
   2d914:	fe22f005 	.word	0xfe22f005
   2d918:	d1512800 	.word	0xd1512800
   2d91c:	0200f44f 	.word	0x0200f44f
   2d920:	33fff04f 	.word	0x33fff04f
   2d924:	46384611 	.word	0x46384611
   2d928:	f904f004 	.word	0xf904f004
   2d92c:	28004605 	.word	0x28004605
   2d930:	4638d13b 	.word	0x4638d13b
   2d934:	f96af004 	.word	0xf96af004
   2d938:	d04f2800 	.word	0xd04f2800
   2d93c:	2b006843 	.word	0x2b006843
   2d940:	2200d04c 	.word	0x2200d04c
   2d944:	6042461d 	.word	0x6042461d
   2d948:	9c0ae02f 	.word	0x9c0ae02f
   2d94c:	f0049400 	.word	0xf0049400
   2d950:	4605f985 	.word	0x4605f985
   2d954:	b0054628 	.word	0xb0054628
   2d958:	2100bdf0 	.word	0x2100bdf0
   2d95c:	7835a803 	.word	0x7835a803
   2d960:	fde4f005 	.word	0xfde4f005
   2d964:	2d01bb48 	.word	0x2d01bb48
   2d968:	4b26bf08 	.word	0x4b26bf08
   2d96c:	0204f04f 	.word	0x0204f04f
   2d970:	701dbf08 	.word	0x701dbf08
   2d974:	98032300 	.word	0x98032300
   2d978:	0101f247 	.word	0x0101f247
   2d97c:	60c57243 	.word	0x60c57243
   2d980:	72c37283 	.word	0x72c37283
   2d984:	68237202 	.word	0x68237202
   2d988:	0380f443 	.word	0x0380f443
   2d98c:	f0056023 	.word	0xf0056023
   2d990:	4606fde5 	.word	0x4606fde5
   2d994:	f44fb9a0 	.word	0xf44fb9a0
   2d998:	f04f0200 	.word	0xf04f0200
   2d99c:	461133ff 	.word	0x461133ff
   2d9a0:	f0044638 	.word	0xf0044638
   2d9a4:	4605f8c7 	.word	0x4605f8c7
   2d9a8:	6823b180 	.word	0x6823b180
   2d9ac:	202ae778 	.word	0x202ae778
   2d9b0:	fbd2f7f7 	.word	0xfbd2f7f7
   2d9b4:	35fff04f 	.word	0x35fff04f
   2d9b8:	6823e77e 	.word	0x6823e77e
   2d9bc:	e76f250c 	.word	0xe76f250c
   2d9c0:	f0059803 	.word	0xf0059803
   2d9c4:	2505fde1 	.word	0x2505fde1
   2d9c8:	e7696823 	.word	0xe7696823
   2d9cc:	f0044638 	.word	0xf0044638
   2d9d0:	b140f91d 	.word	0xb140f91d
   2d9d4:	b1356845 	.word	0xb1356845
   2d9d8:	e7e66046 	.word	0xe7e66046
   2d9dc:	22044631 	.word	0x22044631
   2d9e0:	f7ec4809 	.word	0xf7ec4809
   2d9e4:	6823fa65 	.word	0x6823fa65
   2d9e8:	0380f423 	.word	0x0380f423
   2d9ec:	68236023 	.word	0x68236023
   2d9f0:	0300f423 	.word	0x0300f423
   2d9f4:	e75f6023 	.word	0xe75f6023
   2d9f8:	f7f72009 	.word	0xf7f72009
   2d9fc:	f04ffbad 	.word	0xf04ffbad
   2da00:	e75935ff 	.word	0xe75935ff
   2da04:	2002c37e 	.word	0x2002c37e
   2da08:	20024a74 	.word	0x20024a74

0002da0c <logobj_interface_getopt>:
   2da0c:	2901b5f0 	.word	0x2901b5f0
   2da10:	9e08b083 	.word	0x9e08b083
   2da14:	461fd030 	.word	0x461fd030
   2da18:	2305f240 	.word	0x2305f240
   2da1c:	d1344299 	.word	0xd1344299
   2da20:	f0044615 	.word	0xf0044615
   2da24:	2800f8f3 	.word	0x2800f8f3
   2da28:	2d01d037 	.word	0x2d01d037
   2da2c:	2d02d015 	.word	0x2d02d015
   2da30:	b387d10b 	.word	0xb387d10b
   2da34:	b3736833 	.word	0xb3736833
   2da38:	22012300 	.word	0x22012300
   2da3c:	491a4618 	.word	0x491a4618
   2da40:	70397809 	.word	0x70397809
   2da44:	b0036032 	.word	0xb0036032
   2da48:	2009bdf0 	.word	0x2009bdf0
   2da4c:	fb84f7f7 	.word	0xfb84f7f7
   2da50:	33fff04f 	.word	0x33fff04f
   2da54:	b0034618 	.word	0xb0034618
   2da58:	b1e7bdf0 	.word	0xb1e7bdf0
   2da5c:	2b036833 	.word	0x2b036833
   2da60:	4638d919 	.word	0x4638d919
   2da64:	49112204 	.word	0x49112204
   2da68:	fa22f7ec 	.word	0xfa22f7ec
   2da6c:	22042300 	.word	0x22042300
   2da70:	60324618 	.word	0x60324618
   2da74:	bdf0b003 	.word	0xbdf0b003
   2da78:	f0049600 	.word	0xf0049600
   2da7c:	4603f925 	.word	0x4603f925
   2da80:	d1e32800 	.word	0xd1e32800
   2da84:	b0034618 	.word	0xb0034618
   2da88:	202abdf0 	.word	0x202abdf0
   2da8c:	fb64f7f7 	.word	0xfb64f7f7
   2da90:	33fff04f 	.word	0x33fff04f
   2da94:	2016e7de 	.word	0x2016e7de
   2da98:	2009e7d8 	.word	0x2009e7d8
   2da9c:	fb5cf7f7 	.word	0xfb5cf7f7
   2daa0:	33fff04f 	.word	0x33fff04f
   2daa4:	bf00e7d6 	.word	0xbf00e7d6
   2daa8:	2002c37f 	.word	0x2002c37f
   2daac:	20024a74 	.word	0x20024a74

0002dab0 <logobj_interface_close>:
   2dab0:	4604b510 	.word	0x4604b510
   2dab4:	f8aaf004 	.word	0xf8aaf004
   2dab8:	4620b138 	.word	0x4620b138
   2dabc:	ffecf003 	.word	0xffecf003
   2dac0:	4a052300 	.word	0x4a052300
   2dac4:	60134618 	.word	0x60134618
   2dac8:	2009bd10 	.word	0x2009bd10
   2dacc:	fb44f7f7 	.word	0xfb44f7f7
   2dad0:	30fff04f 	.word	0x30fff04f
   2dad4:	bf00bd10 	.word	0xbf00bd10
   2dad8:	20024a78 	.word	0x20024a78

0002dadc <transport_reset>:
   2dadc:	47702000 	.word	0x47702000

0002dae0 <transport_data_free>:
   2dae0:	e9d34b0b 	.word	0xe9d34b0b
   2dae4:	44132300 	.word	0x44132300
   2dae8:	d20d4298 	.word	0xd20d4298
   2daec:	d80b4282 	.word	0xd80b4282
   2daf0:	4604b510 	.word	0x4604b510
   2daf4:	fff6f005 	.word	0xfff6f005
   2daf8:	4a06b140 	.word	0x4a06b140
   2dafc:	60026084 	.word	0x60026084
   2db00:	4010e8bd 	.word	0x4010e8bd
   2db04:	bf36f005 	.word	0xbf36f005
   2db08:	bb4cf00b 	.word	0xbb4cf00b
   2db0c:	bf00bd10 	.word	0xbf00bd10
   2db10:	20024a7c 	.word	0x20024a7c
   2db14:	00020001 	.word	0x00020001

0002db18 <rpc_transport_ipc_init>:
   2db18:	d02b2800 	.word	0xd02b2800
   2db1c:	b089b530 	.word	0xb089b530
   2db20:	4669aa01 	.word	0x4669aa01
   2db24:	f0054604 	.word	0xf0054604
   2db28:	4603fe3b 	.word	0x4603fe3b
   2db2c:	4a13b140 	.word	0x4a13b140
   2db30:	0028f104 	.word	0x0028f104
   2db34:	e882c803 	.word	0xe882c803
   2db38:	46180003 	.word	0x46180003
   2db3c:	bd30b009 	.word	0xbd30b009
   2db40:	1200e9dd 	.word	0x1200e9dd
   2db44:	f0004620 	.word	0xf0004620
   2db48:	4603f9f1 	.word	0x4603f9f1
   2db4c:	d1ee2800 	.word	0xd1ee2800
   2db50:	490c4b0b 	.word	0x490c4b0b
   2db54:	4a0d480c 	.word	0x4a0d480c
   2db58:	4d0d9303 	.word	0x4d0d9303
   2db5c:	91044b0d 	.word	0x91044b0d
   2db60:	490d9005 	.word	0x490d9005
   2db64:	9307a802 	.word	0x9307a802
   2db68:	92029506 	.word	0x92029506
   2db6c:	fb98f00a 	.word	0xfb98f00a
   2db70:	e7dc4603 	.word	0xe7dc4603
   2db74:	4618230e 	.word	0x4618230e
   2db78:	bf004770 	.word	0xbf004770
   2db7c:	20024a7c 	.word	0x20024a7c
   2db80:	00033a75 	.word	0x00033a75
   2db84:	00033b45 	.word	0x00033b45
   2db88:	0002e549 	.word	0x0002e549
   2db8c:	00033975 	.word	0x00033975
   2db90:	0002dae1 	.word	0x0002dae1
   2db94:	0002dadd 	.word	0x0002dadd
   2db98:	20024a84 	.word	0x20024a84

0002db9c <rpc_transport_rx_handle>:
   2db9c:	b508b160 	.word	0xb508b160
   2dba0:	b2db6843 	.word	0xb2db6843
   2dba4:	d00e2b02 	.word	0xd00e2b02
   2dba8:	0c1b6803 	.word	0x0c1b6803
   2dbac:	d0052b02 	.word	0xd0052b02
   2dbb0:	d00e2b04 	.word	0xd00e2b04
   2dbb4:	bd082000 	.word	0xbd082000
   2dbb8:	47702000 	.word	0x47702000
   2dbbc:	f00b6880 	.word	0xf00b6880
   2dbc0:	2000faf1 	.word	0x2000faf1
   2dbc4:	4601bd08 	.word	0x4601bd08
   2dbc8:	4008e8bd 	.word	0x4008e8bd
   2dbcc:	f00a4803 	.word	0xf00a4803
   2dbd0:	4802ba59 	.word	0x4802ba59
   2dbd4:	fbc4f00a 	.word	0xfbc4f00a
   2dbd8:	bd082000 	.word	0xbd082000
   2dbdc:	20024a84 	.word	0x20024a84
   2dbe0:	bf004770 	.word	0xbf004770

0002dbe4 <rpc_transport_ipc_fault_handler>:
   2dbe4:	b94ef000 	.word	0xb94ef000

0002dbe8 <rpc_transport_ipc_shutdown>:
   2dbe8:	f005b508 	.word	0xf005b508
   2dbec:	f000ffb5 	.word	0xf000ffb5
   2dbf0:	f005fce1 	.word	0xf005fce1
   2dbf4:	e8bdffb7 	.word	0xe8bdffb7
   2dbf8:	f0004008 	.word	0xf0004008
   2dbfc:	bf00bcfb 	.word	0xbf00bcfb

0002dc00 <nrf_socket>:
   2dc00:	4604b570 	.word	0x4604b570
   2dc04:	4616460d 	.word	0x4616460d
   2dc08:	fa02f007 	.word	0xfa02f007
   2dc0c:	6803b130 	.word	0x6803b130
   2dc10:	46294632 	.word	0x46294632
   2dc14:	e8bd4620 	.word	0xe8bd4620
   2dc18:	47184070 	.word	0x47184070
   2dc1c:	30fff04f 	.word	0x30fff04f
   2dc20:	bf00bd70 	.word	0xbf00bd70

0002dc24 <nrf_close>:
   2dc24:	4604b510 	.word	0x4604b510
   2dc28:	fa46f007 	.word	0xfa46f007
   2dc2c:	6843b120 	.word	0x6843b120
   2dc30:	e8bd4620 	.word	0xe8bd4620
   2dc34:	47184010 	.word	0x47184010
   2dc38:	30fff04f 	.word	0x30fff04f
   2dc3c:	bf00bd10 	.word	0xbf00bd10

0002dc40 <nrf_sendto>:
   2dc40:	47f0e92d 	.word	0x47f0e92d
   2dc44:	e9dd460d 	.word	0xe9dd460d
   2dc48:	46168908 	.word	0x46168908
   2dc4c:	4604461f 	.word	0x4604461f
   2dc50:	fa32f007 	.word	0xfa32f007
   2dc54:	e9cdb158 	.word	0xe9cdb158
   2dc58:	f8d08908 	.word	0xf8d08908
   2dc5c:	463be008 	.word	0x463be008
   2dc60:	46294632 	.word	0x46294632
   2dc64:	46f44620 	.word	0x46f44620
   2dc68:	47f0e8bd 	.word	0x47f0e8bd
   2dc6c:	f04f4760 	.word	0xf04f4760
   2dc70:	e8bd30ff 	.word	0xe8bd30ff
   2dc74:	bf0087f0 	.word	0xbf0087f0

0002dc78 <nrf_send>:
   2dc78:	41f0e92d 	.word	0x41f0e92d
   2dc7c:	460eb082 	.word	0x460eb082
   2dc80:	46984617 	.word	0x46984617
   2dc84:	f0074605 	.word	0xf0074605
   2dc88:	b160fa17 	.word	0xb160fa17
   2dc8c:	20004604 	.word	0x20004604
   2dc90:	0000e9cd 	.word	0x0000e9cd
   2dc94:	463a4643 	.word	0x463a4643
   2dc98:	46284631 	.word	0x46284631
   2dc9c:	47a068a4 	.word	0x47a068a4
   2dca0:	e8bdb002 	.word	0xe8bdb002
   2dca4:	f04f81f0 	.word	0xf04f81f0
   2dca8:	e7f930ff 	.word	0xe7f930ff

0002dcac <nrf_write>:
   2dcac:	b083b5f0 	.word	0xb083b5f0
   2dcb0:	4617460e 	.word	0x4617460e
   2dcb4:	f0074605 	.word	0xf0074605
   2dcb8:	b150f9ff 	.word	0xb150f9ff
   2dcbc:	46042300 	.word	0x46042300
   2dcc0:	3300e9cd 	.word	0x3300e9cd
   2dcc4:	4631463a 	.word	0x4631463a
   2dcc8:	68a44628 	.word	0x68a44628
   2dccc:	b00347a0 	.word	0xb00347a0
   2dcd0:	f04fbdf0 	.word	0xf04fbdf0
   2dcd4:	e7fa30ff 	.word	0xe7fa30ff

0002dcd8 <nrf_recvfrom>:
   2dcd8:	47f0e92d 	.word	0x47f0e92d
   2dcdc:	e9dd460d 	.word	0xe9dd460d
   2dce0:	46168908 	.word	0x46168908
   2dce4:	4604461f 	.word	0x4604461f
   2dce8:	f9e6f007 	.word	0xf9e6f007
   2dcec:	e9cdb158 	.word	0xe9cdb158
   2dcf0:	f8d08908 	.word	0xf8d08908
   2dcf4:	463be00c 	.word	0x463be00c
   2dcf8:	46294632 	.word	0x46294632
   2dcfc:	46f44620 	.word	0x46f44620
   2dd00:	47f0e8bd 	.word	0x47f0e8bd
   2dd04:	f04f4760 	.word	0xf04f4760
   2dd08:	e8bd30ff 	.word	0xe8bd30ff
   2dd0c:	bf0087f0 	.word	0xbf0087f0

0002dd10 <nrf_recv>:
   2dd10:	41f0e92d 	.word	0x41f0e92d
   2dd14:	460eb082 	.word	0x460eb082
   2dd18:	46984617 	.word	0x46984617
   2dd1c:	f0074605 	.word	0xf0074605
   2dd20:	b160f9cb 	.word	0xb160f9cb
   2dd24:	20004604 	.word	0x20004604
   2dd28:	0000e9cd 	.word	0x0000e9cd
   2dd2c:	463a4643 	.word	0x463a4643
   2dd30:	46284631 	.word	0x46284631
   2dd34:	47a068e4 	.word	0x47a068e4
   2dd38:	e8bdb002 	.word	0xe8bdb002
   2dd3c:	f04f81f0 	.word	0xf04f81f0
   2dd40:	e7f930ff 	.word	0xe7f930ff

0002dd44 <nrf_read>:
   2dd44:	b083b5f0 	.word	0xb083b5f0
   2dd48:	4617460e 	.word	0x4617460e
   2dd4c:	f0074605 	.word	0xf0074605
   2dd50:	b150f9b3 	.word	0xb150f9b3
   2dd54:	46042300 	.word	0x46042300
   2dd58:	3300e9cd 	.word	0x3300e9cd
   2dd5c:	4631463a 	.word	0x4631463a
   2dd60:	68e44628 	.word	0x68e44628
   2dd64:	b00347a0 	.word	0xb00347a0
   2dd68:	f04fbdf0 	.word	0xf04fbdf0
   2dd6c:	e7fa30ff 	.word	0xe7fa30ff

0002dd70 <nrf_connect>:
   2dd70:	460db570 	.word	0x460db570
   2dd74:	46044616 	.word	0x46044616
   2dd78:	f99ef007 	.word	0xf99ef007
   2dd7c:	6943b130 	.word	0x6943b130
   2dd80:	46294632 	.word	0x46294632
   2dd84:	e8bd4620 	.word	0xe8bd4620
   2dd88:	47184070 	.word	0x47184070
   2dd8c:	30fff04f 	.word	0x30fff04f
   2dd90:	bf00bd70 	.word	0xbf00bd70

0002dd94 <nrf_listen>:
   2dd94:	460db570 	.word	0x460db570
   2dd98:	f0074604 	.word	0xf0074604
   2dd9c:	b128f98d 	.word	0xb128f98d
   2dda0:	46296983 	.word	0x46296983
   2dda4:	e8bd4620 	.word	0xe8bd4620
   2dda8:	47184070 	.word	0x47184070
   2ddac:	30fff04f 	.word	0x30fff04f
   2ddb0:	bf00bd70 	.word	0xbf00bd70

0002ddb4 <nrf_accept>:
   2ddb4:	41f0e92d 	.word	0x41f0e92d
   2ddb8:	4616460d 	.word	0x4616460d
   2ddbc:	f0074604 	.word	0xf0074604
   2ddc0:	b140f97b 	.word	0xb140f97b
   2ddc4:	463269c7 	.word	0x463269c7
   2ddc8:	46204629 	.word	0x46204629
   2ddcc:	e8bd46bc 	.word	0xe8bd46bc
   2ddd0:	230041f0 	.word	0x230041f0
   2ddd4:	f04f4760 	.word	0xf04f4760
   2ddd8:	e8bd30ff 	.word	0xe8bd30ff
   2dddc:	bf0081f0 	.word	0xbf0081f0

0002dde0 <nrf_bind>:
   2dde0:	460db570 	.word	0x460db570
   2dde4:	46044616 	.word	0x46044616
   2dde8:	f966f007 	.word	0xf966f007
   2ddec:	6903b130 	.word	0x6903b130
   2ddf0:	46294632 	.word	0x46294632
   2ddf4:	e8bd4620 	.word	0xe8bd4620
   2ddf8:	47184070 	.word	0x47184070
   2ddfc:	30fff04f 	.word	0x30fff04f
   2de00:	bf00bd70 	.word	0xbf00bd70

0002de04 <nrf_setsockopt>:
   2de04:	41f0e92d 	.word	0x41f0e92d
   2de08:	8018f8dd 	.word	0x8018f8dd
   2de0c:	4616460d 	.word	0x4616460d
   2de10:	4604461f 	.word	0x4604461f
   2de14:	f950f007 	.word	0xf950f007
   2de18:	f8cdb158 	.word	0xf8cdb158
   2de1c:	f8d08018 	.word	0xf8d08018
   2de20:	463be020 	.word	0x463be020
   2de24:	46294632 	.word	0x46294632
   2de28:	46f44620 	.word	0x46f44620
   2de2c:	41f0e8bd 	.word	0x41f0e8bd
   2de30:	f04f4760 	.word	0xf04f4760
   2de34:	e8bd30ff 	.word	0xe8bd30ff
   2de38:	bf0081f0 	.word	0xbf0081f0

0002de3c <nrf_getsockopt>:
   2de3c:	41f0e92d 	.word	0x41f0e92d
   2de40:	8018f8dd 	.word	0x8018f8dd
   2de44:	4616460d 	.word	0x4616460d
   2de48:	4604461f 	.word	0x4604461f
   2de4c:	f934f007 	.word	0xf934f007
   2de50:	f8cdb158 	.word	0xf8cdb158
   2de54:	f8d08018 	.word	0xf8d08018
   2de58:	463be024 	.word	0x463be024
   2de5c:	46294632 	.word	0x46294632
   2de60:	46f44620 	.word	0x46f44620
   2de64:	41f0e8bd 	.word	0x41f0e8bd
   2de68:	f04f4760 	.word	0xf04f4760
   2de6c:	e8bd30ff 	.word	0xe8bd30ff
   2de70:	bf0081f0 	.word	0xbf0081f0

0002de74 <nrf_getaddrinfo>:
   2de74:	ba1ef00d 	.word	0xba1ef00d

0002de78 <nrf_freeaddrinfo>:
   2de78:	ba1ef00d 	.word	0xba1ef00d

0002de7c <nrf_poll>:
   2de7c:	ba1ef00d 	.word	0xba1ef00d

0002de80 <nrf_fcntl>:
   2de80:	ba76f00d 	.word	0xba76f00d

0002de84 <bsd_platform_error_handler>:
   2de84:	f017b508 	.word	0xf017b508
   2de88:	bd08ffab 	.word	0xbd08ffab

0002de8c <bsd_init>:
   2de8c:	4c06b510 	.word	0x4c06b510
   2de90:	b92b7823 	.word	0xb92b7823
   2de94:	f844f007 	.word	0xf844f007
   2de98:	2301b908 	.word	0x2301b908
   2de9c:	bd107023 	.word	0xbd107023
   2dea0:	30fff04f 	.word	0x30fff04f
   2dea4:	bf00bd10 	.word	0xbf00bd10
   2dea8:	2002c380 	.word	0x2002c380

0002deac <bsd_shutdown>:
   2deac:	4c05b510 	.word	0x4c05b510
   2deb0:	b1237823 	.word	0xb1237823
   2deb4:	f8a0f007 	.word	0xf8a0f007
   2deb8:	7020b900 	.word	0x7020b900
   2debc:	f04fbd10 	.word	0xf04fbd10
   2dec0:	bd1030ff 	.word	0xbd1030ff
   2dec4:	2002c380 	.word	0x2002c380

0002dec8 <symbol_000fa2a>:
   2dec8:	2300b110 	.word	0x2300b110
   2decc:	3300e9c0 	.word	0x3300e9c0
   2ded0:	bf004770 	.word	0xbf004770

0002ded4 <symbol_00066b4>:
   2ded4:	d0052802 	.word	0xd0052802
   2ded8:	28034b03 	.word	0x28034b03
   2dedc:	4618bf0c 	.word	0x4618bf0c
   2dee0:	47702000 	.word	0x47702000
   2dee4:	47704801 	.word	0x47704801
   2dee8:	00049c94 	.word	0x00049c94
   2deec:	00049c64 	.word	0x00049c64

0002def0 <symbol_000194a>:
   2def0:	b159b160 	.word	0xb159b160
   2def4:	6806b570 	.word	0x6806b570
   2def8:	6a4bb966 	.word	0x6a4bb966
   2defc:	460d4604 	.word	0x460d4604
   2df00:	60604798 	.word	0x60604798
   2df04:	6025b120 	.word	0x6025b120
   2df08:	bd704630 	.word	0xbd704630
   2df0c:	47704802 	.word	0x47704802
   2df10:	bd704802 	.word	0xbd704802
   2df14:	bd704800 	.word	0xbd704800
   2df18:	ffffc180 	.word	0xffffc180
   2df1c:	ffffc080 	.word	0xffffc080

0002df20 <symbol_00005ae>:
   2df20:	6800b110 	.word	0x6800b110
   2df24:	7800b100 	.word	0x7800b100
   2df28:	bf004770 	.word	0xbf004770

0002df2c <rpc_transport_ipc_rx_init>:
   2df2c:	f0002800 	.word	0xf0002800
   2df30:	e92d80ff 	.word	0xe92d80ff
   2df34:	68054ff0 	.word	0x68054ff0
   2df38:	2d00b095 	.word	0x2d00b095
   2df3c:	80eef000 	.word	0x80eef000
   2df40:	2b006883 	.word	0x2b006883
   2df44:	80eaf000 	.word	0x80eaf000
   2df48:	2f006907 	.word	0x2f006907
   2df4c:	80e6f000 	.word	0x80e6f000
   2df50:	2c006a84 	.word	0x2c006a84
   2df54:	80e2f000 	.word	0x80e2f000
   2df58:	2c1b6844 	.word	0x2c1b6844
   2df5c:	80e3f240 	.word	0x80e3f240
   2df60:	2c0b68c4 	.word	0x2c0b68c4
   2df64:	80dff240 	.word	0x80dff240
   2df68:	e014f8d0 	.word	0xe014f8d0
   2df6c:	0f17f1be 	.word	0x0f17f1be
   2df70:	80d9f240 	.word	0x80d9f240
   2df74:	46042600 	.word	0x46042600
   2df78:	e9cd486f 	.word	0xe9cd486f
   2df7c:	f8df1200 	.word	0xf8df1200
   2df80:	496ea1d8 	.word	0x496ea1d8
   2df84:	6ba08006 	.word	0x6ba08006
   2df88:	c1d0f8df 	.word	0xc1d0f8df
   2df8c:	81d0f8df 	.word	0x81d0f8df
   2df90:	b1d0f8df 	.word	0xb1d0f8df
   2df94:	91d0f8df 	.word	0x91d0f8df
   2df98:	600e4672 	.word	0x600e4672
   2df9c:	0000f8ca 	.word	0x0000f8ca
   2dfa0:	46384631 	.word	0x46384631
   2dfa4:	6000f8cc 	.word	0x6000f8cc
   2dfa8:	3000f8cb 	.word	0x3000f8cb
   2dfac:	6000f8c8 	.word	0x6000f8c8
   2dfb0:	6000f8c9 	.word	0x6000f8c9
   2dfb4:	fecaf011 	.word	0xfecaf011
   2dfb8:	463869e3 	.word	0x463869e3
   2dfbc:	69a3603b 	.word	0x69a3603b
   2dfc0:	f001607b 	.word	0xf001607b
   2dfc4:	2201fddb 	.word	0x2201fddb
   2dfc8:	0c04f04f 	.word	0x0c04f04f
   2dfcc:	495d4b5c 	.word	0x495d4b5c
   2dfd0:	5610f8c3 	.word	0x5610f8c3
   2dfd4:	20806809 	.word	0x20806809
   2dfd8:	495b9104 	.word	0x495b9104
   2dfdc:	e010f8dd 	.word	0xe010f8dd
   2dfe0:	6614f8c3 	.word	0x6614f8c3
   2dfe4:	702e6809 	.word	0x702e6809
   2dfe8:	706e9103 	.word	0x706e9103
   2dfec:	70aa70ee 	.word	0x70aa70ee
   2dff0:	6aa19903 	.word	0x6aa19903
   2dff4:	e000f8db 	.word	0xe000f8db
   2dff8:	6ae16069 	.word	0x6ae16069
   2dffc:	60a99c01 	.word	0x60a99c01
   2e000:	9c0060ec 	.word	0x9c0060ec
   2e004:	61af4951 	.word	0x61af4951
   2e008:	e014f8c5 	.word	0xe014f8c5
   2e00c:	f8c3612c 	.word	0xf8c3612c
   2e010:	680c2590 	.word	0x680c2590
   2e014:	6192f5a1 	.word	0x6192f5a1
   2e018:	9c059405 	.word	0x9c059405
   2e01c:	c598f8c3 	.word	0xc598f8c3
   2e020:	4498f8d1 	.word	0x4498f8d1
   2e024:	6780f44f 	.word	0x6780f44f
   2e028:	9c069406 	.word	0x9c069406
   2e02c:	f8c32410 	.word	0xf8c32410
   2e030:	f8d145a0 	.word	0xf8d145a0
   2e034:	4d4644a0 	.word	0x4d4644a0
   2e038:	9c079407 	.word	0x9c079407
   2e03c:	f8c32440 	.word	0xf8c32440
   2e040:	f8d145a8 	.word	0xf8d145a8
   2e044:	940844a8 	.word	0x940844a8
   2e048:	f8c39c08 	.word	0xf8c39c08
   2e04c:	f8d105ac 	.word	0xf8d105ac
   2e050:	900904ac 	.word	0x900904ac
   2e054:	f8c39809 	.word	0xf8c39809
   2e058:	68086100 	.word	0x68086100
   2e05c:	980a900a 	.word	0x980a900a
   2e060:	6108f8c3 	.word	0x6108f8c3
   2e064:	900b6888 	.word	0x900b6888
   2e068:	f8c3980b 	.word	0xf8c3980b
   2e06c:	69086110 	.word	0x69086110
   2e070:	980c900c 	.word	0x980c900c
   2e074:	6118f8c3 	.word	0x6118f8c3
   2e078:	900d6988 	.word	0x900d6988
   2e07c:	f8c3980d 	.word	0xf8c3980d
   2e080:	69c8611c 	.word	0x69c8611c
   2e084:	7101f501 	.word	0x7101f501
   2e088:	980e900e 	.word	0x980e900e
   2e08c:	0304f8d3 	.word	0x0304f8d3
   2e090:	f8c34310 	.word	0xf8c34310
   2e094:	680c0304 	.word	0x680c0304
   2e098:	940f482e 	.word	0x940f482e
   2e09c:	f8d39c0f 	.word	0xf8d39c0f
   2e0a0:	ea444304 	.word	0xea444304
   2e0a4:	f8c3040c 	.word	0xf8c3040c
   2e0a8:	680c4304 	.word	0x680c4304
   2e0ac:	9c109410 	.word	0x9c109410
   2e0b0:	4304f8d3 	.word	0x4304f8d3
   2e0b4:	0410f044 	.word	0x0410f044
   2e0b8:	4304f8c3 	.word	0x4304f8c3
   2e0bc:	9411680c 	.word	0x9411680c
   2e0c0:	f8d39c11 	.word	0xf8d39c11
   2e0c4:	f0444304 	.word	0xf0444304
   2e0c8:	f8c30440 	.word	0xf8c30440
   2e0cc:	680c4304 	.word	0x680c4304
   2e0d0:	9c129412 	.word	0x9c129412
   2e0d4:	4304f8d3 	.word	0x4304f8d3
   2e0d8:	0480f044 	.word	0x0480f044
   2e0dc:	4304f8c3 	.word	0x4304f8c3
   2e0e0:	3000f8da 	.word	0x3000f8da
   2e0e4:	015b6809 	.word	0x015b6809
   2e0e8:	b2db9113 	.word	0xb2db9113
   2e0ec:	f8c89913 	.word	0xf8c89913
   2e0f0:	f8802000 	.word	0xf8802000
   2e0f4:	f8c0332a 	.word	0xf8c0332a
   2e0f8:	60477184 	.word	0x60477184
   2e0fc:	f8c59602 	.word	0xf8c59602
   2e100:	f8d56610 	.word	0xf8d56610
   2e104:	93023610 	.word	0x93023610
   2e108:	f8d89b02 	.word	0xf8d89b02
   2e10c:	2b013000 	.word	0x2b013000
   2e110:	f8d9d0fb 	.word	0xf8d9d0fb
   2e114:	b0150000 	.word	0xb0150000
   2e118:	8ff0e8bd 	.word	0x8ff0e8bd
   2e11c:	000ef24c 	.word	0x000ef24c
   2e120:	e8bdb015 	.word	0xe8bdb015
   2e124:	f24c8ff0 	.word	0xf24c8ff0
   2e128:	b0150009 	.word	0xb0150009
   2e12c:	8ff0e8bd 	.word	0x8ff0e8bd
   2e130:	000ef24c 	.word	0x000ef24c
   2e134:	bf004770 	.word	0xbf004770
   2e138:	2002a432 	.word	0x2002a432
   2e13c:	20024a94 	.word	0x20024a94
   2e140:	4002a000 	.word	0x4002a000
   2e144:	4002a610 	.word	0x4002a610
   2e148:	4002a614 	.word	0x4002a614
   2e14c:	4002a590 	.word	0x4002a590
   2e150:	40005000 	.word	0x40005000
   2e154:	e000e100 	.word	0xe000e100
   2e158:	20024a8c 	.word	0x20024a8c
   2e15c:	20024a98 	.word	0x20024a98
   2e160:	20024a90 	.word	0x20024a90
   2e164:	20024a9c 	.word	0x20024a9c
   2e168:	20024a88 	.word	0x20024a88

0002e16c <IPC_IRQHandler>:
   2e16c:	4ff0e92d 	.word	0x4ff0e92d
   2e170:	6580f44f 	.word	0x6580f44f
   2e174:	b0874ca7 	.word	0xb0874ca7
   2e178:	5084f8c4 	.word	0x5084f8c4
   2e17c:	8f4ff3bf 	.word	0x8f4ff3bf
   2e180:	8f6ff3bf 	.word	0x8f6ff3bf
   2e184:	f8c44ea4 	.word	0xf8c44ea4
   2e188:	f8d65184 	.word	0xf8d65184
   2e18c:	061f330c 	.word	0x061f330c
   2e190:	80c8f100 	.word	0x80c8f100
   2e194:	f8d34ba0 	.word	0xf8d34ba0
   2e198:	07d0230c 	.word	0x07d0230c
   2e19c:	80d4f100 	.word	0x80d4f100
   2e1a0:	230cf8d3 	.word	0x230cf8d3
   2e1a4:	0240f012 	.word	0x0240f012
   2e1a8:	80b6f040 	.word	0x80b6f040
   2e1ac:	130cf8d3 	.word	0x130cf8d3
   2e1b0:	f1000749 	.word	0xf1000749
   2e1b4:	f8d380e6 	.word	0xf8d380e6
   2e1b8:	06da330c 	.word	0x06da330c
   2e1bc:	809df140 	.word	0x809df140
   2e1c0:	4a952100 	.word	0x4a952100
   2e1c4:	f8c24b95 	.word	0xf8c24b95
   2e1c8:	681b1110 	.word	0x681b1110
   2e1cc:	9b049304 	.word	0x9b049304
   2e1d0:	8270f8df 	.word	0x8270f8df
   2e1d4:	f8df4f92 	.word	0xf8df4f92
   2e1d8:	f8d89270 	.word	0xf8d89270
   2e1dc:	f8daa000 	.word	0xf8daa000
   2e1e0:	29001000 	.word	0x29001000
   2e1e4:	2200d03f 	.word	0x2200d03f
   2e1e8:	e0024614 	.word	0xe0024614
   2e1ec:	428c3401 	.word	0x428c3401
   2e1f0:	eb0ad227 	.word	0xeb0ad227
   2e1f4:	68ab05c4 	.word	0x68ab05c4
   2e1f8:	d0f72b00 	.word	0xd0f72b00
   2e1fc:	b2f6686e 	.word	0xb2f6686e
   2e200:	d1f32e01 	.word	0xd1f32e01
   2e204:	f8b96868 	.word	0xf8b96868
   2e208:	ebb33000 	.word	0xebb33000
   2e20c:	d1ed4f10 	.word	0xd1ed4f10
   2e210:	3301686a 	.word	0x3301686a
   2e214:	02fff022 	.word	0x02fff022
   2e218:	0202f042 	.word	0x0202f042
   2e21c:	68a8606a 	.word	0x68a8606a
   2e220:	3000f8a9 	.word	0x3000f8a9
   2e224:	fcbaf7ff 	.word	0xfcbaf7ff
   2e228:	b9284632 	.word	0xb9284632
   2e22c:	f023686b 	.word	0xf023686b
   2e230:	f04303ff 	.word	0xf04303ff
   2e234:	606b0303 	.word	0x606b0303
   2e238:	1000f8da 	.word	0x1000f8da
   2e23c:	428c3401 	.word	0x428c3401
   2e240:	2a00d3d7 	.word	0x2a00d3d7
   2e244:	b171d1cd 	.word	0xb171d1cd
   2e248:	eb0a4613 	.word	0xeb0a4613
   2e24c:	689002c3 	.word	0x689002c3
   2e250:	b1303301 	.word	0xb1303301
   2e254:	b004f8d2 	.word	0xb004f8d2
   2e258:	fb8bfa5f 	.word	0xfb8bfa5f
   2e25c:	0f01f1bb 	.word	0x0f01f1bb
   2e260:	428bd003 	.word	0x428bd003
   2e264:	f04fd1f1 	.word	0xf04fd1f1
   2e268:	f8d70b00 	.word	0xf8d70b00
   2e26c:	f8daa000 	.word	0xf8daa000
   2e270:	2a002000 	.word	0x2a002000
   2e274:	2100d03d 	.word	0x2100d03d
   2e278:	e002460c 	.word	0xe002460c
   2e27c:	42943401 	.word	0x42943401
   2e280:	eb0ad227 	.word	0xeb0ad227
   2e284:	68ab05c4 	.word	0x68ab05c4
   2e288:	d0f72b00 	.word	0xd0f72b00
   2e28c:	b2f6686e 	.word	0xb2f6686e
   2e290:	d1f32e01 	.word	0xd1f32e01
   2e294:	f8b96868 	.word	0xf8b96868
   2e298:	ebb33000 	.word	0xebb33000
   2e29c:	d1ed4f10 	.word	0xd1ed4f10
   2e2a0:	3301686a 	.word	0x3301686a
   2e2a4:	02fff022 	.word	0x02fff022
   2e2a8:	0202f042 	.word	0x0202f042
   2e2ac:	68a8606a 	.word	0x68a8606a
   2e2b0:	3000f8a9 	.word	0x3000f8a9
   2e2b4:	fc72f7ff 	.word	0xfc72f7ff
   2e2b8:	b9284631 	.word	0xb9284631
   2e2bc:	f022686a 	.word	0xf022686a
   2e2c0:	f04303ff 	.word	0xf04303ff
   2e2c4:	606b0303 	.word	0x606b0303
   2e2c8:	2000f8da 	.word	0x2000f8da
   2e2cc:	42943401 	.word	0x42943401
   2e2d0:	2900d3d7 	.word	0x2900d3d7
   2e2d4:	b162d1cd 	.word	0xb162d1cd
   2e2d8:	eb0a460b 	.word	0xeb0a460b
   2e2dc:	688801c3 	.word	0x688801c3
   2e2e0:	b1203301 	.word	0xb1203301
   2e2e4:	b2c96849 	.word	0xb2c96849
   2e2e8:	f43f2901 	.word	0xf43f2901
   2e2ec:	4293af76 	.word	0x4293af76
   2e2f0:	f1bbd1f3 	.word	0xf1bbd1f3
   2e2f4:	f47f0f00 	.word	0xf47f0f00
   2e2f8:	f44faf70 	.word	0xf44faf70
   2e2fc:	4b496180 	.word	0x4b496180
   2e300:	681b4a44 	.word	0x681b4a44
   2e304:	b2db015b 	.word	0xb2db015b
   2e308:	332af882 	.word	0x332af882
   2e30c:	1184f8c2 	.word	0x1184f8c2
   2e310:	b0076051 	.word	0xb0076051
   2e314:	8ff0e8bd 	.word	0x8ff0e8bd
   2e318:	4b432206 	.word	0x4b432206
   2e31c:	b007601a 	.word	0xb007601a
   2e320:	8ff0e8bd 	.word	0x8ff0e8bd
   2e324:	fd12f001 	.word	0xfd12f001
   2e328:	fe7ef001 	.word	0xfe7ef001
   2e32c:	d1492800 	.word	0xd1492800
   2e330:	f8c64b3e 	.word	0xf8c64b3e
   2e334:	681b011c 	.word	0x681b011c
   2e338:	9b019301 	.word	0x9b019301
   2e33c:	f8d34b36 	.word	0xf8d34b36
   2e340:	07d0230c 	.word	0x07d0230c
   2e344:	af2cf57f 	.word	0xaf2cf57f
   2e348:	f2482000 	.word	0xf2482000
   2e34c:	49380202 	.word	0x49380202
   2e350:	0100f8c3 	.word	0x0100f8c3
   2e354:	91026809 	.word	0x91026809
   2e358:	f8d39902 	.word	0xf8d39902
   2e35c:	42933614 	.word	0x42933614
   2e360:	d81ed040 	.word	0xd81ed040
   2e364:	d04f2b00 	.word	0xd04f2b00
   2e368:	d9422b02 	.word	0xd9422b02
   2e36c:	0201f248 	.word	0x0201f248
   2e370:	d1494293 	.word	0xd1494293
   2e374:	22072003 	.word	0x22072003
   2e378:	4b2e492b 	.word	0x4b2e492b
   2e37c:	601a6008 	.word	0x601a6008
   2e380:	4d29e7cd 	.word	0x4d29e7cd
   2e384:	f8c36829 	.word	0xf8c36829
   2e388:	29012108 	.word	0x29012108
   2e38c:	d05d492a 	.word	0xd05d492a
   2e390:	9203680a 	.word	0x9203680a
   2e394:	f8d39a03 	.word	0xf8d39a03
   2e398:	06db330c 	.word	0x06db330c
   2e39c:	af10f53f 	.word	0xaf10f53f
   2e3a0:	4a26e716 	.word	0x4a26e716
   2e3a4:	d8144293 	.word	0xd8144293
   2e3a8:	6f88f1b3 	.word	0x6f88f1b3
   2e3ac:	f248d814 	.word	0xf248d814
   2e3b0:	42930203 	.word	0x42930203
   2e3b4:	2003d128 	.word	0x2003d128
   2e3b8:	491b2204 	.word	0x491b2204
   2e3bc:	60084b1d 	.word	0x60084b1d
   2e3c0:	e7ac601a 	.word	0xe7ac601a
   2e3c4:	f88423e0 	.word	0xf88423e0
   2e3c8:	6065332a 	.word	0x6065332a
   2e3cc:	e8bdb007 	.word	0xe8bdb007
   2e3d0:	4a1b8ff0 	.word	0x4a1b8ff0
   2e3d4:	d1174293 	.word	0xd1174293
   2e3d8:	49132003 	.word	0x49132003
   2e3dc:	60084a15 	.word	0x60084a15
   2e3e0:	e79c6013 	.word	0xe79c6013
   2e3e4:	22062003 	.word	0x22062003
   2e3e8:	4b12490f 	.word	0x4b12490f
   2e3ec:	601a6008 	.word	0x601a6008
   2e3f0:	2303e795 	.word	0x2303e795
   2e3f4:	490c4618 	.word	0x490c4618
   2e3f8:	600b4a0e 	.word	0x600b4a0e
   2e3fc:	b0076013 	.word	0xb0076013
   2e400:	4ff0e8bd 	.word	0x4ff0e8bd
   2e404:	bbeef7ff 	.word	0xbbeef7ff
   2e408:	49072303 	.word	0x49072303
   2e40c:	600b4a09 	.word	0x600b4a09
   2e410:	e7846013 	.word	0xe7846013
   2e414:	e000e100 	.word	0xe000e100
   2e418:	4002a000 	.word	0x4002a000
   2e41c:	4002a110 	.word	0x4002a110
   2e420:	20024a94 	.word	0x20024a94
   2e424:	20024a8c 	.word	0x20024a8c
   2e428:	20024a90 	.word	0x20024a90
   2e42c:	4002a11c 	.word	0x4002a11c
   2e430:	4002a100 	.word	0x4002a100
   2e434:	20024a88 	.word	0x20024a88
   2e438:	4002a108 	.word	0x4002a108
   2e43c:	04400004 	.word	0x04400004
   2e440:	05500001 	.word	0x05500001
   2e444:	20024a98 	.word	0x20024a98
   2e448:	2002a432 	.word	0x2002a432
   2e44c:	680b4a37 	.word	0x680b4a37
   2e450:	93056812 	.word	0x93056812
   2e454:	48366893 	.word	0x48366893
   2e458:	60034936 	.word	0x60034936
   2e45c:	9a056854 	.word	0x9a056854
   2e460:	b16b600c 	.word	0xb16b600c
   2e464:	681bb164 	.word	0x681bb164
   2e468:	d8022b10 	.word	0xd8022b10
   2e46c:	2a106822 	.word	0x2a106822
   2e470:	2103d90c 	.word	0x2103d90c
   2e474:	0206f24c 	.word	0x0206f24c
   2e478:	60294b2f 	.word	0x60294b2f
   2e47c:	e74e601a 	.word	0xe74e601a
   2e480:	22102103 	.word	0x22102103
   2e484:	60294b2c 	.word	0x60294b2c
   2e488:	e748601a 	.word	0xe748601a
   2e48c:	80b4f8df 	.word	0x80b4f8df
   2e490:	d0422a00 	.word	0xd0422a00
   2e494:	f1042300 	.word	0xf1042300
   2e498:	461e0904 	.word	0x461e0904
   2e49c:	3601e002 	.word	0x3601e002
   2e4a0:	d22a4296 	.word	0xd22a4296
   2e4a4:	19e100f7 	.word	0x19e100f7
   2e4a8:	28006888 	.word	0x28006888
   2e4ac:	f8d1d0f7 	.word	0xf8d1d0f7
   2e4b0:	fa5fa004 	.word	0xfa5fa004
   2e4b4:	f1bafa8a 	.word	0xf1bafa8a
   2e4b8:	d1f00f01 	.word	0xd1f00f01
   2e4bc:	c004f8d1 	.word	0xc004f8d1
   2e4c0:	0000f8b8 	.word	0x0000f8b8
   2e4c4:	4f1cebb0 	.word	0x4f1cebb0
   2e4c8:	684bd1e9 	.word	0x684bd1e9
   2e4cc:	f0231c42 	.word	0xf0231c42
   2e4d0:	f04303ff 	.word	0xf04303ff
   2e4d4:	604b0302 	.word	0x604b0302
   2e4d8:	f8a86888 	.word	0xf8a86888
   2e4dc:	f7ff2000 	.word	0xf7ff2000
   2e4e0:	4653fb5d 	.word	0x4653fb5d
   2e4e4:	f859b938 	.word	0xf859b938
   2e4e8:	f0222007 	.word	0xf0222007
   2e4ec:	f04202ff 	.word	0xf04202ff
   2e4f0:	f8490203 	.word	0xf8490203
   2e4f4:	68222007 	.word	0x68222007
   2e4f8:	2b00e7d1 	.word	0x2b00e7d1
   2e4fc:	b912d1c8 	.word	0xb912d1c8
   2e500:	4293e00b 	.word	0x4293e00b
   2e504:	eb04d009 	.word	0xeb04d009
   2e508:	688801c3 	.word	0x688801c3
   2e50c:	28003301 	.word	0x28003301
   2e510:	6849d0f7 	.word	0x6849d0f7
   2e514:	2901b2c9 	.word	0x2901b2c9
   2e518:	2002d1f3 	.word	0x2002d1f3
   2e51c:	f44f4b07 	.word	0xf44f4b07
   2e520:	4a076180 	.word	0x4a076180
   2e524:	6028681b 	.word	0x6028681b
   2e528:	bf00e6ec 	.word	0xbf00e6ec
   2e52c:	20024a9c 	.word	0x20024a9c
   2e530:	20024a98 	.word	0x20024a98
   2e534:	20024a94 	.word	0x20024a94
   2e538:	20024a88 	.word	0x20024a88
   2e53c:	20024a8c 	.word	0x20024a8c
   2e540:	e000e100 	.word	0xe000e100
   2e544:	2002a432 	.word	0x2002a432

0002e548 <rpc_transport_msg_free>:
   2e548:	4b18b430 	.word	0x4b18b430
   2e54c:	6825681c 	.word	0x6825681c
   2e550:	68a3b16d 	.word	0x68a3b16d
   2e554:	d0274283 	.word	0xd0274283
   2e558:	e0022300 	.word	0xe0022300
   2e55c:	42816889 	.word	0x42816889
   2e560:	3301d019 	.word	0x3301d019
   2e564:	42ab00da 	.word	0x42ab00da
   2e568:	0102eb04 	.word	0x0102eb04
   2e56c:	4b10d1f6 	.word	0x4b10d1f6
   2e570:	6825681c 	.word	0x6825681c
   2e574:	68a3b16d 	.word	0x68a3b16d
   2e578:	d0154283 	.word	0xd0154283
   2e57c:	e0022300 	.word	0xe0022300
   2e580:	42816889 	.word	0x42816889
   2e584:	3301d007 	.word	0x3301d007
   2e588:	429d00da 	.word	0x429d00da
   2e58c:	0102eb04 	.word	0x0102eb04
   2e590:	bc30d1f6 	.word	0xbc30d1f6
   2e594:	32044770 	.word	0x32044770
   2e598:	f02358a3 	.word	0xf02358a3
   2e59c:	f04303ff 	.word	0xf04303ff
   2e5a0:	50a30303 	.word	0x50a30303
   2e5a4:	4770bc30 	.word	0x4770bc30
   2e5a8:	e7f52204 	.word	0xe7f52204
   2e5ac:	20024a98 	.word	0x20024a98
   2e5b0:	20024a94 	.word	0x20024a94

0002e5b4 <rpc_transport_ipc_rx_suspend>:
   2e5b4:	2400b410 	.word	0x2400b410
   2e5b8:	22042010 	.word	0x22042010
   2e5bc:	490b4b0a 	.word	0x490b4b0a
   2e5c0:	45a0f8c3 	.word	0x45a0f8c3
   2e5c4:	b083680c 	.word	0xb083680c
   2e5c8:	9c019401 	.word	0x9c019401
   2e5cc:	7126f5a1 	.word	0x7126f5a1
   2e5d0:	0308f8c3 	.word	0x0308f8c3
   2e5d4:	4b066809 	.word	0x4b066809
   2e5d8:	99009100 	.word	0x99009100
   2e5dc:	b003601a 	.word	0xb003601a
   2e5e0:	4b04f85d 	.word	0x4b04f85d
   2e5e4:	bf004770 	.word	0xbf004770
   2e5e8:	4002a000 	.word	0x4002a000
   2e5ec:	4002a5a0 	.word	0x4002a5a0
   2e5f0:	20024a90 	.word	0x20024a90

0002e5f4 <rpc_transport_ipc_rx_shutdown>:
   2e5f4:	4a32b4f0 	.word	0x4a32b4f0
   2e5f8:	6813b08c 	.word	0x6813b08c
   2e5fc:	d1fc2b06 	.word	0xd1fc2b06
   2e600:	22012000 	.word	0x22012000
   2e604:	4b2f210a 	.word	0x4b2f210a
   2e608:	f8c39000 	.word	0xf8c39000
   2e60c:	f8d32610 	.word	0xf8d32610
   2e610:	90000610 	.word	0x90000610
   2e614:	f8c39800 	.word	0xf8c39800
   2e618:	91012614 	.word	0x91012614
   2e61c:	b12b9b01 	.word	0xb12b9b01
   2e620:	3b019b01 	.word	0x3b019b01
   2e624:	9b019301 	.word	0x9b019301
   2e628:	d1f92b00 	.word	0xd1f92b00
   2e62c:	26012200 	.word	0x26012200
   2e630:	24102504 	.word	0x24102504
   2e634:	4b244923 	.word	0x4b244923
   2e638:	2614f8c1 	.word	0x2614f8c1
   2e63c:	3115f501 	.word	0x3115f501
   2e640:	2590f8c3 	.word	0x2590f8c3
   2e644:	71c8f501 	.word	0x71c8f501
   2e648:	20406809 	.word	0x20406809
   2e64c:	491f9102 	.word	0x491f9102
   2e650:	f8c39f02 	.word	0xf8c39f02
   2e654:	680f2598 	.word	0x680f2598
   2e658:	97032180 	.word	0x97032180
   2e65c:	f8dd4f1c 	.word	0xf8dd4f1c
   2e660:	f8c3c00c 	.word	0xf8c3c00c
   2e664:	683f25a0 	.word	0x683f25a0
   2e668:	4f1a9704 	.word	0x4f1a9704
   2e66c:	c010f8dd 	.word	0xc010f8dd
   2e670:	25a8f8c3 	.word	0x25a8f8c3
   2e674:	9705683f 	.word	0x9705683f
   2e678:	f8c39f05 	.word	0xf8c39f05
   2e67c:	4a1625ac 	.word	0x4a1625ac
   2e680:	92066812 	.word	0x92066812
   2e684:	9f064a15 	.word	0x9f064a15
   2e688:	6308f8c3 	.word	0x6308f8c3
   2e68c:	96076816 	.word	0x96076816
   2e690:	f8c39e07 	.word	0xf8c39e07
   2e694:	68155308 	.word	0x68155308
   2e698:	9d089508 	.word	0x9d089508
   2e69c:	4308f8c3 	.word	0x4308f8c3
   2e6a0:	94096814 	.word	0x94096814
   2e6a4:	f8c39c09 	.word	0xf8c39c09
   2e6a8:	68100308 	.word	0x68100308
   2e6ac:	980a900a 	.word	0x980a900a
   2e6b0:	1308f8c3 	.word	0x1308f8c3
   2e6b4:	930b6813 	.word	0x930b6813
   2e6b8:	b00c9b0b 	.word	0xb00c9b0b
   2e6bc:	4770bcf0 	.word	0x4770bcf0
   2e6c0:	20024a90 	.word	0x20024a90
   2e6c4:	40005000 	.word	0x40005000
   2e6c8:	4002a000 	.word	0x4002a000
   2e6cc:	4002a598 	.word	0x4002a598
   2e6d0:	4002a5a0 	.word	0x4002a5a0
   2e6d4:	4002a5a8 	.word	0x4002a5a8
   2e6d8:	4002a5ac 	.word	0x4002a5ac
   2e6dc:	4002a308 	.word	0x4002a308

0002e6e0 <block_cipher_df>:
   2e6e0:	4ff0e92d 	.word	0x4ff0e92d
   2e6e4:	7fc0f5b2 	.word	0x7fc0f5b2
   2e6e8:	7d49f5ad 	.word	0x7d49f5ad
   2e6ec:	8119f200 	.word	0x8119f200
   2e6f0:	460c4692 	.word	0x460c4692
   2e6f4:	72d0f44f 	.word	0x72d0f44f
   2e6f8:	46812100 	.word	0x46812100
   2e6fc:	f011a860 	.word	0xf011a860
   2e700:	a81afb25 	.word	0xa81afb25
   2e704:	fd5af00a 	.word	0xfd5af00a
   2e708:	23302000 	.word	0x23302000
   2e70c:	ea4fad66 	.word	0xea4fad66
   2e710:	f8ad221a 	.word	0xf8ad221a
   2e714:	f88d0190 	.word	0xf88d0190
   2e718:	46212192 	.word	0x46212192
   2e71c:	46284652 	.word	0x46284652
   2e720:	3197f88d 	.word	0x3197f88d
   2e724:	a193f88d 	.word	0xa193f88d
   2e728:	f7ebae06 	.word	0xf7ebae06
   2e72c:	2280fbc1 	.word	0x2280fbc1
   2e730:	f8054633 	.word	0xf8054633
   2e734:	af0e200a 	.word	0xaf0e200a
   2e738:	f8031b99 	.word	0xf8031b99
   2e73c:	429f1b01 	.word	0x429f1b01
   2e740:	f44fd1fa 	.word	0xf44fd1fa
   2e744:	46317280 	.word	0x46317280
   2e748:	f00aa81a 	.word	0xf00aa81a
   2e74c:	4683fd43 	.word	0x4683fd43
   2e750:	f0402800 	.word	0xf0402800
   2e754:	900180c8 	.word	0x900180c8
   2e758:	0a19f10a 	.word	0x0a19f10a
   2e75c:	2210ac02 	.word	0x2210ac02
   2e760:	46202100 	.word	0x46202100
   2e764:	faf2f011 	.word	0xfaf2f011
   2e768:	ad6446d0 	.word	0xad6446d0
   2e76c:	f8157822 	.word	0xf8157822
   2e770:	f8943c10 	.word	0xf8943c10
   2e774:	f815c001 	.word	0xf815c001
   2e778:	78a01c0f 	.word	0x78a01c0f
   2e77c:	f8154053 	.word	0xf8154053
   2e780:	ea8c2c0e 	.word	0xea8c2c0e
   2e784:	40500c01 	.word	0x40500c01
   2e788:	f81578e1 	.word	0xf81578e1
   2e78c:	f8942c0d 	.word	0xf8942c0d
   2e790:	4051e004 	.word	0x4051e004
   2e794:	2c0cf815 	.word	0x2c0cf815
   2e798:	ea8e7023 	.word	0xea8e7023
   2e79c:	f8150202 	.word	0xf8150202
   2e7a0:	f8943c0b 	.word	0xf8943c0b
   2e7a4:	f884e005 	.word	0xf884e005
   2e7a8:	ea8ec001 	.word	0xea8ec001
   2e7ac:	f8150303 	.word	0xf8150303
   2e7b0:	f894cc0a 	.word	0xf894cc0a
   2e7b4:	70a0e006 	.word	0x70a0e006
   2e7b8:	0c0cea8e 	.word	0x0c0cea8e
   2e7bc:	0c09f815 	.word	0x0c09f815
   2e7c0:	e007f894 	.word	0xe007f894
   2e7c4:	ea8e70e1 	.word	0xea8e70e1
   2e7c8:	f8150000 	.word	0xf8150000
   2e7cc:	f8941c08 	.word	0xf8941c08
   2e7d0:	7122e008 	.word	0x7122e008
   2e7d4:	0101ea8e 	.word	0x0101ea8e
   2e7d8:	2c07f815 	.word	0x2c07f815
   2e7dc:	e009f894 	.word	0xe009f894
   2e7e0:	ea8e7163 	.word	0xea8e7163
   2e7e4:	7aa30202 	.word	0x7aa30202
   2e7e8:	ec06f815 	.word	0xec06f815
   2e7ec:	c006f884 	.word	0xc006f884
   2e7f0:	030eea83 	.word	0x030eea83
   2e7f4:	722171e0 	.word	0x722171e0
   2e7f8:	72a37262 	.word	0x72a37262
   2e7fc:	f8157ae1 	.word	0xf8157ae1
   2e800:	f8943c05 	.word	0xf8943c05
   2e804:	7b60c00c 	.word	0x7b60c00c
   2e808:	f815404b 	.word	0xf815404b
   2e80c:	f8152c04 	.word	0xf8152c04
   2e810:	ea8c1c03 	.word	0xea8c1c03
   2e814:	40410202 	.word	0x40410202
   2e818:	c00ef894 	.word	0xc00ef894
   2e81c:	0c02f815 	.word	0x0c02f815
   2e820:	e00ff894 	.word	0xe00ff894
   2e824:	0000ea8c 	.word	0x0000ea8c
   2e828:	cc01f815 	.word	0xcc01f815
   2e82c:	ea8e72e3 	.word	0xea8e72e3
   2e830:	73220c0c 	.word	0x73220c0c
   2e834:	73a07361 	.word	0x73a07361
   2e838:	46224623 	.word	0x46224623
   2e83c:	a81a2101 	.word	0xa81a2101
   2e840:	c00ff884 	.word	0xc00ff884
   2e844:	fc44f00b 	.word	0xfc44f00b
   2e848:	0f10f1b8 	.word	0x0f10f1b8
   2e84c:	bf944683 	.word	0xbf944683
   2e850:	0808eba8 	.word	0x0808eba8
   2e854:	0810f1a8 	.word	0x0810f1a8
   2e858:	d1452800 	.word	0xd1452800
   2e85c:	f1b83510 	.word	0xf1b83510
   2e860:	d1830f00 	.word	0xd1830f00
   2e864:	22109d01 	.word	0x22109d01
   2e868:	19784621 	.word	0x19784621
   2e86c:	fb20f7eb 	.word	0xfb20f7eb
   2e870:	3183f89d 	.word	0x3183f89d
   2e874:	0210f105 	.word	0x0210f105
   2e878:	2a303301 	.word	0x2a303301
   2e87c:	f88d9201 	.word	0xf88d9201
   2e880:	f47f3183 	.word	0xf47f3183
   2e884:	f44faf6c 	.word	0xf44faf6c
   2e888:	46397280 	.word	0x46397280
   2e88c:	f00aa81a 	.word	0xf00aa81a
   2e890:	4683fca1 	.word	0x4683fca1
   2e894:	464dbb40 	.word	0x464dbb40
   2e898:	0830f109 	.word	0x0830f109
   2e89c:	461aab16 	.word	0x461aab16
   2e8a0:	a81a2101 	.word	0xa81a2101
   2e8a4:	fc14f00b 	.word	0xfc14f00b
   2e8a8:	b9e84683 	.word	0xb9e84683
   2e8ac:	46282210 	.word	0x46282210
   2e8b0:	4415a916 	.word	0x4415a916
   2e8b4:	fafcf7eb 	.word	0xfafcf7eb
   2e8b8:	d1ef4545 	.word	0xd1ef4545
   2e8bc:	f00aa81a 	.word	0xf00aa81a
   2e8c0:	a860fc83 	.word	0xa860fc83
   2e8c4:	71d0f44f 	.word	0x71d0f44f
   2e8c8:	fcbaf006 	.word	0xfcbaf006
   2e8cc:	21304638 	.word	0x21304638
   2e8d0:	fcb6f006 	.word	0xfcb6f006
   2e8d4:	21204630 	.word	0x21204630
   2e8d8:	fcb2f006 	.word	0xfcb2f006
   2e8dc:	21104620 	.word	0x21104620
   2e8e0:	fcaef006 	.word	0xfcaef006
   2e8e4:	ac02e018 	.word	0xac02e018
   2e8e8:	f00aa81a 	.word	0xf00aa81a
   2e8ec:	a860fc6d 	.word	0xa860fc6d
   2e8f0:	71d0f44f 	.word	0x71d0f44f
   2e8f4:	fca4f006 	.word	0xfca4f006
   2e8f8:	21304638 	.word	0x21304638
   2e8fc:	fca0f006 	.word	0xfca0f006
   2e900:	21204630 	.word	0x21204630
   2e904:	fc9cf006 	.word	0xfc9cf006
   2e908:	21104620 	.word	0x21104620
   2e90c:	fc98f006 	.word	0xfc98f006
   2e910:	21304648 	.word	0x21304648
   2e914:	fc94f006 	.word	0xfc94f006
   2e918:	f50d4658 	.word	0xf50d4658
   2e91c:	e8bd7d49 	.word	0xe8bd7d49
   2e920:	f06f8ff0 	.word	0xf06f8ff0
   2e924:	e7f70b37 	.word	0xe7f70b37

0002e928 <symbol_000078b>:
   2e928:	72a0f44f 	.word	0x72a0f44f
   2e92c:	f0112100 	.word	0xf0112100
   2e930:	bf00ba0d 	.word	0xbf00ba0d

0002e934 <symbol_0001c64>:
   2e934:	b510b158 	.word	0xb510b158
   2e938:	30204604 	.word	0x30204604
   2e93c:	fc44f00a 	.word	0xfc44f00a
   2e940:	e8bd4620 	.word	0xe8bd4620
   2e944:	f44f4010 	.word	0xf44f4010
   2e948:	f00671a0 	.word	0xf00671a0
   2e94c:	4770bc79 	.word	0x4770bc79

0002e950 <symbol_000ccf0>:
   2e950:	6983b5f0 	.word	0x6983b5f0
   2e954:	f5b3b0ed 	.word	0xf5b3b0ed
   2e958:	f2007fc0 	.word	0xf2007fc0
   2e95c:	f5c380e1 	.word	0xf5c380e1
   2e960:	429373c0 	.word	0x429373c0
   2e964:	80dcf0c0 	.word	0x80dcf0c0
   2e968:	46154604 	.word	0x46154604
   2e96c:	f44f460e 	.word	0xf44f460e
   2e970:	210072c0 	.word	0x210072c0
   2e974:	f011a80c 	.word	0xf011a80c
   2e978:	a90cf9e9 	.word	0xa90cf9e9
   2e97c:	3138f8d4 	.word	0x3138f8d4
   2e980:	f8d469a2 	.word	0xf8d469a2
   2e984:	4798013c 	.word	0x4798013c
   2e988:	f0402800 	.word	0xf0402800
   2e98c:	69a780cc 	.word	0x69a780cc
   2e990:	b94db106 	.word	0xb94db106
   2e994:	463aa90c 	.word	0x463aa90c
   2e998:	f7ff4608 	.word	0xf7ff4608
   2e99c:	4605fea1 	.word	0x4605fea1
   2e9a0:	4628b188 	.word	0x4628b188
   2e9a4:	bdf0b06d 	.word	0xbdf0b06d
   2e9a8:	462aab0c 	.word	0x462aab0c
   2e9ac:	463119d8 	.word	0x463119d8
   2e9b0:	fa7ef7eb 	.word	0xfa7ef7eb
   2e9b4:	a90c442f 	.word	0xa90c442f
   2e9b8:	4608463a 	.word	0x4608463a
   2e9bc:	fe90f7ff 	.word	0xfe90f7ff
   2e9c0:	28004605 	.word	0x28004605
   2e9c4:	4668d1ed 	.word	0x4668d1ed
   2e9c8:	46292230 	.word	0x46292230
   2e9cc:	f9bef011 	.word	0xf9bef011
   2e9d0:	f104462e 	.word	0xf104462e
   2e9d4:	7be20720 	.word	0x7be20720
   2e9d8:	0306eb0d 	.word	0x0306eb0d
   2e9dc:	b2d23201 	.word	0xb2d23201
   2e9e0:	2a0073e2 	.word	0x2a0073e2
   2e9e4:	7ba2d14d 	.word	0x7ba2d14d
   2e9e8:	b2d23201 	.word	0xb2d23201
   2e9ec:	2a0073a2 	.word	0x2a0073a2
   2e9f0:	7b62d147 	.word	0x7b62d147
   2e9f4:	b2d23201 	.word	0xb2d23201
   2e9f8:	2a007362 	.word	0x2a007362
   2e9fc:	7b22d141 	.word	0x7b22d141
   2ea00:	b2d23201 	.word	0xb2d23201
   2ea04:	2a007322 	.word	0x2a007322
   2ea08:	7ae2d13b 	.word	0x7ae2d13b
   2ea0c:	b2d23201 	.word	0xb2d23201
   2ea10:	2a0072e2 	.word	0x2a0072e2
   2ea14:	7aa2d135 	.word	0x7aa2d135
   2ea18:	b2d23201 	.word	0xb2d23201
   2ea1c:	2a0072a2 	.word	0x2a0072a2
   2ea20:	7a62d12f 	.word	0x7a62d12f
   2ea24:	b2d23201 	.word	0xb2d23201
   2ea28:	bb527262 	.word	0xbb527262
   2ea2c:	32017a22 	.word	0x32017a22
   2ea30:	7222b2d2 	.word	0x7222b2d2
   2ea34:	79e2bb2a 	.word	0x79e2bb2a
   2ea38:	b2d23201 	.word	0xb2d23201
   2ea3c:	bb0271e2 	.word	0xbb0271e2
   2ea40:	320179a2 	.word	0x320179a2
   2ea44:	71a2b2d2 	.word	0x71a2b2d2
   2ea48:	7962b9da 	.word	0x7962b9da
   2ea4c:	b2d23201 	.word	0xb2d23201
   2ea50:	b9b27162 	.word	0xb9b27162
   2ea54:	32017922 	.word	0x32017922
   2ea58:	7122b2d2 	.word	0x7122b2d2
   2ea5c:	78e2b98a 	.word	0x78e2b98a
   2ea60:	b2d23201 	.word	0xb2d23201
   2ea64:	b96270e2 	.word	0xb96270e2
   2ea68:	320178a2 	.word	0x320178a2
   2ea6c:	70a2b2d2 	.word	0x70a2b2d2
   2ea70:	7862b93a 	.word	0x7862b93a
   2ea74:	b2d23201 	.word	0xb2d23201
   2ea78:	b9127062 	.word	0xb9127062
   2ea7c:	32017822 	.word	0x32017822
   2ea80:	46227022 	.word	0x46227022
   2ea84:	46382101 	.word	0x46382101
   2ea88:	fb22f00b 	.word	0xfb22f00b
   2ea8c:	28004605 	.word	0x28004605
   2ea90:	3610d187 	.word	0x3610d187
   2ea94:	d19e2e30 	.word	0xd19e2e30
   2ea98:	9b0c9901 	.word	0x9b0c9901
   2ea9c:	9a0d9800 	.word	0x9a0d9800
   2eaa0:	404a4058 	.word	0x404a4058
   2eaa4:	99029b0e 	.word	0x99029b0e
   2eaa8:	40599000 	.word	0x40599000
   2eaac:	9b0f9803 	.word	0x9b0f9803
   2eab0:	40439201 	.word	0x40439201
   2eab4:	98049a10 	.word	0x98049a10
   2eab8:	40509102 	.word	0x40509102
   2eabc:	9a119905 	.word	0x9a119905
   2eac0:	40519303 	.word	0x40519303
   2eac4:	9a069b12 	.word	0x9a069b12
   2eac8:	405a9004 	.word	0x405a9004
   2eacc:	9b139807 	.word	0x9b139807
   2ead0:	40589105 	.word	0x40589105
   2ead4:	9b149908 	.word	0x9b149908
   2ead8:	40599206 	.word	0x40599206
   2eadc:	9b159a09 	.word	0x9b159a09
   2eae0:	405a9007 	.word	0x405a9007
   2eae4:	9b16980a 	.word	0x9b16980a
   2eae8:	40439108 	.word	0x40439108
   2eaec:	2309e9cd 	.word	0x2309e9cd
   2eaf0:	9b179a0b 	.word	0x9b179a0b
   2eaf4:	40534638 	.word	0x40534638
   2eaf8:	f44f4669 	.word	0xf44f4669
   2eafc:	930b7280 	.word	0x930b7280
   2eb00:	fb68f00a 	.word	0xfb68f00a
   2eb04:	28004605 	.word	0x28004605
   2eb08:	af4bf47f 	.word	0xaf4bf47f
   2eb0c:	a9082210 	.word	0xa9082210
   2eb10:	f7eb4620 	.word	0xf7eb4620
   2eb14:	2301f9cd 	.word	0x2301f9cd
   2eb18:	61234628 	.word	0x61234628
   2eb1c:	bdf0b06d 	.word	0xbdf0b06d
   2eb20:	0537f06f 	.word	0x0537f06f
   2eb24:	f06fe73d 	.word	0xf06fe73d
   2eb28:	e73a0533 	.word	0xe73a0533

0002eb2c <symbol_0001e1e>:
   2eb2c:	41f0e92d 	.word	0x41f0e92d
   2eb30:	46164604 	.word	0x46164604
   2eb34:	b0882220 	.word	0xb0882220
   2eb38:	460f18a5 	.word	0x460f18a5
   2eb3c:	21004668 	.word	0x21004668
   2eb40:	f0114698 	.word	0xf0114698
   2eb44:	4628f903 	.word	0x4628f903
   2eb48:	fb38f00a 	.word	0xfb38f00a
   2eb4c:	f2422220 	.word	0xf2422220
   2eb50:	f8c47310 	.word	0xf8c47310
   2eb54:	e9c47138 	.word	0xe9c47138
   2eb58:	46282306 	.word	0x46282306
   2eb5c:	613cf8c4 	.word	0x613cf8c4
   2eb60:	f44f4669 	.word	0xf44f4669
   2eb64:	f00a7280 	.word	0xf00a7280
   2eb68:	b920fb35 	.word	0xb920fb35
   2eb6c:	46204641 	.word	0x46204641
   2eb70:	f7ff9a0e 	.word	0xf7ff9a0e
   2eb74:	b008feed 	.word	0xb008feed
   2eb78:	81f0e8bd 	.word	0x81f0e8bd

0002eb7c <symbol_000268c>:
   2eb7c:	4ff0e92d 	.word	0x4ff0e92d
   2eb80:	6f80f5b2 	.word	0x6f80f5b2
   2eb84:	f200b0f9 	.word	0xf200b0f9
   2eb88:	46048226 	.word	0x46048226
   2eb8c:	460f4615 	.word	0x460f4615
   2eb90:	46682230 	.word	0x46682230
   2eb94:	f0112100 	.word	0xf0112100
   2eb98:	6922f8d9 	.word	0x6922f8d9
   2eb9c:	429a69e3 	.word	0x429a69e3
   2eba0:	6963dc01 	.word	0x6963dc01
   2eba4:	69a3b313 	.word	0x69a3b313
   2eba8:	7fc0f5b3 	.word	0x7fc0f5b3
   2ebac:	8216f200 	.word	0x8216f200
   2ebb0:	0a60f10d 	.word	0x0a60f10d
   2ebb4:	72c0f44f 	.word	0x72c0f44f
   2ebb8:	46502100 	.word	0x46502100
   2ebbc:	f8c6f011 	.word	0xf8c6f011
   2ebc0:	f8d44651 	.word	0xf8d44651
   2ebc4:	69a23138 	.word	0x69a23138
   2ebc8:	013cf8d4 	.word	0x013cf8d4
   2ebcc:	f06f4798 	.word	0xf06f4798
   2ebd0:	b9380933 	.word	0xb9380933
   2ebd4:	465169a2 	.word	0x465169a2
   2ebd8:	f7ff4650 	.word	0xf7ff4650
   2ebdc:	4681fd81 	.word	0x4681fd81
   2ebe0:	d0772800 	.word	0xd0772800
   2ebe4:	b0794648 	.word	0xb0794648
   2ebe8:	8ff0e8bd 	.word	0x8ff0e8bd
   2ebec:	0820f104 	.word	0x0820f104
   2ebf0:	f0002d00 	.word	0xf0002d00
   2ebf4:	ae0c812b 	.word	0xae0c812b
   2ebf8:	2d10e00e 	.word	0x2d10e00e
   2ebfc:	bf2846a9 	.word	0xbf2846a9
   2ec00:	0910f04f 	.word	0x0910f04f
   2ec04:	46314638 	.word	0x46314638
   2ec08:	f7eb464a 	.word	0xf7eb464a
   2ec0c:	ebb5f951 	.word	0xebb5f951
   2ec10:	444f0509 	.word	0x444f0509
   2ec14:	811af000 	.word	0x811af000
   2ec18:	33017be3 	.word	0x33017be3
   2ec1c:	73e3b2db 	.word	0x73e3b2db
   2ec20:	d14d2b00 	.word	0xd14d2b00
   2ec24:	33017ba3 	.word	0x33017ba3
   2ec28:	73a3b2db 	.word	0x73a3b2db
   2ec2c:	d1472b00 	.word	0xd1472b00
   2ec30:	33017b63 	.word	0x33017b63
   2ec34:	7363b2db 	.word	0x7363b2db
   2ec38:	d1412b00 	.word	0xd1412b00
   2ec3c:	33017b23 	.word	0x33017b23
   2ec40:	7323b2db 	.word	0x7323b2db
   2ec44:	d13b2b00 	.word	0xd13b2b00
   2ec48:	33017ae3 	.word	0x33017ae3
   2ec4c:	72e3b2db 	.word	0x72e3b2db
   2ec50:	d1352b00 	.word	0xd1352b00
   2ec54:	33017aa3 	.word	0x33017aa3
   2ec58:	72a3b2db 	.word	0x72a3b2db
   2ec5c:	d12f2b00 	.word	0xd12f2b00
   2ec60:	33017a63 	.word	0x33017a63
   2ec64:	7263b2db 	.word	0x7263b2db
   2ec68:	7a23bb53 	.word	0x7a23bb53
   2ec6c:	b2db3301 	.word	0xb2db3301
   2ec70:	bb2b7223 	.word	0xbb2b7223
   2ec74:	330179e3 	.word	0x330179e3
   2ec78:	71e3b2db 	.word	0x71e3b2db
   2ec7c:	79a3bb03 	.word	0x79a3bb03
   2ec80:	b2db3301 	.word	0xb2db3301
   2ec84:	b9db71a3 	.word	0xb9db71a3
   2ec88:	33017963 	.word	0x33017963
   2ec8c:	7163b2db 	.word	0x7163b2db
   2ec90:	7923b9b3 	.word	0x7923b9b3
   2ec94:	b2db3301 	.word	0xb2db3301
   2ec98:	b98b7123 	.word	0xb98b7123
   2ec9c:	330178e3 	.word	0x330178e3
   2eca0:	70e3b2db 	.word	0x70e3b2db
   2eca4:	78a3b963 	.word	0x78a3b963
   2eca8:	b2db3301 	.word	0xb2db3301
   2ecac:	b93b70a3 	.word	0xb93b70a3
   2ecb0:	33017863 	.word	0x33017863
   2ecb4:	7063b2db 	.word	0x7063b2db
   2ecb8:	7823b913 	.word	0x7823b913
   2ecbc:	70233301 	.word	0x70233301
   2ecc0:	46224633 	.word	0x46224633
   2ecc4:	46402101 	.word	0x46402101
   2ecc8:	fa02f00b 	.word	0xfa02f00b
   2eccc:	28004681 	.word	0x28004681
   2ecd0:	e787d093 	.word	0xe787d093
   2ecd4:	4630ae0c 	.word	0x4630ae0c
   2ecd8:	46492230 	.word	0x46492230
   2ecdc:	f836f011 	.word	0xf836f011
   2ece0:	f10446cb 	.word	0xf10446cb
   2ece4:	7be20820 	.word	0x7be20820
   2ece8:	030beb06 	.word	0x030beb06
   2ecec:	b2d23201 	.word	0xb2d23201
   2ecf0:	2a0073e2 	.word	0x2a0073e2
   2ecf4:	7ba2d14d 	.word	0x7ba2d14d
   2ecf8:	b2d23201 	.word	0xb2d23201
   2ecfc:	2a0073a2 	.word	0x2a0073a2
   2ed00:	7b62d147 	.word	0x7b62d147
   2ed04:	b2d23201 	.word	0xb2d23201
   2ed08:	2a007362 	.word	0x2a007362
   2ed0c:	7b22d141 	.word	0x7b22d141
   2ed10:	b2d23201 	.word	0xb2d23201
   2ed14:	2a007322 	.word	0x2a007322
   2ed18:	7ae2d13b 	.word	0x7ae2d13b
   2ed1c:	b2d23201 	.word	0xb2d23201
   2ed20:	2a0072e2 	.word	0x2a0072e2
   2ed24:	7aa2d135 	.word	0x7aa2d135
   2ed28:	b2d23201 	.word	0xb2d23201
   2ed2c:	2a0072a2 	.word	0x2a0072a2
   2ed30:	7a62d12f 	.word	0x7a62d12f
   2ed34:	b2d23201 	.word	0xb2d23201
   2ed38:	bb527262 	.word	0xbb527262
   2ed3c:	32017a22 	.word	0x32017a22
   2ed40:	7222b2d2 	.word	0x7222b2d2
   2ed44:	79e2bb2a 	.word	0x79e2bb2a
   2ed48:	b2d23201 	.word	0xb2d23201
   2ed4c:	bb0271e2 	.word	0xbb0271e2
   2ed50:	320179a2 	.word	0x320179a2
   2ed54:	71a2b2d2 	.word	0x71a2b2d2
   2ed58:	7962b9da 	.word	0x7962b9da
   2ed5c:	b2d23201 	.word	0xb2d23201
   2ed60:	b9b27162 	.word	0xb9b27162
   2ed64:	32017922 	.word	0x32017922
   2ed68:	7122b2d2 	.word	0x7122b2d2
   2ed6c:	78e2b98a 	.word	0x78e2b98a
   2ed70:	b2d23201 	.word	0xb2d23201
   2ed74:	b96270e2 	.word	0xb96270e2
   2ed78:	320178a2 	.word	0x320178a2
   2ed7c:	70a2b2d2 	.word	0x70a2b2d2
   2ed80:	7862b93a 	.word	0x7862b93a
   2ed84:	b2d23201 	.word	0xb2d23201
   2ed88:	b9127062 	.word	0xb9127062
   2ed8c:	32017822 	.word	0x32017822
   2ed90:	46227022 	.word	0x46227022
   2ed94:	46402101 	.word	0x46402101
   2ed98:	f99af00b 	.word	0xf99af00b
   2ed9c:	28004681 	.word	0x28004681
   2eda0:	af20f47f 	.word	0xaf20f47f
   2eda4:	0b10f10b 	.word	0x0b10f10b
   2eda8:	0f30f1bb 	.word	0x0f30f1bb
   2edac:	6870d19b 	.word	0x6870d19b
   2edb0:	3000f8da 	.word	0x3000f8da
   2edb4:	f8da6831 	.word	0xf8da6831
   2edb8:	40592004 	.word	0x40592004
   2edbc:	f8da4042 	.word	0xf8da4042
   2edc0:	68b03008 	.word	0x68b03008
   2edc4:	ea836031 	.word	0xea836031
   2edc8:	f8da0100 	.word	0xf8da0100
   2edcc:	68f0300c 	.word	0x68f0300c
   2edd0:	40586072 	.word	0x40586072
   2edd4:	f8da6932 	.word	0xf8da6932
   2edd8:	60b13010 	.word	0x60b13010
   2eddc:	f8da4053 	.word	0xf8da4053
   2ede0:	69721014 	.word	0x69721014
   2ede4:	404a60f0 	.word	0x404a60f0
   2ede8:	f8da69b0 	.word	0xf8da69b0
   2edec:	61331018 	.word	0x61331018
   2edf0:	f8da4048 	.word	0xf8da4048
   2edf4:	69f1301c 	.word	0x69f1301c
   2edf8:	404b6172 	.word	0x404b6172
   2edfc:	f8da6a32 	.word	0xf8da6a32
   2ee00:	61b01020 	.word	0x61b01020
   2ee04:	6a704051 	.word	0x6a704051
   2ee08:	2024f8da 	.word	0x2024f8da
   2ee0c:	405061f3 	.word	0x405061f3
   2ee10:	3028f8da 	.word	0x3028f8da
   2ee14:	62316ab2 	.word	0x62316ab2
   2ee18:	e9c64053 	.word	0xe9c64053
   2ee1c:	6af20309 	.word	0x6af20309
   2ee20:	302cf8da 	.word	0x302cf8da
   2ee24:	40534631 	.word	0x40534631
   2ee28:	f44f4640 	.word	0xf44f4640
   2ee2c:	62f37280 	.word	0x62f37280
   2ee30:	f9d0f00a 	.word	0xf9d0f00a
   2ee34:	28004681 	.word	0x28004681
   2ee38:	aed4f47f 	.word	0xaed4f47f
   2ee3c:	a9142210 	.word	0xa9142210
   2ee40:	f7eb4620 	.word	0xf7eb4620
   2ee44:	2301f835 	.word	0x2301f835
   2ee48:	e6d16123 	.word	0xe6d16123
   2ee4c:	0a60f10d 	.word	0x0a60f10d
   2ee50:	22304650 	.word	0x22304650
   2ee54:	f0102100 	.word	0xf0102100
   2ee58:	2500ff79 	.word	0x2500ff79
   2ee5c:	eb0a7be2 	.word	0xeb0a7be2
   2ee60:	32010305 	.word	0x32010305
   2ee64:	73e2b2d2 	.word	0x73e2b2d2
   2ee68:	d14d2a00 	.word	0xd14d2a00
   2ee6c:	32017ba2 	.word	0x32017ba2
   2ee70:	73a2b2d2 	.word	0x73a2b2d2
   2ee74:	d1472a00 	.word	0xd1472a00
   2ee78:	32017b62 	.word	0x32017b62
   2ee7c:	7362b2d2 	.word	0x7362b2d2
   2ee80:	d1412a00 	.word	0xd1412a00
   2ee84:	32017b22 	.word	0x32017b22
   2ee88:	7322b2d2 	.word	0x7322b2d2
   2ee8c:	d13b2a00 	.word	0xd13b2a00
   2ee90:	32017ae2 	.word	0x32017ae2
   2ee94:	72e2b2d2 	.word	0x72e2b2d2
   2ee98:	d1352a00 	.word	0xd1352a00
   2ee9c:	32017aa2 	.word	0x32017aa2
   2eea0:	72a2b2d2 	.word	0x72a2b2d2
   2eea4:	d12f2a00 	.word	0xd12f2a00
   2eea8:	32017a62 	.word	0x32017a62
   2eeac:	7262b2d2 	.word	0x7262b2d2
   2eeb0:	7a22bb52 	.word	0x7a22bb52
   2eeb4:	b2d23201 	.word	0xb2d23201
   2eeb8:	bb2a7222 	.word	0xbb2a7222
   2eebc:	320179e2 	.word	0x320179e2
   2eec0:	71e2b2d2 	.word	0x71e2b2d2
   2eec4:	79a2bb02 	.word	0x79a2bb02
   2eec8:	b2d23201 	.word	0xb2d23201
   2eecc:	b9da71a2 	.word	0xb9da71a2
   2eed0:	32017962 	.word	0x32017962
   2eed4:	7162b2d2 	.word	0x7162b2d2
   2eed8:	7922b9b2 	.word	0x7922b9b2
   2eedc:	b2d23201 	.word	0xb2d23201
   2eee0:	b98a7122 	.word	0xb98a7122
   2eee4:	320178e2 	.word	0x320178e2
   2eee8:	70e2b2d2 	.word	0x70e2b2d2
   2eeec:	78a2b962 	.word	0x78a2b962
   2eef0:	b2d23201 	.word	0xb2d23201
   2eef4:	b93a70a2 	.word	0xb93a70a2
   2eef8:	32017862 	.word	0x32017862
   2eefc:	7062b2d2 	.word	0x7062b2d2
   2ef00:	7822b912 	.word	0x7822b912
   2ef04:	70223201 	.word	0x70223201
   2ef08:	21014622 	.word	0x21014622
   2ef0c:	f00b4640 	.word	0xf00b4640
   2ef10:	4681f8df 	.word	0x4681f8df
   2ef14:	f47f2800 	.word	0xf47f2800
   2ef18:	3510ae65 	.word	0x3510ae65
   2ef1c:	d19d2d30 	.word	0xd19d2d30
   2ef20:	1200e9da 	.word	0x1200e9da
   2ef24:	98019b00 	.word	0x98019b00
   2ef28:	40424059 	.word	0x40424059
   2ef2c:	3008f8da 	.word	0x3008f8da
   2ef30:	f8ca9802 	.word	0xf8ca9802
   2ef34:	ea831000 	.word	0xea831000
   2ef38:	f8da0100 	.word	0xf8da0100
   2ef3c:	9803300c 	.word	0x9803300c
   2ef40:	2004f8ca 	.word	0x2004f8ca
   2ef44:	9a044058 	.word	0x9a044058
   2ef48:	3010f8da 	.word	0x3010f8da
   2ef4c:	1008f8ca 	.word	0x1008f8ca
   2ef50:	99054053 	.word	0x99054053
   2ef54:	2014f8da 	.word	0x2014f8da
   2ef58:	000cf8ca 	.word	0x000cf8ca
   2ef5c:	9806404a 	.word	0x9806404a
   2ef60:	1018f8da 	.word	0x1018f8da
   2ef64:	3010f8ca 	.word	0x3010f8ca
   2ef68:	9b074048 	.word	0x9b074048
   2ef6c:	101cf8da 	.word	0x101cf8da
   2ef70:	2014f8ca 	.word	0x2014f8ca
   2ef74:	f8da404b 	.word	0xf8da404b
   2ef78:	99082020 	.word	0x99082020
   2ef7c:	0018f8ca 	.word	0x0018f8ca
   2ef80:	f8da4051 	.word	0xf8da4051
   2ef84:	9a090024 	.word	0x9a090024
   2ef88:	301cf8ca 	.word	0x301cf8ca
   2ef8c:	f8da4050 	.word	0xf8da4050
   2ef90:	9a0a3028 	.word	0x9a0a3028
   2ef94:	1020f8ca 	.word	0x1020f8ca
   2ef98:	e9ca4053 	.word	0xe9ca4053
   2ef9c:	9a0b0309 	.word	0x9a0b0309
   2efa0:	302cf8da 	.word	0x302cf8da
   2efa4:	40534640 	.word	0x40534640
   2efa8:	f44f4651 	.word	0xf44f4651
   2efac:	f8ca7280 	.word	0xf8ca7280
   2efb0:	f00a302c 	.word	0xf00a302c
   2efb4:	4681f90f 	.word	0x4681f90f
   2efb8:	f47f2800 	.word	0xf47f2800
   2efbc:	2210ae13 	.word	0x2210ae13
   2efc0:	4620a920 	.word	0x4620a920
   2efc4:	ff74f7ea 	.word	0xff74f7ea
   2efc8:	69234648 	.word	0x69234648
   2efcc:	61233301 	.word	0x61233301
   2efd0:	e8bdb079 	.word	0xe8bdb079
   2efd4:	f06f8ff0 	.word	0xf06f8ff0
   2efd8:	e6030935 	.word	0xe6030935
   2efdc:	0937f06f 	.word	0x0937f06f
   2efe0:	bf00e600 	.word	0xbf00e600

0002efe4 <packet_handler_create>:
   2efe4:	b5382801 	.word	0xb5382801
   2efe8:	4614460d 	.word	0x4614460d
   2efec:	db11d00d 	.word	0xdb11d00d
   2eff0:	dc0f2803 	.word	0xdc0f2803
   2eff4:	f00a2010 	.word	0xf00a2010
   2eff8:	2218f8a1 	.word	0x2218f8a1
   2effc:	4b08b120 	.word	0x4b08b120
   2f000:	44136045 	.word	0x44136045
   2f004:	60036084 	.word	0x60036084
   2f008:	2014bd38 	.word	0x2014bd38
   2f00c:	f896f00a 	.word	0xf896f00a
   2f010:	e7f32230 	.word	0xe7f32230
   2f014:	f00a200c 	.word	0xf00a200c
   2f018:	2200f891 	.word	0x2200f891
   2f01c:	bf00e7ee 	.word	0xbf00e7ee
   2f020:	00049d14 	.word	0x00049d14

0002f024 <packet_handler_delete>:
   2f024:	4604b510 	.word	0x4604b510
   2f028:	691b6803 	.word	0x691b6803
   2f02c:	68234798 	.word	0x68234798
   2f030:	695b4620 	.word	0x695b4620
   2f034:	46204798 	.word	0x46204798
   2f038:	4010e8bd 	.word	0x4010e8bd
   2f03c:	b89cf00a 	.word	0xb89cf00a

0002f040 <symbol_0002469>:
   2f040:	460db570 	.word	0x460db570
   2f044:	f0014604 	.word	0xf0014604
   2f048:	2d03fc23 	.word	0x2d03fc23
   2f04c:	d1257025 	.word	0xd1257025
   2f050:	25012308 	.word	0x25012308
   2f054:	49154a14 	.word	0x49154a14
   2f058:	622360a3 	.word	0x622360a3
   2f05c:	62e36523 	.word	0x62e36523
   2f060:	60e263a3 	.word	0x60e263a3
   2f064:	4a134b12 	.word	0x4a134b12
   2f068:	48144e13 	.word	0x48144e13
   2f06c:	65606321 	.word	0x65606321
   2f070:	64a363e2 	.word	0x64a363e2
   2f074:	61e56065 	.word	0x61e56065
   2f078:	62a564e5 	.word	0x62a564e5
   2f07c:	e9c46365 	.word	0xe9c46365
   2f080:	62665510 	.word	0x62665510
   2f084:	f0061d20 	.word	0xf0061d20
   2f088:	65a0fe69 	.word	0x65a0fe69
   2f08c:	004cf104 	.word	0x004cf104
   2f090:	fe64f006 	.word	0xfe64f006
   2f094:	0517e9c4 	.word	0x0517e9c4
   2f098:	bd702000 	.word	0xbd702000
   2f09c:	f0014620 	.word	0xf0014620
   2f0a0:	4807fbf7 	.word	0x4807fbf7
   2f0a4:	bf00bd70 	.word	0xbf00bd70
   2f0a8:	00049ddc 	.word	0x00049ddc
   2f0ac:	00049d7c 	.word	0x00049d7c
   2f0b0:	20031bf4 	.word	0x20031bf4
   2f0b4:	00049d9c 	.word	0x00049d9c
   2f0b8:	00049d5c 	.word	0x00049d5c
   2f0bc:	00049dbc 	.word	0x00049dbc
   2f0c0:	ffffb180 	.word	0xffffb180

0002f0c4 <secure_client_socket>:
   2f0c4:	41f0e92d 	.word	0x41f0e92d
   2f0c8:	680b460c 	.word	0x680b460c
   2f0cc:	f4236989 	.word	0xf4236989
   2f0d0:	60233300 	.word	0x60233300
   2f0d4:	23006822 	.word	0x23006822
   2f0d8:	1280f422 	.word	0x1280f422
   2f0dc:	f2476022 	.word	0xf2476022
   2f0e0:	68270281 	.word	0x68270281
   2f0e4:	f0024606 	.word	0xf0024606
   2f0e8:	2800ff09 	.word	0x2800ff09
   2f0ec:	4605d03b 	.word	0x4605d03b
   2f0f0:	eb064b28 	.word	0xeb064b28
   2f0f4:	eb0301c6 	.word	0xeb0301c6
   2f0f8:	22240181 	.word	0x22240181
   2f0fc:	f7ea3014 	.word	0xf7ea3014
   2f100:	68abfed7 	.word	0x68abfed7
   2f104:	8090f8df 	.word	0x8090f8df
   2f108:	60ab3324 	.word	0x60ab3324
   2f10c:	46296823 	.word	0x46296823
   2f110:	0308ea03 	.word	0x0308ea03
   2f114:	030af043 	.word	0x030af043
   2f118:	f2476023 	.word	0xf2476023
   2f11c:	463b0281 	.word	0x463b0281
   2f120:	f0024620 	.word	0xf0024620
   2f124:	b960ff0b 	.word	0xb960ff0b
   2f128:	00db6823 	.word	0x00db6823
   2f12c:	f04fd40b 	.word	0xf04fd40b
   2f130:	f64f33ff 	.word	0xf64f33ff
   2f134:	210b72ff 	.word	0x210b72ff
   2f138:	f0024630 	.word	0xf0024630
   2f13c:	b128ff13 	.word	0xb128ff13
   2f140:	e8bd6027 	.word	0xe8bd6027
   2f144:	207381f0 	.word	0x207381f0
   2f148:	81f0e8bd 	.word	0x81f0e8bd
   2f14c:	6280f04f 	.word	0x6280f04f
   2f150:	46114630 	.word	0x46114630
   2f154:	33fff04f 	.word	0x33fff04f
   2f158:	ff04f002 	.word	0xff04f002
   2f15c:	2873b130 	.word	0x2873b130
   2f160:	6027d0ef 	.word	0x6027d0ef
   2f164:	200ce7ed 	.word	0x200ce7ed
   2f168:	81f0e8bd 	.word	0x81f0e8bd
   2f16c:	f0236823 	.word	0xf0236823
   2f170:	60236380 	.word	0x60236380
   2f174:	ea036823 	.word	0xea036823
   2f178:	f0480808 	.word	0xf0480808
   2f17c:	6023030c 	.word	0x6023030c
   2f180:	f4436823 	.word	0xf4436823
   2f184:	60233300 	.word	0x60233300
   2f188:	f4436823 	.word	0xf4436823
   2f18c:	60231380 	.word	0x60231380
   2f190:	81f0e8bd 	.word	0x81f0e8bd
   2f194:	20024aa0 	.word	0x20024aa0
   2f198:	ffff0000 	.word	0xffff0000

0002f19c <tls_interface_init>:
   2f19c:	47702000 	.word	0x47702000

0002f1a0 <tls_interface_open>:
   2f1a0:	f020b538 	.word	0xf020b538
   2f1a4:	2b020308 	.word	0x2b020308
   2f1a8:	202fd006 	.word	0x202fd006
   2f1ac:	ffd4f7f5 	.word	0xffd4f7f5
   2f1b0:	35fff04f 	.word	0x35fff04f
   2f1b4:	bd384628 	.word	0xbd384628
   2f1b8:	1e4a4614 	.word	0x1e4a4614
   2f1bc:	d8282a01 	.word	0xd8282a01
   2f1c0:	2901bb14 	.word	0x2901bb14
   2f1c4:	2301bf06 	.word	0x2301bf06
   2f1c8:	7482f44f 	.word	0x7482f44f
   2f1cc:	7487f44f 	.word	0x7487f44f
   2f1d0:	f002461a 	.word	0xf002461a
   2f1d4:	1e05fef3 	.word	0x1e05fef3
   2f1d8:	4b15db26 	.word	0x4b15db26
   2f1dc:	00c5eb05 	.word	0x00c5eb05
   2f1e0:	0080eb03 	.word	0x0080eb03
   2f1e4:	49132224 	.word	0x49132224
   2f1e8:	fe62f7ea 	.word	0xfe62f7ea
   2f1ec:	f0024628 	.word	0xf0024628
   2f1f0:	6803fd0d 	.word	0x6803fd0d
   2f1f4:	f4236144 	.word	0xf4236144
   2f1f8:	60031380 	.word	0x60031380
   2f1fc:	f4236803 	.word	0xf4236803
   2f200:	60033300 	.word	0x60033300
   2f204:	bd384628 	.word	0xbd384628
   2f208:	d0082901 	.word	0xd0082901
   2f20c:	7f87f5b4 	.word	0x7f87f5b4
   2f210:	2016d0de 	.word	0x2016d0de
   2f214:	ffa0f7f5 	.word	0xffa0f7f5
   2f218:	35fff04f 	.word	0x35fff04f
   2f21c:	f5b4e7ca 	.word	0xf5b4e7ca
   2f220:	d1f67f82 	.word	0xd1f67f82
   2f224:	e7d3460b 	.word	0xe7d3460b
   2f228:	35fff04f 	.word	0x35fff04f
   2f22c:	bf00e7c2 	.word	0xbf00e7c2
   2f230:	20024aa0 	.word	0x20024aa0
   2f234:	00049dfc 	.word	0x00049dfc

0002f238 <tls_interface_close>:
   2f238:	4604b510 	.word	0x4604b510
   2f23c:	fce6f002 	.word	0xfce6f002
   2f240:	4620b120 	.word	0x4620b120
   2f244:	4010e8bd 	.word	0x4010e8bd
   2f248:	bf64f002 	.word	0xbf64f002
   2f24c:	f7f52009 	.word	0xf7f52009
   2f250:	f04fff83 	.word	0xf04fff83
   2f254:	bd1030ff 	.word	0xbd1030ff

0002f258 <tls_interface_sendto>:
   2f258:	47f0e92d 	.word	0x47f0e92d
   2f25c:	e9dd460d 	.word	0xe9dd460d
   2f260:	46168908 	.word	0x46168908
   2f264:	4604461f 	.word	0x4604461f
   2f268:	fcd0f002 	.word	0xfcd0f002
   2f26c:	d03b2800 	.word	0xd03b2800
   2f270:	b29b6803 	.word	0xb29b6803
   2f274:	d0392b0c 	.word	0xd0392b0c
   2f278:	b29b6803 	.word	0xb29b6803
   2f27c:	d1112b0b 	.word	0xd1112b0b
   2f280:	eb044b20 	.word	0xeb044b20
   2f284:	f81304c4 	.word	0xf81304c4
   2f288:	2b023024 	.word	0x2b023024
   2f28c:	6903d038 	.word	0x6903d038
   2f290:	bf142b01 	.word	0xbf142b01
   2f294:	202a2039 	.word	0x202a2039
   2f298:	ff5ef7f5 	.word	0xff5ef7f5
   2f29c:	30fff04f 	.word	0x30fff04f
   2f2a0:	87f0e8bd 	.word	0x87f0e8bd
   2f2a4:	2b016903 	.word	0x2b016903
   2f2a8:	2b02d00b 	.word	0x2b02d00b
   2f2ac:	2039d001 	.word	0x2039d001
   2f2b0:	6803e7f2 	.word	0x6803e7f2
   2f2b4:	2b02b29b 	.word	0x2b02b29b
   2f2b8:	6803d007 	.word	0x6803d007
   2f2bc:	2b04b29b 	.word	0x2b04b29b
   2f2c0:	6803d003 	.word	0x6803d003
   2f2c4:	2b05b29b 	.word	0x2b05b29b
   2f2c8:	4b0ed1f1 	.word	0x4b0ed1f1
   2f2cc:	02c4eb04 	.word	0x02c4eb04
   2f2d0:	3022f813 	.word	0x3022f813
   2f2d4:	d1ea2b02 	.word	0xd1ea2b02
   2f2d8:	46204601 	.word	0x46204601
   2f2dc:	fef2f7ff 	.word	0xfef2f7ff
   2f2e0:	d0032800 	.word	0xd0032800
   2f2e4:	e7d9dcd8 	.word	0xe7d9dcd8
   2f2e8:	e7d52009 	.word	0xe7d52009
   2f2ec:	8908e9cd 	.word	0x8908e9cd
   2f2f0:	4632463b 	.word	0x4632463b
   2f2f4:	46204629 	.word	0x46204629
   2f2f8:	47f0e8bd 	.word	0x47f0e8bd
   2f2fc:	bf7af002 	.word	0xbf7af002
   2f300:	e7c92023 	.word	0xe7c92023
   2f304:	20024aa0 	.word	0x20024aa0

0002f308 <tls_interface_recvfrom>:
   2f308:	47f0e92d 	.word	0x47f0e92d
   2f30c:	e9dd460d 	.word	0xe9dd460d
   2f310:	46168908 	.word	0x46168908
   2f314:	4604461f 	.word	0x4604461f
   2f318:	fc78f002 	.word	0xfc78f002
   2f31c:	d0382800 	.word	0xd0382800
   2f320:	b29b6803 	.word	0xb29b6803
   2f324:	d00f2b0c 	.word	0xd00f2b0c
   2f328:	b29b6803 	.word	0xb29b6803
   2f32c:	d00b2b0d 	.word	0xd00b2b0d
   2f330:	2b016903 	.word	0x2b016903
   2f334:	2b02d01a 	.word	0x2b02d01a
   2f338:	2023d010 	.word	0x2023d010
   2f33c:	ff0cf7f5 	.word	0xff0cf7f5
   2f340:	30fff04f 	.word	0x30fff04f
   2f344:	87f0e8bd 	.word	0x87f0e8bd
   2f348:	8908e9cd 	.word	0x8908e9cd
   2f34c:	4632463b 	.word	0x4632463b
   2f350:	46204629 	.word	0x46204629
   2f354:	47f0e8bd 	.word	0x47f0e8bd
   2f358:	b886f003 	.word	0xb886f003
   2f35c:	b29b6803 	.word	0xb29b6803
   2f360:	d0072b02 	.word	0xd0072b02
   2f364:	b29b6803 	.word	0xb29b6803
   2f368:	d0032b04 	.word	0xd0032b04
   2f36c:	b29b6803 	.word	0xb29b6803
   2f370:	d1e22b05 	.word	0xd1e22b05
   2f374:	eb044b08 	.word	0xeb044b08
   2f378:	f81302c4 	.word	0xf81302c4
   2f37c:	2b023022 	.word	0x2b023022
   2f380:	4601d1db 	.word	0x4601d1db
   2f384:	f7ff4620 	.word	0xf7ff4620
   2f388:	2800fe9d 	.word	0x2800fe9d
   2f38c:	dcd5d0dc 	.word	0xdcd5d0dc
   2f390:	2009e7d6 	.word	0x2009e7d6
   2f394:	bf00e7d2 	.word	0xbf00e7d2
   2f398:	20024aa0 	.word	0x20024aa0

0002f39c <tls_interface_bind>:
   2f39c:	43f8e92d 	.word	0x43f8e92d
   2f3a0:	4617460c 	.word	0x4617460c
   2f3a4:	f0024606 	.word	0xf0024606
   2f3a8:	2800fc31 	.word	0x2800fc31
   2f3ac:	6803d04c 	.word	0x6803d04c
   2f3b0:	b29b4605 	.word	0xb29b4605
   2f3b4:	d1502b02 	.word	0xd1502b02
   2f3b8:	463a4621 	.word	0x463a4621
   2f3bc:	f0034630 	.word	0xf0034630
   2f3c0:	4604fa29 	.word	0x4604fa29
   2f3c4:	2c00b120 	.word	0x2c00b120
   2f3c8:	4620dc3f 	.word	0x4620dc3f
   2f3cc:	83f8e8bd 	.word	0x83f8e8bd
   2f3d0:	07c6eb06 	.word	0x07c6eb06
   2f3d4:	8094f8df 	.word	0x8094f8df
   2f3d8:	f81800bf 	.word	0xf81800bf
   2f3dc:	2b013007 	.word	0x2b013007
   2f3e0:	4603d1f3 	.word	0x4603d1f3
   2f3e4:	0281f247 	.word	0x0281f247
   2f3e8:	463069a9 	.word	0x463069a9
   2f3ec:	fd86f002 	.word	0xfd86f002
   2f3f0:	b3b04681 	.word	0xb3b04681
   2f3f4:	0107eb08 	.word	0x0107eb08
   2f3f8:	30142224 	.word	0x30142224
   2f3fc:	fd58f7ea 	.word	0xfd58f7ea
   2f400:	3008f8d9 	.word	0x3008f8d9
   2f404:	33244649 	.word	0x33244649
   2f408:	3008f8c9 	.word	0x3008f8c9
   2f40c:	2304682a 	.word	0x2304682a
   2f410:	04120c12 	.word	0x04120c12
   2f414:	020af042 	.word	0x020af042
   2f418:	4628602a 	.word	0x4628602a
   2f41c:	0281f247 	.word	0x0281f247
   2f420:	fd8cf002 	.word	0xfd8cf002
   2f424:	682bb9f8 	.word	0x682bb9f8
   2f428:	d41800db 	.word	0xd41800db
   2f42c:	f04f4630 	.word	0xf04f4630
   2f430:	f64f33ff 	.word	0xf64f33ff
   2f434:	210b72ff 	.word	0x210b72ff
   2f438:	fd94f002 	.word	0xfd94f002
   2f43c:	d0c42800 	.word	0xd0c42800
   2f440:	46042304 	.word	0x46042304
   2f444:	e7be602b 	.word	0xe7be602b
   2f448:	46202409 	.word	0x46202409
   2f44c:	34fff04f 	.word	0x34fff04f
   2f450:	fe82f7f5 	.word	0xfe82f7f5
   2f454:	e8bd4620 	.word	0xe8bd4620
   2f458:	242d83f8 	.word	0x242d83f8
   2f45c:	2473e7f5 	.word	0x2473e7f5
   2f460:	240ce7f3 	.word	0x240ce7f3
   2f464:	4604e7f1 	.word	0x4604e7f1
   2f468:	bf00e7ad 	.word	0xbf00e7ad
   2f46c:	20024aa0 	.word	0x20024aa0

0002f470 <tls_interface_connect>:
   2f470:	460eb5f8 	.word	0x460eb5f8
   2f474:	46044617 	.word	0x46044617
   2f478:	fbc8f002 	.word	0xfbc8f002
   2f47c:	4b13b1e8 	.word	0x4b13b1e8
   2f480:	02c4eb04 	.word	0x02c4eb04
   2f484:	3022f813 	.word	0x3022f813
   2f488:	d11c2b02 	.word	0xd11c2b02
   2f48c:	46056803 	.word	0x46056803
   2f490:	2b02b29b 	.word	0x2b02b29b
   2f494:	6803d003 	.word	0x6803d003
   2f498:	2b04b29b 	.word	0x2b04b29b
   2f49c:	463ad113 	.word	0x463ad113
   2f4a0:	46204631 	.word	0x46204631
   2f4a4:	f90cf003 	.word	0xf90cf003
   2f4a8:	2800b110 	.word	0x2800b110
   2f4ac:	bdf8dc06 	.word	0xbdf8dc06
   2f4b0:	46204629 	.word	0x46204629
   2f4b4:	fe06f7ff 	.word	0xfe06f7ff
   2f4b8:	2009e7f7 	.word	0x2009e7f7
   2f4bc:	fe4cf7f5 	.word	0xfe4cf7f5
   2f4c0:	30fff04f 	.word	0x30fff04f
   2f4c4:	202dbdf8 	.word	0x202dbdf8
   2f4c8:	bf00e7f8 	.word	0xbf00e7f8
   2f4cc:	20024aa0 	.word	0x20024aa0

0002f4d0 <tls_interface_listen>:
   2f4d0:	47f0e92d 	.word	0x47f0e92d
   2f4d4:	4606460f 	.word	0x4606460f
   2f4d8:	fb98f002 	.word	0xfb98f002
   2f4dc:	d06b2800 	.word	0xd06b2800
   2f4e0:	46046903 	.word	0x46046903
   2f4e4:	d1652b01 	.word	0xd1652b01
   2f4e8:	b29b6803 	.word	0xb29b6803
   2f4ec:	d0562b04 	.word	0xd0562b04
   2f4f0:	b29b6823 	.word	0xb29b6823
   2f4f4:	d15d2b0b 	.word	0xd15d2b0b
   2f4f8:	f8df00f3 	.word	0xf8df00f3
   2f4fc:	199a90c0 	.word	0x199a90c0
   2f500:	2022f819 	.word	0x2022f819
   2f504:	d1552a01 	.word	0xd1552a01
   2f508:	44332201 	.word	0x44332201
   2f50c:	f809009d 	.word	0xf809009d
   2f510:	69a12005 	.word	0x69a12005
   2f514:	f2472300 	.word	0xf2472300
   2f518:	46300281 	.word	0x46300281
   2f51c:	8000f8d4 	.word	0x8000f8d4
   2f520:	fcecf002 	.word	0xfcecf002
   2f524:	28004682 	.word	0x28004682
   2f528:	eb09d042 	.word	0xeb09d042
   2f52c:	22240105 	.word	0x22240105
   2f530:	f7ea3014 	.word	0xf7ea3014
   2f534:	f8dafcbd 	.word	0xf8dafcbd
   2f538:	46513008 	.word	0x46513008
   2f53c:	f8ca3324 	.word	0xf8ca3324
   2f540:	68223008 	.word	0x68223008
   2f544:	0c124643 	.word	0x0c124643
   2f548:	f0420412 	.word	0xf0420412
   2f54c:	6022020a 	.word	0x6022020a
   2f550:	f2474620 	.word	0xf2474620
   2f554:	f0020281 	.word	0xf0020281
   2f558:	b9e0fcf1 	.word	0xb9e0fcf1
   2f55c:	00db6823 	.word	0x00db6823
   2f560:	f04fd40e 	.word	0xf04fd40e
   2f564:	f64f33ff 	.word	0xf64f33ff
   2f568:	210b72ff 	.word	0x210b72ff
   2f56c:	f0024630 	.word	0xf0024630
   2f570:	b160fcf9 	.word	0xb160fcf9
   2f574:	f8c42800 	.word	0xf8c42800
   2f578:	dc028000 	.word	0xdc028000
   2f57c:	87f0e8bd 	.word	0x87f0e8bd
   2f580:	f7f52073 	.word	0xf7f52073
   2f584:	f04ffde9 	.word	0xf04ffde9
   2f588:	e8bd30ff 	.word	0xe8bd30ff
   2f58c:	463987f0 	.word	0x463987f0
   2f590:	f0034630 	.word	0xf0034630
   2f594:	2800f9d5 	.word	0x2800f9d5
   2f598:	e8bddcf3 	.word	0xe8bddcf3
   2f59c:	00f387f0 	.word	0x00f387f0
   2f5a0:	9018f8df 	.word	0x9018f8df
   2f5a4:	f819199a 	.word	0xf819199a
   2f5a8:	2a022022 	.word	0x2a022022
   2f5ac:	e7abd1a0 	.word	0xe7abd1a0
   2f5b0:	e7e6200c 	.word	0xe7e6200c
   2f5b4:	e7e4202d 	.word	0xe7e4202d
   2f5b8:	e7e22009 	.word	0xe7e22009
   2f5bc:	20024aa0 	.word	0x20024aa0

0002f5c0 <tls_interface_accept>:
   2f5c0:	460cb5f8 	.word	0x460cb5f8
   2f5c4:	461f4616 	.word	0x461f4616
   2f5c8:	f0024605 	.word	0xf0024605
   2f5cc:	2800fb1f 	.word	0x2800fb1f
   2f5d0:	6800d03b 	.word	0x6800d03b
   2f5d4:	2806b280 	.word	0x2806b280
   2f5d8:	4621d137 	.word	0x4621d137
   2f5dc:	4632463b 	.word	0x4632463b
   2f5e0:	f0034628 	.word	0xf0034628
   2f5e4:	4604fa23 	.word	0x4604fa23
   2f5e8:	2c00b118 	.word	0x2c00b118
   2f5ec:	4620dc2e 	.word	0x4620dc2e
   2f5f0:	4628bdf8 	.word	0x4628bdf8
   2f5f4:	fb0af002 	.word	0xfb0af002
   2f5f8:	4f186803 	.word	0x4f186803
   2f5fc:	3300f423 	.word	0x3300f423
   2f600:	68036003 	.word	0x68036003
   2f604:	05c5eb05 	.word	0x05c5eb05
   2f608:	1380f423 	.word	0x1380f423
   2f60c:	60034606 	.word	0x60034606
   2f610:	0185eb07 	.word	0x0185eb07
   2f614:	46382224 	.word	0x46382224
   2f618:	fc4af7ea 	.word	0xfc4af7ea
   2f61c:	703b2302 	.word	0x703b2302
   2f620:	46206833 	.word	0x46206833
   2f624:	041b0c1b 	.word	0x041b0c1b
   2f628:	030bf043 	.word	0x030bf043
   2f62c:	f64f6033 	.word	0xf64f6033
   2f630:	f04f72ff 	.word	0xf04f72ff
   2f634:	210c33ff 	.word	0x210c33ff
   2f638:	fc94f002 	.word	0xfc94f002
   2f63c:	28004604 	.word	0x28004604
   2f640:	2000d0d5 	.word	0x2000d0d5
   2f644:	fd66f002 	.word	0xfd66f002
   2f648:	2409e7cf 	.word	0x2409e7cf
   2f64c:	f04f4620 	.word	0xf04f4620
   2f650:	f7f534ff 	.word	0xf7f534ff
   2f654:	4620fd81 	.word	0x4620fd81
   2f658:	bf00bdf8 	.word	0xbf00bdf8
   2f65c:	20024aa0 	.word	0x20024aa0

0002f660 <tls_interface_setopt>:
   2f660:	41f0e92d 	.word	0x41f0e92d
   2f664:	7f8df5b1 	.word	0x7f8df5b1
   2f668:	d11d9f06 	.word	0xd11d9f06
   2f66c:	b1c3461c 	.word	0xb1c3461c
   2f670:	4605b1bf 	.word	0x4605b1bf
   2f674:	f0024616 	.word	0xf0024616
   2f678:	b1c8fac9 	.word	0xb1c8fac9
   2f67c:	b29b6803 	.word	0xb29b6803
   2f680:	d0072b02 	.word	0xd0072b02
   2f684:	b29b6803 	.word	0xb29b6803
   2f688:	d0032b04 	.word	0xd0032b04
   2f68c:	b29b6803 	.word	0xb29b6803
   2f690:	d10d2b05 	.word	0xd10d2b05
   2f694:	2e033e01 	.word	0x2e033e01
   2f698:	e8dfd851 	.word	0xe8dfd851
   2f69c:	3225f006 	.word	0x3225f006
   2f6a0:	200e0b18 	.word	0x200e0b18
   2f6a4:	81f0e8bd 	.word	0x81f0e8bd
   2f6a8:	41f0e8bd 	.word	0x41f0e8bd
   2f6ac:	baf6f003 	.word	0xbaf6f003
   2f6b0:	e7f72009 	.word	0xe7f72009
   2f6b4:	d1392f04 	.word	0xd1392f04
   2f6b8:	2b026823 	.word	0x2b026823
   2f6bc:	4a21d836 	.word	0x4a21d836
   2f6c0:	05c5eb05 	.word	0x05c5eb05
   2f6c4:	0585eb02 	.word	0x0585eb02
   2f6c8:	200070ab 	.word	0x200070ab
   2f6cc:	2f01e7ea 	.word	0x2f01e7ea
   2f6d0:	7823d12c 	.word	0x7823d12c
   2f6d4:	d8292b01 	.word	0xd8292b01
   2f6d8:	eb054a1a 	.word	0xeb054a1a
   2f6dc:	eb0205c5 	.word	0xeb0205c5
   2f6e0:	70530285 	.word	0x70530285
   2f6e4:	e7dd2000 	.word	0xe7dd2000
   2f6e8:	d11f2f04 	.word	0xd11f2f04
   2f6ec:	b1f86820 	.word	0xb1f86820
   2f6f0:	d11b2801 	.word	0xd11b2801
   2f6f4:	eb054b13 	.word	0xeb054b13
   2f6f8:	f80305c5 	.word	0xf80305c5
   2f6fc:	20000025 	.word	0x20000025
   2f700:	ea5fe7d0 	.word	0xea5fe7d0
   2f704:	d0110c97 	.word	0xd0110c97
   2f708:	0603f017 	.word	0x0603f017
   2f70c:	eb05d10e 	.word	0xeb05d10e
   2f710:	00ad05c5 	.word	0x00ad05c5
   2f714:	1d284b0b 	.word	0x1d284b0b
   2f718:	442b4418 	.word	0x442b4418
   2f71c:	4621463a 	.word	0x4621463a
   2f720:	c003f883 	.word	0xc003f883
   2f724:	fbc4f7ea 	.word	0xfbc4f7ea
   2f728:	e7bb4630 	.word	0xe7bb4630
   2f72c:	e7b92016 	.word	0xe7b92016
   2f730:	4b042202 	.word	0x4b042202
   2f734:	05c5eb05 	.word	0x05c5eb05
   2f738:	2025f803 	.word	0x2025f803
   2f73c:	202ae7b2 	.word	0x202ae7b2
   2f740:	bf00e7b0 	.word	0xbf00e7b0
   2f744:	20024aa0 	.word	0x20024aa0

0002f748 <tls_interface_getopt>:
   2f748:	41f0e92d 	.word	0x41f0e92d
   2f74c:	7f8df5b1 	.word	0x7f8df5b1
   2f750:	d1129f06 	.word	0xd1129f06
   2f754:	b16b461d 	.word	0xb16b461d
   2f758:	4606b167 	.word	0x4606b167
   2f75c:	f0024614 	.word	0xf0024614
   2f760:	2800fa55 	.word	0x2800fa55
   2f764:	3c01d04f 	.word	0x3c01d04f
   2f768:	d8522c03 	.word	0xd8522c03
   2f76c:	f004e8df 	.word	0xf004e8df
   2f770:	09152139 	.word	0x09152139
   2f774:	e8bd200e 	.word	0xe8bd200e
   2f778:	e8bd81f0 	.word	0xe8bd81f0
   2f77c:	f00341f0 	.word	0xf00341f0
   2f780:	683bbb49 	.word	0x683bbb49
   2f784:	d13c2b04 	.word	0xd13c2b04
   2f788:	eb064b23 	.word	0xeb064b23
   2f78c:	eb0306c6 	.word	0xeb0306c6
   2f790:	78b30686 	.word	0x78b30686
   2f794:	602b2000 	.word	0x602b2000
   2f798:	683be7ed 	.word	0x683be7ed
   2f79c:	d1302b04 	.word	0xd1302b04
   2f7a0:	eb064b1d 	.word	0xeb064b1d
   2f7a4:	eb0306c6 	.word	0xeb0306c6
   2f7a8:	78730686 	.word	0x78730686
   2f7ac:	602b2000 	.word	0x602b2000
   2f7b0:	eb06e7e1 	.word	0xeb06e7e1
   2f7b4:	491806c6 	.word	0x491806c6
   2f7b8:	00b6683b 	.word	0x00b6683b
   2f7bc:	f013198a 	.word	0xf013198a
   2f7c0:	78d00403 	.word	0x78d00403
   2f7c4:	089bd121 	.word	0x089bd121
   2f7c8:	bf284283 	.word	0xbf284283
   2f7cc:	009a4603 	.word	0x009a4603
   2f7d0:	3604b1db 	.word	0x3604b1db
   2f7d4:	603a4431 	.word	0x603a4431
   2f7d8:	f7ea4628 	.word	0xf7ea4628
   2f7dc:	4620fb69 	.word	0x4620fb69
   2f7e0:	683be7c9 	.word	0x683be7c9
   2f7e4:	d10c2b04 	.word	0xd10c2b04
   2f7e8:	eb064b0b 	.word	0xeb064b0b
   2f7ec:	f81306c6 	.word	0xf81306c6
   2f7f0:	20003026 	.word	0x20003026
   2f7f4:	0301f1a3 	.word	0x0301f1a3
   2f7f8:	f383fab3 	.word	0xf383fab3
   2f7fc:	602b095b 	.word	0x602b095b
   2f800:	2016e7b9 	.word	0x2016e7b9
   2f804:	2009e7b7 	.word	0x2009e7b7
   2f808:	2800e7b5 	.word	0x2800e7b5
   2f80c:	6038d1f9 	.word	0x6038d1f9
   2f810:	202ae7b1 	.word	0x202ae7b1
   2f814:	bf00e7af 	.word	0xbf00e7af
   2f818:	20024aa0 	.word	0x20024aa0

0002f81c <tls_rpc_ip_event_handler>:
   2f81c:	f248b538 	.word	0xf248b538
   2f820:	42ab0581 	.word	0x42ab0581
   2f824:	d053460c 	.word	0xd053460c
   2f828:	0182f249 	.word	0x0182f249
   2f82c:	d02d428b 	.word	0xd02d428b
   2f830:	0102f248 	.word	0x0102f248
   2f834:	d001428b 	.word	0xd001428b
   2f838:	bd382001 	.word	0xbd382001
   2f83c:	d0fb2c00 	.word	0xd0fb2c00
   2f840:	f5b36963 	.word	0xf5b36963
   2f844:	d0027f82 	.word	0xd0027f82
   2f848:	7f87f5b3 	.word	0x7f87f5b3
   2f84c:	6823d1f4 	.word	0x6823d1f4
   2f850:	5300f023 	.word	0x5300f023
   2f854:	69556023 	.word	0x69556023
   2f858:	d1482d00 	.word	0xd1482d00
   2f85c:	0c1b6823 	.word	0x0c1b6823
   2f860:	f043041b 	.word	0xf043041b
   2f864:	60230305 	.word	0x60230305
   2f868:	00da6823 	.word	0x00da6823
   2f86c:	4b25d50c 	.word	0x4b25d50c
   2f870:	02c0eb00 	.word	0x02c0eb00
   2f874:	3022f813 	.word	0x3022f813
   2f878:	d1052b02 	.word	0xd1052b02
   2f87c:	f7ff4621 	.word	0xf7ff4621
   2f880:	b108fc21 	.word	0xb108fc21
   2f884:	d1352873 	.word	0xd1352873
   2f888:	bd382000 	.word	0xbd382000
   2f88c:	d0fb2c00 	.word	0xd0fb2c00
   2f890:	b29b6823 	.word	0xb29b6823
   2f894:	d1f72b0b 	.word	0xd1f72b0b
   2f898:	bb486910 	.word	0xbb486910
   2f89c:	f0436823 	.word	0xf0436823
   2f8a0:	60236380 	.word	0x60236380
   2f8a4:	00db6823 	.word	0x00db6823
   2f8a8:	6823d5ee 	.word	0x6823d5ee
   2f8ac:	6380f023 	.word	0x6380f023
   2f8b0:	68236023 	.word	0x68236023
   2f8b4:	041b0c1b 	.word	0x041b0c1b
   2f8b8:	030cf043 	.word	0x030cf043
   2f8bc:	68236023 	.word	0x68236023
   2f8c0:	3300f443 	.word	0x3300f443
   2f8c4:	68236023 	.word	0x68236023
   2f8c8:	1380f443 	.word	0x1380f443
   2f8cc:	bd386023 	.word	0xbd386023
   2f8d0:	d0d92900 	.word	0xd0d92900
   2f8d4:	b29b680b 	.word	0xb29b680b
   2f8d8:	d1d52b0a 	.word	0xd1d52b0a
   2f8dc:	b9386950 	.word	0xb9386950
   2f8e0:	0c1b680b 	.word	0x0c1b680b
   2f8e4:	f043041b 	.word	0xf043041b
   2f8e8:	600b030b 	.word	0x600b030b
   2f8ec:	4628bd38 	.word	0x4628bd38
   2f8f0:	fafaf002 	.word	0xfafaf002
   2f8f4:	68236060 	.word	0x68236060
   2f8f8:	f4432000 	.word	0xf4432000
   2f8fc:	60232380 	.word	0x60232380
   2f900:	bf00bd38 	.word	0xbf00bd38
   2f904:	20024aa0 	.word	0x20024aa0

0002f908 <rpc_gnss_serialize_utc>:
   2f908:	b1d84603 	.word	0xb1d84603
   2f90c:	2000b1d1 	.word	0x2000b1d1
   2f910:	70482201 	.word	0x70482201
   2f914:	685a700a 	.word	0x685a700a
   2f918:	f8c12010 	.word	0xf8c12010
   2f91c:	681a2006 	.word	0x681a2006
   2f920:	2002f8c1 	.word	0x2002f8c1
   2f924:	200af993 	.word	0x200af993
   2f928:	f993730a 	.word	0xf993730a
   2f92c:	73ca200d 	.word	0x73ca200d
   2f930:	200cf993 	.word	0x200cf993
   2f934:	7a1a738a 	.word	0x7a1a738a
   2f938:	7ada728a 	.word	0x7ada728a
   2f93c:	7a5b734a 	.word	0x7a5b734a
   2f940:	477072cb 	.word	0x477072cb
   2f944:	30fff04f 	.word	0x30fff04f
   2f948:	bf004770 	.word	0xbf004770

0002f94c <rpc_gnss_serialize_ephe>:
   2f94c:	28004603 	.word	0x28004603
   2f950:	2900d04b 	.word	0x2900d04b
   2f954:	2000d049 	.word	0x2000d049
   2f958:	70482202 	.word	0x70482202
   2f95c:	68da700a 	.word	0x68da700a
   2f960:	f8c12040 	.word	0xf8c12040
   2f964:	f9b3200b 	.word	0xf9b3200b
   2f968:	f8a12008 	.word	0xf8a12008
   2f96c:	f9932009 	.word	0xf9932009
   2f970:	720a2006 	.word	0x720a2006
   2f974:	2044f9b3 	.word	0x2044f9b3
   2f978:	f9b3878a 	.word	0xf9b3878a
   2f97c:	86ca203e 	.word	0x86ca203e
   2f980:	2042f9b3 	.word	0x2042f9b3
   2f984:	f9b3874a 	.word	0xf9b3874a
   2f988:	868a203c 	.word	0x868a203c
   2f98c:	2046f9b3 	.word	0x2046f9b3
   2f990:	f9b387ca 	.word	0xf9b387ca
   2f994:	870a2040 	.word	0x870a2040
   2f998:	201cf9b3 	.word	0x201cf9b3
   2f99c:	6a9a830a 	.word	0x6a9a830a
   2f9a0:	2022f8c1 	.word	0x2022f8c1
   2f9a4:	744a7c9a 	.word	0x744a7c9a
   2f9a8:	70ca785a 	.word	0x70ca785a
   2f9ac:	62ca6b5a 	.word	0x62ca6b5a
   2f9b0:	202cf9b3 	.word	0x202cf9b3
   2f9b4:	885a84ca 	.word	0x885a84ca
   2f9b8:	6a1a808a 	.word	0x6a1a808a
   2f9bc:	201af8c1 	.word	0x201af8c1
   2f9c0:	630a6b9a 	.word	0x630a6b9a
   2f9c4:	f8c16a5a 	.word	0xf8c16a5a
   2f9c8:	6b1a201e 	.word	0x6b1a201e
   2f9cc:	781a628a 	.word	0x781a628a
   2f9d0:	f993708a 	.word	0xf993708a
   2f9d4:	73ca2010 	.word	0x73ca2010
   2f9d8:	80ca889a 	.word	0x80ca889a
   2f9dc:	824a8a9a 	.word	0x824a8a9a
   2f9e0:	740a7c5a 	.word	0x740a7c5a
   2f9e4:	614b699b 	.word	0x614b699b
   2f9e8:	f04f4770 	.word	0xf04f4770
   2f9ec:	477030ff 	.word	0x477030ff

0002f9f0 <rpc_gnss_serialize_alm>:
   2f9f0:	b3604603 	.word	0xb3604603
   2f9f4:	2000b359 	.word	0x2000b359
   2f9f8:	70482203 	.word	0x70482203
   2f9fc:	f9b3700a 	.word	0xf9b3700a
   2fa00:	2021201c 	.word	0x2021201c
   2fa04:	201df8a1 	.word	0x201df8a1
   2fa08:	201ef9b3 	.word	0x201ef9b3
   2fa0c:	201ff8a1 	.word	0x201ff8a1
   2fa10:	2006f9b3 	.word	0x2006f9b3
   2fa14:	889a810a 	.word	0x889a810a
   2fa18:	78da80ca 	.word	0x78da80ca
   2fa1c:	699a714a 	.word	0x699a714a
   2fa20:	2019f8c1 	.word	0x2019f8c1
   2fa24:	f8c1691a 	.word	0xf8c1691a
   2fa28:	f9b32011 	.word	0xf9b32011
   2fa2c:	814a2008 	.word	0x814a2008
   2fa30:	f8c168da 	.word	0xf8c168da
   2fa34:	7a9a200d 	.word	0x7a9a200d
   2fa38:	781a730a 	.word	0x781a730a
   2fa3c:	789a708a 	.word	0x789a708a
   2fa40:	695a710a 	.word	0x695a710a
   2fa44:	2015f8c1 	.word	0x2015f8c1
   2fa48:	70cb785b 	.word	0x70cb785b
   2fa4c:	f04f4770 	.word	0xf04f4770
   2fa50:	477030ff 	.word	0x477030ff

0002fa54 <rpc_gnss_serialize_klob>:
   2fa54:	b1f04603 	.word	0xb1f04603
   2fa58:	2000b1e9 	.word	0x2000b1e9
   2fa5c:	70482204 	.word	0x70482204
   2fa60:	f993700a 	.word	0xf993700a
   2fa64:	200a2000 	.word	0x200a2000
   2fa68:	f993708a 	.word	0xf993708a
   2fa6c:	70ca2001 	.word	0x70ca2001
   2fa70:	2002f993 	.word	0x2002f993
   2fa74:	f993710a 	.word	0xf993710a
   2fa78:	714a2003 	.word	0x714a2003
   2fa7c:	2004f993 	.word	0x2004f993
   2fa80:	f993718a 	.word	0xf993718a
   2fa84:	71ca2005 	.word	0x71ca2005
   2fa88:	2006f993 	.word	0x2006f993
   2fa8c:	f993720a 	.word	0xf993720a
   2fa90:	724b3007 	.word	0x724b3007
   2fa94:	f04f4770 	.word	0xf04f4770
   2fa98:	477030ff 	.word	0x477030ff

0002fa9c <rpc_gnss_serialize_nequick>:
   2fa9c:	b1984603 	.word	0xb1984603
   2faa0:	2000b191 	.word	0x2000b191
   2faa4:	70482205 	.word	0x70482205
   2faa8:	f9b3700a 	.word	0xf9b3700a
   2faac:	200a2000 	.word	0x200a2000
   2fab0:	f9b3804a 	.word	0xf9b3804a
   2fab4:	808a2002 	.word	0x808a2002
   2fab8:	2004f9b3 	.word	0x2004f9b3
   2fabc:	799a80ca 	.word	0x799a80ca
   2fac0:	79db720a 	.word	0x79db720a
   2fac4:	4770724b 	.word	0x4770724b
   2fac8:	30fff04f 	.word	0x30fff04f
   2facc:	bf004770 	.word	0xbf004770

0002fad0 <rpc_gnss_serialize_time_and_sv_tow>:
   2fad0:	b309b310 	.word	0xb309b310
   2fad4:	2500b470 	.word	0x2500b470
   2fad8:	460c2606 	.word	0x460c2606
   2fadc:	700e704d 	.word	0x700e704d
   2fae0:	8805462b 	.word	0x8805462b
   2fae4:	804d4602 	.word	0x804d4602
   2fae8:	f8c168c5 	.word	0xf8c168c5
   2faec:	8905500a 	.word	0x8905500a
   2faf0:	6840810d 	.word	0x6840810d
   2faf4:	8a156048 	.word	0x8a156048
   2faf8:	0043eb03 	.word	0x0043eb03
   2fafc:	81c54408 	.word	0x81c54408
   2fb00:	33017c90 	.word	0x33017c90
   2fb04:	74202b20 	.word	0x74202b20
   2fb08:	0204f102 	.word	0x0204f102
   2fb0c:	0403f104 	.word	0x0403f104
   2fb10:	206ed1f1 	.word	0x206ed1f1
   2fb14:	4770bc70 	.word	0x4770bc70
   2fb18:	30fff04f 	.word	0x30fff04f
   2fb1c:	bf004770 	.word	0xbf004770

0002fb20 <rpc_gnss_serialize_location>:
   2fb20:	b1c84603 	.word	0xb1c84603
   2fb24:	2000b1c1 	.word	0x2000b1c1
   2fb28:	70482207 	.word	0x70482207
   2fb2c:	f9b3700a 	.word	0xf9b3700a
   2fb30:	20112008 	.word	0x20112008
   2fb34:	7b9a814a 	.word	0x7b9a814a
   2fb38:	681a740a 	.word	0x681a740a
   2fb3c:	2002f8c1 	.word	0x2002f8c1
   2fb40:	f8c1685a 	.word	0xf8c1685a
   2fb44:	7b1a2006 	.word	0x7b1a2006
   2fb48:	7b5a738a 	.word	0x7b5a738a
   2fb4c:	7a9a73ca 	.word	0x7a9a73ca
   2fb50:	7adb730a 	.word	0x7adb730a
   2fb54:	4770734b 	.word	0x4770734b
   2fb58:	30fff04f 	.word	0x30fff04f
   2fb5c:	bf004770 	.word	0xbf004770

0002fb60 <rpc_gnss_serialize_integrity>:
   2fb60:	b141b148 	.word	0xb141b148
   2fb64:	23082200 	.word	0x23082200
   2fb68:	700b704a 	.word	0x700b704a
   2fb6c:	20066803 	.word	0x20066803
   2fb70:	3002f8c1 	.word	0x3002f8c1
   2fb74:	f04f4770 	.word	0xf04f4770
   2fb78:	477030ff 	.word	0x477030ff

0002fb7c <ipc_trace_init>:
   2fb7c:	60184b01 	.word	0x60184b01
   2fb80:	bf004770 	.word	0xbf004770
   2fb84:	20024bcc 	.word	0x20024bcc

0002fb88 <bsd_os_trace_irq_handler>:
   2fb88:	4b6cb5f0 	.word	0x4b6cb5f0
   2fb8c:	781bb083 	.word	0x781bb083
   2fb90:	f0002b00 	.word	0xf0002b00
   2fb94:	4b6a80ad 	.word	0x4b6a80ad
   2fb98:	68a2681c 	.word	0x68a2681c
   2fb9c:	429a6863 	.word	0x429a6863
   2fba0:	f64bd02d 	.word	0xf64bd02d
   2fba4:	f8ad63ef 	.word	0xf8ad63ef
   2fba8:	78233000 	.word	0x78233000
   2fbac:	f88d466e 	.word	0xf88d466e
   2fbb0:	68633004 	.word	0x68633004
   2fbb4:	429a2105 	.word	0x429a2105
   2fbb8:	6927bf2a 	.word	0x6927bf2a
   2fbbc:	1abf1a9f 	.word	0x1abf1a9f
   2fbc0:	bf94429a 	.word	0xbf94429a
   2fbc4:	68e52500 	.word	0x68e52500
   2fbc8:	bf88b2bf 	.word	0xbf88b2bf
   2fbcc:	46301b5b 	.word	0x46301b5b
   2fbd0:	b29dbf88 	.word	0xb29dbf88
   2fbd4:	7002f8ad 	.word	0x7002f8ad
   2fbd8:	fbf8f7f5 	.word	0xfbf8f7f5
   2fbdc:	1002f8bd 	.word	0x1002f8bd
   2fbe0:	f7f568a0 	.word	0xf7f568a0
   2fbe4:	68a3fbf3 	.word	0x68a3fbf3
   2fbe8:	441f6922 	.word	0x441f6922
   2fbec:	bf084297 	.word	0xbf084297
   2fbf0:	60a768e3 	.word	0x60a768e3
   2fbf4:	60a3bf08 	.word	0x60a3bf08
   2fbf8:	f0402d00 	.word	0xf0402d00
   2fbfc:	4b51808d 	.word	0x4b51808d
   2fc00:	68a2681c 	.word	0x68a2681c
   2fc04:	429a6863 	.word	0x429a6863
   2fc08:	f64bd02c 	.word	0xf64bd02c
   2fc0c:	f8ad63ef 	.word	0xf8ad63ef
   2fc10:	78233000 	.word	0x78233000
   2fc14:	f88d466e 	.word	0xf88d466e
   2fc18:	68633004 	.word	0x68633004
   2fc1c:	429a2105 	.word	0x429a2105
   2fc20:	6927bf2a 	.word	0x6927bf2a
   2fc24:	1abf1a9f 	.word	0x1abf1a9f
   2fc28:	bf94429a 	.word	0xbf94429a
   2fc2c:	68e52500 	.word	0x68e52500
   2fc30:	bf88b2bf 	.word	0xbf88b2bf
   2fc34:	46301b5b 	.word	0x46301b5b
   2fc38:	b29dbf88 	.word	0xb29dbf88
   2fc3c:	7002f8ad 	.word	0x7002f8ad
   2fc40:	fbc4f7f5 	.word	0xfbc4f7f5
   2fc44:	1002f8bd 	.word	0x1002f8bd
   2fc48:	f7f568a0 	.word	0xf7f568a0
   2fc4c:	68a3fbbf 	.word	0x68a3fbbf
   2fc50:	441f6922 	.word	0x441f6922
   2fc54:	bf084297 	.word	0xbf084297
   2fc58:	60a768e3 	.word	0x60a768e3
   2fc5c:	60a3bf08 	.word	0x60a3bf08
   2fc60:	d1482d00 	.word	0xd1482d00
   2fc64:	681c4b38 	.word	0x681c4b38
   2fc68:	686368a2 	.word	0x686368a2
   2fc6c:	d02b429a 	.word	0xd02b429a
   2fc70:	63eff64b 	.word	0x63eff64b
   2fc74:	3000f8ad 	.word	0x3000f8ad
   2fc78:	466e7823 	.word	0x466e7823
   2fc7c:	3004f88d 	.word	0x3004f88d
   2fc80:	21056863 	.word	0x21056863
   2fc84:	bf2a429a 	.word	0xbf2a429a
   2fc88:	1a9f6927 	.word	0x1a9f6927
   2fc8c:	429a1abf 	.word	0x429a1abf
   2fc90:	2500bf94 	.word	0x2500bf94
   2fc94:	b2bf68e5 	.word	0xb2bf68e5
   2fc98:	1b5bbf88 	.word	0x1b5bbf88
   2fc9c:	bf884630 	.word	0xbf884630
   2fca0:	f8adb29d 	.word	0xf8adb29d
   2fca4:	f7f57002 	.word	0xf7f57002
   2fca8:	f8bdfb91 	.word	0xf8bdfb91
   2fcac:	68a01002 	.word	0x68a01002
   2fcb0:	fb8cf7f5 	.word	0xfb8cf7f5
   2fcb4:	692268a3 	.word	0x692268a3
   2fcb8:	4297441f 	.word	0x4297441f
   2fcbc:	68e3bf08 	.word	0x68e3bf08
   2fcc0:	bf0860a7 	.word	0xbf0860a7
   2fcc4:	b90d60a3 	.word	0xb90d60a3
   2fcc8:	bdf0b003 	.word	0xbdf0b003
   2fccc:	21054630 	.word	0x21054630
   2fcd0:	5002f8ad 	.word	0x5002f8ad
   2fcd4:	fb7af7f5 	.word	0xfb7af7f5
   2fcd8:	1002f8bd 	.word	0x1002f8bd
   2fcdc:	f7f568e0 	.word	0xf7f568e0
   2fce0:	f8bdfb75 	.word	0xf8bdfb75
   2fce4:	68e32002 	.word	0x68e32002
   2fce8:	60a34413 	.word	0x60a34413
   2fcec:	bdf0b003 	.word	0xbdf0b003
   2fcf0:	fb36f7f5 	.word	0xfb36f7f5
   2fcf4:	2105e74f 	.word	0x2105e74f
   2fcf8:	f8ad4630 	.word	0xf8ad4630
   2fcfc:	f7f55002 	.word	0xf7f55002
   2fd00:	f8bdfb65 	.word	0xf8bdfb65
   2fd04:	68e01002 	.word	0x68e01002
   2fd08:	fb60f7f5 	.word	0xfb60f7f5
   2fd0c:	2002f8bd 	.word	0x2002f8bd
   2fd10:	441368e3 	.word	0x441368e3
   2fd14:	e7a560a3 	.word	0xe7a560a3
   2fd18:	46302105 	.word	0x46302105
   2fd1c:	5002f8ad 	.word	0x5002f8ad
   2fd20:	fb54f7f5 	.word	0xfb54f7f5
   2fd24:	1002f8bd 	.word	0x1002f8bd
   2fd28:	f7f568e0 	.word	0xf7f568e0
   2fd2c:	f8bdfb4f 	.word	0xf8bdfb4f
   2fd30:	68e32002 	.word	0x68e32002
   2fd34:	60a34413 	.word	0x60a34413
   2fd38:	bf00e761 	.word	0xbf00e761
   2fd3c:	2002c381 	.word	0x2002c381
   2fd40:	20024bc8 	.word	0x20024bc8
   2fd44:	20024bc0 	.word	0x20024bc0
   2fd48:	20024bc4 	.word	0x20024bc4

0002fd4c <ipc_trace_handle>:
   2fd4c:	e92d2200 	.word	0xe92d2200
   2fd50:	4bb04ff0 	.word	0x4bb04ff0
   2fd54:	681bb083 	.word	0x681bb083
   2fd58:	695c6919 	.word	0x695c6919
   2fd5c:	741a7c18 	.word	0x741a7c18
   2fd60:	745a7c58 	.word	0x745a7c58
   2fd64:	749a7c98 	.word	0x749a7c98
   2fd68:	74da7cd8 	.word	0x74da7cd8
   2fd6c:	751a7d18 	.word	0x751a7d18
   2fd70:	755a7d58 	.word	0x755a7d58
   2fd74:	759a7d98 	.word	0x759a7d98
   2fd78:	75da7dd8 	.word	0x75da7dd8
   2fd7c:	3901b1b9 	.word	0x3901b1b9
   2fd80:	d8142903 	.word	0xd8142903
   2fd84:	f011e8df 	.word	0xf011e8df
   2fd88:	010300d6 	.word	0x010300d6
   2fd8c:	00160004 	.word	0x00160004
   2fd90:	20032501 	.word	0x20032501
   2fd94:	f06f2200 	.word	0xf06f2200
   2fd98:	4c9f015f 	.word	0x4c9f015f
   2fd9c:	7a1c7025 	.word	0x7a1c7025
   2fda0:	7a587218 	.word	0x7a587218
   2fda4:	7a98725a 	.word	0x7a98725a
   2fda8:	7ada729a 	.word	0x7ada729a
   2fdac:	b00372d9 	.word	0xb00372d9
   2fdb0:	8ff0e8bd 	.word	0x8ff0e8bd
   2fdb4:	22002104 	.word	0x22002104
   2fdb8:	005ff06f 	.word	0x005ff06f
   2fdbc:	72197a1c 	.word	0x72197a1c
   2fdc0:	725a7a59 	.word	0x725a7a59
   2fdc4:	7a9c4994 	.word	0x7a9c4994
   2fdc8:	7adc729a 	.word	0x7adc729a
   2fdcc:	700a72d8 	.word	0x700a72d8
   2fdd0:	2b00780b 	.word	0x2b00780b
   2fdd4:	8117f000 	.word	0x8117f000
   2fdd8:	681c4b90 	.word	0x681c4b90
   2fddc:	686368a2 	.word	0x686368a2
   2fde0:	d02d429a 	.word	0xd02d429a
   2fde4:	63eff64b 	.word	0x63eff64b
   2fde8:	3000f8ad 	.word	0x3000f8ad
   2fdec:	466e7823 	.word	0x466e7823
   2fdf0:	3004f88d 	.word	0x3004f88d
   2fdf4:	21056863 	.word	0x21056863
   2fdf8:	bf2a429a 	.word	0xbf2a429a
   2fdfc:	1a9f6927 	.word	0x1a9f6927
   2fe00:	429a1abf 	.word	0x429a1abf
   2fe04:	2500bf94 	.word	0x2500bf94
   2fe08:	b2bf68e5 	.word	0xb2bf68e5
   2fe0c:	1b5bbf88 	.word	0x1b5bbf88
   2fe10:	bf884630 	.word	0xbf884630
   2fe14:	f8adb29d 	.word	0xf8adb29d
   2fe18:	f7f57002 	.word	0xf7f57002
   2fe1c:	f8bdfad7 	.word	0xf8bdfad7
   2fe20:	68a01002 	.word	0x68a01002
   2fe24:	fad2f7f5 	.word	0xfad2f7f5
   2fe28:	692268a3 	.word	0x692268a3
   2fe2c:	4297441f 	.word	0x4297441f
   2fe30:	68e3bf08 	.word	0x68e3bf08
   2fe34:	bf0860a7 	.word	0xbf0860a7
   2fe38:	2d0060a3 	.word	0x2d0060a3
   2fe3c:	80d2f040 	.word	0x80d2f040
   2fe40:	681c4b77 	.word	0x681c4b77
   2fe44:	686368a2 	.word	0x686368a2
   2fe48:	d02d429a 	.word	0xd02d429a
   2fe4c:	63eff64b 	.word	0x63eff64b
   2fe50:	3000f8ad 	.word	0x3000f8ad
   2fe54:	466e7823 	.word	0x466e7823
   2fe58:	3004f88d 	.word	0x3004f88d
   2fe5c:	21056863 	.word	0x21056863
   2fe60:	bf2a429a 	.word	0xbf2a429a
   2fe64:	1a9f6927 	.word	0x1a9f6927
   2fe68:	429a1abf 	.word	0x429a1abf
   2fe6c:	2500bf94 	.word	0x2500bf94
   2fe70:	b2bf68e5 	.word	0xb2bf68e5
   2fe74:	1b5bbf88 	.word	0x1b5bbf88
   2fe78:	bf884630 	.word	0xbf884630
   2fe7c:	f8adb29d 	.word	0xf8adb29d
   2fe80:	f7f57002 	.word	0xf7f57002
   2fe84:	f8bdfaa3 	.word	0xf8bdfaa3
   2fe88:	68a01002 	.word	0x68a01002
   2fe8c:	fa9ef7f5 	.word	0xfa9ef7f5
   2fe90:	692268a3 	.word	0x692268a3
   2fe94:	4297441f 	.word	0x4297441f
   2fe98:	68e3bf08 	.word	0x68e3bf08
   2fe9c:	bf0860a7 	.word	0xbf0860a7
   2fea0:	2d0060a3 	.word	0x2d0060a3
   2fea4:	808df040 	.word	0x808df040
   2fea8:	681c4b5e 	.word	0x681c4b5e
   2feac:	686368a2 	.word	0x686368a2
   2feb0:	f43f429a 	.word	0xf43f429a
   2feb4:	f64baf7c 	.word	0xf64baf7c
   2feb8:	f8ad63ef 	.word	0xf8ad63ef
   2febc:	78233000 	.word	0x78233000
   2fec0:	f88d466e 	.word	0xf88d466e
   2fec4:	68633004 	.word	0x68633004
   2fec8:	429a2105 	.word	0x429a2105
   2fecc:	6927bf2a 	.word	0x6927bf2a
   2fed0:	1abf1a9f 	.word	0x1abf1a9f
   2fed4:	bf94429a 	.word	0xbf94429a
   2fed8:	68e52500 	.word	0x68e52500
   2fedc:	bf88b2bf 	.word	0xbf88b2bf
   2fee0:	46301b5b 	.word	0x46301b5b
   2fee4:	b29dbf88 	.word	0xb29dbf88
   2fee8:	7002f8ad 	.word	0x7002f8ad
   2feec:	fa6ef7f5 	.word	0xfa6ef7f5
   2fef0:	1002f8bd 	.word	0x1002f8bd
   2fef4:	f7f568a0 	.word	0xf7f568a0
   2fef8:	68a3fa69 	.word	0x68a3fa69
   2fefc:	441f6922 	.word	0x441f6922
   2ff00:	bf084297 	.word	0xbf084297
   2ff04:	60a768e3 	.word	0x60a768e3
   2ff08:	60a3bf08 	.word	0x60a3bf08
   2ff0c:	f43f2d00 	.word	0xf43f2d00
   2ff10:	2105af4e 	.word	0x2105af4e
   2ff14:	f8ad4630 	.word	0xf8ad4630
   2ff18:	f7f55002 	.word	0xf7f55002
   2ff1c:	f8bdfa57 	.word	0xf8bdfa57
   2ff20:	68e01002 	.word	0x68e01002
   2ff24:	fa52f7f5 	.word	0xfa52f7f5
   2ff28:	2002f8bd 	.word	0x2002f8bd
   2ff2c:	441368e3 	.word	0x441368e3
   2ff30:	e73c60a3 	.word	0xe73c60a3
   2ff34:	78114a38 	.word	0x78114a38
   2ff38:	2100b109 	.word	0x2100b109
   2ff3c:	68a57011 	.word	0x68a57011
   2ff40:	d0392d00 	.word	0xd0392d00
   2ff44:	0c00f04f 	.word	0x0c00f04f
   2ff48:	a0d4f8df 	.word	0xa0d4f8df
   2ff4c:	b0ccf8df 	.word	0xb0ccf8df
   2ff50:	46e14934 	.word	0x46e14934
   2ff54:	46624666 	.word	0x46624666
   2ff58:	e000f8d1 	.word	0xe000f8d1
   2ff5c:	8000f8da 	.word	0x8000f8da
   2ff60:	7000f8db 	.word	0x7000f8db
   2ff64:	2963e008 	.word	0x2963e008
   2ff68:	2961d016 	.word	0x2961d016
   2ff6c:	4607bf04 	.word	0x4607bf04
   2ff70:	32012601 	.word	0x32012601
   2ff74:	d01342aa 	.word	0xd01342aa
   2ff78:	eb041c91 	.word	0xeb041c91
   2ff7c:	68480181 	.word	0x68480181
   2ff80:	29627801 	.word	0x29627801
   2ff84:	4680d1ef 	.word	0x4680d1ef
   2ff88:	0901f04f 	.word	0x0901f04f
   2ff8c:	f7f5e7f1 	.word	0xf7f5e7f1
   2ff90:	b003f9df 	.word	0xb003f9df
   2ff94:	8ff0e8bd 	.word	0x8ff0e8bd
   2ff98:	f04f4686 	.word	0xf04f4686
   2ff9c:	e7e80c01 	.word	0xe7e80c01
   2ffa0:	f1b9bba6 	.word	0xf1b9bba6
   2ffa4:	d0010f00 	.word	0xd0010f00
   2ffa8:	8000f8ca 	.word	0x8000f8ca
   2ffac:	0f00f1bc 	.word	0x0f00f1bc
   2ffb0:	4a1cd002 	.word	0x4a1cd002
   2ffb4:	e000f8c2 	.word	0xe000f8c2
   2ffb8:	22002001 	.word	0x22002001
   2ffbc:	015ff06f 	.word	0x015ff06f
   2ffc0:	2105e6ed 	.word	0x2105e6ed
   2ffc4:	f8ad4630 	.word	0xf8ad4630
   2ffc8:	f7f55002 	.word	0xf7f55002
   2ffcc:	f8bdf9ff 	.word	0xf8bdf9ff
   2ffd0:	68e01002 	.word	0x68e01002
   2ffd4:	f9faf7f5 	.word	0xf9faf7f5
   2ffd8:	2002f8bd 	.word	0x2002f8bd
   2ffdc:	441368e3 	.word	0x441368e3
   2ffe0:	e76160a3 	.word	0xe76160a3
   2ffe4:	46302105 	.word	0x46302105
   2ffe8:	5002f8ad 	.word	0x5002f8ad
   2ffec:	f9eef7f5 	.word	0xf9eef7f5
   2fff0:	1002f8bd 	.word	0x1002f8bd
   2fff4:	f7f568e0 	.word	0xf7f568e0
   2fff8:	f8bdf9e9 	.word	0xf8bdf9e9
   2fffc:	68e32002 	.word	0x68e32002
   30000:	60a34413 	.word	0x60a34413
   30004:	f7f5e71c 	.word	0xf7f5e71c
   30008:	e6e5f9ab 	.word	0xe6e5f9ab
   3000c:	7000f8cb 	.word	0x7000f8cb
   30010:	bf00e7c7 	.word	0xbf00e7c7
   30014:	20024bcc 	.word	0x20024bcc
   30018:	2002c381 	.word	0x2002c381
   3001c:	20024bc8 	.word	0x20024bc8
   30020:	20024bc0 	.word	0x20024bc0
   30024:	20024bc4 	.word	0x20024bc4

00030028 <rpc_trace_coredump_in_progress>:
   30028:	78184b01 	.word	0x78184b01
   3002c:	bf004770 	.word	0xbf004770
   30030:	2002c381 	.word	0x2002c381

00030034 <ecp_modp>:
   30034:	6e4bb570 	.word	0x6e4bb570
   30038:	2b004604 	.word	0x2b004604
   3003c:	6803d03d 	.word	0x6803d03d
   30040:	2b00460d 	.word	0x2b00460d
   30044:	4620db2f 	.word	0x4620db2f
   30048:	fe88f005 	.word	0xfe88f005
   3004c:	ebb06dab 	.word	0xebb06dab
   30050:	d82d0f43 	.word	0xd82d0f43
   30054:	46206e6b 	.word	0x46206e6b
   30058:	46064798 	.word	0x46064798
   3005c:	3504bb08 	.word	0x3504bb08
   30060:	2100e00a 	.word	0x2100e00a
   30064:	f0064620 	.word	0xf0064620
   30068:	b1a0f949 	.word	0xb1a0f949
   3006c:	4621462a 	.word	0x4621462a
   30070:	f0064620 	.word	0xf0064620
   30074:	b9e8fafb 	.word	0xb9e8fafb
   30078:	2b006823 	.word	0x2b006823
   3007c:	4629dbf1 	.word	0x4629dbf1
   30080:	f0064620 	.word	0xf0064620
   30084:	2800f8d3 	.word	0x2800f8d3
   30088:	462adb0b 	.word	0x462adb0b
   3008c:	46204621 	.word	0x46204621
   30090:	fa2cf006 	.word	0xfa2cf006
   30094:	4629b970 	.word	0x4629b970
   30098:	f0064620 	.word	0xf0064620
   3009c:	2800f8c7 	.word	0x2800f8c7
   300a0:	4630daf3 	.word	0x4630daf3
   300a4:	2100bd70 	.word	0x2100bd70
   300a8:	f928f006 	.word	0xf928f006
   300ac:	d0ca2800 	.word	0xd0ca2800
   300b0:	e7f64e05 	.word	0xe7f64e05
   300b4:	46304606 	.word	0x46304606
   300b8:	1d0abd70 	.word	0x1d0abd70
   300bc:	4070e8bd 	.word	0x4070e8bd
   300c0:	f0074601 	.word	0xf0074601
   300c4:	bf00b8cf 	.word	0xbf00b8cf
   300c8:	ffffb080 	.word	0xffffb080

000300cc <ecp_double_jac>:
   300cc:	43f0e92d 	.word	0x43f0e92d
   300d0:	b08d4606 	.word	0xb08d4606
   300d4:	46884668 	.word	0x46884668
   300d8:	f0054615 	.word	0xf0054615
   300dc:	a803fbe5 	.word	0xa803fbe5
   300e0:	fbe2f005 	.word	0xfbe2f005
   300e4:	f005a806 	.word	0xf005a806
   300e8:	a809fbdf 	.word	0xa809fbdf
   300ec:	fbdcf005 	.word	0xfbdcf005
   300f0:	2b0069b3 	.word	0x2b0069b3
   300f4:	80b2f000 	.word	0x80b2f000
   300f8:	4629462a 	.word	0x4629462a
   300fc:	f006a803 	.word	0xf006a803
   30100:	4604fbe9 	.word	0x4604fbe9
   30104:	4668b178 	.word	0x4668b178
   30108:	fbd6f005 	.word	0xfbd6f005
   3010c:	f005a803 	.word	0xf005a803
   30110:	a806fbd3 	.word	0xa806fbd3
   30114:	fbd0f005 	.word	0xfbd0f005
   30118:	f005a809 	.word	0xf005a809
   3011c:	4620fbcd 	.word	0x4620fbcd
   30120:	e8bdb00d 	.word	0xe8bdb00d
   30124:	463183f0 	.word	0x463183f0
   30128:	f7ffa803 	.word	0xf7ffa803
   3012c:	4604ff83 	.word	0x4604ff83
   30130:	d1e82800 	.word	0xd1e82800
   30134:	a9032203 	.word	0xa9032203
   30138:	f0064668 	.word	0xf0064668
   3013c:	4604fcc3 	.word	0x4604fcc3
   30140:	d1e02800 	.word	0xd1e02800
   30144:	e0071d37 	.word	0xe0071d37
   30148:	4669463a 	.word	0x4669463a
   3014c:	f0064668 	.word	0xf0064668
   30150:	4604f9cd 	.word	0x4604f9cd
   30154:	d1d62800 	.word	0xd1d62800
   30158:	46684639 	.word	0x46684639
   3015c:	f866f006 	.word	0xf866f006
   30160:	daf12800 	.word	0xdaf12800
   30164:	0910f106 	.word	0x0910f106
   30168:	21004648 	.word	0x21004648
   3016c:	f8c6f006 	.word	0xf8c6f006
   30170:	f0402800 	.word	0xf0402800
   30174:	f10580e2 	.word	0xf10580e2
   30178:	464a090c 	.word	0x464a090c
   3017c:	a8064649 	.word	0xa8064649
   30180:	fba8f006 	.word	0xfba8f006
   30184:	28004604 	.word	0x28004604
   30188:	4631d1bd 	.word	0x4631d1bd
   3018c:	f7ffa806 	.word	0xf7ffa806
   30190:	4604ff51 	.word	0x4604ff51
   30194:	d1b62800 	.word	0xd1b62800
   30198:	a8062101 	.word	0xa8062101
   3019c:	ff20f005 	.word	0xff20f005
   301a0:	b1404604 	.word	0xb1404604
   301a4:	a906e7af 	.word	0xa906e7af
   301a8:	4608463a 	.word	0x4608463a
   301ac:	f99ef006 	.word	0xf99ef006
   301b0:	28004604 	.word	0x28004604
   301b4:	4639d1a7 	.word	0x4639d1a7
   301b8:	f006a806 	.word	0xf006a806
   301bc:	2800f837 	.word	0x2800f837
   301c0:	aa06daf1 	.word	0xaa06daf1
   301c4:	a8034629 	.word	0xa8034629
   301c8:	fb84f006 	.word	0xfb84f006
   301cc:	28004604 	.word	0x28004604
   301d0:	4631d199 	.word	0x4631d199
   301d4:	f7ffa803 	.word	0xf7ffa803
   301d8:	4604ff2d 	.word	0x4604ff2d
   301dc:	d1922800 	.word	0xd1922800
   301e0:	a8032101 	.word	0xa8032101
   301e4:	fefcf005 	.word	0xfefcf005
   301e8:	b1404604 	.word	0xb1404604
   301ec:	a903e78b 	.word	0xa903e78b
   301f0:	4608463a 	.word	0x4608463a
   301f4:	f97af006 	.word	0xf97af006
   301f8:	28004604 	.word	0x28004604
   301fc:	4639d183 	.word	0x4639d183
   30200:	f006a803 	.word	0xf006a803
   30204:	2800f813 	.word	0x2800f813
   30208:	aa06daf1 	.word	0xaa06daf1
   3020c:	a8094611 	.word	0xa8094611
   30210:	fb60f006 	.word	0xfb60f006
   30214:	28004604 	.word	0x28004604
   30218:	af75f47f 	.word	0xaf75f47f
   3021c:	a8094631 	.word	0xa8094631
   30220:	ff08f7ff 	.word	0xff08f7ff
   30224:	28004604 	.word	0x28004604
   30228:	af6df47f 	.word	0xaf6df47f
   3022c:	a8092101 	.word	0xa8092101
   30230:	fed6f005 	.word	0xfed6f005
   30234:	28004604 	.word	0x28004604
   30238:	af65f47f 	.word	0xaf65f47f
   3023c:	a8094639 	.word	0xa8094639
   30240:	fff4f005 	.word	0xfff4f005
   30244:	f2c02800 	.word	0xf2c02800
   30248:	a90980c5 	.word	0xa90980c5
   3024c:	4608463a 	.word	0x4608463a
   30250:	f94cf006 	.word	0xf94cf006
   30254:	28004604 	.word	0x28004604
   30258:	e754d0f0 	.word	0xe754d0f0
   3025c:	0218f105 	.word	0x0218f105
   30260:	a8034611 	.word	0xa8034611
   30264:	fb36f006 	.word	0xfb36f006
   30268:	28004604 	.word	0x28004604
   3026c:	af4bf47f 	.word	0xaf4bf47f
   30270:	a8034631 	.word	0xa8034631
   30274:	fedef7ff 	.word	0xfedef7ff
   30278:	28004604 	.word	0x28004604
   3027c:	af43f47f 	.word	0xaf43f47f
   30280:	4629aa03 	.word	0x4629aa03
   30284:	f006a806 	.word	0xf006a806
   30288:	4604f9f1 	.word	0x4604f9f1
   3028c:	f47f2800 	.word	0xf47f2800
   30290:	1d37af3a 	.word	0x1d37af3a
   30294:	a906e008 	.word	0xa906e008
   30298:	4608463a 	.word	0x4608463a
   3029c:	f926f006 	.word	0xf926f006
   302a0:	28004604 	.word	0x28004604
   302a4:	af2ff47f 	.word	0xaf2ff47f
   302a8:	a8064639 	.word	0xa8064639
   302ac:	ffbef005 	.word	0xffbef005
   302b0:	daf02800 	.word	0xdaf02800
   302b4:	4629aa03 	.word	0x4629aa03
   302b8:	f006a809 	.word	0xf006a809
   302bc:	4604fa4b 	.word	0x4604fa4b
   302c0:	e720b170 	.word	0xe720b170
   302c4:	a8092100 	.word	0xa8092100
   302c8:	f818f006 	.word	0xf818f006
   302cc:	a909b158 	.word	0xa909b158
   302d0:	4608463a 	.word	0x4608463a
   302d4:	f9caf006 	.word	0xf9caf006
   302d8:	28004604 	.word	0x28004604
   302dc:	af13f47f 	.word	0xaf13f47f
   302e0:	2b009b09 	.word	0x2b009b09
   302e4:	aa09dbee 	.word	0xaa09dbee
   302e8:	a803a906 	.word	0xa803a906
   302ec:	faf2f006 	.word	0xfaf2f006
   302f0:	28004604 	.word	0x28004604
   302f4:	af07f47f 	.word	0xaf07f47f
   302f8:	a8034631 	.word	0xa8034631
   302fc:	fe9af7ff 	.word	0xfe9af7ff
   30300:	28004604 	.word	0x28004604
   30304:	aefff47f 	.word	0xaefff47f
   30308:	a9032203 	.word	0xa9032203
   3030c:	f0064668 	.word	0xf0064668
   30310:	4604fbd9 	.word	0x4604fbd9
   30314:	f47f2800 	.word	0xf47f2800
   30318:	4639aef6 	.word	0x4639aef6
   3031c:	f0054668 	.word	0xf0054668
   30320:	2800ff85 	.word	0x2800ff85
   30324:	af27f6ff 	.word	0xaf27f6ff
   30328:	4669463a 	.word	0x4669463a
   3032c:	f0064668 	.word	0xf0064668
   30330:	4604f8dd 	.word	0x4604f8dd
   30334:	d0f02800 	.word	0xd0f02800
   30338:	f105e6e5 	.word	0xf105e6e5
   3033c:	46110218 	.word	0x46110218
   30340:	f006a803 	.word	0xf006a803
   30344:	4604fac7 	.word	0x4604fac7
   30348:	f47f2800 	.word	0xf47f2800
   3034c:	4631aedc 	.word	0x4631aedc
   30350:	f7ffa803 	.word	0xf7ffa803
   30354:	4604fe6f 	.word	0x4604fe6f
   30358:	f47f2800 	.word	0xf47f2800
   3035c:	aa03aed4 	.word	0xaa03aed4
   30360:	a8064611 	.word	0xa8064611
   30364:	fab6f006 	.word	0xfab6f006
   30368:	28004604 	.word	0x28004604
   3036c:	aecbf47f 	.word	0xaecbf47f
   30370:	a8064631 	.word	0xa8064631
   30374:	fe5ef7ff 	.word	0xfe5ef7ff
   30378:	28004604 	.word	0x28004604
   3037c:	aec3f47f 	.word	0xaec3f47f
   30380:	a906464a 	.word	0xa906464a
   30384:	f006a803 	.word	0xf006a803
   30388:	4604faa5 	.word	0x4604faa5
   3038c:	f47f2800 	.word	0xf47f2800
   30390:	4631aeba 	.word	0x4631aeba
   30394:	f7ffa803 	.word	0xf7ffa803
   30398:	4604fe4d 	.word	0x4604fe4d
   3039c:	f47f2800 	.word	0xf47f2800
   303a0:	aa03aeb2 	.word	0xaa03aeb2
   303a4:	46684669 	.word	0x46684669
   303a8:	f960f006 	.word	0xf960f006
   303ac:	28004604 	.word	0x28004604
   303b0:	aea9f47f 	.word	0xaea9f47f
   303b4:	46684639 	.word	0x46684639
   303b8:	ff38f005 	.word	0xff38f005
   303bc:	f6ff2800 	.word	0xf6ff2800
   303c0:	463aaeda 	.word	0x463aaeda
   303c4:	46684669 	.word	0x46684669
   303c8:	f890f006 	.word	0xf890f006
   303cc:	28004604 	.word	0x28004604
   303d0:	e698d0f0 	.word	0xe698d0f0
   303d4:	4669466a 	.word	0x4669466a
   303d8:	f006a806 	.word	0xf006a806
   303dc:	4604fa7b 	.word	0x4604fa7b
   303e0:	f47f2800 	.word	0xf47f2800
   303e4:	4631ae90 	.word	0x4631ae90
   303e8:	f7ffa806 	.word	0xf7ffa806
   303ec:	4604fe23 	.word	0x4604fe23
   303f0:	f47f2800 	.word	0xf47f2800
   303f4:	a906ae88 	.word	0xa906ae88
   303f8:	4608aa03 	.word	0x4608aa03
   303fc:	f9aaf006 	.word	0xf9aaf006
   30400:	28004604 	.word	0x28004604
   30404:	ae7ff47f 	.word	0xae7ff47f
   30408:	2b009b06 	.word	0x2b009b06
   3040c:	2100da0d 	.word	0x2100da0d
   30410:	f005a806 	.word	0xf005a806
   30414:	b140ff73 	.word	0xb140ff73
   30418:	463aa906 	.word	0x463aa906
   3041c:	f0064608 	.word	0xf0064608
   30420:	4604f925 	.word	0x4604f925
   30424:	d0ef2800 	.word	0xd0ef2800
   30428:	a906e66d 	.word	0xa906e66d
   3042c:	4608aa03 	.word	0x4608aa03
   30430:	f990f006 	.word	0xf990f006
   30434:	28004604 	.word	0x28004604
   30438:	ae65f47f 	.word	0xae65f47f
   3043c:	2b009b06 	.word	0x2b009b06
   30440:	2100da0d 	.word	0x2100da0d
   30444:	f005a806 	.word	0xf005a806
   30448:	b140ff59 	.word	0xb140ff59
   3044c:	463aa906 	.word	0x463aa906
   30450:	f0064608 	.word	0xf0064608
   30454:	4604f90b 	.word	0x4604f90b
   30458:	d0ef2800 	.word	0xd0ef2800
   3045c:	a903e653 	.word	0xa903e653
   30460:	4608aa06 	.word	0x4608aa06
   30464:	f976f006 	.word	0xf976f006
   30468:	28004604 	.word	0x28004604
   3046c:	ae4bf47f 	.word	0xae4bf47f
   30470:	2b009b03 	.word	0x2b009b03
   30474:	2100da0d 	.word	0x2100da0d
   30478:	f005a803 	.word	0xf005a803
   3047c:	b140ff3f 	.word	0xb140ff3f
   30480:	463aa903 	.word	0x463aa903
   30484:	f0064608 	.word	0xf0064608
   30488:	4604f8f1 	.word	0x4604f8f1
   3048c:	d0ef2800 	.word	0xd0ef2800
   30490:	a903e639 	.word	0xa903e639
   30494:	4608466a 	.word	0x4608466a
   30498:	fa1cf006 	.word	0xfa1cf006
   3049c:	28004604 	.word	0x28004604
   304a0:	ae31f47f 	.word	0xae31f47f
   304a4:	a8034631 	.word	0xa8034631
   304a8:	fdc4f7ff 	.word	0xfdc4f7ff
   304ac:	28004604 	.word	0x28004604
   304b0:	ae29f47f 	.word	0xae29f47f
   304b4:	aa09a903 	.word	0xaa09a903
   304b8:	f0064608 	.word	0xf0064608
   304bc:	4604f94b 	.word	0x4604f94b
   304c0:	f47f2800 	.word	0xf47f2800
   304c4:	9b03ae20 	.word	0x9b03ae20
   304c8:	da0d2b00 	.word	0xda0d2b00
   304cc:	a8032100 	.word	0xa8032100
   304d0:	ff14f005 	.word	0xff14f005
   304d4:	a903b140 	.word	0xa903b140
   304d8:	4608463a 	.word	0x4608463a
   304dc:	f8c6f006 	.word	0xf8c6f006
   304e0:	28004604 	.word	0x28004604
   304e4:	e60ed0ef 	.word	0xe60ed0ef
   304e8:	0218f105 	.word	0x0218f105
   304ec:	a8094649 	.word	0xa8094649
   304f0:	f9f0f006 	.word	0xf9f0f006
   304f4:	28004604 	.word	0x28004604
   304f8:	ae05f47f 	.word	0xae05f47f
   304fc:	a8094631 	.word	0xa8094631
   30500:	fd98f7ff 	.word	0xfd98f7ff
   30504:	28004604 	.word	0x28004604
   30508:	adfdf47f 	.word	0xadfdf47f
   3050c:	a8092101 	.word	0xa8092101
   30510:	fd66f005 	.word	0xfd66f005
   30514:	28004604 	.word	0x28004604
   30518:	adf5f47f 	.word	0xadf5f47f
   3051c:	a8094639 	.word	0xa8094639
   30520:	fe84f005 	.word	0xfe84f005
   30524:	db082800 	.word	0xdb082800
   30528:	463aa909 	.word	0x463aa909
   3052c:	f0054608 	.word	0xf0054608
   30530:	4604ffdd 	.word	0x4604ffdd
   30534:	d0f12800 	.word	0xd0f12800
   30538:	a906e5e5 	.word	0xa906e5e5
   3053c:	f0054640 	.word	0xf0054640
   30540:	4604fa37 	.word	0x4604fa37
   30544:	f47f2800 	.word	0xf47f2800
   30548:	a903adde 	.word	0xa903adde
   3054c:	000cf108 	.word	0x000cf108
   30550:	fa2ef005 	.word	0xfa2ef005
   30554:	28004604 	.word	0x28004604
   30558:	add5f47f 	.word	0xadd5f47f
   3055c:	0018f108 	.word	0x0018f108
   30560:	f005a909 	.word	0xf005a909
   30564:	4604fa25 	.word	0x4604fa25
   30568:	bf00e5cd 	.word	0xbf00e5cd

0003056c <ecp_normalize_jac>:
   3056c:	f101b5f0 	.word	0xf101b5f0
   30570:	b0870518 	.word	0xb0870518
   30574:	4607460e 	.word	0x4607460e
   30578:	46282100 	.word	0x46282100
   3057c:	febef005 	.word	0xfebef005
   30580:	4604b918 	.word	0x4604b918
   30584:	b0074620 	.word	0xb0074620
   30588:	4668bdf0 	.word	0x4668bdf0
   3058c:	f98cf005 	.word	0xf98cf005
   30590:	f005a803 	.word	0xf005a803
   30594:	4668f989 	.word	0x4668f989
   30598:	46291d3a 	.word	0x46291d3a
   3059c:	f9b8f007 	.word	0xf9b8f007
   305a0:	b1404604 	.word	0xb1404604
   305a4:	f0054668 	.word	0xf0054668
   305a8:	a803f987 	.word	0xa803f987
   305ac:	f984f005 	.word	0xf984f005
   305b0:	b0074620 	.word	0xb0074620
   305b4:	466abdf0 	.word	0x466abdf0
   305b8:	a8034669 	.word	0xa8034669
   305bc:	f98af006 	.word	0xf98af006
   305c0:	28004604 	.word	0x28004604
   305c4:	4639d1ee 	.word	0x4639d1ee
   305c8:	f7ffa803 	.word	0xf7ffa803
   305cc:	4604fd33 	.word	0x4604fd33
   305d0:	d1e72800 	.word	0xd1e72800
   305d4:	4631aa03 	.word	0x4631aa03
   305d8:	f0064630 	.word	0xf0064630
   305dc:	4604f97b 	.word	0x4604f97b
   305e0:	d1df2800 	.word	0xd1df2800
   305e4:	46304639 	.word	0x46304639
   305e8:	fd24f7ff 	.word	0xfd24f7ff
   305ec:	28004604 	.word	0x28004604
   305f0:	360cd1d8 	.word	0x360cd1d8
   305f4:	46304631 	.word	0x46304631
   305f8:	f006aa03 	.word	0xf006aa03
   305fc:	4604f96b 	.word	0x4604f96b
   30600:	d1cf2800 	.word	0xd1cf2800
   30604:	46304639 	.word	0x46304639
   30608:	fd14f7ff 	.word	0xfd14f7ff
   3060c:	28004604 	.word	0x28004604
   30610:	466ad1c8 	.word	0x466ad1c8
   30614:	46304631 	.word	0x46304631
   30618:	f95cf006 	.word	0xf95cf006
   3061c:	28004604 	.word	0x28004604
   30620:	4639d1c0 	.word	0x4639d1c0
   30624:	f7ff4630 	.word	0xf7ff4630
   30628:	4604fd05 	.word	0x4604fd05
   3062c:	d1b92800 	.word	0xd1b92800
   30630:	21014628 	.word	0x21014628
   30634:	fb48f005 	.word	0xfb48f005
   30638:	e7b34604 	.word	0xe7b34604

0003063c <ecp_normalize_jac_many.part.3>:
   3063c:	4ff0e92d 	.word	0x4ff0e92d
   30640:	b08b4682 	.word	0xb08b4682
   30644:	4610468b 	.word	0x4610468b
   30648:	4616210c 	.word	0x4616210c
   3064c:	fd80f008 	.word	0xfd80f008
   30650:	f0002800 	.word	0xf0002800
   30654:	468080fe 	.word	0x468080fe
   30658:	f005a801 	.word	0xf005a801
   3065c:	a804f925 	.word	0xa804f925
   30660:	f922f005 	.word	0xf922f005
   30664:	f005a807 	.word	0xf005a807
   30668:	f8dbf91f 	.word	0xf8dbf91f
   3066c:	46401000 	.word	0x46401000
   30670:	f0053118 	.word	0xf0053118
   30674:	4604f99d 	.word	0x4604f99d
   30678:	2e01bb60 	.word	0x2e01bb60
   3067c:	46d9d946 	.word	0x46d9d946
   30680:	f1082701 	.word	0xf1082701
   30684:	e008050c 	.word	0xe008050c
   30688:	46514628 	.word	0x46514628
   3068c:	fcd2f7ff 	.word	0xfcd2f7ff
   30690:	4604350c 	.word	0x4604350c
   30694:	42beb968 	.word	0x42beb968
   30698:	f859d038 	.word	0xf859d038
   3069c:	f1a52f04 	.word	0xf1a52f04
   306a0:	3218010c 	.word	0x3218010c
   306a4:	f0064628 	.word	0xf0064628
   306a8:	3701f915 	.word	0x3701f915
   306ac:	28004604 	.word	0x28004604
   306b0:	a801d0ea 	.word	0xa801d0ea
   306b4:	f900f005 	.word	0xf900f005
   306b8:	f005a804 	.word	0xf005a804
   306bc:	a807f8fd 	.word	0xa807f8fd
   306c0:	f8faf005 	.word	0xf8faf005
   306c4:	a901e010 	.word	0xa901e010
   306c8:	f005a804 	.word	0xf005a804
   306cc:	4604f971 	.word	0x4604f971
   306d0:	d0532800 	.word	0xd0532800
   306d4:	f005a801 	.word	0xf005a801
   306d8:	a804f8ef 	.word	0xa804f8ef
   306dc:	f8ecf005 	.word	0xf8ecf005
   306e0:	f005a807 	.word	0xf005a807
   306e4:	b156f8e9 	.word	0xb156f8e9
   306e8:	eb064645 	.word	0xeb064645
   306ec:	eb080646 	.word	0xeb080646
   306f0:	46280686 	.word	0x46280686
   306f4:	f005350c 	.word	0xf005350c
   306f8:	42b5f8df 	.word	0x42b5f8df
   306fc:	4640d1f9 	.word	0x4640d1f9
   30700:	fd3af008 	.word	0xfd3af008
   30704:	b00b4620 	.word	0xb00b4620
   30708:	8ff0e8bd 	.word	0x8ff0e8bd
   3070c:	0546eb06 	.word	0x0546eb06
   30710:	f1a500ad 	.word	0xf1a500ad
   30714:	4441010c 	.word	0x4441010c
   30718:	0204f10a 	.word	0x0204f10a
   3071c:	f007a801 	.word	0xf007a801
   30720:	4604f8f7 	.word	0x4604f8f7
   30724:	d1d52800 	.word	0xd1d52800
   30728:	4380f106 	.word	0x4380f106
   3072c:	3b013d18 	.word	0x3b013d18
   30730:	eb0b4445 	.word	0xeb0b4445
   30734:	1e770b83 	.word	0x1e770b83
   30738:	d0c42f00 	.word	0xd0c42f00
   3073c:	a901462a 	.word	0xa901462a
   30740:	f006a804 	.word	0xf006a804
   30744:	4604f8c7 	.word	0x4604f8c7
   30748:	d1c32800 	.word	0xd1c32800
   3074c:	a8044651 	.word	0xa8044651
   30750:	fc70f7ff 	.word	0xfc70f7ff
   30754:	28004604 	.word	0x28004604
   30758:	f8dbd1bc 	.word	0xf8dbd1bc
   3075c:	a9012000 	.word	0xa9012000
   30760:	46083218 	.word	0x46083218
   30764:	f8b6f006 	.word	0xf8b6f006
   30768:	28004604 	.word	0x28004604
   3076c:	4651d1b2 	.word	0x4651d1b2
   30770:	f7ffa801 	.word	0xf7ffa801
   30774:	4604fc5f 	.word	0x4604fc5f
   30778:	d1ab2800 	.word	0xd1ab2800
   3077c:	4611aa04 	.word	0x4611aa04
   30780:	f006a807 	.word	0xf006a807
   30784:	4604f8a7 	.word	0x4604f8a7
   30788:	d1a32800 	.word	0xd1a32800
   3078c:	a8074651 	.word	0xa8074651
   30790:	fc50f7ff 	.word	0xfc50f7ff
   30794:	28004604 	.word	0x28004604
   30798:	f8dbd19c 	.word	0xf8dbd19c
   3079c:	aa071000 	.word	0xaa071000
   307a0:	f0064608 	.word	0xf0064608
   307a4:	4604f897 	.word	0x4604f897
   307a8:	d1932800 	.word	0xd1932800
   307ac:	f8db4651 	.word	0xf8db4651
   307b0:	f7ff0000 	.word	0xf7ff0000
   307b4:	4604fc3f 	.word	0x4604fc3f
   307b8:	d18b2800 	.word	0xd18b2800
   307bc:	1000f8db 	.word	0x1000f8db
   307c0:	310caa07 	.word	0x310caa07
   307c4:	f0064608 	.word	0xf0064608
   307c8:	4604f885 	.word	0x4604f885
   307cc:	d1812800 	.word	0xd1812800
   307d0:	0000f8db 	.word	0x0000f8db
   307d4:	300c4651 	.word	0x300c4651
   307d8:	fc2cf7ff 	.word	0xfc2cf7ff
   307dc:	28004604 	.word	0x28004604
   307e0:	af78f47f 	.word	0xaf78f47f
   307e4:	1000f8db 	.word	0x1000f8db
   307e8:	310caa04 	.word	0x310caa04
   307ec:	f0064608 	.word	0xf0064608
   307f0:	4604f871 	.word	0x4604f871
   307f4:	f47f2800 	.word	0xf47f2800
   307f8:	f8dbaf6d 	.word	0xf8dbaf6d
   307fc:	46510000 	.word	0x46510000
   30800:	f7ff300c 	.word	0xf7ff300c
   30804:	4604fc17 	.word	0x4604fc17
   30808:	f47f2800 	.word	0xf47f2800
   3080c:	f8daaf63 	.word	0xf8daaf63
   30810:	f8db1008 	.word	0xf8db1008
   30814:	f0050000 	.word	0xf0050000
   30818:	4604f869 	.word	0x4604f869
   3081c:	f47f2800 	.word	0xf47f2800
   30820:	f8dbaf59 	.word	0xf8dbaf59
   30824:	f8da0000 	.word	0xf8da0000
   30828:	300c1008 	.word	0x300c1008
   3082c:	f85ef005 	.word	0xf85ef005
   30830:	28004604 	.word	0x28004604
   30834:	af4ef47f 	.word	0xaf4ef47f
   30838:	0000f8db 	.word	0x0000f8db
   3083c:	30183d0c 	.word	0x30183d0c
   30840:	0b04f1ab 	.word	0x0b04f1ab
   30844:	f838f005 	.word	0xf838f005
   30848:	f43f2f00 	.word	0xf43f2f00
   3084c:	3f01af43 	.word	0x3f01af43
   30850:	4c01e772 	.word	0x4c01e772
   30854:	bf00e756 	.word	0xbf00e756
   30858:	ffffb280 	.word	0xffffb280

0003085c <symbol_0002b14>:
   3085c:	b510b1b8 	.word	0xb510b1b8
   30860:	227c4604 	.word	0x227c4604
   30864:	f00f2100 	.word	0xf00f2100
   30868:	f104fa71 	.word	0xf104fa71
   3086c:	f005007c 	.word	0xf005007c
   30870:	f104f81b 	.word	0xf104f81b
   30874:	f0050088 	.word	0xf0050088
   30878:	f104f817 	.word	0xf104f817
   3087c:	f0050094 	.word	0xf0050094
   30880:	f104f813 	.word	0xf104f813
   30884:	e8bd00a0 	.word	0xe8bd00a0
   30888:	f0054010 	.word	0xf0054010
   3088c:	4770b80d 	.word	0x4770b80d

00030890 <symbol_0000ef7>:
   30890:	d0482800 	.word	0xd0482800
   30894:	6e03b570 	.word	0x6e03b570
   30898:	2b014604 	.word	0x2b014604
   3089c:	6f60d123 	.word	0x6f60d123
   308a0:	6fa2b1c8 	.word	0x6fa2b1c8
   308a4:	2600b1aa 	.word	0x2600b1aa
   308a8:	03c6eb06 	.word	0x03c6eb06
   308ac:	0583eb10 	.word	0x0583eb10
   308b0:	4628d035 	.word	0x4628d035
   308b4:	f800f005 	.word	0xf800f005
   308b8:	000cf105 	.word	0x000cf105
   308bc:	fffcf004 	.word	0xfffcf004
   308c0:	0018f105 	.word	0x0018f105
   308c4:	fff8f004 	.word	0xfff8f004
   308c8:	36016fa2 	.word	0x36016fa2
   308cc:	6f604296 	.word	0x6f604296
   308d0:	f008d3ea 	.word	0xf008d3ea
   308d4:	2200fc51 	.word	0x2200fc51
   308d8:	037cf104 	.word	0x037cf104
   308dc:	34017022 	.word	0x34017022
   308e0:	d1fb429c 	.word	0xd1fb429c
   308e4:	3004bd70 	.word	0x3004bd70
   308e8:	ffe6f004 	.word	0xffe6f004
   308ec:	0010f104 	.word	0x0010f104
   308f0:	ffe2f004 	.word	0xffe2f004
   308f4:	001cf104 	.word	0x001cf104
   308f8:	ffdef004 	.word	0xffdef004
   308fc:	0028f104 	.word	0x0028f104
   30900:	ffdaf004 	.word	0xffdaf004
   30904:	0034f104 	.word	0x0034f104
   30908:	ffd6f004 	.word	0xffd6f004
   3090c:	0040f104 	.word	0x0040f104
   30910:	ffd2f004 	.word	0xffd2f004
   30914:	004cf104 	.word	0x004cf104
   30918:	ffcef004 	.word	0xffcef004
   3091c:	3601e7bf 	.word	0x3601e7bf
   30920:	d3c14296 	.word	0xd3c14296
   30924:	4770e7d5 	.word	0x4770e7d5

00030928 <symbol_0001d5f>:
   30928:	b510b1a8 	.word	0xb510b1a8
   3092c:	f7ff4604 	.word	0xf7ff4604
   30930:	f104ffaf 	.word	0xf104ffaf
   30934:	f004007c 	.word	0xf004007c
   30938:	f104ffbf 	.word	0xf104ffbf
   3093c:	f0040088 	.word	0xf0040088
   30940:	f104ffbb 	.word	0xf104ffbb
   30944:	f0040094 	.word	0xf0040094
   30948:	f104ffb7 	.word	0xf104ffb7
   3094c:	e8bd00a0 	.word	0xe8bd00a0
   30950:	f0044010 	.word	0xf0044010
   30954:	4770bfb1 	.word	0x4770bfb1

00030958 <symbol_000d41f>:
   30958:	2101b510 	.word	0x2101b510
   3095c:	f0054604 	.word	0xf0054604
   30960:	b100f9b3 	.word	0xb100f9b3
   30964:	2101bd10 	.word	0x2101bd10
   30968:	000cf104 	.word	0x000cf104
   3096c:	f9acf005 	.word	0xf9acf005
   30970:	d1f72800 	.word	0xd1f72800
   30974:	f1044601 	.word	0xf1044601
   30978:	e8bd0018 	.word	0xe8bd0018
   3097c:	f0054010 	.word	0xf0054010
   30980:	bf00b9a3 	.word	0xbf00b9a3

00030984 <ecp_add_mixed>:
   30984:	47f0e92d 	.word	0x47f0e92d
   30988:	0518f102 	.word	0x0518f102
   3098c:	4681b096 	.word	0x4681b096
   30990:	46284688 	.word	0x46284688
   30994:	46172100 	.word	0x46172100
   30998:	f005461e 	.word	0xf005461e
   3099c:	2800fcaf 	.word	0x2800fcaf
   309a0:	6a33d048 	.word	0x6a33d048
   309a4:	f106b18b 	.word	0xf106b18b
   309a8:	46200418 	.word	0x46200418
   309ac:	f0052100 	.word	0xf0052100
   309b0:	2800fca5 	.word	0x2800fca5
   309b4:	80d7f000 	.word	0x80d7f000
   309b8:	b1336a33 	.word	0xb1336a33
   309bc:	21014620 	.word	0x21014620
   309c0:	fc9cf005 	.word	0xfc9cf005
   309c4:	f0402800 	.word	0xf0402800
   309c8:	a80180e7 	.word	0xa80180e7
   309cc:	ff6cf004 	.word	0xff6cf004
   309d0:	f004a804 	.word	0xf004a804
   309d4:	a807ff69 	.word	0xa807ff69
   309d8:	ff66f004 	.word	0xff66f004
   309dc:	f004a80a 	.word	0xf004a80a
   309e0:	a80dff63 	.word	0xa80dff63
   309e4:	ff60f004 	.word	0xff60f004
   309e8:	f004a810 	.word	0xf004a810
   309ec:	a813ff5d 	.word	0xa813ff5d
   309f0:	ff5af004 	.word	0xff5af004
   309f4:	4629462a 	.word	0x4629462a
   309f8:	f005a801 	.word	0xf005a801
   309fc:	4604ff6b 	.word	0x4604ff6b
   30a00:	a801b380 	.word	0xa801b380
   30a04:	ff58f004 	.word	0xff58f004
   30a08:	f004a804 	.word	0xf004a804
   30a0c:	a807ff55 	.word	0xa807ff55
   30a10:	ff52f004 	.word	0xff52f004
   30a14:	f004a80a 	.word	0xf004a80a
   30a18:	a80dff4f 	.word	0xa80dff4f
   30a1c:	ff4cf004 	.word	0xff4cf004
   30a20:	f004a810 	.word	0xf004a810
   30a24:	a813ff49 	.word	0xa813ff49
   30a28:	ff46f004 	.word	0xff46f004
   30a2c:	b0164620 	.word	0xb0164620
   30a30:	87f0e8bd 	.word	0x87f0e8bd
   30a34:	46404631 	.word	0x46404631
   30a38:	ffbaf004 	.word	0xffbaf004
   30a3c:	28004604 	.word	0x28004604
   30a40:	f106d1f4 	.word	0xf106d1f4
   30a44:	f108010c 	.word	0xf108010c
   30a48:	f004000c 	.word	0xf004000c
   30a4c:	4604ffb1 	.word	0x4604ffb1
   30a50:	d1eb2800 	.word	0xd1eb2800
   30a54:	0118f106 	.word	0x0118f106
   30a58:	0018f108 	.word	0x0018f108
   30a5c:	ffa8f004 	.word	0xffa8f004
   30a60:	e7e34604 	.word	0xe7e34604
   30a64:	a8014649 	.word	0xa8014649
   30a68:	fae4f7ff 	.word	0xfae4f7ff
   30a6c:	28004604 	.word	0x28004604
   30a70:	462ad1c7 	.word	0x462ad1c7
   30a74:	a804a901 	.word	0xa804a901
   30a78:	ff2cf005 	.word	0xff2cf005
   30a7c:	28004604 	.word	0x28004604
   30a80:	4649d1bf 	.word	0x4649d1bf
   30a84:	f7ffa804 	.word	0xf7ffa804
   30a88:	4604fad5 	.word	0x4604fad5
   30a8c:	d1b82800 	.word	0xd1b82800
   30a90:	4632a901 	.word	0x4632a901
   30a94:	f0054608 	.word	0xf0054608
   30a98:	4604ff1d 	.word	0x4604ff1d
   30a9c:	d1b02800 	.word	0xd1b02800
   30aa0:	a8014649 	.word	0xa8014649
   30aa4:	fac6f7ff 	.word	0xfac6f7ff
   30aa8:	28004604 	.word	0x28004604
   30aac:	a904d1a9 	.word	0xa904d1a9
   30ab0:	020cf106 	.word	0x020cf106
   30ab4:	f0054608 	.word	0xf0054608
   30ab8:	4604ff0d 	.word	0x4604ff0d
   30abc:	d1a02800 	.word	0xd1a02800
   30ac0:	a8044649 	.word	0xa8044649
   30ac4:	fab6f7ff 	.word	0xfab6f7ff
   30ac8:	28004604 	.word	0x28004604
   30acc:	a901d199 	.word	0xa901d199
   30ad0:	4608463a 	.word	0x4608463a
   30ad4:	fe3ef005 	.word	0xfe3ef005
   30ad8:	28004604 	.word	0x28004604
   30adc:	f109d191 	.word	0xf109d191
   30ae0:	e00c0604 	.word	0xe00c0604
   30ae4:	a8012100 	.word	0xa8012100
   30ae8:	fc08f005 	.word	0xfc08f005
   30aec:	a901b150 	.word	0xa901b150
   30af0:	46084632 	.word	0x46084632
   30af4:	fdbaf005 	.word	0xfdbaf005
   30af8:	28004604 	.word	0x28004604
   30afc:	9b01d181 	.word	0x9b01d181
   30b00:	dbef2b00 	.word	0xdbef2b00
   30b04:	f107a904 	.word	0xf107a904
   30b08:	4632060c 	.word	0x4632060c
   30b0c:	f0054608 	.word	0xf0054608
   30b10:	4604fe21 	.word	0x4604fe21
   30b14:	f47f2800 	.word	0xf47f2800
   30b18:	f109af74 	.word	0xf109af74
   30b1c:	e00d0a04 	.word	0xe00d0a04
   30b20:	a8042100 	.word	0xa8042100
   30b24:	fbeaf005 	.word	0xfbeaf005
   30b28:	a904b158 	.word	0xa904b158
   30b2c:	46084652 	.word	0x46084652
   30b30:	fd9cf005 	.word	0xfd9cf005
   30b34:	28004604 	.word	0x28004604
   30b38:	af63f47f 	.word	0xaf63f47f
   30b3c:	2b009b04 	.word	0x2b009b04
   30b40:	2100dbee 	.word	0x2100dbee
   30b44:	f005a801 	.word	0xf005a801
   30b48:	4601fbd9 	.word	0x4601fbd9
   30b4c:	a804bb30 	.word	0xa804bb30
   30b50:	fbd4f005 	.word	0xfbd4f005
   30b54:	d17f2800 	.word	0xd17f2800
   30b58:	4641463a 	.word	0x4641463a
   30b5c:	f7ff4648 	.word	0xf7ff4648
   30b60:	4604fab5 	.word	0x4604fab5
   30b64:	4639e74d 	.word	0x4639e74d
   30b68:	f0044640 	.word	0xf0044640
   30b6c:	4604ff21 	.word	0x4604ff21
   30b70:	f47f2800 	.word	0xf47f2800
   30b74:	f107af5b 	.word	0xf107af5b
   30b78:	f108010c 	.word	0xf108010c
   30b7c:	f004000c 	.word	0xf004000c
   30b80:	4604ff17 	.word	0x4604ff17
   30b84:	f47f2800 	.word	0xf47f2800
   30b88:	4629af51 	.word	0x4629af51
   30b8c:	0018f108 	.word	0x0018f108
   30b90:	ff0ef004 	.word	0xff0ef004
   30b94:	e7494604 	.word	0xe7494604
   30b98:	e7474c8b 	.word	0xe7474c8b
   30b9c:	aa014629 	.word	0xaa014629
   30ba0:	f005a813 	.word	0xf005a813
   30ba4:	4604fe97 	.word	0x4604fe97
   30ba8:	f47f2800 	.word	0xf47f2800
   30bac:	4649af2a 	.word	0x4649af2a
   30bb0:	f7ffa813 	.word	0xf7ffa813
   30bb4:	4604fa3f 	.word	0x4604fa3f
   30bb8:	f47f2800 	.word	0xf47f2800
   30bbc:	aa01af22 	.word	0xaa01af22
   30bc0:	a8074611 	.word	0xa8074611
   30bc4:	fe86f005 	.word	0xfe86f005
   30bc8:	28004604 	.word	0x28004604
   30bcc:	af19f47f 	.word	0xaf19f47f
   30bd0:	a8074649 	.word	0xa8074649
   30bd4:	fa2ef7ff 	.word	0xfa2ef7ff
   30bd8:	28004604 	.word	0x28004604
   30bdc:	af11f47f 	.word	0xaf11f47f
   30be0:	a907aa01 	.word	0xa907aa01
   30be4:	f005a80a 	.word	0xf005a80a
   30be8:	4604fe75 	.word	0x4604fe75
   30bec:	f47f2800 	.word	0xf47f2800
   30bf0:	4649af08 	.word	0x4649af08
   30bf4:	f7ffa80a 	.word	0xf7ffa80a
   30bf8:	4604fa1d 	.word	0x4604fa1d
   30bfc:	f47f2800 	.word	0xf47f2800
   30c00:	a907af00 	.word	0xa907af00
   30c04:	4608463a 	.word	0x4608463a
   30c08:	fe64f005 	.word	0xfe64f005
   30c0c:	28004604 	.word	0x28004604
   30c10:	aef7f47f 	.word	0xaef7f47f
   30c14:	a8074649 	.word	0xa8074649
   30c18:	fa0cf7ff 	.word	0xfa0cf7ff
   30c1c:	28004604 	.word	0x28004604
   30c20:	aeeff47f 	.word	0xaeeff47f
   30c24:	a9072202 	.word	0xa9072202
   30c28:	f005a801 	.word	0xf005a801
   30c2c:	4604ff4b 	.word	0x4604ff4b
   30c30:	f47f2800 	.word	0xf47f2800
   30c34:	f109aee6 	.word	0xf109aee6
   30c38:	46290504 	.word	0x46290504
   30c3c:	f005a801 	.word	0xf005a801
   30c40:	2800faf5 	.word	0x2800faf5
   30c44:	a901db0d 	.word	0xa901db0d
   30c48:	4608462a 	.word	0x4608462a
   30c4c:	fc4ef005 	.word	0xfc4ef005
   30c50:	28004604 	.word	0x28004604
   30c54:	e6d4d0f1 	.word	0xe6d4d0f1
   30c58:	f7ff4640 	.word	0xf7ff4640
   30c5c:	4604fe7d 	.word	0x4604fe7d
   30c60:	aa04e6cf 	.word	0xaa04e6cf
   30c64:	a80d4611 	.word	0xa80d4611
   30c68:	fe34f005 	.word	0xfe34f005
   30c6c:	28004604 	.word	0x28004604
   30c70:	aec7f47f 	.word	0xaec7f47f
   30c74:	a80d4649 	.word	0xa80d4649
   30c78:	f9dcf7ff 	.word	0xf9dcf7ff
   30c7c:	28004604 	.word	0x28004604
   30c80:	aebff47f 	.word	0xaebff47f
   30c84:	aa01a90d 	.word	0xaa01a90d
   30c88:	f0054608 	.word	0xf0054608
   30c8c:	4604fd63 	.word	0x4604fd63
   30c90:	f47f2800 	.word	0xf47f2800
   30c94:	9b0daeb6 	.word	0x9b0daeb6
   30c98:	da0d2b00 	.word	0xda0d2b00
   30c9c:	a80d2100 	.word	0xa80d2100
   30ca0:	fb2cf005 	.word	0xfb2cf005
   30ca4:	a90db140 	.word	0xa90db140
   30ca8:	4608462a 	.word	0x4608462a
   30cac:	fcdef005 	.word	0xfcdef005
   30cb0:	28004604 	.word	0x28004604
   30cb4:	e6a4d0ef 	.word	0xe6a4d0ef
   30cb8:	aa0aa90d 	.word	0xaa0aa90d
   30cbc:	f0054608 	.word	0xf0054608
   30cc0:	4604fd49 	.word	0x4604fd49
   30cc4:	f47f2800 	.word	0xf47f2800
   30cc8:	9b0dae9c 	.word	0x9b0dae9c
   30ccc:	da0d2b00 	.word	0xda0d2b00
   30cd0:	a80d2100 	.word	0xa80d2100
   30cd4:	fb12f005 	.word	0xfb12f005
   30cd8:	a90db140 	.word	0xa90db140
   30cdc:	4608462a 	.word	0x4608462a
   30ce0:	fcc4f005 	.word	0xfcc4f005
   30ce4:	28004604 	.word	0x28004604
   30ce8:	e68ad0ef 	.word	0xe68ad0ef
   30cec:	aa0da907 	.word	0xaa0da907
   30cf0:	f0054608 	.word	0xf0054608
   30cf4:	4604fd2f 	.word	0x4604fd2f
   30cf8:	f47f2800 	.word	0xf47f2800
   30cfc:	9b07ae82 	.word	0x9b07ae82
   30d00:	da0d2b00 	.word	0xda0d2b00
   30d04:	a8072100 	.word	0xa8072100
   30d08:	faf8f005 	.word	0xfaf8f005
   30d0c:	a907b140 	.word	0xa907b140
   30d10:	4608462a 	.word	0x4608462a
   30d14:	fcaaf005 	.word	0xfcaaf005
   30d18:	28004604 	.word	0x28004604
   30d1c:	e670d0ef 	.word	0xe670d0ef
   30d20:	aa04a907 	.word	0xaa04a907
   30d24:	f0054608 	.word	0xf0054608
   30d28:	4604fdd5 	.word	0x4604fdd5
   30d2c:	f47f2800 	.word	0xf47f2800
   30d30:	4649ae68 	.word	0x4649ae68
   30d34:	f7ffa807 	.word	0xf7ffa807
   30d38:	4604f97d 	.word	0x4604f97d
   30d3c:	f47f2800 	.word	0xf47f2800
   30d40:	a90aae60 	.word	0xa90aae60
   30d44:	46084632 	.word	0x46084632
   30d48:	fdc4f005 	.word	0xfdc4f005
   30d4c:	28004604 	.word	0x28004604
   30d50:	ae57f47f 	.word	0xae57f47f
   30d54:	a80a4649 	.word	0xa80a4649
   30d58:	f96cf7ff 	.word	0xf96cf7ff
   30d5c:	28004604 	.word	0x28004604
   30d60:	ae4ff47f 	.word	0xae4ff47f
   30d64:	a907aa0a 	.word	0xa907aa0a
   30d68:	f005a810 	.word	0xf005a810
   30d6c:	4604fcf3 	.word	0x4604fcf3
   30d70:	f47f2800 	.word	0xf47f2800
   30d74:	9b10ae46 	.word	0x9b10ae46
   30d78:	da0d2b00 	.word	0xda0d2b00
   30d7c:	a8102100 	.word	0xa8102100
   30d80:	fabcf005 	.word	0xfabcf005
   30d84:	a910b140 	.word	0xa910b140
   30d88:	4608462a 	.word	0x4608462a
   30d8c:	fc6ef005 	.word	0xfc6ef005
   30d90:	28004604 	.word	0x28004604
   30d94:	e634d0ef 	.word	0xe634d0ef
   30d98:	4640a90d 	.word	0x4640a90d
   30d9c:	fe08f004 	.word	0xfe08f004
   30da0:	28004604 	.word	0x28004604
   30da4:	ae2df47f 	.word	0xae2df47f
   30da8:	f108a910 	.word	0xf108a910
   30dac:	f004000c 	.word	0xf004000c
   30db0:	4604fdff 	.word	0x4604fdff
   30db4:	f47f2800 	.word	0xf47f2800
   30db8:	f108ae24 	.word	0xf108ae24
   30dbc:	a9130018 	.word	0xa9130018
   30dc0:	fdf6f004 	.word	0xfdf6f004
   30dc4:	e61c4604 	.word	0xe61c4604
   30dc8:	ffffb080 	.word	0xffffb080

00030dcc <ecp_mul_comb>:
   30dcc:	4ff0e92d 	.word	0x4ff0e92d
   30dd0:	46984605 	.word	0x46984605
   30dd4:	034cf105 	.word	0x034cf105
   30dd8:	b0e5461c 	.word	0xb0e5461c
   30ddc:	9104a80d 	.word	0x9104a80d
   30de0:	93084617 	.word	0x93084617
   30de4:	fd60f004 	.word	0xfd60f004
   30de8:	f004a810 	.word	0xf004a810
   30dec:	4620fd5d 	.word	0x4620fd5d
   30df0:	f0042100 	.word	0xf0042100
   30df4:	2801ffa3 	.word	0x2801ffa3
   30df8:	f0409007 	.word	0xf0409007
   30dfc:	6deb81c9 	.word	0x6deb81c9
   30e00:	090cf108 	.word	0x090cf108
   30e04:	7fc0f5b3 	.word	0x7fc0f5b3
   30e08:	2605bf2c 	.word	0x2605bf2c
   30e0c:	46482604 	.word	0x46482604
   30e10:	0134f105 	.word	0x0134f105
   30e14:	f04fbf2c 	.word	0xf04fbf2c
   30e18:	f04f0a06 	.word	0xf04f0a06
   30e1c:	46b30a05 	.word	0x46b30a05
   30e20:	fa04f005 	.word	0xfa04f005
   30e24:	d0722800 	.word	0xd0722800
   30e28:	42a66dec 	.word	0x42a66dec
   30e2c:	2301d245 	.word	0x2301d245
   30e30:	32fff10b 	.word	0x32fff10b
   30e34:	93024093 	.word	0x93024093
   30e38:	b2db4434 	.word	0xb2db4434
   30e3c:	93033c01 	.word	0x93033c01
   30e40:	fbb42300 	.word	0xfbb42300
   30e44:	9802f4f6 	.word	0x9802f4f6
   30e48:	93059206 	.word	0x93059206
   30e4c:	f0082124 	.word	0xf0082124
   30e50:	9001f97f 	.word	0x9001f97f
   30e54:	d0402800 	.word	0xd0402800
   30e58:	f0044641 	.word	0xf0044641
   30e5c:	f8ddfda9 	.word	0xf8ddfda9
   30e60:	4683a004 	.word	0x4683a004
   30e64:	f0002800 	.word	0xf0002800
   30e68:	9b058086 	.word	0x9b058086
   30e6c:	d17b2b00 	.word	0xd17b2b00
   30e70:	9c012500 	.word	0x9c012500
   30e74:	35019e03 	.word	0x35019e03
   30e78:	4620b154 	.word	0x4620b154
   30e7c:	fd1cf004 	.word	0xfd1cf004
   30e80:	000cf104 	.word	0x000cf104
   30e84:	fd18f004 	.word	0xfd18f004
   30e88:	0018f104 	.word	0x0018f104
   30e8c:	fd14f004 	.word	0xfd14f004
   30e90:	429eb2eb 	.word	0x429eb2eb
   30e94:	0424f104 	.word	0x0424f104
   30e98:	9801d8ed 	.word	0x9801d8ed
   30e9c:	f96cf008 	.word	0xf96cf008
   30ea0:	f004a80d 	.word	0xf004a80d
   30ea4:	a810fd09 	.word	0xa810fd09
   30ea8:	fd06f004 	.word	0xfd06f004
   30eac:	0f00f1bb 	.word	0x0f00f1bb
   30eb0:	4658d11b 	.word	0x4658d11b
   30eb4:	e8bdb065 	.word	0xe8bdb065
   30eb8:	26028ff0 	.word	0x26028ff0
   30ebc:	22012300 	.word	0x22012300
   30ec0:	21244630 	.word	0x21244630
   30ec4:	6602e9cd 	.word	0x6602e9cd
   30ec8:	3205e9cd 	.word	0x3205e9cd
   30ecc:	f940f008 	.word	0xf940f008
   30ed0:	08643401 	.word	0x08643401
   30ed4:	28009001 	.word	0x28009001
   30ed8:	a80dd1be 	.word	0xa80dd1be
   30edc:	fcecf004 	.word	0xfcecf004
   30ee0:	f004a810 	.word	0xf004a810
   30ee4:	f8dffce9 	.word	0xf8dffce9
   30ee8:	9c04b644 	.word	0x9c04b644
   30eec:	d0e02c00 	.word	0xd0e02c00
   30ef0:	f0044620 	.word	0xf0044620
   30ef4:	f104fce1 	.word	0xf104fce1
   30ef8:	f004000c 	.word	0xf004000c
   30efc:	f104fcdd 	.word	0xf104fcdd
   30f00:	f0040018 	.word	0xf0040018
   30f04:	4658fcd9 	.word	0x4658fcd9
   30f08:	e8bdb065 	.word	0xe8bdb065
   30f0c:	f1058ff0 	.word	0xf1058ff0
   30f10:	46400128 	.word	0x46400128
   30f14:	f98af005 	.word	0xf98af005
   30f18:	d1852800 	.word	0xd1852800
   30f1c:	459a6deb 	.word	0x459a6deb
   30f20:	82f4f0c0 	.word	0x82f4f0c0
   30f24:	1c5c2602 	.word	0x1c5c2602
   30f28:	e9cd2301 	.word	0xe9cd2301
   30f2c:	08646602 	.word	0x08646602
   30f30:	6f6b9306 	.word	0x6f6b9306
   30f34:	2b009301 	.word	0x2b009301
   30f38:	80eaf000 	.word	0x80eaf000
   30f3c:	46382100 	.word	0x46382100
   30f40:	fefcf004 	.word	0xfefcf004
   30f44:	46804639 	.word	0x46804639
   30f48:	f004a80d 	.word	0xf004a80d
   30f4c:	4683fd31 	.word	0x4683fd31
   30f50:	463ab950 	.word	0x463ab950
   30f54:	a8109908 	.word	0xa8109908
   30f58:	fbfcf005 	.word	0xfbfcf005
   30f5c:	28004683 	.word	0x28004683
   30f60:	9b07d036 	.word	0x9b07d036
   30f64:	d0832b00 	.word	0xd0832b00
   30f68:	f004a80d 	.word	0xf004a80d
   30f6c:	a810fca5 	.word	0xa810fca5
   30f70:	fca2f004 	.word	0xfca2f004
   30f74:	4649e7b9 	.word	0x4649e7b9
   30f78:	000cf10a 	.word	0x000cf10a
   30f7c:	fd18f004 	.word	0xfd18f004
   30f80:	28004683 	.word	0x28004683
   30f84:	af71f47f 	.word	0xaf71f47f
   30f88:	f1089b01 	.word	0xf1089b01
   30f8c:	f1030118 	.word	0xf1030118
   30f90:	f0040018 	.word	0xf0040018
   30f94:	4683fd0d 	.word	0x4683fd0d
   30f98:	f47f2800 	.word	0xf47f2800
   30f9c:	462aaf66 	.word	0x462aaf66
   30fa0:	0901f04f 	.word	0x0901f04f
   30fa4:	46254651 	.word	0x46254651
   30fa8:	464c4682 	.word	0x464c4682
   30fac:	96094690 	.word	0x96094690
   30fb0:	9e06970a 	.word	0x9e06970a
   30fb4:	eb049f01 	.word	0xeb049f01
   30fb8:	eb0704c4 	.word	0xeb0704c4
   30fbc:	46200484 	.word	0x46200484
   30fc0:	fcf6f004 	.word	0xfcf6f004
   30fc4:	f0002800 	.word	0xf0002800
   30fc8:	468380a7 	.word	0x468380a7
   30fcc:	e74d9b05 	.word	0xe74d9b05
   30fd0:	33fff118 	.word	0x33fff118
   30fd4:	2301bf18 	.word	0x2301bf18
   30fd8:	461aa910 	.word	0x461aa910
   30fdc:	9302a80d 	.word	0x9302a80d
   30fe0:	fe14f004 	.word	0xfe14f004
   30fe4:	28004683 	.word	0x28004683
   30fe8:	a822d1bb 	.word	0xa822d1bb
   30fec:	46591c62 	.word	0x46591c62
   30ff0:	feacf00e 	.word	0xfeacf00e
   30ff4:	f10db3d4 	.word	0xf10db3d4
   30ff8:	46d80988 	.word	0x46d80988
   30ffc:	46c246cb 	.word	0x46c246cb
   31000:	46512700 	.word	0x46512700
   31004:	f004a80d 	.word	0xf004a80d
   31008:	f89bfe99 	.word	0xf89bfe99
   3100c:	40b83000 	.word	0x40b83000
   31010:	43033701 	.word	0x43033701
   31014:	44a242b7 	.word	0x44a242b7
   31018:	3000f88b 	.word	0x3000f88b
   3101c:	f108d1f1 	.word	0xf108d1f1
   31020:	45a00801 	.word	0x45a00801
   31024:	0b01f10b 	.word	0x0b01f10b
   31028:	2300d1e9 	.word	0x2300d1e9
   3102c:	0c01f04f 	.word	0x0c01f04f
   31030:	1088f89d 	.word	0x1088f89d
   31034:	6f01f819 	.word	0x6f01f819
   31038:	0c01f10c 	.word	0x0c01f10c
   3103c:	0203ea86 	.word	0x0203ea86
   31040:	f00043d0 	.word	0xf00043d0
   31044:	fb000001 	.word	0xfb000001
   31048:	b252f701 	.word	0xb252f701
   3104c:	4033b27f 	.word	0x4033b27f
   31050:	0607ea02 	.word	0x0607ea02
   31054:	ea41407a 	.word	0xea41407a
   31058:	433310c0 	.word	0x433310c0
   3105c:	45e0b2d1 	.word	0x45e0b2d1
   31060:	0c01f809 	.word	0x0c01f809
   31064:	f889b2db 	.word	0xf889b2db
   31068:	d2e31000 	.word	0xd2e31000
   3106c:	a8192600 	.word	0xa8192600
   31070:	fc1af004 	.word	0xfc1af004
   31074:	f004a81c 	.word	0xf004a81c
   31078:	a81ffc17 	.word	0xa81ffc17
   3107c:	fc14f004 	.word	0xfc14f004
   31080:	f813ab22 	.word	0xf813ab22
   31084:	44239004 	.word	0x44239004
   31088:	9b049306 	.word	0x9b049306
   3108c:	469b4632 	.word	0x469b4632
   31090:	95059f01 	.word	0x95059f01
   31094:	9f03463d 	.word	0x9f03463d
   31098:	0845f3c9 	.word	0x0845f3c9
   3109c:	0a0cf103 	.word	0x0a0cf103
   310a0:	0408eba2 	.word	0x0408eba2
   310a4:	f484fab4 	.word	0xf484fab4
   310a8:	46290964 	.word	0x46290964
   310ac:	46584622 	.word	0x46584622
   310b0:	fdacf004 	.word	0xfdacf004
   310b4:	f1053601 	.word	0xf1053601
   310b8:	3524010c 	.word	0x3524010c
   310bc:	d16a2800 	.word	0xd16a2800
   310c0:	46504622 	.word	0x46504622
   310c4:	fda2f004 	.word	0xfda2f004
   310c8:	2800b2f2 	.word	0x2800b2f2
   310cc:	42bad163 	.word	0x42bad163
   310d0:	9d05d3e6 	.word	0x9d05d3e6
   310d4:	1d2ba816 	.word	0x1d2ba816
   310d8:	9308461c 	.word	0x9308461c
   310dc:	fbe4f004 	.word	0xfbe4f004
   310e0:	4621a816 	.word	0x4621a816
   310e4:	f0054652 	.word	0xf0054652
   310e8:	4683fb35 	.word	0x4683fb35
   310ec:	f0002800 	.word	0xf0002800
   310f0:	a81680c3 	.word	0xa81680c3
   310f4:	fbe0f004 	.word	0xfbe0f004
   310f8:	f004a819 	.word	0xf004a819
   310fc:	a81cfbdd 	.word	0xa81cfbdd
   31100:	fbdaf004 	.word	0xfbdaf004
   31104:	f004a81f 	.word	0xf004a81f
   31108:	9b07fbd7 	.word	0x9b07fbd7
   3110c:	e6ac9305 	.word	0xe6ac9305
   31110:	98022301 	.word	0x98022301
   31114:	e6999305 	.word	0xe6999305
   31118:	0b59ea4f 	.word	0x0b59ea4f
   3111c:	0bcbeb0b 	.word	0x0bcbeb0b
   31120:	0b8beb07 	.word	0x0b8beb07
   31124:	010cf10b 	.word	0x010cf10b
   31128:	000cf104 	.word	0x000cf104
   3112c:	fc40f004 	.word	0xfc40f004
   31130:	f47f2800 	.word	0xf47f2800
   31134:	f10baf4a 	.word	0xf10baf4a
   31138:	f1040118 	.word	0xf1040118
   3113c:	f0040018 	.word	0xf0040018
   31140:	2800fc37 	.word	0x2800fc37
   31144:	af41f47f 	.word	0xaf41f47f
   31148:	4683b165 	.word	0x4683b165
   3114c:	46214622 	.word	0x46214622
   31150:	f7fe4640 	.word	0xf7fe4640
   31154:	f10bffbb 	.word	0xf10bffbb
   31158:	28000b01 	.word	0x28000b01
   3115c:	af35f47f 	.word	0xaf35f47f
   31160:	d1f345ab 	.word	0xd1f345ab
   31164:	0949ea4f 	.word	0x0949ea4f
   31168:	f989fa5f 	.word	0xf989fa5f
   3116c:	0301f10a 	.word	0x0301f10a
   31170:	f842aa22 	.word	0xf842aa22
   31174:	fa5f402a 	.word	0xfa5f402a
   31178:	fa39fa83 	.word	0xfa39fa83
   3117c:	464cf306 	.word	0x464cf306
   31180:	ea4fd10b 	.word	0xea4fd10b
   31184:	eb010159 	.word	0xeb010159
   31188:	eb0701c1 	.word	0xeb0701c1
   3118c:	e7120181 	.word	0xe7120181
   31190:	b39cf8df 	.word	0xb39cf8df
   31194:	4683e68d 	.word	0x4683e68d
   31198:	4652e7ae 	.word	0x4652e7ae
   3119c:	462c2a01 	.word	0x462c2a01
   311a0:	46459e09 	.word	0x46459e09
   311a4:	d9619f0a 	.word	0xd9619f0a
   311a8:	4640a922 	.word	0x4640a922
   311ac:	fa46f7ff 	.word	0xfa46f7ff
   311b0:	f1bb4683 	.word	0xf1bb4683
   311b4:	f47f0f00 	.word	0xf47f0f00
   311b8:	2301ae58 	.word	0x2301ae58
   311bc:	46da9a01 	.word	0x46da9a01
   311c0:	970b3a24 	.word	0x970b3a24
   311c4:	461f4693 	.word	0x461f4693
   311c8:	4609e9cd 	.word	0x4609e9cd
   311cc:	eb03b303 	.word	0xeb03b303
   311d0:	ea4f03c3 	.word	0xea4f03c3
   311d4:	9b010883 	.word	0x9b010883
   311d8:	0424f1a8 	.word	0x0424f1a8
   311dc:	eb03441c 	.word	0xeb03441c
   311e0:	e0050908 	.word	0xe0050908
   311e4:	45a3aa22 	.word	0x45a3aa22
   311e8:	602af842 	.word	0x602af842
   311ec:	d00f469a 	.word	0xd00f469a
   311f0:	0604eb08 	.word	0x0604eb08
   311f4:	4622464b 	.word	0x4622464b
   311f8:	46284631 	.word	0x46284631
   311fc:	fbc2f7ff 	.word	0xfbc2f7ff
   31200:	0301f10a 	.word	0x0301f10a
   31204:	b2db3c24 	.word	0xb2db3c24
   31208:	d0eb2800 	.word	0xd0eb2800
   3120c:	e6dd4683 	.word	0xe6dd4683
   31210:	9a06007b 	.word	0x9a06007b
   31214:	fa37b2df 	.word	0xfa37b2df
   31218:	463bf202 	.word	0x463bf202
   3121c:	f1bad0d6 	.word	0xf1bad0d6
   31220:	e9dd0f01 	.word	0xe9dd0f01
   31224:	9f0b4609 	.word	0x9f0b4609
   31228:	8167f240 	.word	0x8167f240
   3122c:	a9224652 	.word	0xa9224652
   31230:	f7ff4628 	.word	0xf7ff4628
   31234:	4683fa03 	.word	0x4683fa03
   31238:	f1bb9b05 	.word	0xf1bb9b05
   3123c:	f47f0f00 	.word	0xf47f0f00
   31240:	b123ae15 	.word	0xb123ae15
   31244:	676b9b01 	.word	0x676b9b01
   31248:	67ab9b02 	.word	0x67ab9b02
   3124c:	4619e676 	.word	0x4619e676
   31250:	f0044638 	.word	0xf0044638
   31254:	4639fd73 	.word	0x4639fd73
   31258:	a80d4680 	.word	0xa80d4680
   3125c:	fba8f004 	.word	0xfba8f004
   31260:	28004683 	.word	0x28004683
   31264:	ae04f47f 	.word	0xae04f47f
   31268:	e6729007 	.word	0xe6729007
   3126c:	46289922 	.word	0x46289922
   31270:	f97cf7ff 	.word	0xf97cf7ff
   31274:	e79c4683 	.word	0xe79c4683
   31278:	46504601 	.word	0x46504601
   3127c:	f83ef005 	.word	0xf83ef005
   31280:	bf181c02 	.word	0xbf181c02
   31284:	a9162201 	.word	0xa9162201
   31288:	12d9ea02 	.word	0x12d9ea02
   3128c:	f0044650 	.word	0xf0044650
   31290:	4683fcbd 	.word	0x4683fcbd
   31294:	f004a816 	.word	0xf004a816
   31298:	f1bbfb0f 	.word	0xf1bbfb0f
   3129c:	f47f0f00 	.word	0xf47f0f00
   312a0:	9b04af2b 	.word	0x9b04af2b
   312a4:	f1032101 	.word	0xf1032101
   312a8:	46200418 	.word	0x46200418
   312ac:	fd0cf004 	.word	0xfd0cf004
   312b0:	28004683 	.word	0x28004683
   312b4:	af20f47f 	.word	0xaf20f47f
   312b8:	2b009b6e 	.word	0x2b009b6e
   312bc:	8082f000 	.word	0x8082f000
   312c0:	6dab260c 	.word	0x6dab260c
   312c4:	3307a813 	.word	0x3307a813
   312c8:	f00408df 	.word	0xf00408df
   312cc:	a816faed 	.word	0xa816faed
   312d0:	faeaf004 	.word	0xfaeaf004
   312d4:	8020f8dd 	.word	0x8020f8dd
   312d8:	9a6e9b6f 	.word	0x9a6e9b6f
   312dc:	a8134639 	.word	0xa8134639
   312e0:	fa64f006 	.word	0xfa64f006
   312e4:	2101e006 	.word	0x2101e006
   312e8:	f004a813 	.word	0xf004a813
   312ec:	2800ff2f 	.word	0x2800ff2f
   312f0:	80c8f040 	.word	0x80c8f040
   312f4:	a8134641 	.word	0xa8134641
   312f8:	ff98f004 	.word	0xff98f004
   312fc:	daf22800 	.word	0xdaf22800
   31300:	f0003e01 	.word	0xf0003e01
   31304:	21018100 	.word	0x21018100
   31308:	f004a813 	.word	0xf004a813
   3130c:	2800fff7 	.word	0x2800fff7
   31310:	aa13dde2 	.word	0xaa13dde2
   31314:	46204621 	.word	0x46204621
   31318:	fadcf005 	.word	0xfadcf005
   3131c:	b1304683 	.word	0xb1304683
   31320:	f004a813 	.word	0xf004a813
   31324:	a816fac9 	.word	0xa816fac9
   31328:	fac6f004 	.word	0xfac6f004
   3132c:	4620e6e4 	.word	0x4620e6e4
   31330:	f7fe4629 	.word	0xf7fe4629
   31334:	4683fe7f 	.word	0x4683fe7f
   31338:	d1f12800 	.word	0xd1f12800
   3133c:	4611aa13 	.word	0x4611aa13
   31340:	f005a816 	.word	0xf005a816
   31344:	4683fac7 	.word	0x4683fac7
   31348:	d1e92800 	.word	0xd1e92800
   3134c:	a8164629 	.word	0xa8164629
   31350:	fe70f7fe 	.word	0xfe70f7fe
   31354:	28004683 	.word	0x28004683
   31358:	9804d1e2 	.word	0x9804d1e2
   3135c:	4601aa16 	.word	0x4601aa16
   31360:	fab8f005 	.word	0xfab8f005
   31364:	28004683 	.word	0x28004683
   31368:	4629d1da 	.word	0x4629d1da
   3136c:	f7fe9804 	.word	0xf7fe9804
   31370:	4683fe61 	.word	0x4683fe61
   31374:	d1d32800 	.word	0xd1d32800
   31378:	aa13a916 	.word	0xaa13a916
   3137c:	f0054608 	.word	0xf0054608
   31380:	4683faa9 	.word	0x4683faa9
   31384:	d1cb2800 	.word	0xd1cb2800
   31388:	a8164629 	.word	0xa8164629
   3138c:	fe52f7fe 	.word	0xfe52f7fe
   31390:	28004683 	.word	0x28004683
   31394:	aa16d1c4 	.word	0xaa16d1c4
   31398:	46504651 	.word	0x46504651
   3139c:	fa9af005 	.word	0xfa9af005
   313a0:	28004683 	.word	0x28004683
   313a4:	4629d1bc 	.word	0x4629d1bc
   313a8:	f7fe4650 	.word	0xf7fe4650
   313ac:	4683fe43 	.word	0x4683fe43
   313b0:	f004a813 	.word	0xf004a813
   313b4:	a816fa81 	.word	0xa816fa81
   313b8:	fa7ef004 	.word	0xfa7ef004
   313bc:	0f00f1bb 	.word	0x0f00f1bb
   313c0:	ae9af47f 	.word	0xae9af47f
   313c4:	f8dd46ab 	.word	0xf8dd46ab
   313c8:	f8dd8018 	.word	0xf8dd8018
   313cc:	f8cd900c 	.word	0xf8cd900c
   313d0:	f8dda018 	.word	0xf8dda018
   313d4:	ab22a010 	.word	0xab22a010
   313d8:	d0554543 	.word	0xd0554543
   313dc:	46514652 	.word	0x46514652
   313e0:	f7fe4658 	.word	0xf7fe4658
   313e4:	4602fe73 	.word	0x4602fe73
   313e8:	d1492800 	.word	0xd1492800
   313ec:	46044606 	.word	0x46044606
   313f0:	3d01f818 	.word	0x3d01f818
   313f4:	93059d01 	.word	0x93059d01
   313f8:	0745f3c3 	.word	0x0745f3c3
   313fc:	fab41be4 	.word	0xfab41be4
   31400:	0964f484 	.word	0x0964f484
   31404:	46224629 	.word	0x46224629
   31408:	f004a819 	.word	0xf004a819
   3140c:	3601fbff 	.word	0x3601fbff
   31410:	010cf105 	.word	0x010cf105
   31414:	28003524 	.word	0x28003524
   31418:	aebdf47f 	.word	0xaebdf47f
   3141c:	a81c4622 	.word	0xa81c4622
   31420:	fbf4f004 	.word	0xfbf4f004
   31424:	2800b2f4 	.word	0x2800b2f4
   31428:	aeb5f47f 	.word	0xaeb5f47f
   3142c:	d8e545a1 	.word	0xd8e545a1
   31430:	f004a816 	.word	0xf004a816
   31434:	aa1cfa39 	.word	0xaa1cfa39
   31438:	a8169908 	.word	0xa8169908
   3143c:	f98af005 	.word	0xf98af005
   31440:	4683b108 	.word	0x4683b108
   31444:	4601e655 	.word	0x4601e655
   31448:	f004a81c 	.word	0xf004a81c
   3144c:	1c02ff57 	.word	0x1c02ff57
   31450:	2201bf18 	.word	0x2201bf18
   31454:	a9169b05 	.word	0xa9169b05
   31458:	12d3ea02 	.word	0x12d3ea02
   3145c:	f004a81c 	.word	0xf004a81c
   31460:	9005fbd5 	.word	0x9005fbd5
   31464:	f004a816 	.word	0xf004a816
   31468:	9a05fa27 	.word	0x9a05fa27
   3146c:	4652b942 	.word	0x4652b942
   31470:	4651ab19 	.word	0x4651ab19
   31474:	f7ff4658 	.word	0xf7ff4658
   31478:	4602fa85 	.word	0x4602fa85
   3147c:	d0aa2800 	.word	0xd0aa2800
   31480:	e6394693 	.word	0xe6394693
   31484:	e74b4683 	.word	0xe74b4683
   31488:	f8dda819 	.word	0xf8dda819
   3148c:	f004a018 	.word	0xf004a018
   31490:	a81cfa13 	.word	0xa81cfa13
   31494:	fa10f004 	.word	0xfa10f004
   31498:	f004a81f 	.word	0xf004a81f
   3149c:	a819fa0d 	.word	0xa819fa0d
   314a0:	fa02f004 	.word	0xfa02f004
   314a4:	99084652 	.word	0x99084652
   314a8:	f005a819 	.word	0xf005a819
   314ac:	465df953 	.word	0x465df953
   314b0:	b1184683 	.word	0xb1184683
   314b4:	f004a819 	.word	0xf004a819
   314b8:	e552f9ff 	.word	0xe552f9ff
   314bc:	46504659 	.word	0x46504659
   314c0:	ff1cf004 	.word	0xff1cf004
   314c4:	a9199b02 	.word	0xa9199b02
   314c8:	bf082800 	.word	0xbf082800
   314cc:	46502300 	.word	0x46502300
   314d0:	f004461a 	.word	0xf004461a
   314d4:	4683fb9b 	.word	0x4683fb9b
   314d8:	f004a819 	.word	0xf004a819
   314dc:	f1bbf9ed 	.word	0xf1bbf9ed
   314e0:	f47f0f00 	.word	0xf47f0f00
   314e4:	4628ad3e 	.word	0x4628ad3e
   314e8:	f7ff9904 	.word	0xf7ff9904
   314ec:	9b07f83f 	.word	0x9b07f83f
   314f0:	2b004683 	.word	0x2b004683
   314f4:	acd4f47f 	.word	0xacd4f47f
   314f8:	9922e4ba 	.word	0x9922e4ba
   314fc:	f7ff4628 	.word	0xf7ff4628
   31500:	4683f835 	.word	0x4683f835
   31504:	f8dfe698 	.word	0xf8dfe698
   31508:	e5f5b02c 	.word	0xe5f5b02c
   3150c:	f10a2201 	.word	0xf10a2201
   31510:	eb0a31ff 	.word	0xeb0a31ff
   31514:	fa020403 	.word	0xfa020403
   31518:	3c01f301 	.word	0x3c01f301
   3151c:	b2db9302 	.word	0xb2db9302
   31520:	fbb49106 	.word	0xfbb49106
   31524:	4656f4fa 	.word	0x4656f4fa
   31528:	e5029303 	.word	0xe5029303
   3152c:	ffffb280 	.word	0xffffb280
   31530:	ffffb080 	.word	0xffffb080
   31534:	ffffb300 	.word	0xffffb300

00031538 <symbol_000637b>:
   31538:	43f8e92d 	.word	0x43f8e92d
   3153c:	e9dd2a01 	.word	0xe9dd2a01
   31540:	d8437808 	.word	0xd8437808
   31544:	4681460d 	.word	0x4681460d
   31548:	f1052100 	.word	0xf1052100
   3154c:	461e0018 	.word	0x461e0018
   31550:	f0044614 	.word	0xf0044614
   31554:	b938fed3 	.word	0xb938fed3
   31558:	0f00f1b8 	.word	0x0f00f1b8
   3155c:	2301d038 	.word	0x2301d038
   31560:	60337038 	.word	0x60337038
   31564:	83f8e8bd 	.word	0x83f8e8bd
   31568:	0004f109 	.word	0x0004f109
   3156c:	fc24f004 	.word	0xfc24f004
   31570:	b9c44681 	.word	0xb9c44681
   31574:	33010043 	.word	0x33010043
   31578:	60334598 	.word	0x60334598
   3157c:	2304d328 	.word	0x2304d328
   31580:	46024639 	.word	0x46024639
   31584:	3b01f801 	.word	0x3b01f801
   31588:	f0044628 	.word	0xf0044628
   3158c:	2800fcd7 	.word	0x2800fcd7
   31590:	f109d1e8 	.word	0xf109d1e8
   31594:	f1050101 	.word	0xf1050101
   31598:	4439000c 	.word	0x4439000c
   3159c:	e8bd464a 	.word	0xe8bd464a
   315a0:	f00443f8 	.word	0xf00443f8
   315a4:	1c43bccb 	.word	0x1c43bccb
   315a8:	60334598 	.word	0x60334598
   315ac:	2100d310 	.word	0x2100d310
   315b0:	000cf105 	.word	0x000cf105
   315b4:	fbc2f004 	.word	0xfbc2f004
   315b8:	30024639 	.word	0x30024639
   315bc:	0b01f801 	.word	0x0b01f801
   315c0:	4628464a 	.word	0x4628464a
   315c4:	43f8e8bd 	.word	0x43f8e8bd
   315c8:	bcb8f004 	.word	0xbcb8f004
   315cc:	e7c94801 	.word	0xe7c94801
   315d0:	e7c74801 	.word	0xe7c74801
   315d4:	ffffb080 	.word	0xffffb080
   315d8:	ffffb100 	.word	0xffffb100

000315dc <symbol_0007a22>:
   315dc:	d0412b00 	.word	0xd0412b00
   315e0:	461eb5f8 	.word	0x461eb5f8
   315e4:	46147813 	.word	0x46147813
   315e8:	b9ab460d 	.word	0xb9ab460d
   315ec:	d1352e01 	.word	0xd1352e01
   315f0:	46284631 	.word	0x46284631
   315f4:	fb68f004 	.word	0xfb68f004
   315f8:	bdf8b100 	.word	0xbdf8b100
   315fc:	f1054631 	.word	0xf1054631
   31600:	f004000c 	.word	0xf004000c
   31604:	2800fb61 	.word	0x2800fb61
   31608:	4601d1f7 	.word	0x4601d1f7
   3160c:	0018f105 	.word	0x0018f105
   31610:	40f8e8bd 	.word	0x40f8e8bd
   31614:	bb58f004 	.word	0xbb58f004
   31618:	f0043004 	.word	0xf0043004
   3161c:	7823fbcd 	.word	0x7823fbcd
   31620:	2b044607 	.word	0x2b044607
   31624:	0043d11c 	.word	0x0043d11c
   31628:	429e3301 	.word	0x429e3301
   3162c:	4602d116 	.word	0x4602d116
   31630:	46281c61 	.word	0x46281c61
   31634:	fbf0f004 	.word	0xfbf0f004
   31638:	d1de2800 	.word	0xd1de2800
   3163c:	44211c79 	.word	0x44211c79
   31640:	f105463a 	.word	0xf105463a
   31644:	f004000c 	.word	0xf004000c
   31648:	2800fbe7 	.word	0x2800fbe7
   3164c:	f105d1d5 	.word	0xf105d1d5
   31650:	21010018 	.word	0x21010018
   31654:	40f8e8bd 	.word	0x40f8e8bd
   31658:	bb36f004 	.word	0xbb36f004
   3165c:	bdf84802 	.word	0xbdf84802
   31660:	bdf84802 	.word	0xbdf84802
   31664:	47704800 	.word	0x47704800
   31668:	ffffb080 	.word	0xffffb080
   3166c:	ffffb180 	.word	0xffffb180

00031670 <symbol_000e8bc>:
   31670:	41f0e92d 	.word	0x41f0e92d
   31674:	b086460c 	.word	0xb086460c
   31678:	21014605 	.word	0x21014605
   3167c:	0018f104 	.word	0x0018f104
   31680:	fe3cf004 	.word	0xfe3cf004
   31684:	f0402800 	.word	0xf0402800
   31688:	6b2b809f 	.word	0x6b2b809f
   3168c:	f0002b00 	.word	0xf0002b00
   31690:	6beb80a0 	.word	0x6beb80a0
   31694:	f0002b00 	.word	0xf0002b00
   31698:	4601809c 	.word	0x4601809c
   3169c:	46204606 	.word	0x46204606
   316a0:	fe2cf004 	.word	0xfe2cf004
   316a4:	f2c02800 	.word	0xf2c02800
   316a8:	f104808f 	.word	0xf104808f
   316ac:	4631070c 	.word	0x4631070c
   316b0:	f0044638 	.word	0xf0044638
   316b4:	2800fe23 	.word	0x2800fe23
   316b8:	8086f2c0 	.word	0x8086f2c0
   316bc:	0804f105 	.word	0x0804f105
   316c0:	46204641 	.word	0x46204641
   316c4:	fdb2f004 	.word	0xfdb2f004
   316c8:	da7d2800 	.word	0xda7d2800
   316cc:	46384641 	.word	0x46384641
   316d0:	fdacf004 	.word	0xfdacf004
   316d4:	da772800 	.word	0xda772800
   316d8:	f0044668 	.word	0xf0044668
   316dc:	a803f8e5 	.word	0xa803f8e5
   316e0:	f8e2f004 	.word	0xf8e2f004
   316e4:	4639463a 	.word	0x4639463a
   316e8:	f0054668 	.word	0xf0054668
   316ec:	4606f8f3 	.word	0x4606f8f3
   316f0:	4668b148 	.word	0x4668b148
   316f4:	f8e0f004 	.word	0xf8e0f004
   316f8:	f004a803 	.word	0xf004a803
   316fc:	4630f8dd 	.word	0x4630f8dd
   31700:	e8bdb006 	.word	0xe8bdb006
   31704:	462981f0 	.word	0x462981f0
   31708:	f7fe4668 	.word	0xf7fe4668
   3170c:	4606fc93 	.word	0x4606fc93
   31710:	d1ee2800 	.word	0xd1ee2800
   31714:	46214622 	.word	0x46214622
   31718:	f005a803 	.word	0xf005a803
   3171c:	4606f8db 	.word	0x4606f8db
   31720:	d1e62800 	.word	0xd1e62800
   31724:	a8034629 	.word	0xa8034629
   31728:	fc84f7fe 	.word	0xfc84f7fe
   3172c:	28004606 	.word	0x28004606
   31730:	69abd1df 	.word	0x69abd1df
   31734:	d04e2b00 	.word	0xd04e2b00
   31738:	f105a903 	.word	0xf105a903
   3173c:	46080210 	.word	0x46080210
   31740:	ff94f004 	.word	0xff94f004
   31744:	28004606 	.word	0x28004606
   31748:	e007d1d3 	.word	0xe007d1d3
   3174c:	4642a903 	.word	0x4642a903
   31750:	f0044608 	.word	0xf0044608
   31754:	4606fecb 	.word	0x4606fecb
   31758:	d1ca2800 	.word	0xd1ca2800
   3175c:	a8034641 	.word	0xa8034641
   31760:	fd64f004 	.word	0xfd64f004
   31764:	daf12800 	.word	0xdaf12800
   31768:	4622a903 	.word	0x4622a903
   3176c:	f0054608 	.word	0xf0054608
   31770:	4606f8b1 	.word	0x4606f8b1
   31774:	d1bc2800 	.word	0xd1bc2800
   31778:	a8034629 	.word	0xa8034629
   3177c:	fc5af7fe 	.word	0xfc5af7fe
   31780:	28004606 	.word	0x28004606
   31784:	a903d1b5 	.word	0xa903d1b5
   31788:	021cf105 	.word	0x021cf105
   3178c:	f0044608 	.word	0xf0044608
   31790:	4606ff6d 	.word	0x4606ff6d
   31794:	d1ac2800 	.word	0xd1ac2800
   31798:	a903e007 	.word	0xa903e007
   3179c:	46084642 	.word	0x46084642
   317a0:	fea4f004 	.word	0xfea4f004
   317a4:	28004606 	.word	0x28004606
   317a8:	4641d1a3 	.word	0x4641d1a3
   317ac:	f004a803 	.word	0xf004a803
   317b0:	2800fd3d 	.word	0x2800fd3d
   317b4:	a903daf1 	.word	0xa903daf1
   317b8:	f0044668 	.word	0xf0044668
   317bc:	4e14fd37 	.word	0x4e14fd37
   317c0:	bf082800 	.word	0xbf082800
   317c4:	e7942600 	.word	0xe7942600
   317c8:	46304e11 	.word	0x46304e11
   317cc:	e8bdb006 	.word	0xe8bdb006
   317d0:	4e1081f0 	.word	0x4e1081f0
   317d4:	a903e793 	.word	0xa903e793
   317d8:	46082203 	.word	0x46082203
   317dc:	f82ef005 	.word	0xf82ef005
   317e0:	28004606 	.word	0x28004606
   317e4:	e00ed185 	.word	0xe00ed185
   317e8:	a8032100 	.word	0xa8032100
   317ec:	fd86f004 	.word	0xfd86f004
   317f0:	d0b92800 	.word	0xd0b92800
   317f4:	4642a903 	.word	0x4642a903
   317f8:	f0044608 	.word	0xf0044608
   317fc:	4606ff37 	.word	0x4606ff37
   31800:	f47f2800 	.word	0xf47f2800
   31804:	9b03af76 	.word	0x9b03af76
   31808:	dbed2b00 	.word	0xdbed2b00
   3180c:	bf00e7ac 	.word	0xbf00e7ac
   31810:	ffffb380 	.word	0xffffb380
   31814:	ffffb080 	.word	0xffffb080

00031818 <symbol_0001f66>:
   31818:	43f0e92d 	.word	0x43f0e92d
   3181c:	b0ab7803 	.word	0xb0ab7803
   31820:	f0002b00 	.word	0xf0002b00
   31824:	780a80c4 	.word	0x780a80c4
   31828:	f040429a 	.word	0xf040429a
   3182c:	f10180c0 	.word	0xf10180c0
   31830:	460c0788 	.word	0x460c0788
   31834:	46394605 	.word	0x46394605
   31838:	f0043088 	.word	0xf0043088
   3183c:	2800fcf7 	.word	0x2800fcf7
   31840:	80b5f040 	.word	0x80b5f040
   31844:	0994f104 	.word	0x0994f104
   31848:	f1054649 	.word	0xf1054649
   3184c:	f0040094 	.word	0xf0040094
   31850:	2800fced 	.word	0x2800fced
   31854:	80abf040 	.word	0x80abf040
   31858:	08a0f104 	.word	0x08a0f104
   3185c:	00a0f105 	.word	0x00a0f105
   31860:	f0044641 	.word	0xf0044641
   31864:	4606fce3 	.word	0x4606fce3
   31868:	f0402800 	.word	0xf0402800
   3186c:	462580a0 	.word	0x462580a0
   31870:	f004a802 	.word	0xf004a802
   31874:	a805f819 	.word	0xa805f819
   31878:	f816f004 	.word	0xf816f004
   3187c:	f004a808 	.word	0xf004a808
   31880:	4631f813 	.word	0x4631f813
   31884:	a80b227c 	.word	0xa80b227c
   31888:	fa60f00e 	.word	0xfa60f00e
   3188c:	1b7cf815 	.word	0x1b7cf815
   31890:	f7fda80b 	.word	0xf7fda80b
   31894:	f104fbd5 	.word	0xf104fbd5
   31898:	21010040 	.word	0x21010040
   3189c:	f0043428 	.word	0xf0043428
   318a0:	2800fd2d 	.word	0x2800fd2d
   318a4:	8081f040 	.word	0x8081f040
   318a8:	2b009b17 	.word	0x2b009b17
   318ac:	9b1ad07d 	.word	0x9b1ad07d
   318b0:	d07a2b00 	.word	0xd07a2b00
   318b4:	46282101 	.word	0x46282101
   318b8:	fd20f004 	.word	0xfd20f004
   318bc:	f2c02800 	.word	0xf2c02800
   318c0:	a91e8083 	.word	0xa91e8083
   318c4:	f0044628 	.word	0xf0044628
   318c8:	2800fcb1 	.word	0x2800fcb1
   318cc:	4621da7c 	.word	0x4621da7c
   318d0:	f7ffa80b 	.word	0xf7ffa80b
   318d4:	4606fecd 	.word	0x4606fecd
   318d8:	9b17b980 	.word	0x9b17b980
   318dc:	d0642b00 	.word	0xd0642b00
   318e0:	2b009b1a 	.word	0x2b009b1a
   318e4:	e9cdd061 	.word	0xe9cdd061
   318e8:	46230000 	.word	0x46230000
   318ec:	a902462a 	.word	0xa902462a
   318f0:	f7ffa80b 	.word	0xf7ffa80b
   318f4:	4606fa6b 	.word	0x4606fa6b
   318f8:	d04c2800 	.word	0xd04c2800
   318fc:	f003a802 	.word	0xf003a802
   31900:	a805ffdb 	.word	0xa805ffdb
   31904:	ffd8f003 	.word	0xffd8f003
   31908:	f003a808 	.word	0xf003a808
   3190c:	9b23ffd5 	.word	0x9b23ffd5
   31910:	d1262b01 	.word	0xd1262b01
   31914:	b1c89828 	.word	0xb1c89828
   31918:	b1aa9a29 	.word	0xb1aa9a29
   3191c:	eb052500 	.word	0xeb052500
   31920:	eb1003c5 	.word	0xeb1003c5
   31924:	d0320483 	.word	0xd0320483
   31928:	f0034620 	.word	0xf0034620
   3192c:	f104ffc5 	.word	0xf104ffc5
   31930:	f003000c 	.word	0xf003000c
   31934:	f104ffc1 	.word	0xf104ffc1
   31938:	f0030018 	.word	0xf0030018
   3193c:	9a29ffbd 	.word	0x9a29ffbd
   31940:	42953501 	.word	0x42953501
   31944:	d3ea9828 	.word	0xd3ea9828
   31948:	fc16f007 	.word	0xfc16f007
   3194c:	ab0b2200 	.word	0xab0b2200
   31950:	a92a701a 	.word	0xa92a701a
   31954:	428b3301 	.word	0x428b3301
   31958:	4630d1fa 	.word	0x4630d1fa
   3195c:	e8bdb02b 	.word	0xe8bdb02b
   31960:	a80c83f0 	.word	0xa80c83f0
   31964:	ffa8f003 	.word	0xffa8f003
   31968:	f003a80f 	.word	0xf003a80f
   3196c:	a812ffa5 	.word	0xa812ffa5
   31970:	ffa2f003 	.word	0xffa2f003
   31974:	f003a815 	.word	0xf003a815
   31978:	a818ff9f 	.word	0xa818ff9f
   3197c:	ff9cf003 	.word	0xff9cf003
   31980:	f003a81b 	.word	0xf003a81b
   31984:	a81eff99 	.word	0xa81eff99
   31988:	ff96f003 	.word	0xff96f003
   3198c:	3501e7c2 	.word	0x3501e7c2
   31990:	d3c44295 	.word	0xd3c44295
   31994:	4639e7d8 	.word	0x4639e7d8
   31998:	f004a802 	.word	0xf004a802
   3199c:	b920fc47 	.word	0xb920fc47
   319a0:	a8054649 	.word	0xa8054649
   319a4:	fc42f004 	.word	0xfc42f004
   319a8:	4e08b130 	.word	0x4e08b130
   319ac:	4e07e7a6 	.word	0x4e07e7a6
   319b0:	b02b4630 	.word	0xb02b4630
   319b4:	83f0e8bd 	.word	0x83f0e8bd
   319b8:	a8084641 	.word	0xa8084641
   319bc:	fc36f004 	.word	0xfc36f004
   319c0:	28004606 	.word	0x28004606
   319c4:	e7f0d09a 	.word	0xe7f0d09a
   319c8:	e7974e01 	.word	0xe7974e01
   319cc:	ffffb080 	.word	0xffffb080
   319d0:	ffffb380 	.word	0xffffb380

000319d4 <interface_init>:
   319d4:	f44fb508 	.word	0xf44fb508
   319d8:	21007290 	.word	0x21007290
   319dc:	f00e4802 	.word	0xf00e4802
   319e0:	2000f9b5 	.word	0x2000f9b5
   319e4:	bf00bd08 	.word	0xbf00bd08
   319e8:	2002c3a8 	.word	0x2002c3a8

000319ec <interface_socket_allocate>:
   319ec:	4b29b5f8 	.word	0x4b29b5f8
   319f0:	681d4606 	.word	0x681d4606
   319f4:	b1e54608 	.word	0xb1e54608
   319f8:	2c006a5c 	.word	0x2c006a5c
   319fc:	6c9cd03d 	.word	0x6c9cd03d
   31a00:	d03c2c00 	.word	0xd03c2c00
   31a04:	2c006edc 	.word	0x2c006edc
   31a08:	f8d3d03b 	.word	0xf8d3d03b
   31a0c:	b1791090 	.word	0xb1791090
   31a10:	10b4f8d3 	.word	0x10b4f8d3
   31a14:	f8d3b3b9 	.word	0xf8d3b3b9
   31a18:	b3b110d8 	.word	0xb3b110d8
   31a1c:	10fcf8d3 	.word	0x10fcf8d3
   31a20:	f04fb3a9 	.word	0xf04fb3a9
   31a24:	200c35ff 	.word	0x200c35ff
   31a28:	fb96f7f3 	.word	0xfb96f7f3
   31a2c:	bdf84628 	.word	0xbdf84628
   31a30:	f04f2504 	.word	0xf04f2504
   31a34:	f04f0c01 	.word	0xf04f0c01
   31a38:	eb0537ff 	.word	0xeb0537ff
   31a3c:	00a404c5 	.word	0x00a404c5
   31a40:	c004f843 	.word	0xc004f843
   31a44:	4611441c 	.word	0x4611441c
   31a48:	462261a7 	.word	0x462261a7
   31a4c:	facaf7fd 	.word	0xfacaf7fd
   31a50:	61e04603 	.word	0x61e04603
   31a54:	681bb158 	.word	0x681bb158
   31a58:	4798681b 	.word	0x4798681b
   31a5c:	6034b910 	.word	0x6034b910
   31a60:	bdf84628 	.word	0xbdf84628
   31a64:	f7fd69e0 	.word	0xf7fd69e0
   31a68:	2300fadd 	.word	0x2300fadd
   31a6c:	462061e3 	.word	0x462061e3
   31a70:	21002224 	.word	0x21002224
   31a74:	f96af00e 	.word	0xf96af00e
   31a78:	2501e7d3 	.word	0x2501e7d3
   31a7c:	2502e7d9 	.word	0x2502e7d9
   31a80:	2503e7d7 	.word	0x2503e7d7
   31a84:	2505e7d5 	.word	0x2505e7d5
   31a88:	2506e7d3 	.word	0x2506e7d3
   31a8c:	2507e7d1 	.word	0x2507e7d1
   31a90:	bf00e7cf 	.word	0xbf00e7cf
   31a94:	2002c3a8 	.word	0x2002c3a8

00031a98 <interface_socket_free>:
   31a98:	d9002807 	.word	0xd9002807
   31a9c:	b5104770 	.word	0xb5104770
   31aa0:	eb004c07 	.word	0xeb004c07
   31aa4:	eb0400c0 	.word	0xeb0400c0
   31aa8:	69e00480 	.word	0x69e00480
   31aac:	f7fdb108 	.word	0xf7fdb108
   31ab0:	4620fab9 	.word	0x4620fab9
   31ab4:	4010e8bd 	.word	0x4010e8bd
   31ab8:	21002224 	.word	0x21002224
   31abc:	b946f00e 	.word	0xb946f00e
   31ac0:	2002c3a8 	.word	0x2002c3a8

00031ac4 <interface_socket_packet_handler_update>:
   31ac4:	e92d2807 	.word	0xe92d2807
   31ac8:	d81e43f8 	.word	0xd81e43f8
   31acc:	08c0ea4f 	.word	0x08c0ea4f
   31ad0:	eb084e17 	.word	0xeb084e17
   31ad4:	009b0300 	.word	0x009b0300
   31ad8:	18f558f4 	.word	0x18f558f4
   31adc:	460bb1ac 	.word	0x460bb1ac
   31ae0:	46114604 	.word	0x46114604
   31ae4:	462a4618 	.word	0x462a4618
   31ae8:	901cf8d5 	.word	0x901cf8d5
   31aec:	fa7af7fd 	.word	0xfa7af7fd
   31af0:	b1d061e8 	.word	0xb1d061e8
   31af4:	681b6803 	.word	0x681b6803
   31af8:	46074798 	.word	0x46074798
   31afc:	4648b948 	.word	0x4648b948
   31b00:	fa90f7fd 	.word	0xfa90f7fd
   31b04:	e8bd4638 	.word	0xe8bd4638
   31b08:	270583f8 	.word	0x270583f8
   31b0c:	e8bd4638 	.word	0xe8bd4638
   31b10:	69e883f8 	.word	0x69e883f8
   31b14:	fa86f7fd 	.word	0xfa86f7fd
   31b18:	0004eb08 	.word	0x0004eb08
   31b1c:	0680eb06 	.word	0x0680eb06
   31b20:	901cf8c6 	.word	0x901cf8c6
   31b24:	e8bd4638 	.word	0xe8bd4638
   31b28:	270483f8 	.word	0x270483f8
   31b2c:	bf00e7f4 	.word	0xbf00e7f4
   31b30:	2002c3a8 	.word	0x2002c3a8

00031b34 <interface_socket_wait>:
   31b34:	eb00b5f0 	.word	0xeb00b5f0
   31b38:	4c0e00c0 	.word	0x4c0e00c0
   31b3c:	58250080 	.word	0x58250080
   31b40:	4015b083 	.word	0x4015b083
   31b44:	9301428d 	.word	0x9301428d
   31b48:	d0104404 	.word	0xd0104404
   31b4c:	b9736863 	.word	0xb9736863
   31b50:	4616460f 	.word	0x4616460f
   31b54:	e0064625 	.word	0xe0064625
   31b58:	b943686b 	.word	0xb943686b
   31b5c:	4620a901 	.word	0x4620a901
   31b60:	fa6af7f3 	.word	0xfa6af7f3
   31b64:	682bb920 	.word	0x682bb920
   31b68:	42bb4033 	.word	0x42bb4033
   31b6c:	2000d1f4 	.word	0x2000d1f4
   31b70:	bdf0b003 	.word	0xbdf0b003
   31b74:	2002c3a8 	.word	0x2002c3a8

00031b78 <interface_from_internal_id_search>:
   31b78:	681a4b23 	.word	0x681a4b23
   31b7c:	699ab112 	.word	0x699ab112
   31b80:	d0324282 	.word	0xd0324282
   31b84:	b1126a5a 	.word	0xb1126a5a
   31b88:	42826bda 	.word	0x42826bda
   31b8c:	6c9ad02f 	.word	0x6c9ad02f
   31b90:	6e1ab112 	.word	0x6e1ab112
   31b94:	d02c4282 	.word	0xd02c4282
   31b98:	b11a6eda 	.word	0xb11a6eda
   31b9c:	2084f8d3 	.word	0x2084f8d3
   31ba0:	d0284282 	.word	0xd0284282
   31ba4:	2090f8d3 	.word	0x2090f8d3
   31ba8:	f8d3b11a 	.word	0xf8d3b11a
   31bac:	428220a8 	.word	0x428220a8
   31bb0:	f8d3d023 	.word	0xf8d3d023
   31bb4:	b11a20b4 	.word	0xb11a20b4
   31bb8:	20ccf8d3 	.word	0x20ccf8d3
   31bbc:	d01e4282 	.word	0xd01e4282
   31bc0:	20d8f8d3 	.word	0x20d8f8d3
   31bc4:	f8d3b11a 	.word	0xf8d3b11a
   31bc8:	428220f0 	.word	0x428220f0
   31bcc:	f8d3d019 	.word	0xf8d3d019
   31bd0:	b13a20fc 	.word	0xb13a20fc
   31bd4:	3114f8d3 	.word	0x3114f8d3
   31bd8:	bf144283 	.word	0xbf144283
   31bdc:	30fff04f 	.word	0x30fff04f
   31be0:	47702007 	.word	0x47702007
   31be4:	30fff04f 	.word	0x30fff04f
   31be8:	20004770 	.word	0x20004770
   31bec:	20014770 	.word	0x20014770
   31bf0:	20024770 	.word	0x20024770
   31bf4:	20034770 	.word	0x20034770
   31bf8:	20044770 	.word	0x20044770
   31bfc:	20054770 	.word	0x20054770
   31c00:	20064770 	.word	0x20064770
   31c04:	bf004770 	.word	0xbf004770
   31c08:	2002c3a8 	.word	0x2002c3a8

00031c0c <interface_socket_from_handle_get>:
   31c0c:	d8072807 	.word	0xd8072807
   31c10:	00c0eb00 	.word	0x00c0eb00
   31c14:	00804b03 	.word	0x00804b03
   31c18:	b10a581a 	.word	0xb10a581a
   31c1c:	47704418 	.word	0x47704418
   31c20:	47702000 	.word	0x47702000
   31c24:	2002c3a8 	.word	0x2002c3a8

00031c28 <interface_socket_event_get>:
   31c28:	2807b119 	.word	0x2807b119
   31c2c:	2310d902 	.word	0x2310d902
   31c30:	4770600b 	.word	0x4770600b
   31c34:	00c0eb00 	.word	0x00c0eb00
   31c38:	00804b07 	.word	0x00804b07
   31c3c:	2a00581a 	.word	0x2a00581a
   31c40:	581bd0f5 	.word	0x581bd0f5
   31c44:	f0030c1b 	.word	0xf0030c1b
   31c48:	2a0a020a 	.word	0x2a0a020a
   31c4c:	f003bf14 	.word	0xf003bf14
   31c50:	f003030f 	.word	0xf003030f
   31c54:	e7eb030d 	.word	0xe7eb030d
   31c58:	2002c3a8 	.word	0x2002c3a8

00031c5c <interface_socket_setopt>:
   31c5c:	b5702807 	.word	0xb5702807
   31c60:	eb00d827 	.word	0xeb00d827
   31c64:	4c1600c0 	.word	0x4c1600c0
   31c68:	58250080 	.word	0x58250080
   31c6c:	2901b30d 	.word	0x2901b30d
   31c70:	2a14d119 	.word	0x2a14d119
   31c74:	b183d117 	.word	0xb183d117
   31c78:	2a089a04 	.word	0x2a089a04
   31c7c:	f44fd10d 	.word	0xf44fd10d
   31c80:	685a757a 	.word	0x685a757a
   31c84:	68194e0f 	.word	0x68194e0f
   31c88:	2302fba6 	.word	0x2302fba6
   31c8c:	fb05099b 	.word	0xfb05099b
   31c90:	44203301 	.word	0x44203301
   31c94:	20006203 	.word	0x20006203
   31c98:	2016bd70 	.word	0x2016bd70
   31c9c:	fa5cf7f3 	.word	0xfa5cf7f3
   31ca0:	30fff04f 	.word	0x30fff04f
   31ca4:	202abd70 	.word	0x202abd70
   31ca8:	fa56f7f3 	.word	0xfa56f7f3
   31cac:	30fff04f 	.word	0x30fff04f
   31cb0:	2009bd70 	.word	0x2009bd70
   31cb4:	fa50f7f3 	.word	0xfa50f7f3
   31cb8:	30fff04f 	.word	0x30fff04f
   31cbc:	bf00bd70 	.word	0xbf00bd70
   31cc0:	2002c3a8 	.word	0x2002c3a8
   31cc4:	10624dd3 	.word	0x10624dd3

00031cc8 <interface_socket_getopt>:
   31cc8:	2807b570 	.word	0x2807b570
   31ccc:	d8219d04 	.word	0xd8219d04
   31cd0:	eb004c13 	.word	0xeb004c13
   31cd4:	008000c0 	.word	0x008000c0
   31cd8:	44045826 	.word	0x44045826
   31cdc:	2901b1d6 	.word	0x2901b1d6
   31ce0:	2a04d112 	.word	0x2a04d112
   31ce4:	b14bd110 	.word	0xb14bd110
   31ce8:	682ab145 	.word	0x682ab145
   31cec:	d1052a04 	.word	0xd1052a04
   31cf0:	68612200 	.word	0x68612200
   31cf4:	60194610 	.word	0x60194610
   31cf8:	bd706062 	.word	0xbd706062
   31cfc:	f7f32016 	.word	0xf7f32016
   31d00:	f04ffa2b 	.word	0xf04ffa2b
   31d04:	bd7030ff 	.word	0xbd7030ff
   31d08:	f7f3202a 	.word	0xf7f3202a
   31d0c:	f04ffa25 	.word	0xf04ffa25
   31d10:	bd7030ff 	.word	0xbd7030ff
   31d14:	f7f32009 	.word	0xf7f32009
   31d18:	f04ffa1f 	.word	0xf04ffa1f
   31d1c:	bd7030ff 	.word	0xbd7030ff
   31d20:	2002c3a8 	.word	0x2002c3a8

00031d24 <interface_shutdown>:
   31d24:	681a4b15 	.word	0x681a4b15
   31d28:	2270b10a 	.word	0x2270b10a
   31d2c:	6a5a605a 	.word	0x6a5a605a
   31d30:	2270b10a 	.word	0x2270b10a
   31d34:	6c9a629a 	.word	0x6c9a629a
   31d38:	2270b10a 	.word	0x2270b10a
   31d3c:	6eda64da 	.word	0x6eda64da
   31d40:	2270b10a 	.word	0x2270b10a
   31d44:	f8d3671a 	.word	0xf8d3671a
   31d48:	b1122090 	.word	0xb1122090
   31d4c:	f8c32270 	.word	0xf8c32270
   31d50:	f8d32094 	.word	0xf8d32094
   31d54:	b11220b4 	.word	0xb11220b4
   31d58:	f8c32270 	.word	0xf8c32270
   31d5c:	f8d320b8 	.word	0xf8d320b8
   31d60:	b11220d8 	.word	0xb11220d8
   31d64:	f8c32270 	.word	0xf8c32270
   31d68:	f8d320dc 	.word	0xf8d320dc
   31d6c:	b11220fc 	.word	0xb11220fc
   31d70:	f8c32270 	.word	0xf8c32270
   31d74:	20002100 	.word	0x20002100
   31d78:	bf004770 	.word	0xbf004770
   31d7c:	2002c3a8 	.word	0x2002c3a8

00031d80 <interface_socket_fcntl>:
   31d80:	b5102807 	.word	0xb5102807
   31d84:	eb00d818 	.word	0xeb00d818
   31d88:	4c1100c0 	.word	0x4c1100c0
   31d8c:	58e00083 	.word	0x58e00083
   31d90:	2901b190 	.word	0x2901b190
   31d94:	2902d005 	.word	0x2902d005
   31d98:	58e0d114 	.word	0x58e0d114
   31d9c:	7000f3c0 	.word	0x7000f3c0
   31da0:	f012bd10 	.word	0xf012bd10
   31da4:	58e20001 	.word	0x58e20001
   31da8:	2000bf1a 	.word	0x2000bf1a
   31dac:	5280f042 	.word	0x5280f042
   31db0:	5280f022 	.word	0x5280f022
   31db4:	bd1050e2 	.word	0xbd1050e2
   31db8:	f7f32009 	.word	0xf7f32009
   31dbc:	f04ff9cd 	.word	0xf04ff9cd
   31dc0:	bd1030ff 	.word	0xbd1030ff
   31dc4:	f7f32016 	.word	0xf7f32016
   31dc8:	f04ff9c7 	.word	0xf04ff9c7
   31dcc:	bd1030ff 	.word	0xbd1030ff
   31dd0:	2002c3a8 	.word	0x2002c3a8

00031dd4 <symbol_00026c2>:
   31dd4:	4ff0e92d 	.word	0x4ff0e92d
   31dd8:	2100460e 	.word	0x2100460e
   31ddc:	b0854605 	.word	0xb0854605
   31de0:	93004608 	.word	0x93004608
   31de4:	461c4617 	.word	0x461c4617
   31de8:	aa034613 	.word	0xaa034613
   31dec:	9038f8dd 	.word	0x9038f8dd
   31df0:	f88af7fb 	.word	0xf88af7fb
   31df4:	f00e4628 	.word	0xf00e4628
   31df8:	4682fbc5 	.word	0x4682fbc5
   31dfc:	f00e4630 	.word	0xf00e4630
   31e00:	9903fbc1 	.word	0x9903fbc1
   31e04:	eb031c4b 	.word	0xeb031c4b
   31e08:	44531391 	.word	0x44531391
   31e0c:	9b0f4418 	.word	0x9b0f4418
   31e10:	d8534298 	.word	0xd8534298
   31e14:	f0072001 	.word	0xf0072001
   31e18:	4682f99b 	.word	0x4682f99b
   31e1c:	d0522800 	.word	0xd0522800
   31e20:	94009903 	.word	0x94009903
   31e24:	aa03463b 	.word	0xaa03463b
   31e28:	f86ef7fb 	.word	0xf86ef7fb
   31e2c:	28004680 	.word	0x28004680
   31e30:	4628d13d 	.word	0x4628d13d
   31e34:	fba6f00e 	.word	0xfba6f00e
   31e38:	46024629 	.word	0x46024629
   31e3c:	f7e84648 	.word	0xf7e84648
   31e40:	4628f837 	.word	0x4628f837
   31e44:	fb9ef00e 	.word	0xfb9ef00e
   31e48:	eb099b03 	.word	0xeb099b03
   31e4c:	b19b0400 	.word	0xb19b0400
   31e50:	270a46d3 	.word	0x270a46d3
   31e54:	bf282b40 	.word	0xbf282b40
   31e58:	461d2340 	.word	0x461d2340
   31e5c:	461a4659 	.word	0x461a4659
   31e60:	f7e84620 	.word	0xf7e84620
   31e64:	9b03f825 	.word	0x9b03f825
   31e68:	1b5b442c 	.word	0x1b5b442c
   31e6c:	44ab7027 	.word	0x44ab7027
   31e70:	93033401 	.word	0x93033401
   31e74:	d1ed2b00 	.word	0xd1ed2b00
   31e78:	f00e4630 	.word	0xf00e4630
   31e7c:	4631fb83 	.word	0x4631fb83
   31e80:	46204602 	.word	0x46204602
   31e84:	f814f7e8 	.word	0xf814f7e8
   31e88:	f00e4630 	.word	0xf00e4630
   31e8c:	2100fb7b 	.word	0x2100fb7b
   31e90:	18234602 	.word	0x18234602
   31e94:	330154a1 	.word	0x330154a1
   31e98:	eba39a10 	.word	0xeba39a10
   31e9c:	46500309 	.word	0x46500309
   31ea0:	f0076013 	.word	0xf0076013
   31ea4:	4640f969 	.word	0x4640f969
   31ea8:	e8bdb005 	.word	0xe8bdb005
   31eac:	46508ff0 	.word	0x46508ff0
   31eb0:	f962f007 	.word	0xf962f007
   31eb4:	b0054640 	.word	0xb0054640
   31eb8:	8ff0e8bd 	.word	0x8ff0e8bd
   31ebc:	f06f9b10 	.word	0xf06f9b10
   31ec0:	60180829 	.word	0x60180829
   31ec4:	f8dfe7ef 	.word	0xf8dfe7ef
   31ec8:	e7ec8004 	.word	0xe7ec8004
   31ecc:	ffffee80 	.word	0xffffee80

00031ed0 <ip_recvd_packet_free_cb>:
   31ed0:	4604b510 	.word	0x4604b510
   31ed4:	f7fa6800 	.word	0xf7fa6800
   31ed8:	68a0fc9f 	.word	0x68a0fc9f
   31edc:	e8bdb118 	.word	0xe8bdb118
   31ee0:	f0074010 	.word	0xf0074010
   31ee4:	bd10b949 	.word	0xbd10b949

00031ee8 <rpc_error_to_nrf_bsd_error>:
   31ee8:	bf9a2810 	.word	0xbf9a2810
   31eec:	f8534b02 	.word	0xf8534b02
   31ef0:	202d0020 	.word	0x202d0020
   31ef4:	bf004770 	.word	0xbf004770
   31ef8:	00049e20 	.word	0x00049e20

00031efc <ip_interface_request_create>:
   31efc:	2500b570 	.word	0x2500b570
   31f00:	ac02b082 	.word	0xac02b082
   31f04:	5d04f844 	.word	0x5d04f844
   31f08:	460d4606 	.word	0x460d4606
   31f0c:	46194620 	.word	0x46194620
   31f10:	f7fa4614 	.word	0xf7fa4614
   31f14:	b960fc4f 	.word	0xb960fc4f
   31f18:	22089b01 	.word	0x22089b01
   31f1c:	72987258 	.word	0x72987258
   31f20:	461872d8 	.word	0x461872d8
   31f24:	4406ea44 	.word	0x4406ea44
   31f28:	611d60dc 	.word	0x611d60dc
   31f2c:	b002721a 	.word	0xb002721a
   31f30:	9b01bd70 	.word	0x9b01bd70
   31f34:	b0024618 	.word	0xb0024618
   31f38:	bf00bd70 	.word	0xbf00bd70

00031f3c <ip_interface_request_send>:
   31f3c:	460cb570 	.word	0x460cb570
   31f40:	46114605 	.word	0x46114605
   31f44:	461e4620 	.word	0x461e4620
   31f48:	fc48f7fa 	.word	0xfc48f7fa
   31f4c:	bd70b900 	.word	0xbd70b900
   31f50:	b1086820 	.word	0xb1086820
   31f54:	fc60f7fa 	.word	0xfc60f7fa
   31f58:	f7fa4620 	.word	0xf7fa4620
   31f5c:	602efc55 	.word	0x602efc55
   31f60:	bd702023 	.word	0xbd702023

00031f64 <ip_interface_wait>:
   31f64:	4605b538 	.word	0x4605b538
   31f68:	fde4f7ff 	.word	0xfde4f7ff
   31f6c:	b1084604 	.word	0xb1084604
   31f70:	bd384620 	.word	0xbd384620
   31f74:	f7ff4628 	.word	0xf7ff4628
   31f78:	2800fe49 	.word	0x2800fe49
   31f7c:	6844d0f8 	.word	0x6844d0f8
   31f80:	d0f52c00 	.word	0xd0f52c00
   31f84:	60432300 	.word	0x60432300
   31f88:	bd384620 	.word	0xbd384620

00031f8c <ip_interface_init>:
   31f8c:	2300b538 	.word	0x2300b538
   31f90:	4c084d07 	.word	0x4c084d07
   31f94:	22204619 	.word	0x22204619
   31f98:	602b4807 	.word	0x602b4807
   31f9c:	f00d6023 	.word	0xf00d6023
   31fa0:	f7fafed5 	.word	0xf7fafed5
   31fa4:	3000fc01 	.word	0x3000fc01
   31fa8:	2001bf18 	.word	0x2001bf18
   31fac:	bd384240 	.word	0xbd384240
   31fb0:	20024be0 	.word	0x20024be0
   31fb4:	20024bdc 	.word	0x20024bdc
   31fb8:	20024be8 	.word	0x20024be8

00031fbc <ip_interface_open>:
   31fbc:	41f0e92d 	.word	0x41f0e92d
   31fc0:	20004606 	.word	0x20004606
   31fc4:	0308f026 	.word	0x0308f026
   31fc8:	2b02b082 	.word	0x2b02b082
   31fcc:	4617460c 	.word	0x4617460c
   31fd0:	d0029000 	.word	0xd0029000
   31fd4:	f0402e05 	.word	0xf0402e05
   31fd8:	1e638084 	.word	0x1e638084
   31fdc:	d85c2b02 	.word	0xd85c2b02
   31fe0:	d1542f00 	.word	0xd1542f00
   31fe4:	d0672c01 	.word	0xd0672c01
   31fe8:	bf182c03 	.word	0xbf182c03
   31fec:	4a482702 	.word	0x4a482702
   31ff0:	46684621 	.word	0x46684621
   31ff4:	fcfaf7ff 	.word	0xfcfaf7ff
   31ff8:	46809b00 	.word	0x46809b00
   31ffc:	d0592b00 	.word	0xd0592b00
   32000:	a8022100 	.word	0xa8022100
   32004:	1d04f840 	.word	0x1d04f840
   32008:	6403e9c3 	.word	0x6403e9c3
   3200c:	f7fa615f 	.word	0xf7fa615f
   32010:	2800fbd1 	.word	0x2800fbd1
   32014:	f247d14b 	.word	0xf247d14b
   32018:	f04f0201 	.word	0xf04f0201
   3201c:	210833ff 	.word	0x210833ff
   32020:	ea429d01 	.word	0xea429d01
   32024:	60ea4208 	.word	0x60ea4208
   32028:	72a87268 	.word	0x72a87268
   3202c:	722972e8 	.word	0x722972e8
   32030:	746b742b 	.word	0x746b742b
   32034:	74eb74ab 	.word	0x74eb74ab
   32038:	2e0568ab 	.word	0x2e0568ab
   3203c:	030cf103 	.word	0x030cf103
   32040:	d00360ab 	.word	0xd00360ab
   32044:	bf142e0a 	.word	0xbf142e0a
   32048:	26022601 	.word	0x26022601
   3204c:	61ef616e 	.word	0x61ef616e
   32050:	f24761ac 	.word	0xf24761ac
   32054:	46280101 	.word	0x46280101
   32058:	f7fa9f00 	.word	0xf7fa9f00
   3205c:	4606fbbf 	.word	0x4606fbbf
   32060:	6828b360 	.word	0x6828b360
   32064:	f7fab108 	.word	0xf7fab108
   32068:	4628fbd7 	.word	0x4628fbd7
   3206c:	fbccf7fa 	.word	0xfbccf7fa
   32070:	25232301 	.word	0x25232301
   32074:	4640603b 	.word	0x4640603b
   32078:	fd0ef7ff 	.word	0xfd0ef7ff
   3207c:	f7f34628 	.word	0xf7f34628
   32080:	f04ff86b 	.word	0xf04ff86b
   32084:	464038ff 	.word	0x464038ff
   32088:	e8bdb002 	.word	0xe8bdb002
   3208c:	2c0181f0 	.word	0x2c0181f0
   32090:	2c02d009 	.word	0x2c02d009
   32094:	2f02d109 	.word	0x2f02d109
   32098:	2016d0a9 	.word	0x2016d0a9
   3209c:	f85cf7f3 	.word	0xf85cf7f3
   320a0:	38fff04f 	.word	0x38fff04f
   320a4:	2f01e7ef 	.word	0x2f01e7ef
   320a8:	2702d1f7 	.word	0x2702d1f7
   320ac:	9d01e79f 	.word	0x9d01e79f
   320b0:	d1c12d00 	.word	0xd1c12d00
   320b4:	e7de250c 	.word	0xe7de250c
   320b8:	e7984627 	.word	0xe7984627
   320bc:	33fff04f 	.word	0x33fff04f
   320c0:	72fff64f 	.word	0x72fff64f
   320c4:	46402102 	.word	0x46402102
   320c8:	fd34f7ff 	.word	0xfd34f7ff
   320cc:	28004605 	.word	0x28004605
   320d0:	4640d1d1 	.word	0x4640d1d1
   320d4:	fd9af7ff 	.word	0xfd9af7ff
   320d8:	6845b148 	.word	0x6845b148
   320dc:	6046b13d 	.word	0x6046b13d
   320e0:	202fe7c9 	.word	0x202fe7c9
   320e4:	f838f7f3 	.word	0xf838f7f3
   320e8:	38fff04f 	.word	0x38fff04f
   320ec:	3c02e7cb 	.word	0x3c02e7cb
   320f0:	d8c82c01 	.word	0xd8c82c01
   320f4:	9b004640 	.word	0x9b004640
   320f8:	f442681a 	.word	0xf442681a
   320fc:	601a3200 	.word	0x601a3200
   32100:	f442681a 	.word	0xf442681a
   32104:	601a1280 	.word	0x601a1280
   32108:	e8bdb002 	.word	0xe8bdb002
   3210c:	bf0081f0 	.word	0xbf0081f0
   32110:	00031ed1 	.word	0x00031ed1

00032114 <ip_interface_close>:
   32114:	41f0e92d 	.word	0x41f0e92d
   32118:	4606b082 	.word	0x4606b082
   3211c:	fd76f7ff 	.word	0xfd76f7ff
   32120:	d0632800 	.word	0xd0632800
   32124:	21004604 	.word	0x21004604
   32128:	6827a802 	.word	0x6827a802
   3212c:	1d04f840 	.word	0x1d04f840
   32130:	8018f8d4 	.word	0x8018f8d4
   32134:	fb3ef7fa 	.word	0xfb3ef7fa
   32138:	d13a2800 	.word	0xd13a2800
   3213c:	0309f247 	.word	0x0309f247
   32140:	9d012208 	.word	0x9d012208
   32144:	4306ea43 	.word	0x4306ea43
   32148:	f8c560eb 	.word	0xf8c560eb
   3214c:	72688010 	.word	0x72688010
   32150:	72e872a8 	.word	0x72e872a8
   32154:	6823722a 	.word	0x6823722a
   32158:	0109f247 	.word	0x0109f247
   3215c:	041b0c1b 	.word	0x041b0c1b
   32160:	030df043 	.word	0x030df043
   32164:	68236023 	.word	0x68236023
   32168:	f4234628 	.word	0xf4234628
   3216c:	60233300 	.word	0x60233300
   32170:	f4236823 	.word	0xf4236823
   32174:	60231380 	.word	0x60231380
   32178:	fb30f7fa 	.word	0xfb30f7fa
   3217c:	f04fbb40 	.word	0xf04fbb40
   32180:	f64f33ff 	.word	0xf64f33ff
   32184:	210e72ff 	.word	0x210e72ff
   32188:	f7ff4630 	.word	0xf7ff4630
   3218c:	4604fcd3 	.word	0x4604fcd3
   32190:	4c17b1a0 	.word	0x4c17b1a0
   32194:	0026f854 	.word	0x0026f854
   32198:	f7fab120 	.word	0xf7fab120
   3219c:	2300fb35 	.word	0x2300fb35
   321a0:	3026f844 	.word	0x3026f844
   321a4:	f7ff4630 	.word	0xf7ff4630
   321a8:	2000fc77 	.word	0x2000fc77
   321ac:	e8bdb002 	.word	0xe8bdb002
   321b0:	9d0181f0 	.word	0x9d0181f0
   321b4:	2d00200c 	.word	0x2d00200c
   321b8:	e012d1cd 	.word	0xe012d1cd
   321bc:	f7ff4630 	.word	0xf7ff4630
   321c0:	2800fd25 	.word	0x2800fd25
   321c4:	6843d0e5 	.word	0x6843d0e5
   321c8:	d0e22b00 	.word	0xd0e22b00
   321cc:	e7e06044 	.word	0xe7e06044
   321d0:	b1086828 	.word	0xb1086828
   321d4:	fb20f7fa 	.word	0xfb20f7fa
   321d8:	f7fa4628 	.word	0xf7fa4628
   321dc:	2023fb15 	.word	0x2023fb15
   321e0:	f7f26027 	.word	0xf7f26027
   321e4:	f04fffb9 	.word	0xf04fffb9
   321e8:	e7df30ff 	.word	0xe7df30ff
   321ec:	e7f82009 	.word	0xe7f82009
   321f0:	20024be8 	.word	0x20024be8

000321f4 <ip_interface_sendto>:
   321f4:	4ff0e92d 	.word	0x4ff0e92d
   321f8:	b0892500 	.word	0xb0892500
   321fc:	46149103 	.word	0x46149103
   32200:	95079301 	.word	0x95079301
   32204:	9e124607 	.word	0x9e124607
   32208:	fd00f7ff 	.word	0xfd00f7ff
   3220c:	f0002800 	.word	0xf0002800
   32210:	f5b48124 	.word	0xf5b48124
   32214:	f3005f80 	.word	0xf3005f80
   32218:	69038118 	.word	0x69038118
   3221c:	2b014605 	.word	0x2b014605
   32220:	80d1f000 	.word	0x80d1f000
   32224:	0390682a 	.word	0x0390682a
   32228:	682ad423 	.word	0x682ad423
   3222c:	d4060091 	.word	0xd4060091
   32230:	f0002b01 	.word	0xf0002b01
   32234:	682b80ed 	.word	0x682b80ed
   32238:	f140031a 	.word	0xf140031a
   3223c:	682b8102 	.word	0x682b8102
   32240:	f140031b 	.word	0xf140031b
   32244:	68a88106 	.word	0x68a88106
   32248:	9218f8df 	.word	0x9218f8df
   3224c:	f0402800 	.word	0xf0402800
   32250:	682b8096 	.word	0x682b8096
   32254:	f1400118 	.word	0xf1400118
   32258:	682b8082 	.word	0x682b8082
   3225c:	6300f023 	.word	0x6300f023
   32260:	f859602b 	.word	0xf859602b
   32264:	28000027 	.word	0x28000027
   32268:	4620d17c 	.word	0x4620d17c
   3226c:	e8bdb009 	.word	0xe8bdb009
   32270:	f2478ff0 	.word	0xf2478ff0
   32274:	f04f0806 	.word	0xf04f0806
   32278:	043b0a0c 	.word	0x043b0a0c
   3227c:	91e4f8df 	.word	0x91e4f8df
   32280:	46219304 	.word	0x46219304
   32284:	f7faa807 	.word	0xf7faa807
   32288:	2804fa95 	.word	0x2804fa95
   3228c:	2800d0f9 	.word	0x2800d0f9
   32290:	9b07d171 	.word	0x9b07d171
   32294:	a008f883 	.word	0xa008f883
   32298:	72987258 	.word	0x72987258
   3229c:	b33e72d8 	.word	0xb33e72d8
   322a0:	687168ea 	.word	0x687168ea
   322a4:	d10a428a 	.word	0xd10a428a
   322a8:	f1032a02 	.word	0xf1032a02
   322ac:	7831001c 	.word	0x7831001c
   322b0:	8090f000 	.word	0x8090f000
   322b4:	d1022a0a 	.word	0xd1022a0a
   322b8:	f0002924 	.word	0xf0002924
   322bc:	681880af 	.word	0x681880af
   322c0:	f7fab110 	.word	0xf7fab110
   322c4:	9b07faa9 	.word	0x9b07faa9
   322c8:	f7fa4618 	.word	0xf7fa4618
   322cc:	2016fa9d 	.word	0x2016fa9d
   322d0:	031a682b 	.word	0x031a682b
   322d4:	682bd453 	.word	0x682bd453
   322d8:	2b0db29b 	.word	0x2b0db29b
   322dc:	682bd0b6 	.word	0x682bd0b6
   322e0:	1300f423 	.word	0x1300f423
   322e4:	682b602b 	.word	0x682b602b
   322e8:	3300f443 	.word	0x3300f443
   322ec:	e7ad602b 	.word	0xe7ad602b
   322f0:	99014642 	.word	0x99014642
   322f4:	69a96159 	.word	0x69a96159
   322f8:	61199804 	.word	0x61199804
   322fc:	43029903 	.word	0x43029903
   32300:	605c60da 	.word	0x605c60da
   32304:	6818b119 	.word	0x6818b119
   32308:	f7e74622 	.word	0xf7e74622
   3230c:	682bfdd1 	.word	0x682bfdd1
   32310:	93054641 	.word	0x93054641
   32314:	f423682b 	.word	0xf423682b
   32318:	602b3300 	.word	0x602b3300
   3231c:	f443682b 	.word	0xf443682b
   32320:	602b1300 	.word	0x602b1300
   32324:	46189b07 	.word	0x46189b07
   32328:	f7fa9302 	.word	0xf7fa9302
   3232c:	9b02fa57 	.word	0x9b02fa57
   32330:	bb584683 	.word	0xbb584683
   32334:	3200f44f 	.word	0x3200f44f
   32338:	33fff04f 	.word	0x33fff04f
   3233c:	46384611 	.word	0x46384611
   32340:	fbf8f7ff 	.word	0xfbf8f7ff
   32344:	682bb370 	.word	0x682bb370
   32348:	d4370319 	.word	0xd4370319
   3234c:	d1bf280c 	.word	0xd1bf280c
   32350:	0027f859 	.word	0x0027f859
   32354:	d0942800 	.word	0xd0942800
   32358:	fa56f7fa 	.word	0xfa56f7fa
   3235c:	f859e791 	.word	0xf859e791
   32360:	69840027 	.word	0x69840027
   32364:	fa50f7fa 	.word	0xfa50f7fa
   32368:	46202300 	.word	0x46202300
   3236c:	3027f849 	.word	0x3027f849
   32370:	e8bdb009 	.word	0xe8bdb009
   32374:	682b8ff0 	.word	0x682b8ff0
   32378:	031a200c 	.word	0x031a200c
   3237c:	f7f2d5ab 	.word	0xf7f2d5ab
   32380:	f04ffeeb 	.word	0xf04ffeeb
   32384:	f85934ff 	.word	0xf85934ff
   32388:	e76c0027 	.word	0xe76c0027
   3238c:	469b6818 	.word	0x469b6818
   32390:	f7fab108 	.word	0xf7fab108
   32394:	4658fa41 	.word	0x4658fa41
   32398:	fa36f7fa 	.word	0xfa36f7fa
   3239c:	20239b05 	.word	0x20239b05
   323a0:	e795602b 	.word	0xe795602b
   323a4:	f7ff4638 	.word	0xf7ff4638
   323a8:	4603fc31 	.word	0x4603fc31
   323ac:	6840b1f0 	.word	0x6840b1f0
   323b0:	f8c3b1e0 	.word	0xf8c3b1e0
   323b4:	682bb004 	.word	0x682bb004
   323b8:	d5c70319 	.word	0xd5c70319
   323bc:	682b68a8 	.word	0x682b68a8
   323c0:	d588031e 	.word	0xd588031e
   323c4:	2e00e742 	.word	0x2e00e742
   323c8:	af2cf43f 	.word	0xaf2cf43f
   323cc:	f8df2016 	.word	0xf8df2016
   323d0:	e7d49094 	.word	0xe7d49094
   323d4:	f47f2910 	.word	0xf47f2910
   323d8:	2204af72 	.word	0x2204af72
   323dc:	835a8931 	.word	0x835a8931
   323e0:	f1068319 	.word	0xf1068319
   323e4:	f7e7010c 	.word	0xf7e7010c
   323e8:	e01efd63 	.word	0xe01efd63
   323ec:	031b682b 	.word	0x031b682b
   323f0:	af2ff53f 	.word	0xaf2ff53f
   323f4:	b29b682b 	.word	0xb29b682b
   323f8:	f43f2b0d 	.word	0xf43f2b0d
   323fc:	682baf2a 	.word	0x682baf2a
   32400:	1300f423 	.word	0x1300f423
   32404:	682b602b 	.word	0x682b602b
   32408:	3300f443 	.word	0x3300f443
   3240c:	e720602b 	.word	0xe720602b
   32410:	b29b682b 	.word	0xb29b682b
   32414:	f47f2b05 	.word	0xf47f2b05
   32418:	e70caf12 	.word	0xe70caf12
   3241c:	89312210 	.word	0x89312210
   32420:	8319835a 	.word	0x8319835a
   32424:	f7e718b1 	.word	0xf7e718b1
   32428:	f247fd43 	.word	0xf247fd43
   3242c:	9b070207 	.word	0x9b070207
   32430:	68994690 	.word	0x68994690
   32434:	31048b58 	.word	0x31048b58
   32438:	98014401 	.word	0x98014401
   3243c:	61586099 	.word	0x61586099
   32440:	2023e759 	.word	0x2023e759
   32444:	901cf8df 	.word	0x901cf8df
   32448:	2028e799 	.word	0x2028e799
   3244c:	9014f8df 	.word	0x9014f8df
   32450:	2039e795 	.word	0x2039e795
   32454:	900cf8df 	.word	0x900cf8df
   32458:	2009e791 	.word	0x2009e791
   3245c:	9004f8df 	.word	0x9004f8df
   32460:	bf00e78d 	.word	0xbf00e78d
   32464:	20024be8 	.word	0x20024be8

00032468 <ip_interface_recvfrom>:
   32468:	4ff0e92d 	.word	0x4ff0e92d
   3246c:	2a00b085 	.word	0x2a00b085
   32470:	8110f000 	.word	0x8110f000
   32474:	4699468a 	.word	0x4699468a
   32478:	46164607 	.word	0x46164607
   3247c:	fbc6f7ff 	.word	0xfbc6f7ff
   32480:	28004604 	.word	0x28004604
   32484:	810df000 	.word	0x810df000
   32488:	02d96803 	.word	0x02d96803
   3248c:	f019d565 	.word	0xf019d565
   32490:	bf180f02 	.word	0xbf180f02
   32494:	0800f04f 	.word	0x0800f04f
   32498:	3bfff04f 	.word	0x3bfff04f
   3249c:	6803bf08 	.word	0x6803bf08
   324a0:	0510f009 	.word	0x0510f009
   324a4:	f083bf04 	.word	0xf083bf04
   324a8:	f3c85880 	.word	0xf3c85880
   324ac:	68237800 	.word	0x68237800
   324b0:	d56d03da 	.word	0xd56d03da
   324b4:	69e06823 	.word	0x69e06823
   324b8:	3380f423 	.word	0x3380f423
   324bc:	68036023 	.word	0x68036023
   324c0:	479868db 	.word	0x479868db
   324c4:	3ffff1b0 	.word	0x3ffff1b0
   324c8:	f0004683 	.word	0xf0004683
   324cc:	42868081 	.word	0x42868081
   324d0:	6923dd03 	.word	0x6923dd03
   324d4:	f0002b01 	.word	0xf0002b01
   324d8:	250080a7 	.word	0x250080a7
   324dc:	9b0f69e0 	.word	0x9b0f69e0
   324e0:	681bb103 	.word	0x681bb103
   324e4:	e9cd9a0e 	.word	0xe9cd9a0e
   324e8:	e9cda600 	.word	0xe9cda600
   324ec:	68032302 	.word	0x68032302
   324f0:	689b464a 	.word	0x689b464a
   324f4:	47984669 	.word	0x47984669
   324f8:	69e04683 	.word	0x69e04683
   324fc:	3ffff1bb 	.word	0x3ffff1bb
   32500:	bf186803 	.word	0xbf186803
   32504:	68db2601 	.word	0x68db2601
   32508:	2600bf0a 	.word	0x2600bf0a
   3250c:	0800f04f 	.word	0x0800f04f
   32510:	0823f04f 	.word	0x0823f04f
   32514:	30014798 	.word	0x30014798
   32518:	2d00d135 	.word	0x2d00d135
   3251c:	80b6f000 	.word	0x80b6f000
   32520:	f0002e00 	.word	0xf0002e00
   32524:	682380a6 	.word	0x682380a6
   32528:	d5060319 	.word	0xd5060319
   3252c:	b29b6823 	.word	0xb29b6823
   32530:	d0022b0d 	.word	0xd0022b0d
   32534:	2b016923 	.word	0x2b016923
   32538:	6823d025 	.word	0x6823d025
   3253c:	4f80f013 	.word	0x4f80f013
   32540:	f0406823 	.word	0xf0406823
   32544:	031a80b1 	.word	0x031a80b1
   32548:	f1b8d475 	.word	0xf1b8d475
   3254c:	f0400f00 	.word	0xf0400f00
   32550:	4658808a 	.word	0x4658808a
   32554:	e8bdb005 	.word	0xe8bdb005
   32558:	68038ff0 	.word	0x68038ff0
   3255c:	2b06b29b 	.word	0x2b06b29b
   32560:	6803d073 	.word	0x6803d073
   32564:	2b07b29b 	.word	0x2b07b29b
   32568:	f04fbf0c 	.word	0xf04fbf0c
   3256c:	f04f0809 	.word	0xf04f0809
   32570:	69e00839 	.word	0x69e00839
   32574:	68db6803 	.word	0x68db6803
   32578:	f1b04798 	.word	0xf1b04798
   3257c:	46833fff 	.word	0x46833fff
   32580:	f04fd0db 	.word	0xf04fd0db
   32584:	68233bff 	.word	0x68233bff
   32588:	3380f443 	.word	0x3380f443
   3258c:	e7dc6023 	.word	0xe7dc6023
   32590:	0f00f1b8 	.word	0x0f00f1b8
   32594:	8081f000 	.word	0x8081f000
   32598:	3280f44f 	.word	0x3280f44f
   3259c:	46116a23 	.word	0x46116a23
   325a0:	bf082b00 	.word	0xbf082b00
   325a4:	33fff04f 	.word	0x33fff04f
   325a8:	f7ff4638 	.word	0xf7ff4638
   325ac:	4680fac3 	.word	0x4680fac3
   325b0:	6823b358 	.word	0x6823b358
   325b4:	031b69e0 	.word	0x031b69e0
   325b8:	6823d521 	.word	0x6823d521
   325bc:	2b0db29b 	.word	0x2b0db29b
   325c0:	6925d01d 	.word	0x6925d01d
   325c4:	0501f1a5 	.word	0x0501f1a5
   325c8:	f585fab5 	.word	0xf585fab5
   325cc:	e786096d 	.word	0xe786096d
   325d0:	03186823 	.word	0x03186823
   325d4:	6823d5dc 	.word	0x6823d5dc
   325d8:	2b0db29b 	.word	0x2b0db29b
   325dc:	6923d0d8 	.word	0x6923d0d8
   325e0:	2b0169e0 	.word	0x2b0169e0
   325e4:	f04fd034 	.word	0xf04fd034
   325e8:	68230839 	.word	0x68230839
   325ec:	041b0c1b 	.word	0x041b0c1b
   325f0:	030df043 	.word	0x030df043
   325f4:	68236023 	.word	0x68236023
   325f8:	1380f423 	.word	0x1380f423
   325fc:	68036023 	.word	0x68036023
   32600:	479868db 	.word	0x479868db
   32604:	d1be3001 	.word	0xd1be3001
   32608:	4638e797 	.word	0x4638e797
   3260c:	fafef7ff 	.word	0xfafef7ff
   32610:	f8d0b138 	.word	0xf8d0b138
   32614:	f1b88004 	.word	0xf1b88004
   32618:	d0020f00 	.word	0xd0020f00
   3261c:	60432300 	.word	0x60432300
   32620:	f04fe7c7 	.word	0xf04fe7c7
   32624:	e7420801 	.word	0xe7420801
   32628:	6823b11d 	.word	0x6823b11d
   3262c:	d5b300db 	.word	0xd5b300db
   32630:	69e0e753 	.word	0x69e0e753
   32634:	6823e753 	.word	0x6823e753
   32638:	2b0db29b 	.word	0x2b0db29b
   3263c:	68a3d185 	.word	0x68a3d185
   32640:	d0822b00 	.word	0xd0822b00
   32644:	8008f8d4 	.word	0x8008f8d4
   32648:	f04fe77f 	.word	0xf04fe77f
   3264c:	e7900809 	.word	0xe7900809
   32650:	68db6803 	.word	0x68db6803
   32654:	30014798 	.word	0x30014798
   32658:	f04fd00b 	.word	0xf04fd00b
   3265c:	68230823 	.word	0x68230823
   32660:	3380f443 	.word	0x3380f443
   32664:	46406023 	.word	0x46406023
   32668:	fd76f7f2 	.word	0xfd76f7f2
   3266c:	3bfff04f 	.word	0x3bfff04f
   32670:	6823e76f 	.word	0x6823e76f
   32674:	0b00f04f 	.word	0x0b00f04f
   32678:	041b0c1b 	.word	0x041b0c1b
   3267c:	030df043 	.word	0x030df043
   32680:	68236023 	.word	0x68236023
   32684:	1380f423 	.word	0x1380f423
   32688:	e7626023 	.word	0xe7626023
   3268c:	f47f2e00 	.word	0xf47f2e00
   32690:	e752af4a 	.word	0xe752af4a
   32694:	0816f04f 	.word	0x0816f04f
   32698:	f04fe7e5 	.word	0xf04fe7e5
   3269c:	69e00823 	.word	0x69e00823
   326a0:	f04fe7ad 	.word	0xf04fe7ad
   326a4:	e7de0809 	.word	0xe7de0809
   326a8:	4380f023 	.word	0x4380f023
   326ac:	68236023 	.word	0x68236023
   326b0:	0869f04f 	.word	0x0869f04f
   326b4:	041b0c1b 	.word	0x041b0c1b
   326b8:	030df043 	.word	0x030df043
   326bc:	e7d26023 	.word	0xe7d26023

000326c0 <ip_interface_connect>:
   326c0:	41f0e92d 	.word	0x41f0e92d
   326c4:	2900b082 	.word	0x2900b082
   326c8:	2a00d044 	.word	0x2a00d044
   326cc:	4606d042 	.word	0x4606d042
   326d0:	f7ff460f 	.word	0xf7ff460f
   326d4:	4605fa9b 	.word	0x4605fa9b
   326d8:	f0002800 	.word	0xf0002800
   326dc:	68038096 	.word	0x68038096
   326e0:	2b02b29b 	.word	0x2b02b29b
   326e4:	6803d004 	.word	0x6803d004
   326e8:	2b04b29b 	.word	0x2b04b29b
   326ec:	808df040 	.word	0x808df040
   326f0:	f0116829 	.word	0xf0116829
   326f4:	f0405100 	.word	0xf0405100
   326f8:	a8028084 	.word	0xa8028084
   326fc:	1d04f840 	.word	0x1d04f840
   32700:	8018f8d5 	.word	0x8018f8d5
   32704:	f856f7fa 	.word	0xf856f7fa
   32708:	2108bb70 	.word	0x2108bb70
   3270c:	9c010433 	.word	0x9c010433
   32710:	42e0f443 	.word	0x42e0f443
   32714:	0202f042 	.word	0x0202f042
   32718:	f8c460e2 	.word	0xf8c460e2
   3271c:	72608010 	.word	0x72608010
   32720:	72e072a0 	.word	0x72e072a0
   32724:	f4437221 	.word	0xf4437221
   32728:	f04343e0 	.word	0xf04343e0
   3272c:	60e30302 	.word	0x60e30302
   32730:	69aa68a3 	.word	0x69aa68a3
   32734:	61223304 	.word	0x61223304
   32738:	68eb60a3 	.word	0x68eb60a3
   3273c:	4293687a 	.word	0x4293687a
   32740:	2b02d108 	.word	0x2b02d108
   32744:	0018f104 	.word	0x0018f104
   32748:	d03a783a 	.word	0xd03a783a
   3274c:	d1012b0a 	.word	0xd1012b0a
   32750:	d00e2a24 	.word	0xd00e2a24
   32754:	46202416 	.word	0x46202416
   32758:	fcfef7f2 	.word	0xfcfef7f2
   3275c:	34fff04f 	.word	0x34fff04f
   32760:	b0024620 	.word	0xb0024620
   32764:	81f0e8bd 	.word	0x81f0e8bd
   32768:	2c009c01 	.word	0x2c009c01
   3276c:	0433d04f 	.word	0x0433d04f
   32770:	2210e7d9 	.word	0x2210e7d9
   32774:	18b9893b 	.word	0x18b9893b
   32778:	82a382e2 	.word	0x82a382e2
   3277c:	fb98f7e7 	.word	0xfb98f7e7
   32780:	8ae268a3 	.word	0x8ae268a3
   32784:	0102f247 	.word	0x0102f247
   32788:	60a34413 	.word	0x60a34413
   3278c:	682b682f 	.word	0x682b682f
   32790:	f0434620 	.word	0xf0434620
   32794:	602b5300 	.word	0x602b5300
   32798:	f820f7fa 	.word	0xf820f7fa
   3279c:	682bb9e0 	.word	0x682bb9e0
   327a0:	5880f013 	.word	0x5880f013
   327a4:	f04fd12f 	.word	0xf04fd12f
   327a8:	f64f33ff 	.word	0xf64f33ff
   327ac:	210572ff 	.word	0x210572ff
   327b0:	f7ff4630 	.word	0xf7ff4630
   327b4:	4604f9bf 	.word	0x4604f9bf
   327b8:	2c73b1c0 	.word	0x2c73b1c0
   327bc:	602fd0cb 	.word	0x602fd0cb
   327c0:	2a10e7c9 	.word	0x2a10e7c9
   327c4:	2204d1c6 	.word	0x2204d1c6
   327c8:	f107893b 	.word	0xf107893b
   327cc:	82e2010c 	.word	0x82e2010c
   327d0:	f7e782a3 	.word	0xf7e782a3
   327d4:	e7d3fb6d 	.word	0xe7d3fb6d
   327d8:	b1086820 	.word	0xb1086820
   327dc:	f81cf7fa 	.word	0xf81cf7fa
   327e0:	f7fa4620 	.word	0xf7fa4620
   327e4:	2423f811 	.word	0x2423f811
   327e8:	e7b4602f 	.word	0xe7b4602f
   327ec:	f7ff4630 	.word	0xf7ff4630
   327f0:	2800fa0d 	.word	0x2800fa0d
   327f4:	6844d0b4 	.word	0x6844d0b4
   327f8:	d0b12c00 	.word	0xd0b12c00
   327fc:	8004f8c0 	.word	0x8004f8c0
   32800:	2472e7db 	.word	0x2472e7db
   32804:	2473e7a7 	.word	0x2473e7a7
   32808:	2409e7a5 	.word	0x2409e7a5
   3280c:	240ce7a3 	.word	0x240ce7a3
   32810:	bf00e7a1 	.word	0xbf00e7a1

00032814 <ip_interface_bind>:
   32814:	41f0e92d 	.word	0x41f0e92d
   32818:	b389b082 	.word	0xb389b082
   3281c:	4607b382 	.word	0x4607b382
   32820:	f7ff460e 	.word	0xf7ff460e
   32824:	4605f9f3 	.word	0x4605f9f3
   32828:	d07b2800 	.word	0xd07b2800
   3282c:	b29b6803 	.word	0xb29b6803
   32830:	d1772b02 	.word	0xd1772b02
   32834:	a8022100 	.word	0xa8022100
   32838:	1d04f840 	.word	0x1d04f840
   3283c:	8018f8d5 	.word	0x8018f8d5
   32840:	ffb8f7f9 	.word	0xffb8f7f9
   32844:	f247bb30 	.word	0xf247bb30
   32848:	22080305 	.word	0x22080305
   3284c:	ea439c01 	.word	0xea439c01
   32850:	60e34307 	.word	0x60e34307
   32854:	8010f8c4 	.word	0x8010f8c4
   32858:	72a07260 	.word	0x72a07260
   3285c:	722272e0 	.word	0x722272e0
   32860:	330468a3 	.word	0x330468a3
   32864:	68eb60a3 	.word	0x68eb60a3
   32868:	42936872 	.word	0x42936872
   3286c:	2b02d108 	.word	0x2b02d108
   32870:	0018f104 	.word	0x0018f104
   32874:	d03c7832 	.word	0xd03c7832
   32878:	d1012b0a 	.word	0xd1012b0a
   3287c:	d00e2a24 	.word	0xd00e2a24
   32880:	46202416 	.word	0x46202416
   32884:	fc68f7f2 	.word	0xfc68f7f2
   32888:	34fff04f 	.word	0x34fff04f
   3288c:	b0024620 	.word	0xb0024620
   32890:	81f0e8bd 	.word	0x81f0e8bd
   32894:	2c009c01 	.word	0x2c009c01
   32898:	240cd1e2 	.word	0x240cd1e2
   3289c:	2210e7f1 	.word	0x2210e7f1
   328a0:	18b18933 	.word	0x18b18933
   328a4:	82a382e2 	.word	0x82a382e2
   328a8:	fb02f7e7 	.word	0xfb02f7e7
   328ac:	8ae268a3 	.word	0x8ae268a3
   328b0:	0105f247 	.word	0x0105f247
   328b4:	60a34413 	.word	0x60a34413
   328b8:	4620682b 	.word	0x4620682b
   328bc:	041b0c1b 	.word	0x041b0c1b
   328c0:	0303f043 	.word	0x0303f043
   328c4:	682e602b 	.word	0x682e602b
   328c8:	ff88f7f9 	.word	0xff88f7f9
   328cc:	b9d84680 	.word	0xb9d84680
   328d0:	33fff04f 	.word	0x33fff04f
   328d4:	72fff64f 	.word	0x72fff64f
   328d8:	46382104 	.word	0x46382104
   328dc:	f92af7ff 	.word	0xf92af7ff
   328e0:	b3084604 	.word	0xb3084604
   328e4:	0c1b682b 	.word	0x0c1b682b
   328e8:	f043041b 	.word	0xf043041b
   328ec:	602b0302 	.word	0x602b0302
   328f0:	2a10e7c7 	.word	0x2a10e7c7
   328f4:	2204d1c4 	.word	0x2204d1c4
   328f8:	f1068933 	.word	0xf1068933
   328fc:	82e2010c 	.word	0x82e2010c
   32900:	f7e782a3 	.word	0xf7e782a3
   32904:	e7d1fad5 	.word	0xe7d1fad5
   32908:	b1086820 	.word	0xb1086820
   3290c:	ff84f7f9 	.word	0xff84f7f9
   32910:	04360c36 	.word	0x04360c36
   32914:	f0464620 	.word	0xf0464620
   32918:	f7f90602 	.word	0xf7f90602
   3291c:	2423ff75 	.word	0x2423ff75
   32920:	e7ae602e 	.word	0xe7ae602e
   32924:	e7ac2409 	.word	0xe7ac2409
   32928:	f7ff4638 	.word	0xf7ff4638
   3292c:	2800f96f 	.word	0x2800f96f
   32930:	6844d0ac 	.word	0x6844d0ac
   32934:	d0a92c00 	.word	0xd0a92c00
   32938:	8004f8c0 	.word	0x8004f8c0
   3293c:	bf00e7d2 	.word	0xbf00e7d2

00032940 <ip_interface_listen>:
   32940:	41f0e92d 	.word	0x41f0e92d
   32944:	4606b082 	.word	0x4606b082
   32948:	f960f7ff 	.word	0xf960f7ff
   3294c:	d0672800 	.word	0xd0672800
   32950:	46056803 	.word	0x46056803
   32954:	2b04b29b 	.word	0x2b04b29b
   32958:	2100d162 	.word	0x2100d162
   3295c:	46304a32 	.word	0x46304a32
   32960:	f8b0f7ff 	.word	0xf8b0f7ff
   32964:	28004601 	.word	0x28004601
   32968:	a802d15c 	.word	0xa802d15c
   3296c:	1d04f840 	.word	0x1d04f840
   32970:	f7f969af 	.word	0xf7f969af
   32974:	bba8ff1f 	.word	0xbba8ff1f
   32978:	0308f247 	.word	0x0308f247
   3297c:	9c012208 	.word	0x9c012208
   32980:	4306ea43 	.word	0x4306ea43
   32984:	612760e3 	.word	0x612760e3
   32988:	72a07260 	.word	0x72a07260
   3298c:	722272e0 	.word	0x722272e0
   32990:	f24768a3 	.word	0xf24768a3
   32994:	33040108 	.word	0x33040108
   32998:	682b60a3 	.word	0x682b60a3
   3299c:	0c1b4620 	.word	0x0c1b4620
   329a0:	f043041b 	.word	0xf043041b
   329a4:	602b0306 	.word	0x602b0306
   329a8:	f7f9682f 	.word	0xf7f9682f
   329ac:	4680ff17 	.word	0x4680ff17
   329b0:	f04fb9e8 	.word	0xf04fb9e8
   329b4:	f64f33ff 	.word	0xf64f33ff
   329b8:	210772ff 	.word	0x210772ff
   329bc:	f7ff4630 	.word	0xf7ff4630
   329c0:	4604f8b9 	.word	0x4604f8b9
   329c4:	682bb308 	.word	0x682bb308
   329c8:	041b0c1b 	.word	0x041b0c1b
   329cc:	0304f043 	.word	0x0304f043
   329d0:	4620602b 	.word	0x4620602b
   329d4:	fbc0f7f2 	.word	0xfbc0f7f2
   329d8:	34fff04f 	.word	0x34fff04f
   329dc:	b0024620 	.word	0xb0024620
   329e0:	81f0e8bd 	.word	0x81f0e8bd
   329e4:	2c009c01 	.word	0x2c009c01
   329e8:	240cd1d2 	.word	0x240cd1d2
   329ec:	6820e7f1 	.word	0x6820e7f1
   329f0:	f7f9b108 	.word	0xf7f9b108
   329f4:	0c3fff11 	.word	0x0c3fff11
   329f8:	4620043f 	.word	0x4620043f
   329fc:	0704f047 	.word	0x0704f047
   32a00:	ff02f7f9 	.word	0xff02f7f9
   32a04:	602f2423 	.word	0x602f2423
   32a08:	4630e7e3 	.word	0x4630e7e3
   32a0c:	f8fef7ff 	.word	0xf8fef7ff
   32a10:	d0e32800 	.word	0xd0e32800
   32a14:	2c006844 	.word	0x2c006844
   32a18:	f8c0d0e0 	.word	0xf8c0d0e0
   32a1c:	e7d28004 	.word	0xe7d28004
   32a20:	e7d62409 	.word	0xe7d62409
   32a24:	e7d42423 	.word	0xe7d42423
   32a28:	00031ed1 	.word	0x00031ed1

00032a2c <ip_interface_accept>:
   32a2c:	4ff0e92d 	.word	0x4ff0e92d
   32a30:	b0852500 	.word	0xb0852500
   32a34:	4690460f 	.word	0x4690460f
   32a38:	46069502 	.word	0x46069502
   32a3c:	f8e6f7ff 	.word	0xf8e6f7ff
   32a40:	28004604 	.word	0x28004604
   32a44:	811cf000 	.word	0x811cf000
   32a48:	b29b6803 	.word	0xb29b6803
   32a4c:	d10a2b07 	.word	0xd10a2b07
   32a50:	68056803 	.word	0x68056803
   32a54:	d41600db 	.word	0xd41600db
   32a58:	3580f415 	.word	0x3580f415
   32a5c:	6805d019 	.word	0x6805d019
   32a60:	3580f415 	.word	0x3580f415
   32a64:	f04fd124 	.word	0xf04fd124
   32a68:	9b020909 	.word	0x9b020909
   32a6c:	4628b113 	.word	0x4628b113
   32a70:	f812f7ff 	.word	0xf812f7ff
   32a74:	f04f4648 	.word	0xf04f4648
   32a78:	f7f239ff 	.word	0xf7f239ff
   32a7c:	4648fb6d 	.word	0x4648fb6d
   32a80:	e8bdb005 	.word	0xe8bdb005
   32a84:	f4158ff0 	.word	0xf4158ff0
   32a88:	d16d3580 	.word	0xd16d3580
   32a8c:	0923f04f 	.word	0x0923f04f
   32a90:	f44fe7eb 	.word	0xf44fe7eb
   32a94:	f04f3280 	.word	0xf04f3280
   32a98:	461133ff 	.word	0x461133ff
   32a9c:	f7ff4630 	.word	0xf7ff4630
   32aa0:	4681f849 	.word	0x4681f849
   32aa4:	d07e2800 	.word	0xd07e2800
   32aa8:	f4156825 	.word	0xf4156825
   32aac:	d0dc3580 	.word	0xd0dc3580
   32ab0:	30fff04f 	.word	0x30fff04f
   32ab4:	e9cd2300 	.word	0xe9cd2300
   32ab8:	4a750300 	.word	0x4a750300
   32abc:	a8026921 	.word	0xa8026921
   32ac0:	ff94f7fe 	.word	0xff94f7fe
   32ac4:	46059b02 	.word	0x46059b02
   32ac8:	f0002b00 	.word	0xf0002b00
   32acc:	210080dd 	.word	0x210080dd
   32ad0:	a8046962 	.word	0xa8046962
   32ad4:	68e2615a 	.word	0x68e2615a
   32ad8:	1d04f840 	.word	0x1d04f840
   32adc:	692260da 	.word	0x692260da
   32ae0:	f8d4611a 	.word	0xf8d4611a
   32ae4:	f7f99018 	.word	0xf7f99018
   32ae8:	2800fe65 	.word	0x2800fe65
   32aec:	f247d143 	.word	0xf247d143
   32af0:	2108030c 	.word	0x2108030c
   32af4:	b00cf8dd 	.word	0xb00cf8dd
   32af8:	4306ea43 	.word	0x4306ea43
   32afc:	300cf8cb 	.word	0x300cf8cb
   32b00:	9010f8cb 	.word	0x9010f8cb
   32b04:	0009f88b 	.word	0x0009f88b
   32b08:	000af88b 	.word	0x000af88b
   32b0c:	000bf88b 	.word	0x000bf88b
   32b10:	1008f88b 	.word	0x1008f88b
   32b14:	f2476823 	.word	0xf2476823
   32b18:	0c1b010c 	.word	0x0c1b010c
   32b1c:	f043041b 	.word	0xf043041b
   32b20:	60230308 	.word	0x60230308
   32b24:	f8d44658 	.word	0xf8d44658
   32b28:	f7f99000 	.word	0xf7f99000
   32b2c:	4682fe57 	.word	0x4682fe57
   32b30:	6822bb48 	.word	0x6822bb48
   32b34:	f04f9900 	.word	0xf04f9900
   32b38:	400a33ff 	.word	0x400a33ff
   32b3c:	21096022 	.word	0x21096022
   32b40:	72fff64f 	.word	0x72fff64f
   32b44:	f7fe4630 	.word	0xf7fe4630
   32b48:	4681fff5 	.word	0x4681fff5
   32b4c:	f0002800 	.word	0xf0002800
   32b50:	68238085 	.word	0x68238085
   32b54:	431a9a01 	.word	0x431a9a01
   32b58:	68236022 	.word	0x68236022
   32b5c:	041b0c1b 	.word	0x041b0c1b
   32b60:	0307f043 	.word	0x0307f043
   32b64:	e7806023 	.word	0xe7806023
   32b68:	5280f06f 	.word	0x5280f06f
   32b6c:	5380f04f 	.word	0x5380f04f
   32b70:	2300e9cd 	.word	0x2300e9cd
   32b74:	f8dde7a1 	.word	0xf8dde7a1
   32b78:	f04fb00c 	.word	0xf04fb00c
   32b7c:	f1bb090c 	.word	0xf1bb090c
   32b80:	d1c70f00 	.word	0xd1c70f00
   32b84:	f8dbe771 	.word	0xf8dbe771
   32b88:	b1080000 	.word	0xb1080000
   32b8c:	fe44f7f9 	.word	0xfe44f7f9
   32b90:	4919ea4f 	.word	0x4919ea4f
   32b94:	ea4f4658 	.word	0xea4f4658
   32b98:	f7f94909 	.word	0xf7f94909
   32b9c:	f049fe35 	.word	0xf049fe35
   32ba0:	60230307 	.word	0x60230307
   32ba4:	4630e772 	.word	0x4630e772
   32ba8:	f830f7ff 	.word	0xf830f7ff
   32bac:	f8d0b130 	.word	0xf8d0b130
   32bb0:	f1b99004 	.word	0xf1b99004
   32bb4:	d0010f00 	.word	0xd0010f00
   32bb8:	e7756045 	.word	0xe7756045
   32bbc:	03d96823 	.word	0x03d96823
   32bc0:	af76f53f 	.word	0xaf76f53f
   32bc4:	99024d33 	.word	0x99024d33
   32bc8:	3026f855 	.word	0x3026f855
   32bcc:	618b699b 	.word	0x618b699b
   32bd0:	68cbb147 	.word	0x68cbb147
   32bd4:	d0242b0a 	.word	0xd0242b0a
   32bd8:	d1032b02 	.word	0xd1032b02
   32bdc:	2000f8d8 	.word	0x2000f8d8
   32be0:	d0322a10 	.word	0xd0322a10
   32be4:	482c680a 	.word	0x482c680a
   32be8:	f0424002 	.word	0xf0424002
   32bec:	600a0205 	.word	0x600a0205
   32bf0:	68119a02 	.word	0x68119a02
   32bf4:	3100f441 	.word	0x3100f441
   32bf8:	68116011 	.word	0x68116011
   32bfc:	1180f441 	.word	0x1180f441
   32c00:	68236011 	.word	0x68236011
   32c04:	f0434003 	.word	0xf0434003
   32c08:	60230307 	.word	0x60230307
   32c0c:	0026f855 	.word	0x0026f855
   32c10:	fdfaf7f9 	.word	0xfdfaf7f9
   32c14:	46482300 	.word	0x46482300
   32c18:	3026f845 	.word	0x3026f845
   32c1c:	e8bdb005 	.word	0xe8bdb005
   32c20:	f8d88ff0 	.word	0xf8d88ff0
   32c24:	2a242000 	.word	0x2a242000
   32c28:	703ad1dc 	.word	0x703ad1dc
   32c2c:	607b2210 	.word	0x607b2210
   32c30:	3026f855 	.word	0x3026f855
   32c34:	0010f107 	.word	0x0010f107
   32c38:	813b8b9b 	.word	0x813b8b9b
   32c3c:	1026f855 	.word	0x1026f855
   32c40:	f7e73120 	.word	0xf7e73120
   32c44:	9902f935 	.word	0x9902f935
   32c48:	703ae7cc 	.word	0x703ae7cc
   32c4c:	f855607b 	.word	0xf855607b
   32c50:	f1073026 	.word	0xf1073026
   32c54:	8b9b000c 	.word	0x8b9b000c
   32c58:	e7ee2204 	.word	0xe7ee2204
   32c5c:	f7fe4630 	.word	0xf7fe4630
   32c60:	b138ffd5 	.word	0xb138ffd5
   32c64:	9004f8d0 	.word	0x9004f8d0
   32c68:	0f00f1b9 	.word	0x0f00f1b9
   32c6c:	f8c0d002 	.word	0xf8c0d002
   32c70:	e76ea004 	.word	0xe76ea004
   32c74:	9a016823 	.word	0x9a016823
   32c78:	431346a9 	.word	0x431346a9
   32c7c:	e7a16023 	.word	0xe7a16023
   32c80:	f04f4605 	.word	0xf04f4605
   32c84:	e6f00909 	.word	0xe6f00909
   32c88:	090cf04f 	.word	0x090cf04f
   32c8c:	bf00e6f2 	.word	0xbf00e6f2
   32c90:	00031ed1 	.word	0x00031ed1
   32c94:	20024be8 	.word	0x20024be8
   32c98:	ffff0000 	.word	0xffff0000

00032c9c <ip_interface_setopt>:
   32c9c:	41f0e92d 	.word	0x41f0e92d
   32ca0:	b0842901 	.word	0xb0842901
   32ca4:	809cf040 	.word	0x809cf040
   32ca8:	4690460e 	.word	0x4690460e
   32cac:	4607461d 	.word	0x4607461d
   32cb0:	ffacf7fe 	.word	0xffacf7fe
   32cb4:	28004604 	.word	0x28004604
   32cb8:	80a5f000 	.word	0x80a5f000
   32cbc:	0f19f1b8 	.word	0x0f19f1b8
   32cc0:	2d00d16e 	.word	0x2d00d16e
   32cc4:	8092f000 	.word	0x8092f000
   32cc8:	f00d4628 	.word	0xf00d4628
   32ccc:	9b0afc5b 	.word	0x9b0afc5b
   32cd0:	f0404298 	.word	0xf0404298
   32cd4:	6823808b 	.word	0x6823808b
   32cd8:	2b02b29b 	.word	0x2b02b29b
   32cdc:	4629d173 	.word	0x4629d173
   32ce0:	f00768e0 	.word	0xf00768e0
   32ce4:	9002ff0d 	.word	0x9002ff0d
   32ce8:	bf083001 	.word	0xbf083001
   32cec:	d04e2516 	.word	0xd04e2516
   32cf0:	025b6823 	.word	0x025b6823
   32cf4:	6823d44a 	.word	0x6823d44a
   32cf8:	0300f413 	.word	0x0300f413
   32cfc:	6826d146 	.word	0x6826d146
   32d00:	a8046822 	.word	0xa8046822
   32d04:	0280f442 	.word	0x0280f442
   32d08:	21046022 	.word	0x21046022
   32d0c:	3d04f840 	.word	0x3d04f840
   32d10:	8018f8d4 	.word	0x8018f8d4
   32d14:	fd4ef7f9 	.word	0xfd4ef7f9
   32d18:	d14e2800 	.word	0xd14e2800
   32d1c:	0203f247 	.word	0x0203f247
   32d20:	21082300 	.word	0x21082300
   32d24:	ea429d03 	.word	0xea429d03
   32d28:	60ea4207 	.word	0x60ea4207
   32d2c:	8010f8c5 	.word	0x8010f8c5
   32d30:	726b7229 	.word	0x726b7229
   32d34:	72eb72ab 	.word	0x72eb72ab
   32d38:	0c08f04f 	.word	0x0c08f04f
   32d3c:	20102300 	.word	0x20102300
   32d40:	68aa2130 	.word	0x68aa2130
   32d44:	4462756b 	.word	0x4462756b
   32d48:	75ab60aa 	.word	0x75ab60aa
   32d4c:	76ab75eb 	.word	0x76ab75eb
   32d50:	f88576eb 	.word	0xf88576eb
   32d54:	7628c014 	.word	0x7628c014
   32d58:	22047669 	.word	0x22047669
   32d5c:	010ceb0d 	.word	0x010ceb0d
   32d60:	f7e76828 	.word	0xf7e76828
   32d64:	f247f8a5 	.word	0xf247f8a5
   32d68:	46280103 	.word	0x46280103
   32d6c:	fd36f7f9 	.word	0xfd36f7f9
   32d70:	bb504680 	.word	0xbb504680
   32d74:	0200f44f 	.word	0x0200f44f
   32d78:	33fff04f 	.word	0x33fff04f
   32d7c:	46384611 	.word	0x46384611
   32d80:	fed8f7fe 	.word	0xfed8f7fe
   32d84:	b3984605 	.word	0xb3984605
   32d88:	e0006026 	.word	0xe0006026
   32d8c:	46282523 	.word	0x46282523
   32d90:	f9e2f7f2 	.word	0xf9e2f7f2
   32d94:	35fff04f 	.word	0x35fff04f
   32d98:	b0044628 	.word	0xb0044628
   32d9c:	81f0e8bd 	.word	0x81f0e8bd
   32da0:	46429b0a 	.word	0x46429b0a
   32da4:	46319300 	.word	0x46319300
   32da8:	4638462b 	.word	0x4638462b
   32dac:	ff56f7fe 	.word	0xff56f7fe
   32db0:	46284605 	.word	0x46284605
   32db4:	e8bdb004 	.word	0xe8bdb004
   32db8:	9d0381f0 	.word	0x9d0381f0
   32dbc:	d1bb2d00 	.word	0xd1bb2d00
   32dc0:	250c6026 	.word	0x250c6026
   32dc4:	2509e7e3 	.word	0x2509e7e3
   32dc8:	6828e7e1 	.word	0x6828e7e1
   32dcc:	f7f9b108 	.word	0xf7f9b108
   32dd0:	4628fd23 	.word	0x4628fd23
   32dd4:	fd18f7f9 	.word	0xfd18f7f9
   32dd8:	60262523 	.word	0x60262523
   32ddc:	e7d66026 	.word	0xe7d66026
   32de0:	f7f2202a 	.word	0xf7f2202a
   32de4:	f04ff9b9 	.word	0xf04ff9b9
   32de8:	e7d535ff 	.word	0xe7d535ff
   32dec:	e7ce250e 	.word	0xe7ce250e
   32df0:	f7fe4638 	.word	0xf7fe4638
   32df4:	b120ff0b 	.word	0xb120ff0b
   32df8:	b1156845 	.word	0xb1156845
   32dfc:	8004f8c0 	.word	0x8004f8c0
   32e00:	6026e7c2 	.word	0x6026e7c2
   32e04:	2009e7c8 	.word	0x2009e7c8
   32e08:	f9a6f7f2 	.word	0xf9a6f7f2
   32e0c:	35fff04f 	.word	0x35fff04f
   32e10:	bf00e7c2 	.word	0xbf00e7c2

00032e14 <ip_interface_getopt>:
   32e14:	bf58f7fe 	.word	0xbf58f7fe

00032e18 <ip_interface_getaddrinfo>:
   32e18:	4ff0e92d 	.word	0x4ff0e92d
   32e1c:	0c00f04f 	.word	0x0c00f04f
   32e20:	4e722401 	.word	0x4e722401
   32e24:	a1d0f8df 	.word	0xa1d0f8df
   32e28:	91d0f8df 	.word	0x91d0f8df
   32e2c:	4607b085 	.word	0x4607b085
   32e30:	93014615 	.word	0x93014615
   32e34:	c000f8a6 	.word	0xc000f8a6
   32e38:	4000f8ca 	.word	0x4000f8ca
   32e3c:	4000f8c9 	.word	0x4000f8c9
   32e40:	4608b171 	.word	0x4608b171
   32e44:	4661220a 	.word	0x4661220a
   32e48:	ff6cf00d 	.word	0xff6cf00d
   32e4c:	73fef64f 	.word	0x73fef64f
   32e50:	429a1e42 	.word	0x429a1e42
   32e54:	8083f200 	.word	0x8083f200
   32e58:	ea430203 	.word	0xea430203
   32e5c:	80302020 	.word	0x80302020
   32e60:	819cf8df 	.word	0x819cf8df
   32e64:	3000f8d8 	.word	0x3000f8d8
   32e68:	d1742b00 	.word	0xd1742b00
   32e6c:	60134a60 	.word	0x60134a60
   32e70:	60134a60 	.word	0x60134a60
   32e74:	d0622f00 	.word	0xd0622f00
   32e78:	f00d4638 	.word	0xf00d4638
   32e7c:	4683fb83 	.word	0x4683fb83
   32e80:	69eab125 	.word	0x69eab125
   32e84:	6851b112 	.word	0x6851b112
   32e88:	d06c2966 	.word	0xd06c2966
   32e8c:	32fff04f 	.word	0x32fff04f
   32e90:	ae042100 	.word	0xae042100
   32e94:	1d04f846 	.word	0x1d04f846
   32e98:	46594630 	.word	0x46594630
   32e9c:	f7f99200 	.word	0xf7f99200
   32ea0:	9a00fc89 	.word	0x9a00fc89
   32ea4:	d14c2800 	.word	0xd14c2800
   32ea8:	010df247 	.word	0x010df247
   32eac:	0c08f04f 	.word	0x0c08f04f
   32eb0:	ea419c03 	.word	0xea419c03
   32eb4:	60e14102 	.word	0x60e14102
   32eb8:	72606122 	.word	0x72606122
   32ebc:	72e072a0 	.word	0x72e072a0
   32ec0:	c008f884 	.word	0xc008f884
   32ec4:	d0762d00 	.word	0xd0762d00
   32ec8:	f022686a 	.word	0xf022686a
   32ecc:	29020108 	.word	0x29020108
   32ed0:	2a05d05c 	.word	0x2a05d05c
   32ed4:	68a9d178 	.word	0x68a9d178
   32ed8:	f8c92902 	.word	0xf8c92902
   32edc:	d0611000 	.word	0xd0611000
   32ee0:	68ea61a2 	.word	0x68ea61a2
   32ee4:	68aa6222 	.word	0x68aa6222
   32ee8:	682a61e2 	.word	0x682a61e2
   32eec:	68a26162 	.word	0x68a26162
   32ef0:	60a23210 	.word	0x60a23210
   32ef4:	6820b12f 	.word	0x6820b12f
   32ef8:	465ab118 	.word	0x465ab118
   32efc:	f7e64639 	.word	0xf7e64639
   32f00:	2301ffd7 	.word	0x2301ffd7
   32f04:	010df247 	.word	0x010df247
   32f08:	f8c84620 	.word	0xf8c84620
   32f0c:	f7f93000 	.word	0xf7f93000
   32f10:	2800fc65 	.word	0x2800fc65
   32f14:	f04fd156 	.word	0xf04fd156
   32f18:	930333ff 	.word	0x930333ff
   32f1c:	46204631 	.word	0x46204631
   32f20:	f88af7f2 	.word	0xf88af7f2
   32f24:	3000f8d8 	.word	0x3000f8d8
   32f28:	d0f72b01 	.word	0xd0f72b01
   32f2c:	68184b31 	.word	0x68184b31
   32f30:	d13b2800 	.word	0xd13b2800
   32f34:	9a014b2e 	.word	0x9a014b2e
   32f38:	6013681b 	.word	0x6013681b
   32f3c:	46bbe00c 	.word	0x46bbe00c
   32f40:	9c03e79e 	.word	0x9c03e79e
   32f44:	d1bd2c00 	.word	0xd1bd2c00
   32f48:	2300200c 	.word	0x2300200c
   32f4c:	3000f8c8 	.word	0x3000f8c8
   32f50:	e8bdb005 	.word	0xe8bdb005
   32f54:	20738ff0 	.word	0x20738ff0
   32f58:	e8bdb005 	.word	0xe8bdb005
   32f5c:	20168ff0 	.word	0x20168ff0
   32f60:	e8bdb005 	.word	0xe8bdb005
   32f64:	68918ff0 	.word	0x68918ff0
   32f68:	7f00f5b1 	.word	0x7f00f5b1
   32f6c:	f240d18e 	.word	0xf240d18e
   32f70:	68d02102 	.word	0x68d02102
   32f74:	d1894288 	.word	0xd1894288
   32f78:	29006991 	.word	0x29006991
   32f7c:	6868d086 	.word	0x6868d086
   32f80:	fdbef007 	.word	0xfdbef007
   32f84:	d0811c43 	.word	0xd0811c43
   32f88:	e7814602 	.word	0xe7814602
   32f8c:	290268a9 	.word	0x290268a9
   32f90:	1000f8c9 	.word	0x1000f8c9
   32f94:	2a05d006 	.word	0x2a05d006
   32f98:	2a0ad0a2 	.word	0x2a0ad0a2
   32f9c:	2201bf14 	.word	0x2201bf14
   32fa0:	e79d2202 	.word	0xe79d2202
   32fa4:	f8ca2102 	.word	0xf8ca2102
   32fa8:	e7f41000 	.word	0xe7f41000
   32fac:	68184b11 	.word	0x68184b11
   32fb0:	d0d12800 	.word	0xd0d12800
   32fb4:	4629e7c9 	.word	0x4629e7c9
   32fb8:	f1042210 	.word	0xf1042210
   32fbc:	f00c0014 	.word	0xf00c0014
   32fc0:	e794fec5 	.word	0xe794fec5
   32fc4:	e7c02023 	.word	0xe7c02023
   32fc8:	f7f2202f 	.word	0xf7f2202f
   32fcc:	68a2f8c5 	.word	0x68a2f8c5
   32fd0:	60a23210 	.word	0x60a23210
   32fd4:	f04fb917 	.word	0xf04fb917
   32fd8:	e7b630ff 	.word	0xe7b630ff
   32fdc:	28006820 	.word	0x28006820
   32fe0:	465ad0f9 	.word	0x465ad0f9
   32fe4:	f7e64639 	.word	0xf7e64639
   32fe8:	e7f4ff63 	.word	0xe7f4ff63
   32fec:	2002a434 	.word	0x2002a434
   32ff0:	20024be0 	.word	0x20024be0
   32ff4:	20024bd8 	.word	0x20024bd8
   32ff8:	20024bd0 	.word	0x20024bd0
   32ffc:	20024bd4 	.word	0x20024bd4
   33000:	20024bdc 	.word	0x20024bdc

00033004 <ip_interface_freeaddrinfo>:
   33004:	4c0bb538 	.word	0x4c0bb538
   33008:	2b026823 	.word	0x2b026823
   3300c:	bd38d000 	.word	0xbd38d000
   33010:	4605b130 	.word	0x4605b130
   33014:	f0066940 	.word	0xf0066940
   33018:	4628f8af 	.word	0x4628f8af
   3301c:	f8acf006 	.word	0xf8acf006
   33020:	4a052300 	.word	0x4a052300
   33024:	60234905 	.word	0x60234905
   33028:	68086013 	.word	0x68086013
   3302c:	4038e8bd 	.word	0x4038e8bd
   33030:	bbf2f7f9 	.word	0xbbf2f7f9
   33034:	20024bdc 	.word	0x20024bdc
   33038:	20024bd8 	.word	0x20024bd8
   3303c:	20024be4 	.word	0x20024be4

00033040 <rpc_ip_event_handler>:
   33040:	4ff0e92d 	.word	0x4ff0e92d
   33044:	4310f401 	.word	0x4310f401
   33048:	4f10f5b3 	.word	0x4f10f5b3
   3304c:	b0894605 	.word	0xb0894605
   33050:	68c0460e 	.word	0x68c0460e
   33054:	0c04d05e 	.word	0x0c04d05e
   33058:	f7fe4620 	.word	0xf7fe4620
   3305c:	f248fdd7 	.word	0xf248fdd7
   33060:	429e030d 	.word	0x429e030d
   33064:	46a04607 	.word	0x46a04607
   33068:	2f00d041 	.word	0x2f00d041
   3306c:	4640d04e 	.word	0x4640d04e
   33070:	462a4633 	.word	0x462a4633
   33074:	f7fc4639 	.word	0xf7fc4639
   33078:	2800fbd1 	.word	0x2800fbd1
   3307c:	f248d042 	.word	0xf248d042
   33080:	429e0307 	.word	0x429e0307
   33084:	f248d961 	.word	0xf248d961
   33088:	429e030c 	.word	0x429e030c
   3308c:	816bf000 	.word	0x816bf000
   33090:	8106f240 	.word	0x8106f240
   33094:	0302f249 	.word	0x0302f249
   33098:	f000429e 	.word	0xf000429e
   3309c:	f249808c 	.word	0xf249808c
   330a0:	429e0303 	.word	0x429e0303
   330a4:	8180f000 	.word	0x8180f000
   330a8:	0301f249 	.word	0x0301f249
   330ac:	d12d429e 	.word	0xd12d429e
   330b0:	f414683c 	.word	0xf414683c
   330b4:	f0001480 	.word	0xf0001480
   330b8:	68ab81c3 	.word	0x68ab81c3
   330bc:	f2002b04 	.word	0xf2002b04
   330c0:	240081eb 	.word	0x240081eb
   330c4:	68294626 	.word	0x68294626
   330c8:	e9cd686a 	.word	0xe9cd686a
   330cc:	e9cd6406 	.word	0xe9cd6406
   330d0:	69f81204 	.word	0x69f81204
   330d4:	6803a904 	.word	0x6803a904
   330d8:	4798685b 	.word	0x4798685b
   330dc:	f0003001 	.word	0xf0003001
   330e0:	683b81cc 	.word	0x683b81cc
   330e4:	f4432000 	.word	0xf4432000
   330e8:	603b3380 	.word	0x603b3380
   330ec:	f8dfe00b 	.word	0xf8dfe00b
   330f0:	682f9344 	.word	0x682f9344
   330f4:	3000f8d9 	.word	0x3000f8d9
   330f8:	d0152b01 	.word	0xd0152b01
   330fc:	4638b117 	.word	0x4638b117
   33100:	fb8af7f9 	.word	0xfb8af7f9
   33104:	b0092000 	.word	0xb0092000
   33108:	8ff0e8bd 	.word	0x8ff0e8bd
   3310c:	28006828 	.word	0x28006828
   33110:	e7f7d1f6 	.word	0xe7f7d1f6
   33114:	fd30f7fe 	.word	0xfd30f7fe
   33118:	f7fe4680 	.word	0xf7fe4680
   3311c:	4607fd77 	.word	0x4607fd77
   33120:	2f004644 	.word	0x2f004644
   33124:	e7f1d1a3 	.word	0xe7f1d1a3
   33128:	2b00696b 	.word	0x2b00696b
   3312c:	2b10d048 	.word	0x2b10d048
   33130:	4ababf96 	.word	0x4ababf96
   33134:	f852212d 	.word	0xf852212d
   33138:	23021023 	.word	0x23021023
   3313c:	60114ab8 	.word	0x60114ab8
   33140:	3000f8c9 	.word	0x3000f8c9
   33144:	d1da2f00 	.word	0xd1da2f00
   33148:	f248e7dc 	.word	0xf248e7dc
   3314c:	429e0306 	.word	0x429e0306
   33150:	80e6f080 	.word	0x80e6f080
   33154:	0302f248 	.word	0x0302f248
   33158:	f000429e 	.word	0xf000429e
   3315c:	d91880c8 	.word	0xd91880c8
   33160:	0303f248 	.word	0x0303f248
   33164:	f000429e 	.word	0xf000429e
   33168:	f2488112 	.word	0xf2488112
   3316c:	429e0305 	.word	0x429e0305
   33170:	683bd1cc 	.word	0x683bd1cc
   33174:	2b03b29b 	.word	0x2b03b29b
   33178:	696bd1c4 	.word	0x696bd1c4
   3317c:	f0002b00 	.word	0xf0002b00
   33180:	2b10817e 	.word	0x2b10817e
   33184:	813bf200 	.word	0x813bf200
   33188:	f8524aa4 	.word	0xf8524aa4
   3318c:	607b3023 	.word	0x607b3023
   33190:	f248e7b8 	.word	0xf248e7b8
   33194:	429e0301 	.word	0x429e0301
   33198:	683bd1b8 	.word	0x683bd1b8
   3319c:	d1b12b01 	.word	0xd1b12b01
   331a0:	28006968 	.word	0x28006968
   331a4:	8173f000 	.word	0x8173f000
   331a8:	f2002810 	.word	0xf2002810
   331ac:	4b9b8128 	.word	0x4b9b8128
   331b0:	3020f853 	.word	0x3020f853
   331b4:	683be7eb 	.word	0x683be7eb
   331b8:	2b07b29b 	.word	0x2b07b29b
   331bc:	e790d1a2 	.word	0xe790d1a2
   331c0:	601f4b98 	.word	0x601f4b98
   331c4:	016369ac 	.word	0x016369ac
   331c8:	93034618 	.word	0x93034618
   331cc:	ffb6f005 	.word	0xffb6f005
   331d0:	28009002 	.word	0x28009002
   331d4:	8103f000 	.word	0x8103f000
   331d8:	192800e5 	.word	0x192800e5
   331dc:	f0050080 	.word	0xf0050080
   331e0:	2800ffad 	.word	0x2800ffad
   331e4:	810df000 	.word	0x810df000
   331e8:	d0782c00 	.word	0xd0782c00
   331ec:	0210f105 	.word	0x0210f105
   331f0:	93011883 	.word	0x93011883
   331f4:	24049b02 	.word	0x24049b02
   331f8:	a23cf8df 	.word	0xa23cf8df
   331fc:	b23cf8df 	.word	0xb23cf8df
   33200:	0810f100 	.word	0x0810f100
   33204:	0620f103 	.word	0x0620f103
   33208:	220ae01d 	.word	0x220ae01d
   3320c:	2c0cf848 	.word	0x2c0cf848
   33210:	0224f04f 	.word	0x0224f04f
   33214:	f8084640 	.word	0xf8084640
   33218:	f8282c10 	.word	0xf8282c10
   3321c:	f8563c08 	.word	0xf8563c08
   33220:	f7e62c10 	.word	0xf7e62c10
   33224:	f856fe45 	.word	0xf856fe45
   33228:	f1083c10 	.word	0xf1083c10
   3322c:	441c0808 	.word	0x441c0808
   33230:	f846193b 	.word	0xf846193b
   33234:	9b013c08 	.word	0x9b013c08
   33238:	6c04f846 	.word	0x6c04f846
   3323c:	442c4598 	.word	0x442c4598
   33240:	0620f106 	.word	0x0620f106
   33244:	593bd045 	.word	0x593bd045
   33248:	f846193a 	.word	0xf846193a
   3324c:	68533c20 	.word	0x68533c20
   33250:	1000f8da 	.word	0x1000f8da
   33254:	bf142b02 	.word	0xbf142b02
   33258:	200a2002 	.word	0x200a2002
   3325c:	3000f8db 	.word	0x3000f8db
   33260:	0107e946 	.word	0x0107e946
   33264:	3c14f846 	.word	0x3c14f846
   33268:	f1a88a10 	.word	0xf1a88a10
   3326c:	f8460310 	.word	0xf8460310
   33270:	8a550c10 	.word	0x8a550c10
   33274:	3c0cf846 	.word	0x3c0cf846
   33278:	34144b6b 	.word	0x34144b6b
   3327c:	eb072804 	.word	0xeb072804
   33280:	881b0104 	.word	0x881b0104
   33284:	2210d1c1 	.word	0x2210d1c1
   33288:	f8282002 	.word	0xf8282002
   3328c:	f8483c08 	.word	0xf8483c08
   33290:	f8080c0c 	.word	0xf8080c0c
   33294:	f8562c10 	.word	0xf8562c10
   33298:	f1a82c10 	.word	0xf1a82c10
   3329c:	e7c00004 	.word	0xe7c00004
   332a0:	0308f248 	.word	0x0308f248
   332a4:	d04e429e 	.word	0xd04e429e
   332a8:	0309f248 	.word	0x0309f248
   332ac:	f47f429e 	.word	0xf47f429e
   332b0:	683baf2d 	.word	0x683baf2d
   332b4:	2b0db29b 	.word	0x2b0db29b
   332b8:	af24f47f 	.word	0xaf24f47f
   332bc:	28006968 	.word	0x28006968
   332c0:	af72f47f 	.word	0xaf72f47f
   332c4:	0c1b683b 	.word	0x0c1b683b
   332c8:	f043041b 	.word	0xf043041b
   332cc:	603b030e 	.word	0x603b030e
   332d0:	2200e719 	.word	0x2200e719
   332d4:	1302e9dd 	.word	0x1302e9dd
   332d8:	f843440b 	.word	0xf843440b
   332dc:	22022c04 	.word	0x22022c04
   332e0:	f8c94b52 	.word	0xf8c94b52
   332e4:	9a022000 	.word	0x9a022000
   332e8:	601a2000 	.word	0x601a2000
   332ec:	683be70b 	.word	0x683be70b
   332f0:	f57f0099 	.word	0xf57f0099
   332f4:	683baf07 	.word	0x683baf07
   332f8:	5300f023 	.word	0x5300f023
   332fc:	6968603b 	.word	0x6968603b
   33300:	f0002800 	.word	0xf0002800
   33304:	281080a2 	.word	0x281080a2
   33308:	232dbf8e 	.word	0x232dbf8e
   3330c:	f8534b43 	.word	0xf8534b43
   33310:	20003020 	.word	0x20003020
   33314:	683b607b 	.word	0x683b607b
   33318:	2380f443 	.word	0x2380f443
   3331c:	e6f2603b 	.word	0xe6f2603b
   33320:	029a683b 	.word	0x029a683b
   33324:	aeeef57f 	.word	0xaeeef57f
   33328:	2b00696b 	.word	0x2b00696b
   3332c:	809cf000 	.word	0x809cf000
   33330:	f47f2b6b 	.word	0xf47f2b6b
   33334:	693baf26 	.word	0x693baf26
   33338:	f0002b01 	.word	0xf0002b01
   3333c:	230c80b1 	.word	0x230c80b1
   33340:	607b2000 	.word	0x607b2000
   33344:	683be6df 	.word	0x683be6df
   33348:	2b06b29b 	.word	0x2b06b29b
   3334c:	aedaf47f 	.word	0xaedaf47f
   33350:	28006968 	.word	0x28006968
   33354:	af28f47f 	.word	0xaf28f47f
   33358:	0c1b683b 	.word	0x0c1b683b
   3335c:	f043041b 	.word	0xf043041b
   33360:	603b0307 	.word	0x603b0307
   33364:	683be6cf 	.word	0x683be6cf
   33368:	2b08b29b 	.word	0x2b08b29b
   3336c:	aecaf47f 	.word	0xaecaf47f
   33370:	2b00696b 	.word	0x2b00696b
   33374:	af05f47f 	.word	0xaf05f47f
   33378:	20014b2d 	.word	0x20014b2d
   3337c:	5024f843 	.word	0x5024f843
   33380:	0c1b683b 	.word	0x0c1b683b
   33384:	f043041b 	.word	0xf043041b
   33388:	603b0309 	.word	0x603b0309
   3338c:	683be6bb 	.word	0x683be6bb
   33390:	f57f025b 	.word	0xf57f025b
   33394:	6968aeb7 	.word	0x6968aeb7
   33398:	f47f2800 	.word	0xf47f2800
   3339c:	683baf05 	.word	0x683baf05
   333a0:	0300f443 	.word	0x0300f443
   333a4:	e6ae603b 	.word	0xe6ae603b
   333a8:	f443683b 	.word	0xf443683b
   333ac:	603b2300 	.word	0x603b2300
   333b0:	f423683b 	.word	0xf423683b
   333b4:	603b1300 	.word	0x603b1300
   333b8:	f423683b 	.word	0xf423683b
   333bc:	603b3300 	.word	0x603b3300
   333c0:	2b6c692b 	.word	0x2b6c692b
   333c4:	2b10d021 	.word	0x2b10d021
   333c8:	232dbf8c 	.word	0x232dbf8c
   333cc:	f04f4a13 	.word	0xf04f4a13
   333d0:	bf980000 	.word	0xbf980000
   333d4:	3023f852 	.word	0x3023f852
   333d8:	60bb607b 	.word	0x60bb607b
   333dc:	f005e693 	.word	0xf005e693
   333e0:	200cfecb 	.word	0x200cfecb
   333e4:	490e2302 	.word	0x490e2302
   333e8:	60084a10 	.word	0x60084a10
   333ec:	9902682f 	.word	0x9902682f
   333f0:	f8c96011 	.word	0xf8c96011
   333f4:	2f003000 	.word	0x2f003000
   333f8:	ae81f47f 	.word	0xae81f47f
   333fc:	232de682 	.word	0x232de682
   33400:	220ce6c5 	.word	0x220ce6c5
   33404:	601a4b06 	.word	0x601a4b06
   33408:	2239e769 	.word	0x2239e769
   3340c:	2000683b 	.word	0x2000683b
   33410:	4380f043 	.word	0x4380f043
   33414:	607a603b 	.word	0x607a603b
   33418:	e67460ba 	.word	0xe67460ba
   3341c:	00049e20 	.word	0x00049e20
   33420:	20024bd8 	.word	0x20024bd8
   33424:	20024be4 	.word	0x20024be4
   33428:	2002a434 	.word	0x2002a434
   3342c:	20024be0 	.word	0x20024be0
   33430:	20024be8 	.word	0x20024be8
   33434:	20024bdc 	.word	0x20024bdc
   33438:	20024bd4 	.word	0x20024bd4
   3343c:	20024bd0 	.word	0x20024bd0
   33440:	f7f96828 	.word	0xf7f96828
   33444:	4620f9e9 	.word	0x4620f9e9
   33448:	683be65d 	.word	0x683be65d
   3344c:	3300f443 	.word	0x3300f443
   33450:	683b603b 	.word	0x683b603b
   33454:	1380f443 	.word	0x1380f443
   33458:	683b603b 	.word	0x683b603b
   3345c:	041b0c1b 	.word	0x041b0c1b
   33460:	0305f043 	.word	0x0305f043
   33464:	e64e603b 	.word	0xe64e603b
   33468:	4a28683b 	.word	0x4a28683b
   3346c:	3300f443 	.word	0x3300f443
   33470:	2001603b 	.word	0x2001603b
   33474:	5024f842 	.word	0x5024f842
   33478:	2002e645 	.word	0x2002e645
   3347c:	683be643 	.word	0x683be643
   33480:	0c1b2000 	.word	0x0c1b2000
   33484:	f043041b 	.word	0xf043041b
   33488:	603b0304 	.word	0x603b0304
   3348c:	2302e63b 	.word	0x2302e63b
   33490:	69ab603b 	.word	0x69ab603b
   33494:	e63661bb 	.word	0xe63661bb
   33498:	b94c8a6c 	.word	0xb94c8a6c
   3349c:	e6124626 	.word	0xe6124626
   334a0:	683b220c 	.word	0x683b220c
   334a4:	f0432000 	.word	0xf0432000
   334a8:	603b6300 	.word	0x603b6300
   334ac:	e62a607a 	.word	0xe62a607a
   334b0:	f0052024 	.word	0xf0052024
   334b4:	4606fe43 	.word	0x4606fe43
   334b8:	8a6ab158 	.word	0x8a6ab158
   334bc:	d0182a10 	.word	0xd0182a10
   334c0:	d00a2a04 	.word	0xd00a2a04
   334c4:	f7f96828 	.word	0xf7f96828
   334c8:	4630f9a7 	.word	0x4630f9a7
   334cc:	fe54f005 	.word	0xfe54f005
   334d0:	6828e618 	.word	0x6828e618
   334d4:	f9a0f7f9 	.word	0xf9a0f7f9
   334d8:	2302e614 	.word	0x2302e614
   334dc:	60432410 	.word	0x60432410
   334e0:	8a2b7004 	.word	0x8a2b7004
   334e4:	0114f105 	.word	0x0114f105
   334e8:	300c8103 	.word	0x300c8103
   334ec:	fce0f7e6 	.word	0xfce0f7e6
   334f0:	230ae5e9 	.word	0x230ae5e9
   334f4:	60432424 	.word	0x60432424
   334f8:	8a2b7004 	.word	0x8a2b7004
   334fc:	0114f105 	.word	0x0114f105
   33500:	30108103 	.word	0x30108103
   33504:	fcd4f7e6 	.word	0xfcd4f7e6
   33508:	bf00e5dd 	.word	0xbf00e5dd
   3350c:	20024be8 	.word	0x20024be8

00033510 <rpc_logobj_client_evt_handler>:
   33510:	f850b120 	.word	0xf850b120
   33514:	0c091b08 	.word	0x0c091b08
   33518:	bf7cf7f9 	.word	0xbf7cf7f9
   3351c:	bf004770 	.word	0xbf004770

00033520 <rpc_logobj_client_init>:
   33520:	f0044801 	.word	0xf0044801
   33524:	bf00bd45 	.word	0xbf00bd45
   33528:	00049e64 	.word	0x00049e64

0003352c <rpc_logobj_client_request_alloc>:
   3352c:	b5102300 	.word	0xb5102300
   33530:	9301b082 	.word	0x9301b082
   33534:	b170b961 	.word	0xb170b961
   33538:	aa014604 	.word	0xaa014604
   3353c:	f0042009 	.word	0xf0042009
   33540:	b918ff6f 	.word	0xb918ff6f
   33544:	b10b9b01 	.word	0xb10b9b01
   33548:	60233308 	.word	0x60233308
   3354c:	bd10b002 	.word	0xbd10b002
   33550:	b002200f 	.word	0xb002200f
   33554:	200ebd10 	.word	0x200ebd10
   33558:	bd10b002 	.word	0xbd10b002

0003355c <rpc_logobj_client_request_send>:
   3355c:	4370f401 	.word	0x4370f401
   33560:	4fe0f5b3 	.word	0x4fe0f5b3
   33564:	b160d10b 	.word	0xb160d10b
   33568:	f8304603 	.word	0xf8304603
   3356c:	20092c08 	.word	0x20092c08
   33570:	4101ea42 	.word	0x4101ea42
   33574:	1d08f843 	.word	0x1d08f843
   33578:	f0044619 	.word	0xf0044619
   3357c:	200fbf39 	.word	0x200fbf39
   33580:	200e4770 	.word	0x200e4770
   33584:	bf004770 	.word	0xbf004770

00033588 <rpc_logobj_client_message_free>:
   33588:	f1a0b120 	.word	0xf1a0b120
   3358c:	20090108 	.word	0x20090108
   33590:	bf78f004 	.word	0xbf78f004
   33594:	4770200e 	.word	0x4770200e

00033598 <rpc_logobj_client_data_free>:
   33598:	4601b118 	.word	0x4601b118
   3359c:	f0052009 	.word	0xf0052009
   335a0:	200eb883 	.word	0x200eb883
   335a4:	bf004770 	.word	0xbf004770

000335a8 <datagram_handler_init>:
   335a8:	4604b510 	.word	0x4604b510
   335ac:	f005200c 	.word	0xf005200c
   335b0:	60e0fdc5 	.word	0x60e0fdc5
   335b4:	e8bdb118 	.word	0xe8bdb118
   335b8:	f0004010 	.word	0xf0004010
   335bc:	2004b8bd 	.word	0x2004b8bd
   335c0:	bf00bd10 	.word	0xbf00bd10

000335c4 <datagram_handler_put>:
   335c4:	4606b570 	.word	0x4606b570
   335c8:	460d2014 	.word	0x460d2014
   335cc:	fdb6f005 	.word	0xfdb6f005
   335d0:	682bb178 	.word	0x682bb178
   335d4:	60434604 	.word	0x60434604
   335d8:	4601686b 	.word	0x4601686b
   335dc:	68eb6083 	.word	0x68eb6083
   335e0:	68ab60c3 	.word	0x68ab60c3
   335e4:	68f06103 	.word	0x68f06103
   335e8:	f8b0f000 	.word	0xf8b0f000
   335ec:	6868b920 	.word	0x6868b920
   335f0:	f04fbd70 	.word	0xf04fbd70
   335f4:	bd7030ff 	.word	0xbd7030ff
   335f8:	f0054620 	.word	0xf0054620
   335fc:	f04ffdbd 	.word	0xf04ffdbd
   33600:	bd7030ff 	.word	0xbd7030ff

00033604 <datagram_handler_get>:
   33604:	4606b5f0 	.word	0x4606b5f0
   33608:	68c0b085 	.word	0x68c0b085
   3360c:	4617460c 	.word	0x4617460c
   33610:	f8bcf000 	.word	0xf8bcf000
   33614:	d0372800 	.word	0xd0372800
   33618:	46056882 	.word	0x46056882
   3361c:	0300e9d4 	.word	0x0300e9d4
   33620:	bf28429a 	.word	0xbf28429a
   33624:	6062461a 	.word	0x6062461a
   33628:	6869b110 	.word	0x6869b110
   3362c:	fc40f7e6 	.word	0xfc40f7e6
   33630:	b11868a0 	.word	0xb11868a0
   33634:	b10b692b 	.word	0xb10b692b
   33638:	b9e268ea 	.word	0xb9e268ea
   3363c:	60e32300 	.word	0x60e32300
   33640:	d502073b 	.word	0xd502073b
   33644:	b0056860 	.word	0xb0056860
   33648:	68f0bdf0 	.word	0x68f0bdf0
   3364c:	f894f000 	.word	0xf894f000
   33650:	28004605 	.word	0x28004605
   33654:	e9d0d0f6 	.word	0xe9d0d0f6
   33658:	69023101 	.word	0x69023101
   3365c:	68c39300 	.word	0x68c39300
   33660:	1201e9cd 	.word	0x1201e9cd
   33664:	46689303 	.word	0x46689303
   33668:	3101e9d6 	.word	0x3101e9d6
   3366c:	46284798 	.word	0x46284798
   33670:	fd82f005 	.word	0xfd82f005
   33674:	68e3e7e6 	.word	0x68e3e7e6
   33678:	bf28429a 	.word	0xbf28429a
   3367c:	60e2461a 	.word	0x60e2461a
   33680:	f7e66929 	.word	0xf7e66929
   33684:	e7dbfc15 	.word	0xe7dbfc15
   33688:	30fff04f 	.word	0x30fff04f
   3368c:	bf00e7db 	.word	0xbf00e7db

00033690 <datagram_handler_available>:
   33690:	68c0b508 	.word	0x68c0b508
   33694:	f87af000 	.word	0xf87af000
   33698:	6880b108 	.word	0x6880b108
   3369c:	f04fbd08 	.word	0xf04fbd08
   336a0:	bd0830ff 	.word	0xbd0830ff

000336a4 <datagram_handler_flush>:
   336a4:	4605b530 	.word	0x4605b530
   336a8:	b08568c0 	.word	0xb08568c0
   336ac:	e01ab9a8 	.word	0xe01ab9a8
   336b0:	f00068e8 	.word	0xf00068e8
   336b4:	4604f861 	.word	0x4604f861
   336b8:	e9d0b170 	.word	0xe9d0b170
   336bc:	e9d40101 	.word	0xe9d40101
   336c0:	e9cd3203 	.word	0xe9cd3203
   336c4:	e9cd0100 	.word	0xe9cd0100
   336c8:	e9d52302 	.word	0xe9d52302
   336cc:	46683101 	.word	0x46683101
   336d0:	46204798 	.word	0x46204798
   336d4:	fd50f005 	.word	0xfd50f005
   336d8:	f00068e8 	.word	0xf00068e8
   336dc:	2800f85d 	.word	0x2800f85d
   336e0:	b005d1e6 	.word	0xb005d1e6
   336e4:	2008bd30 	.word	0x2008bd30
   336e8:	bd30b005 	.word	0xbd30b005

000336ec <datagram_handler_free>:
   336ec:	4605b530 	.word	0x4605b530
   336f0:	b08568c0 	.word	0xb08568c0
   336f4:	e01cb9a0 	.word	0xe01cb9a0
   336f8:	f83ef000 	.word	0xf83ef000
   336fc:	b1704604 	.word	0xb1704604
   33700:	0101e9d0 	.word	0x0101e9d0
   33704:	3203e9d4 	.word	0x3203e9d4
   33708:	0100e9cd 	.word	0x0100e9cd
   3370c:	2302e9cd 	.word	0x2302e9cd
   33710:	3101e9d5 	.word	0x3101e9d5
   33714:	47984668 	.word	0x47984668
   33718:	f0054620 	.word	0xf0054620
   3371c:	68e8fd2d 	.word	0x68e8fd2d
   33720:	f83af000 	.word	0xf83af000
   33724:	68e84604 	.word	0x68e84604
   33728:	d1e52c00 	.word	0xd1e52c00
   3372c:	fd24f005 	.word	0xfd24f005
   33730:	b00560ec 	.word	0xb00560ec
   33734:	bf00bd30 	.word	0xbf00bd30

00033738 <linked_list_init>:
   33738:	2300b128 	.word	0x2300b128
   3373c:	e9c06003 	.word	0xe9c06003
   33740:	46183301 	.word	0x46183301
   33744:	20074770 	.word	0x20074770
   33748:	bf004770 	.word	0xbf004770

0003374c <linked_list_push>:
   3374c:	46036802 	.word	0x46036802
   33750:	d00e3201 	.word	0xd00e3201
   33754:	600a2200 	.word	0x600a2200
   33758:	b13a6802 	.word	0xb13a6802
   3375c:	60116882 	.word	0x60116882
   33760:	681a6081 	.word	0x681a6081
   33764:	32012000 	.word	0x32012000
   33768:	4770601a 	.word	0x4770601a
   3376c:	1101e9c0 	.word	0x1101e9c0
   33770:	2004e7f7 	.word	0x2004e7f7
   33774:	bf004770 	.word	0xbf004770

00033778 <linked_list_pop>:
   33778:	68004603 	.word	0x68004603
   3377c:	6858b128 	.word	0x6858b128
   33780:	6801681a 	.word	0x6801681a
   33784:	60593a01 	.word	0x60593a01
   33788:	4770601a 	.word	0x4770601a

0003378c <linked_list_peek>:
   3378c:	b10b6803 	.word	0xb10b6803
   33790:	47706840 	.word	0x47706840
   33794:	47704618 	.word	0x47704618

00033798 <linked_list_size_get>:
   33798:	47706800 	.word	0x47706800

0003379c <linked_list_get_next>:
   3379c:	47706800 	.word	0x47706800

000337a0 <rpc_transport_ipc_tx_init>:
   337a0:	f0002800 	.word	0xf0002800
   337a4:	290080b8 	.word	0x290080b8
   337a8:	80b5f000 	.word	0x80b5f000
   337ac:	f0002a00 	.word	0xf0002a00
   337b0:	e92d80b2 	.word	0xe92d80b2
   337b4:	6a044ff0 	.word	0x6a044ff0
   337b8:	2c00b085 	.word	0x2c00b085
   337bc:	80a6f000 	.word	0x80a6f000
   337c0:	28006a40 	.word	0x28006a40
   337c4:	80a2f000 	.word	0x80a2f000
   337c8:	4587f642 	.word	0x4587f642
   337cc:	0a00f04f 	.word	0x0a00f04f
   337d0:	42a84e55 	.word	0x42a84e55
   337d4:	a000f886 	.word	0xa000f886
   337d8:	80a0f240 	.word	0x80a0f240
   337dc:	f8df2708 	.word	0xf8df2708
   337e0:	46209180 	.word	0x46209180
   337e4:	460d4616 	.word	0x460d4616
   337e8:	46512244 	.word	0x46512244
   337ec:	4000f8c9 	.word	0x4000f8c9
   337f0:	faacf00c 	.word	0xfaacf00c
   337f4:	2000f8d9 	.word	0x2000f8d9
   337f8:	0344f104 	.word	0x0344f104
   337fc:	8164f8df 	.word	0x8164f8df
   33800:	a001f882 	.word	0xa001f882
   33804:	a002f882 	.word	0xa002f882
   33808:	a003f882 	.word	0xa003f882
   3380c:	46187017 	.word	0x46187017
   33810:	46512244 	.word	0x46512244
   33814:	3000f8c8 	.word	0x3000f8c8
   33818:	fa98f00c 	.word	0xfa98f00c
   3381c:	2000f8d8 	.word	0x2000f8d8
   33820:	0388f104 	.word	0x0388f104
   33824:	b140f8df 	.word	0xb140f8df
   33828:	f8827017 	.word	0xf8827017
   3382c:	f882a001 	.word	0xf882a001
   33830:	f882a002 	.word	0xf882a002
   33834:	4618a003 	.word	0x4618a003
   33838:	7200f44f 	.word	0x7200f44f
   3383c:	f8cb4651 	.word	0xf8cb4651
   33840:	f00c3000 	.word	0xf00c3000
   33844:	4b39fa83 	.word	0x4b39fa83
   33848:	7c22f504 	.word	0x7c22f504
   3384c:	c000f8c3 	.word	0xc000f8c3
   33850:	46604651 	.word	0x46604651
   33854:	7200f44f 	.word	0x7200f44f
   33858:	fa78f00c 	.word	0xfa78f00c
   3385c:	5c20f44f 	.word	0x5c20f44f
   33860:	f04f2106 	.word	0xf04f2106
   33864:	f44f0e01 	.word	0xf44f0e01
   33868:	f44f3001 	.word	0xf44f3001
   3386c:	4b303288 	.word	0x4b303288
   33870:	6491f504 	.word	0x6491f504
   33874:	4c2f605c 	.word	0x4c2f605c
   33878:	c008f8c3 	.word	0xc008f8c3
   3387c:	f8a38199 	.word	0xf8a38199
   33880:	4619e000 	.word	0x4619e000
   33884:	4b2c611c 	.word	0x4b2c611c
   33888:	c0e0f8df 	.word	0xc0e0f8df
   3388c:	482b6120 	.word	0x482b6120
   33890:	f5036063 	.word	0xf5036063
   33894:	60a073c0 	.word	0x60a073c0
   33898:	c000f8c4 	.word	0xc000f8c4
   3389c:	60e34828 	.word	0x60e34828
   338a0:	f0056162 	.word	0xf0056162
   338a4:	2800fb31 	.word	0x2800fb31
   338a8:	f04fd132 	.word	0xf04fd132
   338ac:	24200c02 	.word	0x24200c02
   338b0:	1000f8d9 	.word	0x1000f8d9
   338b4:	2000f8db 	.word	0x2000f8db
   338b8:	4b1c6029 	.word	0x4b1c6029
   338bc:	1000f8d8 	.word	0x1000f8d8
   338c0:	e0acf8df 	.word	0xe0acf8df
   338c4:	60314d1f 	.word	0x60314d1f
   338c8:	2000f8ce 	.word	0x2000f8ce
   338cc:	491e681b 	.word	0x491e681b
   338d0:	7200f502 	.word	0x7200f502
   338d4:	4e1d602a 	.word	0x4e1d602a
   338d8:	4d1e4a1d 	.word	0x4d1e4a1d
   338dc:	f503600b 	.word	0xf503600b
   338e0:	491d7300 	.word	0x491d7300
   338e4:	80286033 	.word	0x80286033
   338e8:	c514f8c2 	.word	0xc514f8c2
   338ec:	4b1b6809 	.word	0x4b1b6809
   338f0:	99039103 	.word	0x99039103
   338f4:	751cf8c2 	.word	0x751cf8c2
   338f8:	443b6819 	.word	0x443b6819
   338fc:	99029102 	.word	0x99029102
   33900:	4524f8c2 	.word	0x4524f8c2
   33904:	9301681b 	.word	0x9301681b
   33908:	e0019b01 	.word	0xe0019b01
   3390c:	0007f24c 	.word	0x0007f24c
   33910:	e8bdb005 	.word	0xe8bdb005
   33914:	f24c8ff0 	.word	0xf24c8ff0
   33918:	4770000e 	.word	0x4770000e
   3391c:	0004f24c 	.word	0x0004f24c
   33920:	e8bdb005 	.word	0xe8bdb005
   33924:	bf008ff0 	.word	0xbf008ff0
   33928:	2002c382 	.word	0x2002c382
   3392c:	20024c38 	.word	0x20024c38
   33930:	20024c24 	.word	0x20024c24
   33934:	20024c48 	.word	0x20024c48
   33938:	00040080 	.word	0x00040080
   3393c:	00040100 	.word	0x00040100
   33940:	20024c10 	.word	0x20024c10
   33944:	20024c1c 	.word	0x20024c1c
   33948:	20024c18 	.word	0x20024c18
   3394c:	20024c14 	.word	0x20024c14
   33950:	4002a000 	.word	0x4002a000
   33954:	2002a436 	.word	0x2002a436
   33958:	4002a514 	.word	0x4002a514
   3395c:	4002a51c 	.word	0x4002a51c
   33960:	20024c44 	.word	0x20024c44
   33964:	20024c3c 	.word	0x20024c3c
   33968:	20024c40 	.word	0x20024c40
   3396c:	00080040 	.word	0x00080040
   33970:	20024c20 	.word	0x20024c20

00033974 <rpc_transport_ipc_tx_send>:
   33974:	d05f2800 	.word	0xd05f2800
   33978:	4b33b470 	.word	0x4b33b470
   3397c:	681ab083 	.word	0x681ab083
   33980:	42824b32 	.word	0x42824b32
   33984:	681bd81e 	.word	0x681bd81e
   33988:	42834931 	.word	0x42834931
   3398c:	d8036809 	.word	0xd8036809
   33990:	68244c30 	.word	0x68244c30
   33994:	d8474284 	.word	0xd8474284
   33998:	d90e4281 	.word	0xd90e4281
   3399c:	781b4b2e 	.word	0x781b4b2e
   339a0:	d14c2b00 	.word	0xd14c2b00
   339a4:	492d1a83 	.word	0x492d1a83
   339a8:	069b099e 	.word	0x069b099e
   339ac:	4c2c680a 	.word	0x4c2c680a
   339b0:	0103f04f 	.word	0x0103f04f
   339b4:	0502f04f 	.word	0x0502f04f
   339b8:	f24cd014 	.word	0xf24cd014
   339bc:	b0030010 	.word	0xb0030010
   339c0:	4770bc70 	.word	0x4770bc70
   339c4:	4298681b 	.word	0x4298681b
   339c8:	4a22d3f7 	.word	0x4a22d3f7
   339cc:	42906812 	.word	0x42906812
   339d0:	2101d2f3 	.word	0x2101d2f3
   339d4:	4a231ac3 	.word	0x4a231ac3
   339d8:	069b099e 	.word	0x069b099e
   339dc:	6812460d 	.word	0x6812460d
   339e0:	d1ea4c21 	.word	0xd1ea4c21
   339e4:	b2db6843 	.word	0xb2db6843
   339e8:	d120429d 	.word	0xd120429d
   339ec:	eb022020 	.word	0xeb022020
   339f0:	4d1e02c6 	.word	0x4d1e02c6
   339f4:	882e6853 	.word	0x882e6853
   339f8:	ea43b29b 	.word	0xea43b29b
   339fc:	f0234306 	.word	0xf0234306
   33a00:	f04303ff 	.word	0xf04303ff
   33a04:	60530301 	.word	0x60530301
   33a08:	3801bf00 	.word	0x3801bf00
   33a0c:	2201d1fc 	.word	0x2201d1fc
   33a10:	f8434b17 	.word	0xf8434b17
   33a14:	68222021 	.word	0x68222021
   33a18:	9201882b 	.word	0x9201882b
   33a1c:	33019a01 	.word	0x33019a01
   33a20:	b003802b 	.word	0xb003802b
   33a24:	4770bc70 	.word	0x4770bc70
   33a28:	d9d24281 	.word	0xd9d24281
   33a2c:	f24ce7b6 	.word	0xf24ce7b6
   33a30:	b0030007 	.word	0xb0030007
   33a34:	4770bc70 	.word	0x4770bc70
   33a38:	000ef24c 	.word	0x000ef24c
   33a3c:	f24c4770 	.word	0xf24c4770
   33a40:	b003000f 	.word	0xb003000f
   33a44:	4770bc70 	.word	0x4770bc70
   33a48:	20024c20 	.word	0x20024c20
   33a4c:	20024c18 	.word	0x20024c18
   33a50:	20024c1c 	.word	0x20024c1c
   33a54:	20024c14 	.word	0x20024c14
   33a58:	2002c382 	.word	0x2002c382
   33a5c:	20024c44 	.word	0x20024c44
   33a60:	4002a00c 	.word	0x4002a00c
   33a64:	20024c3c 	.word	0x20024c3c
   33a68:	4002a004 	.word	0x4002a004
   33a6c:	2002a436 	.word	0x2002a436
   33a70:	4002a000 	.word	0x4002a000

00033a74 <rpc_transport_ipc_tx_rpc_data_alloc>:
   33a74:	781b4b18 	.word	0x781b4b18
   33a78:	b4f0bb63 	.word	0xb4f0bb63
   33a7c:	f0034a17 	.word	0xf0034a17
   33a80:	681400ff 	.word	0x681400ff
   33a84:	68254b16 	.word	0x68254b16
   33a88:	b1a5681e 	.word	0xb1a5681e
   33a8c:	00c14607 	.word	0x00c14607
   33a90:	685a1863 	.word	0x685a1863
   33a94:	2a03b2d2 	.word	0x2a03b2d2
   33a98:	609fd104 	.word	0x609fd104
   33a9c:	f022685a 	.word	0xf022685a
   33aa0:	605a02ff 	.word	0x605a02ff
   33aa4:	f012685a 	.word	0xf012685a
   33aa8:	d1010fff 	.word	0xd1010fff
   33aac:	b12b689b 	.word	0xb12b689b
   33ab0:	42a83001 	.word	0x42a83001
   33ab4:	2000d1eb 	.word	0x2000d1eb
   33ab8:	4770bcf0 	.word	0x4770bcf0
   33abc:	1080eb06 	.word	0x1080eb06
   33ac0:	60884421 	.word	0x60884421
   33ac4:	f0236843 	.word	0xf0236843
   33ac8:	f04303ff 	.word	0xf04303ff
   33acc:	60430302 	.word	0x60430302
   33ad0:	4770bcf0 	.word	0x4770bcf0
   33ad4:	47702000 	.word	0x47702000
   33ad8:	2002c382 	.word	0x2002c382
   33adc:	20024c44 	.word	0x20024c44
   33ae0:	20024c40 	.word	0x20024c40

00033ae4 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   33ae4:	4a15b4f0 	.word	0x4a15b4f0
   33ae8:	68144b15 	.word	0x68144b15
   33aec:	6825681e 	.word	0x6825681e
   33af0:	2000b1ad 	.word	0x2000b1ad
   33af4:	00c14607 	.word	0x00c14607
   33af8:	685a1863 	.word	0x685a1863
   33afc:	2a03b2d2 	.word	0x2a03b2d2
   33b00:	609fd104 	.word	0x609fd104
   33b04:	f022685a 	.word	0xf022685a
   33b08:	605a02ff 	.word	0x605a02ff
   33b0c:	f012685a 	.word	0xf012685a
   33b10:	d1010fff 	.word	0xd1010fff
   33b14:	b12b689b 	.word	0xb12b689b
   33b18:	42853001 	.word	0x42853001
   33b1c:	2000d1eb 	.word	0x2000d1eb
   33b20:	4770bcf0 	.word	0x4770bcf0
   33b24:	1080eb06 	.word	0x1080eb06
   33b28:	60884421 	.word	0x60884421
   33b2c:	f0236843 	.word	0xf0236843
   33b30:	f04303ff 	.word	0xf04303ff
   33b34:	60430301 	.word	0x60430301
   33b38:	4770bcf0 	.word	0x4770bcf0
   33b3c:	20024c3c 	.word	0x20024c3c
   33b40:	20024c38 	.word	0x20024c38

00033b44 <rpc_transport_ipc_tx_data_alloc>:
   33b44:	781b4b03 	.word	0x781b4b03
   33b48:	f005b90b 	.word	0xf005b90b
   33b4c:	2000bb21 	.word	0x2000bb21
   33b50:	bf004770 	.word	0xbf004770
   33b54:	2002c382 	.word	0x2002c382

00033b58 <rpc_transport_ipc_tx_suspend>:
   33b58:	4b012201 	.word	0x4b012201
   33b5c:	4770701a 	.word	0x4770701a
   33b60:	2002c382 	.word	0x2002c382

00033b64 <rpc_transport_ipc_tx_shutdown>:
   33b64:	4a16b4f0 	.word	0x4a16b4f0
   33b68:	68144b16 	.word	0x68144b16
   33b6c:	6825681e 	.word	0x6825681e
   33b70:	2200b1ad 	.word	0x2200b1ad
   33b74:	00d04617 	.word	0x00d04617
   33b78:	68591823 	.word	0x68591823
   33b7c:	2903b2c9 	.word	0x2903b2c9
   33b80:	609fd104 	.word	0x609fd104
   33b84:	f0216859 	.word	0xf0216859
   33b88:	605901ff 	.word	0x605901ff
   33b8c:	f0116859 	.word	0xf0116859
   33b90:	d1010fff 	.word	0xd1010fff
   33b94:	b123689b 	.word	0xb123689b
   33b98:	42aa3201 	.word	0x42aa3201
   33b9c:	bcf0d1eb 	.word	0xbcf0d1eb
   33ba0:	01924770 	.word	0x01924770
   33ba4:	18b04404 	.word	0x18b04404
   33ba8:	684360a0 	.word	0x684360a0
   33bac:	f0234906 	.word	0xf0234906
   33bb0:	f04303ff 	.word	0xf04303ff
   33bb4:	60430301 	.word	0x60430301
   33bb8:	bcf050b1 	.word	0xbcf050b1
   33bbc:	bedaf7ff 	.word	0xbedaf7ff
   33bc0:	20024c3c 	.word	0x20024c3c
   33bc4:	20024c38 	.word	0x20024c38
   33bc8:	00030001 	.word	0x00030001

00033bcc <null_handler_init>:
   33bcc:	47702000 	.word	0x47702000

00033bd0 <null_handler_put>:
   33bd0:	460cb510 	.word	0x460cb510
   33bd4:	3101e9d0 	.word	0x3101e9d0
   33bd8:	47984620 	.word	0x47984620
   33bdc:	bd106860 	.word	0xbd106860

00033be0 <null_handler_get>:
   33be0:	30fff04f 	.word	0x30fff04f
   33be4:	bf004770 	.word	0xbf004770

00033be8 <null_handler_available>:
   33be8:	30fff04f 	.word	0x30fff04f
   33bec:	bf004770 	.word	0xbf004770

00033bf0 <null_handler_flush>:
   33bf0:	47702000 	.word	0x47702000

00033bf4 <null_handler_free>:
   33bf4:	bf004770 	.word	0xbf004770

00033bf8 <rpc_gnss_event_handler>:
   33bf8:	4b5db5f0 	.word	0x4b5db5f0
   33bfc:	68004606 	.word	0x68004606
   33c00:	6802881b 	.word	0x6802881b
   33c04:	ebb34c5b 	.word	0xebb34c5b
   33c08:	b0854f12 	.word	0xb0854f12
   33c0c:	6020460d 	.word	0x6020460d
   33c10:	f505d033 	.word	0xf505d033
   33c14:	33ff433f 	.word	0x33ff433f
   33c18:	2b02b29b 	.word	0x2b02b29b
   33c1c:	4c56d80e 	.word	0x4c56d80e
   33c20:	075a6823 	.word	0x075a6823
   33c24:	6823d40d 	.word	0x6823d40d
   33c28:	d503079b 	.word	0xd503079b
   33c2c:	0303f244 	.word	0x0303f244
   33c30:	d006429d 	.word	0xd006429d
   33c34:	b1086830 	.word	0xb1086830
   33c38:	f92ef7f9 	.word	0xf92ef7f9
   33c3c:	b0052000 	.word	0xb0052000
   33c40:	2002bdf0 	.word	0x2002bdf0
   33c44:	fa7af005 	.word	0xfa7af005
   33c48:	28004607 	.word	0x28004607
   33c4c:	2302d0f2 	.word	0x2302d0f2
   33c50:	68318005 	.word	0x68318005
   33c54:	48496872 	.word	0x48496872
   33c58:	0086e88d 	.word	0x0086e88d
   33c5c:	93036800 	.word	0x93036800
   33c60:	46696803 	.word	0x46696803
   33c64:	4798685b 	.word	0x4798685b
   33c68:	d06d3001 	.word	0xd06d3001
   33c6c:	68232000 	.word	0x68232000
   33c70:	3380f443 	.word	0x3380f443
   33c74:	b0056023 	.word	0xb0056023
   33c78:	4c3fbdf0 	.word	0x4c3fbdf0
   33c7c:	01da6823 	.word	0x01da6823
   33c80:	f242d523 	.word	0xf242d523
   33c84:	42991302 	.word	0x42991302
   33c88:	6843d11f 	.word	0x6843d11f
   33c8c:	6823b91b 	.word	0x6823b91b
   33c90:	7300f043 	.word	0x7300f043
   33c94:	68236023 	.word	0x68236023
   33c98:	7380f023 	.word	0x7380f023
   33c9c:	68236023 	.word	0x68236023
   33ca0:	d430025b 	.word	0xd430025b
   33ca4:	0305f242 	.word	0x0305f242
   33ca8:	d12c429d 	.word	0xd12c429d
   33cac:	02996823 	.word	0x02996823
   33cb0:	6843d529 	.word	0x6843d529
   33cb4:	d1552b00 	.word	0xd1552b00
   33cb8:	f4236823 	.word	0xf4236823
   33cbc:	60231300 	.word	0x60231300
   33cc0:	f4436823 	.word	0xf4436823
   33cc4:	60233300 	.word	0x60233300
   33cc8:	6823e01d 	.word	0x6823e01d
   33ccc:	d50e025f 	.word	0xd50e025f
   33cd0:	1303f242 	.word	0x1303f242
   33cd4:	d10a429d 	.word	0xd10a429d
   33cd8:	b91b6843 	.word	0xb91b6843
   33cdc:	f4436823 	.word	0xf4436823
   33ce0:	60230300 	.word	0x60230300
   33ce4:	f4236823 	.word	0xf4236823
   33ce8:	60230380 	.word	0x60230380
   33cec:	f242e00b 	.word	0xf242e00b
   33cf0:	429d0301 	.word	0x429d0301
   33cf4:	6843d10a 	.word	0x6843d10a
   33cf8:	6823b92b 	.word	0x6823b92b
   33cfc:	041b0c1b 	.word	0x041b0c1b
   33d00:	0302f043 	.word	0x0302f043
   33d04:	f7f96023 	.word	0xf7f96023
   33d08:	e782f8c7 	.word	0xe782f8c7
   33d0c:	0304f242 	.word	0x0304f242
   33d10:	d1c7429d 	.word	0xd1c7429d
   33d14:	b9936843 	.word	0xb9936843
   33d18:	f4436823 	.word	0xf4436823
   33d1c:	60230300 	.word	0x60230300
   33d20:	b29b6823 	.word	0xb29b6823
   33d24:	68232b03 	.word	0x68232b03
   33d28:	b29bd016 	.word	0xb29bd016
   33d2c:	d1d92b04 	.word	0xd1d92b04
   33d30:	0c1b6823 	.word	0x0c1b6823
   33d34:	f043041b 	.word	0xf043041b
   33d38:	60230302 	.word	0x60230302
   33d3c:	6823e7d2 	.word	0x6823e7d2
   33d40:	2b03b29b 	.word	0x2b03b29b
   33d44:	e7f3d1ce 	.word	0xe7f3d1ce
   33d48:	f0054638 	.word	0xf0054638
   33d4c:	6830fa15 	.word	0x6830fa15
   33d50:	f47f2800 	.word	0xf47f2800
   33d54:	e771af71 	.word	0xe771af71
   33d58:	041b0c1b 	.word	0x041b0c1b
   33d5c:	0304f043 	.word	0x0304f043
   33d60:	e7bf6023 	.word	0xe7bf6023
   33d64:	f4236823 	.word	0xf4236823
   33d68:	60231300 	.word	0x60231300
   33d6c:	bf00e7cb 	.word	0xbf00e7cb
   33d70:	2002a438 	.word	0x2002a438
   33d74:	20024c08 	.word	0x20024c08
   33d78:	20024c60 	.word	0x20024c60
   33d7c:	20024c64 	.word	0x20024c64

00033d80 <gnss_interface_write>:
   33d80:	43f0e92d 	.word	0x43f0e92d
   33d84:	b09f4a75 	.word	0xb09f4a75
   33d88:	9d264290 	.word	0x9d264290
   33d8c:	80d3f040 	.word	0x80d3f040
   33d90:	f0002900 	.word	0xf0002900
   33d94:	2d0080c8 	.word	0x2d0080c8
   33d98:	80c5f000 	.word	0x80c5f000
   33d9c:	2a029a27 	.word	0x2a029a27
   33da0:	80c1f040 	.word	0x80c1f040
   33da4:	68224c6e 	.word	0x68224c6e
   33da8:	2a02b292 	.word	0x2a02b292
   33dac:	6822d004 	.word	0x6822d004
   33db0:	2a04b292 	.word	0x2a04b292
   33db4:	80c5f040 	.word	0x80c5f040
   33db8:	f1000798 	.word	0xf1000798
   33dbc:	682080c8 	.word	0x682080c8
   33dc0:	3000f410 	.word	0x3000f410
   33dc4:	6822d065 	.word	0x6822d065
   33dc8:	f422882b 	.word	0xf422882b
   33dcc:	60223200 	.word	0x60223200
   33dd0:	3b016822 	.word	0x3b016822
   33dd4:	1200f442 	.word	0x1200f442
   33dd8:	2b076022 	.word	0x2b076022
   33ddc:	80a3f200 	.word	0x80a3f200
   33de0:	f003e8df 	.word	0xf003e8df
   33de4:	696e7378 	.word	0x696e7378
   33de8:	045f5a64 	.word	0x045f5a64
   33dec:	a9024608 	.word	0xa9024608
   33df0:	feb6f7fb 	.word	0xfeb6f7fb
   33df4:	46682172 	.word	0x46682172
   33df8:	f81cf7f9 	.word	0xf81cf7f9
   33dfc:	98004605 	.word	0x98004605
   33e00:	d16c2d00 	.word	0xd16c2d00
   33e04:	d06a2800 	.word	0xd06a2800
   33e08:	0605f241 	.word	0x0605f241
   33e0c:	0c49f04f 	.word	0x0c49f04f
   33e10:	f04f2272 	.word	0xf04f2272
   33e14:	f04f0e76 	.word	0xf04f0e76
   33e18:	f04f0943 	.word	0xf04f0943
   33e1c:	4f510854 	.word	0x4f510854
   33e20:	883ba91e 	.word	0x883ba91e
   33e24:	c00ff880 	.word	0xc00ff880
   33e28:	b29b3301 	.word	0xb29b3301
   33e2c:	4c03ea46 	.word	0x4c03ea46
   33e30:	cd74f841 	.word	0xcd74f841
   33e34:	71857145 	.word	0x71857145
   33e38:	720571c5 	.word	0x720571c5
   33e3c:	72857245 	.word	0x72857245
   33e40:	710272c5 	.word	0x710272c5
   33e44:	900cf880 	.word	0x900cf880
   33e48:	800df880 	.word	0x800df880
   33e4c:	e00ef880 	.word	0xe00ef880
   33e50:	803b6800 	.word	0x803b6800
   33e54:	f82cf7e6 	.word	0xf82cf7e6
   33e58:	46314b43 	.word	0x46314b43
   33e5c:	601d9800 	.word	0x601d9800
   33e60:	fffcf7f8 	.word	0xfffcf7f8
   33e64:	d1472800 	.word	0xd1472800
   33e68:	02996823 	.word	0x02996823
   33e6c:	4e3fd50d 	.word	0x4e3fd50d
   33e70:	e0014d3a 	.word	0xe0014d3a
   33e74:	d14f2800 	.word	0xd14f2800
   33e78:	46284631 	.word	0x46284631
   33e7c:	f8dcf7f1 	.word	0xf8dcf7f1
   33e80:	029a6823 	.word	0x029a6823
   33e84:	2800d4f6 	.word	0x2800d4f6
   33e88:	6823d146 	.word	0x6823d146
   33e8c:	d53e039b 	.word	0xd53e039b
   33e90:	b01f2000 	.word	0xb01f2000
   33e94:	83f0e8bd 	.word	0x83f0e8bd
   33e98:	a9024608 	.word	0xa9024608
   33e9c:	fe18f7fb 	.word	0xfe18f7fb
   33ea0:	4608e7a8 	.word	0x4608e7a8
   33ea4:	f7fba902 	.word	0xf7fba902
   33ea8:	e7a3fe3b 	.word	0xe7a3fe3b
   33eac:	a9024608 	.word	0xa9024608
   33eb0:	fdf4f7fb 	.word	0xfdf4f7fb
   33eb4:	4608e79e 	.word	0x4608e79e
   33eb8:	f7fba902 	.word	0xf7fba902
   33ebc:	e799fdcb 	.word	0xe799fdcb
   33ec0:	a9024608 	.word	0xa9024608
   33ec4:	fd94f7fb 	.word	0xfd94f7fb
   33ec8:	4608e794 	.word	0x4608e794
   33ecc:	f7fba902 	.word	0xf7fba902
   33ed0:	e78ffd3d 	.word	0xe78ffd3d
   33ed4:	a9024608 	.word	0xa9024608
   33ed8:	fd16f7fb 	.word	0xfd16f7fb
   33edc:	6803e78a 	.word	0x6803e78a
   33ee0:	4618b11b 	.word	0x4618b11b
   33ee4:	ffd8f7f8 	.word	0xffd8f7f8
   33ee8:	f7f89800 	.word	0xf7f89800
   33eec:	2023ffcd 	.word	0x2023ffcd
   33ef0:	f932f7f1 	.word	0xf932f7f1
   33ef4:	30fff04f 	.word	0x30fff04f
   33ef8:	f4236823 	.word	0xf4236823
   33efc:	60231300 	.word	0x60231300
   33f00:	f4436823 	.word	0xf4436823
   33f04:	60233300 	.word	0x60233300
   33f08:	e8bdb01f 	.word	0xe8bdb01f
   33f0c:	200583f0 	.word	0x200583f0
   33f10:	f4436823 	.word	0xf4436823
   33f14:	60233300 	.word	0x60233300
   33f18:	f91ef7f1 	.word	0xf91ef7f1
   33f1c:	30fff04f 	.word	0x30fff04f
   33f20:	e8bdb01f 	.word	0xe8bdb01f
   33f24:	201683f0 	.word	0x201683f0
   33f28:	f916f7f1 	.word	0xf916f7f1
   33f2c:	30fff04f 	.word	0x30fff04f
   33f30:	e8bdb01f 	.word	0xe8bdb01f
   33f34:	200983f0 	.word	0x200983f0
   33f38:	f90ef7f1 	.word	0xf90ef7f1
   33f3c:	30fff04f 	.word	0x30fff04f
   33f40:	2039e7a7 	.word	0x2039e7a7
   33f44:	f908f7f1 	.word	0xf908f7f1
   33f48:	30fff04f 	.word	0x30fff04f
   33f4c:	202de7a1 	.word	0x202de7a1
   33f50:	f902f7f1 	.word	0xf902f7f1
   33f54:	30fff04f 	.word	0x30fff04f
   33f58:	bf00e79b 	.word	0xbf00e79b
   33f5c:	49765443 	.word	0x49765443
   33f60:	20024c60 	.word	0x20024c60
   33f64:	2002a438 	.word	0x2002a438
   33f68:	20024c08 	.word	0x20024c08
   33f6c:	20031bf8 	.word	0x20031bf8

00033f70 <gnss_interface_read>:
   33f70:	4ff0e92d 	.word	0x4ff0e92d
   33f74:	b0b74c4a 	.word	0xb0b74c4a
   33f78:	f04042a0 	.word	0xf04042a0
   33f7c:	468881ec 	.word	0x468881ec
   33f80:	f0002900 	.word	0xf0002900
   33f84:	2ad781e2 	.word	0x2ad781e2
   33f88:	81dff240 	.word	0x81dff240
   33f8c:	46994d45 	.word	0x46994d45
   33f90:	b29b682b 	.word	0xb29b682b
   33f94:	d0042b04 	.word	0xd0042b04
   33f98:	b29b682b 	.word	0xb29b682b
   33f9c:	f0402b02 	.word	0xf0402b02
   33fa0:	210281e0 	.word	0x210281e0
   33fa4:	240020b6 	.word	0x240020b6
   33fa8:	f10d682b 	.word	0xf10d682b
   33fac:	f423020e 	.word	0xf423020e
   33fb0:	602b3380 	.word	0x602b3380
   33fb4:	a0f4f8df 	.word	0xa0f4f8df
   33fb8:	4f3bab08 	.word	0x4f3bab08
   33fbc:	90054e38 	.word	0x90054e38
   33fc0:	93049107 	.word	0x93049107
   33fc4:	ea099206 	.word	0xea099206
   33fc8:	f8da0b01 	.word	0xf8da0b01
   33fcc:	464a0000 	.word	0x464a0000
   33fd0:	a9046803 	.word	0xa9046803
   33fd4:	4798689b 	.word	0x4798689b
   33fd8:	da112800 	.word	0xda112800
   33fdc:	0f00f1bb 	.word	0x0f00f1bb
   33fe0:	682bd138 	.word	0x682bd138
   33fe4:	d4f003d8 	.word	0xd4f003d8
   33fe8:	e7eeb10c 	.word	0xe7eeb10c
   33fec:	4639b930 	.word	0x4639b930
   33ff0:	f7f14630 	.word	0xf7f14630
   33ff4:	682bf821 	.word	0x682bf821
   33ff8:	d5f703d9 	.word	0xd5f703d9
   33ffc:	e7e44604 	.word	0xe7e44604
   34000:	0202f244 	.word	0x0202f244
   34004:	300ef8bd 	.word	0x300ef8bd
   34008:	d0394293 	.word	0xd0394293
   3400c:	0201f244 	.word	0x0201f244
   34010:	d04d4293 	.word	0xd04d4293
   34014:	0203f244 	.word	0x0203f244
   34018:	f0404293 	.word	0xf0404293
   3401c:	22018196 	.word	0x22018196
   34020:	9b082414 	.word	0x9b082414
   34024:	2000f888 	.word	0x2000f888
   34028:	f8c89a09 	.word	0xf8c89a09
   3402c:	f8bd3008 	.word	0xf8bd3008
   34030:	e9c83028 	.word	0xe9c83028
   34034:	f8da2303 	.word	0xf8da2303
   34038:	68030000 	.word	0x68030000
   3403c:	479868db 	.word	0x479868db
   34040:	dd032800 	.word	0xdd032800
   34044:	f443682b 	.word	0xf443682b
   34048:	602b3380 	.word	0x602b3380
   3404c:	b0374620 	.word	0xb0374620
   34050:	8ff0e8bd 	.word	0x8ff0e8bd
   34054:	46031c42 	.word	0x46031c42
   34058:	b93cd1d2 	.word	0xb93cd1d2
   3405c:	2023461c 	.word	0x2023461c
   34060:	f87af7f1 	.word	0xf87af7f1
   34064:	b0374620 	.word	0xb0374620
   34068:	8ff0e8bd 	.word	0x8ff0e8bd
   3406c:	46209001 	.word	0x46209001
   34070:	f872f7f1 	.word	0xf872f7f1
   34074:	461c9b01 	.word	0x461c9b01
   34078:	b0374620 	.word	0xb0374620
   3407c:	8ff0e8bd 	.word	0x8ff0e8bd
   34080:	f00ca808 	.word	0xf00ca808
   34084:	2302fa7f 	.word	0x2302fa7f
   34088:	b2a41c44 	.word	0xb2a41c44
   3408c:	3b08f808 	.word	0x3b08f808
   34090:	a9084622 	.word	0xa9084622
   34094:	f7e54640 	.word	0xf7e54640
   34098:	3408ff0b 	.word	0x3408ff0b
   3409c:	bf00e7cb 	.word	0xbf00e7cb
   340a0:	49765443 	.word	0x49765443
   340a4:	20024c60 	.word	0x20024c60
   340a8:	20031bf8 	.word	0x20031bf8
   340ac:	20024c64 	.word	0x20024c64
   340b0:	a8092401 	.word	0xa8092401
   340b4:	e9c8c80f 	.word	0xe9c8c80f
   340b8:	e9c80102 	.word	0xe9c80102
   340bc:	990d2304 	.word	0x990d2304
   340c0:	f8889a0e 	.word	0xf8889a0e
   340c4:	9b0f4000 	.word	0x9b0f4000
   340c8:	1018f8c8 	.word	0x1018f8c8
   340cc:	f8c89910 	.word	0xf8c89910
   340d0:	f8c8201c 	.word	0xf8c8201c
   340d4:	f89d3020 	.word	0xf89d3020
   340d8:	f8dd205d 	.word	0xf8dd205d
   340dc:	f8c8304d 	.word	0xf8c8304d
   340e0:	f8dd1024 	.word	0xf8dd1024
   340e4:	f8881051 	.word	0xf8881051
   340e8:	f8dd2044 	.word	0xf8dd2044
   340ec:	f8c82055 	.word	0xf8c82055
   340f0:	f8dd3034 	.word	0xf8dd3034
   340f4:	f8c83059 	.word	0xf8c83059
   340f8:	f8bd1038 	.word	0xf8bd1038
   340fc:	f8c81044 	.word	0xf8c81044
   34100:	f8c8203c 	.word	0xf8c8203c
   34104:	f8dd3040 	.word	0xf8dd3040
   34108:	f89d2046 	.word	0xf89d2046
   3410c:	f8a8304a 	.word	0xf8a8304a
   34110:	f8881028 	.word	0xf8881028
   34114:	f8c8302e 	.word	0xf8c8302e
   34118:	f89d202a 	.word	0xf89d202a
   3411c:	f89d004b 	.word	0xf89d004b
   34120:	9b18204c 	.word	0x9b18204c
   34124:	406cf89d 	.word	0x406cf89d
   34128:	2002ea40 	.word	0x2002ea40
   3412c:	206bf89d 	.word	0x206bf89d
   34130:	210ff3c3 	.word	0x210ff3c3
   34134:	ea429b1d 	.word	0xea429b1d
   34138:	f8a82204 	.word	0xf8a82204
   3413c:	f8a80030 	.word	0xf8a80030
   34140:	f8bd104a 	.word	0xf8bd104a
   34144:	f3c3105e 	.word	0xf3c3105e
   34148:	f8a8230f 	.word	0xf8a8230f
   3414c:	f89d2056 	.word	0xf89d2056
   34150:	f8a82060 	.word	0xf8a82060
   34154:	f8dd3062 	.word	0xf8dd3062
   34158:	f8a83063 	.word	0xf8a83063
   3415c:	f8881046 	.word	0xf8881046
   34160:	f8bd2048 	.word	0xf8bd2048
   34164:	f89d2068 	.word	0xf89d2068
   34168:	f8c81067 	.word	0xf8c81067
   3416c:	f89d304c 	.word	0xf89d304c
   34170:	f888306a 	.word	0xf888306a
   34174:	f8a81050 	.word	0xf8a81050
   34178:	f8882052 	.word	0xf8882052
   3417c:	f8bd3054 	.word	0xf8bd3054
   34180:	f8dd3072 	.word	0xf8dd3072
   34184:	f89d106d 	.word	0xf89d106d
   34188:	f8c82071 	.word	0xf8c82071
   3418c:	f8881058 	.word	0xf8881058
   34190:	f89d205c 	.word	0xf89d205c
   34194:	f8dd1074 	.word	0xf8dd1074
   34198:	f8a82077 	.word	0xf8a82077
   3419c:	f89d305e 	.word	0xf89d305e
   341a0:	f888307b 	.word	0xf888307b
   341a4:	f8c81060 	.word	0xf8c81060
   341a8:	f8882064 	.word	0xf8882064
   341ac:	f89d3068 	.word	0xf89d3068
   341b0:	f89d3080 	.word	0xf89d3080
   341b4:	9a22107f 	.word	0x9a22107f
   341b8:	0094f89d 	.word	0x0094f89d
   341bc:	2103ea41 	.word	0x2103ea41
   341c0:	3093f89d 	.word	0x3093f89d
   341c4:	220ff3c2 	.word	0x220ff3c2
   341c8:	106ef8a8 	.word	0x106ef8a8
   341cc:	107cf8bd 	.word	0x107cf8bd
   341d0:	2300ea43 	.word	0x2300ea43
   341d4:	207af8a8 	.word	0x207af8a8
   341d8:	207ef89d 	.word	0x207ef89d
   341dc:	3086f8a8 	.word	0x3086f8a8
   341e0:	3081f8dd 	.word	0x3081f8dd
   341e4:	106af8a8 	.word	0x106af8a8
   341e8:	206cf888 	.word	0x206cf888
   341ec:	2086f8bd 	.word	0x2086f8bd
   341f0:	1085f89d 	.word	0x1085f89d
   341f4:	3070f8c8 	.word	0x3070f8c8
   341f8:	3088f89d 	.word	0x3088f89d
   341fc:	1074f888 	.word	0x1074f888
   34200:	2076f8a8 	.word	0x2076f8a8
   34204:	3078f888 	.word	0x3078f888
   34208:	3090f8bd 	.word	0x3090f8bd
   3420c:	108bf8dd 	.word	0x108bf8dd
   34210:	208ff89d 	.word	0x208ff89d
   34214:	107cf8c8 	.word	0x107cf8c8
   34218:	2080f888 	.word	0x2080f888
   3421c:	1092f89d 	.word	0x1092f89d
   34220:	2095f8dd 	.word	0x2095f8dd
   34224:	3082f8a8 	.word	0x3082f8a8
   34228:	3099f89d 	.word	0x3099f89d
   3422c:	1084f888 	.word	0x1084f888
   34230:	2088f8c8 	.word	0x2088f8c8
   34234:	308cf888 	.word	0x308cf888
   34238:	009af8bd 	.word	0x009af8bd
   3423c:	f89d9b27 	.word	0xf89d9b27
   34240:	f89d40a8 	.word	0xf89d40a8
   34244:	f3c320a7 	.word	0xf3c320a7
   34248:	9b2c210f 	.word	0x9b2c210f
   3424c:	2204ea42 	.word	0x2204ea42
   34250:	1092f8a8 	.word	0x1092f8a8
   34254:	109cf89d 	.word	0x109cf89d
   34258:	209ef8a8 	.word	0x209ef8a8
   3425c:	230ff3c3 	.word	0x230ff3c3
   34260:	209ff8dd 	.word	0x209ff8dd
   34264:	008ef8a8 	.word	0x008ef8a8
   34268:	30aaf8a8 	.word	0x30aaf8a8
   3426c:	1090f888 	.word	0x1090f888
   34270:	30a3f89d 	.word	0x30a3f89d
   34274:	10a4f8bd 	.word	0x10a4f8bd
   34278:	2094f8c8 	.word	0x2094f8c8
   3427c:	20a6f89d 	.word	0x20a6f89d
   34280:	3098f888 	.word	0x3098f888
   34284:	30a9f8dd 	.word	0x30a9f8dd
   34288:	109af8a8 	.word	0x109af8a8
   3428c:	209cf888 	.word	0x209cf888
   34290:	20aef8bd 	.word	0x20aef8bd
   34294:	10adf89d 	.word	0x10adf89d
   34298:	30a0f8c8 	.word	0x30a0f8c8
   3429c:	30b0f89d 	.word	0x30b0f89d
   342a0:	10a4f888 	.word	0x10a4f888
   342a4:	20a6f8a8 	.word	0x20a6f8a8
   342a8:	30a8f888 	.word	0x30a8f888
   342ac:	30b8f8bd 	.word	0x30b8f8bd
   342b0:	10b3f8dd 	.word	0x10b3f8dd
   342b4:	20b7f89d 	.word	0x20b7f89d
   342b8:	10acf8c8 	.word	0x10acf8c8
   342bc:	20b0f888 	.word	0x20b0f888
   342c0:	30b2f8a8 	.word	0x30b2f8a8
   342c4:	30bcf89d 	.word	0x30bcf89d
   342c8:	10bbf89d 	.word	0x10bbf89d
   342cc:	00d0f89d 	.word	0x00d0f89d
   342d0:	ea419a31 	.word	0xea419a31
   342d4:	f89d2103 	.word	0xf89d2103
   342d8:	f89d30cf 	.word	0xf89d30cf
   342dc:	ea4340ba 	.word	0xea4340ba
   342e0:	f3c22300 	.word	0xf3c22300
   342e4:	f8a8220f 	.word	0xf8a8220f
   342e8:	f8a810b6 	.word	0xf8a810b6
   342ec:	f88830ce 	.word	0xf88830ce
   342f0:	f8a840b4 	.word	0xf8a840b4
   342f4:	f8bd20c2 	.word	0xf8bd20c2
   342f8:	f89d20c2 	.word	0xf89d20c2
   342fc:	f89d10c1 	.word	0xf89d10c1
   34300:	f8dd30c4 	.word	0xf8dd30c4
   34304:	f88800bd 	.word	0xf88800bd
   34308:	f8a810bc 	.word	0xf8a810bc
   3430c:	f8c820be 	.word	0xf8c820be
   34310:	f88800b8 	.word	0xf88800b8
   34314:	f8bd30c0 	.word	0xf8bd30c0
   34318:	f8dd30cc 	.word	0xf8dd30cc
   3431c:	f89d10c7 	.word	0xf89d10c7
   34320:	f8c820cb 	.word	0xf8c820cb
   34324:	f88810c4 	.word	0xf88810c4
   34328:	f89d20c8 	.word	0xf89d20c8
   3432c:	f8dd10ce 	.word	0xf8dd10ce
   34330:	f8a820d1 	.word	0xf8a820d1
   34334:	f89d30ca 	.word	0xf89d30ca
   34338:	f88830d5 	.word	0xf88830d5
   3433c:	f8c810cc 	.word	0xf8c810cc
   34340:	f88820d0 	.word	0xf88820d0
   34344:	24d830d4 	.word	0x24d830d4
   34348:	2016e675 	.word	0x2016e675
   3434c:	ff04f7f0 	.word	0xff04f7f0
   34350:	34fff04f 	.word	0x34fff04f
   34354:	2009e67a 	.word	0x2009e67a
   34358:	fefef7f0 	.word	0xfefef7f0
   3435c:	34fff04f 	.word	0x34fff04f
   34360:	2039e674 	.word	0x2039e674
   34364:	fef8f7f0 	.word	0xfef8f7f0
   34368:	34fff04f 	.word	0x34fff04f
   3436c:	bf00e66e 	.word	0xbf00e66e

00034370 <gnss_interface_setopt>:
   34370:	47f0e92d 	.word	0x47f0e92d
   34374:	1402f241 	.word	0x1402f241
   34378:	b0864222 	.word	0xb0864222
   3437c:	d0044d9b 	.word	0xd0044d9b
   34380:	b2a4682c 	.word	0xb2a4682c
   34384:	f0402c02 	.word	0xf0402c02
   34388:	682c8104 	.word	0x682c8104
   3438c:	f1000264 	.word	0xf1000264
   34390:	f5b18127 	.word	0xf5b18127
   34394:	f0407f01 	.word	0xf0407f01
   34398:	4995811d 	.word	0x4995811d
   3439c:	f0404288 	.word	0xf0404288
   343a0:	3a018113 	.word	0x3a018113
   343a4:	f2002a08 	.word	0xf2002a08
   343a8:	e8df80ec 	.word	0xe8df80ec
   343ac:	0075f012 	.word	0x0075f012
   343b0:	00c200d8 	.word	0x00c200d8
   343b4:	008100cc 	.word	0x008100cc
   343b8:	0098008c 	.word	0x0098008c
   343bc:	000900af 	.word	0x000900af
   343c0:	2a019a0e 	.word	0x2a019a0e
   343c4:	80ddf040 	.word	0x80ddf040
   343c8:	1603f241 	.word	0x1603f241
   343cc:	46372240 	.word	0x46372240
   343d0:	9202781b 	.word	0x9202781b
   343d4:	3015f88d 	.word	0x3015f88d
   343d8:	2112682b 	.word	0x2112682b
   343dc:	0380f443 	.word	0x0380f443
   343e0:	602b4668 	.word	0x602b4668
   343e4:	fd26f7f8 	.word	0xfd26f7f8
   343e8:	98004604 	.word	0x98004604
   343ec:	f0402c00 	.word	0xf0402c00
   343f0:	280080d6 	.word	0x280080d6
   343f4:	80d3f000 	.word	0x80d3f000
   343f8:	f04f2212 	.word	0xf04f2212
   343fc:	f04f0876 	.word	0xf04f0876
   34400:	f04f0e49 	.word	0xf04f0e49
   34404:	f04f0a43 	.word	0xf04f0a43
   34408:	f8df0954 	.word	0xf8df0954
   3440c:	a906c1ec 	.word	0xa906c1ec
   34410:	3000f8bc 	.word	0x3000f8bc
   34414:	800ef880 	.word	0x800ef880
   34418:	b29b3301 	.word	0xb29b3301
   3441c:	4603ea46 	.word	0x4603ea46
   34420:	6d14f841 	.word	0x6d14f841
   34424:	71847144 	.word	0x71847144
   34428:	720471c4 	.word	0x720471c4
   3442c:	72847244 	.word	0x72847244
   34430:	710272c4 	.word	0x710272c4
   34434:	a00cf880 	.word	0xa00cf880
   34438:	900df880 	.word	0x900df880
   3443c:	e00ff880 	.word	0xe00ff880
   34440:	81b8f8df 	.word	0x81b8f8df
   34444:	f8ac6800 	.word	0xf8ac6800
   34448:	f7e53000 	.word	0xf7e53000
   3444c:	4639fd31 	.word	0x4639fd31
   34450:	f8c89800 	.word	0xf8c89800
   34454:	f7f84000 	.word	0xf7f84000
   34458:	2800fd01 	.word	0x2800fd01
   3445c:	80aaf040 	.word	0x80aaf040
   34460:	4e634f64 	.word	0x4e634f64
   34464:	46304639 	.word	0x46304639
   34468:	fde6f7f0 	.word	0xfde6f7f0
   3446c:	f414682c 	.word	0xf414682c
   34470:	d1f70480 	.word	0xd1f70480
   34474:	0000f8d8 	.word	0x0000f8d8
   34478:	f7f8b118 	.word	0xf7f8b118
   3447c:	f8c8fd0d 	.word	0xf8c8fd0d
   34480:	682b4000 	.word	0x682b4000
   34484:	d576021b 	.word	0xd576021b
   34488:	682b2000 	.word	0x682b2000
   3448c:	0300f423 	.word	0x0300f423
   34490:	b006602b 	.word	0xb006602b
   34494:	87f0e8bd 	.word	0x87f0e8bd
   34498:	2a029a0e 	.word	0x2a029a0e
   3449c:	2208d171 	.word	0x2208d171
   344a0:	1603f241 	.word	0x1603f241
   344a4:	9202881b 	.word	0x9202881b
   344a8:	300ff8ad 	.word	0x300ff8ad
   344ac:	e7934637 	.word	0xe7934637
   344b0:	2a019a0e 	.word	0x2a019a0e
   344b4:	f241d165 	.word	0xf241d165
   344b8:	781b1603 	.word	0x781b1603
   344bc:	f88d9202 	.word	0xf88d9202
   344c0:	4637300c 	.word	0x4637300c
   344c4:	9a0ee788 	.word	0x9a0ee788
   344c8:	d15a2a01 	.word	0xd15a2a01
   344cc:	f2412202 	.word	0xf2412202
   344d0:	781b1603 	.word	0x781b1603
   344d4:	f88d9202 	.word	0xf88d9202
   344d8:	4637300d 	.word	0x4637300d
   344dc:	682ae77c 	.word	0x682ae77c
   344e0:	2a02b292 	.word	0x2a02b292
   344e4:	9a0ed155 	.word	0x9a0ed155
   344e8:	d14a2a04 	.word	0xd14a2a04
   344ec:	f2412101 	.word	0xf2412101
   344f0:	682a0604 	.word	0x682a0604
   344f4:	0c136818 	.word	0x0c136818
   344f8:	f043041b 	.word	0xf043041b
   344fc:	f8cd0303 	.word	0xf8cd0303
   34500:	602b0009 	.word	0x602b0009
   34504:	1008f88d 	.word	0x1008f88d
   34508:	e7654637 	.word	0xe7654637
   3450c:	b29b682b 	.word	0xb29b682b
   34510:	d13e2b04 	.word	0xd13e2b04
   34514:	f2412300 	.word	0xf2412300
   34518:	f88d0604 	.word	0xf88d0604
   3451c:	f88d3008 	.word	0xf88d3008
   34520:	f88d3009 	.word	0xf88d3009
   34524:	f88d300a 	.word	0xf88d300a
   34528:	f88d300b 	.word	0xf88d300b
   3452c:	4637300c 	.word	0x4637300c
   34530:	9a0ee752 	.word	0x9a0ee752
   34534:	d1242a01 	.word	0xd1242a01
   34538:	2b01781b 	.word	0x2b01781b
   3453c:	f241d121 	.word	0xf241d121
   34540:	46371603 	.word	0x46371603
   34544:	9a0ee748 	.word	0x9a0ee748
   34548:	d11a2a02 	.word	0xd11a2a02
   3454c:	f2412220 	.word	0xf2412220
   34550:	881b1603 	.word	0x881b1603
   34554:	f8ad9202 	.word	0xf8ad9202
   34558:	46373013 	.word	0x46373013
   3455c:	9a0ee73c 	.word	0x9a0ee73c
   34560:	d10e2a02 	.word	0xd10e2a02
   34564:	f2412210 	.word	0xf2412210
   34568:	881b1603 	.word	0x881b1603
   3456c:	f8ad9202 	.word	0xf8ad9202
   34570:	46373011 	.word	0x46373011
   34574:	200ee730 	.word	0x200ee730
   34578:	fdeef7f0 	.word	0xfdeef7f0
   3457c:	30fff04f 	.word	0x30fff04f
   34580:	2016e783 	.word	0x2016e783
   34584:	fde8f7f0 	.word	0xfde8f7f0
   34588:	30fff04f 	.word	0x30fff04f
   3458c:	e8bdb006 	.word	0xe8bdb006
   34590:	200e87f0 	.word	0x200e87f0
   34594:	fde0f7f0 	.word	0xfde0f7f0
   34598:	30fff04f 	.word	0x30fff04f
   3459c:	6803e779 	.word	0x6803e779
   345a0:	4618b11b 	.word	0x4618b11b
   345a4:	fc78f7f8 	.word	0xfc78f7f8
   345a8:	f7f89800 	.word	0xf7f89800
   345ac:	2023fc6d 	.word	0x2023fc6d
   345b0:	fdd2f7f0 	.word	0xfdd2f7f0
   345b4:	200e682b 	.word	0x200e682b
   345b8:	0380f423 	.word	0x0380f423
   345bc:	f7f0602b 	.word	0xf7f0602b
   345c0:	f04ffdcb 	.word	0xf04ffdcb
   345c4:	e76430ff 	.word	0xe76430ff
   345c8:	f7f02009 	.word	0xf7f02009
   345cc:	f04ffdc5 	.word	0xf04ffdc5
   345d0:	e75e30ff 	.word	0xe75e30ff
   345d4:	f7f0202a 	.word	0xf7f0202a
   345d8:	f04ffdbf 	.word	0xf04ffdbf
   345dc:	e75830ff 	.word	0xe75830ff
   345e0:	f7f02073 	.word	0xf7f02073
   345e4:	f04ffdb9 	.word	0xf04ffdb9
   345e8:	e75230ff 	.word	0xe75230ff
   345ec:	20024c60 	.word	0x20024c60
   345f0:	49765443 	.word	0x49765443
   345f4:	20031bf8 	.word	0x20031bf8
   345f8:	2002a438 	.word	0x2002a438
   345fc:	20024c08 	.word	0x20024c08

00034600 <gnss_interface_getopt>:
   34600:	4ff0e92d 	.word	0x4ff0e92d
   34604:	b0874c81 	.word	0xb0874c81
   34608:	46986825 	.word	0x46986825
   3460c:	2d02b2ad 	.word	0x2d02b2ad
   34610:	f0409b10 	.word	0xf0409b10
   34614:	682580dc 	.word	0x682580dc
   34618:	f10003ee 	.word	0xf10003ee
   3461c:	682580f0 	.word	0x682580f0
   34620:	f10001ed 	.word	0xf10001ed
   34624:	f5b180e6 	.word	0xf5b180e6
   34628:	f0407f01 	.word	0xf0407f01
   3462c:	497880d6 	.word	0x497880d6
   34630:	f0404288 	.word	0xf0404288
   34634:	f1b880d8 	.word	0xf1b880d8
   34638:	d00b0f00 	.word	0xd00b0f00
   3463c:	1e57b153 	.word	0x1e57b153
   34640:	d8072f05 	.word	0xd8072f05
   34644:	f007e8df 	.word	0xf007e8df
   34648:	0f030f0f 	.word	0x0f030f0f
   3464c:	681b0303 	.word	0x681b0303
   34650:	d00b2b01 	.word	0xd00b2b01
   34654:	f7f02016 	.word	0xf7f02016
   34658:	f04ffd7f 	.word	0xf04ffd7f
   3465c:	462835ff 	.word	0x462835ff
   34660:	e8bdb007 	.word	0xe8bdb007
   34664:	681b8ff0 	.word	0x681b8ff0
   34668:	d1f32b02 	.word	0xd1f32b02
   3466c:	22126823 	.word	0x22126823
   34670:	7380f043 	.word	0x7380f043
   34674:	a8012100 	.word	0xa8012100
   34678:	f00b6023 	.word	0xf00b6023
   3467c:	2112fb67 	.word	0x2112fb67
   34680:	f7f84668 	.word	0xf7f84668
   34684:	4605fbd7 	.word	0x4605fbd7
   34688:	2d009800 	.word	0x2d009800
   3468c:	808af040 	.word	0x808af040
   34690:	f0002800 	.word	0xf0002800
   34694:	f2418087 	.word	0xf2418087
   34698:	f04f1602 	.word	0xf04f1602
   3469c:	22120e49 	.word	0x22120e49
   346a0:	0976f04f 	.word	0x0976f04f
   346a4:	0b43f04f 	.word	0x0b43f04f
   346a8:	0a54f04f 	.word	0x0a54f04f
   346ac:	c168f8df 	.word	0xc168f8df
   346b0:	e00ff880 	.word	0xe00ff880
   346b4:	3000f8bc 	.word	0x3000f8bc
   346b8:	900ef880 	.word	0x900ef880
   346bc:	b29b3301 	.word	0xb29b3301
   346c0:	4e03ea46 	.word	0x4e03ea46
   346c4:	e004f8cd 	.word	0xe004f8cd
   346c8:	71857145 	.word	0x71857145
   346cc:	720571c5 	.word	0x720571c5
   346d0:	72857245 	.word	0x72857245
   346d4:	a90172c5 	.word	0xa90172c5
   346d8:	f8807102 	.word	0xf8807102
   346dc:	f880b00c 	.word	0xf880b00c
   346e0:	f8dfa00d 	.word	0xf8dfa00d
   346e4:	68009138 	.word	0x68009138
   346e8:	3000f8ac 	.word	0x3000f8ac
   346ec:	fbe0f7e5 	.word	0xfbe0f7e5
   346f0:	98004631 	.word	0x98004631
   346f4:	5000f8c9 	.word	0x5000f8c9
   346f8:	fbb0f7f8 	.word	0xfbb0f7f8
   346fc:	d15c2800 	.word	0xd15c2800
   34700:	4d434e44 	.word	0x4d434e44
   34704:	46284631 	.word	0x46284631
   34708:	fc96f7f0 	.word	0xfc96f7f0
   3470c:	01db6823 	.word	0x01db6823
   34710:	f8d9d4f8 	.word	0xf8d9d4f8
   34714:	b1d80000 	.word	0xb1d80000
   34718:	f0156825 	.word	0xf0156825
   3471c:	d00f7500 	.word	0xd00f7500
   34720:	d8372f05 	.word	0xd8372f05
   34724:	f007e8df 	.word	0xf007e8df
   34728:	2b26201a 	.word	0x2b26201a
   3472c:	25000331 	.word	0x25000331
   34730:	f8887b43 	.word	0xf8887b43
   34734:	f7f83000 	.word	0xf7f83000
   34738:	2300fbaf 	.word	0x2300fbaf
   3473c:	3000f8c9 	.word	0x3000f8c9
   34740:	f0236823 	.word	0xf0236823
   34744:	60237300 	.word	0x60237300
   34748:	b0074628 	.word	0xb0074628
   3474c:	8ff0e8bd 	.word	0x8ff0e8bd
   34750:	46056823 	.word	0x46056823
   34754:	7300f023 	.word	0x7300f023
   34758:	e7f56023 	.word	0xe7f56023
   3475c:	300ff8b0 	.word	0x300ff8b0
   34760:	f8a82500 	.word	0xf8a82500
   34764:	e7e63000 	.word	0xe7e63000
   34768:	3011f8b0 	.word	0x3011f8b0
   3476c:	f8a82500 	.word	0xf8a82500
   34770:	e7e03000 	.word	0xe7e03000
   34774:	25007b83 	.word	0x25007b83
   34778:	3000f888 	.word	0x3000f888
   3477c:	f8b0e7db 	.word	0xf8b0e7db
   34780:	25003013 	.word	0x25003013
   34784:	3000f8a8 	.word	0x3000f8a8
   34788:	7b03e7d5 	.word	0x7b03e7d5
   3478c:	f8882500 	.word	0xf8882500
   34790:	e7d03000 	.word	0xe7d03000
   34794:	f7f02016 	.word	0xf7f02016
   34798:	f04ffcdf 	.word	0xf04ffcdf
   3479c:	f8d935ff 	.word	0xf8d935ff
   347a0:	e7c80000 	.word	0xe7c80000
   347a4:	b11b6803 	.word	0xb11b6803
   347a8:	f7f84618 	.word	0xf7f84618
   347ac:	9800fb75 	.word	0x9800fb75
   347b0:	fb6af7f8 	.word	0xfb6af7f8
   347b4:	f7f02023 	.word	0xf7f02023
   347b8:	6823fccf 	.word	0x6823fccf
   347bc:	f023200e 	.word	0xf023200e
   347c0:	60237380 	.word	0x60237380
   347c4:	35fff04f 	.word	0x35fff04f
   347c8:	fcc6f7f0 	.word	0xfcc6f7f0
   347cc:	200ee747 	.word	0x200ee747
   347d0:	fcc2f7f0 	.word	0xfcc2f7f0
   347d4:	35fff04f 	.word	0x35fff04f
   347d8:	202ae741 	.word	0x202ae741
   347dc:	fcbcf7f0 	.word	0xfcbcf7f0
   347e0:	35fff04f 	.word	0x35fff04f
   347e4:	2009e73b 	.word	0x2009e73b
   347e8:	fcb6f7f0 	.word	0xfcb6f7f0
   347ec:	35fff04f 	.word	0x35fff04f
   347f0:	2073e735 	.word	0x2073e735
   347f4:	fcb0f7f0 	.word	0xfcb0f7f0
   347f8:	35fff04f 	.word	0x35fff04f
   347fc:	2005e72f 	.word	0x2005e72f
   34800:	fcaaf7f0 	.word	0xfcaaf7f0
   34804:	35fff04f 	.word	0x35fff04f
   34808:	bf00e729 	.word	0xbf00e729
   3480c:	20024c60 	.word	0x20024c60
   34810:	49765443 	.word	0x49765443
   34814:	20031bf8 	.word	0x20031bf8
   34818:	2002a438 	.word	0x2002a438
   3481c:	20024c08 	.word	0x20024c08

00034820 <gnss_interface_init>:
   34820:	b5382100 	.word	0xb5382100
   34824:	4d0a4c09 	.word	0x4d0a4c09
   34828:	480a6822 	.word	0x480a6822
   3482c:	402a4b0a 	.word	0x402a4b0a
   34830:	80016022 	.word	0x80016022
   34834:	f7f86019 	.word	0xf7f86019
   34838:	b928faf7 	.word	0xb928faf7
   3483c:	402b6823 	.word	0x402b6823
   34840:	0301f043 	.word	0x0301f043
   34844:	bd386023 	.word	0xbd386023
   34848:	bd382003 	.word	0xbd382003
   3484c:	20024c60 	.word	0x20024c60
   34850:	ffff0000 	.word	0xffff0000
   34854:	2002a438 	.word	0x2002a438
   34858:	20024c08 	.word	0x20024c08

0003485c <gnss_interface_open>:
   3485c:	b5102801 	.word	0xb5102801
   34860:	f5b2d120 	.word	0xf5b2d120
   34864:	d11d7f01 	.word	0xd11d7f01
   34868:	d11b2902 	.word	0xd11b2902
   3486c:	68234c13 	.word	0x68234c13
   34870:	2b01b29b 	.word	0x2b01b29b
   34874:	6823d11c 	.word	0x6823d11c
   34878:	0c1b4608 	.word	0x0c1b4608
   3487c:	f043041b 	.word	0xf043041b
   34880:	22000302 	.word	0x22000302
   34884:	6023490e 	.word	0x6023490e
   34888:	fbacf7fa 	.word	0xfbacf7fa
   3488c:	60104a0d 	.word	0x60104a0d
   34890:	6823b170 	.word	0x6823b170
   34894:	f4436802 	.word	0xf4436802
   34898:	68123300 	.word	0x68123300
   3489c:	47906023 	.word	0x47906023
   348a0:	bd104809 	.word	0xbd104809
   348a4:	f7f02016 	.word	0xf7f02016
   348a8:	f04ffc57 	.word	0xf04ffc57
   348ac:	bd1030ff 	.word	0xbd1030ff
   348b0:	f7f0200e 	.word	0xf7f0200e
   348b4:	f04ffc51 	.word	0xf04ffc51
   348b8:	bd1030ff 	.word	0xbd1030ff
   348bc:	20024c60 	.word	0x20024c60
   348c0:	0002d049 	.word	0x0002d049
   348c4:	20024c64 	.word	0x20024c64
   348c8:	49765443 	.word	0x49765443

000348cc <gnss_interface_close>:
   348cc:	4b13b530 	.word	0x4b13b530
   348d0:	4298b083 	.word	0x4298b083
   348d4:	4c12d11c 	.word	0x4c12d11c
   348d8:	b29b6823 	.word	0xb29b6823
   348dc:	d00f2b04 	.word	0xd00f2b04
   348e0:	68284d10 	.word	0x68284d10
   348e4:	f7fab118 	.word	0xf7fab118
   348e8:	2300fb9d 	.word	0x2300fb9d
   348ec:	2000602b 	.word	0x2000602b
   348f0:	0c1b6823 	.word	0x0c1b6823
   348f4:	f043041b 	.word	0xf043041b
   348f8:	60230301 	.word	0x60230301
   348fc:	bd30b003 	.word	0xbd30b003
   34900:	22082300 	.word	0x22082300
   34904:	f44f9300 	.word	0xf44f9300
   34908:	f7f97101 	.word	0xf7f97101
   3490c:	e7e7fa7b 	.word	0xe7e7fa7b
   34910:	f7f02009 	.word	0xf7f02009
   34914:	f04ffc21 	.word	0xf04ffc21
   34918:	e7ef30ff 	.word	0xe7ef30ff
   3491c:	49765443 	.word	0x49765443
   34920:	20024c60 	.word	0x20024c60
   34924:	20024c64 	.word	0x20024c64

00034928 <rpc_dfu_event_handler>:
   34928:	4a08b508 	.word	0x4a08b508
   3492c:	881268c1 	.word	0x881268c1
   34930:	ebb24603 	.word	0xebb24603
   34934:	d0054f11 	.word	0xd0054f11
   34938:	b1106800 	.word	0xb1106800
   3493c:	f838f004 	.word	0xf838f004
   34940:	bd082000 	.word	0xbd082000
   34944:	20014a02 	.word	0x20014a02
   34948:	bd086013 	.word	0xbd086013
   3494c:	2002a43a 	.word	0x2002a43a
   34950:	20024c0c 	.word	0x20024c0c

00034954 <mfu_interface_init>:
   34954:	b5102300 	.word	0xb5102300
   34958:	49094808 	.word	0x49094808
   3495c:	4c0a4a09 	.word	0x4c0a4a09
   34960:	600b8003 	.word	0x600b8003
   34964:	60236013 	.word	0x60236013
   34968:	ffecf003 	.word	0xffecf003
   3496c:	2301b910 	.word	0x2301b910
   34970:	bd106023 	.word	0xbd106023
   34974:	30fff04f 	.word	0x30fff04f
   34978:	bf00bd10 	.word	0xbf00bd10
   3497c:	2002a43a 	.word	0x2002a43a
   34980:	20024c0c 	.word	0x20024c0c
   34984:	20024c70 	.word	0x20024c70
   34988:	20024c68 	.word	0x20024c68

0003498c <mfu_interface_open>:
   3498c:	b5082801 	.word	0xb5082801
   34990:	f240d10b 	.word	0xf240d10b
   34994:	429a2303 	.word	0x429a2303
   34998:	4b09d107 	.word	0x4b09d107
   3499c:	2a01681a 	.word	0x2a01681a
   349a0:	2202d109 	.word	0x2202d109
   349a4:	4807601a 	.word	0x4807601a
   349a8:	2016bd08 	.word	0x2016bd08
   349ac:	fbd4f7f0 	.word	0xfbd4f7f0
   349b0:	30fff04f 	.word	0x30fff04f
   349b4:	f7f0bd08 	.word	0xf7f0bd08
   349b8:	f04ffbcf 	.word	0xf04ffbcf
   349bc:	bd0830ff 	.word	0xbd0830ff
   349c0:	20024c68 	.word	0x20024c68
   349c4:	49765432 	.word	0x49765432

000349c8 <mfu_interface_close>:
   349c8:	4c32b5f0 	.word	0x4c32b5f0
   349cc:	6823b083 	.word	0x6823b083
   349d0:	2a011e9a 	.word	0x2a011e9a
   349d4:	2b03d857 	.word	0x2b03d857
   349d8:	2301d004 	.word	0x2301d004
   349dc:	60232000 	.word	0x60232000
   349e0:	bdf0b003 	.word	0xbdf0b003
   349e4:	46682100 	.word	0x46682100
   349e8:	ffb2f003 	.word	0xffb2f003
   349ec:	28004603 	.word	0x28004603
   349f0:	2104d13d 	.word	0x2104d13d
   349f4:	98004e28 	.word	0x98004e28
   349f8:	72018832 	.word	0x72018832
   349fc:	b2923201 	.word	0xb2923201
   34a00:	f0410411 	.word	0xf0410411
   34a04:	4d250106 	.word	0x4d250106
   34a08:	710360c1 	.word	0x710360c1
   34a0c:	71837143 	.word	0x71837143
   34a10:	724371c3 	.word	0x724371c3
   34a14:	72c37283 	.word	0x72c37283
   34a18:	80322106 	.word	0x80322106
   34a1c:	f003602b 	.word	0xf003602b
   34a20:	b9d8ffab 	.word	0xb9d8ffab
   34a24:	33fff04f 	.word	0x33fff04f
   34a28:	4627ae02 	.word	0x4627ae02
   34a2c:	3d04f846 	.word	0x3d04f846
   34a30:	4631e004 	.word	0x4631e004
   34a34:	f7f04638 	.word	0xf7f04638
   34a38:	b9f0faff 	.word	0xb9f0faff
   34a3c:	28006828 	.word	0x28006828
   34a40:	6905d0f7 	.word	0x6905d0f7
   34a44:	ffacf003 	.word	0xffacf003
   34a48:	d0c62d00 	.word	0xd0c62d00
   34a4c:	20084b14 	.word	0x20084b14
   34a50:	f7f0601d 	.word	0xf7f0601d
   34a54:	f04ffb81 	.word	0xf04ffb81
   34a58:	e7c130ff 	.word	0xe7c130ff
   34a5c:	68039800 	.word	0x68039800
   34a60:	4618b11b 	.word	0x4618b11b
   34a64:	ffa4f003 	.word	0xffa4f003
   34a68:	f0039800 	.word	0xf0039800
   34a6c:	200cff99 	.word	0x200cff99
   34a70:	fb72f7f0 	.word	0xfb72f7f0
   34a74:	30fff04f 	.word	0x30fff04f
   34a78:	203ce7b2 	.word	0x203ce7b2
   34a7c:	fb6cf7f0 	.word	0xfb6cf7f0
   34a80:	30fff04f 	.word	0x30fff04f
   34a84:	2001e7ac 	.word	0x2001e7ac
   34a88:	fb66f7f0 	.word	0xfb66f7f0
   34a8c:	30fff04f 	.word	0x30fff04f
   34a90:	bf00e7a6 	.word	0xbf00e7a6
   34a94:	20024c68 	.word	0x20024c68
   34a98:	2002a43a 	.word	0x2002a43a
   34a9c:	20024c0c 	.word	0x20024c0c
   34aa0:	20024c6c 	.word	0x20024c6c

00034aa4 <mfu_interface_sendto>:
   34aa4:	47f0e92d 	.word	0x47f0e92d
   34aa8:	46154e5a 	.word	0x46154e5a
   34aac:	b0826833 	.word	0xb0826833
   34ab0:	2a011e9a 	.word	0x2a011e9a
   34ab4:	80a7f200 	.word	0x80a7f200
   34ab8:	2900460f 	.word	0x2900460f
   34abc:	809df000 	.word	0x809df000
   34ac0:	f0002d00 	.word	0xf0002d00
   34ac4:	2b02809a 	.word	0x2b02809a
   34ac8:	d04e46e8 	.word	0xd04e46e8
   34acc:	46294640 	.word	0x46294640
   34ad0:	ff3ef003 	.word	0xff3ef003
   34ad4:	b1404606 	.word	0xb1404606
   34ad8:	f7f0200c 	.word	0xf7f0200c
   34adc:	f04ffb3d 	.word	0xf04ffb3d
   34ae0:	462835ff 	.word	0x462835ff
   34ae4:	e8bdb002 	.word	0xe8bdb002
   34ae8:	9b0087f0 	.word	0x9b0087f0
   34aec:	68184639 	.word	0x68184639
   34af0:	f7e5462a 	.word	0xf7e5462a
   34af4:	2104f9dd 	.word	0x2104f9dd
   34af8:	98004c47 	.word	0x98004c47
   34afc:	60458823 	.word	0x60458823
   34b00:	b29b3301 	.word	0xb29b3301
   34b04:	8023041a 	.word	0x8023041a
   34b08:	4c44430a 	.word	0x4c44430a
   34b0c:	724660c2 	.word	0x724660c2
   34b10:	72c67286 	.word	0x72c67286
   34b14:	60267201 	.word	0x60267201
   34b18:	ff2ef003 	.word	0xff2ef003
   34b1c:	d1622800 	.word	0xd1622800
   34b20:	33fff04f 	.word	0x33fff04f
   34b24:	4f3bae02 	.word	0x4f3bae02
   34b28:	3d04f846 	.word	0x3d04f846
   34b2c:	4631e004 	.word	0x4631e004
   34b30:	f7f04638 	.word	0xf7f04638
   34b34:	b978fa81 	.word	0xb978fa81
   34b38:	28006820 	.word	0x28006820
   34b3c:	6904d0f7 	.word	0x6904d0f7
   34b40:	ff2ef003 	.word	0xff2ef003
   34b44:	d0cc2c00 	.word	0xd0cc2c00
   34b48:	20084b35 	.word	0x20084b35
   34b4c:	f04f601c 	.word	0xf04f601c
   34b50:	f7f035ff 	.word	0xf7f035ff
   34b54:	e7c4fb01 	.word	0xe7c4fb01
   34b58:	35fff04f 	.word	0x35fff04f
   34b5c:	f7f0203c 	.word	0xf7f0203c
   34b60:	4628fafb 	.word	0x4628fafb
   34b64:	e8bdb002 	.word	0xe8bdb002
   34b68:	464087f0 	.word	0x464087f0
   34b6c:	f0032100 	.word	0xf0032100
   34b70:	4602feef 	.word	0x4602feef
   34b74:	d1af2800 	.word	0xd1af2800
   34b78:	0c08f04f 	.word	0x0c08f04f
   34b7c:	48294926 	.word	0x48294926
   34b80:	6804880b 	.word	0x6804880b
   34b84:	98003301 	.word	0x98003301
   34b88:	800bb29b 	.word	0x800bb29b
   34b8c:	f043041b 	.word	0xf043041b
   34b90:	61040303 	.word	0x61040303
   34b94:	60c34c21 	.word	0x60c34c21
   34b98:	71427102 	.word	0x71427102
   34b9c:	71c27182 	.word	0x71c27182
   34ba0:	72827242 	.word	0x72827242
   34ba4:	f88072c2 	.word	0xf88072c2
   34ba8:	2103c008 	.word	0x2103c008
   34bac:	f0036022 	.word	0xf0036022
   34bb0:	b9c0fee3 	.word	0xb9c0fee3
   34bb4:	33fff04f 	.word	0x33fff04f
   34bb8:	0908f10d 	.word	0x0908f10d
   34bbc:	3d04f849 	.word	0x3d04f849
   34bc0:	e00546b2 	.word	0xe00546b2
   34bc4:	46504649 	.word	0x46504649
   34bc8:	fa36f7f0 	.word	0xfa36f7f0
   34bcc:	d1c32800 	.word	0xd1c32800
   34bd0:	28006820 	.word	0x28006820
   34bd4:	6904d0f6 	.word	0x6904d0f6
   34bd8:	fee2f003 	.word	0xfee2f003
   34bdc:	d1b32c00 	.word	0xd1b32c00
   34be0:	60332303 	.word	0x60332303
   34be4:	9800e772 	.word	0x9800e772
   34be8:	b11b6803 	.word	0xb11b6803
   34bec:	f0034618 	.word	0xf0034618
   34bf0:	9800fedf 	.word	0x9800fedf
   34bf4:	fed4f003 	.word	0xfed4f003
   34bf8:	2016e76e 	.word	0x2016e76e
   34bfc:	faacf7f0 	.word	0xfaacf7f0
   34c00:	35fff04f 	.word	0x35fff04f
   34c04:	2001e76d 	.word	0x2001e76d
   34c08:	faa6f7f0 	.word	0xfaa6f7f0
   34c0c:	35fff04f 	.word	0x35fff04f
   34c10:	bf00e767 	.word	0xbf00e767
   34c14:	20024c68 	.word	0x20024c68
   34c18:	2002a43a 	.word	0x2002a43a
   34c1c:	20024c0c 	.word	0x20024c0c
   34c20:	20024c6c 	.word	0x20024c6c
   34c24:	20024c70 	.word	0x20024c70

00034c28 <mfu_interface_setopt>:
   34c28:	4846b5f0 	.word	0x4846b5f0
   34c2c:	6800b083 	.word	0x6800b083
   34c30:	28013802 	.word	0x28013802
   34c34:	f240d877 	.word	0xf240d877
   34c38:	42812003 	.word	0x42812003
   34c3c:	3a04d16d 	.word	0x3a04d16d
   34c40:	d85c2a03 	.word	0xd85c2a03
   34c44:	f002e8df 	.word	0xf002e8df
   34c48:	514e024b 	.word	0x514e024b
   34c4c:	46252407 	.word	0x46252407
   34c50:	46682100 	.word	0x46682100
   34c54:	fe7cf003 	.word	0xfe7cf003
   34c58:	28004603 	.word	0x28004603
   34c5c:	2704d138 	.word	0x2704d138
   34c60:	98004e39 	.word	0x98004e39
   34c64:	46298832 	.word	0x46298832
   34c68:	b2923201 	.word	0xb2923201
   34c6c:	4502ea44 	.word	0x4502ea44
   34c70:	60c54c36 	.word	0x60c54c36
   34c74:	71437103 	.word	0x71437103
   34c78:	71c37183 	.word	0x71c37183
   34c7c:	72837243 	.word	0x72837243
   34c80:	720772c3 	.word	0x720772c3
   34c84:	60238032 	.word	0x60238032
   34c88:	fe76f003 	.word	0xfe76f003
   34c8c:	f04fb9b8 	.word	0xf04fb9b8
   34c90:	ad0233ff 	.word	0xad0233ff
   34c94:	f8454e2b 	.word	0xf8454e2b
   34c98:	e0053d04 	.word	0xe0053d04
   34c9c:	46304629 	.word	0x46304629
   34ca0:	f9caf7f0 	.word	0xf9caf7f0
   34ca4:	d1312800 	.word	0xd1312800
   34ca8:	28006820 	.word	0x28006820
   34cac:	6904d0f6 	.word	0x6904d0f6
   34cb0:	fe76f003 	.word	0xfe76f003
   34cb4:	d13c2c00 	.word	0xd13c2c00
   34cb8:	b0034620 	.word	0xb0034620
   34cbc:	9800bdf0 	.word	0x9800bdf0
   34cc0:	b11b6803 	.word	0xb11b6803
   34cc4:	f0034618 	.word	0xf0034618
   34cc8:	9800fe73 	.word	0x9800fe73
   34ccc:	fe68f003 	.word	0xfe68f003
   34cd0:	f7f0200c 	.word	0xf7f0200c
   34cd4:	f04ffa41 	.word	0xf04ffa41
   34cd8:	b00330ff 	.word	0xb00330ff
   34cdc:	2405bdf0 	.word	0x2405bdf0
   34ce0:	e7b54625 	.word	0xe7b54625
   34ce4:	46252408 	.word	0x46252408
   34ce8:	b1b3e7b2 	.word	0xb1b3e7b2
   34cec:	2a049a08 	.word	0x2a049a08
   34cf0:	2000d113 	.word	0x2000d113
   34cf4:	4b16681a 	.word	0x4b16681a
   34cf8:	b003601a 	.word	0xb003601a
   34cfc:	202abdf0 	.word	0x202abdf0
   34d00:	fa2af7f0 	.word	0xfa2af7f0
   34d04:	30fff04f 	.word	0x30fff04f
   34d08:	bdf0b003 	.word	0xbdf0b003
   34d0c:	f7f0203c 	.word	0xf7f0203c
   34d10:	f04ffa23 	.word	0xf04ffa23
   34d14:	b00330ff 	.word	0xb00330ff
   34d18:	2016bdf0 	.word	0x2016bdf0
   34d1c:	fa1cf7f0 	.word	0xfa1cf7f0
   34d20:	30fff04f 	.word	0x30fff04f
   34d24:	2001e7c9 	.word	0x2001e7c9
   34d28:	fa16f7f0 	.word	0xfa16f7f0
   34d2c:	30fff04f 	.word	0x30fff04f
   34d30:	4b08e7c3 	.word	0x4b08e7c3
   34d34:	601c2008 	.word	0x601c2008
   34d38:	fa0ef7f0 	.word	0xfa0ef7f0
   34d3c:	30fff04f 	.word	0x30fff04f
   34d40:	bf00e7bb 	.word	0xbf00e7bb
   34d44:	20024c68 	.word	0x20024c68
   34d48:	2002a43a 	.word	0x2002a43a
   34d4c:	20024c0c 	.word	0x20024c0c
   34d50:	20024c70 	.word	0x20024c70
   34d54:	20024c6c 	.word	0x20024c6c

00034d58 <mfu_interface_getopt>:
   34d58:	2003f240 	.word	0x2003f240
   34d5c:	41f0e92d 	.word	0x41f0e92d
   34d60:	b0824281 	.word	0xb0824281
   34d64:	f0409e08 	.word	0xf0409e08
   34d68:	461d80ae 	.word	0x461d80ae
   34d6c:	f0002b00 	.word	0xf0002b00
   34d70:	2e0080aa 	.word	0x2e0080aa
   34d74:	80a7f000 	.word	0x80a7f000
   34d78:	681b4b5e 	.word	0x681b4b5e
   34d7c:	2b013b02 	.word	0x2b013b02
   34d80:	80a7f200 	.word	0x80a7f200
   34d84:	2a133a01 	.word	0x2a133a01
   34d88:	e8dfd879 	.word	0xe8dfd879
   34d8c:	5f17f002 	.word	0x5f17f002
   34d90:	78787878 	.word	0x78787878
   34d94:	78787872 	.word	0x78787872
   34d98:	78787878 	.word	0x78787878
   34d9c:	78787878 	.word	0x78787878
   34da0:	68330a78 	.word	0x68330a78
   34da4:	f0402b04 	.word	0xf0402b04
   34da8:	2200808e 	.word	0x2200808e
   34dac:	4b524610 	.word	0x4b524610
   34db0:	601a6819 	.word	0x601a6819
   34db4:	b0026029 	.word	0xb0026029
   34db8:	81f0e8bd 	.word	0x81f0e8bd
   34dbc:	2b246833 	.word	0x2b246833
   34dc0:	8081f040 	.word	0x8081f040
   34dc4:	46a02401 	.word	0x46a02401
   34dc8:	46682100 	.word	0x46682100
   34dcc:	fdc0f003 	.word	0xfdc0f003
   34dd0:	d1462800 	.word	0xd1462800
   34dd4:	9b004949 	.word	0x9b004949
   34dd8:	f1b8880a 	.word	0xf1b8880a
   34ddc:	f1020f03 	.word	0xf1020f03
   34de0:	b2920201 	.word	0xb2920201
   34de4:	4402ea44 	.word	0x4402ea44
   34de8:	800a7118 	.word	0x800a7118
   34dec:	715860dc 	.word	0x715860dc
   34df0:	71d87198 	.word	0x71d87198
   34df4:	2104d04b 	.word	0x2104d04b
   34df8:	4f412200 	.word	0x4f412200
   34dfc:	46186099 	.word	0x46186099
   34e00:	603a4641 	.word	0x603a4641
   34e04:	fdb8f003 	.word	0xfdb8f003
   34e08:	d14d2800 	.word	0xd14d2800
   34e0c:	33fff04f 	.word	0x33fff04f
   34e10:	f844ac02 	.word	0xf844ac02
   34e14:	f8df3d04 	.word	0xf8df3d04
   34e18:	e00580dc 	.word	0xe00580dc
   34e1c:	46404621 	.word	0x46404621
   34e20:	f90af7f0 	.word	0xf90af7f0
   34e24:	d1372800 	.word	0xd1372800
   34e28:	29006839 	.word	0x29006839
   34e2c:	690cd0f6 	.word	0x690cd0f6
   34e30:	d1542c00 	.word	0xd1542c00
   34e34:	31146832 	.word	0x31146832
   34e38:	f7e54628 	.word	0xf7e54628
   34e3c:	6838f839 	.word	0x6838f839
   34e40:	fdaef003 	.word	0xfdaef003
   34e44:	b0024620 	.word	0xb0024620
   34e48:	81f0e8bd 	.word	0x81f0e8bd
   34e4c:	2b046833 	.word	0x2b046833
   34e50:	2402d139 	.word	0x2402d139
   34e54:	46682100 	.word	0x46682100
   34e58:	f00346a0 	.word	0xf00346a0
   34e5c:	2800fd79 	.word	0x2800fd79
   34e60:	200cd0b8 	.word	0x200cd0b8
   34e64:	f978f7f0 	.word	0xf978f7f0
   34e68:	30fff04f 	.word	0x30fff04f
   34e6c:	e8bdb002 	.word	0xe8bdb002
   34e70:	683381f0 	.word	0x683381f0
   34e74:	d1262b04 	.word	0xd1262b04
   34e78:	46a02409 	.word	0x46a02409
   34e7c:	202ae7a4 	.word	0x202ae7a4
   34e80:	f96af7f0 	.word	0xf96af7f0
   34e84:	30fff04f 	.word	0x30fff04f
   34e88:	e8bdb002 	.word	0xe8bdb002
   34e8c:	4a1d81f0 	.word	0x4a1d81f0
   34e90:	68122108 	.word	0x68122108
   34e94:	e7af611a 	.word	0xe7af611a
   34e98:	f7f0203c 	.word	0xf7f0203c
   34e9c:	f04ff95d 	.word	0xf04ff95d
   34ea0:	b00230ff 	.word	0xb00230ff
   34ea4:	81f0e8bd 	.word	0x81f0e8bd
   34ea8:	68039800 	.word	0x68039800
   34eac:	4618b11b 	.word	0x4618b11b
   34eb0:	fd7ef003 	.word	0xfd7ef003
   34eb4:	f0039800 	.word	0xf0039800
   34eb8:	200cfd73 	.word	0x200cfd73
   34ebc:	f94cf7f0 	.word	0xf94cf7f0
   34ec0:	30fff04f 	.word	0x30fff04f
   34ec4:	2016e7d2 	.word	0x2016e7d2
   34ec8:	f946f7f0 	.word	0xf946f7f0
   34ecc:	30fff04f 	.word	0x30fff04f
   34ed0:	2001e771 	.word	0x2001e771
   34ed4:	f940f7f0 	.word	0xf940f7f0
   34ed8:	30fff04f 	.word	0x30fff04f
   34edc:	4b06e76b 	.word	0x4b06e76b
   34ee0:	601c2008 	.word	0x601c2008
   34ee4:	f938f7f0 	.word	0xf938f7f0
   34ee8:	f0036838 	.word	0xf0036838
   34eec:	f04ffd59 	.word	0xf04ffd59
   34ef0:	e76030ff 	.word	0xe76030ff
   34ef4:	20024c68 	.word	0x20024c68
   34ef8:	20024c6c 	.word	0x20024c6c
   34efc:	2002a43a 	.word	0x2002a43a
   34f00:	20024c0c 	.word	0x20024c0c
   34f04:	20024c70 	.word	0x20024c70

00034f08 <unimplemented_method>:
   34f08:	b508b40f 	.word	0xb508b40f
   34f0c:	f7f0202d 	.word	0xf7f0202d
   34f10:	e8bdf923 	.word	0xe8bdf923
   34f14:	f04f4008 	.word	0xf04f4008
   34f18:	b00430ff 	.word	0xb00430ff
   34f1c:	bf004770 	.word	0xbf004770

00034f20 <bsd_platform_init>:
   34f20:	b093b5f0 	.word	0xb093b5f0
   34f24:	ff7cf003 	.word	0xff7cf003
   34f28:	d1522800 	.word	0xd1522800
   34f2c:	a801492b 	.word	0xa801492b
   34f30:	ffeaf003 	.word	0xffeaf003
   34f34:	d14c2800 	.word	0xd14c2800
   34f38:	fa30f7f0 	.word	0xfa30f7f0
   34f3c:	f82ef003 	.word	0xf82ef003
   34f40:	d1462800 	.word	0xd1462800
   34f44:	f44f2320 	.word	0xf44f2320
   34f48:	22084180 	.word	0x22084180
   34f4c:	5c40f44f 	.word	0x5c40f44f
   34f50:	4e244f23 	.word	0x4e244f23
   34f54:	93059303 	.word	0x93059303
   34f58:	4d239307 	.word	0x4d239307
   34f5c:	910d9109 	.word	0x910d9109
   34f60:	49234c22 	.word	0x49234c22
   34f64:	e9cd4b23 	.word	0xe9cd4b23
   34f68:	eb0d0010 	.word	0xeb0d0010
   34f6c:	f8cd0002 	.word	0xf8cd0002
   34f70:	e9cdc02c 	.word	0xe9cdc02c
   34f74:	9702220e 	.word	0x9702220e
   34f78:	95069604 	.word	0x95069604
   34f7c:	910a9408 	.word	0x910a9408
   34f80:	f7f8930c 	.word	0xf7f8930c
   34f84:	b108fdc9 	.word	0xb108fdc9
   34f88:	bdf0b013 	.word	0xbdf0b013
   34f8c:	fd22f7fc 	.word	0xfd22f7fc
   34f90:	f7f8b9f8 	.word	0xf7f8b9f8
   34f94:	b9e0f8b9 	.word	0xb9e0f8b9
   34f98:	fff8f7fc 	.word	0xfff8f7fc
   34f9c:	f7fab9c8 	.word	0xf7fab9c8
   34fa0:	b9b0f8fd 	.word	0xb9b0f8fd
   34fa4:	fcd6f7ff 	.word	0xfcd6f7ff
   34fa8:	f7f7b998 	.word	0xf7f7b998
   34fac:	b980feaf 	.word	0xb980feaf
   34fb0:	f8f2f000 	.word	0xf8f2f000
   34fb4:	f005b968 	.word	0xf005b968
   34fb8:	b950f929 	.word	0xb950f929
   34fbc:	fc30f7ff 	.word	0xfc30f7ff
   34fc0:	f7f8b938 	.word	0xf7f8b938
   34fc4:	3000faa5 	.word	0x3000faa5
   34fc8:	2001bf18 	.word	0x2001bf18
   34fcc:	b0134240 	.word	0xb0134240
   34fd0:	f04fbdf0 	.word	0xf04fbdf0
   34fd4:	b01330ff 	.word	0xb01330ff
   34fd8:	bf00bdf0 	.word	0xbf00bdf0
   34fdc:	00049fd0 	.word	0x00049fd0
   34fe0:	20010000 	.word	0x20010000
   34fe4:	20010040 	.word	0x20010040
   34fe8:	20010020 	.word	0x20010020
   34fec:	20017060 	.word	0x20017060
   34ff0:	20010060 	.word	0x20010060
   34ff4:	20013060 	.word	0x20013060

00034ff8 <bsd_platform_shutdown>:
   34ff8:	f000b508 	.word	0xf000b508
   34ffc:	f7f7f913 	.word	0xf7f7f913
   35000:	f7fcff07 	.word	0xf7fcff07
   35004:	f7f8fe8f 	.word	0xf7f8fe8f
   35008:	2000fdef 	.word	0x2000fdef
   3500c:	bf00bd08 	.word	0xbf00bd08

00035010 <bsd_platform_af_method_table_get>:
   35010:	d02a2805 	.word	0xd02a2805
   35014:	d914b508 	.word	0xd914b508
   35018:	d016280a 	.word	0xd016280a
   3501c:	d10b2866 	.word	0xd10b2866
   35020:	2302f240 	.word	0x2302f240
   35024:	d032429a 	.word	0xd032429a
   35028:	2305f240 	.word	0x2305f240
   3502c:	d032429a 	.word	0xd032429a
   35030:	2301f240 	.word	0x2301f240
   35034:	d02c429a 	.word	0xd02c429a
   35038:	f7f02016 	.word	0xf7f02016
   3503c:	2000f88d 	.word	0x2000f88d
   35040:	2801bd08 	.word	0x2801bd08
   35044:	2802d016 	.word	0x2802d016
   35048:	f5a2d1f6 	.word	0xf5a2d1f6
   3504c:	2a0a7282 	.word	0x2a0a7282
   35050:	2301d819 	.word	0x2301d819
   35054:	4103f240 	.word	0x4103f240
   35058:	fa034810 	.word	0xfa034810
   3505c:	420af202 	.word	0x420af202
   35060:	0328f100 	.word	0x0328f100
   35064:	4618bf18 	.word	0x4618bf18
   35068:	2903bd08 	.word	0x2903bd08
   3506c:	bf18480c 	.word	0xbf18480c
   35070:	47702000 	.word	0x47702000
   35074:	2303f240 	.word	0x2303f240
   35078:	d006429a 	.word	0xd006429a
   3507c:	7f01f5b2 	.word	0x7f01f5b2
   35080:	4808d1da 	.word	0x4808d1da
   35084:	4805bd08 	.word	0x4805bd08
   35088:	4807bd08 	.word	0x4807bd08
   3508c:	4807bd08 	.word	0x4807bd08
   35090:	4807bd08 	.word	0x4807bd08
   35094:	4807bd08 	.word	0x4807bd08
   35098:	bf00bd08 	.word	0xbf00bd08
   3509c:	00049e9c 	.word	0x00049e9c
   350a0:	00049f8c 	.word	0x00049f8c
   350a4:	00049f3c 	.word	0x00049f3c
   350a8:	00049eec 	.word	0x00049eec
   350ac:	00049f14 	.word	0x00049f14
   350b0:	00049e74 	.word	0x00049e74
   350b4:	00049f64 	.word	0x00049f64

000350b8 <bsd_platform_fd_method_table_get>:
   350b8:	4605b538 	.word	0x4605b538
   350bc:	fda6f7fc 	.word	0xfda6f7fc
   350c0:	b9504604 	.word	0xb9504604
   350c4:	43ab4b2a 	.word	0x43ab4b2a
   350c8:	4b2ad032 	.word	0x4b2ad032
   350cc:	d04343ab 	.word	0xd04343ab
   350d0:	43ab4b29 	.word	0x43ab4b29
   350d4:	4829d146 	.word	0x4829d146
   350d8:	68c3bd38 	.word	0x68c3bd38
   350dc:	2b056942 	.word	0x2b056942
   350e0:	d911d034 	.word	0xd911d034
   350e4:	d0132b0a 	.word	0xd0132b0a
   350e8:	d12a2b66 	.word	0xd12a2b66
   350ec:	2302f240 	.word	0x2302f240
   350f0:	d031429a 	.word	0xd031429a
   350f4:	2305f240 	.word	0x2305f240
   350f8:	d031429a 	.word	0xd031429a
   350fc:	2301f240 	.word	0x2301f240
   35100:	d11e429a 	.word	0xd11e429a
   35104:	bd38481e 	.word	0xbd38481e
   35108:	d0132b01 	.word	0xd0132b01
   3510c:	d1182b02 	.word	0xd1182b02
   35110:	7282f5a2 	.word	0x7282f5a2
   35114:	d8212a0a 	.word	0xd8212a0a
   35118:	f2402301 	.word	0xf2402301
   3511c:	48194103 	.word	0x48194103
   35120:	f202fa03 	.word	0xf202fa03
   35124:	f100420a 	.word	0xf100420a
   35128:	bf180428 	.word	0xbf180428
   3512c:	bd384620 	.word	0xbd384620
   35130:	bd384815 	.word	0xbd384815
   35134:	2303f240 	.word	0x2303f240
   35138:	d0f9429a 	.word	0xd0f9429a
   3513c:	7f01f5b2 	.word	0x7f01f5b2
   35140:	2016d0c9 	.word	0x2016d0c9
   35144:	f808f7f0 	.word	0xf808f7f0
   35148:	bd382000 	.word	0xbd382000
   3514c:	480f6903 	.word	0x480f6903
   35150:	bf182b03 	.word	0xbf182b03
   35154:	bd382000 	.word	0xbd382000
   35158:	bd38480d 	.word	0xbd38480d
   3515c:	bd384809 	.word	0xbd384809
   35160:	bd38480c 	.word	0xbd38480c
   35164:	f7ef2009 	.word	0xf7ef2009
   35168:	4620fff7 	.word	0x4620fff7
   3516c:	bf00bd38 	.word	0xbf00bd38
   35170:	49765432 	.word	0x49765432
   35174:	789a0000 	.word	0x789a0000
   35178:	49765443 	.word	0x49765443
   3517c:	00049f3c 	.word	0x00049f3c
   35180:	00049e74 	.word	0x00049e74
   35184:	00049e9c 	.word	0x00049e9c
   35188:	00049eec 	.word	0x00049eec
   3518c:	00049f8c 	.word	0x00049f8c
   35190:	00049f14 	.word	0x00049f14
   35194:	00049f64 	.word	0x00049f64

00035198 <nrf_inbuilt_key_init>:
   35198:	b086b570 	.word	0xb086b570
   3519c:	a802491d 	.word	0xa802491d
   351a0:	feb2f003 	.word	0xfeb2f003
   351a4:	4601bb00 	.word	0x4601bb00
   351a8:	f2404604 	.word	0xf2404604
   351ac:	20662201 	.word	0x20662201
   351b0:	ffacf7f7 	.word	0xffacf7f7
   351b4:	28004e18 	.word	0x28004e18
   351b8:	60304605 	.word	0x60304605
   351bc:	4817db10 	.word	0x4817db10
   351c0:	f9e0f00b 	.word	0xf9e0f00b
   351c4:	46024623 	.word	0x46024623
   351c8:	46284914 	.word	0x46284914
   351cc:	94009401 	.word	0x94009401
   351d0:	ff46f7f7 	.word	0xff46f7f7
   351d4:	48114605 	.word	0x48114605
   351d8:	f9d4f00b 	.word	0xf9d4f00b
   351dc:	d00742a8 	.word	0xd00742a8
   351e0:	46202405 	.word	0x46202405
   351e4:	bd70b006 	.word	0xbd70b006
   351e8:	46202469 	.word	0x46202469
   351ec:	bd70b006 	.word	0xbd70b006
   351f0:	e9cd6830 	.word	0xe9cd6830
   351f4:	a9034400 	.word	0xa9034400
   351f8:	220a4623 	.word	0x220a4623
   351fc:	f818f7f8 	.word	0xf818f7f8
   35200:	dded2801 	.word	0xdded2801
   35204:	2202a803 	.word	0x2202a803
   35208:	f00b4905 	.word	0xf00b4905
   3520c:	2800f9e9 	.word	0x2800f9e9
   35210:	e7e5d0e7 	.word	0xe7e5d0e7
   35214:	20031c00 	.word	0x20031c00
   35218:	20031bfc 	.word	0x20031bfc
   3521c:	00049fe4 	.word	0x00049fe4
   35220:	00049bc4 	.word	0x00049bc4

00035224 <nrf_inbuilt_key_deinit>:
   35224:	4c05b510 	.word	0x4c05b510
   35228:	28006820 	.word	0x28006820
   3522c:	f7f7db01 	.word	0xf7f7db01
   35230:	f04fffb7 	.word	0xf04fffb7
   35234:	200033ff 	.word	0x200033ff
   35238:	bd106023 	.word	0xbd106023
   3523c:	20031bfc 	.word	0x20031bfc

00035240 <symbol_0005436>:
   35240:	460a4b02 	.word	0x460a4b02
   35244:	2100681b 	.word	0x2100681b
   35248:	bf004718 	.word	0xbf004718
   3524c:	20031c14 	.word	0x20031c14

00035250 <mpi_mul_hlp>:
   35250:	e92d280f 	.word	0xe92d280f
   35254:	46864ff0 	.word	0x46864ff0
   35258:	82e0f240 	.word	0x82e0f240
   3525c:	0800f04f 	.word	0x0800f04f
   35260:	f1014684 	.word	0xf1014684
   35264:	f1020440 	.word	0xf1020440
   35268:	f8540040 	.word	0xf8540040
   3526c:	f8506c40 	.word	0xf8506c40
   35270:	fba35c40 	.word	0xfba35c40
   35274:	eb186706 	.word	0xeb186706
   35278:	bf2c0806 	.word	0xbf2c0806
   3527c:	0901f04f 	.word	0x0901f04f
   35280:	0900f04f 	.word	0x0900f04f
   35284:	0508eb15 	.word	0x0508eb15
   35288:	f04f444f 	.word	0xf04f444f
   3528c:	bf280900 	.word	0xbf280900
   35290:	0901f04f 	.word	0x0901f04f
   35294:	5c40f840 	.word	0x5c40f840
   35298:	6c3cf854 	.word	0x6c3cf854
   3529c:	fba344b9 	.word	0xfba344b9
   352a0:	eb19ab06 	.word	0xeb19ab06
   352a4:	bf2c090a 	.word	0xbf2c090a
   352a8:	0801f04f 	.word	0x0801f04f
   352ac:	0800f04f 	.word	0x0800f04f
   352b0:	6c3cf850 	.word	0x6c3cf850
   352b4:	050beb08 	.word	0x050beb08
   352b8:	0609eb16 	.word	0x0609eb16
   352bc:	0800f04f 	.word	0x0800f04f
   352c0:	f04fbf28 	.word	0xf04fbf28
   352c4:	f8400801 	.word	0xf8400801
   352c8:	f8546c3c 	.word	0xf8546c3c
   352cc:	44a86c38 	.word	0x44a86c38
   352d0:	6706fba3 	.word	0x6706fba3
   352d4:	0806eb18 	.word	0x0806eb18
   352d8:	f04fbf2c 	.word	0xf04fbf2c
   352dc:	f04f0901 	.word	0xf04f0901
   352e0:	f8500900 	.word	0xf8500900
   352e4:	444f5c38 	.word	0x444f5c38
   352e8:	0508eb15 	.word	0x0508eb15
   352ec:	0900f04f 	.word	0x0900f04f
   352f0:	f04fbf28 	.word	0xf04fbf28
   352f4:	f8400901 	.word	0xf8400901
   352f8:	f8545c38 	.word	0xf8545c38
   352fc:	44b96c34 	.word	0x44b96c34
   35300:	ab06fba3 	.word	0xab06fba3
   35304:	090aeb19 	.word	0x090aeb19
   35308:	f04fbf2c 	.word	0xf04fbf2c
   3530c:	f04f0801 	.word	0xf04f0801
   35310:	f8500800 	.word	0xf8500800
   35314:	eb086c34 	.word	0xeb086c34
   35318:	eb16050b 	.word	0xeb16050b
   3531c:	f04f0609 	.word	0xf04f0609
   35320:	bf280800 	.word	0xbf280800
   35324:	0801f04f 	.word	0x0801f04f
   35328:	6c34f840 	.word	0x6c34f840
   3532c:	6c30f854 	.word	0x6c30f854
   35330:	fba344a8 	.word	0xfba344a8
   35334:	eb186706 	.word	0xeb186706
   35338:	bf2c0806 	.word	0xbf2c0806
   3533c:	0901f04f 	.word	0x0901f04f
   35340:	0900f04f 	.word	0x0900f04f
   35344:	5c30f850 	.word	0x5c30f850
   35348:	eb15444f 	.word	0xeb15444f
   3534c:	f04f0508 	.word	0xf04f0508
   35350:	bf280900 	.word	0xbf280900
   35354:	0901f04f 	.word	0x0901f04f
   35358:	5c30f840 	.word	0x5c30f840
   3535c:	6c2cf854 	.word	0x6c2cf854
   35360:	fba344b9 	.word	0xfba344b9
   35364:	eb19ab06 	.word	0xeb19ab06
   35368:	bf2c090a 	.word	0xbf2c090a
   3536c:	0801f04f 	.word	0x0801f04f
   35370:	0800f04f 	.word	0x0800f04f
   35374:	6c2cf850 	.word	0x6c2cf850
   35378:	050beb08 	.word	0x050beb08
   3537c:	0609eb16 	.word	0x0609eb16
   35380:	0800f04f 	.word	0x0800f04f
   35384:	f04fbf28 	.word	0xf04fbf28
   35388:	f8400801 	.word	0xf8400801
   3538c:	f8546c2c 	.word	0xf8546c2c
   35390:	44a86c28 	.word	0x44a86c28
   35394:	6706fba3 	.word	0x6706fba3
   35398:	0806eb18 	.word	0x0806eb18
   3539c:	f04fbf2c 	.word	0xf04fbf2c
   353a0:	f04f0901 	.word	0xf04f0901
   353a4:	f8500900 	.word	0xf8500900
   353a8:	444f5c28 	.word	0x444f5c28
   353ac:	0508eb15 	.word	0x0508eb15
   353b0:	0900f04f 	.word	0x0900f04f
   353b4:	f04fbf28 	.word	0xf04fbf28
   353b8:	f8400901 	.word	0xf8400901
   353bc:	f8545c28 	.word	0xf8545c28
   353c0:	44b96c24 	.word	0x44b96c24
   353c4:	ab06fba3 	.word	0xab06fba3
   353c8:	090aeb19 	.word	0x090aeb19
   353cc:	f04fbf2c 	.word	0xf04fbf2c
   353d0:	f04f0801 	.word	0xf04f0801
   353d4:	f8500800 	.word	0xf8500800
   353d8:	eb086c24 	.word	0xeb086c24
   353dc:	eb16050b 	.word	0xeb16050b
   353e0:	f04f0609 	.word	0xf04f0609
   353e4:	bf280800 	.word	0xbf280800
   353e8:	0801f04f 	.word	0x0801f04f
   353ec:	6c24f840 	.word	0x6c24f840
   353f0:	6c20f854 	.word	0x6c20f854
   353f4:	fba344a8 	.word	0xfba344a8
   353f8:	eb186706 	.word	0xeb186706
   353fc:	bf2c0806 	.word	0xbf2c0806
   35400:	0901f04f 	.word	0x0901f04f
   35404:	0900f04f 	.word	0x0900f04f
   35408:	5c20f850 	.word	0x5c20f850
   3540c:	eb15444f 	.word	0xeb15444f
   35410:	f04f0508 	.word	0xf04f0508
   35414:	bf280900 	.word	0xbf280900
   35418:	0901f04f 	.word	0x0901f04f
   3541c:	5c20f840 	.word	0x5c20f840
   35420:	6c1cf854 	.word	0x6c1cf854
   35424:	fba344b9 	.word	0xfba344b9
   35428:	eb19ab06 	.word	0xeb19ab06
   3542c:	bf2c090a 	.word	0xbf2c090a
   35430:	0801f04f 	.word	0x0801f04f
   35434:	0800f04f 	.word	0x0800f04f
   35438:	6c1cf850 	.word	0x6c1cf850
   3543c:	050beb08 	.word	0x050beb08
   35440:	0609eb16 	.word	0x0609eb16
   35444:	0800f04f 	.word	0x0800f04f
   35448:	f04fbf28 	.word	0xf04fbf28
   3544c:	f8400801 	.word	0xf8400801
   35450:	f8546c1c 	.word	0xf8546c1c
   35454:	44a86c18 	.word	0x44a86c18
   35458:	6706fba3 	.word	0x6706fba3
   3545c:	0806eb18 	.word	0x0806eb18
   35460:	f04fbf2c 	.word	0xf04fbf2c
   35464:	f04f0901 	.word	0xf04f0901
   35468:	f8500900 	.word	0xf8500900
   3546c:	444f5c18 	.word	0x444f5c18
   35470:	0508eb15 	.word	0x0508eb15
   35474:	0900f04f 	.word	0x0900f04f
   35478:	f04fbf28 	.word	0xf04fbf28
   3547c:	f8400901 	.word	0xf8400901
   35480:	f8545c18 	.word	0xf8545c18
   35484:	44b96c14 	.word	0x44b96c14
   35488:	ab06fba3 	.word	0xab06fba3
   3548c:	090aeb19 	.word	0x090aeb19
   35490:	f04fbf2c 	.word	0xf04fbf2c
   35494:	f04f0801 	.word	0xf04f0801
   35498:	f8500800 	.word	0xf8500800
   3549c:	eb086c14 	.word	0xeb086c14
   354a0:	eb16050b 	.word	0xeb16050b
   354a4:	f04f0609 	.word	0xf04f0609
   354a8:	bf280800 	.word	0xbf280800
   354ac:	0801f04f 	.word	0x0801f04f
   354b0:	6c14f840 	.word	0x6c14f840
   354b4:	6c10f854 	.word	0x6c10f854
   354b8:	fba344a8 	.word	0xfba344a8
   354bc:	eb186706 	.word	0xeb186706
   354c0:	bf2c0806 	.word	0xbf2c0806
   354c4:	0901f04f 	.word	0x0901f04f
   354c8:	0900f04f 	.word	0x0900f04f
   354cc:	5c10f850 	.word	0x5c10f850
   354d0:	eb15444f 	.word	0xeb15444f
   354d4:	f04f0508 	.word	0xf04f0508
   354d8:	bf280900 	.word	0xbf280900
   354dc:	0901f04f 	.word	0x0901f04f
   354e0:	5c10f840 	.word	0x5c10f840
   354e4:	6c0cf854 	.word	0x6c0cf854
   354e8:	fba344b9 	.word	0xfba344b9
   354ec:	eb19ab06 	.word	0xeb19ab06
   354f0:	bf2c090a 	.word	0xbf2c090a
   354f4:	0801f04f 	.word	0x0801f04f
   354f8:	0800f04f 	.word	0x0800f04f
   354fc:	6c0cf850 	.word	0x6c0cf850
   35500:	050beb08 	.word	0x050beb08
   35504:	0609eb16 	.word	0x0609eb16
   35508:	0800f04f 	.word	0x0800f04f
   3550c:	f04fbf28 	.word	0xf04fbf28
   35510:	f8400801 	.word	0xf8400801
   35514:	f8546c0c 	.word	0xf8546c0c
   35518:	44a86c08 	.word	0x44a86c08
   3551c:	6706fba3 	.word	0x6706fba3
   35520:	0806eb18 	.word	0x0806eb18
   35524:	f04fbf2c 	.word	0xf04fbf2c
   35528:	f04f0901 	.word	0xf04f0901
   3552c:	f8500900 	.word	0xf8500900
   35530:	444f5c08 	.word	0x444f5c08
   35534:	0508eb15 	.word	0x0508eb15
   35538:	0900f04f 	.word	0x0900f04f
   3553c:	f04fbf28 	.word	0xf04fbf28
   35540:	f8400901 	.word	0xf8400901
   35544:	f8545c08 	.word	0xf8545c08
   35548:	44b96c04 	.word	0x44b96c04
   3554c:	ab06fba3 	.word	0xab06fba3
   35550:	090aeb19 	.word	0x090aeb19
   35554:	f04fbf2c 	.word	0xf04fbf2c
   35558:	f04f0801 	.word	0xf04f0801
   3555c:	f8500800 	.word	0xf8500800
   35560:	eb086c04 	.word	0xeb086c04
   35564:	eb16050b 	.word	0xeb16050b
   35568:	f04f0609 	.word	0xf04f0609
   3556c:	bf280800 	.word	0xbf280800
   35570:	0801f04f 	.word	0x0801f04f
   35574:	0c10f1ac 	.word	0x0c10f1ac
   35578:	0f0ff1bc 	.word	0x0f0ff1bc
   3557c:	6c04f840 	.word	0x6c04f840
   35580:	f10444a8 	.word	0xf10444a8
   35584:	f1000440 	.word	0xf1000440
   35588:	f63f0040 	.word	0xf63f0040
   3558c:	f1aeae6e 	.word	0xf1aeae6e
   35590:	09000010 	.word	0x09000010
   35594:	01803001 	.word	0x01803001
   35598:	44024401 	.word	0x44024401
   3559c:	000ff00e 	.word	0x000ff00e
   355a0:	68172807 	.word	0x68172807
   355a4:	8092f240 	.word	0x8092f240
   355a8:	6856680c 	.word	0x6856680c
   355ac:	9a04fba3 	.word	0x9a04fba3
   355b0:	0809eb18 	.word	0x0809eb18
   355b4:	f04fbf2c 	.word	0xf04fbf2c
   355b8:	f04f0c01 	.word	0xf04f0c01
   355bc:	eb170c00 	.word	0xeb170c00
   355c0:	bf2c0708 	.word	0xbf2c0708
   355c4:	24002401 	.word	0x24002401
   355c8:	684f6017 	.word	0x684f6017
   355cc:	050ceb0a 	.word	0x050ceb0a
   355d0:	8907fba3 	.word	0x8907fba3
   355d4:	eb14442c 	.word	0xeb14442c
   355d8:	bf2c0408 	.word	0xbf2c0408
   355dc:	25002501 	.word	0x25002501
   355e0:	eb0519a6 	.word	0xeb0519a6
   355e4:	f04f0709 	.word	0xf04f0709
   355e8:	bf280500 	.word	0xbf280500
   355ec:	60562501 	.word	0x60562501
   355f0:	443d688e 	.word	0x443d688e
   355f4:	7806fba3 	.word	0x7806fba3
   355f8:	bf2c19ed 	.word	0xbf2c19ed
   355fc:	24002401 	.word	0x24002401
   35600:	eb086896 	.word	0xeb086896
   35604:	19ad0704 	.word	0x19ad0704
   35608:	0400f04f 	.word	0x0400f04f
   3560c:	2401bf28 	.word	0x2401bf28
   35610:	68ce6095 	.word	0x68ce6095
   35614:	fba3443c 	.word	0xfba3443c
   35618:	19e47806 	.word	0x19e47806
   3561c:	2501bf2c 	.word	0x2501bf2c
   35620:	68d62500 	.word	0x68d62500
   35624:	0705eb08 	.word	0x0705eb08
   35628:	f04f19a4 	.word	0xf04f19a4
   3562c:	bf280500 	.word	0xbf280500
   35630:	60d42501 	.word	0x60d42501
   35634:	443d690e 	.word	0x443d690e
   35638:	7806fba3 	.word	0x7806fba3
   3563c:	bf2c19ed 	.word	0xbf2c19ed
   35640:	24002401 	.word	0x24002401
   35644:	eb086916 	.word	0xeb086916
   35648:	19ad0704 	.word	0x19ad0704
   3564c:	0400f04f 	.word	0x0400f04f
   35650:	2401bf28 	.word	0x2401bf28
   35654:	694e6115 	.word	0x694e6115
   35658:	fba3443c 	.word	0xfba3443c
   3565c:	19e47806 	.word	0x19e47806
   35660:	2501bf2c 	.word	0x2501bf2c
   35664:	69562500 	.word	0x69562500
   35668:	0705eb08 	.word	0x0705eb08
   3566c:	f04f19a4 	.word	0xf04f19a4
   35670:	bf280500 	.word	0xbf280500
   35674:	61542501 	.word	0x61542501
   35678:	443d698e 	.word	0x443d698e
   3567c:	7806fba3 	.word	0x7806fba3
   35680:	bf2c19ed 	.word	0xbf2c19ed
   35684:	24002401 	.word	0x24002401
   35688:	eb086996 	.word	0xeb086996
   3568c:	19ad0704 	.word	0x19ad0704
   35690:	0400f04f 	.word	0x0400f04f
   35694:	2401bf28 	.word	0x2401bf28
   35698:	69ce6195 	.word	0x69ce6195
   3569c:	fba3443c 	.word	0xfba3443c
   356a0:	eb149a06 	.word	0xeb149a06
   356a4:	bf2c0409 	.word	0xbf2c0409
   356a8:	0801f04f 	.word	0x0801f04f
   356ac:	0800f04f 	.word	0x0800f04f
   356b0:	eb0869d6 	.word	0xeb0869d6
   356b4:	19a4050a 	.word	0x19a4050a
   356b8:	0800f04f 	.word	0x0800f04f
   356bc:	f04fbf28 	.word	0xf04fbf28
   356c0:	61d40801 	.word	0x61d40801
   356c4:	44a83120 	.word	0x44a83120
   356c8:	32203808 	.word	0x32203808
   356cc:	f0002800 	.word	0xf0002800
   356d0:	680c8097 	.word	0x680c8097
   356d4:	fba36816 	.word	0xfba36816
   356d8:	eb199a04 	.word	0xeb199a04
   356dc:	bf2c0808 	.word	0xbf2c0808
   356e0:	24002401 	.word	0x24002401
   356e4:	0608eb16 	.word	0x0608eb16
   356e8:	0500f04f 	.word	0x0500f04f
   356ec:	2501bf28 	.word	0x2501bf28
   356f0:	28014454 	.word	0x28014454
   356f4:	0804eb05 	.word	0x0804eb05
   356f8:	d07f6016 	.word	0xd07f6016
   356fc:	6856684c 	.word	0x6856684c
   35700:	9a04fba3 	.word	0x9a04fba3
   35704:	0808eb19 	.word	0x0808eb19
   35708:	2401bf2c 	.word	0x2401bf2c
   3570c:	eb162400 	.word	0xeb162400
   35710:	f04f0608 	.word	0xf04f0608
   35714:	bf280500 	.word	0xbf280500
   35718:	44542501 	.word	0x44542501
   3571c:	eb052802 	.word	0xeb052802
   35720:	60560804 	.word	0x60560804
   35724:	688cd06a 	.word	0x688cd06a
   35728:	fba36896 	.word	0xfba36896
   3572c:	eb199a04 	.word	0xeb199a04
   35730:	bf2c0808 	.word	0xbf2c0808
   35734:	24002401 	.word	0x24002401
   35738:	0608eb16 	.word	0x0608eb16
   3573c:	0500f04f 	.word	0x0500f04f
   35740:	2501bf28 	.word	0x2501bf28
   35744:	28034454 	.word	0x28034454
   35748:	0804eb05 	.word	0x0804eb05
   3574c:	d0556096 	.word	0xd0556096
   35750:	68d668cc 	.word	0x68d668cc
   35754:	9a04fba3 	.word	0x9a04fba3
   35758:	0808eb19 	.word	0x0808eb19
   3575c:	2401bf2c 	.word	0x2401bf2c
   35760:	eb162400 	.word	0xeb162400
   35764:	f04f0608 	.word	0xf04f0608
   35768:	bf280500 	.word	0xbf280500
   3576c:	44542501 	.word	0x44542501
   35770:	eb052804 	.word	0xeb052804
   35774:	60d60804 	.word	0x60d60804
   35778:	690cd040 	.word	0x690cd040
   3577c:	fba36916 	.word	0xfba36916
   35780:	eb199a04 	.word	0xeb199a04
   35784:	bf2c0408 	.word	0xbf2c0408
   35788:	0801f04f 	.word	0x0801f04f
   3578c:	0800f04f 	.word	0x0800f04f
   35790:	eb0a19a6 	.word	0xeb0a19a6
   35794:	f04f0508 	.word	0xf04f0508
   35798:	bf280800 	.word	0xbf280800
   3579c:	0801f04f 	.word	0x0801f04f
   357a0:	44a82805 	.word	0x44a82805
   357a4:	d0296116 	.word	0xd0296116
   357a8:	6956694c 	.word	0x6956694c
   357ac:	9a04fba3 	.word	0x9a04fba3
   357b0:	0409eb18 	.word	0x0409eb18
   357b4:	f04fbf2c 	.word	0xf04fbf2c
   357b8:	f04f0801 	.word	0xf04f0801
   357bc:	19a60800 	.word	0x19a60800
   357c0:	0508eb0a 	.word	0x0508eb0a
   357c4:	0800f04f 	.word	0x0800f04f
   357c8:	f04fbf28 	.word	0xf04fbf28
   357cc:	28060801 	.word	0x28060801
   357d0:	615644a8 	.word	0x615644a8
   357d4:	698cd012 	.word	0x698cd012
   357d8:	fba36991 	.word	0xfba36991
   357dc:	eb144504 	.word	0xeb144504
   357e0:	bf2c0808 	.word	0xbf2c0808
   357e4:	23002301 	.word	0x23002301
   357e8:	0108eb11 	.word	0x0108eb11
   357ec:	0400f04f 	.word	0x0400f04f
   357f0:	2401bf28 	.word	0x2401bf28
   357f4:	eb04442b 	.word	0xeb04442b
   357f8:	61910803 	.word	0x61910803
   357fc:	0280eb02 	.word	0x0280eb02
   35800:	23006815 	.word	0x23006815
   35804:	0508eb15 	.word	0x0508eb15
   35808:	2301bf28 	.word	0x2301bf28
   3580c:	5b04f842 	.word	0x5b04f842
   35810:	0801f04f 	.word	0x0801f04f
   35814:	d1f32b00 	.word	0xd1f32b00
   35818:	8ff0e8bd 	.word	0x8ff0e8bd
   3581c:	0800f04f 	.word	0x0800f04f
   35820:	bf00e6be 	.word	0xbf00e6be

00035824 <symbol_0002616>:
   35824:	2b006843 	.word	0x2b006843
   35828:	b430d033 	.word	0xb430d033
   3582c:	4280f103 	.word	0x4280f103
   35830:	3a016885 	.word	0x3a016885
   35834:	4022f855 	.word	0x4022f855
   35838:	0282eb05 	.word	0x0282eb05
   3583c:	e009b11c 	.word	0xe009b11c
   35840:	4d04f852 	.word	0x4d04f852
   35844:	3b01b934 	.word	0x3b01b934
   35848:	688bd1fa 	.word	0x688bd1fa
   3584c:	b9d06818 	.word	0xb9d06818
   35850:	4770bc30 	.word	0x4770bc30
   35854:	6812688a 	.word	0x6812688a
   35858:	2b01b192 	.word	0x2b01b192
   3585c:	6800d810 	.word	0x6800d810
   35860:	2800680b 	.word	0x2800680b
   35864:	2b00dd01 	.word	0x2b00dd01
   35868:	2b00db11 	.word	0x2b00db11
   3586c:	2800dd01 	.word	0x2800dd01
   35870:	682bdb16 	.word	0x682bdb16
   35874:	d8eb4293 	.word	0xd8eb4293
   35878:	bc30d306 	.word	0xbc30d306
   3587c:	47702000 	.word	0x47702000
   35880:	bc306800 	.word	0xbc306800
   35884:	68084770 	.word	0x68084770
   35888:	bc304240 	.word	0xbc304240
   3588c:	20014770 	.word	0x20014770
   35890:	688be7de 	.word	0x688be7de
   35894:	b9006818 	.word	0xb9006818
   35898:	68084770 	.word	0x68084770
   3589c:	e7fb4240 	.word	0xe7fb4240
   358a0:	30fff04f 	.word	0x30fff04f
   358a4:	bf00e7d4 	.word	0xbf00e7d4

000358a8 <symbol_00038d0>:
   358a8:	2300b120 	.word	0x2300b120
   358ac:	e9c02201 	.word	0xe9c02201
   358b0:	60832300 	.word	0x60832300
   358b4:	bf004770 	.word	0xbf004770

000358b8 <symbol_000fb6e>:
   358b8:	b510b1b0 	.word	0xb510b1b0
   358bc:	68804604 	.word	0x68804604
   358c0:	6862b160 	.word	0x6862b160
   358c4:	b13a1e53 	.word	0xb13a1e53
   358c8:	3b012200 	.word	0x3b012200
   358cc:	60021c59 	.word	0x60021c59
   358d0:	0004f100 	.word	0x0004f100
   358d4:	68a0d1f9 	.word	0x68a0d1f9
   358d8:	fc4ef003 	.word	0xfc4ef003
   358dc:	22012300 	.word	0x22012300
   358e0:	2300e9c4 	.word	0x2300e9c4
   358e4:	bd1060a3 	.word	0xbd1060a3
   358e8:	bf004770 	.word	0xbf004770

000358ec <symbol_0006423>:
   358ec:	6842b570 	.word	0x6842b570
   358f0:	428a4605 	.word	0x428a4605
   358f4:	d807460c 	.word	0xd807460c
   358f8:	7310f242 	.word	0x7310f242
   358fc:	d8514299 	.word	0xd8514299
   35900:	d335428a 	.word	0xd335428a
   35904:	bd702000 	.word	0xbd702000
   35908:	d0101e51 	.word	0xd0101e51
   3590c:	f8536883 	.word	0xf8536883
   35910:	28000021 	.word	0x28000021
   35914:	f102d149 	.word	0xf102d149
   35918:	3a014280 	.word	0x3a014280
   3591c:	0382eb03 	.word	0x0382eb03
   35920:	f853e003 	.word	0xf853e003
   35924:	b9180d04 	.word	0xb9180d04
   35928:	1e4a4611 	.word	0x1e4a4611
   3592c:	2101d1f9 	.word	0x2101d1f9
   35930:	bf38428c 	.word	0xbf38428c
   35934:	2104460c 	.word	0x2104460c
   35938:	f0034620 	.word	0xf0034620
   3593c:	4606fc09 	.word	0x4606fc09
   35940:	68a9b380 	.word	0x68a9b380
   35944:	00a2b181 	.word	0x00a2b181
   35948:	fab2f7e4 	.word	0xfab2f7e4
   3594c:	2001e9d5 	.word	0x2001e9d5
   35950:	b13a1e53 	.word	0xb13a1e53
   35954:	3b012200 	.word	0x3b012200
   35958:	60021c59 	.word	0x60021c59
   3595c:	0004f100 	.word	0x0004f100
   35960:	68a8d1f9 	.word	0x68a8d1f9
   35964:	fc08f003 	.word	0xfc08f003
   35968:	4601e9c5 	.word	0x4601e9c5
   3596c:	bd702000 	.word	0xbd702000
   35970:	46202104 	.word	0x46202104
   35974:	fbecf003 	.word	0xfbecf003
   35978:	b1984606 	.word	0xb1984606
   3597c:	290068a9 	.word	0x290068a9
   35980:	686ad0f2 	.word	0x686ad0f2
   35984:	f7e40092 	.word	0xf7e40092
   35988:	e9d5fa93 	.word	0xe9d5fa93
   3598c:	1e532001 	.word	0x1e532001
   35990:	d0e72a00 	.word	0xd0e72a00
   35994:	3b012200 	.word	0x3b012200
   35998:	60021c59 	.word	0x60021c59
   3599c:	0004f100 	.word	0x0004f100
   359a0:	e7ded1f9 	.word	0xe7ded1f9
   359a4:	000ff06f 	.word	0x000ff06f
   359a8:	4611bd70 	.word	0x4611bd70
   359ac:	bf00e7c0 	.word	0xbf00e7c0

000359b0 <symbol_00084df>:
   359b0:	d0524288 	.word	0xd0524288
   359b4:	688ab5f8 	.word	0x688ab5f8
   359b8:	4605460e 	.word	0x4605460e
   359bc:	d04e2a00 	.word	0xd04e2a00
   359c0:	1e4b6849 	.word	0x1e4b6849
   359c4:	f852d00e 	.word	0xf852d00e
   359c8:	28000023 	.word	0x28000023
   359cc:	f101d13b 	.word	0xf101d13b
   359d0:	39014180 	.word	0x39014180
   359d4:	0281eb02 	.word	0x0281eb02
   359d8:	f852e002 	.word	0xf852e002
   359dc:	bb900d04 	.word	0xbb900d04
   359e0:	d1fa3b01 	.word	0xd1fa3b01
   359e4:	68332401 	.word	0x68332401
   359e8:	686a602b 	.word	0x686a602b
   359ec:	d30c42a2 	.word	0xd30c42a2
   359f0:	009268af 	.word	0x009268af
   359f4:	46382100 	.word	0x46382100
   359f8:	f9a8f00a 	.word	0xf9a8f00a
   359fc:	68b100a2 	.word	0x68b100a2
   35a00:	f7e468a8 	.word	0xf7e468a8
   35a04:	2000fa55 	.word	0x2000fa55
   35a08:	2104bdf8 	.word	0x2104bdf8
   35a0c:	f0034620 	.word	0xf0034620
   35a10:	4607fb9f 	.word	0x4607fb9f
   35a14:	68a9b1f0 	.word	0x68a9b1f0
   35a18:	686ab189 	.word	0x686ab189
   35a1c:	f7e40092 	.word	0xf7e40092
   35a20:	e9d5fa47 	.word	0xe9d5fa47
   35a24:	1e532001 	.word	0x1e532001
   35a28:	2200b13a 	.word	0x2200b13a
   35a2c:	1c593b01 	.word	0x1c593b01
   35a30:	f1006002 	.word	0xf1006002
   35a34:	d1f90004 	.word	0xd1f90004
   35a38:	f00368a8 	.word	0xf00368a8
   35a3c:	4622fb9d 	.word	0x4622fb9d
   35a40:	4701e9c5 	.word	0x4701e9c5
   35a44:	f242e7d5 	.word	0xf242e7d5
   35a48:	68317210 	.word	0x68317210
   35a4c:	42941c5c 	.word	0x42941c5c
   35a50:	d9ca6029 	.word	0xd9ca6029
   35a54:	000ff06f 	.word	0x000ff06f
   35a58:	2000bdf8 	.word	0x2000bdf8
   35a5c:	28004770 	.word	0x28004770
   35a60:	6880d0d1 	.word	0x6880d0d1
   35a64:	6869b158 	.word	0x6869b158
   35a68:	b1311e4b 	.word	0xb1311e4b
   35a6c:	1c5c3b01 	.word	0x1c5c3b01
   35a70:	f1006002 	.word	0xf1006002
   35a74:	d1f90004 	.word	0xd1f90004
   35a78:	f00368a8 	.word	0xf00368a8
   35a7c:	2000fb7d 	.word	0x2000fb7d
   35a80:	e9c52301 	.word	0xe9c52301
   35a84:	60a83000 	.word	0x60a83000
   35a88:	bf00bdf8 	.word	0xbf00bdf8

00035a8c <symbol_000fa6b>:
   35a8c:	684bb5f0 	.word	0x684bb5f0
   35a90:	b085460d 	.word	0xb085460d
   35a94:	46064614 	.word	0x46064614
   35a98:	b17b6851 	.word	0xb17b6851
   35a9c:	f10368a8 	.word	0xf10368a8
   35aa0:	3a014280 	.word	0x3a014280
   35aa4:	7022f850 	.word	0x7022f850
   35aa8:	0082eb00 	.word	0x0082eb00
   35aac:	e04fb127 	.word	0xe04fb127
   35ab0:	2d04f850 	.word	0x2d04f850
   35ab4:	d14b2a00 	.word	0xd14b2a00
   35ab8:	d1f93b01 	.word	0xd1f93b01
   35abc:	f101b189 	.word	0xf101b189
   35ac0:	68a74080 	.word	0x68a74080
   35ac4:	f8573801 	.word	0xf8573801
   35ac8:	2a002020 	.word	0x2a002020
   35acc:	8099f040 	.word	0x8099f040
   35ad0:	0080eb07 	.word	0x0080eb07
   35ad4:	f850e003 	.word	0xf850e003
   35ad8:	2a002d04 	.word	0x2a002d04
   35adc:	3901d142 	.word	0x3901d142
   35ae0:	2300d1f9 	.word	0x2300d1f9
   35ae4:	42b42201 	.word	0x42b42201
   35ae8:	2301e9cd 	.word	0x2301e9cd
   35aec:	d07f9303 	.word	0xd07f9303
   35af0:	d00542b5 	.word	0xd00542b5
   35af4:	46304629 	.word	0x46304629
   35af8:	ff5af7ff 	.word	0xff5af7ff
   35afc:	b9a84607 	.word	0xb9a84607
   35b00:	60332301 	.word	0x60332301
   35b04:	b1806860 	.word	0xb1806860
   35b08:	c008f8d4 	.word	0xc008f8d4
   35b0c:	4380f100 	.word	0x4380f100
   35b10:	f85c3b01 	.word	0xf85c3b01
   35b14:	eb0c2023 	.word	0xeb0c2023
   35b18:	b1220383 	.word	0xb1220383
   35b1c:	f853e042 	.word	0xf853e042
   35b20:	2a002d04 	.word	0x2a002d04
   35b24:	3801d13e 	.word	0x3801d13e
   35b28:	2700d1f9 	.word	0x2700d1f9
   35b2c:	b1609803 	.word	0xb1609803
   35b30:	1e539a02 	.word	0x1e539a02
   35b34:	2200b13a 	.word	0x2200b13a
   35b38:	1c593b01 	.word	0x1c593b01
   35b3c:	f1006002 	.word	0xf1006002
   35b40:	d1f90004 	.word	0xd1f90004
   35b44:	f0039803 	.word	0xf0039803
   35b48:	4638fb17 	.word	0x4638fb17
   35b4c:	bdf0b005 	.word	0xbdf0b005
   35b50:	d0c62900 	.word	0xd0c62900
   35b54:	4080f101 	.word	0x4080f101
   35b58:	380168a7 	.word	0x380168a7
   35b5c:	2020f857 	.word	0x2020f857
   35b60:	d0b52a00 	.word	0xd0b52a00
   35b64:	d8bc428b 	.word	0xd8bc428b
   35b68:	2b00d34b 	.word	0x2b00d34b
   35b6c:	68a8d0b9 	.word	0x68a8d0b9
   35b70:	4180f103 	.word	0x4180f103
   35b74:	f8503901 	.word	0xf8503901
   35b78:	f857c021 	.word	0xf857c021
   35b7c:	0089e021 	.word	0x0089e021
   35b80:	440845e6 	.word	0x440845e6
   35b84:	0201eb07 	.word	0x0201eb07
   35b88:	d83ad3ab 	.word	0xd83ad3ab
   35b8c:	e0064601 	.word	0xe0064601
   35b90:	7d04f851 	.word	0x7d04f851
   35b94:	0d04f852 	.word	0x0d04f852
   35b98:	d8a24287 	.word	0xd8a24287
   35b9c:	3b01d331 	.word	0x3b01d331
   35ba0:	e79ed1f6 	.word	0xe79ed1f6
   35ba4:	462b2500 	.word	0x462b2500
   35ba8:	f85168b1 	.word	0xf85168b1
   35bac:	35016b04 	.word	0x35016b04
   35bb0:	f8411af2 	.word	0xf8411af2
   35bb4:	f85c2c04 	.word	0xf85c2c04
   35bb8:	460c7b04 	.word	0x460c7b04
   35bbc:	bf2c42ba 	.word	0xbf2c42ba
   35bc0:	0e00f04f 	.word	0x0e00f04f
   35bc4:	0e01f04f 	.word	0x0e01f04f
   35bc8:	429e1bd2 	.word	0x429e1bd2
   35bcc:	4673bf2c 	.word	0x4673bf2c
   35bd0:	0301f10e 	.word	0x0301f10e
   35bd4:	f8414285 	.word	0xf8414285
   35bd8:	d3e62c04 	.word	0xd3e62c04
   35bdc:	e7a4b90b 	.word	0xe7a4b90b
   35be0:	68222301 	.word	0x68222301
   35be4:	429a1ad1 	.word	0x429a1ad1
   35be8:	1b04f844 	.word	0x1b04f844
   35bec:	e79cd3f8 	.word	0xe79cd3f8
   35bf0:	a8014621 	.word	0xa8014621
   35bf4:	fedcf7ff 	.word	0xfedcf7ff
   35bf8:	28004607 	.word	0x28004607
   35bfc:	ac01d196 	.word	0xac01d196
   35c00:	f06fe776 	.word	0xf06fe776
   35c04:	46380709 	.word	0x46380709
   35c08:	bdf0b005 	.word	0xbdf0b005

00035c0c <symbol_0006ccd>:
   35c0c:	7310f242 	.word	0x7310f242
   35c10:	41f0e92d 	.word	0x41f0e92d
   35c14:	4256684f 	.word	0x4256684f
   35c18:	429f4316 	.word	0x429f4316
   35c1c:	16c0f3c6 	.word	0x16c0f3c6
   35c20:	6842d84f 	.word	0x6842d84f
   35c24:	42974604 	.word	0x42974604
   35c28:	d82c460d 	.word	0xd82c460d
   35c2c:	68236829 	.word	0x68236829
   35c30:	f106fb01 	.word	0xf106fb01
   35c34:	0701f1c6 	.word	0x0701f1c6
   35c38:	1307fb03 	.word	0x1307fb03
   35c3c:	686b6023 	.word	0x686b6023
   35c40:	2300b18b 	.word	0x2300b18b
   35c44:	68aa68a1 	.word	0x68aa68a1
   35c48:	0023f851 	.word	0x0023f851
   35c4c:	2023f852 	.word	0x2023f852
   35c50:	f007fb00 	.word	0xf007fb00
   35c54:	0206fb02 	.word	0x0206fb02
   35c58:	2023f841 	.word	0x2023f841
   35c5c:	3301686a 	.word	0x3301686a
   35c60:	d8ef429a 	.word	0xd8ef429a
   35c64:	42936862 	.word	0x42936862
   35c68:	009ad20a 	.word	0x009ad20a
   35c6c:	330168a0 	.word	0x330168a0
   35c70:	fb075881 	.word	0xfb075881
   35c74:	5081f101 	.word	0x5081f101
   35c78:	32046861 	.word	0x32046861
   35c7c:	d8f54299 	.word	0xd8f54299
   35c80:	e8bd2000 	.word	0xe8bd2000
   35c84:	210481f0 	.word	0x210481f0
   35c88:	f0034638 	.word	0xf0034638
   35c8c:	4680fa61 	.word	0x4680fa61
   35c90:	68a1b1b8 	.word	0x68a1b1b8
   35c94:	6862b189 	.word	0x6862b189
   35c98:	f7e40092 	.word	0xf7e40092
   35c9c:	e9d4f909 	.word	0xe9d4f909
   35ca0:	1e532001 	.word	0x1e532001
   35ca4:	2200b13a 	.word	0x2200b13a
   35ca8:	1c593b01 	.word	0x1c593b01
   35cac:	f1006002 	.word	0xf1006002
   35cb0:	d1f90004 	.word	0xd1f90004
   35cb4:	f00368a0 	.word	0xf00368a0
   35cb8:	463afa5f 	.word	0x463afa5f
   35cbc:	7801e9c4 	.word	0x7801e9c4
   35cc0:	f06fe7b4 	.word	0xf06fe7b4
   35cc4:	e7dc000f 	.word	0xe7dc000f

00035cc8 <symbol_000b345>:
   35cc8:	6845b5f8 	.word	0x6845b5f8
   35ccc:	460e4604 	.word	0x460e4604
   35cd0:	6887b19d 	.word	0x6887b19d
   35cd4:	463800aa 	.word	0x463800aa
   35cd8:	f00a2100 	.word	0xf00a2100
   35cdc:	2e00f837 	.word	0x2e00f837
   35ce0:	2301bfac 	.word	0x2301bfac
   35ce4:	33fff04f 	.word	0x33fff04f
   35ce8:	71e6ea86 	.word	0x71e6ea86
   35cec:	eba168a2 	.word	0xeba168a2
   35cf0:	601171e6 	.word	0x601171e6
   35cf4:	20006023 	.word	0x20006023
   35cf8:	2104bdf8 	.word	0x2104bdf8
   35cfc:	f0032001 	.word	0xf0032001
   35d00:	4607fa27 	.word	0x4607fa27
   35d04:	68a1b1b8 	.word	0x68a1b1b8
   35d08:	6862b181 	.word	0x6862b181
   35d0c:	f7e40092 	.word	0xf7e40092
   35d10:	e9d4f8cf 	.word	0xe9d4f8cf
   35d14:	1e532001 	.word	0x1e532001
   35d18:	3b01b132 	.word	0x3b01b132
   35d1c:	60051c5a 	.word	0x60051c5a
   35d20:	0004f100 	.word	0x0004f100
   35d24:	68a0d1f9 	.word	0x68a0d1f9
   35d28:	fa26f003 	.word	0xfa26f003
   35d2c:	22042301 	.word	0x22042301
   35d30:	3701e9c4 	.word	0x3701e9c4
   35d34:	f06fe7cf 	.word	0xf06fe7cf
   35d38:	bdf8000f 	.word	0xbdf8000f

00035d3c <symbol_0007f0f>:
   35d3c:	ebb16843 	.word	0xebb16843
   35d40:	d2091f43 	.word	0xd2091f43
   35d44:	094a6883 	.word	0x094a6883
   35d48:	0022f853 	.word	0x0022f853
   35d4c:	011ff001 	.word	0x011ff001
   35d50:	f00040c8 	.word	0xf00040c8
   35d54:	47700001 	.word	0x47700001
   35d58:	47702000 	.word	0x47702000

00035d5c <symbol_00030c0>:
   35d5c:	b3136843 	.word	0xb3136843
   35d60:	6882b410 	.word	0x6882b410
   35d64:	d0241e58 	.word	0xd0241e58
   35d68:	1020f852 	.word	0x1020f852
   35d6c:	f103b9e9 	.word	0xf103b9e9
   35d70:	3b014380 	.word	0x3b014380
   35d74:	0383eb02 	.word	0x0383eb02
   35d78:	f853e002 	.word	0xf853e002
   35d7c:	b9a11d04 	.word	0xb9a11d04
   35d80:	d1fa3801 	.word	0xd1fa3801
   35d84:	68112420 	.word	0x68112420
   35d88:	f04f2200 	.word	0xf04f2200
   35d8c:	e0024300 	.word	0xe0024300
   35d90:	2a203201 	.word	0x2a203201
   35d94:	420bd004 	.word	0x420bd004
   35d98:	0353ea4f 	.word	0x0353ea4f
   35d9c:	1aa0d0f8 	.word	0x1aa0d0f8
   35da0:	4b04f85d 	.word	0x4b04f85d
   35da4:	46184770 	.word	0x46184770
   35da8:	01404770 	.word	0x01404770
   35dac:	0420f100 	.word	0x0420f100
   35db0:	6811e7ea 	.word	0x6811e7ea
   35db4:	e7e72420 	.word	0xe7e72420

00035db8 <symbol_000b7da>:
   35db8:	b3236843 	.word	0xb3236843
   35dbc:	6882b410 	.word	0x6882b410
   35dc0:	d0261e58 	.word	0xd0261e58
   35dc4:	1020f852 	.word	0x1020f852
   35dc8:	f103b9f9 	.word	0xf103b9f9
   35dcc:	3b014380 	.word	0x3b014380
   35dd0:	0383eb02 	.word	0x0383eb02
   35dd4:	f853e002 	.word	0xf853e002
   35dd8:	b9b11d04 	.word	0xb9b11d04
   35ddc:	d1fa3801 	.word	0xd1fa3801
   35de0:	68112420 	.word	0x68112420
   35de4:	f04f2200 	.word	0xf04f2200
   35de8:	e0024300 	.word	0xe0024300
   35dec:	2a203201 	.word	0x2a203201
   35df0:	420bd004 	.word	0x420bd004
   35df4:	0353ea4f 	.word	0x0353ea4f
   35df8:	1aa0d0f8 	.word	0x1aa0d0f8
   35dfc:	08c03007 	.word	0x08c03007
   35e00:	4b04f85d 	.word	0x4b04f85d
   35e04:	46184770 	.word	0x46184770
   35e08:	01404770 	.word	0x01404770
   35e0c:	0420f100 	.word	0x0420f100
   35e10:	6811e7e8 	.word	0x6811e7e8
   35e14:	e7e52420 	.word	0xe7e52420

00035e18 <symbol_000eaf4>:
   35e18:	43f8e92d 	.word	0x43f8e92d
   35e1c:	460f4605 	.word	0x460f4605
   35e20:	2a004616 	.word	0x2a004616
   35e24:	780cd07e 	.word	0x780cd07e
   35e28:	b124460b 	.word	0xb124460b
   35e2c:	f813e07e 	.word	0xf813e07e
   35e30:	2a002f01 	.word	0x2a002f01
   35e34:	3401d146 	.word	0x3401d146
   35e38:	d1f842a6 	.word	0xd1f842a6
   35e3c:	8004f8d5 	.word	0x8004f8d5
   35e40:	0f00f1b8 	.word	0x0f00f1b8
   35e44:	2104d169 	.word	0x2104d169
   35e48:	f0032001 	.word	0xf0032001
   35e4c:	4681f981 	.word	0x4681f981
   35e50:	d06d2800 	.word	0xd06d2800
   35e54:	b18968a9 	.word	0xb18968a9
   35e58:	0092686a 	.word	0x0092686a
   35e5c:	f828f7e4 	.word	0xf828f7e4
   35e60:	2001e9d5 	.word	0x2001e9d5
   35e64:	b13a1e53 	.word	0xb13a1e53
   35e68:	3b014642 	.word	0x3b014642
   35e6c:	60021c59 	.word	0x60021c59
   35e70:	0004f100 	.word	0x0004f100
   35e74:	68a8d1f9 	.word	0x68a8d1f9
   35e78:	f97ef003 	.word	0xf97ef003
   35e7c:	22042301 	.word	0x22042301
   35e80:	3901e9c5 	.word	0x3901e9c5
   35e84:	46482100 	.word	0x46482100
   35e88:	ff60f009 	.word	0xff60f009
   35e8c:	22012300 	.word	0x22012300
   35e90:	42a668a9 	.word	0x42a668a9
   35e94:	602a600b 	.word	0x602a600b
   35e98:	eb07d911 	.word	0xeb07d911
   35e9c:	1b340c06 	.word	0x1b340c06
   35ea0:	f02368ae 	.word	0xf02368ae
   35ea4:	00df0103 	.word	0x00df0103
   35ea8:	0d01f81c 	.word	0x0d01f81c
   35eac:	f0075872 	.word	0xf0075872
   35eb0:	40b80718 	.word	0x40b80718
   35eb4:	43023301 	.word	0x43023301
   35eb8:	507242a3 	.word	0x507242a3
   35ebc:	2000d1f0 	.word	0x2000d1f0
   35ec0:	83f8e8bd 	.word	0x83f8e8bd
   35ec4:	f0121b32 	.word	0xf0121b32
   35ec8:	bf180803 	.word	0xbf180803
   35ecc:	0801f04f 	.word	0x0801f04f
   35ed0:	7310f242 	.word	0x7310f242
   35ed4:	0892eb08 	.word	0x0892eb08
   35ed8:	d8294598 	.word	0xd8294598
   35edc:	4598686b 	.word	0x4598686b
   35ee0:	2104d929 	.word	0x2104d929
   35ee4:	f0034640 	.word	0xf0034640
   35ee8:	4681f933 	.word	0x4681f933
   35eec:	68a9b300 	.word	0x68a9b300
   35ef0:	686ab189 	.word	0x686ab189
   35ef4:	f7e30092 	.word	0xf7e30092
   35ef8:	e9d5ffdb 	.word	0xe9d5ffdb
   35efc:	1e532001 	.word	0x1e532001
   35f00:	2200b13a 	.word	0x2200b13a
   35f04:	1c593b01 	.word	0x1c593b01
   35f08:	f1006002 	.word	0xf1006002
   35f0c:	d1f90004 	.word	0xd1f90004
   35f10:	f00368a8 	.word	0xf00368a8
   35f14:	e9c5f931 	.word	0xe9c5f931
   35f18:	ea4f8901 	.word	0xea4f8901
   35f1c:	f8d50288 	.word	0xf8d50288
   35f20:	e7af9008 	.word	0xe7af9008
   35f24:	8004f8d0 	.word	0x8004f8d0
   35f28:	e7894614 	.word	0xe7894614
   35f2c:	e7ca2400 	.word	0xe7ca2400
   35f30:	000ff06f 	.word	0x000ff06f
   35f34:	4698e7c4 	.word	0x4698e7c4
   35f38:	bf00e782 	.word	0xbf00e782

00035f3c <symbol_000116e>:
   35f3c:	41f0e92d 	.word	0x41f0e92d
   35f40:	46886844 	.word	0x46886844
   35f44:	d03e2c00 	.word	0xd03e2c00
   35f48:	1e624615 	.word	0x1e624615
   35f4c:	68804607 	.word	0x68804607
   35f50:	f850d040 	.word	0xf850d040
   35f54:	bb991022 	.word	0xbb991022
   35f58:	4380f104 	.word	0x4380f104
   35f5c:	eb003b01 	.word	0xeb003b01
   35f60:	e0020383 	.word	0xe0020383
   35f64:	1d04f853 	.word	0x1d04f853
   35f68:	3a01bb51 	.word	0x3a01bb51
   35f6c:	2627d1fa 	.word	0x2627d1fa
   35f70:	22006801 	.word	0x22006801
   35f74:	4300f04f 	.word	0x4300f04f
   35f78:	3201e002 	.word	0x3201e002
   35f7c:	d0032a20 	.word	0xd0032a20
   35f80:	ea4f420b 	.word	0xea4f420b
   35f84:	d0f80353 	.word	0xd0f80353
   35f88:	08f61ab6 	.word	0x08f61ab6
   35f8c:	d32442b5 	.word	0xd32442b5
   35f90:	2100462a 	.word	0x2100462a
   35f94:	f0094640 	.word	0xf0094640
   35f98:	b176fed9 	.word	0xb176fed9
   35f9c:	44a82300 	.word	0x44a82300
   35fa0:	f02368b9 	.word	0xf02368b9
   35fa4:	588c0203 	.word	0x588c0203
   35fa8:	f00500dd 	.word	0xf00500dd
   35fac:	33010518 	.word	0x33010518
   35fb0:	42b340ec 	.word	0x42b340ec
   35fb4:	4d01f808 	.word	0x4d01f808
   35fb8:	2000d1f2 	.word	0x2000d1f2
   35fbc:	81f0e8bd 	.word	0x81f0e8bd
   35fc0:	36270156 	.word	0x36270156
   35fc4:	4608e7d5 	.word	0x4608e7d5
   35fc8:	f0094621 	.word	0xf0094621
   35fcc:	4620febf 	.word	0x4620febf
   35fd0:	81f0e8bd 	.word	0x81f0e8bd
   35fd4:	26276801 	.word	0x26276801
   35fd8:	f06fe7cb 	.word	0xf06fe7cb
   35fdc:	e7ed0007 	.word	0xe7ed0007

00035fe0 <symbol_0004fb7>:
   35fe0:	41f0e92d 	.word	0x41f0e92d
   35fe4:	46046843 	.word	0x46046843
   35fe8:	f001094d 	.word	0xf001094d
   35fec:	b343061f 	.word	0xb343061f
   35ff0:	f8d01e5a 	.word	0xf8d01e5a
   35ff4:	f000e008 	.word	0xf000e008
   35ff8:	f85e8099 	.word	0xf85e8099
   35ffc:	f1bcc022 	.word	0xf1bcc022
   36000:	f0400f00 	.word	0xf0400f00
   36004:	f103809c 	.word	0xf103809c
   36008:	38014080 	.word	0x38014080
   3600c:	0080eb0e 	.word	0x0080eb0e
   36010:	f850e003 	.word	0xf850e003
   36014:	2f007d04 	.word	0x2f007d04
   36018:	3a01d15e 	.word	0x3a01d15e
   3601c:	f04fd1f9 	.word	0xf04fd1f9
   36020:	f8de0820 	.word	0xf8de0820
   36024:	20007000 	.word	0x20007000
   36028:	4200f04f 	.word	0x4200f04f
   3602c:	3001e002 	.word	0x3001e002
   36030:	d0052820 	.word	0xd0052820
   36034:	ea4f423a 	.word	0xea4f423a
   36038:	d0f80252 	.word	0xd0f80252
   3603c:	0c00eba8 	.word	0x0c00eba8
   36040:	ebb14461 	.word	0xebb14461
   36044:	d90b1f43 	.word	0xd90b1f43
   36048:	021ff011 	.word	0x021ff011
   3604c:	2201bf18 	.word	0x2201bf18
   36050:	7010f242 	.word	0x7010f242
   36054:	1751eb02 	.word	0x1751eb02
   36058:	d86d4287 	.word	0xd86d4287
   3605c:	d840429f 	.word	0xd840429f
   36060:	429db1f5 	.word	0x429db1f5
   36064:	f06fd25d 	.word	0xf06fd25d
   36068:	1b7f4740 	.word	0x1b7f4740
   3606c:	ebc719da 	.word	0xebc719da
   36070:	00927787 	.word	0x00927787
   36074:	68a000bf 	.word	0x68a000bf
   36078:	19c13b01 	.word	0x19c13b01
   3607c:	44115880 	.word	0x44115880
   36080:	f841429d 	.word	0xf841429d
   36084:	f1a20c04 	.word	0xf1a20c04
   36088:	d1f40204 	.word	0xd1f40204
   3608c:	f1032100 	.word	0xf1032100
   36090:	3b014380 	.word	0x3b014380
   36094:	68a2009b 	.word	0x68a2009b
   36098:	3b0450d1 	.word	0x3b0450d1
   3609c:	d1fa1d1a 	.word	0xd1fa1d1a
   360a0:	6863b1be 	.word	0x6863b1be
   360a4:	d214429d 	.word	0xd214429d
   360a8:	f1c62700 	.word	0xf1c62700
   360ac:	00ab0c20 	.word	0x00ab0c20
   360b0:	350168a0 	.word	0x350168a0
   360b4:	fa0158c1 	.word	0xfa0158c1
   360b8:	50c2f206 	.word	0x50c2f206
   360bc:	58c268a0 	.word	0x58c268a0
   360c0:	50c2433a 	.word	0x50c2433a
   360c4:	fa216862 	.word	0xfa216862
   360c8:	42aaf70c 	.word	0x42aaf70c
   360cc:	0304f103 	.word	0x0304f103
   360d0:	2000d8ee 	.word	0x2000d8ee
   360d4:	81f0e8bd 	.word	0x81f0e8bd
   360d8:	1c42ea4f 	.word	0x1c42ea4f
   360dc:	0820f10c 	.word	0x0820f10c
   360e0:	2104e7a1 	.word	0x2104e7a1
   360e4:	f0034638 	.word	0xf0034638
   360e8:	4680f833 	.word	0x4680f833
   360ec:	68a1b320 	.word	0x68a1b320
   360f0:	6862b189 	.word	0x6862b189
   360f4:	f7e30092 	.word	0xf7e30092
   360f8:	e9d4fedb 	.word	0xe9d4fedb
   360fc:	1e532001 	.word	0x1e532001
   36100:	2200b13a 	.word	0x2200b13a
   36104:	1c593b01 	.word	0x1c593b01
   36108:	f1006002 	.word	0xf1006002
   3610c:	d1f90004 	.word	0xd1f90004
   36110:	f00368a0 	.word	0xf00368a0
   36114:	463bf831 	.word	0x463bf831
   36118:	7801e9c4 	.word	0x7801e9c4
   3611c:	d0bf2d00 	.word	0xd0bf2d00
   36120:	2b00e79f 	.word	0x2b00e79f
   36124:	2e00d1b2 	.word	0x2e00d1b2
   36128:	e7d2d1bb 	.word	0xe7d2d1bb
   3612c:	7000f8de 	.word	0x7000f8de
   36130:	f04f4694 	.word	0xf04f4694
   36134:	e7760820 	.word	0xe7760820
   36138:	000ff06f 	.word	0x000ff06f
   3613c:	0152e7ca 	.word	0x0152e7ca
   36140:	f1024667 	.word	0xf1024667
   36144:	46940820 	.word	0x46940820
   36148:	bf00e76d 	.word	0xbf00e76d

0003614c <symbol_0000994>:
   3614c:	6844b5f8 	.word	0x6844b5f8
   36150:	42ac094d 	.word	0x42ac094d
   36154:	f001d33a 	.word	0xf001d33a
   36158:	d032011f 	.word	0xd032011f
   3615c:	2300b1b5 	.word	0x2300b1b5
   36160:	688400aa 	.word	0x688400aa
   36164:	320458a6 	.word	0x320458a6
   36168:	6023f844 	.word	0x6023f844
   3616c:	33016844 	.word	0x33016844
   36170:	429e1b66 	.word	0x429e1b66
   36174:	429cd8f5 	.word	0x429cd8f5
   36178:	2500d908 	.word	0x2500d908
   3617c:	6884009a 	.word	0x6884009a
   36180:	50a53301 	.word	0x50a53301
   36184:	32046844 	.word	0x32046844
   36188:	d8f8429c 	.word	0xd8f8429c
   3618c:	b1b4b1b9 	.word	0xb1b4b1b9
   36190:	f1042700 	.word	0xf1042700
   36194:	3b014380 	.word	0x3b014380
   36198:	f1c1009b 	.word	0xf1c1009b
   3619c:	68860c20 	.word	0x68860c20
   361a0:	58f53c01 	.word	0x58f53c01
   361a4:	f201fa25 	.word	0xf201fa25
   361a8:	688650f2 	.word	0x688650f2
   361ac:	ea4258f2 	.word	0xea4258f2
   361b0:	50f20207 	.word	0x50f20207
   361b4:	f70cfa05 	.word	0xf70cfa05
   361b8:	0304f1a3 	.word	0x0304f1a3
   361bc:	2000d1ef 	.word	0x2000d1ef
   361c0:	b919bdf8 	.word	0xb919bdf8
   361c4:	d0fa2c00 	.word	0xd0fa2c00
   361c8:	e7d6460b 	.word	0xe7d6460b
   361cc:	b1644605 	.word	0xb1644605
   361d0:	00a26886 	.word	0x00a26886
   361d4:	21004630 	.word	0x21004630
   361d8:	fdb8f009 	.word	0xfdb8f009
   361dc:	22012300 	.word	0x22012300
   361e0:	461868a9 	.word	0x461868a9
   361e4:	602a600b 	.word	0x602a600b
   361e8:	2104bdf8 	.word	0x2104bdf8
   361ec:	f0022001 	.word	0xf0022001
   361f0:	4606ffaf 	.word	0x4606ffaf
   361f4:	68a9b1b8 	.word	0x68a9b1b8
   361f8:	686ab181 	.word	0x686ab181
   361fc:	f7e30092 	.word	0xf7e30092
   36200:	e9d5fe57 	.word	0xe9d5fe57
   36204:	1e532001 	.word	0x1e532001
   36208:	3b01b132 	.word	0x3b01b132
   3620c:	60041c5a 	.word	0x60041c5a
   36210:	0004f100 	.word	0x0004f100
   36214:	68a8d1f9 	.word	0x68a8d1f9
   36218:	ffaef002 	.word	0xffaef002
   3621c:	22042301 	.word	0x22042301
   36220:	3601e9c5 	.word	0x3601e9c5
   36224:	f06fe7d6 	.word	0xf06fe7d6
   36228:	bdf8000f 	.word	0xbdf8000f

0003622c <symbol_000242f>:
   3622c:	6843b470 	.word	0x6843b470
   36230:	b173684a 	.word	0xb173684a
   36234:	f1036884 	.word	0xf1036884
   36238:	3d014580 	.word	0x3d014580
   3623c:	6025f854 	.word	0x6025f854
   36240:	0485eb04 	.word	0x0485eb04
   36244:	e01ab11e 	.word	0xe01ab11e
   36248:	5d04f854 	.word	0x5d04f854
   3624c:	3b01b9bd 	.word	0x3b01b9bd
   36250:	b18ad1fa 	.word	0xb18ad1fa
   36254:	4480f102 	.word	0x4480f102
   36258:	3c01688e 	.word	0x3c01688e
   3625c:	5024f856 	.word	0x5024f856
   36260:	eb06b9cd 	.word	0xeb06b9cd
   36264:	e0020484 	.word	0xe0020484
   36268:	5d04f854 	.word	0x5d04f854
   3626c:	3a01b98d 	.word	0x3a01b98d
   36270:	2b00d1fa 	.word	0x2b00d1fa
   36274:	6802d037 	.word	0x6802d037
   36278:	bc704610 	.word	0xbc704610
   3627c:	2a004770 	.word	0x2a004770
   36280:	f102d0f9 	.word	0xf102d0f9
   36284:	688e4480 	.word	0x688e4480
   36288:	f8563c01 	.word	0xf8563c01
   3628c:	2d005024 	.word	0x2d005024
   36290:	4293d0e7 	.word	0x4293d0e7
   36294:	4293d8ef 	.word	0x4293d8ef
   36298:	d2036809 	.word	0xd2036809
   3629c:	424abc70 	.word	0x424abc70
   362a0:	47704610 	.word	0x47704610
   362a4:	2a006802 	.word	0x2a006802
   362a8:	2900dd01 	.word	0x2900dd01
   362ac:	2900db24 	.word	0x2900db24
   362b0:	2a00dd01 	.word	0x2a00dd01
   362b4:	b1b3db1d 	.word	0xb1b3db1d
   362b8:	f1036884 	.word	0xf1036884
   362bc:	39014180 	.word	0x39014180
   362c0:	5021f854 	.word	0x5021f854
   362c4:	0021f856 	.word	0x0021f856
   362c8:	42850089 	.word	0x42850089
   362cc:	4431440c 	.word	0x4431440c
   362d0:	d30cd8d2 	.word	0xd30cd8d2
   362d4:	d0063b01 	.word	0xd0063b01
   362d8:	5d04f854 	.word	0x5d04f854
   362dc:	0d04f851 	.word	0x0d04f851
   362e0:	d9f64285 	.word	0xd9f64285
   362e4:	461ae7c8 	.word	0x461ae7c8
   362e8:	4610bc70 	.word	0x4610bc70
   362ec:	42524770 	.word	0x42524770
   362f0:	f04fe7c2 	.word	0xf04fe7c2
   362f4:	e7bf32ff 	.word	0xe7bf32ff
   362f8:	e7bd2201 	.word	0xe7bd2201

000362fc <symbol_000ccad>:
   362fc:	2900b4f0 	.word	0x2900b4f0
   36300:	68434605 	.word	0x68434605
   36304:	2b00db32 	.word	0x2b00db32
   36308:	6886d042 	.word	0x6886d042
   3630c:	4280f103 	.word	0x4280f103
   36310:	f8563a01 	.word	0xf8563a01
   36314:	eb060022 	.word	0xeb060022
   36318:	b9680282 	.word	0xb9680282
   3631c:	30fff04f 	.word	0x30fff04f
   36320:	e0022701 	.word	0xe0022701
   36324:	4d04f852 	.word	0x4d04f852
   36328:	3b01b93c 	.word	0x3b01b93c
   3632c:	2900d1fa 	.word	0x2900d1fa
   36330:	2000bf08 	.word	0x2000bf08
   36334:	4770bcf0 	.word	0x4770bcf0
   36338:	b1a12701 	.word	0xb1a12701
   3633c:	d8122b01 	.word	0xd8122b01
   36340:	28006828 	.word	0x28006828
   36344:	1c7bdd01 	.word	0x1c7bdd01
   36348:	2f01d01e 	.word	0x2f01d01e
   3634c:	2800d101 	.word	0x2800d101
   36350:	2900db24 	.word	0x2900db24
   36354:	bfb86833 	.word	0xbfb86833
   36358:	42994249 	.word	0x42994249
   3635c:	d815d3ea 	.word	0xd815d3ea
   36360:	2000bcf0 	.word	0x2000bcf0
   36364:	68284770 	.word	0x68284770
   36368:	4770bcf0 	.word	0x4770bcf0
   3636c:	6886b163 	.word	0x6886b163
   36370:	4280f103 	.word	0x4280f103
   36374:	f8563a01 	.word	0xf8563a01
   36378:	eb060022 	.word	0xeb060022
   3637c:	b9500282 	.word	0xb9500282
   36380:	f04f2001 	.word	0xf04f2001
   36384:	e7d037ff 	.word	0xe7d037ff
   36388:	e7d32001 	.word	0xe7d32001
   3638c:	e7d14240 	.word	0xe7d14240
   36390:	30fff04f 	.word	0x30fff04f
   36394:	f04fe7cb 	.word	0xf04fe7cb
   36398:	e7cf37ff 	.word	0xe7cf37ff
   3639c:	30fff04f 	.word	0x30fff04f
   363a0:	bf00e7c8 	.word	0xbf00e7c8

000363a4 <symbol_000c914>:
   363a4:	e92d4290 	.word	0xe92d4290
   363a8:	460747f0 	.word	0x460747f0
   363ac:	d006460c 	.word	0xd006460c
   363b0:	46154288 	.word	0x46154288
   363b4:	f7ffd002 	.word	0xf7ffd002
   363b8:	b9a0fafb 	.word	0xb9a0fafb
   363bc:	2301462c 	.word	0x2301462c
   363c0:	6865603b 	.word	0x6865603b
   363c4:	68a3b175 	.word	0x68a3b175
   363c8:	4280f105 	.word	0x4280f105
   363cc:	f8533a01 	.word	0xf8533a01
   363d0:	eb031022 	.word	0xeb031022
   363d4:	b1190282 	.word	0xb1190282
   363d8:	f852e007 	.word	0xf852e007
   363dc:	b9211d04 	.word	0xb9211d04
   363e0:	d1fa3d01 	.word	0xd1fa3d01
   363e4:	e8bd2000 	.word	0xe8bd2000
   363e8:	f24287f0 	.word	0xf24287f0
   363ec:	42957210 	.word	0x42957210
   363f0:	687ad875 	.word	0x687ad875
   363f4:	d27642aa 	.word	0xd27642aa
   363f8:	46282104 	.word	0x46282104
   363fc:	fea8f002 	.word	0xfea8f002
   36400:	28004606 	.word	0x28004606
   36404:	68b9d06b 	.word	0x68b9d06b
   36408:	687ab189 	.word	0x687ab189
   3640c:	f7e30092 	.word	0xf7e30092
   36410:	e9d7fd4f 	.word	0xe9d7fd4f
   36414:	1e532001 	.word	0x1e532001
   36418:	2200b13a 	.word	0x2200b13a
   3641c:	1c593b01 	.word	0x1c593b01
   36420:	f1006002 	.word	0xf1006002
   36424:	d1f90004 	.word	0xd1f90004
   36428:	f00268b8 	.word	0xf00268b8
   3642c:	e9c7fea5 	.word	0xe9c7fea5
   36430:	68a35601 	.word	0x68a35601
   36434:	ea4f2400 	.word	0xea4f2400
   36438:	f1a30a85 	.word	0xf1a30a85
   3643c:	eb060c04 	.word	0xeb060c04
   36440:	2200000a 	.word	0x2200000a
   36444:	f10c6833 	.word	0xf10c6833
   36448:	f8dc0c04 	.word	0xf8dc0c04
   3644c:	191b1000 	.word	0x191b1000
   36450:	bf284614 	.word	0xbf284614
   36454:	185b2201 	.word	0x185b2201
   36458:	2401bf28 	.word	0x2401bf28
   3645c:	3b04f846 	.word	0x3b04f846
   36460:	44144286 	.word	0x44144286
   36464:	2c00d1ed 	.word	0x2c00d1ed
   36468:	f242d0bc 	.word	0xf242d0bc
   3646c:	f04f7810 	.word	0xf04f7810
   36470:	e00f0900 	.word	0xe00f0900
   36474:	eb0568bd 	.word	0xeb0568bd
   36478:	6803000a 	.word	0x6803000a
   3647c:	191c2200 	.word	0x191c2200
   36480:	2201bf28 	.word	0x2201bf28
   36484:	4b04f840 	.word	0x4b04f840
   36488:	0a04f10a 	.word	0x0a04f10a
   3648c:	24014635 	.word	0x24014635
   36490:	d0a72a00 	.word	0xd0a72a00
   36494:	1c6e687b 	.word	0x1c6e687b
   36498:	d8ee42ab 	.word	0xd8ee42ab
   3649c:	d81e4546 	.word	0xd81e4546
   364a0:	d2e742b3 	.word	0xd2e742b3
   364a4:	46302104 	.word	0x46302104
   364a8:	fe52f002 	.word	0xfe52f002
   364ac:	b1b04605 	.word	0xb1b04605
   364b0:	b18968b9 	.word	0xb18968b9
   364b4:	0092687a 	.word	0x0092687a
   364b8:	fcfaf7e3 	.word	0xfcfaf7e3
   364bc:	2001e9d7 	.word	0x2001e9d7
   364c0:	b13a1e53 	.word	0xb13a1e53
   364c4:	1c5a3b01 	.word	0x1c5a3b01
   364c8:	9000f8c0 	.word	0x9000f8c0
   364cc:	0004f100 	.word	0x0004f100
   364d0:	68b8d1f8 	.word	0x68b8d1f8
   364d4:	fe50f002 	.word	0xfe50f002
   364d8:	6501e9c7 	.word	0x6501e9c7
   364dc:	f06fe7cb 	.word	0xf06fe7cb
   364e0:	e8bd000f 	.word	0xe8bd000f
   364e4:	68be87f0 	.word	0x68be87f0
   364e8:	bf00e7a4 	.word	0xbf00e7a4

000364ec <symbol_0004fdf>:
   364ec:	684bb5f0 	.word	0x684bb5f0
   364f0:	b085460d 	.word	0xb085460d
   364f4:	46064614 	.word	0x46064614
   364f8:	b17b6851 	.word	0xb17b6851
   364fc:	f10368a8 	.word	0xf10368a8
   36500:	3a014280 	.word	0x3a014280
   36504:	7022f850 	.word	0x7022f850
   36508:	0082eb00 	.word	0x0082eb00
   3650c:	e04fb127 	.word	0xe04fb127
   36510:	2d04f850 	.word	0x2d04f850
   36514:	d14b2a00 	.word	0xd14b2a00
   36518:	d1f93b01 	.word	0xd1f93b01
   3651c:	f101b189 	.word	0xf101b189
   36520:	68a74080 	.word	0x68a74080
   36524:	f8573801 	.word	0xf8573801
   36528:	2a002020 	.word	0x2a002020
   3652c:	8099f040 	.word	0x8099f040
   36530:	0080eb07 	.word	0x0080eb07
   36534:	f850e003 	.word	0xf850e003
   36538:	2a002d04 	.word	0x2a002d04
   3653c:	3901d142 	.word	0x3901d142
   36540:	2300d1f9 	.word	0x2300d1f9
   36544:	42b42201 	.word	0x42b42201
   36548:	2301e9cd 	.word	0x2301e9cd
   3654c:	d07f9303 	.word	0xd07f9303
   36550:	d00542b5 	.word	0xd00542b5
   36554:	46304629 	.word	0x46304629
   36558:	fa2af7ff 	.word	0xfa2af7ff
   3655c:	b9a84607 	.word	0xb9a84607
   36560:	60332301 	.word	0x60332301
   36564:	b1806860 	.word	0xb1806860
   36568:	c008f8d4 	.word	0xc008f8d4
   3656c:	4380f100 	.word	0x4380f100
   36570:	f85c3b01 	.word	0xf85c3b01
   36574:	eb0c2023 	.word	0xeb0c2023
   36578:	b1220383 	.word	0xb1220383
   3657c:	f853e042 	.word	0xf853e042
   36580:	2a002d04 	.word	0x2a002d04
   36584:	3801d13e 	.word	0x3801d13e
   36588:	2700d1f9 	.word	0x2700d1f9
   3658c:	b1609803 	.word	0xb1609803
   36590:	1e539a02 	.word	0x1e539a02
   36594:	2200b13a 	.word	0x2200b13a
   36598:	1c593b01 	.word	0x1c593b01
   3659c:	f1006002 	.word	0xf1006002
   365a0:	d1f90004 	.word	0xd1f90004
   365a4:	f0029803 	.word	0xf0029803
   365a8:	4638fde7 	.word	0x4638fde7
   365ac:	bdf0b005 	.word	0xbdf0b005
   365b0:	d0c62900 	.word	0xd0c62900
   365b4:	4080f101 	.word	0x4080f101
   365b8:	380168a7 	.word	0x380168a7
   365bc:	2020f857 	.word	0x2020f857
   365c0:	d0b52a00 	.word	0xd0b52a00
   365c4:	d8bc428b 	.word	0xd8bc428b
   365c8:	2b00d34b 	.word	0x2b00d34b
   365cc:	68a8d0b9 	.word	0x68a8d0b9
   365d0:	4180f103 	.word	0x4180f103
   365d4:	f8503901 	.word	0xf8503901
   365d8:	f857c021 	.word	0xf857c021
   365dc:	0089e021 	.word	0x0089e021
   365e0:	440845e6 	.word	0x440845e6
   365e4:	0201eb07 	.word	0x0201eb07
   365e8:	d83ad3ab 	.word	0xd83ad3ab
   365ec:	e0064601 	.word	0xe0064601
   365f0:	7d04f851 	.word	0x7d04f851
   365f4:	0d04f852 	.word	0x0d04f852
   365f8:	d8a24287 	.word	0xd8a24287
   365fc:	3b01d331 	.word	0x3b01d331
   36600:	e79ed1f6 	.word	0xe79ed1f6
   36604:	462b2500 	.word	0x462b2500
   36608:	f85168b1 	.word	0xf85168b1
   3660c:	35016b04 	.word	0x35016b04
   36610:	f8411af2 	.word	0xf8411af2
   36614:	f85c2c04 	.word	0xf85c2c04
   36618:	460c7b04 	.word	0x460c7b04
   3661c:	bf2c42ba 	.word	0xbf2c42ba
   36620:	0e00f04f 	.word	0x0e00f04f
   36624:	0e01f04f 	.word	0x0e01f04f
   36628:	429e1bd2 	.word	0x429e1bd2
   3662c:	4673bf2c 	.word	0x4673bf2c
   36630:	0301f10e 	.word	0x0301f10e
   36634:	f8414285 	.word	0xf8414285
   36638:	d3e62c04 	.word	0xd3e62c04
   3663c:	e7a4b90b 	.word	0xe7a4b90b
   36640:	68222301 	.word	0x68222301
   36644:	429a1ad1 	.word	0x429a1ad1
   36648:	1b04f844 	.word	0x1b04f844
   3664c:	e79cd3f8 	.word	0xe79cd3f8
   36650:	a8014621 	.word	0xa8014621
   36654:	f9acf7ff 	.word	0xf9acf7ff
   36658:	28004607 	.word	0x28004607
   3665c:	ac01d196 	.word	0xac01d196
   36660:	f06fe776 	.word	0xf06fe776
   36664:	46380709 	.word	0x46380709
   36668:	bdf0b005 	.word	0xbdf0b005

0003666c <symbol_0005cc7>:
   3666c:	41f0e92d 	.word	0x41f0e92d
   36670:	6813680c 	.word	0x6813680c
   36674:	fb034605 	.word	0xfb034605
   36678:	2b00f304 	.word	0x2b00f304
   3667c:	684bda39 	.word	0x684bda39
   36680:	460e4617 	.word	0x460e4617
   36684:	b1836852 	.word	0xb1836852
   36688:	f1036889 	.word	0xf1036889
   3668c:	38014080 	.word	0x38014080
   36690:	c020f851 	.word	0xc020f851
   36694:	0180eb01 	.word	0x0180eb01
   36698:	0f00f1bc 	.word	0x0f00f1bc
   3669c:	e02ed003 	.word	0xe02ed003
   366a0:	0d04f851 	.word	0x0d04f851
   366a4:	3b01bb58 	.word	0x3b01bb58
   366a8:	b17ad1fa 	.word	0xb17ad1fa
   366ac:	4180f102 	.word	0x4180f102
   366b0:	c008f8d7 	.word	0xc008f8d7
   366b4:	f85c3901 	.word	0xf85c3901
   366b8:	b9780021 	.word	0xb9780021
   366bc:	0181eb0c 	.word	0x0181eb0c
   366c0:	f851e002 	.word	0xf851e002
   366c4:	bb280d04 	.word	0xbb280d04
   366c8:	d1fa3a01 	.word	0xd1fa3a01
   366cc:	4631463a 	.word	0x4631463a
   366d0:	f7ff4628 	.word	0xf7ff4628
   366d4:	b148ff0b 	.word	0xb148ff0b
   366d8:	81f0e8bd 	.word	0x81f0e8bd
   366dc:	46394632 	.word	0x46394632
   366e0:	f7ff4628 	.word	0xf7ff4628
   366e4:	2800ff03 	.word	0x2800ff03
   366e8:	4264d1f6 	.word	0x4264d1f6
   366ec:	e8bd602c 	.word	0xe8bd602c
   366f0:	f7ff81f0 	.word	0xf7ff81f0
   366f4:	2800fe57 	.word	0x2800fe57
   366f8:	602cd1ee 	.word	0x602cd1ee
   366fc:	2a00e7f7 	.word	0x2a00e7f7
   36700:	f102d0e4 	.word	0xf102d0e4
   36704:	f8d74180 	.word	0xf8d74180
   36708:	3901c008 	.word	0x3901c008
   3670c:	0021f85c 	.word	0x0021f85c
   36710:	d0d32800 	.word	0xd0d32800
   36714:	d8d94293 	.word	0xd8d94293
   36718:	2b00d3e0 	.word	0x2b00d3e0
   3671c:	68b0d0d6 	.word	0x68b0d0d6
   36720:	4180f103 	.word	0x4180f103
   36724:	f8503901 	.word	0xf8503901
   36728:	f85c8021 	.word	0xf85c8021
   3672c:	0089e021 	.word	0x0089e021
   36730:	440845f0 	.word	0x440845f0
   36734:	0201eb0c 	.word	0x0201eb0c
   36738:	d3cfd8c8 	.word	0xd3cfd8c8
   3673c:	e0064601 	.word	0xe0064601
   36740:	cd04f851 	.word	0xcd04f851
   36744:	0d04f852 	.word	0x0d04f852
   36748:	d8bf4584 	.word	0xd8bf4584
   3674c:	3b01d3c6 	.word	0x3b01d3c6
   36750:	e7bbd1f6 	.word	0xe7bbd1f6

00036754 <symbol_000d773>:
   36754:	41f0e92d 	.word	0x41f0e92d
   36758:	6813680c 	.word	0x6813680c
   3675c:	fb034605 	.word	0xfb034605
   36760:	2b00f304 	.word	0x2b00f304
   36764:	684bdd64 	.word	0x684bdd64
   36768:	460e4617 	.word	0x460e4617
   3676c:	b1836852 	.word	0xb1836852
   36770:	f1036889 	.word	0xf1036889
   36774:	38014080 	.word	0x38014080
   36778:	c020f851 	.word	0xc020f851
   3677c:	0180eb01 	.word	0x0180eb01
   36780:	0f00f1bc 	.word	0x0f00f1bc
   36784:	e01fd003 	.word	0xe01fd003
   36788:	0d04f851 	.word	0x0d04f851
   3678c:	3b01b9e0 	.word	0x3b01b9e0
   36790:	b182d1fa 	.word	0xb182d1fa
   36794:	4180f102 	.word	0x4180f102
   36798:	c008f8d7 	.word	0xc008f8d7
   3679c:	f85c3901 	.word	0xf85c3901
   367a0:	28000021 	.word	0x28000021
   367a4:	eb0cd13b 	.word	0xeb0cd13b
   367a8:	e0020181 	.word	0xe0020181
   367ac:	0d04f851 	.word	0x0d04f851
   367b0:	3a01b9a8 	.word	0x3a01b9a8
   367b4:	463ad1fa 	.word	0x463ad1fa
   367b8:	46284631 	.word	0x46284631
   367bc:	fe96f7ff 	.word	0xfe96f7ff
   367c0:	602cb900 	.word	0x602cb900
   367c4:	81f0e8bd 	.word	0x81f0e8bd
   367c8:	d0f42a00 	.word	0xd0f42a00
   367cc:	4180f102 	.word	0x4180f102
   367d0:	c008f8d7 	.word	0xc008f8d7
   367d4:	f85c3901 	.word	0xf85c3901
   367d8:	28000021 	.word	0x28000021
   367dc:	4293d0e3 	.word	0x4293d0e3
   367e0:	d31cd8e9 	.word	0xd31cd8e9
   367e4:	d0e62b00 	.word	0xd0e62b00
   367e8:	f10368b0 	.word	0xf10368b0
   367ec:	39014180 	.word	0x39014180
   367f0:	8021f850 	.word	0x8021f850
   367f4:	e021f85c 	.word	0xe021f85c
   367f8:	45f00089 	.word	0x45f00089
   367fc:	eb0c4408 	.word	0xeb0c4408
   36800:	d8d80201 	.word	0xd8d80201
   36804:	4601d30b 	.word	0x4601d30b
   36808:	f851e006 	.word	0xf851e006
   3680c:	f852cd04 	.word	0xf852cd04
   36810:	45840d04 	.word	0x45840d04
   36814:	d302d8cf 	.word	0xd302d8cf
   36818:	d1f63b01 	.word	0xd1f63b01
   3681c:	4632e7cb 	.word	0x4632e7cb
   36820:	46284639 	.word	0x46284639
   36824:	fe62f7ff 	.word	0xfe62f7ff
   36828:	d1cb2800 	.word	0xd1cb2800
   3682c:	e7c84264 	.word	0xe7c84264
   36830:	fdb8f7ff 	.word	0xfdb8f7ff
   36834:	d0c42800 	.word	0xd0c42800
   36838:	81f0e8bd 	.word	0x81f0e8bd

0003683c <symbol_000f268>:
   3683c:	bfac2a00 	.word	0xbfac2a00
   36840:	f04f2301 	.word	0xf04f2301
   36844:	b5f033ff 	.word	0xb5f033ff
   36848:	680d2601 	.word	0x680d2601
   3684c:	7ce2ea82 	.word	0x7ce2ea82
   36850:	f703fb05 	.word	0xf703fb05
   36854:	ebacb085 	.word	0xebacb085
   36858:	2f007ce2 	.word	0x2f007ce2
   3685c:	e9cd9602 	.word	0xe9cd9602
   36860:	f8cdc300 	.word	0xf8cdc300
   36864:	4606d00c 	.word	0x4606d00c
   36868:	684bdd2c 	.word	0x684bdd2c
   3686c:	b173460c 	.word	0xb173460c
   36870:	f10368a7 	.word	0xf10368a7
   36874:	39014180 	.word	0x39014180
   36878:	0021f857 	.word	0x0021f857
   3687c:	0181eb07 	.word	0x0181eb07
   36880:	e00eb118 	.word	0xe00eb118
   36884:	0d04f851 	.word	0x0d04f851
   36888:	3b01b958 	.word	0x3b01b958
   3688c:	b982d1fa 	.word	0xb982d1fa
   36890:	aa014621 	.word	0xaa014621
   36894:	f7ff4630 	.word	0xf7ff4630
   36898:	b900f8f9 	.word	0xb900f8f9
   3689c:	b0056035 	.word	0xb0056035
   368a0:	2a00bdf0 	.word	0x2a00bdf0
   368a4:	2b01d0f4 	.word	0x2b01d0f4
   368a8:	683bd8f2 	.word	0x683bd8f2
   368ac:	d3ef459c 	.word	0xd3ef459c
   368b0:	4622d9ee 	.word	0x4622d9ee
   368b4:	4630a901 	.word	0x4630a901
   368b8:	fe18f7ff 	.word	0xfe18f7ff
   368bc:	d1ee2800 	.word	0xd1ee2800
   368c0:	e7eb426d 	.word	0xe7eb426d
   368c4:	f7ffaa01 	.word	0xf7ffaa01
   368c8:	2800fd6d 	.word	0x2800fd6d
   368cc:	b005d0e6 	.word	0xb005d0e6
   368d0:	bf00bdf0 	.word	0xbf00bdf0

000368d4 <symbol_000b923>:
   368d4:	47f0e92d 	.word	0x47f0e92d
   368d8:	23004606 	.word	0x23004606
   368dc:	b0862001 	.word	0xb0862001
   368e0:	4690428e 	.word	0x4690428e
   368e4:	90039000 	.word	0x90039000
   368e8:	3301e9cd 	.word	0x3301e9cd
   368ec:	3304e9cd 	.word	0x3304e9cd
   368f0:	80d1f000 	.word	0x80d1f000
   368f4:	4546460f 	.word	0x4546460f
   368f8:	80d5f000 	.word	0x80d5f000
   368fc:	b185687d 	.word	0xb185687d
   36900:	f10568bb 	.word	0xf10568bb
   36904:	3a014280 	.word	0x3a014280
   36908:	1022f853 	.word	0x1022f853
   3690c:	0382eb03 	.word	0x0382eb03
   36910:	e0bab129 	.word	0xe0bab129
   36914:	2d04f853 	.word	0x2d04f853
   36918:	f0402a00 	.word	0xf0402a00
   3691c:	3d0180b6 	.word	0x3d0180b6
   36920:	f8d8d1f8 	.word	0xf8d8d1f8
   36924:	25004004 	.word	0x25004004
   36928:	d03d2c00 	.word	0xd03d2c00
   3692c:	3008f8d8 	.word	0x3008f8d8
   36930:	4280f104 	.word	0x4280f104
   36934:	f8533a01 	.word	0xf8533a01
   36938:	eb031022 	.word	0xeb031022
   3693c:	b1190382 	.word	0xb1190382
   36940:	f853e004 	.word	0xf853e004
   36944:	b90a2d04 	.word	0xb90a2d04
   36948:	d1fa3c01 	.word	0xd1fa3c01
   3694c:	7310f242 	.word	0x7310f242
   36950:	0905eb04 	.word	0x0905eb04
   36954:	f2004599 	.word	0xf2004599
   36958:	f8d680b0 	.word	0xf8d680b0
   3695c:	45d1a004 	.word	0x45d1a004
   36960:	2104d925 	.word	0x2104d925
   36964:	f0024648 	.word	0xf0024648
   36968:	4682fbf3 	.word	0x4682fbf3
   3696c:	f0002800 	.word	0xf0002800
   36970:	68b180a4 	.word	0x68b180a4
   36974:	6872b189 	.word	0x6872b189
   36978:	f7e30092 	.word	0xf7e30092
   3697c:	e9d6fa99 	.word	0xe9d6fa99
   36980:	1e532001 	.word	0x1e532001
   36984:	2200b13a 	.word	0x2200b13a
   36988:	1c593b01 	.word	0x1c593b01
   3698c:	f1006002 	.word	0xf1006002
   36990:	d1f90004 	.word	0xd1f90004
   36994:	f00268b0 	.word	0xf00268b0
   36998:	e9c6fbef 	.word	0xe9c6fbef
   3699c:	ea4f9a01 	.word	0xea4f9a01
   369a0:	f8d60289 	.word	0xf8d60289
   369a4:	e0259008 	.word	0xe0259008
   369a8:	f8d64625 	.word	0xf8d64625
   369ac:	f1baa004 	.word	0xf1baa004
   369b0:	f0400f00 	.word	0xf0400f00
   369b4:	21048085 	.word	0x21048085
   369b8:	f0022001 	.word	0xf0022001
   369bc:	4681fbc9 	.word	0x4681fbc9
   369c0:	d07a2800 	.word	0xd07a2800
   369c4:	b18968b1 	.word	0xb18968b1
   369c8:	00926872 	.word	0x00926872
   369cc:	fa70f7e3 	.word	0xfa70f7e3
   369d0:	2001e9d6 	.word	0x2001e9d6
   369d4:	b13a1e53 	.word	0xb13a1e53
   369d8:	3b014652 	.word	0x3b014652
   369dc:	60021c59 	.word	0x60021c59
   369e0:	0004f100 	.word	0x0004f100
   369e4:	68b0d1f9 	.word	0x68b0d1f9
   369e8:	fbc6f002 	.word	0xfbc6f002
   369ec:	22042301 	.word	0x22042301
   369f0:	3901e9c6 	.word	0x3901e9c6
   369f4:	46482100 	.word	0x46482100
   369f8:	f9a8f009 	.word	0xf9a8f009
   369fc:	23012100 	.word	0x23012100
   36a00:	601168b2 	.word	0x601168b2
   36a04:	b19c6033 	.word	0xb19c6033
   36a08:	4980f104 	.word	0x4980f104
   36a0c:	39fff109 	.word	0x39fff109
   36a10:	0989ea4f 	.word	0x0989ea4f
   36a14:	3008f8d8 	.word	0x3008f8d8
   36a18:	f85368b2 	.word	0xf85368b2
   36a1c:	444a3009 	.word	0x444a3009
   36a20:	462868b9 	.word	0x462868b9
   36a24:	fc14f7fe 	.word	0xfc14f7fe
   36a28:	f1a93c01 	.word	0xf1a93c01
   36a2c:	d1f10904 	.word	0xd1f10904
   36a30:	683a2400 	.word	0x683a2400
   36a34:	3000f8d8 	.word	0x3000f8d8
   36a38:	f302fb03 	.word	0xf302fb03
   36a3c:	98056033 	.word	0x98056033
   36a40:	9a04b160 	.word	0x9a04b160
   36a44:	b13a1e53 	.word	0xb13a1e53
   36a48:	3b012200 	.word	0x3b012200
   36a4c:	60021c5d 	.word	0x60021c5d
   36a50:	0004f100 	.word	0x0004f100
   36a54:	9805d1f9 	.word	0x9805d1f9
   36a58:	fb8ef002 	.word	0xfb8ef002
   36a5c:	23012200 	.word	0x23012200
   36a60:	e9cd9802 	.word	0xe9cd9802
   36a64:	92053203 	.word	0x92053203
   36a68:	9901b158 	.word	0x9901b158
   36a6c:	b1311e4b 	.word	0xb1311e4b
   36a70:	1c593b01 	.word	0x1c593b01
   36a74:	f1006002 	.word	0xf1006002
   36a78:	d1f90004 	.word	0xd1f90004
   36a7c:	f0029802 	.word	0xf0029802
   36a80:	4620fb7b 	.word	0x4620fb7b
   36a84:	e8bdb006 	.word	0xe8bdb006
   36a88:	f8d887f0 	.word	0xf8d887f0
   36a8c:	2c004004 	.word	0x2c004004
   36a90:	af4cf47f 	.word	0xaf4cf47f
   36a94:	4668e75a 	.word	0x4668e75a
   36a98:	ff8af7fe 	.word	0xff8af7fe
   36a9c:	28004604 	.word	0x28004604
   36aa0:	466fd1cd 	.word	0x466fd1cd
   36aa4:	a803e727 	.word	0xa803e727
   36aa8:	f7fe4631 	.word	0xf7fe4631
   36aac:	4604ff81 	.word	0x4604ff81
   36ab0:	d1c42800 	.word	0xd1c42800
   36ab4:	080cf10d 	.word	0x080cf10d
   36ab8:	f06fe720 	.word	0xf06fe720
   36abc:	e7be040f 	.word	0xe7be040f
   36ac0:	e76c46d1 	.word	0xe76c46d1

00036ac4 <symbol_0008c0f>:
   36ac4:	b5002301 	.word	0xb5002301
   36ac8:	9200b085 	.word	0x9200b085
   36acc:	e9cdaa01 	.word	0xe9cdaa01
   36ad0:	f8cd3301 	.word	0xf8cd3301
   36ad4:	f7ffd00c 	.word	0xf7ffd00c
   36ad8:	b005fefd 	.word	0xb005fefd
   36adc:	fb04f85d 	.word	0xfb04f85d

00036ae0 <symbol_0007bb0>:
   36ae0:	4ff0e92d 	.word	0x4ff0e92d
   36ae4:	b0a3685e 	.word	0xb0a3685e
   36ae8:	f8d3b196 	.word	0xf8d3b196
   36aec:	f1068008 	.word	0xf1068008
   36af0:	f1094980 	.word	0xf1094980
   36af4:	f85839ff 	.word	0xf85839ff
   36af8:	eb085029 	.word	0xeb085029
   36afc:	b96d0e89 	.word	0xb96d0e89
   36b00:	463746f4 	.word	0x463746f4
   36b04:	f85ce002 	.word	0xf85ce002
   36b08:	b93c4d04 	.word	0xb93c4d04
   36b0c:	d1fa3f01 	.word	0xd1fa3f01
   36b10:	060bf06f 	.word	0x060bf06f
   36b14:	b0234630 	.word	0xb0234630
   36b18:	8ff0e8bd 	.word	0x8ff0e8bd
   36b1c:	2d00681d 	.word	0x2d00681d
   36b20:	4614d0f6 	.word	0x4614d0f6
   36b24:	2200468a 	.word	0x2200468a
   36b28:	469b2101 	.word	0x469b2101
   36b2c:	46056863 	.word	0x46056863
   36b30:	91139110 	.word	0x91139110
   36b34:	91199116 	.word	0x91199116
   36b38:	e9cd911c 	.word	0xe9cd911c
   36b3c:	e9cd2211 	.word	0xe9cd2211
   36b40:	e9cd2214 	.word	0xe9cd2214
   36b44:	e9cd2217 	.word	0xe9cd2217
   36b48:	e9cd221a 	.word	0xe9cd221a
   36b4c:	2b00221d 	.word	0x2b00221d
   36b50:	821af000 	.word	0x821af000
   36b54:	f10368a2 	.word	0xf10368a2
   36b58:	39014180 	.word	0x39014180
   36b5c:	0021f852 	.word	0x0021f852
   36b60:	0281eb02 	.word	0x0281eb02
   36b64:	e07bb120 	.word	0xe07bb120
   36b68:	1d04f852 	.word	0x1d04f852
   36b6c:	d1772900 	.word	0xd1772900
   36b70:	d1f93b01 	.word	0xd1f93b01
   36b74:	2029f858 	.word	0x2029f858
   36b78:	d1772a00 	.word	0xd1772a00
   36b7c:	e0034672 	.word	0xe0034672
   36b80:	1d04f852 	.word	0x1d04f852
   36b84:	d16f2900 	.word	0xd16f2900
   36b88:	d1f93e01 	.word	0xd1f93e01
   36b8c:	4621a810 	.word	0x4621a810
   36b90:	ff0ef7fe 	.word	0xff0ef7fe
   36b94:	28004606 	.word	0x28004606
   36b98:	8092f000 	.word	0x8092f000
   36b9c:	98122700 	.word	0x98122700
   36ba0:	9a11b160 	.word	0x9a11b160
   36ba4:	b13a1e53 	.word	0xb13a1e53
   36ba8:	3b012200 	.word	0x3b012200
   36bac:	60021c5c 	.word	0x60021c5c
   36bb0:	0004f100 	.word	0x0004f100
   36bb4:	9812d1f9 	.word	0x9812d1f9
   36bb8:	fadef002 	.word	0xfadef002
   36bbc:	23012200 	.word	0x23012200
   36bc0:	e9cd9815 	.word	0xe9cd9815
   36bc4:	92123210 	.word	0x92123210
   36bc8:	9914b158 	.word	0x9914b158
   36bcc:	b1311e4b 	.word	0xb1311e4b
   36bd0:	1c593b01 	.word	0x1c593b01
   36bd4:	f1006002 	.word	0xf1006002
   36bd8:	d1f90004 	.word	0xd1f90004
   36bdc:	f0029815 	.word	0xf0029815
   36be0:	2200facb 	.word	0x2200facb
   36be4:	98182301 	.word	0x98182301
   36be8:	3213e9cd 	.word	0x3213e9cd
   36bec:	b1589215 	.word	0xb1589215
   36bf0:	1e4b9917 	.word	0x1e4b9917
   36bf4:	3b01b131 	.word	0x3b01b131
   36bf8:	60021c5d 	.word	0x60021c5d
   36bfc:	0004f100 	.word	0x0004f100
   36c00:	9818d1f9 	.word	0x9818d1f9
   36c04:	fab8f002 	.word	0xfab8f002
   36c08:	23012200 	.word	0x23012200
   36c0c:	e9cd981b 	.word	0xe9cd981b
   36c10:	92183216 	.word	0x92183216
   36c14:	991ab158 	.word	0x991ab158
   36c18:	b1311e4b 	.word	0xb1311e4b
   36c1c:	1c5c3b01 	.word	0x1c5c3b01
   36c20:	f1006002 	.word	0xf1006002
   36c24:	d1f90004 	.word	0xd1f90004
   36c28:	f002981b 	.word	0xf002981b
   36c2c:	2100faa5 	.word	0x2100faa5
   36c30:	911b2301 	.word	0x911b2301
   36c34:	3119e9cd 	.word	0x3119e9cd
   36c38:	f43f2f00 	.word	0xf43f2f00
   36c3c:	9a1daf6b 	.word	0x9a1daf6b
   36c40:	b1321e53 	.word	0xb1321e53
   36c44:	3b01463a 	.word	0x3b01463a
   36c48:	60111c58 	.word	0x60111c58
   36c4c:	0204f102 	.word	0x0204f102
   36c50:	4638d1f9 	.word	0x4638d1f9
   36c54:	fa90f002 	.word	0xfa90f002
   36c58:	b0234630 	.word	0xb0234630
   36c5c:	8ff0e8bd 	.word	0x8ff0e8bd
   36c60:	2029f858 	.word	0x2029f858
   36c64:	d0892a00 	.word	0xd0892a00
   36c68:	d38f429e 	.word	0xd38f429e
   36c6c:	f200429e 	.word	0xf200429e
   36c70:	2b008190 	.word	0x2b008190
   36c74:	68a1d08a 	.word	0x68a1d08a
   36c78:	4280f103 	.word	0x4280f103
   36c7c:	f8513a01 	.word	0xf8513a01
   36c80:	f8580022 	.word	0xf8580022
   36c84:	00926022 	.word	0x00926022
   36c88:	44114286 	.word	0x44114286
   36c8c:	f4ff4490 	.word	0xf4ff4490
   36c90:	f200af7d 	.word	0xf200af7d
   36c94:	460a817e 	.word	0x460a817e
   36c98:	f852e008 	.word	0xf852e008
   36c9c:	f8580d04 	.word	0xf8580d04
   36ca0:	42881d04 	.word	0x42881d04
   36ca4:	af72f63f 	.word	0xaf72f63f
   36ca8:	8173f0c0 	.word	0x8173f0c0
   36cac:	d1f43b01 	.word	0xd1f43b01
   36cb0:	4621a810 	.word	0x4621a810
   36cb4:	fe7cf7fe 	.word	0xfe7cf7fe
   36cb8:	28004606 	.word	0x28004606
   36cbc:	af6ef47f 	.word	0xaf6ef47f
   36cc0:	4659a813 	.word	0x4659a813
   36cc4:	fe74f7fe 	.word	0xfe74f7fe
   36cc8:	28004606 	.word	0x28004606
   36ccc:	af66f47f 	.word	0xaf66f47f
   36cd0:	7210f242 	.word	0x7210f242
   36cd4:	68672301 	.word	0x68672301
   36cd8:	37029313 	.word	0x37029313
   36cdc:	93104297 	.word	0x93104297
   36ce0:	8193f200 	.word	0x8193f200
   36ce4:	805cf8dd 	.word	0x805cf8dd
   36ce8:	d91d4547 	.word	0xd91d4547
   36cec:	46382104 	.word	0x46382104
   36cf0:	fa2ef002 	.word	0xfa2ef002
   36cf4:	28004681 	.word	0x28004681
   36cf8:	8187f000 	.word	0x8187f000
   36cfc:	b1819918 	.word	0xb1819918
   36d00:	00929a17 	.word	0x00929a17
   36d04:	f8d4f7e3 	.word	0xf8d4f7e3
   36d08:	2017e9dd 	.word	0x2017e9dd
   36d0c:	b1321e53 	.word	0xb1321e53
   36d10:	1c5a3b01 	.word	0x1c5a3b01
   36d14:	f1006006 	.word	0xf1006006
   36d18:	d1f90004 	.word	0xd1f90004
   36d1c:	f0029818 	.word	0xf0029818
   36d20:	46b8fa2b 	.word	0x46b8fa2b
   36d24:	7917e9cd 	.word	0x7917e9cd
   36d28:	0f00f1b8 	.word	0x0f00f1b8
   36d2c:	8171f000 	.word	0x8171f000
   36d30:	ea4f9e18 	.word	0xea4f9e18
   36d34:	27000288 	.word	0x27000288
   36d38:	46394630 	.word	0x46394630
   36d3c:	f806f009 	.word	0xf806f009
   36d40:	9b182201 	.word	0x9b182201
   36d44:	9b1a601f 	.word	0x9b1a601f
   36d48:	42939216 	.word	0x42939216
   36d4c:	81b2f240 	.word	0x81b2f240
   36d50:	20032104 	.word	0x20032104
   36d54:	f9fcf002 	.word	0xf9fcf002
   36d58:	28004607 	.word	0x28004607
   36d5c:	8155f000 	.word	0x8155f000
   36d60:	9a142303 	.word	0x9a142303
   36d64:	301de9cd 	.word	0x301de9cd
   36d68:	2a009203 	.word	0x2a009203
   36d6c:	8171f000 	.word	0x8171f000
   36d70:	0901f1b2 	.word	0x0901f1b2
   36d74:	f0009915 	.word	0xf0009915
   36d78:	f85181cf 	.word	0xf85181cf
   36d7c:	28000029 	.word	0x28000029
   36d80:	81c5f040 	.word	0x81c5f040
   36d84:	4280f102 	.word	0x4280f102
   36d88:	464b3a01 	.word	0x464b3a01
   36d8c:	0282eb01 	.word	0x0282eb01
   36d90:	f852e004 	.word	0xf852e004
   36d94:	28000d04 	.word	0x28000d04
   36d98:	81aef040 	.word	0x81aef040
   36d9c:	d1f83b01 	.word	0xd1f83b01
   36da0:	68082620 	.word	0x68082620
   36da4:	f04f2200 	.word	0xf04f2200
   36da8:	e0024100 	.word	0xe0024100
   36dac:	2a203201 	.word	0x2a203201
   36db0:	4201d004 	.word	0x4201d004
   36db4:	0151ea4f 	.word	0x0151ea4f
   36db8:	1ab3d0f8 	.word	0x1ab3d0f8
   36dbc:	031ff003 	.word	0x031ff003
   36dc0:	f0402b1f 	.word	0xf0402b1f
   36dc4:	2300819f 	.word	0x2300819f
   36dc8:	9b119302 	.word	0x9b119302
   36dcc:	9304a813 	.word	0x9304a813
   36dd0:	eba33b01 	.word	0xeba33b01
   36dd4:	93010809 	.word	0x93010809
   36dd8:	1348ea4f 	.word	0x1348ea4f
   36ddc:	93054619 	.word	0x93054619
   36de0:	f8fef7ff 	.word	0xf8fef7ff
   36de4:	28004606 	.word	0x28004606
   36de8:	aed9f47f 	.word	0xaed9f47f
   36dec:	0888ea4f 	.word	0x0888ea4f
   36df0:	9818e00d 	.word	0x9818e00d
   36df4:	f850a910 	.word	0xf850a910
   36df8:	aa133008 	.word	0xaa133008
   36dfc:	f8403301 	.word	0xf8403301
   36e00:	46083008 	.word	0x46083008
   36e04:	fca6f7ff 	.word	0xfca6f7ff
   36e08:	f0402800 	.word	0xf0402800
   36e0c:	a9138179 	.word	0xa9138179
   36e10:	f7ffa810 	.word	0xf7ffa810
   36e14:	2800fa0b 	.word	0x2800fa0b
   36e18:	9905daeb 	.word	0x9905daeb
   36e1c:	f7ffa813 	.word	0xf7ffa813
   36e20:	4606f995 	.word	0x4606f995
   36e24:	f47f2800 	.word	0xf47f2800
   36e28:	f06faeba 	.word	0xf06faeba
   36e2c:	9a030303 	.word	0x9a030303
   36e30:	b508e9cd 	.word	0xb508e9cd
   36e34:	4780f102 	.word	0x4780f102
   36e38:	fb039a04 	.word	0xfb039a04
   36e3c:	f102f309 	.word	0xf102f309
   36e40:	3a024280 	.word	0x3a024280
   36e44:	46150092 	.word	0x46150092
   36e48:	ea4f9305 	.word	0xea4f9305
   36e4c:	93030389 	.word	0x93030389
   36e50:	63c9ebc9 	.word	0x63c9ebc9
   36e54:	e9cd3f02 	.word	0xe9cd3f02
   36e58:	e9cd3006 	.word	0xe9cd3006
   36e5c:	00b9a40a 	.word	0x00b9a40a
   36e60:	9b019104 	.word	0x9b019104
   36e64:	f240454b 	.word	0xf240454b
   36e68:	98038173 	.word	0x98038173
   36e6c:	9a159912 	.word	0x9a159912
   36e70:	0a04f105 	.word	0x0a04f105
   36e74:	f8515812 	.word	0xf8515812
   36e78:	9805300a 	.word	0x9805300a
   36e7c:	eb004293 	.word	0xeb004293
   36e80:	9e180405 	.word	0x9e180405
   36e84:	814cf0c0 	.word	0x814cf0c0
   36e88:	33fff04f 	.word	0x33fff04f
   36e8c:	26015133 	.word	0x26015133
   36e90:	9f1e9a18 	.word	0x9f1e9a18
   36e94:	f1a55913 	.word	0xf1a55913
   36e98:	44330b04 	.word	0x44330b04
   36e9c:	e04b5113 	.word	0xe04b5113
   36ea0:	806cf8dd 	.word	0x806cf8dd
   36ea4:	46400092 	.word	0x46400092
   36ea8:	f0082100 	.word	0xf0082100
   36eac:	2200ff4f 	.word	0x2200ff4f
   36eb0:	601a9b1b 	.word	0x601a9b1b
   36eb4:	f1b99619 	.word	0xf1b99619
   36eb8:	f0000f00 	.word	0xf0000f00
   36ebc:	9b1580f9 	.word	0x9b1580f9
   36ec0:	589b9a04 	.word	0x589b9a04
   36ec4:	99039a1b 	.word	0x99039a1b
   36ec8:	9a156013 	.word	0x9a156013
   36ecc:	58529b1b 	.word	0x58529b1b
   36ed0:	605aa919 	.word	0x605aa919
   36ed4:	f10d9b18 	.word	0xf10d9b18
   36ed8:	591b083c 	.word	0x591b083c
   36edc:	4608aa1f 	.word	0x4608aa1f
   36ee0:	e9cd930f 	.word	0xe9cd930f
   36ee4:	f8cd661f 	.word	0xf8cd661f
   36ee8:	f7ff8084 	.word	0xf7ff8084
   36eec:	2800fcf3 	.word	0x2800fcf3
   36ef0:	8106f040 	.word	0x8106f040
   36ef4:	2a009a1d 	.word	0x2a009a1d
   36ef8:	80c2f000 	.word	0x80c2f000
   36efc:	21000092 	.word	0x21000092
   36f00:	f0084638 	.word	0xf0084638
   36f04:	2300ff23 	.word	0x2300ff23
   36f08:	9b01603b 	.word	0x9b01603b
   36f0c:	2b01961c 	.word	0x2b01961c
   36f10:	9b12a91c 	.word	0x9b12a91c
   36f14:	80edf000 	.word	0x80edf000
   36f18:	300bf853 	.word	0x300bf853
   36f1c:	603ba819 	.word	0x603ba819
   36f20:	595b9b12 	.word	0x595b9b12
   36f24:	9b12607b 	.word	0x9b12607b
   36f28:	300af853 	.word	0x300af853
   36f2c:	f7ff60bb 	.word	0xf7ff60bb
   36f30:	2800f97d 	.word	0x2800f97d
   36f34:	811cf340 	.word	0x811cf340
   36f38:	59139a18 	.word	0x59139a18
   36f3c:	51133b01 	.word	0x51133b01
   36f40:	2a009a1a 	.word	0x2a009a1a
   36f44:	2104d1ac 	.word	0x2104d1ac
   36f48:	f0022001 	.word	0xf0022001
   36f4c:	4680f901 	.word	0x4680f901
   36f50:	f0002800 	.word	0xf0002800
   36f54:	991b8140 	.word	0x991b8140
   36f58:	9a1ab191 	.word	0x9a1ab191
   36f5c:	f7e20092 	.word	0xf7e20092
   36f60:	e9ddffa7 	.word	0xe9ddffa7
   36f64:	4602101a 	.word	0x4602101a
   36f68:	b1391e4b 	.word	0xb1391e4b
   36f6c:	3b012100 	.word	0x3b012100
   36f70:	1c596011 	.word	0x1c596011
   36f74:	0204f102 	.word	0x0204f102
   36f78:	981bd1f8 	.word	0x981bd1f8
   36f7c:	f8fcf002 	.word	0xf8fcf002
   36f80:	e9cd2204 	.word	0xe9cd2204
   36f84:	e78e681a 	.word	0xe78e681a
   36f88:	2029f858 	.word	0x2029f858
   36f8c:	f43f2a00 	.word	0xf43f2a00
   36f90:	b355adf5 	.word	0xb355adf5
   36f94:	b9ee686e 	.word	0xb9ee686e
   36f98:	20012104 	.word	0x20012104
   36f9c:	f8d8f002 	.word	0xf8d8f002
   36fa0:	b3904607 	.word	0xb3904607
   36fa4:	b18168a9 	.word	0xb18168a9
   36fa8:	0092686a 	.word	0x0092686a
   36fac:	ff80f7e2 	.word	0xff80f7e2
   36fb0:	2001e9d5 	.word	0x2001e9d5
   36fb4:	b1321e53 	.word	0xb1321e53
   36fb8:	1c593b01 	.word	0x1c593b01
   36fbc:	f1006006 	.word	0xf1006006
   36fc0:	d1f90004 	.word	0xd1f90004
   36fc4:	f00268a8 	.word	0xf00268a8
   36fc8:	2301f8d7 	.word	0x2301f8d7
   36fcc:	e9c52204 	.word	0xe9c52204
   36fd0:	e0013701 	.word	0xe0013701
   36fd4:	00b268af 	.word	0x00b268af
   36fd8:	46382100 	.word	0x46382100
   36fdc:	feb6f008 	.word	0xfeb6f008
   36fe0:	23012100 	.word	0x23012100
   36fe4:	601168aa 	.word	0x601168aa
   36fe8:	f1ba602b 	.word	0xf1ba602b
   36fec:	d0070f00 	.word	0xd0070f00
   36ff0:	46504621 	.word	0x46504621
   36ff4:	fcdcf7fe 	.word	0xfcdcf7fe
   36ff8:	28004606 	.word	0x28004606
   36ffc:	adcef47f 	.word	0xadcef47f
   37000:	46302600 	.word	0x46302600
   37004:	e8bdb023 	.word	0xe8bdb023
   37008:	27008ff0 	.word	0x27008ff0
   3700c:	060ff06f 	.word	0x060ff06f
   37010:	2104e5c5 	.word	0x2104e5c5
   37014:	f0022001 	.word	0xf0022001
   37018:	4606f89b 	.word	0x4606f89b
   3701c:	d0f42800 	.word	0xd0f42800
   37020:	b1899918 	.word	0xb1899918
   37024:	00929a17 	.word	0x00929a17
   37028:	ff42f7e2 	.word	0xff42f7e2
   3702c:	3017e9dd 	.word	0x3017e9dd
   37030:	b13b1e5a 	.word	0xb13b1e5a
   37034:	3a014643 	.word	0x3a014643
   37038:	60031c57 	.word	0x60031c57
   3703c:	0004f100 	.word	0x0004f100
   37040:	9818d1f9 	.word	0x9818d1f9
   37044:	f898f002 	.word	0xf898f002
   37048:	22042301 	.word	0x22042301
   3704c:	3617e9cd 	.word	0x3617e9cd
   37050:	231fe671 	.word	0x231fe671
   37054:	93024619 	.word	0x93024619
   37058:	f7fea810 	.word	0xf7fea810
   3705c:	4606ffc1 	.word	0x4606ffc1
   37060:	f47f2800 	.word	0xf47f2800
   37064:	9902ad9c 	.word	0x9902ad9c
   37068:	f7fea813 	.word	0xf7fea813
   3706c:	4606ffb9 	.word	0x4606ffb9
   37070:	f47f2800 	.word	0xf47f2800
   37074:	9b14ad94 	.word	0x9b14ad94
   37078:	f1039303 	.word	0xf1039303
   3707c:	e6a439ff 	.word	0xe6a439ff
   37080:	20012104 	.word	0x20012104
   37084:	f002920d 	.word	0xf002920d
   37088:	4603f863 	.word	0x4603f863
   3708c:	f0002800 	.word	0xf0002800
   37090:	b14780a2 	.word	0xb14780a2
   37094:	46399a0d 	.word	0x46399a0d
   37098:	f7e2900c 	.word	0xf7e2900c
   3709c:	4638ff09 	.word	0x4638ff09
   370a0:	f86af002 	.word	0xf86af002
   370a4:	461f9b0c 	.word	0x461f9b0c
   370a8:	e9cd2204 	.word	0xe9cd2204
   370ac:	e726631d 	.word	0xe726631d
   370b0:	e707464b 	.word	0xe707464b
   370b4:	20022104 	.word	0x20022104
   370b8:	f84af002 	.word	0xf84af002
   370bc:	28004606 	.word	0x28004606
   370c0:	991bd0a3 	.word	0x991bd0a3
   370c4:	9a1ab189 	.word	0x9a1ab189
   370c8:	f7e20092 	.word	0xf7e20092
   370cc:	e9ddfef1 	.word	0xe9ddfef1
   370d0:	4618131a 	.word	0x4618131a
   370d4:	b1311e4a 	.word	0xb1311e4a
   370d8:	1c503a01 	.word	0x1c503a01
   370dc:	f103601f 	.word	0xf103601f
   370e0:	d1f90304 	.word	0xd1f90304
   370e4:	f002981b 	.word	0xf002981b
   370e8:	2302f847 	.word	0x2302f847
   370ec:	361ae9cd 	.word	0x361ae9cd
   370f0:	595be62e 	.word	0x595be62e
   370f4:	e715a819 	.word	0xe715a819
   370f8:	f103015b 	.word	0xf103015b
   370fc:	e6510620 	.word	0xe6510620
   37100:	e54c4606 	.word	0xe54c4606
   37104:	031ff1c3 	.word	0x031ff1c3
   37108:	46199302 	.word	0x46199302
   3710c:	ea4fe7a4 	.word	0xea4fe7a4
   37110:	f1031349 	.word	0xf1031349
   37114:	e6450620 	.word	0xe6450620
   37118:	26206808 	.word	0x26206808
   3711c:	e641464b 	.word	0xe641464b
   37120:	b192594f 	.word	0xb192594f
   37124:	f04f469c 	.word	0xf04f469c
   37128:	46610b00 	.word	0x46610b00
   3712c:	ea4b465b 	.word	0xea4b465b
   37130:	f7e10007 	.word	0xf7e10007
   37134:	2300fe43 	.word	0x2300fe43
   37138:	32fff04f 	.word	0x32fff04f
   3713c:	bf08428b 	.word	0xbf08428b
   37140:	d2004282 	.word	0xd2004282
   37144:	51304610 	.word	0x51304610
   37148:	f04fe6a1 	.word	0xf04fe6a1
   3714c:	e7fa30ff 	.word	0xe7fa30ff
   37150:	6b07e9dd 	.word	0x6b07e9dd
   37154:	5a09e9dd 	.word	0x5a09e9dd
   37158:	2d009c0b 	.word	0x2d009c0b
   3715c:	a916d05f 	.word	0xa916d05f
   37160:	f7fe4628 	.word	0xf7fe4628
   37164:	2800fc25 	.word	0x2800fc25
   37168:	4606d053 	.word	0x4606d053
   3716c:	e5169f1e 	.word	0xe5169f1e
   37170:	9b182501 	.word	0x9b182501
   37174:	591baa1f 	.word	0x591baa1f
   37178:	a819a913 	.word	0xa819a913
   3717c:	f8cd930f 	.word	0xf8cd930f
   37180:	e9cd8084 	.word	0xe9cd8084
   37184:	f7ff551f 	.word	0xf7ff551f
   37188:	2800fba5 	.word	0x2800fba5
   3718c:	9b06d1b8 	.word	0x9b06d1b8
   37190:	f1039a01 	.word	0xf1039a01
   37194:	3b016300 	.word	0x3b016300
   37198:	015e4413 	.word	0x015e4413
   3719c:	a8194631 	.word	0xa8194631
   371a0:	ff1ef7fe 	.word	0xff1ef7fe
   371a4:	d1ab2800 	.word	0xd1ab2800
   371a8:	aa19a910 	.word	0xaa19a910
   371ac:	f7ff4608 	.word	0xf7ff4608
   371b0:	4603fad1 	.word	0x4603fad1
   371b4:	a91fbb58 	.word	0xa91fbb58
   371b8:	930fa810 	.word	0x930fa810
   371bc:	551fe9cd 	.word	0x551fe9cd
   371c0:	8084f8cd 	.word	0x8084f8cd
   371c4:	fb2ef7fe 	.word	0xfb2ef7fe
   371c8:	db072800 	.word	0xdb072800
   371cc:	465d9b01 	.word	0x465d9b01
   371d0:	93013b01 	.word	0x93013b01
   371d4:	f06fe645 	.word	0xf06fe645
   371d8:	e4e0060f 	.word	0xe4e0060f
   371dc:	a819a913 	.word	0xa819a913
   371e0:	fbe6f7fe 	.word	0xfbe6f7fe
   371e4:	d18b2800 	.word	0xd18b2800
   371e8:	a8194631 	.word	0xa8194631
   371ec:	fef8f7fe 	.word	0xfef8f7fe
   371f0:	d1852800 	.word	0xd1852800
   371f4:	aa19a910 	.word	0xaa19a910
   371f8:	f7ff4608 	.word	0xf7ff4608
   371fc:	2800fa37 	.word	0x2800fa37
   37200:	af7ef47f 	.word	0xaf7ef47f
   37204:	59139a18 	.word	0x59139a18
   37208:	51133b01 	.word	0x51133b01
   3720c:	4606e7de 	.word	0x4606e7de
   37210:	f8dbe4c5 	.word	0xf8dbe4c5
   37214:	68223000 	.word	0x68223000
   37218:	f302fb03 	.word	0xf302fb03
   3721c:	f1ba602b 	.word	0xf1ba602b
   37220:	d0050f00 	.word	0xd0050f00
   37224:	a8109902 	.word	0xa8109902
   37228:	ff90f7fe 	.word	0xff90f7fe
   3722c:	b1084606 	.word	0xb1084606
   37230:	e4b49f1e 	.word	0xe4b49f1e
   37234:	a9106823 	.word	0xa9106823
   37238:	93104650 	.word	0x93104650
   3723c:	fbb8f7fe 	.word	0xfbb8f7fe
   37240:	28004606 	.word	0x28004606
   37244:	2401d1f4 	.word	0x2401d1f4
   37248:	a91fab0f 	.word	0xa91fab0f
   3724c:	960f4650 	.word	0x960f4650
   37250:	441fe9cd 	.word	0x441fe9cd
   37254:	f7fe9321 	.word	0xf7fe9321
   37258:	2800fae5 	.word	0x2800fae5
   3725c:	f8cad1e8 	.word	0xf8cad1e8
   37260:	e7e54000 	.word	0xe7e54000

00037264 <symbol_000dbba>:
   37264:	41f0e92d 	.word	0x41f0e92d
   37268:	46176853 	.word	0x46176853
   3726c:	6894b183 	.word	0x6894b183
   37270:	4580f103 	.word	0x4580f103
   37274:	f8543d01 	.word	0xf8543d01
   37278:	eb042025 	.word	0xeb042025
   3727c:	b12a0485 	.word	0xb12a0485
   37280:	f854e11a 	.word	0xf854e11a
   37284:	2d005d04 	.word	0x2d005d04
   37288:	8116f040 	.word	0x8116f040
   3728c:	d1f83b01 	.word	0xd1f83b01
   37290:	4606460a 	.word	0x4606460a
   37294:	463b4601 	.word	0x463b4601
   37298:	f7ff2000 	.word	0xf7ff2000
   3729c:	2800fc21 	.word	0x2800fc21
   372a0:	f06fd151 	.word	0xf06fd151
   372a4:	68714840 	.word	0x68714840
   372a8:	68b0b191 	.word	0x68b0b191
   372ac:	0308eb01 	.word	0x0308eb01
   372b0:	c023f850 	.word	0xc023f850
   372b4:	0283eb00 	.word	0x0283eb00
   372b8:	0f00f1bc 	.word	0x0f00f1bc
   372bc:	4614d156 	.word	0x4614d156
   372c0:	e003460b 	.word	0xe003460b
   372c4:	5d04f854 	.word	0x5d04f854
   372c8:	d14f2d00 	.word	0xd14f2d00
   372cc:	d1f93b01 	.word	0xd1f93b01
   372d0:	4440f06f 	.word	0x4440f06f
   372d4:	46304639 	.word	0x46304639
   372d8:	ffa8f7fe 	.word	0xffa8f7fe
   372dc:	db422800 	.word	0xdb422800
   372e0:	683b6835 	.word	0x683b6835
   372e4:	f305fb03 	.word	0xf305fb03
   372e8:	dd2e2b00 	.word	0xdd2e2b00
   372ec:	687a6873 	.word	0x687a6873
   372f0:	68b1b183 	.word	0x68b1b183
   372f4:	f8511918 	.word	0xf8511918
   372f8:	eb01c020 	.word	0xeb01c020
   372fc:	f1bc0180 	.word	0xf1bc0180
   37300:	d0050f00 	.word	0xd0050f00
   37304:	f851e090 	.word	0xf851e090
   37308:	28000d04 	.word	0x28000d04
   3730c:	808cf040 	.word	0x808cf040
   37310:	d1f83b01 	.word	0xd1f83b01
   37314:	f8d7b18a 	.word	0xf8d7b18a
   37318:	1911c008 	.word	0x1911c008
   3731c:	0021f85c 	.word	0x0021f85c
   37320:	f0402800 	.word	0xf0402800
   37324:	eb0c80be 	.word	0xeb0c80be
   37328:	e0040181 	.word	0xe0040181
   3732c:	0d04f851 	.word	0x0d04f851
   37330:	f0402800 	.word	0xf0402800
   37334:	3a018083 	.word	0x3a018083
   37338:	463ad1f8 	.word	0x463ad1f8
   3733c:	46304631 	.word	0x46304631
   37340:	f8d4f7ff 	.word	0xf8d4f7ff
   37344:	e8bdb140 	.word	0xe8bdb140
   37348:	463a81f0 	.word	0x463a81f0
   3734c:	46304631 	.word	0x46304631
   37350:	f828f7ff 	.word	0xf828f7ff
   37354:	d1f62800 	.word	0xd1f62800
   37358:	46396035 	.word	0x46396035
   3735c:	f7fe4630 	.word	0xf7fe4630
   37360:	2800ff65 	.word	0x2800ff65
   37364:	2000dabc 	.word	0x2000dabc
   37368:	81f0e8bd 	.word	0x81f0e8bd
   3736c:	2c006834 	.word	0x2c006834
   37370:	683bdaae 	.word	0x683bdaae
   37374:	f304fb03 	.word	0xf304fb03
   37378:	da232b00 	.word	0xda232b00
   3737c:	0f00f1bc 	.word	0x0f00f1bc
   37380:	4613d129 	.word	0x4613d129
   37384:	f853e002 	.word	0xf853e002
   37388:	bb222d04 	.word	0xbb222d04
   3738c:	d1fa3901 	.word	0xd1fa3901
   37390:	b173687b 	.word	0xb173687b
   37394:	c008f8d7 	.word	0xc008f8d7
   37398:	0208eb03 	.word	0x0208eb03
   3739c:	5022f85c 	.word	0x5022f85c
   373a0:	0282eb0c 	.word	0x0282eb0c
   373a4:	e071b11d 	.word	0xe071b11d
   373a8:	5d04f852 	.word	0x5d04f852
   373ac:	3b01bb05 	.word	0x3b01bb05
   373b0:	463ad1fa 	.word	0x463ad1fa
   373b4:	46304631 	.word	0x46304631
   373b8:	f898f7ff 	.word	0xf898f7ff
   373bc:	d1c22800 	.word	0xd1c22800
   373c0:	e7706034 	.word	0xe7706034
   373c4:	4631463a 	.word	0x4631463a
   373c8:	f7fe4630 	.word	0xf7fe4630
   373cc:	2800ffeb 	.word	0x2800ffeb
   373d0:	e8bdd0f6 	.word	0xe8bdd0f6
   373d4:	687b81f0 	.word	0x687b81f0
   373d8:	d0ea2b00 	.word	0xd0ea2b00
   373dc:	c008f8d7 	.word	0xc008f8d7
   373e0:	0208eb03 	.word	0x0208eb03
   373e4:	5022f85c 	.word	0x5022f85c
   373e8:	0282eb0c 	.word	0x0282eb0c
   373ec:	d0de2d00 	.word	0xd0de2d00
   373f0:	d8de4299 	.word	0xd8de4299
   373f4:	2900d34a 	.word	0x2900d34a
   373f8:	eb01d0db 	.word	0xeb01d0db
   373fc:	f8500308 	.word	0xf8500308
   37400:	f85c2023 	.word	0xf85c2023
   37404:	009b5023 	.word	0x009b5023
   37408:	44184295 	.word	0x44184295
   3740c:	d3d04463 	.word	0xd3d04463
   37410:	e03bd907 	.word	0xe03bd907
   37414:	5d04f850 	.word	0x5d04f850
   37418:	2d04f853 	.word	0x2d04f853
   3741c:	d8c84295 	.word	0xd8c84295
   37420:	3901d334 	.word	0x3901d334
   37424:	e7c4d1f6 	.word	0xe7c4d1f6
   37428:	d0862a00 	.word	0xd0862a00
   3742c:	c008f8d7 	.word	0xc008f8d7
   37430:	f85c1911 	.word	0xf85c1911
   37434:	28000021 	.word	0x28000021
   37438:	af75f43f 	.word	0xaf75f43f
   3743c:	f63f4293 	.word	0xf63f4293
   37440:	d32eaf7c 	.word	0xd32eaf7c
   37444:	f43f2b00 	.word	0xf43f2b00
   37448:	68b1af78 	.word	0x68b1af78
   3744c:	f851191a 	.word	0xf851191a
   37450:	f85c0022 	.word	0xf85c0022
   37454:	0092e022 	.word	0x0092e022
   37458:	44114586 	.word	0x44114586
   3745c:	f4ff4462 	.word	0xf4ff4462
   37460:	d908af6c 	.word	0xd908af6c
   37464:	f851e01d 	.word	0xf851e01d
   37468:	f852cd04 	.word	0xf852cd04
   3746c:	45840d04 	.word	0x45840d04
   37470:	af63f63f 	.word	0xaf63f63f
   37474:	3b01d315 	.word	0x3b01d315
   37478:	463ad1f5 	.word	0x463ad1f5
   3747c:	46304631 	.word	0x46304631
   37480:	f834f7ff 	.word	0xf834f7ff
   37484:	f47f2800 	.word	0xf47f2800
   37488:	e765af5e 	.word	0xe765af5e
   3748c:	46394632 	.word	0x46394632
   37490:	f7ff4630 	.word	0xf7ff4630
   37494:	2800f82b 	.word	0x2800f82b
   37498:	af55f47f 	.word	0xaf55f47f
   3749c:	60344264 	.word	0x60344264
   374a0:	4632e701 	.word	0x4632e701
   374a4:	46304639 	.word	0x46304639
   374a8:	f820f7ff 	.word	0xf820f7ff
   374ac:	f47f2800 	.word	0xf47f2800
   374b0:	426daf4a 	.word	0x426daf4a
   374b4:	e70d6035 	.word	0xe70d6035
   374b8:	2b00683b 	.word	0x2b00683b
   374bc:	aee8f6bf 	.word	0xaee8f6bf
   374c0:	0009f06f 	.word	0x0009f06f
   374c4:	bf00e73f 	.word	0xbf00e73f

000374c8 <symbol_0005f38>:
   374c8:	41f0e92d 	.word	0x41f0e92d
   374cc:	2501460f 	.word	0x2501460f
   374d0:	68bb2100 	.word	0x68bb2100
   374d4:	4604b086 	.word	0x4604b086
   374d8:	95004616 	.word	0x95004616
   374dc:	e9cd9503 	.word	0xe9cd9503
   374e0:	e9cd1101 	.word	0xe9cd1101
   374e4:	2b001104 	.word	0x2b001104
   374e8:	6879d040 	.word	0x6879d040
   374ec:	d0111e4a 	.word	0xd0111e4a
   374f0:	0022f853 	.word	0x0022f853
   374f4:	f0402800 	.word	0xf0402800
   374f8:	f10180c4 	.word	0xf10180c4
   374fc:	39014180 	.word	0x39014180
   37500:	0381eb03 	.word	0x0381eb03
   37504:	f853e004 	.word	0xf853e004
   37508:	29001d04 	.word	0x29001d04
   3750c:	80b9f040 	.word	0x80b9f040
   37510:	d1f83a01 	.word	0xd1f83a01
   37514:	683b2501 	.word	0x683b2501
   37518:	21049300 	.word	0x21049300
   3751c:	f0014628 	.word	0xf0014628
   37520:	4680fe17 	.word	0x4680fe17
   37524:	f0002800 	.word	0xf0002800
   37528:	9902813c 	.word	0x9902813c
   3752c:	9a01b189 	.word	0x9a01b189
   37530:	f7e20092 	.word	0xf7e20092
   37534:	e9ddfcbd 	.word	0xe9ddfcbd
   37538:	1e532001 	.word	0x1e532001
   3753c:	2200b13a 	.word	0x2200b13a
   37540:	1c593b01 	.word	0x1c593b01
   37544:	f1006002 	.word	0xf1006002
   37548:	d1f90004 	.word	0xd1f90004
   3754c:	f0019802 	.word	0xf0019802
   37550:	e9cdfe13 	.word	0xe9cdfe13
   37554:	00ad5801 	.word	0x00ad5801
   37558:	2100462a 	.word	0x2100462a
   3755c:	f0084640 	.word	0xf0084640
   37560:	462afbf5 	.word	0x462afbf5
   37564:	980268b9 	.word	0x980268b9
   37568:	fca2f7e2 	.word	0xfca2f7e2
   3756c:	a8034631 	.word	0xa8034631
   37570:	fa1ef7fe 	.word	0xfa1ef7fe
   37574:	28004607 	.word	0x28004607
   37578:	9e01d15d 	.word	0x9e01d15d
   3757c:	f0002e00 	.word	0xf0002e00
   37580:	4601810e 	.word	0x4601810e
   37584:	3d049d02 	.word	0x3d049d02
   37588:	f8552200 	.word	0xf8552200
   3758c:	e0040f04 	.word	0xe0040f04
   37590:	f1012a20 	.word	0xf1012a20
   37594:	f0000101 	.word	0xf0000101
   37598:	fa208081 	.word	0xfa208081
   3759c:	f013f302 	.word	0xf013f302
   375a0:	f1020301 	.word	0xf1020301
   375a4:	d0f30201 	.word	0xd0f30201
   375a8:	b1b59d04 	.word	0xb1b59d04
   375ac:	46842000 	.word	0x46842000
   375b0:	3f049f05 	.word	0x3f049f05
   375b4:	f8572200 	.word	0xf8572200
   375b8:	e0036f04 	.word	0xe0036f04
   375bc:	f1002a20 	.word	0xf1002a20
   375c0:	d0710001 	.word	0xd0710001
   375c4:	f302fa26 	.word	0xf302fa26
   375c8:	0301f013 	.word	0x0301f013
   375cc:	0201f102 	.word	0x0201f102
   375d0:	4281d0f4 	.word	0x4281d0f4
   375d4:	4601bf28 	.word	0x4601bf28
   375d8:	4668460d 	.word	0x4668460d
   375dc:	f7fe4629 	.word	0xf7fe4629
   375e0:	4607fdb5 	.word	0x4607fdb5
   375e4:	4629bb38 	.word	0x4629bb38
   375e8:	f7fea803 	.word	0xf7fea803
   375ec:	4607fdaf 	.word	0x4607fdaf
   375f0:	2301bb08 	.word	0x2301bb08
   375f4:	4640f06f 	.word	0x4640f06f
   375f8:	93009303 	.word	0x93009303
   375fc:	b17f9f01 	.word	0xb17f9f01
   37600:	19ba9802 	.word	0x19ba9802
   37604:	3022f850 	.word	0x3022f850
   37608:	0282eb00 	.word	0x0282eb00
   3760c:	d1512b00 	.word	0xd1512b00
   37610:	e003463b 	.word	0xe003463b
   37614:	1d04f852 	.word	0x1d04f852
   37618:	d14b2900 	.word	0xd14b2900
   3761c:	d1f93b01 	.word	0xd1f93b01
   37620:	a8034629 	.word	0xa8034629
   37624:	fcdcf7fe 	.word	0xfcdcf7fe
   37628:	b9204607 	.word	0xb9204607
   3762c:	4620a903 	.word	0x4620a903
   37630:	f9bef7fe 	.word	0xf9bef7fe
   37634:	98024607 	.word	0x98024607
   37638:	9a01b160 	.word	0x9a01b160
   3763c:	b13a1e53 	.word	0xb13a1e53
   37640:	3b012200 	.word	0x3b012200
   37644:	60021c5c 	.word	0x60021c5c
   37648:	0004f100 	.word	0x0004f100
   3764c:	9802d1f9 	.word	0x9802d1f9
   37650:	fd92f001 	.word	0xfd92f001
   37654:	23012200 	.word	0x23012200
   37658:	e9cd9805 	.word	0xe9cd9805
   3765c:	92023200 	.word	0x92023200
   37660:	9904b158 	.word	0x9904b158
   37664:	b1311e4b 	.word	0xb1311e4b
   37668:	1c593b01 	.word	0x1c593b01
   3766c:	f1006002 	.word	0xf1006002
   37670:	d1f90004 	.word	0xd1f90004
   37674:	f0019805 	.word	0xf0019805
   37678:	4638fd7f 	.word	0x4638fd7f
   3767c:	e8bdb006 	.word	0xe8bdb006
   37680:	f24281f0 	.word	0xf24281f0
   37684:	68397310 	.word	0x68397310
   37688:	429d1c55 	.word	0x429d1c55
   3768c:	f2009100 	.word	0xf2009100
   37690:	2d008083 	.word	0x2d008083
   37694:	af41f47f 	.word	0xaf41f47f
   37698:	e75d46a8 	.word	0xe75d46a8
   3769c:	42be3701 	.word	0x42be3701
   376a0:	af72f47f 	.word	0xaf72f47f
   376a4:	e77f4619 	.word	0xe77f4619
   376a8:	0c01f10c 	.word	0x0c01f10c
   376ac:	d18145ac 	.word	0xd18145ac
   376b0:	e792461d 	.word	0xe792461d
   376b4:	2b009b00 	.word	0x2b009b00
   376b8:	2100d0b2 	.word	0x2100d0b2
   376bc:	f1a0468e 	.word	0xf1a0468e
   376c0:	22000c04 	.word	0x22000c04
   376c4:	0f04f85c 	.word	0x0f04f85c
   376c8:	2a20e003 	.word	0x2a20e003
   376cc:	0101f101 	.word	0x0101f101
   376d0:	fa20d042 	.word	0xfa20d042
   376d4:	f013f302 	.word	0xf013f302
   376d8:	f1020301 	.word	0xf1020301
   376dc:	d0f40201 	.word	0xd0f40201
   376e0:	f7fe4668 	.word	0xf7fe4668
   376e4:	4607fd33 	.word	0x4607fd33
   376e8:	d1a42800 	.word	0xd1a42800
   376ec:	c010f8dd 	.word	0xc010f8dd
   376f0:	0f00f1bc 	.word	0x0f00f1bc
   376f4:	4601d04e 	.word	0x4601d04e
   376f8:	9f054686 	.word	0x9f054686
   376fc:	22003f04 	.word	0x22003f04
   37700:	0f04f857 	.word	0x0f04f857
   37704:	2a20e003 	.word	0x2a20e003
   37708:	0101f101 	.word	0x0101f101
   3770c:	fa20d02a 	.word	0xfa20d02a
   37710:	f013f302 	.word	0xf013f302
   37714:	f1020301 	.word	0xf1020301
   37718:	d0f40201 	.word	0xd0f40201
   3771c:	f7fea803 	.word	0xf7fea803
   37720:	4607fd15 	.word	0x4607fd15
   37724:	d1862800 	.word	0xd1862800
   37728:	4668a903 	.word	0x4668a903
   3772c:	fd7ef7fe 	.word	0xfd7ef7fe
   37730:	db1d2800 	.word	0xdb1d2800
   37734:	4669aa03 	.word	0x4669aa03
   37738:	f7fe4668 	.word	0xf7fe4668
   3773c:	4607fed7 	.word	0x4607fed7
   37740:	f47f2800 	.word	0xf47f2800
   37744:	2101af78 	.word	0x2101af78
   37748:	f7fe4668 	.word	0xf7fe4668
   3774c:	4607fcff 	.word	0x4607fcff
   37750:	f43f2800 	.word	0xf43f2800
   37754:	e76eaf53 	.word	0xe76eaf53
   37758:	0e01f10e 	.word	0x0e01f10e
   3775c:	d1b045be 	.word	0xd1b045be
   37760:	e7bd4619 	.word	0xe7bd4619
   37764:	0e01f10e 	.word	0x0e01f10e
   37768:	d1c845e6 	.word	0xd1c845e6
   3776c:	e7d54619 	.word	0xe7d54619
   37770:	466aa903 	.word	0x466aa903
   37774:	f7fe4608 	.word	0xf7fe4608
   37778:	4607feb9 	.word	0x4607feb9
   3777c:	f47f2800 	.word	0xf47f2800
   37780:	2101af5a 	.word	0x2101af5a
   37784:	f7fea803 	.word	0xf7fea803
   37788:	4607fce1 	.word	0x4607fce1
   3778c:	f43f2800 	.word	0xf43f2800
   37790:	e750af35 	.word	0xe750af35
   37794:	e7c14661 	.word	0xe7c14661
   37798:	070ff06f 	.word	0x070ff06f
   3779c:	4631e75a 	.word	0x4631e75a
   377a0:	9802e702 	.word	0x9802e702
   377a4:	070ff06f 	.word	0x070ff06f
   377a8:	bf00e746 	.word	0xbf00e746

000377ac <symbol_000644e>:
   377ac:	43f0e92d 	.word	0x43f0e92d
   377b0:	6f80f5b1 	.word	0x6f80f5b1
   377b4:	4d04f2ad 	.word	0x4d04f2ad
   377b8:	80a5f200 	.word	0x80a5f200
   377bc:	4617460d 	.word	0x4617460d
   377c0:	46694606 	.word	0x46694606
   377c4:	462a4618 	.word	0x462a4618
   377c8:	460747b8 	.word	0x460747b8
   377cc:	4638b120 	.word	0x4638b120
   377d0:	4d04f20d 	.word	0x4d04f20d
   377d4:	83f0e8bd 	.word	0x83f0e8bd
   377d8:	f0002d00 	.word	0xf0002d00
   377dc:	f89d808a 	.word	0xf89d808a
   377e0:	2b003000 	.word	0x2b003000
   377e4:	8089f040 	.word	0x8089f040
   377e8:	4604466b 	.word	0x4604466b
   377ec:	f813e003 	.word	0xf813e003
   377f0:	2a002f01 	.word	0x2a002f01
   377f4:	3401d14d 	.word	0x3401d14d
   377f8:	d1f842a5 	.word	0xd1f842a5
   377fc:	8004f8d6 	.word	0x8004f8d6
   37800:	0f00f1b8 	.word	0x0f00f1b8
   37804:	2104d170 	.word	0x2104d170
   37808:	f0012001 	.word	0xf0012001
   3780c:	4681fca1 	.word	0x4681fca1
   37810:	d0752800 	.word	0xd0752800
   37814:	b18968b1 	.word	0xb18968b1
   37818:	00926872 	.word	0x00926872
   3781c:	fb48f7e2 	.word	0xfb48f7e2
   37820:	2001e9d6 	.word	0x2001e9d6
   37824:	b13a1e53 	.word	0xb13a1e53
   37828:	3b014642 	.word	0x3b014642
   3782c:	60021c59 	.word	0x60021c59
   37830:	0004f100 	.word	0x0004f100
   37834:	68b0d1f9 	.word	0x68b0d1f9
   37838:	fc9ef001 	.word	0xfc9ef001
   3783c:	22042301 	.word	0x22042301
   37840:	3901e9c6 	.word	0x3901e9c6
   37844:	46482100 	.word	0x46482100
   37848:	fa80f008 	.word	0xfa80f008
   3784c:	22012300 	.word	0x22012300
   37850:	42a568b1 	.word	0x42a568b1
   37854:	6032600b 	.word	0x6032600b
   37858:	eb0dd9b9 	.word	0xeb0dd9b9
   3785c:	1b2c0205 	.word	0x1b2c0205
   37860:	f02368b1 	.word	0xf02368b1
   37864:	ea4f0803 	.word	0xea4f0803
   37868:	f8120ec3 	.word	0xf8120ec3
   3786c:	f851cd01 	.word	0xf851cd01
   37870:	f00e0008 	.word	0xf00e0008
   37874:	fa0c0e18 	.word	0xfa0c0e18
   37878:	3301fc0e 	.word	0x3301fc0e
   3787c:	000cea40 	.word	0x000cea40
   37880:	f84142a3 	.word	0xf84142a3
   37884:	d1eb0008 	.word	0xd1eb0008
   37888:	f20d4638 	.word	0xf20d4638
   3788c:	e8bd4d04 	.word	0xe8bd4d04
   37890:	1b2a83f0 	.word	0x1b2a83f0
   37894:	0803f012 	.word	0x0803f012
   37898:	f04fbf18 	.word	0xf04fbf18
   3789c:	f2420801 	.word	0xf2420801
   378a0:	eb087310 	.word	0xeb087310
   378a4:	45980892 	.word	0x45980892
   378a8:	6873d82a 	.word	0x6873d82a
   378ac:	d92d4598 	.word	0xd92d4598
   378b0:	46402104 	.word	0x46402104
   378b4:	fc4cf001 	.word	0xfc4cf001
   378b8:	b3084681 	.word	0xb3084681
   378bc:	b18968b1 	.word	0xb18968b1
   378c0:	00926872 	.word	0x00926872
   378c4:	faf4f7e2 	.word	0xfaf4f7e2
   378c8:	2001e9d6 	.word	0x2001e9d6
   378cc:	b13a1e53 	.word	0xb13a1e53
   378d0:	3b012200 	.word	0x3b012200
   378d4:	60021c59 	.word	0x60021c59
   378d8:	0004f100 	.word	0x0004f100
   378dc:	68b0d1f9 	.word	0x68b0d1f9
   378e0:	fc4af001 	.word	0xfc4af001
   378e4:	8901e9c6 	.word	0x8901e9c6
   378e8:	0288ea4f 	.word	0x0288ea4f
   378ec:	9008f8d6 	.word	0x9008f8d6
   378f0:	f8d6e7a8 	.word	0xf8d6e7a8
   378f4:	462c8004 	.word	0x462c8004
   378f8:	462ae782 	.word	0x462ae782
   378fc:	e7c94604 	.word	0xe7c94604
   37900:	070ff06f 	.word	0x070ff06f
   37904:	f06fe763 	.word	0xf06fe763
   37908:	e7600703 	.word	0xe7600703
   3790c:	e7774698 	.word	0xe7774698

00037910 <symbol_0004482>:
   37910:	43f0e92d 	.word	0x43f0e92d
   37914:	b0a16853 	.word	0xb0a16853
   37918:	6894b17b 	.word	0x6894b17b
   3791c:	4c80f103 	.word	0x4c80f103
   37920:	3cfff10c 	.word	0x3cfff10c
   37924:	502cf854 	.word	0x502cf854
   37928:	048ceb04 	.word	0x048ceb04
   3792c:	e00ab11d 	.word	0xe00ab11d
   37930:	5d04f854 	.word	0x5d04f854
   37934:	3b01b93d 	.word	0x3b01b93d
   37938:	f06fd1fa 	.word	0xf06fd1fa
   3793c:	46200403 	.word	0x46200403
   37940:	e8bdb021 	.word	0xe8bdb021
   37944:	681383f0 	.word	0x681383f0
   37948:	ddf62b00 	.word	0xddf62b00
   3794c:	23002401 	.word	0x23002401
   37950:	a8024606 	.word	0xa8024606
   37954:	94089405 	.word	0x94089405
   37958:	940e940b 	.word	0x940e940b
   3795c:	94119402 	.word	0x94119402
   37960:	94179414 	.word	0x94179414
   37964:	460f941a 	.word	0x460f941a
   37968:	e9cd4615 	.word	0xe9cd4615
   3796c:	e9cd3306 	.word	0xe9cd3306
   37970:	e9cd3309 	.word	0xe9cd3309
   37974:	e9cd330c 	.word	0xe9cd330c
   37978:	e9cd330f 	.word	0xe9cd330f
   3797c:	e9cd3303 	.word	0xe9cd3303
   37980:	e9cd3312 	.word	0xe9cd3312
   37984:	e9cd3315 	.word	0xe9cd3315
   37988:	e9cd3318 	.word	0xe9cd3318
   3798c:	f7ff331b 	.word	0xf7ff331b
   37990:	4604fd9b 	.word	0x4604fd9b
   37994:	9b03b9a0 	.word	0x9b03b9a0
   37998:	9904b183 	.word	0x9904b183
   3799c:	4480f103 	.word	0x4480f103
   379a0:	f8513c01 	.word	0xf8513c01
   379a4:	eb012024 	.word	0xeb012024
   379a8:	b12a0484 	.word	0xb12a0484
   379ac:	f854e0b5 	.word	0xf854e0b5
   379b0:	2a002d04 	.word	0x2a002d04
   379b4:	80b1f040 	.word	0x80b1f040
   379b8:	d1f83b01 	.word	0xd1f83b01
   379bc:	040df06f 	.word	0x040df06f
   379c0:	b1609807 	.word	0xb1609807
   379c4:	1e539a06 	.word	0x1e539a06
   379c8:	2200b13a 	.word	0x2200b13a
   379cc:	1c593b01 	.word	0x1c593b01
   379d0:	f1006002 	.word	0xf1006002
   379d4:	d1f90004 	.word	0xd1f90004
   379d8:	f0019807 	.word	0xf0019807
   379dc:	2200fbcd 	.word	0x2200fbcd
   379e0:	980a2301 	.word	0x980a2301
   379e4:	3205e9cd 	.word	0x3205e9cd
   379e8:	b1589207 	.word	0xb1589207
   379ec:	1e4b9909 	.word	0x1e4b9909
   379f0:	3b01b131 	.word	0x3b01b131
   379f4:	60021c5f 	.word	0x60021c5f
   379f8:	0004f100 	.word	0x0004f100
   379fc:	980ad1f9 	.word	0x980ad1f9
   37a00:	fbbaf001 	.word	0xfbbaf001
   37a04:	23012200 	.word	0x23012200
   37a08:	e9cd980d 	.word	0xe9cd980d
   37a0c:	920a3208 	.word	0x920a3208
   37a10:	990cb158 	.word	0x990cb158
   37a14:	b1311e4b 	.word	0xb1311e4b
   37a18:	1c5e3b01 	.word	0x1c5e3b01
   37a1c:	f1006002 	.word	0xf1006002
   37a20:	d1f90004 	.word	0xd1f90004
   37a24:	f001980d 	.word	0xf001980d
   37a28:	2200fba7 	.word	0x2200fba7
   37a2c:	98102301 	.word	0x98102301
   37a30:	320be9cd 	.word	0x320be9cd
   37a34:	b158920d 	.word	0xb158920d
   37a38:	1e4b990f 	.word	0x1e4b990f
   37a3c:	3b01b131 	.word	0x3b01b131
   37a40:	60021c5d 	.word	0x60021c5d
   37a44:	0004f100 	.word	0x0004f100
   37a48:	9810d1f9 	.word	0x9810d1f9
   37a4c:	fb94f001 	.word	0xfb94f001
   37a50:	23012200 	.word	0x23012200
   37a54:	e9cd9804 	.word	0xe9cd9804
   37a58:	9210320e 	.word	0x9210320e
   37a5c:	9903b158 	.word	0x9903b158
   37a60:	b1311e4b 	.word	0xb1311e4b
   37a64:	1c593b01 	.word	0x1c593b01
   37a68:	f1006002 	.word	0xf1006002
   37a6c:	d1f90004 	.word	0xd1f90004
   37a70:	f0019804 	.word	0xf0019804
   37a74:	2200fb81 	.word	0x2200fb81
   37a78:	98132301 	.word	0x98132301
   37a7c:	3202e9cd 	.word	0x3202e9cd
   37a80:	b1589204 	.word	0xb1589204
   37a84:	1e4b9912 	.word	0x1e4b9912
   37a88:	3b01b131 	.word	0x3b01b131
   37a8c:	60021c5f 	.word	0x60021c5f
   37a90:	0004f100 	.word	0x0004f100
   37a94:	9813d1f9 	.word	0x9813d1f9
   37a98:	fb6ef001 	.word	0xfb6ef001
   37a9c:	23012200 	.word	0x23012200
   37aa0:	e9cd9816 	.word	0xe9cd9816
   37aa4:	92133211 	.word	0x92133211
   37aa8:	9915b158 	.word	0x9915b158
   37aac:	b1311e4b 	.word	0xb1311e4b
   37ab0:	1c5e3b01 	.word	0x1c5e3b01
   37ab4:	f1006002 	.word	0xf1006002
   37ab8:	d1f90004 	.word	0xd1f90004
   37abc:	f0019816 	.word	0xf0019816
   37ac0:	2200fb5b 	.word	0x2200fb5b
   37ac4:	98192301 	.word	0x98192301
   37ac8:	3214e9cd 	.word	0x3214e9cd
   37acc:	b1589216 	.word	0xb1589216
   37ad0:	1e4b9918 	.word	0x1e4b9918
   37ad4:	3b01b131 	.word	0x3b01b131
   37ad8:	60021c5d 	.word	0x60021c5d
   37adc:	0004f100 	.word	0x0004f100
   37ae0:	9819d1f9 	.word	0x9819d1f9
   37ae4:	fb48f001 	.word	0xfb48f001
   37ae8:	23012200 	.word	0x23012200
   37aec:	e9cd981c 	.word	0xe9cd981c
   37af0:	92193217 	.word	0x92193217
   37af4:	f43f2800 	.word	0xf43f2800
   37af8:	991baf22 	.word	0x991baf22
   37afc:	b1311e4b 	.word	0xb1311e4b
   37b00:	1c593b01 	.word	0x1c593b01
   37b04:	f1006002 	.word	0xf1006002
   37b08:	d1f90004 	.word	0xd1f90004
   37b0c:	f001981c 	.word	0xf001981c
   37b10:	4620fb33 	.word	0x4620fb33
   37b14:	e8bdb021 	.word	0xe8bdb021
   37b18:	2b0183f0 	.word	0x2b0183f0
   37b1c:	d96b9a02 	.word	0xd96b9a02
   37b20:	f47f2a00 	.word	0xf47f2a00
   37b24:	4639af4b 	.word	0x4639af4b
   37b28:	462aa805 	.word	0x462aa805
   37b2c:	fb9af7ff 	.word	0xfb9af7ff
   37b30:	28004604 	.word	0x28004604
   37b34:	af44f47f 	.word	0xaf44f47f
   37b38:	a905a808 	.word	0xa905a808
   37b3c:	ff38f7fd 	.word	0xff38f7fd
   37b40:	28004604 	.word	0x28004604
   37b44:	af3cf47f 	.word	0xaf3cf47f
   37b48:	4629a811 	.word	0x4629a811
   37b4c:	ff30f7fd 	.word	0xff30f7fd
   37b50:	28004604 	.word	0x28004604
   37b54:	af34f47f 	.word	0xaf34f47f
   37b58:	4629a814 	.word	0x4629a814
   37b5c:	ff28f7fd 	.word	0xff28f7fd
   37b60:	28004604 	.word	0x28004604
   37b64:	af2cf47f 	.word	0xaf2cf47f
   37b68:	2101a80b 	.word	0x2101a80b
   37b6c:	f8acf7fe 	.word	0xf8acf7fe
   37b70:	28004604 	.word	0x28004604
   37b74:	af24f47f 	.word	0xaf24f47f
   37b78:	a80e4601 	.word	0xa80e4601
   37b7c:	f8a4f7fe 	.word	0xf8a4f7fe
   37b80:	28004604 	.word	0x28004604
   37b84:	af1cf47f 	.word	0xaf1cf47f
   37b88:	a8174601 	.word	0xa8174601
   37b8c:	f89cf7fe 	.word	0xf89cf7fe
   37b90:	28004604 	.word	0x28004604
   37b94:	af14f47f 	.word	0xaf14f47f
   37b98:	2101a81a 	.word	0x2101a81a
   37b9c:	f894f7fe 	.word	0xf894f7fe
   37ba0:	28004604 	.word	0x28004604
   37ba4:	af0cf47f 	.word	0xaf0cf47f
   37ba8:	f04f4681 	.word	0xf04f4681
   37bac:	af010801 	.word	0xaf010801
   37bb0:	681b9b0a 	.word	0x681b9b0a
   37bb4:	d42c07da 	.word	0xd42c07da
   37bb8:	a8082101 	.word	0xa8082101
   37bbc:	fac6f7fe 	.word	0xfac6f7fe
   37bc0:	28004604 	.word	0x28004604
   37bc4:	aefcf47f 	.word	0xaefcf47f
   37bc8:	681b9b0d 	.word	0x681b9b0d
   37bcc:	d44407d8 	.word	0xd44407d8
   37bd0:	681b9b10 	.word	0x681b9b10
   37bd4:	d44007d9 	.word	0xd44007d9
   37bd8:	a80b2101 	.word	0xa80b2101
   37bdc:	fab6f7fe 	.word	0xfab6f7fe
   37be0:	28004604 	.word	0x28004604
   37be4:	aeecf47f 	.word	0xaeecf47f
   37be8:	a80e2101 	.word	0xa80e2101
   37bec:	faaef7fe 	.word	0xfaaef7fe
   37bf0:	28004604 	.word	0x28004604
   37bf4:	e6e3d0dc 	.word	0xe6e3d0dc
   37bf8:	f6ff2a00 	.word	0xf6ff2a00
   37bfc:	680baedf 	.word	0x680baedf
   37c00:	d88d2b01 	.word	0xd88d2b01
   37c04:	d18e2b00 	.word	0xd18e2b00
   37c08:	2a004252 	.word	0x2a004252
   37c0c:	aed6f47f 	.word	0xaed6f47f
   37c10:	9b16e789 	.word	0x9b16e789
   37c14:	07d8681b 	.word	0x07d8681b
   37c18:	2101d443 	.word	0x2101d443
   37c1c:	f7fea814 	.word	0xf7fea814
   37c20:	4604fa95 	.word	0x4604fa95
   37c24:	f47f2800 	.word	0xf47f2800
   37c28:	9b19aecb 	.word	0x9b19aecb
   37c2c:	07db681b 	.word	0x07db681b
   37c30:	9b1cd425 	.word	0x9b1cd425
   37c34:	07dc681b 	.word	0x07dc681b
   37c38:	2101d421 	.word	0x2101d421
   37c3c:	f7fea817 	.word	0xf7fea817
   37c40:	4604fa85 	.word	0x4604fa85
   37c44:	f47f2800 	.word	0xf47f2800
   37c48:	2101aebb 	.word	0x2101aebb
   37c4c:	f7fea81a 	.word	0xf7fea81a
   37c50:	4604fa7d 	.word	0x4604fa7d
   37c54:	d0dc2800 	.word	0xd0dc2800
   37c58:	a90be6b2 	.word	0xa90be6b2
   37c5c:	4608aa11 	.word	0x4608aa11
   37c60:	fd04f7fe 	.word	0xfd04f7fe
   37c64:	28004604 	.word	0x28004604
   37c68:	aeaaf47f 	.word	0xaeaaf47f
   37c6c:	aa05a90e 	.word	0xaa05a90e
   37c70:	f7fe4608 	.word	0xf7fe4608
   37c74:	4604fd6f 	.word	0x4604fd6f
   37c78:	d0ad2800 	.word	0xd0ad2800
   37c7c:	a917e6a0 	.word	0xa917e6a0
   37c80:	4608aa11 	.word	0x4608aa11
   37c84:	fcf2f7fe 	.word	0xfcf2f7fe
   37c88:	28004604 	.word	0x28004604
   37c8c:	ae98f47f 	.word	0xae98f47f
   37c90:	aa05a91a 	.word	0xaa05a91a
   37c94:	f7fe4608 	.word	0xf7fe4608
   37c98:	4604fd5d 	.word	0x4604fd5d
   37c9c:	d0cc2800 	.word	0xd0cc2800
   37ca0:	a914e68e 	.word	0xa914e68e
   37ca4:	f7fea808 	.word	0xf7fea808
   37ca8:	2800fac1 	.word	0x2800fac1
   37cac:	a908db3d 	.word	0xa908db3d
   37cb0:	4608aa14 	.word	0x4608aa14
   37cb4:	fd4ef7fe 	.word	0xfd4ef7fe
   37cb8:	28004604 	.word	0x28004604
   37cbc:	ae80f47f 	.word	0xae80f47f
   37cc0:	aa17a90b 	.word	0xaa17a90b
   37cc4:	f7fe4608 	.word	0xf7fe4608
   37cc8:	4604fd45 	.word	0x4604fd45
   37ccc:	f47f2800 	.word	0xf47f2800
   37cd0:	a90eae77 	.word	0xa90eae77
   37cd4:	4608aa1a 	.word	0x4608aa1a
   37cd8:	fd3cf7fe 	.word	0xfd3cf7fe
   37cdc:	28004604 	.word	0x28004604
   37ce0:	ae6ef47f 	.word	0xae6ef47f
   37ce4:	a808a91d 	.word	0xa808a91d
   37ce8:	9004f8cd 	.word	0x9004f8cd
   37cec:	881de9cd 	.word	0x881de9cd
   37cf0:	f7fd971f 	.word	0xf7fd971f
   37cf4:	2800fd97 	.word	0x2800fd97
   37cf8:	af5af47f 	.word	0xaf5af47f
   37cfc:	f04f4680 	.word	0xf04f4680
   37d00:	a91d0901 	.word	0xa91d0901
   37d04:	f8cda817 	.word	0xf8cda817
   37d08:	e9cd8004 	.word	0xe9cd8004
   37d0c:	971f991d 	.word	0x971f991d
   37d10:	fd88f7fd 	.word	0xfd88f7fd
   37d14:	da232800 	.word	0xda232800
   37d18:	462aa917 	.word	0x462aa917
   37d1c:	f7fe4608 	.word	0xf7fe4608
   37d20:	4604fca5 	.word	0x4604fca5
   37d24:	d0ec2800 	.word	0xd0ec2800
   37d28:	a914e64a 	.word	0xa914e64a
   37d2c:	4608aa08 	.word	0x4608aa08
   37d30:	fd10f7fe 	.word	0xfd10f7fe
   37d34:	28004604 	.word	0x28004604
   37d38:	ae42f47f 	.word	0xae42f47f
   37d3c:	aa0ba917 	.word	0xaa0ba917
   37d40:	f7fe4608 	.word	0xf7fe4608
   37d44:	4604fd07 	.word	0x4604fd07
   37d48:	f47f2800 	.word	0xf47f2800
   37d4c:	a91aae39 	.word	0xa91aae39
   37d50:	4608aa0e 	.word	0x4608aa0e
   37d54:	fcfef7fe 	.word	0xfcfef7fe
   37d58:	28004604 	.word	0x28004604
   37d5c:	e62fd0c2 	.word	0xe62fd0c2
   37d60:	a8174629 	.word	0xa8174629
   37d64:	fa62f7fe 	.word	0xfa62f7fe
   37d68:	db082800 	.word	0xdb082800
   37d6c:	462aa917 	.word	0x462aa917
   37d70:	f7fe4608 	.word	0xf7fe4608
   37d74:	4604fcef 	.word	0x4604fcef
   37d78:	d0f12800 	.word	0xd0f12800
   37d7c:	a917e620 	.word	0xa917e620
   37d80:	f7fd4630 	.word	0xf7fd4630
   37d84:	4604fe15 	.word	0x4604fe15
   37d88:	bf00e61a 	.word	0xbf00e61a

00037d8c <entropy_callback>:
   37d8c:	4c0ab538 	.word	0x4c0ab538
   37d90:	78254b0a 	.word	0x78254b0a
   37d94:	bf282a07 	.word	0xbf282a07
   37d98:	46082207 	.word	0x46082207
   37d9c:	1145eb03 	.word	0x1145eb03
   37da0:	f886f7e2 	.word	0xf886f7e2
   37da4:	20007823 	.word	0x20007823
   37da8:	b2db3301 	.word	0xb2db3301
   37dac:	bf082b07 	.word	0xbf082b07
   37db0:	70232300 	.word	0x70232300
   37db4:	bf00bd38 	.word	0xbf00bd38
   37db8:	2002c383 	.word	0x2002c383
   37dbc:	00049ff0 	.word	0x00049ff0

00037dc0 <es256_key_generate>:
   37dc0:	b0e5b5f0 	.word	0xb0e5b5f0
   37dc4:	71a8f89d 	.word	0x71a8f89d
   37dc8:	b152b158 	.word	0xb152b158
   37dcc:	291fb14b 	.word	0x291fb14b
   37dd0:	6819d907 	.word	0x6819d907
   37dd4:	d904293f 	.word	0xd904293f
   37dd8:	2955b13f 	.word	0x2955b13f
   37ddc:	240cd805 	.word	0x240cd805
   37de0:	2416e000 	.word	0x2416e000
   37de4:	b0654620 	.word	0xb0654620
   37de8:	461dbdf0 	.word	0x461dbdf0
   37dec:	21002304 	.word	0x21002304
   37df0:	46164604 	.word	0x46164604
   37df4:	f44fa814 	.word	0xf44fa814
   37df8:	f88d72a0 	.word	0xf88d72a0
   37dfc:	f007300c 	.word	0xf007300c
   37e00:	a814ffa5 	.word	0xa814ffa5
   37e04:	fd90f7f6 	.word	0xfd90f7f6
   37e08:	49292300 	.word	0x49292300
   37e0c:	a814461a 	.word	0xa814461a
   37e10:	f7f69300 	.word	0xf7f69300
   37e14:	a814fe8b 	.word	0xa814fe8b
   37e18:	46212220 	.word	0x46212220
   37e1c:	feaef7f6 	.word	0xfeaef7f6
   37e20:	a814b9b8 	.word	0xa814b9b8
   37e24:	fd86f7f6 	.word	0xfd86f7f6
   37e28:	f10d4621 	.word	0xf10d4621
   37e2c:	f007000d 	.word	0xf007000d
   37e30:	4604f8e7 	.word	0x4604f8e7
   37e34:	b1c7b9b8 	.word	0xb1c7b9b8
   37e38:	f7f6a814 	.word	0xf7f6a814
   37e3c:	2002f845 	.word	0x2002f845
   37e40:	f848f7f6 	.word	0xf848f7f6
   37e44:	a8144601 	.word	0xa8144601
   37e48:	f852f7f6 	.word	0xf852f7f6
   37e4c:	240eb1a8 	.word	0x240eb1a8
   37e50:	4a18e7c8 	.word	0x4a18e7c8
   37e54:	78114b18 	.word	0x78114b18
   37e58:	22074620 	.word	0x22074620
   37e5c:	1141eb03 	.word	0x1141eb03
   37e60:	f826f7e2 	.word	0xf826f7e2
   37e64:	2423e7dd 	.word	0x2423e7dd
   37e68:	a903e7bc 	.word	0xa903e7bc
   37e6c:	22401c70 	.word	0x22401c70
   37e70:	f81ef7e2 	.word	0xf81ef7e2
   37e74:	602b2341 	.word	0x602b2341
   37e78:	2103e7b4 	.word	0x2103e7b4
   37e7c:	f7f79815 	.word	0xf7f79815
   37e80:	2800f8df 	.word	0x2800f8df
   37e84:	9815d1e3 	.word	0x9815d1e3
   37e88:	f100aa03 	.word	0xf100aa03
   37e8c:	23410188 	.word	0x23410188
   37e90:	fba4f7f9 	.word	0xfba4f7f9
   37e94:	d1da2800 	.word	0xd1da2800
   37e98:	a8144631 	.word	0xa8144631
   37e9c:	f7f4682a 	.word	0xf7f4682a
   37ea0:	23b2fe89 	.word	0x23b2fe89
   37ea4:	602b4604 	.word	0x602b4604
   37ea8:	d09b2800 	.word	0xd09b2800
   37eac:	bf00e7cf 	.word	0xbf00e7cf
   37eb0:	00037d8d 	.word	0x00037d8d
   37eb4:	2002c383 	.word	0x2002c383
   37eb8:	00049ff0 	.word	0x00049ff0

00037ebc <bsd_os_application_irq_handler>:
   37ebc:	41f0e92d 	.word	0x41f0e92d
   37ec0:	f7ed4c33 	.word	0xf7ed4c33
   37ec4:	f04ffa3d 	.word	0xf04ffa3d
   37ec8:	4d320803 	.word	0x4d320803
   37ecc:	f1044f32 	.word	0xf1044f32
   37ed0:	e0040680 	.word	0xe0040680
   37ed4:	d0062b04 	.word	0xd0062b04
   37ed8:	42b43408 	.word	0x42b43408
   37edc:	f814d03b 	.word	0xf814d03b
   37ee0:	2b023c04 	.word	0x2b023c04
   37ee4:	6820d1f6 	.word	0x6820d1f6
   37ee8:	6803882a 	.word	0x6803882a
   37eec:	429ab29b 	.word	0x429ab29b
   37ef0:	8a2ad033 	.word	0x8a2ad033
   37ef4:	d032429a 	.word	0xd032429a
   37ef8:	429a8c2a 	.word	0x429a8c2a
   37efc:	8e2ad031 	.word	0x8e2ad031
   37f00:	d030429a 	.word	0xd030429a
   37f04:	2040f8b5 	.word	0x2040f8b5
   37f08:	d036429a 	.word	0xd036429a
   37f0c:	2050f8b5 	.word	0x2050f8b5
   37f10:	d034429a 	.word	0xd034429a
   37f14:	2060f8b5 	.word	0x2060f8b5
   37f18:	d032429a 	.word	0xd032429a
   37f1c:	2070f8b5 	.word	0x2070f8b5
   37f20:	d030429a 	.word	0xd030429a
   37f24:	2080f8b5 	.word	0x2080f8b5
   37f28:	d02e429a 	.word	0xd02e429a
   37f2c:	2090f8b5 	.word	0x2090f8b5
   37f30:	bf08429a 	.word	0xbf08429a
   37f34:	d1cf2309 	.word	0xd1cf2309
   37f38:	1303eb05 	.word	0x1303eb05
   37f3c:	68d9685a 	.word	0x68d9685a
   37f40:	b9904790 	.word	0xb9904790
   37f44:	68202201 	.word	0x68202201
   37f48:	2c04f804 	.word	0x2c04f804
   37f4c:	340868fb 	.word	0x340868fb
   37f50:	42b44798 	.word	0x42b44798
   37f54:	e8bdd1c3 	.word	0xe8bdd1c3
   37f58:	230081f0 	.word	0x230081f0
   37f5c:	2301e7ec 	.word	0x2301e7ec
   37f60:	2302e7ea 	.word	0x2302e7ea
   37f64:	2303e7e8 	.word	0x2303e7e8
   37f68:	2802e7e6 	.word	0x2802e7e6
   37f6c:	2304bf0a 	.word	0x2304bf0a
   37f70:	8c04f804 	.word	0x8c04f804
   37f74:	3c04f804 	.word	0x3c04f804
   37f78:	2304e7ae 	.word	0x2304e7ae
   37f7c:	2305e7dc 	.word	0x2305e7dc
   37f80:	2306e7da 	.word	0x2306e7da
   37f84:	2307e7d8 	.word	0x2307e7d8
   37f88:	2308e7d6 	.word	0x2308e7d6
   37f8c:	bf00e7d4 	.word	0xbf00e7d4
   37f90:	20025db0 	.word	0x20025db0
   37f94:	20025c74 	.word	0x20025c74
   37f98:	20025d14 	.word	0x20025d14

00037f9c <rpc_framework_init>:
   37f9c:	22a0b508 	.word	0x22a0b508
   37fa0:	48022100 	.word	0x48022100
   37fa4:	fed2f007 	.word	0xfed2f007
   37fa8:	bd082000 	.word	0xbd082000
   37fac:	20025c74 	.word	0x20025c74

00037fb0 <rpc_client_register>:
   37fb0:	2b008803 	.word	0x2b008803
   37fb4:	6842d045 	.word	0x6842d045
   37fb8:	2a004601 	.word	0x2a004601
   37fbc:	4a30d050 	.word	0x4a30d050
   37fc0:	42838810 	.word	0x42838810
   37fc4:	e92dd03d 	.word	0xe92dd03d
   37fc8:	8a1447f0 	.word	0x8a1447f0
   37fcc:	d03542a3 	.word	0xd03542a3
   37fd0:	42ab8c15 	.word	0x42ab8c15
   37fd4:	8e16d032 	.word	0x8e16d032
   37fd8:	d02f42b3 	.word	0xd02f42b3
   37fdc:	7040f8b2 	.word	0x7040f8b2
   37fe0:	d02b42bb 	.word	0xd02b42bb
   37fe4:	c050f8b2 	.word	0xc050f8b2
   37fe8:	d0274563 	.word	0xd0274563
   37fec:	e060f8b2 	.word	0xe060f8b2
   37ff0:	d0234573 	.word	0xd0234573
   37ff4:	8070f8b2 	.word	0x8070f8b2
   37ff8:	d01f4543 	.word	0xd01f4543
   37ffc:	9080f8b2 	.word	0x9080f8b2
   38000:	d01b454b 	.word	0xd01b454b
   38004:	a090f8b2 	.word	0xa090f8b2
   38008:	d0174553 	.word	0xd0174553
   3800c:	b35cb1e0 	.word	0xb35cb1e0
   38010:	b36eb365 	.word	0xb36eb365
   38014:	f1bcb377 	.word	0xf1bcb377
   38018:	d02d0f00 	.word	0xd02d0f00
   3801c:	0f00f1be 	.word	0x0f00f1be
   38020:	f1b8d020 	.word	0xf1b8d020
   38024:	d0290f00 	.word	0xd0290f00
   38028:	0f00f1b9 	.word	0x0f00f1b9
   3802c:	2009d00b 	.word	0x2009d00b
   38030:	0f00f1ba 	.word	0x0f00f1ba
   38034:	2004d008 	.word	0x2004d008
   38038:	87f0e8bd 	.word	0x87f0e8bd
   3803c:	e8bd2007 	.word	0xe8bd2007
   38040:	200787f0 	.word	0x200787f0
   38044:	20084770 	.word	0x20084770
   38048:	52130100 	.word	0x52130100
   3804c:	4402684b 	.word	0x4402684b
   38050:	688b6053 	.word	0x688b6053
   38054:	60932000 	.word	0x60932000
   38058:	60d368cb 	.word	0x60d368cb
   3805c:	87f0e8bd 	.word	0x87f0e8bd
   38060:	4770200e 	.word	0x4770200e
   38064:	e7ef2006 	.word	0xe7ef2006
   38068:	e7ed2001 	.word	0xe7ed2001
   3806c:	e7eb2002 	.word	0xe7eb2002
   38070:	e7e92003 	.word	0xe7e92003
   38074:	e7e72004 	.word	0xe7e72004
   38078:	e7e52005 	.word	0xe7e52005
   3807c:	e7e32007 	.word	0xe7e32007
   38080:	20025c74 	.word	0x20025c74

00038084 <rpc_transport_input>:
   38084:	4a82b538 	.word	0x4a82b538
   38088:	8810680b 	.word	0x8810680b
   3808c:	4298b29b 	.word	0x4298b29b
   38090:	8a10d027 	.word	0x8a10d027
   38094:	d0244298 	.word	0xd0244298
   38098:	42988c10 	.word	0x42988c10
   3809c:	8e10d021 	.word	0x8e10d021
   380a0:	d01e4298 	.word	0xd01e4298
   380a4:	0040f8b2 	.word	0x0040f8b2
   380a8:	d01a4298 	.word	0xd01a4298
   380ac:	0050f8b2 	.word	0x0050f8b2
   380b0:	d0164298 	.word	0xd0164298
   380b4:	0060f8b2 	.word	0x0060f8b2
   380b8:	d0124298 	.word	0xd0124298
   380bc:	0070f8b2 	.word	0x0070f8b2
   380c0:	d00e4298 	.word	0xd00e4298
   380c4:	0080f8b2 	.word	0x0080f8b2
   380c8:	d00a4298 	.word	0xd00a4298
   380cc:	2090f8b2 	.word	0x2090f8b2
   380d0:	d006429a 	.word	0xd006429a
   380d4:	b1186888 	.word	0xb1186888
   380d8:	691b4b6e 	.word	0x691b4b6e
   380dc:	20004798 	.word	0x20004798
   380e0:	6888bd38 	.word	0x6888bd38
   380e4:	f0002800 	.word	0xf0002800
   380e8:	4a6b8098 	.word	0x4a6b8098
   380ec:	2c006814 	.word	0x2c006814
   380f0:	6894d03c 	.word	0x6894d03c
   380f4:	f0002c00 	.word	0xf0002c00
   380f8:	6914809a 	.word	0x6914809a
   380fc:	f0002c00 	.word	0xf0002c00
   38100:	6994809a 	.word	0x6994809a
   38104:	f0002c00 	.word	0xf0002c00
   38108:	6a14809a 	.word	0x6a14809a
   3810c:	f0002c00 	.word	0xf0002c00
   38110:	6a94809a 	.word	0x6a94809a
   38114:	f0002c00 	.word	0xf0002c00
   38118:	6b148084 	.word	0x6b148084
   3811c:	f0002c00 	.word	0xf0002c00
   38120:	6b948098 	.word	0x6b948098
   38124:	f0002c00 	.word	0xf0002c00
   38128:	6c148096 	.word	0x6c148096
   3812c:	f0002c00 	.word	0xf0002c00
   38130:	6c948096 	.word	0x6c948096
   38134:	f0002c00 	.word	0xf0002c00
   38138:	6d148096 	.word	0x6d148096
   3813c:	f0002c00 	.word	0xf0002c00
   38140:	6d948096 	.word	0x6d948096
   38144:	f0002c00 	.word	0xf0002c00
   38148:	6e148098 	.word	0x6e148098
   3814c:	f0002c00 	.word	0xf0002c00
   38150:	6e948098 	.word	0x6e948098
   38154:	f0002c00 	.word	0xf0002c00
   38158:	6f148096 	.word	0x6f148096
   3815c:	f0002c00 	.word	0xf0002c00
   38160:	6f948094 	.word	0x6f948094
   38164:	2001b10c 	.word	0x2001b10c
   38168:	240fbd38 	.word	0x240fbd38
   3816c:	05c4eb02 	.word	0x05c4eb02
   38170:	0034f842 	.word	0x0034f842
   38174:	4b4980ab 	.word	0x4b4980ab
   38178:	2a01781a 	.word	0x2a01781a
   3817c:	7a1ad053 	.word	0x7a1ad053
   38180:	d0412a01 	.word	0xd0412a01
   38184:	2a017c1a 	.word	0x2a017c1a
   38188:	7e1ad04f 	.word	0x7e1ad04f
   3818c:	d0502a01 	.word	0xd0502a01
   38190:	2020f893 	.word	0x2020f893
   38194:	d0502a01 	.word	0xd0502a01
   38198:	2028f893 	.word	0x2028f893
   3819c:	d0502a01 	.word	0xd0502a01
   381a0:	2030f893 	.word	0x2030f893
   381a4:	d03a2a01 	.word	0xd03a2a01
   381a8:	2038f893 	.word	0x2038f893
   381ac:	d04c2a01 	.word	0xd04c2a01
   381b0:	2040f893 	.word	0x2040f893
   381b4:	d04a2a01 	.word	0xd04a2a01
   381b8:	2048f893 	.word	0x2048f893
   381bc:	d04c2a01 	.word	0xd04c2a01
   381c0:	2050f893 	.word	0x2050f893
   381c4:	d04c2a01 	.word	0xd04c2a01
   381c8:	2058f893 	.word	0x2058f893
   381cc:	d04c2a01 	.word	0xd04c2a01
   381d0:	2060f893 	.word	0x2060f893
   381d4:	d04c2a01 	.word	0xd04c2a01
   381d8:	2068f893 	.word	0x2068f893
   381dc:	d04a2a01 	.word	0xd04a2a01
   381e0:	2070f893 	.word	0x2070f893
   381e4:	d04a2a01 	.word	0xd04a2a01
   381e8:	2078f893 	.word	0x2078f893
   381ec:	d00a2a01 	.word	0xd00a2a01
   381f0:	d0b82c10 	.word	0xd0b82c10
   381f4:	4b282200 	.word	0x4b282200
   381f8:	eb032001 	.word	0xeb032001
   381fc:	808a01c4 	.word	0x808a01c4
   38200:	2034f843 	.word	0x2034f843
   38204:	220fbd38 	.word	0x220fbd38
   38208:	eb032402 	.word	0xeb032402
   3820c:	f80300c2 	.word	0xf80300c2
   38210:	60414032 	.word	0x60414032
   38214:	f88cf7ed 	.word	0xf88cf7ed
   38218:	2410e7a5 	.word	0x2410e7a5
   3821c:	2206e7ab 	.word	0x2206e7ab
   38220:	2405e7f2 	.word	0x2405e7f2
   38224:	2200e7a2 	.word	0x2200e7a2
   38228:	2202e7ee 	.word	0x2202e7ee
   3822c:	2401e7ec 	.word	0x2401e7ec
   38230:	2203e79c 	.word	0x2203e79c
   38234:	2402e7e8 	.word	0x2402e7e8
   38238:	2204e798 	.word	0x2204e798
   3823c:	2403e7e4 	.word	0x2403e7e4
   38240:	2205e794 	.word	0x2205e794
   38244:	2404e7e0 	.word	0x2404e7e0
   38248:	2207e790 	.word	0x2207e790
   3824c:	2208e7dc 	.word	0x2208e7dc
   38250:	2406e7da 	.word	0x2406e7da
   38254:	2407e78a 	.word	0x2407e78a
   38258:	2209e788 	.word	0x2209e788
   3825c:	2408e7d4 	.word	0x2408e7d4
   38260:	220ae784 	.word	0x220ae784
   38264:	2409e7d0 	.word	0x2409e7d0
   38268:	220be780 	.word	0x220be780
   3826c:	240ae7cc 	.word	0x240ae7cc
   38270:	220ce77c 	.word	0x220ce77c
   38274:	220de7c8 	.word	0x220de7c8
   38278:	240be7c6 	.word	0x240be7c6
   3827c:	220ee776 	.word	0x220ee776
   38280:	240ce7c2 	.word	0x240ce7c2
   38284:	240de772 	.word	0x240de772
   38288:	240ee770 	.word	0x240ee770
   3828c:	bf00e76e 	.word	0xbf00e76e
   38290:	20025c74 	.word	0x20025c74
   38294:	20025d14 	.word	0x20025d14
   38298:	20025d2c 	.word	0x20025d2c
   3829c:	20025dac 	.word	0x20025dac

000382a0 <rpc_transport_register>:
   382a0:	2900b4f0 	.word	0x2900b4f0
   382a4:	2800d052 	.word	0x2800d052
   382a8:	6883d050 	.word	0x6883d050
   382ac:	d04d2b00 	.word	0xd04d2b00
   382b0:	2b006903 	.word	0x2b006903
   382b4:	6843d04a 	.word	0x6843d04a
   382b8:	d0472b00 	.word	0xd0472b00
   382bc:	2b0068c3 	.word	0x2b0068c3
   382c0:	6803d044 	.word	0x6803d044
   382c4:	d0412b00 	.word	0xd0412b00
   382c8:	2b006943 	.word	0x2b006943
   382cc:	2601d03e 	.word	0x2601d03e
   382d0:	46042500 	.word	0x46042500
   382d4:	4a1f460f 	.word	0x4a1f460f
   382d8:	f8df4b1f 	.word	0xf8df4b1f
   382dc:	7416c080 	.word	0x7416c080
   382e0:	f8827616 	.word	0xf8827616
   382e4:	f8826020 	.word	0xf8826020
   382e8:	f8826028 	.word	0xf8826028
   382ec:	f8826030 	.word	0xf8826030
   382f0:	f8826038 	.word	0xf8826038
   382f4:	f8826040 	.word	0xf8826040
   382f8:	f8826048 	.word	0xf8826048
   382fc:	f8826050 	.word	0xf8826050
   38300:	f8826058 	.word	0xf8826058
   38304:	f8826060 	.word	0xf8826060
   38308:	f8826068 	.word	0xf8826068
   3830c:	f8826070 	.word	0xf8826070
   38310:	611d6078 	.word	0x611d6078
   38314:	621d619d 	.word	0x621d619d
   38318:	631d629d 	.word	0x631d629d
   3831c:	641d639d 	.word	0x641d639d
   38320:	651d649d 	.word	0x651d649d
   38324:	661d659d 	.word	0x661d659d
   38328:	671d669d 	.word	0x671d669d
   3832c:	7016679d 	.word	0x7016679d
   38330:	601d7216 	.word	0x601d7216
   38334:	cc0f609d 	.word	0xcc0f609d
   38338:	000fe8ac 	.word	0x000fe8ac
   3833c:	0003e894 	.word	0x0003e894
   38340:	0003e88c 	.word	0x0003e88c
   38344:	4628603e 	.word	0x4628603e
   38348:	4770bcf0 	.word	0x4770bcf0
   3834c:	4628250e 	.word	0x4628250e
   38350:	4770bcf0 	.word	0x4770bcf0
   38354:	20025dac 	.word	0x20025dac
   38358:	20025d2c 	.word	0x20025d2c
   3835c:	20025d14 	.word	0x20025d14

00038360 <rpc_transport_unregister>:
   38360:	d03a2800 	.word	0xd03a2800
   38364:	47f0e92d 	.word	0x47f0e92d
   38368:	4c1d4680 	.word	0x4c1d4680
   3836c:	05a0f104 	.word	0x05a0f104
   38370:	341068a3 	.word	0x341068a3
   38374:	4798b103 	.word	0x4798b103
   38378:	d1f942ac 	.word	0xd1f942ac
   3837c:	0901f04f 	.word	0x0901f04f
   38380:	4c182600 	.word	0x4c182600
   38384:	f8df4d18 	.word	0xf8df4d18
   38388:	f104a064 	.word	0xf104a064
   3838c:	f8140780 	.word	0xf8140780
   38390:	2b013c04 	.word	0x2b013c04
   38394:	f8dad005 	.word	0xf8dad005
   38398:	6820300c 	.word	0x6820300c
   3839c:	f8044798 	.word	0xf8044798
   383a0:	f8559c04 	.word	0xf8559c04
   383a4:	34080c04 	.word	0x34080c04
   383a8:	f8dab128 	.word	0xf8dab128
   383ac:	47983010 	.word	0x47983010
   383b0:	f845802e 	.word	0xf845802e
   383b4:	42bc6c04 	.word	0x42bc6c04
   383b8:	0508f105 	.word	0x0508f105
   383bc:	f8d8d1e7 	.word	0xf8d8d1e7
   383c0:	22180000 	.word	0x22180000
   383c4:	eb003801 	.word	0xeb003801
   383c8:	eb0a0040 	.word	0xeb0a0040
   383cc:	210000c0 	.word	0x210000c0
   383d0:	fcbcf007 	.word	0xfcbcf007
   383d4:	e8bd2000 	.word	0xe8bd2000
   383d8:	200e87f0 	.word	0x200e87f0
   383dc:	bf004770 	.word	0xbf004770
   383e0:	20025c74 	.word	0x20025c74
   383e4:	20025db0 	.word	0x20025db0
   383e8:	20025d30 	.word	0x20025d30
   383ec:	20025d14 	.word	0x20025d14

000383f0 <rpc_message_send>:
   383f0:	b171b168 	.word	0xb171b168
   383f4:	68534a09 	.word	0x68534a09
   383f8:	684bb16b 	.word	0x684bb16b
   383fc:	f0238008 	.word	0xf0238008
   38400:	f04303ff 	.word	0xf04303ff
   38404:	68120302 	.word	0x68120302
   38408:	4608604b 	.word	0x4608604b
   3840c:	20074710 	.word	0x20074710
   38410:	200e4770 	.word	0x200e4770
   38414:	20084770 	.word	0x20084770
   38418:	bf004770 	.word	0xbf004770
   3841c:	20025d14 	.word	0x20025d14

00038420 <rpc_message_alloc>:
   38420:	b330b35a 	.word	0xb330b35a
   38424:	e92d2300 	.word	0xe92d2300
   38428:	4f1541f0 	.word	0x4f1541f0
   3842c:	687b6013 	.word	0x687b6013
   38430:	4615b30b 	.word	0x4615b30b
   38434:	4606460c 	.word	0x4606460c
   38438:	4798b959 	.word	0x4798b959
   3843c:	b1a84603 	.word	0xb1a84603
   38440:	60dc46a0 	.word	0x60dc46a0
   38444:	8008f8c3 	.word	0x8008f8c3
   38448:	602b801e 	.word	0x602b801e
   3844c:	e8bd2000 	.word	0xe8bd2000
   38450:	68bb81f0 	.word	0x68bb81f0
   38454:	47984608 	.word	0x47984608
   38458:	b1384680 	.word	0xb1384680
   3845c:	4798687b 	.word	0x4798687b
   38460:	28004603 	.word	0x28004603
   38464:	693bd1ed 	.word	0x693bd1ed
   38468:	47984640 	.word	0x47984640
   3846c:	e8bd2004 	.word	0xe8bd2004
   38470:	200781f0 	.word	0x200781f0
   38474:	20084770 	.word	0x20084770
   38478:	200ee7f9 	.word	0x200ee7f9
   3847c:	bf004770 	.word	0xbf004770
   38480:	20025d14 	.word	0x20025d14

00038484 <rpc_message_free>:
   38484:	f0002800 	.word	0xf0002800
   38488:	2900808c 	.word	0x2900808c
   3848c:	80e9f000 	.word	0x80e9f000
   38490:	4a83b538 	.word	0x4a83b538
   38494:	2b006853 	.word	0x2b006853
   38498:	8085f000 	.word	0x8085f000
   3849c:	46084c81 	.word	0x46084c81
   384a0:	42996863 	.word	0x42996863
   384a4:	8085f000 	.word	0x8085f000
   384a8:	429868e3 	.word	0x429868e3
   384ac:	808ef000 	.word	0x808ef000
   384b0:	42986963 	.word	0x42986963
   384b4:	8090f000 	.word	0x8090f000
   384b8:	429869e3 	.word	0x429869e3
   384bc:	8092f000 	.word	0x8092f000
   384c0:	42986a63 	.word	0x42986a63
   384c4:	8095f000 	.word	0x8095f000
   384c8:	42986ae3 	.word	0x42986ae3
   384cc:	8098f000 	.word	0x8098f000
   384d0:	42986b63 	.word	0x42986b63
   384d4:	809bf000 	.word	0x809bf000
   384d8:	42986be3 	.word	0x42986be3
   384dc:	809ef000 	.word	0x809ef000
   384e0:	42986c63 	.word	0x42986c63
   384e4:	80a1f000 	.word	0x80a1f000
   384e8:	42986ce3 	.word	0x42986ce3
   384ec:	80a4f000 	.word	0x80a4f000
   384f0:	42986d63 	.word	0x42986d63
   384f4:	80a7f000 	.word	0x80a7f000
   384f8:	42986de3 	.word	0x42986de3
   384fc:	80aaf000 	.word	0x80aaf000
   38500:	42986e63 	.word	0x42986e63
   38504:	80aff000 	.word	0x80aff000
   38508:	42986ee3 	.word	0x42986ee3
   3850c:	80b2f000 	.word	0x80b2f000
   38510:	42986f63 	.word	0x42986f63
   38514:	80b5f000 	.word	0x80b5f000
   38518:	42836fe3 	.word	0x42836fe3
   3851c:	80b8f000 	.word	0x80b8f000
   38520:	479868d3 	.word	0x479868d3
   38524:	2b047823 	.word	0x2b047823
   38528:	7a23d03f 	.word	0x7a23d03f
   3852c:	d03c2b04 	.word	0xd03c2b04
   38530:	2b047c23 	.word	0x2b047c23
   38534:	7e23d039 	.word	0x7e23d039
   38538:	d0362b04 	.word	0xd0362b04
   3853c:	3020f894 	.word	0x3020f894
   38540:	d0322b04 	.word	0xd0322b04
   38544:	3028f894 	.word	0x3028f894
   38548:	d02e2b04 	.word	0xd02e2b04
   3854c:	3030f894 	.word	0x3030f894
   38550:	d02a2b04 	.word	0xd02a2b04
   38554:	3038f894 	.word	0x3038f894
   38558:	d0262b04 	.word	0xd0262b04
   3855c:	3040f894 	.word	0x3040f894
   38560:	d0222b04 	.word	0xd0222b04
   38564:	3048f894 	.word	0x3048f894
   38568:	d01e2b04 	.word	0xd01e2b04
   3856c:	3050f894 	.word	0x3050f894
   38570:	d01a2b04 	.word	0xd01a2b04
   38574:	3058f894 	.word	0x3058f894
   38578:	d0162b04 	.word	0xd0162b04
   3857c:	3060f894 	.word	0x3060f894
   38580:	d0122b04 	.word	0xd0122b04
   38584:	3068f894 	.word	0x3068f894
   38588:	d00e2b04 	.word	0xd00e2b04
   3858c:	3070f894 	.word	0x3070f894
   38590:	d00a2b04 	.word	0xd00a2b04
   38594:	3078f894 	.word	0x3078f894
   38598:	bf182b04 	.word	0xbf182b04
   3859c:	d0042000 	.word	0xd0042000
   385a0:	2007bd38 	.word	0x2007bd38
   385a4:	20084770 	.word	0x20084770
   385a8:	f7ecbd38 	.word	0xf7ecbd38
   385ac:	2000fec1 	.word	0x2000fec1
   385b0:	7821bd38 	.word	0x7821bd38
   385b4:	f47f2903 	.word	0xf47f2903
   385b8:	2100af77 	.word	0x2100af77
   385bc:	46182501 	.word	0x46182501
   385c0:	f80468d2 	.word	0xf80468d2
   385c4:	47905031 	.word	0x47905031
   385c8:	bd382000 	.word	0xbd382000
   385cc:	29037a21 	.word	0x29037a21
   385d0:	af6ef47f 	.word	0xaf6ef47f
   385d4:	e7f12101 	.word	0xe7f12101
   385d8:	29037c21 	.word	0x29037c21
   385dc:	af6cf47f 	.word	0xaf6cf47f
   385e0:	e7eb2102 	.word	0xe7eb2102
   385e4:	29037e21 	.word	0x29037e21
   385e8:	6a63d0e8 	.word	0x6a63d0e8
   385ec:	f47f4298 	.word	0xf47f4298
   385f0:	f894af6b 	.word	0xf894af6b
   385f4:	29031020 	.word	0x29031020
   385f8:	af66f47f 	.word	0xaf66f47f
   385fc:	e7dd2104 	.word	0xe7dd2104
   38600:	1028f894 	.word	0x1028f894
   38604:	f47f2903 	.word	0xf47f2903
   38608:	2105af63 	.word	0x2105af63
   3860c:	f894e7d6 	.word	0xf894e7d6
   38610:	29031030 	.word	0x29031030
   38614:	af60f47f 	.word	0xaf60f47f
   38618:	e7cf2106 	.word	0xe7cf2106
   3861c:	1038f894 	.word	0x1038f894
   38620:	f47f2903 	.word	0xf47f2903
   38624:	2107af5d 	.word	0x2107af5d
   38628:	f894e7c8 	.word	0xf894e7c8
   3862c:	29031040 	.word	0x29031040
   38630:	af5af47f 	.word	0xaf5af47f
   38634:	e7c12108 	.word	0xe7c12108
   38638:	1048f894 	.word	0x1048f894
   3863c:	f47f2903 	.word	0xf47f2903
   38640:	2109af57 	.word	0x2109af57
   38644:	f894e7ba 	.word	0xf894e7ba
   38648:	29031050 	.word	0x29031050
   3864c:	af54f47f 	.word	0xaf54f47f
   38650:	e7b3210a 	.word	0xe7b3210a
   38654:	1058f894 	.word	0x1058f894
   38658:	f47f2903 	.word	0xf47f2903
   3865c:	210baf51 	.word	0x210baf51
   38660:	200ee7ac 	.word	0x200ee7ac
   38664:	f8944770 	.word	0xf8944770
   38668:	29031060 	.word	0x29031060
   3866c:	af4cf47f 	.word	0xaf4cf47f
   38670:	e7a3210c 	.word	0xe7a3210c
   38674:	1068f894 	.word	0x1068f894
   38678:	f47f2903 	.word	0xf47f2903
   3867c:	210daf49 	.word	0x210daf49
   38680:	f894e79c 	.word	0xf894e79c
   38684:	29031070 	.word	0x29031070
   38688:	af46f47f 	.word	0xaf46f47f
   3868c:	e795210e 	.word	0xe795210e
   38690:	3078f894 	.word	0x3078f894
   38694:	f47f2b03 	.word	0xf47f2b03
   38698:	4603af43 	.word	0x4603af43
   3869c:	e78d210f 	.word	0xe78d210f
   386a0:	20025d14 	.word	0x20025d14
   386a4:	20025dac 	.word	0x20025dac

000386a8 <rpc_message_data_free>:
   386a8:	f0002800 	.word	0xf0002800
   386ac:	29008091 	.word	0x29008091
   386b0:	80e4f000 	.word	0x80e4f000
   386b4:	4a81b538 	.word	0x4a81b538
   386b8:	2b006853 	.word	0x2b006853
   386bc:	808af000 	.word	0x808af000
   386c0:	681c4b7f 	.word	0x681c4b7f
   386c4:	f00042a1 	.word	0xf00042a1
   386c8:	689c8087 	.word	0x689c8087
   386cc:	f00042a1 	.word	0xf00042a1
   386d0:	691c808f 	.word	0x691c808f
   386d4:	f00042a1 	.word	0xf00042a1
   386d8:	699c8091 	.word	0x699c8091
   386dc:	f00042a1 	.word	0xf00042a1
   386e0:	6a1c8093 	.word	0x6a1c8093
   386e4:	f00042a1 	.word	0xf00042a1
   386e8:	6a9c8095 	.word	0x6a9c8095
   386ec:	f00042a1 	.word	0xf00042a1
   386f0:	6b1c8097 	.word	0x6b1c8097
   386f4:	f00042a1 	.word	0xf00042a1
   386f8:	6b9c8099 	.word	0x6b9c8099
   386fc:	f00042a1 	.word	0xf00042a1
   38700:	6c1c809b 	.word	0x6c1c809b
   38704:	f00042a1 	.word	0xf00042a1
   38708:	6c9c809d 	.word	0x6c9c809d
   3870c:	f00042a1 	.word	0xf00042a1
   38710:	6d1c80a0 	.word	0x6d1c80a0
   38714:	f00042a1 	.word	0xf00042a1
   38718:	6d9c80a3 	.word	0x6d9c80a3
   3871c:	f00042a1 	.word	0xf00042a1
   38720:	6e1c80a6 	.word	0x6e1c80a6
   38724:	f00042a1 	.word	0xf00042a1
   38728:	6e9c80ab 	.word	0x6e9c80ab
   3872c:	f00042a1 	.word	0xf00042a1
   38730:	6f1c80ae 	.word	0x6f1c80ae
   38734:	f00042a1 	.word	0xf00042a1
   38738:	6f9c80b1 	.word	0x6f9c80b1
   3873c:	f000428c 	.word	0xf000428c
   38740:	691380b4 	.word	0x691380b4
   38744:	47984608 	.word	0x47984608
   38748:	781a4b5e 	.word	0x781a4b5e
   3874c:	d03b2a04 	.word	0xd03b2a04
   38750:	2a047a1a 	.word	0x2a047a1a
   38754:	7c1ad038 	.word	0x7c1ad038
   38758:	d0352a04 	.word	0xd0352a04
   3875c:	2a047e1a 	.word	0x2a047e1a
   38760:	f893d032 	.word	0xf893d032
   38764:	2a042020 	.word	0x2a042020
   38768:	f893d02e 	.word	0xf893d02e
   3876c:	2a042028 	.word	0x2a042028
   38770:	f893d02a 	.word	0xf893d02a
   38774:	2a042030 	.word	0x2a042030
   38778:	f893d026 	.word	0xf893d026
   3877c:	2a042038 	.word	0x2a042038
   38780:	f893d022 	.word	0xf893d022
   38784:	2a042040 	.word	0x2a042040
   38788:	f893d01e 	.word	0xf893d01e
   3878c:	2a042048 	.word	0x2a042048
   38790:	f893d01a 	.word	0xf893d01a
   38794:	2a042050 	.word	0x2a042050
   38798:	f893d016 	.word	0xf893d016
   3879c:	2a042058 	.word	0x2a042058
   387a0:	f893d012 	.word	0xf893d012
   387a4:	2a042060 	.word	0x2a042060
   387a8:	f893d00e 	.word	0xf893d00e
   387ac:	2a042068 	.word	0x2a042068
   387b0:	f893d00a 	.word	0xf893d00a
   387b4:	2a042070 	.word	0x2a042070
   387b8:	f893d006 	.word	0xf893d006
   387bc:	2b043078 	.word	0x2b043078
   387c0:	2000bf18 	.word	0x2000bf18
   387c4:	bd38d000 	.word	0xbd38d000
   387c8:	fdb2f7ec 	.word	0xfdb2f7ec
   387cc:	bd382000 	.word	0xbd382000
   387d0:	47702007 	.word	0x47702007
   387d4:	bd382008 	.word	0xbd382008
   387d8:	4284889c 	.word	0x4284889c
   387dc:	af75f47f 	.word	0xaf75f47f
   387e0:	20002400 	.word	0x20002400
   387e4:	05c4eb03 	.word	0x05c4eb03
   387e8:	0034f843 	.word	0x0034f843
   387ec:	e7a880a8 	.word	0xe7a880a8
   387f0:	4284899c 	.word	0x4284899c
   387f4:	af6df47f 	.word	0xaf6df47f
   387f8:	e7f22401 	.word	0xe7f22401
   387fc:	42848a9c 	.word	0x42848a9c
   38800:	af6bf47f 	.word	0xaf6bf47f
   38804:	e7ec2402 	.word	0xe7ec2402
   38808:	42848b9c 	.word	0x42848b9c
   3880c:	af69f47f 	.word	0xaf69f47f
   38810:	e7e62403 	.word	0xe7e62403
   38814:	42848c9c 	.word	0x42848c9c
   38818:	af67f47f 	.word	0xaf67f47f
   3881c:	e7e02404 	.word	0xe7e02404
   38820:	42848d9c 	.word	0x42848d9c
   38824:	af65f47f 	.word	0xaf65f47f
   38828:	e7da2405 	.word	0xe7da2405
   3882c:	42848e9c 	.word	0x42848e9c
   38830:	af63f47f 	.word	0xaf63f47f
   38834:	e7d42406 	.word	0xe7d42406
   38838:	42848f9c 	.word	0x42848f9c
   3883c:	af61f47f 	.word	0xaf61f47f
   38840:	e7ce2407 	.word	0xe7ce2407
   38844:	4044f8b3 	.word	0x4044f8b3
   38848:	f47f4284 	.word	0xf47f4284
   3884c:	2408af5e 	.word	0x2408af5e
   38850:	f8b3e7c7 	.word	0xf8b3e7c7
   38854:	4284404c 	.word	0x4284404c
   38858:	af5bf47f 	.word	0xaf5bf47f
   3885c:	e7c02409 	.word	0xe7c02409
   38860:	4054f8b3 	.word	0x4054f8b3
   38864:	f47f4284 	.word	0xf47f4284
   38868:	240aaf58 	.word	0x240aaf58
   3886c:	f8b3e7b9 	.word	0xf8b3e7b9
   38870:	4284405c 	.word	0x4284405c
   38874:	af55f47f 	.word	0xaf55f47f
   38878:	e7b2240b 	.word	0xe7b2240b
   3887c:	4770200e 	.word	0x4770200e
   38880:	4064f8b3 	.word	0x4064f8b3
   38884:	f47f4284 	.word	0xf47f4284
   38888:	240caf50 	.word	0x240caf50
   3888c:	f8b3e7a9 	.word	0xf8b3e7a9
   38890:	4284406c 	.word	0x4284406c
   38894:	af4df47f 	.word	0xaf4df47f
   38898:	e7a2240d 	.word	0xe7a2240d
   3889c:	4074f8b3 	.word	0x4074f8b3
   388a0:	f47f4284 	.word	0xf47f4284
   388a4:	240eaf4a 	.word	0x240eaf4a
   388a8:	f8b3e79b 	.word	0xf8b3e79b
   388ac:	4284407c 	.word	0x4284407c
   388b0:	240fbf08 	.word	0x240fbf08
   388b4:	af45f47f 	.word	0xaf45f47f
   388b8:	bf00e793 	.word	0xbf00e793
   388bc:	20025d14 	.word	0x20025d14
   388c0:	20025d2c 	.word	0x20025d2c
   388c4:	20025dac 	.word	0x20025dac

000388c8 <symbol_000fb79>:
   388c8:	b4302801 	.word	0xb4302801
   388cc:	d1034b0a 	.word	0xd1034b0a
   388d0:	7c1de00a 	.word	0x7c1de00a
   388d4:	d0084285 	.word	0xd0084285
   388d8:	4f14f853 	.word	0x4f14f853
   388dc:	d1f82c00 	.word	0xd1f82c00
   388e0:	002df06f 	.word	0x002df06f
   388e4:	4770bc30 	.word	0x4770bc30
   388e8:	600c4c04 	.word	0x600c4c04
   388ec:	2000685b 	.word	0x2000685b
   388f0:	6013bc30 	.word	0x6013bc30
   388f4:	bf004770 	.word	0xbf004770
   388f8:	0004a110 	.word	0x0004a110
   388fc:	0004a0dc 	.word	0x0004a0dc

00038900 <symbol_000494c>:
   38900:	b4302803 	.word	0xb4302803
   38904:	d1034b0a 	.word	0xd1034b0a
   38908:	7c1de00a 	.word	0x7c1de00a
   3890c:	d0084285 	.word	0xd0084285
   38910:	4f14f853 	.word	0x4f14f853
   38914:	d1f82c00 	.word	0xd1f82c00
   38918:	002df06f 	.word	0x002df06f
   3891c:	4770bc30 	.word	0x4770bc30
   38920:	600c4c04 	.word	0x600c4c04
   38924:	2000685b 	.word	0x2000685b
   38928:	6013bc30 	.word	0x6013bc30
   3892c:	bf004770 	.word	0xbf004770
   38930:	0004a0e8 	.word	0x0004a0e8
   38934:	0004a0d0 	.word	0x0004a0d0

00038938 <dfu_client_event_handler>:
   38938:	1b08f850 	.word	0x1b08f850
   3893c:	f7fb0c09 	.word	0xf7fb0c09
   38940:	bf00bff3 	.word	0xbf00bff3

00038944 <rpc_dfu_client_init>:
   38944:	f7ff4801 	.word	0xf7ff4801
   38948:	bf00bb33 	.word	0xbf00bb33
   3894c:	0004a160 	.word	0x0004a160

00038950 <rpc_dfu_client_request_alloc>:
   38950:	b5102300 	.word	0xb5102300
   38954:	9301b082 	.word	0x9301b082
   38958:	4604b158 	.word	0x4604b158
   3895c:	2006aa01 	.word	0x2006aa01
   38960:	fd5ef7ff 	.word	0xfd5ef7ff
   38964:	9b01b918 	.word	0x9b01b918
   38968:	3308b10b 	.word	0x3308b10b
   3896c:	b0026023 	.word	0xb0026023
   38970:	2007bd10 	.word	0x2007bd10
   38974:	bd10b002 	.word	0xbd10b002

00038978 <rpc_dfu_client_request_send>:
   38978:	4f70f411 	.word	0x4f70f411
   3897c:	b160d10b 	.word	0xb160d10b
   38980:	f8304603 	.word	0xf8304603
   38984:	20062c08 	.word	0x20062c08
   38988:	4101ea42 	.word	0x4101ea42
   3898c:	1d08f843 	.word	0x1d08f843
   38990:	f7ff4619 	.word	0xf7ff4619
   38994:	200fbd2d 	.word	0x200fbd2d
   38998:	20074770 	.word	0x20074770
   3899c:	bf004770 	.word	0xbf004770

000389a0 <rpc_dfu_client_message_free>:
   389a0:	f1a0b120 	.word	0xf1a0b120
   389a4:	20060108 	.word	0x20060108
   389a8:	bd6cf7ff 	.word	0xbd6cf7ff
   389ac:	47702007 	.word	0x47702007

000389b0 <rpc_dfu_client_data_free>:
   389b0:	4601b118 	.word	0x4601b118
   389b4:	f7ff2006 	.word	0xf7ff2006
   389b8:	2007be77 	.word	0x2007be77
   389bc:	bf004770 	.word	0xbf004770

000389c0 <mem_free>:
   389c0:	4ff0e92d 	.word	0x4ff0e92d
   389c4:	c0ccf8df 	.word	0xc0ccf8df
   389c8:	9000b083 	.word	0x9000b083
   389cc:	0b3cf10c 	.word	0x0b3cf10c
   389d0:	3008f8dc 	.word	0x3008f8dc
   389d4:	f8dcb12b 	.word	0xf8dcb12b
   389d8:	9c002000 	.word	0x9c002000
   389dc:	42a07810 	.word	0x42a07810
   389e0:	f10cd006 	.word	0xf10cd006
   389e4:	45e30c0c 	.word	0x45e30c0c
   389e8:	b003d1f2 	.word	0xb003d1f2
   389ec:	8ff0e8bd 	.word	0x8ff0e8bd
   389f0:	a004f8dc 	.word	0xa004f8dc
   389f4:	080aeb03 	.word	0x080aeb03
   389f8:	d2f245c2 	.word	0xd2f245c2
   389fc:	f8cd6853 	.word	0xf8cd6853
   38a00:	46d6c004 	.word	0x46d6c004
   38a04:	f8d2469c 	.word	0xf8d2469c
   38a08:	89979010 	.word	0x89979010
   38a0c:	000aebae 	.word	0x000aebae
   38a10:	f8b9b3df 	.word	0xf8b9b3df
   38a14:	42902002 	.word	0x42902002
   38a18:	4665d31c 	.word	0x4665d31c
   38a1c:	f1092400 	.word	0xf1092400
   38a20:	e0030304 	.word	0xe0030304
   38a24:	3304885a 	.word	0x3304885a
   38a28:	d8154282 	.word	0xd8154282
   38a2c:	6c04f833 	.word	0x6c04f833
   38a30:	42a73401 	.word	0x42a73401
   38a34:	5506fb02 	.word	0x5506fb02
   38a38:	0002eba0 	.word	0x0002eba0
   38a3c:	d1f1461e 	.word	0xd1f1461e
   38a40:	42812000 	.word	0x42812000
   38a44:	f10ed00d 	.word	0xf10ed00d
   38a48:	45f00e01 	.word	0x45f00e01
   38a4c:	f8ddd1de 	.word	0xf8ddd1de
   38a50:	e7c6c004 	.word	0xe7c6c004
   38a54:	464e4665 	.word	0x464e4665
   38a58:	fb008833 	.word	0xfb008833
   38a5c:	42815003 	.word	0x42815003
   38a60:	f5bed1f1 	.word	0xf5bed1f1
   38a64:	f8dd7f00 	.word	0xf8dd7f00
   38a68:	d0bac004 	.word	0xd0bac004
   38a6c:	4a082301 	.word	0x4a082301
   38a70:	115eea4f 	.word	0x115eea4f
   38a74:	0021f852 	.word	0x0021f852
   38a78:	0e1ff00e 	.word	0x0e1ff00e
   38a7c:	fe0efa03 	.word	0xfe0efa03
   38a80:	0000ea4e 	.word	0x0000ea4e
   38a84:	0021f842 	.word	0x0021f842
   38a88:	4638e7af 	.word	0x4638e7af
   38a8c:	bf00e7d9 	.word	0xbf00e7d9
   38a90:	20025e2c 	.word	0x20025e2c
   38a94:	20025e70 	.word	0x20025e70

00038a98 <mem_alloc.constprop.5>:
   38a98:	d0502800 	.word	0xd0502800
   38a9c:	f8d34b6d 	.word	0xf8d34b6d
   38aa0:	42902088 	.word	0x42902088
   38aa4:	e92dd84b 	.word	0xe92dd84b
   38aa8:	f8d34ff0 	.word	0xf8d34ff0
   38aac:	b083b08c 	.word	0xb083b08c
   38ab0:	0f00f1bb 	.word	0x0f00f1bb
   38ab4:	f10bd054 	.word	0xf10bd054
   38ab8:	469132ff 	.word	0x469132ff
   38abc:	f04f2600 	.word	0xf04f2600
   38ac0:	4f650812 	.word	0x4f650812
   38ac4:	f10b9201 	.word	0xf10b9201
   38ac8:	eb060e11 	.word	0xeb060e11
   38acc:	f8530209 	.word	0xf8530209
   38ad0:	32014038 	.word	0x32014038
   38ad4:	eb040852 	.word	0xeb040852
   38ad8:	f1020c44 	.word	0xf1020c44
   38adc:	f8530112 	.word	0xf8530112
   38ae0:	f8575031 	.word	0xf8575031
   38ae4:	f853a02c 	.word	0xf853a02c
   38ae8:	eb03403e 	.word	0xeb03403e
   38aec:	f8dc0cc8 	.word	0xf8dc0cc8
   38af0:	eb05c004 	.word	0xeb05c004
   38af4:	eb040545 	.word	0xeb040545
   38af8:	f8da0444 	.word	0xf8da0444
   38afc:	f857a010 	.word	0xf857a010
   38b00:	f8575025 	.word	0xf8575025
   38b04:	f83a4024 	.word	0xf83a4024
   38b08:	eb03a02c 	.word	0xeb03a02c
   38b0c:	eb0301c1 	.word	0xeb0301c1
   38b10:	68490cce 	.word	0x68490cce
   38b14:	6924692d 	.word	0x6924692d
   38b18:	c004f8dc 	.word	0xc004f8dc
   38b1c:	f8354550 	.word	0xf8354550
   38b20:	f8345021 	.word	0xf8345021
   38b24:	d915102c 	.word	0xd915102c
   38b28:	d2114288 	.word	0xd2114288
   38b2c:	d90842a8 	.word	0xd90842a8
   38b30:	45b11c56 	.word	0x45b11c56
   38b34:	8087f0c0 	.word	0x8087f0c0
   38b38:	0813f102 	.word	0x0813f102
   38b3c:	2000e7c5 	.word	0x2000e7c5
   38b40:	f1024770 	.word	0xf1024770
   38b44:	454e39ff 	.word	0x454e39ff
   38b48:	f102d87d 	.word	0xf102d87d
   38b4c:	e7bc0e11 	.word	0xe7bc0e11
   38b50:	0601f109 	.word	0x0601f109
   38b54:	d00745b3 	.word	0xd00745b3
   38b58:	d0012e10 	.word	0xd0012e10
   38b5c:	d80845b3 	.word	0xd80845b3
   38b60:	b0032000 	.word	0xb0032000
   38b64:	8ff0e8bd 	.word	0x8ff0e8bd
   38b68:	2a109a01 	.word	0x2a109a01
   38b6c:	4616bf18 	.word	0x4616bf18
   38b70:	f8dfd0f6 	.word	0xf8dfd0f6
   38b74:	eb03c0e8 	.word	0xeb03c0e8
   38b78:	e9d808c6 	.word	0xe9d808c6
   38b7c:	eb022424 	.word	0xeb022424
   38b80:	f8570242 	.word	0xf8570242
   38b84:	eb073022 	.word	0xeb073022
   38b88:	f8d20282 	.word	0xf8d20282
   38b8c:	691de004 	.word	0x691de004
   38b90:	d0562c00 	.word	0xd0562c00
   38b94:	4670462a 	.word	0x4670462a
   38b98:	eb0500a4 	.word	0xeb0500a4
   38b9c:	88510904 	.word	0x88510904
   38ba0:	45913204 	.word	0x45913204
   38ba4:	d1fa4408 	.word	0xd1fa4408
   38ba8:	f8b11929 	.word	0xf8b11929
   38bac:	4482a002 	.word	0x4482a002
   38bb0:	d9184582 	.word	0xd9184582
   38bb4:	f85c0941 	.word	0xf85c0941
   38bb8:	f0002021 	.word	0xf0002021
   38bbc:	fa22041f 	.word	0xfa22041f
   38bc0:	f019f904 	.word	0xf019f904
   38bc4:	d0070f01 	.word	0xd0070f01
   38bc8:	f85ce013 	.word	0xf85ce013
   38bcc:	fa222021 	.word	0xfa222021
   38bd0:	f019f904 	.word	0xf019f904
   38bd4:	d10c0f01 	.word	0xd10c0f01
   38bd8:	45823001 	.word	0x45823001
   38bdc:	1150ea4f 	.word	0x1150ea4f
   38be0:	041ff000 	.word	0x041ff000
   38be4:	3601d1f1 	.word	0x3601d1f1
   38be8:	f108455e 	.word	0xf108455e
   38bec:	d3c40808 	.word	0xd3c40808
   38bf0:	2601e7b6 	.word	0x2601e7b6
   38bf4:	f404fa06 	.word	0xf404fa06
   38bf8:	ea22899e 	.word	0xea22899e
   38bfc:	eba00204 	.word	0xeba00204
   38c00:	f84c000e 	.word	0xf84c000e
   38c04:	685c2021 	.word	0x685c2021
   38c08:	d0a92e00 	.word	0xd0a92e00
   38c0c:	4282886a 	.word	0x4282886a
   38c10:	2100d811 	.word	0x2100d811
   38c14:	e0031d2b 	.word	0xe0031d2b
   38c18:	3304885a 	.word	0x3304885a
   38c1c:	d80a4282 	.word	0xd80a4282
   38c20:	5c04f833 	.word	0x5c04f833
   38c24:	428e3101 	.word	0x428e3101
   38c28:	4405fb02 	.word	0x4405fb02
   38c2c:	0002eba0 	.word	0x0002eba0
   38c30:	d1f1461d 	.word	0xd1f1461d
   38c34:	882be794 	.word	0x882be794
   38c38:	4003fb00 	.word	0x4003fb00
   38c3c:	e8bdb003 	.word	0xe8bdb003
   38c40:	46708ff0 	.word	0x46708ff0
   38c44:	f1bbe7b0 	.word	0xf1bbe7b0
   38c48:	bf080f10 	.word	0xbf080f10
   38c4c:	d090260f 	.word	0xd090260f
   38c50:	bf00e786 	.word	0xbf00e786
   38c54:	20025eac 	.word	0x20025eac
   38c58:	20025e70 	.word	0x20025e70
   38c5c:	20025e2c 	.word	0x20025e2c

00038c60 <mem_alloc.constprop.4>:
   38c60:	d04c2800 	.word	0xd04c2800
   38c64:	681a4b6b 	.word	0x681a4b6b
   38c68:	d8484290 	.word	0xd8484290
   38c6c:	4ff0e92d 	.word	0x4ff0e92d
   38c70:	b083685f 	.word	0xb083685f
   38c74:	2f009700 	.word	0x2f009700
   38c78:	1e7ad051 	.word	0x1e7ad051
   38c7c:	21004696 	.word	0x21004696
   38c80:	0c01f04f 	.word	0x0c01f04f
   38c84:	92014c64 	.word	0x92014c64
   38c88:	020eeb01 	.word	0x020eeb01
   38c8c:	f8533201 	.word	0xf8533201
   38c90:	0852503c 	.word	0x0852503c
   38c94:	0801f102 	.word	0x0801f102
   38c98:	0545eb05 	.word	0x0545eb05
   38c9c:	9037f853 	.word	0x9037f853
   38ca0:	a025f854 	.word	0xa025f854
   38ca4:	6038f853 	.word	0x6038f853
   38ca8:	0549eb09 	.word	0x0549eb09
   38cac:	09cceb03 	.word	0x09cceb03
   38cb0:	9004f8d9 	.word	0x9004f8d9
   38cb4:	0646eb06 	.word	0x0646eb06
   38cb8:	a010f8da 	.word	0xa010f8da
   38cbc:	6026f854 	.word	0x6026f854
   38cc0:	5025f854 	.word	0x5025f854
   38cc4:	a029f83a 	.word	0xa029f83a
   38cc8:	0bc8eb03 	.word	0x0bc8eb03
   38ccc:	09c7eb03 	.word	0x09c7eb03
   38cd0:	f8db6936 	.word	0xf8db6936
   38cd4:	692db004 	.word	0x692db004
   38cd8:	9004f8d9 	.word	0x9004f8d9
   38cdc:	f8364550 	.word	0xf8364550
   38ce0:	f835602b 	.word	0xf835602b
   38ce4:	d9135029 	.word	0xd9135029
   38ce8:	d21042a8 	.word	0xd21042a8
   38cec:	d90842b0 	.word	0xd90842b0
   38cf0:	464145c6 	.word	0x464145c6
   38cf4:	8087f0c0 	.word	0x8087f0c0
   38cf8:	0c01f108 	.word	0x0c01f108
   38cfc:	2000e7c4 	.word	0x2000e7c4
   38d00:	f1024770 	.word	0xf1024770
   38d04:	45713eff 	.word	0x45713eff
   38d08:	4617d87d 	.word	0x4617d87d
   38d0c:	4639e7bc 	.word	0x4639e7bc
   38d10:	428a9a00 	.word	0x428a9a00
   38d14:	2910d007 	.word	0x2910d007
   38d18:	428ad001 	.word	0x428ad001
   38d1c:	2000d808 	.word	0x2000d808
   38d20:	e8bdb003 	.word	0xe8bdb003
   38d24:	9a018ff0 	.word	0x9a018ff0
   38d28:	bf182a10 	.word	0xbf182a10
   38d2c:	d0f64611 	.word	0xd0f64611
   38d30:	c0e8f8df 	.word	0xc0e8f8df
   38d34:	9000f8dd 	.word	0x9000f8dd
   38d38:	08c1eb03 	.word	0x08c1eb03
   38d3c:	2602e9d8 	.word	0x2602e9d8
   38d40:	0242eb02 	.word	0x0242eb02
   38d44:	3022f854 	.word	0x3022f854
   38d48:	0282eb04 	.word	0x0282eb04
   38d4c:	e004f8d2 	.word	0xe004f8d2
   38d50:	2e00691f 	.word	0x2e00691f
   38d54:	463ad055 	.word	0x463ad055
   38d58:	00b64670 	.word	0x00b64670
   38d5c:	0a06eb07 	.word	0x0a06eb07
   38d60:	32048855 	.word	0x32048855
   38d64:	44284592 	.word	0x44284592
   38d68:	19bdd1fa 	.word	0x19bdd1fa
   38d6c:	b002f8b5 	.word	0xb002f8b5
   38d70:	45834483 	.word	0x45834483
   38d74:	0945d918 	.word	0x0945d918
   38d78:	2025f85c 	.word	0x2025f85c
   38d7c:	061ff000 	.word	0x061ff000
   38d80:	fa06fa22 	.word	0xfa06fa22
   38d84:	0f01f01a 	.word	0x0f01f01a
   38d88:	e013d007 	.word	0xe013d007
   38d8c:	2025f85c 	.word	0x2025f85c
   38d90:	fa06fa22 	.word	0xfa06fa22
   38d94:	0f01f01a 	.word	0x0f01f01a
   38d98:	3001d10c 	.word	0x3001d10c
   38d9c:	ea4f4583 	.word	0xea4f4583
   38da0:	f0001550 	.word	0xf0001550
   38da4:	d1f1061f 	.word	0xd1f1061f
   38da8:	45493101 	.word	0x45493101
   38dac:	0808f108 	.word	0x0808f108
   38db0:	e7b4d3c4 	.word	0xe7b4d3c4
   38db4:	40b12101 	.word	0x40b12101
   38db8:	ea22899e 	.word	0xea22899e
   38dbc:	eba00201 	.word	0xeba00201
   38dc0:	f84c000e 	.word	0xf84c000e
   38dc4:	685c2025 	.word	0x685c2025
   38dc8:	d0a82e00 	.word	0xd0a82e00
   38dcc:	4282887a 	.word	0x4282887a
   38dd0:	2100d811 	.word	0x2100d811
   38dd4:	e0031d3b 	.word	0xe0031d3b
   38dd8:	3304885a 	.word	0x3304885a
   38ddc:	d80a4282 	.word	0xd80a4282
   38de0:	5c04f833 	.word	0x5c04f833
   38de4:	428e3101 	.word	0x428e3101
   38de8:	0002eba0 	.word	0x0002eba0
   38dec:	4405fb02 	.word	0x4405fb02
   38df0:	d1f1461f 	.word	0xd1f1461f
   38df4:	883be793 	.word	0x883be793
   38df8:	4003fb00 	.word	0x4003fb00
   38dfc:	e8bdb003 	.word	0xe8bdb003
   38e00:	46708ff0 	.word	0x46708ff0
   38e04:	9a00e7b1 	.word	0x9a00e7b1
   38e08:	bf082a10 	.word	0xbf082a10
   38e0c:	d08f210f 	.word	0xd08f210f
   38e10:	bf00e785 	.word	0xbf00e785
   38e14:	20025eac 	.word	0x20025eac
   38e18:	20025e70 	.word	0x20025e70
   38e1c:	20025e2c 	.word	0x20025e2c

00038e20 <nrf_mem_init>:
   38e20:	2200b570 	.word	0x2200b570
   38e24:	48332501 	.word	0x48332501
   38e28:	f8500951 	.word	0xf8500951
   38e2c:	f0024021 	.word	0xf0024021
   38e30:	fa05031f 	.word	0xfa05031f
   38e34:	3201f303 	.word	0x3201f303
   38e38:	f5b24323 	.word	0xf5b24323
   38e3c:	f8407f00 	.word	0xf8407f00
   38e40:	d1f13021 	.word	0xd1f13021
   38e44:	4b2c2400 	.word	0x4b2c2400
   38e48:	223c4621 	.word	0x223c4621
   38e4c:	601c482b 	.word	0x601c482b
   38e50:	ff7cf006 	.word	0xff7cf006
   38e54:	22052110 	.word	0x22052110
   38e58:	4e2a4b29 	.word	0x4e2a4b29
   38e5c:	4400e9c3 	.word	0x4400e9c3
   38e60:	615960d9 	.word	0x615960d9
   38e64:	625961d9 	.word	0x625961d9
   38e68:	635962d9 	.word	0x635962d9
   38e6c:	645963d9 	.word	0x645963d9
   38e70:	655964d9 	.word	0x655964d9
   38e74:	665965d9 	.word	0x665965d9
   38e78:	675966d9 	.word	0x675966d9
   38e7c:	609a67d9 	.word	0x609a67d9
   38e80:	619a611a 	.word	0x619a611a
   38e84:	629a621a 	.word	0x629a621a
   38e88:	639a631a 	.word	0x639a631a
   38e8c:	649a641a 	.word	0x649a641a
   38e90:	659a651a 	.word	0x659a651a
   38e94:	669a661a 	.word	0x669a661a
   38e98:	679a671a 	.word	0x679a671a
   38e9c:	2120e9c3 	.word	0x2120e9c3
   38ea0:	4422e9c3 	.word	0x4422e9c3
   38ea4:	2124e9c3 	.word	0x2124e9c3
   38ea8:	2126e9c3 	.word	0x2126e9c3
   38eac:	2128e9c3 	.word	0x2128e9c3
   38eb0:	212ae9c3 	.word	0x212ae9c3
   38eb4:	212ce9c3 	.word	0x212ce9c3
   38eb8:	212ee9c3 	.word	0x212ee9c3
   38ebc:	2130e9c3 	.word	0x2130e9c3
   38ec0:	2132e9c3 	.word	0x2132e9c3
   38ec4:	2134e9c3 	.word	0x2134e9c3
   38ec8:	2136e9c3 	.word	0x2136e9c3
   38ecc:	2138e9c3 	.word	0x2138e9c3
   38ed0:	213ae9c3 	.word	0x213ae9c3
   38ed4:	213ce9c3 	.word	0x213ce9c3
   38ed8:	213ee9c3 	.word	0x213ee9c3
   38edc:	1104f8c3 	.word	0x1104f8c3
   38ee0:	2100f8c3 	.word	0x2100f8c3
   38ee4:	110cf8c3 	.word	0x110cf8c3
   38ee8:	2108f8c3 	.word	0x2108f8c3
   38eec:	70354620 	.word	0x70354620
   38ef0:	bf00bd70 	.word	0xbf00bd70
   38ef4:	20025e2c 	.word	0x20025e2c
   38ef8:	20025e6c 	.word	0x20025e6c
   38efc:	20025e70 	.word	0x20025e70
   38f00:	20025eac 	.word	0x20025eac
   38f04:	2002c384 	.word	0x2002c384

00038f08 <nrf_mem_register>:
   38f08:	4ff0e92d 	.word	0x4ff0e92d
   38f0c:	b0874b87 	.word	0xb0874b87
   38f10:	2b00781b 	.word	0x2b00781b
   38f14:	808cf000 	.word	0x808cf000
   38f18:	b321b328 	.word	0xb321b328
   38f1c:	f8df780b 	.word	0xf8df780b
   38f20:	eb038218 	.word	0xeb038218
   38f24:	eb081303 	.word	0xeb081303
   38f28:	685b03c3 	.word	0x685b03c3
   38f2c:	c00cf8b1 	.word	0xc00cf8b1
   38f30:	2b104463 	.word	0x2b104463
   38f34:	f04fd811 	.word	0xf04fd811
   38f38:	46890a00 	.word	0x46890a00
   38f3c:	4f7d4b7c 	.word	0x4f7d4b7c
   38f40:	ea4f681b 	.word	0xea4f681b
   38f44:	93000e8c 	.word	0x93000e8c
   38f48:	b19168b9 	.word	0xb19168b9
   38f4c:	0a01f10a 	.word	0x0a01f10a
   38f50:	0f05f1ba 	.word	0x0f05f1ba
   38f54:	070cf107 	.word	0x070cf107
   38f58:	f248d1f6 	.word	0xf248d1f6
   38f5c:	46581b07 	.word	0x46581b07
   38f60:	e8bdb007 	.word	0xe8bdb007
   38f64:	f2488ff0 	.word	0xf2488ff0
   38f68:	46581b0e 	.word	0x46581b0e
   38f6c:	e8bdb007 	.word	0xe8bdb007
   38f70:	f1bc8ff0 	.word	0xf1bc8ff0
   38f74:	d0610f00 	.word	0xd0610f00
   38f78:	460c460d 	.word	0x460c460d
   38f7c:	3010f8d9 	.word	0x3010f8d9
   38f80:	0b03eb0e 	.word	0x0b03eb0e
   38f84:	f833885a 	.word	0xf833885a
   38f88:	44156b04 	.word	0x44156b04
   38f8c:	fb02459b 	.word	0xfb02459b
   38f90:	d1f74406 	.word	0xd1f74406
   38f94:	3008f8d9 	.word	0x3008f8d9
   38f98:	d3d742a3 	.word	0xd3d742a3
   38f9c:	442b9b00 	.word	0x442b9b00
   38fa0:	7f00f5b3 	.word	0x7f00f5b3
   38fa4:	4c63d2d2 	.word	0x4c63d2d2
   38fa8:	024aeb0a 	.word	0x024aeb0a
   38fac:	f8c00092 	.word	0xf8c00092
   38fb0:	18a0a000 	.word	0x18a0a000
   38fb4:	9002f844 	.word	0x9002f844
   38fb8:	468b9a00 	.word	0x468b9a00
   38fbc:	2501e9c0 	.word	0x2501e9c0
   38fc0:	2001f899 	.word	0x2001f899
   38fc4:	2a01485a 	.word	0x2a01485a
   38fc8:	d0c86003 	.word	0xd0c86003
   38fcc:	300cf8b9 	.word	0x300cf8b9
   38fd0:	d0c42b00 	.word	0xd0c42b00
   38fd4:	f8cd2500 	.word	0xf8cd2500
   38fd8:	f8cd9004 	.word	0xf8cd9004
   38fdc:	f8cda00c 	.word	0xf8cda00c
   38fe0:	9b01b014 	.word	0x9b01b014
   38fe4:	691a781f 	.word	0x691a781f
   38fe8:	eb03013b 	.word	0xeb03013b
   38fec:	93000907 	.word	0x93000907
   38ff0:	03c9eb08 	.word	0x03c9eb08
   38ff4:	f8326859 	.word	0xf8326859
   38ff8:	91024025 	.word	0x91024025
   38ffc:	9a03bb39 	.word	0x9a03bb39
   39000:	609a60dd 	.word	0x609a60dd
   39004:	443b9b00 	.word	0x443b9b00
   39008:	eb08461f 	.word	0xeb08461f
   3900c:	684b01c3 	.word	0x684b01c3
   39010:	2037f858 	.word	0x2037f858
   39014:	42943301 	.word	0x42943301
   39018:	d912604b 	.word	0xd912604b
   3901c:	f8489b01 	.word	0xf8489b01
   39020:	899b4037 	.word	0x899b4037
   39024:	429d3501 	.word	0x429d3501
   39028:	f8ddd3db 	.word	0xf8ddd3db
   3902c:	e796b014 	.word	0xe796b014
   39030:	1b08f248 	.word	0x1b08f248
   39034:	b0074658 	.word	0xb0074658
   39038:	8ff0e8bd 	.word	0x8ff0e8bd
   3903c:	46659b00 	.word	0x46659b00
   39040:	9b01e7ae 	.word	0x9b01e7ae
   39044:	899b3501 	.word	0x899b3501
   39048:	d8ca42ab 	.word	0xd8ca42ab
   3904c:	2600e7ed 	.word	0x2600e7ed
   39050:	3afff101 	.word	0x3afff101
   39054:	eb069504 	.word	0xeb069504
   39058:	eb09000a 	.word	0xeb09000a
   3905c:	32010206 	.word	0x32010206
   39060:	f8583001 	.word	0xf8583001
   39064:	0840c032 	.word	0x0840c032
   39068:	eb094d32 	.word	0xeb094d32
   3906c:	eb090100 	.word	0xeb090100
   39070:	3101030a 	.word	0x3101030a
   39074:	eb0c3301 	.word	0xeb0c3301
   39078:	f8580c4c 	.word	0xf8580c4c
   3907c:	f855e031 	.word	0xf855e031
   39080:	f858b02c 	.word	0xf858b02c
   39084:	eb08c033 	.word	0xeb08c033
   39088:	eb0e02c2 	.word	0xeb0e02c2
   3908c:	eb0c0e4e 	.word	0xeb0c0e4e
   39090:	f8db0c4c 	.word	0xf8db0c4c
   39094:	6852b010 	.word	0x6852b010
   39098:	e02ef855 	.word	0xe02ef855
   3909c:	c02cf855 	.word	0xc02cf855
   390a0:	01c1eb08 	.word	0x01c1eb08
   390a4:	03c3eb08 	.word	0x03c3eb08
   390a8:	2022f83b 	.word	0x2022f83b
   390ac:	e010f8de 	.word	0xe010f8de
   390b0:	f8dc6849 	.word	0xf8dc6849
   390b4:	685bc010 	.word	0x685bc010
   390b8:	f83e4294 	.word	0xf83e4294
   390bc:	f83c1021 	.word	0xf83c1021
   390c0:	d92d3023 	.word	0xd92d3023
   390c4:	d22d429c 	.word	0xd22d429c
   390c8:	d924428c 	.word	0xd924428c
   390cc:	45b21c46 	.word	0x45b21c46
   390d0:	2610d2c1 	.word	0x2610d2c1
   390d4:	9a029d04 	.word	0x9a029d04
   390d8:	d91142b2 	.word	0xd91142b2
   390dc:	443b9b00 	.word	0x443b9b00
   390e0:	4433441a 	.word	0x4433441a
   390e4:	0ac2eb08 	.word	0x0ac2eb08
   390e8:	09c3eb08 	.word	0x09c3eb08
   390ec:	46512208 	.word	0x46512208
   390f0:	0002eb0a 	.word	0x0002eb0a
   390f4:	0a08f1aa 	.word	0x0a08f1aa
   390f8:	fedaf7e0 	.word	0xfedaf7e0
   390fc:	d1f545d1 	.word	0xd1f545d1
   39100:	99039b00 	.word	0x99039b00
   39104:	4433443b 	.word	0x4433443b
   39108:	eb083301 	.word	0xeb083301
   3910c:	f84802c3 	.word	0xf84802c3
   39110:	60551033 	.word	0x60551033
   39114:	f100e776 	.word	0xf100e776
   39118:	45563aff 	.word	0x45563aff
   3911c:	e7d8d99b 	.word	0xe7d8d99b
   39120:	e7d89d04 	.word	0xe7d89d04
   39124:	f10a9d04 	.word	0xf10a9d04
   39128:	e7d40601 	.word	0xe7d40601
   3912c:	2002c384 	.word	0x2002c384
   39130:	20025e6c 	.word	0x20025e6c
   39134:	20025e70 	.word	0x20025e70
   39138:	20025eac 	.word	0x20025eac

0003913c <nrf_malloc>:
   3913c:	781b4b03 	.word	0x781b4b03
   39140:	f7ffb10b 	.word	0xf7ffb10b
   39144:	4618bd8d 	.word	0x4618bd8d
   39148:	bf004770 	.word	0xbf004770
   3914c:	2002c384 	.word	0x2002c384

00039150 <nrf_calloc>:
   39150:	4b08b538 	.word	0x4b08b538
   39154:	b155781d 	.word	0xb155781d
   39158:	f400fb01 	.word	0xf400fb01
   3915c:	f7ff4620 	.word	0xf7ff4620
   39160:	4605fd7f 	.word	0x4605fd7f
   39164:	4622b118 	.word	0x4622b118
   39168:	f0062100 	.word	0xf0062100
   3916c:	4628fdef 	.word	0x4628fdef
   39170:	bf00bd38 	.word	0xbf00bd38
   39174:	2002c384 	.word	0x2002c384

00039178 <nrf_free>:
   39178:	781b4b04 	.word	0x781b4b04
   3917c:	b118b123 	.word	0xb118b123
   39180:	20004601 	.word	0x20004601
   39184:	bc1cf7ff 	.word	0xbc1cf7ff
   39188:	bf004770 	.word	0xbf004770
   3918c:	2002c384 	.word	0x2002c384

00039190 <nrf_shared_malloc>:
   39190:	781b4b03 	.word	0x781b4b03
   39194:	f7ffb10b 	.word	0xf7ffb10b
   39198:	4618bc7f 	.word	0x4618bc7f
   3919c:	bf004770 	.word	0xbf004770
   391a0:	2002c384 	.word	0x2002c384

000391a4 <nrf_shared_free>:
   391a4:	781b4b04 	.word	0x781b4b04
   391a8:	b118b123 	.word	0xb118b123
   391ac:	20014601 	.word	0x20014601
   391b0:	bc06f7ff 	.word	0xbc06f7ff
   391b4:	bf004770 	.word	0xbf004770
   391b8:	2002c384 	.word	0x2002c384

000391bc <symbol_0003897>:
   391bc:	728cf44f 	.word	0x728cf44f
   391c0:	f0062100 	.word	0xf0062100
   391c4:	bf00bdc3 	.word	0xbf00bdc3

000391c8 <symbol_0006f61>:
   391c8:	f44fb118 	.word	0xf44fb118
   391cc:	f7fc718c 	.word	0xf7fc718c
   391d0:	4770b837 	.word	0x4770b837

000391d4 <symbol_000468b>:
   391d4:	f0002ac0 	.word	0xf0002ac0
   391d8:	f5b28184 	.word	0xf5b28184
   391dc:	f0007f80 	.word	0xf0007f80
   391e0:	2a80817d 	.word	0x2a80817d
   391e4:	f06fd002 	.word	0xf06fd002
   391e8:	4770001f 	.word	0x4770001f
   391ec:	6003230a 	.word	0x6003230a
   391f0:	4ff0e92d 	.word	0x4ff0e92d
   391f4:	f04f4607 	.word	0xf04f4607
   391f8:	f1000c00 	.word	0xf1000c00
   391fc:	b0850408 	.word	0xb0850408
   39200:	f8470952 	.word	0xf8470952
   39204:	788b4f04 	.word	0x788b4f04
   39208:	780e784d 	.word	0x780e784d
   3920c:	ea43041b 	.word	0xea43041b
   39210:	78cd2305 	.word	0x78cd2305
   39214:	f10c4333 	.word	0xf10c4333
   39218:	ea430c01 	.word	0xea430c01
   3921c:	45946305 	.word	0x45946305
   39220:	3f04f847 	.word	0x3f04f847
   39224:	0104f101 	.word	0x0104f101
   39228:	6803d3ed 	.word	0x6803d3ed
   3922c:	f0002b0c 	.word	0xf0002b0c
   39230:	2b0e81bf 	.word	0x2b0e81bf
   39234:	8158f000 	.word	0x8158f000
   39238:	f0402b0a 	.word	0xf0402b0a
   3923c:	6944814b 	.word	0x6944814b
   39240:	f3c44bd8 	.word	0xf3c44bd8
   39244:	68812207 	.word	0x68812207
   39248:	0e255c9a 	.word	0x0e255c9a
   3924c:	f0815d5e 	.word	0xf0815d5e
   39250:	b2e50101 	.word	0xb2e50101
   39254:	404a5d5d 	.word	0x404a5d5d
   39258:	4107f3c4 	.word	0x4107f3c4
   3925c:	4206ea82 	.word	0x4206ea82
   39260:	ea825c5e 	.word	0xea825c5e
   39264:	68c16505 	.word	0x68c16505
   39268:	2206ea85 	.word	0x2206ea85
   3926c:	40516907 	.word	0x40516907
   39270:	0907ea81 	.word	0x0907ea81
   39274:	0404ea89 	.word	0x0404ea89
   39278:	2507f3c4 	.word	0x2507f3c4
   3927c:	0e265d5d 	.word	0x0e265d5d
   39280:	f0825d9e 	.word	0xf0825d9e
   39284:	ea850c02 	.word	0xea850c02
   39288:	ea85050c 	.word	0xea85050c
   3928c:	b2e64506 	.word	0xb2e64506
   39290:	c006f813 	.word	0xc006f813
   39294:	4607f3c4 	.word	0x4607f3c4
   39298:	ea855d9e 	.word	0xea855d9e
   3929c:	ea85650c 	.word	0xea85650c
   392a0:	406f2506 	.word	0x406f2506
   392a4:	0c04ea87 	.word	0x0c04ea87
   392a8:	2607f3cc 	.word	0x2607f3cc
   392ac:	ea4f5d9e 	.word	0xea4f5d9e
   392b0:	f8136e1c 	.word	0xf8136e1c
   392b4:	f085e00e 	.word	0xf085e00e
   392b8:	ea860804 	.word	0xea860804
   392bc:	ea860608 	.word	0xea860608
   392c0:	fa5f460e 	.word	0xfa5f460e
   392c4:	f813fe8c 	.word	0xf813fe8c
   392c8:	6182e00e 	.word	0x6182e00e
   392cc:	4207f3cc 	.word	0x4207f3cc
   392d0:	660eea86 	.word	0x660eea86
   392d4:	e002f813 	.word	0xe002f813
   392d8:	0201ea85 	.word	0x0201ea85
   392dc:	260eea86 	.word	0x260eea86
   392e0:	0802ea86 	.word	0x0802ea86
   392e4:	0e04ea88 	.word	0x0e04ea88
   392e8:	f3ce61c1 	.word	0xf3ce61c1
   392ec:	5c592107 	.word	0x5c592107
   392f0:	6a1eea4f 	.word	0x6a1eea4f
   392f4:	a00af813 	.word	0xa00af813
   392f8:	0b08f086 	.word	0x0b08f086
   392fc:	010bea81 	.word	0x010bea81
   39300:	410aea81 	.word	0x410aea81
   39304:	fa8efa5f 	.word	0xfa8efa5f
   39308:	a00af813 	.word	0xa00af813
   3930c:	f3ce6244 	.word	0xf3ce6244
   39310:	5d1c4407 	.word	0x5d1c4407
   39314:	610aea81 	.word	0x610aea81
   39318:	2104ea81 	.word	0x2104ea81
   3931c:	0a07ea81 	.word	0x0a07ea81
   39320:	040eea8a 	.word	0x040eea8a
   39324:	630762c2 	.word	0x630762c2
   39328:	2207f3c4 	.word	0x2207f3c4
   3932c:	0707ea88 	.word	0x0707ea88
   39330:	680ee9c0 	.word	0x680ee9c0
   39334:	9020f8c0 	.word	0x9020f8c0
   39338:	f8c06285 	.word	0xf8c06285
   3933c:	f8c0c034 	.word	0xf8c0c034
   39340:	6407e044 	.word	0x6407e044
   39344:	f8136481 	.word	0xf8136481
   39348:	0e22c002 	.word	0x0e22c002
   3934c:	f0815c9a 	.word	0xf0815c9a
   39350:	ea8c0510 	.word	0xea8c0510
   39354:	ea8c0c05 	.word	0xea8c0c05
   39358:	b2e24c02 	.word	0xb2e24c02
   3935c:	f3c45c9d 	.word	0xf3c45c9d
   39360:	5c9a4207 	.word	0x5c9a4207
   39364:	6c05ea8c 	.word	0x6c05ea8c
   39368:	2c02ea8c 	.word	0x2c02ea8c
   3936c:	0108ea81 	.word	0x0108ea81
   39370:	090cea81 	.word	0x090cea81
   39374:	0209ea8e 	.word	0x0209ea8e
   39378:	2507f3c2 	.word	0x2507f3c2
   3937c:	0e155d5e 	.word	0x0e155d5e
   39380:	f08c5d5d 	.word	0xf08c5d5d
   39384:	407e0720 	.word	0x407e0720
   39388:	4605ea86 	.word	0x4605ea86
   3938c:	5d5db2d5 	.word	0x5d5db2d5
   39390:	f3c264c1 	.word	0xf3c264c1
   39394:	5c594107 	.word	0x5c594107
   39398:	6605ea86 	.word	0x6605ea86
   3939c:	2601ea86 	.word	0x2601ea86
   393a0:	0e06ea8a 	.word	0x0e06ea8a
   393a4:	080eea82 	.word	0x080eea82
   393a8:	2107f3c8 	.word	0x2107f3c8
   393ac:	ea4f5c5f 	.word	0xea4f5c5f
   393b0:	5c596118 	.word	0x5c596118
   393b4:	0540f086 	.word	0x0540f086
   393b8:	ea87406f 	.word	0xea87406f
   393bc:	fa5f4701 	.word	0xfa5f4701
   393c0:	5c59f188 	.word	0x5c59f188
   393c4:	0509ea8a 	.word	0x0509ea8a
   393c8:	6701ea87 	.word	0x6701ea87
   393cc:	4107f3c8 	.word	0x4107f3c8
   393d0:	f8c05c59 	.word	0xf8c05c59
   393d4:	ea87a050 	.word	0xea87a050
   393d8:	ea892701 	.word	0xea892701
   393dc:	66050a06 	.word	0x66050a06
   393e0:	0507ea8a 	.word	0x0507ea8a
   393e4:	0105ea82 	.word	0x0105ea82
   393e8:	f3c16544 	.word	0xf3c16544
   393ec:	5d1c2407 	.word	0x5d1c2407
   393f0:	6b11ea4f 	.word	0x6b11ea4f
   393f4:	b00bf813 	.word	0xb00bf813
   393f8:	f0876642 	.word	0xf0876642
   393fc:	40620280 	.word	0x40620280
   39400:	ea82b2cc 	.word	0xea82b2cc
   39404:	f813420b 	.word	0xf813420b
   39408:	f3c1b004 	.word	0xf3c1b004
   3940c:	5d1c4407 	.word	0x5d1c4407
   39410:	620bea82 	.word	0x620bea82
   39414:	2204ea82 	.word	0x2204ea82
   39418:	0402ea8e 	.word	0x0402ea8e
   3941c:	c058f8c0 	.word	0xc058f8c0
   39420:	0c04ea81 	.word	0x0c04ea81
   39424:	67c56686 	.word	0x67c56686
   39428:	0605ea8e 	.word	0x0605ea8e
   3942c:	40556787 	.word	0x40556787
   39430:	2707f3cc 	.word	0x2707f3cc
   39434:	ae1be9c0 	.word	0xae1be9c0
   39438:	1084f8c0 	.word	0x1084f8c0
   3943c:	2088f8c0 	.word	0x2088f8c0
   39440:	6080f8c0 	.word	0x6080f8c0
   39444:	905cf8c0 	.word	0x905cf8c0
   39448:	8074f8c0 	.word	0x8074f8c0
   3944c:	508cf8c0 	.word	0x508cf8c0
   39450:	f0825dde 	.word	0xf0825dde
   39454:	ea4f021b 	.word	0xea4f021b
   39458:	f813671c 	.word	0xf813671c
   3945c:	4056e007 	.word	0x4056e007
   39460:	f28cfa5f 	.word	0xf28cfa5f
   39464:	f3cc5c9f 	.word	0xf3cc5c9f
   39468:	5c9a4207 	.word	0x5c9a4207
   3946c:	460eea86 	.word	0x460eea86
   39470:	6607ea86 	.word	0x6607ea86
   39474:	2602ea86 	.word	0x2602ea86
   39478:	40694075 	.word	0x40694075
   3947c:	2207f3c1 	.word	0x2207f3c1
   39480:	0e0f5c9a 	.word	0x0e0f5c9a
   39484:	f0865ddf 	.word	0xf0865ddf
   39488:	ea820e36 	.word	0xea820e36
   3948c:	ea82020e 	.word	0xea82020e
   39490:	b2cf4207 	.word	0xb2cf4207
   39494:	e007f813 	.word	0xe007f813
   39498:	4707f3c1 	.word	0x4707f3c1
   3949c:	ea825ddf 	.word	0xea825ddf
   394a0:	ea83630e 	.word	0xea83630e
   394a4:	ea832307 	.word	0xea832307
   394a8:	ea820204 	.word	0xea820204
   394ac:	e9c00e01 	.word	0xe9c00e01
   394b0:	e9c06526 	.word	0xe9c06526
   394b4:	f8c02e2c 	.word	0xf8c02e2c
   394b8:	ea834090 	.word	0xea834090
   394bc:	406c0705 	.word	0x406c0705
   394c0:	c094f8c0 	.word	0xc094f8c0
   394c4:	10a4f8c0 	.word	0x10a4f8c0
   394c8:	30a8f8c0 	.word	0x30a8f8c0
   394cc:	70acf8c0 	.word	0x70acf8c0
   394d0:	40a0f8c0 	.word	0x40a0f8c0
   394d4:	b0052000 	.word	0xb0052000
   394d8:	8ff0e8bd 	.word	0x8ff0e8bd
   394dc:	6003230e 	.word	0x6003230e
   394e0:	230ce686 	.word	0x230ce686
   394e4:	e6836003 	.word	0xe6836003
   394e8:	ce03e9d0 	.word	0xce03e9d0
   394ec:	8907e9d0 	.word	0x8907e9d0
   394f0:	7205e9d0 	.word	0x7205e9d0
   394f4:	68836a46 	.word	0x68836a46
   394f8:	f8df4670 	.word	0xf8df4670
   394fc:	4d29a0b0 	.word	0x4d29a0b0
   39500:	c000f8cd 	.word	0xc000f8cd
   39504:	bf04f85a 	.word	0xbf04f85a
   39508:	2c07f3c6 	.word	0x2c07f3c6
   3950c:	e00cf815 	.word	0xe00cf815
   39510:	6c16ea4f 	.word	0x6c16ea4f
   39514:	030bea83 	.word	0x030bea83
   39518:	b00cf815 	.word	0xb00cf815
   3951c:	fc86fa5f 	.word	0xfc86fa5f
   39520:	0303ea8e 	.word	0x0303ea8e
   39524:	c00cf815 	.word	0xc00cf815
   39528:	4e07f3c6 	.word	0x4e07f3c6
   3952c:	430bea83 	.word	0x430bea83
   39530:	e00ef815 	.word	0xe00ef815
   39534:	630cea83 	.word	0x630cea83
   39538:	ea839900 	.word	0xea839900
   3953c:	4059230e 	.word	0x4059230e
   39540:	40474048 	.word	0x40474048
   39544:	fc87fa5f 	.word	0xfc87fa5f
   39548:	e00cf815 	.word	0xe00cf815
   3954c:	6c17ea4f 	.word	0x6c17ea4f
   39550:	b00cf815 	.word	0xb00cf815
   39554:	2c07f3c7 	.word	0x2c07f3c7
   39558:	0202ea8e 	.word	0x0202ea8e
   3955c:	c00cf815 	.word	0xc00cf815
   39560:	4e07f3c7 	.word	0x4e07f3c7
   39564:	620bea82 	.word	0x620bea82
   39568:	e00ef815 	.word	0xe00ef815
   3956c:	220cea82 	.word	0x220cea82
   39570:	420eea82 	.word	0x420eea82
   39574:	0802ea88 	.word	0x0802ea88
   39578:	3108e9c4 	.word	0x3108e9c4
   3957c:	490a9100 	.word	0x490a9100
   39580:	0908ea89 	.word	0x0908ea89
   39584:	0609ea86 	.word	0x0609ea86
   39588:	e9c4458a 	.word	0xe9c4458a
   3958c:	e9c4070a 	.word	0xe9c4070a
   39590:	e9c4960e 	.word	0xe9c4960e
   39594:	f104280c 	.word	0xf104280c
   39598:	d1b30420 	.word	0xd1b30420
   3959c:	b0052000 	.word	0xb0052000
   395a0:	8ff0e8bd 	.word	0x8ff0e8bd
   395a4:	0004a170 	.word	0x0004a170
   395a8:	0004a688 	.word	0x0004a688
   395ac:	0004a66c 	.word	0x0004a66c
   395b0:	4bb269c2 	.word	0x4bb269c2
   395b4:	2407f3c2 	.word	0x2407f3c2
   395b8:	5d1d6881 	.word	0x5d1d6881
   395bc:	5d1e0e14 	.word	0x5d1e0e14
   395c0:	0101f081 	.word	0x0101f081
   395c4:	5d1cb2d4 	.word	0x5d1cb2d4
   395c8:	f3c2404d 	.word	0xf3c2404d
   395cc:	5c594107 	.word	0x5c594107
   395d0:	4506ea85 	.word	0x4506ea85
   395d4:	ea8568c7 	.word	0xea8568c7
   395d8:	ea856504 	.word	0xea856504
   395dc:	69012501 	.word	0x69012501
   395e0:	6946406f 	.word	0x6946406f
   395e4:	0907ea81 	.word	0x0907ea81
   395e8:	ea866984 	.word	0xea866984
   395ec:	ea840609 	.word	0xea840609
   395f0:	ea820806 	.word	0xea820806
   395f4:	f3c20208 	.word	0xf3c20208
   395f8:	f8132407 	.word	0xf8132407
   395fc:	ea4fe004 	.word	0xea4fe004
   39600:	f8136c12 	.word	0xf8136c12
   39604:	f085a00c 	.word	0xf085a00c
   39608:	fa5f0402 	.word	0xfa5f0402
   3960c:	ea8efc82 	.word	0xea8efc82
   39610:	f8130404 	.word	0xf8130404
   39614:	f3c2e00c 	.word	0xf3c2e00c
   39618:	f8134c07 	.word	0xf8134c07
   3961c:	ea84c00c 	.word	0xea84c00c
   39620:	ea84440a 	.word	0xea84440a
   39624:	ea84640e 	.word	0xea84640e
   39628:	4061240c 	.word	0x4061240c
   3962c:	460c9401 	.word	0x460c9401
   39630:	62056981 	.word	0x62056981
   39634:	ea824061 	.word	0xea824061
   39638:	91030c01 	.word	0x91030c01
   3963c:	2e07f3cc 	.word	0x2e07f3cc
   39640:	f8139901 	.word	0xf8139901
   39644:	ea4fe00e 	.word	0xea4fe00e
   39648:	f8136a1c 	.word	0xf8136a1c
   3964c:	f081a00a 	.word	0xf081a00a
   39650:	ea8e0b04 	.word	0xea8e0b04
   39654:	ea8e0e0b 	.word	0xea8e0e0b
   39658:	fa5f4a0a 	.word	0xfa5f4a0a
   3965c:	f813fe8c 	.word	0xf813fe8c
   39660:	e9c0e00e 	.word	0xe9c0e00e
   39664:	ea8a960a 	.word	0xea8a960a
   39668:	f3cc650e 	.word	0xf3cc650e
   3966c:	f8134e07 	.word	0xf8134e07
   39670:	ea87e00e 	.word	0xea87e00e
   39674:	ea850a01 	.word	0xea850a01
   39678:	ea8a250e 	.word	0xea8a250e
   3967c:	ea860e05 	.word	0xea860e05
   39680:	9100010e 	.word	0x9100010e
   39684:	ea864621 	.word	0xea864621
   39688:	9c000904 	.word	0x9c000904
   3968c:	820ce9c0 	.word	0x820ce9c0
   39690:	0604ea82 	.word	0x0604ea82
   39694:	f8c06247 	.word	0xf8c06247
   39698:	9102a03c 	.word	0x9102a03c
   3969c:	9f036401 	.word	0x9f036401
   396a0:	2407f3c6 	.word	0x2407f3c6
   396a4:	080eea81 	.word	0x080eea81
   396a8:	7c12e9c0 	.word	0x7c12e9c0
   396ac:	ea4f5d1c 	.word	0xea4f5d1c
   396b0:	e9c06c16 	.word	0xe9c06c16
   396b4:	f8c05e14 	.word	0xf8c05e14
   396b8:	f0858058 	.word	0xf0858058
   396bc:	f8130508 	.word	0xf8130508
   396c0:	fa5f800c 	.word	0xfa5f800c
   396c4:	9901fc86 	.word	0x9901fc86
   396c8:	c00cf813 	.word	0xc00cf813
   396cc:	f3c64065 	.word	0xf3c64065
   396d0:	5d1c4407 	.word	0x5d1c4407
   396d4:	4508ea85 	.word	0x4508ea85
   396d8:	ea856381 	.word	0xea856381
   396dc:	9902650c 	.word	0x9902650c
   396e0:	2504ea85 	.word	0x2504ea85
   396e4:	91014069 	.word	0x91014069
   396e8:	69844639 	.word	0x69844639
   396ec:	9044f8c0 	.word	0x9044f8c0
   396f0:	0805ea84 	.word	0x0805ea84
   396f4:	0908ea86 	.word	0x0908ea86
   396f8:	2407f3c9 	.word	0x2407f3c9
   396fc:	a004f813 	.word	0xa004f813
   39700:	6419ea4f 	.word	0x6419ea4f
   39704:	f0855d1c 	.word	0xf0855d1c
   39708:	ea8a0c10 	.word	0xea8a0c10
   3970c:	fa5f0c0c 	.word	0xfa5f0c0c
   39710:	f813fa89 	.word	0xf813fa89
   39714:	ea8ca00a 	.word	0xea8ca00a
   39718:	f3c94c04 	.word	0xf3c94c04
   3971c:	5d1c4407 	.word	0x5d1c4407
   39720:	6c0aea8c 	.word	0x6c0aea8c
   39724:	0e05ea8e 	.word	0x0e05ea8e
   39728:	2c04ea8c 	.word	0x2c04ea8c
   3972c:	040cea8e 	.word	0x040cea8e
   39730:	f8c04062 	.word	0xf8c04062
   39734:	f3c2e06c 	.word	0xf3c2e06c
   39738:	f8132e07 	.word	0xf8132e07
   3973c:	ea4fe00e 	.word	0xea4fe00e
   39740:	f8136a12 	.word	0xf8136a12
   39744:	f08ca00a 	.word	0xf08ca00a
   39748:	ea8e0b20 	.word	0xea8e0b20
   3974c:	ea8e0e0b 	.word	0xea8e0e0b
   39750:	fa5f4a0a 	.word	0xfa5f4a0a
   39754:	f813fe82 	.word	0xf813fe82
   39758:	9f00e00e 	.word	0x9f00e00e
   3975c:	6a0eea8a 	.word	0x6a0eea8a
   39760:	4e07f3c2 	.word	0x4e07f3c2
   39764:	b00ef813 	.word	0xb00ef813
   39768:	0e07ea81 	.word	0x0e07ea81
   3976c:	ea8a9901 	.word	0xea8a9901
   39770:	ea812b0b 	.word	0xea812b0b
   39774:	9f000a0b 	.word	0x9f000a0b
   39778:	e060f8c0 	.word	0xe060f8c0
   3977c:	0e0aea88 	.word	0x0e0aea88
   39780:	664665c7 	.word	0x664665c7
   39784:	907cf8c0 	.word	0x907cf8c0
   39788:	060eea82 	.word	0x060eea82
   3978c:	ea876701 	.word	0xea876701
   39790:	404f0904 	.word	0x404f0904
   39794:	66854061 	.word	0x66854061
   39798:	1088f8c0 	.word	0x1088f8c0
   3979c:	2507f3c6 	.word	0x2507f3c6
   397a0:	0109ea88 	.word	0x0109ea88
   397a4:	1090f8c0 	.word	0x1090f8c0
   397a8:	0e315d5d 	.word	0x0e315d5d
   397ac:	f8c05c59 	.word	0xf8c05c59
   397b0:	f8c04084 	.word	0xf8c04084
   397b4:	ea84b098 	.word	0xea84b098
   397b8:	6747040b 	.word	0x6747040b
   397bc:	0b40f08b 	.word	0x0b40f08b
   397c0:	5ddfb2f7 	.word	0x5ddfb2f7
   397c4:	60acf8c0 	.word	0x60acf8c0
   397c8:	050bea85 	.word	0x050bea85
   397cc:	4607f3c6 	.word	0x4607f3c6
   397d0:	4501ea85 	.word	0x4501ea85
   397d4:	ea855d99 	.word	0xea855d99
   397d8:	ea856507 	.word	0xea856507
   397dc:	f8c02501 	.word	0xf8c02501
   397e0:	406c409c 	.word	0x406c409c
   397e4:	0604ea89 	.word	0x0604ea89
   397e8:	2094f8c0 	.word	0x2094f8c0
   397ec:	f3c24072 	.word	0xf3c24072
   397f0:	f8c02107 	.word	0xf8c02107
   397f4:	5c59c080 	.word	0x5c59c080
   397f8:	0c0aea89 	.word	0x0c0aea89
   397fc:	f8c00e17 	.word	0xf8c00e17
   39800:	f8c0908c 	.word	0xf8c0908c
   39804:	f813c0a4 	.word	0xf813c0a4
   39808:	f0859007 	.word	0xf0859007
   3980c:	b2d70c80 	.word	0xb2d70c80
   39810:	010cea81 	.word	0x010cea81
   39814:	c007f813 	.word	0xc007f813
   39818:	4707f3c2 	.word	0x4707f3c2
   3981c:	ea815ddf 	.word	0xea815ddf
   39820:	ea814109 	.word	0xea814109
   39824:	ea83630c 	.word	0xea83630c
   39828:	f8c02307 	.word	0xf8c02307
   3982c:	ea838078 	.word	0xea838078
   39830:	ea830c0a 	.word	0xea830c0a
   39834:	f8c00808 	.word	0xf8c00808
   39838:	ea8ee0a8 	.word	0xea8ee0a8
   3983c:	ea880706 	.word	0xea880706
   39840:	ea8c0b02 	.word	0xea8c0b02
   39844:	ea830906 	.word	0xea830906
   39848:	ea8a0e04 	.word	0xea8a0e04
   3984c:	f8c00104 	.word	0xf8c00104
   39850:	e9c0a0a0 	.word	0xe9c0a0a0
   39854:	f8c07230 	.word	0xf8c07230
   39858:	e9c060bc 	.word	0xe9c060bc
   3985c:	e9c0542c 	.word	0xe9c0542c
   39860:	f8c08b36 	.word	0xf8c08b36
   39864:	e9c030c8 	.word	0xe9c030c8
   39868:	f8c0c934 	.word	0xf8c0c934
   3986c:	f8c0e0cc 	.word	0xf8c0e0cc
   39870:	200010b8 	.word	0x200010b8
   39874:	e8bdb005 	.word	0xe8bdb005
   39878:	bf008ff0 	.word	0xbf008ff0
   3987c:	0004a170 	.word	0x0004a170

00039880 <symbol_000e9b3>:
   39880:	4ff0e92d 	.word	0x4ff0e92d
   39884:	0400e9d0 	.word	0x0400e9d0
   39888:	46061040 	.word	0x46061040
   3988c:	f8d16823 	.word	0xf8d16823
   39890:	b089a000 	.word	0xb089a000
   39894:	0a03ea8a 	.word	0x0a03ea8a
   39898:	800cf8d1 	.word	0x800cf8d1
   3989c:	3e0168e3 	.word	0x3e0168e3
   398a0:	68659006 	.word	0x68659006
   398a4:	68a0684f 	.word	0x68a0684f
   398a8:	688a9205 	.word	0x688a9205
   398ac:	0803ea88 	.word	0x0803ea88
   398b0:	f1042e00 	.word	0xf1042e00
   398b4:	96010310 	.word	0x96010310
   398b8:	0507ea85 	.word	0x0507ea85
   398bc:	0200ea82 	.word	0x0200ea82
   398c0:	f8df9304 	.word	0xf8df9304
   398c4:	f340b3e8 	.word	0xf340b3e8
   398c8:	462b80db 	.word	0x462b80db
   398cc:	0930f104 	.word	0x0930f104
   398d0:	f18afa5f 	.word	0xf18afa5f
   398d4:	f788fa5f 	.word	0xf788fa5f
   398d8:	b2d4b2de 	.word	0xb2d4b2de
   398dc:	0021f85b 	.word	0x0021f85b
   398e0:	5027f85b 	.word	0x5027f85b
   398e4:	7026f85b 	.word	0x7026f85b
   398e8:	6024f85b 	.word	0x6024f85b
   398ec:	4c20f859 	.word	0x4c20f859
   398f0:	6118ea4f 	.word	0x6118ea4f
   398f4:	0c04ea80 	.word	0x0c04ea80
   398f8:	0c14f859 	.word	0x0c14f859
   398fc:	1021f85b 	.word	0x1021f85b
   39900:	0e00ea85 	.word	0x0e00ea85
   39904:	f85b0e10 	.word	0xf85b0e10
   39908:	f3c35020 	.word	0xf3c35020
   3990c:	ea8c2407 	.word	0xea8c2407
   39910:	f3c22c31 	.word	0xf3c22c31
   39914:	f3c24107 	.word	0xf3c24107
   39918:	f85b2207 	.word	0xf85b2207
   3991c:	f85b4024 	.word	0xf85b4024
   39920:	ea8e0022 	.word	0xea8e0022
   39924:	0e1d2235 	.word	0x0e1d2235
   39928:	4307f3c3 	.word	0x4307f3c3
   3992c:	3023f85b 	.word	0x3023f85b
   39930:	6c34ea8c 	.word	0x6c34ea8c
   39934:	4c18f859 	.word	0x4c18f859
   39938:	f85b9302 	.word	0xf85b9302
   3993c:	f8595025 	.word	0xf8595025
   39940:	ea4f3c1c 	.word	0xea4f3c1c
   39944:	f85b6e1a 	.word	0xf85b6e1a
   39948:	4066e02e 	.word	0x4066e02e
   3994c:	f3ca405f 	.word	0xf3ca405f
   39950:	ea862407 	.word	0xea862407
   39954:	f3c82635 	.word	0xf3c82635
   39958:	f3c82507 	.word	0xf3c82507
   3995c:	ea874807 	.word	0xea874807
   39960:	f85b273e 	.word	0xf85b273e
   39964:	f85b4024 	.word	0xf85b4024
   39968:	f85be025 	.word	0xf85be025
   3996c:	9b025028 	.word	0x9b025028
   39970:	6030ea87 	.word	0x6030ea87
   39974:	4035ea80 	.word	0x4035ea80
   39978:	1021f85b 	.word	0x1021f85b
   3997c:	6434ea82 	.word	0x6434ea82
   39980:	4433ea84 	.word	0x4433ea84
   39984:	ea8cb2c3 	.word	0xea8cb2c3
   39988:	f85b4131 	.word	0xf85b4131
   3998c:	f3ca3023 	.word	0xf3ca3023
   39990:	f85b4a07 	.word	0xf85b4a07
   39994:	b2ca702a 	.word	0xb2ca702a
   39998:	6c14ea4f 	.word	0x6c14ea4f
   3999c:	2022f85b 	.word	0x2022f85b
   399a0:	663eea86 	.word	0x663eea86
   399a4:	f8599302 	.word	0xf8599302
   399a8:	ea863c10 	.word	0xea863c10
   399ac:	f85b4637 	.word	0xf85b4637
   399b0:	f3c0e02c 	.word	0xf3c0e02c
   399b4:	f85b2707 	.word	0xf85b2707
   399b8:	ea82c027 	.word	0xea82c027
   399bc:	f3c60a03 	.word	0xf3c60a03
   399c0:	f3c64507 	.word	0xf3c64507
   399c4:	f85b2207 	.word	0xf85b2207
   399c8:	f85b3022 	.word	0xf85b3022
   399cc:	ea8a5025 	.word	0xea8a5025
   399d0:	f3c42a3e 	.word	0xf3c42a3e
   399d4:	0e0f4207 	.word	0x0e0f4207
   399d8:	6a3cea8a 	.word	0x6a3cea8a
   399dc:	7027f85b 	.word	0x7027f85b
   399e0:	ea8a9303 	.word	0xea8a9303
   399e4:	f85b4a35 	.word	0xf85b4a35
   399e8:	f8598022 	.word	0xf8598022
   399ec:	9b025c0c 	.word	0x9b025c0c
   399f0:	406bb2f2 	.word	0x406bb2f2
   399f4:	2022f85b 	.word	0x2022f85b
   399f8:	2337ea83 	.word	0x2337ea83
   399fc:	7c08f859 	.word	0x7c08f859
   39a00:	fc84fa5f 	.word	0xfc84fa5f
   39a04:	2407f3c4 	.word	0x2407f3c4
   39a08:	502cf85b 	.word	0x502cf85b
   39a0c:	0e364057 	.word	0x0e364057
   39a10:	2024f85b 	.word	0x2024f85b
   39a14:	4c04f859 	.word	0x4c04f859
   39a18:	6e10ea4f 	.word	0x6e10ea4f
   39a1c:	6026f85b 	.word	0x6026f85b
   39a20:	f85b406c 	.word	0xf85b406c
   39a24:	ea84e02e 	.word	0xea84e02e
   39a28:	f3c12636 	.word	0xf3c12636
   39a2c:	f3c12407 	.word	0xf3c12407
   39a30:	f85b4107 	.word	0xf85b4107
   39a34:	ea871021 	.word	0xea871021
   39a38:	ea8e2e3e 	.word	0xea8e2e3e
   39a3c:	f3c06232 	.word	0xf3c06232
   39a40:	f85b4007 	.word	0xf85b4007
   39a44:	9d034024 	.word	0x9d034024
   39a48:	4231ea82 	.word	0x4231ea82
   39a4c:	f85b9901 	.word	0xf85b9901
   39a50:	ea830020 	.word	0xea830020
   39a54:	ea866335 	.word	0xea866335
   39a58:	39016634 	.word	0x39016634
   39a5c:	4338ea83 	.word	0x4338ea83
   39a60:	0920f109 	.word	0x0920f109
   39a64:	4830ea86 	.word	0x4830ea86
   39a68:	f47f9101 	.word	0xf47f9101
   39a6c:	461daf31 	.word	0x461daf31
   39a70:	99049b06 	.word	0x99049b06
   39a74:	6300f103 	.word	0x6300f103
   39a78:	eb013b01 	.word	0xeb013b01
   39a7c:	93041343 	.word	0x93041343
   39a80:	fa5f2400 	.word	0xfa5f2400
   39a84:	f85bf38a 	.word	0xf85bf38a
   39a88:	9b047023 	.word	0x9b047023
   39a8c:	fa5f46a1 	.word	0xfa5f46a1
   39a90:	6819fc85 	.word	0x6819fc85
   39a94:	6318ea4f 	.word	0x6318ea4f
   39a98:	46a69407 	.word	0x46a69407
   39a9c:	402cf85b 	.word	0x402cf85b
   39aa0:	c023f85b 	.word	0xc023f85b
   39aa4:	f3c54079 	.word	0xf3c54079
   39aa8:	f85b2307 	.word	0xf85b2307
   39aac:	f3c23023 	.word	0xf3c23023
   39ab0:	ea814707 	.word	0xea814707
   39ab4:	fa5f213c 	.word	0xfa5f213c
   39ab8:	f85bfc82 	.word	0xf85bfc82
   39abc:	f85b002c 	.word	0xf85b002c
   39ac0:	ea817027 	.word	0xea817027
   39ac4:	90036133 	.word	0x90036133
   39ac8:	4037ea81 	.word	0x4037ea81
   39acc:	fa5f9f04 	.word	0xfa5f9f04
   39ad0:	f85bf688 	.word	0xf85bf688
   39ad4:	68fb6026 	.word	0x68fb6026
   39ad8:	40739001 	.word	0x40739001
   39adc:	f85b0e16 	.word	0xf85b0e16
   39ae0:	98046026 	.word	0x98046026
   39ae4:	2636ea83 	.word	0x2636ea83
   39ae8:	f85b0e2b 	.word	0xf85b0e2b
   39aec:	f3c53023 	.word	0xf3c53023
   39af0:	496d4507 	.word	0x496d4507
   39af4:	7025f85b 	.word	0x7025f85b
   39af8:	f89d9306 	.word	0xf89d9306
   39afc:	6843c004 	.word	0x6843c004
   39b00:	651aea4f 	.word	0x651aea4f
   39b04:	5025f85b 	.word	0x5025f85b
   39b08:	2207f3c2 	.word	0x2207f3c2
   39b0c:	2022f85b 	.word	0x2022f85b
   39b10:	c00cf811 	.word	0xc00cf811
   39b14:	69044063 	.word	0x69044063
   39b18:	2535ea83 	.word	0x2535ea83
   39b1c:	2307f3ca 	.word	0x2307f3ca
   39b20:	3023f85b 	.word	0x3023f85b
   39b24:	0c04ea8c 	.word	0x0c04ea8c
   39b28:	6532ea85 	.word	0x6532ea85
   39b2c:	68829c03 	.word	0x68829c03
   39b30:	6633ea86 	.word	0x6633ea86
   39b34:	f3c84660 	.word	0xf3c84660
   39b38:	ea842307 	.word	0xea842307
   39b3c:	9c060c02 	.word	0x9c060c02
   39b40:	3023f85b 	.word	0x3023f85b
   39b44:	4a07f3ca 	.word	0x4a07f3ca
   39b48:	202af85b 	.word	0x202af85b
   39b4c:	2c34ea8c 	.word	0x2c34ea8c
   39b50:	4807f3c8 	.word	0x4807f3c8
   39b54:	4637ea86 	.word	0x4637ea86
   39b58:	6c33ea8c 	.word	0x6c33ea8c
   39b5c:	7028f85b 	.word	0x7028f85b
   39b60:	4232ea8c 	.word	0x4232ea8c
   39b64:	4537ea85 	.word	0x4537ea85
   39b68:	4c07f3c2 	.word	0x4c07f3c2
   39b6c:	5ccb0e33 	.word	0x5ccb0e33
   39b70:	a00cf811 	.word	0xa00cf811
   39b74:	fc85fa5f 	.word	0xfc85fa5f
   39b78:	400cf811 	.word	0x400cf811
   39b7c:	2707f3c5 	.word	0x2707f3c5
   39b80:	464c9403 	.word	0x464c9403
   39b84:	ea805dcf 	.word	0xea805dcf
   39b88:	98016303 	.word	0x98016303
   39b8c:	2307ea83 	.word	0x2307ea83
   39b90:	fb82fa5f 	.word	0xfb82fa5f
   39b94:	430aea83 	.word	0x430aea83
   39b98:	b00bf811 	.word	0xb00bf811
   39b9c:	6c10ea4f 	.word	0x6c10ea4f
   39ba0:	f3639804 	.word	0xf3639804
   39ba4:	f8110407 	.word	0xf8110407
   39ba8:	f8cd800c 	.word	0xf8cd800c
   39bac:	9402b018 	.word	0x9402b018
   39bb0:	2c07f3c2 	.word	0x2c07f3c2
   39bb4:	ea4f9c03 	.word	0xea4f9c03
   39bb8:	69426b12 	.word	0x69426b12
   39bbc:	c00cf811 	.word	0xc00cf811
   39bc0:	f3c64062 	.word	0xf3c64062
   39bc4:	5dcf4707 	.word	0x5dcf4707
   39bc8:	6808ea82 	.word	0x6808ea82
   39bcc:	6a15ea4f 	.word	0x6a15ea4f
   39bd0:	ea886982 	.word	0xea886982
   39bd4:	9c062c0c 	.word	0x9c062c0c
   39bd8:	f886fa5f 	.word	0xf886fa5f
   39bdc:	4707ea8c 	.word	0x4707ea8c
   39be0:	8008f811 	.word	0x8008f811
   39be4:	c00af811 	.word	0xc00af811
   39be8:	a01cf8d0 	.word	0xa01cf8d0
   39bec:	40629801 	.word	0x40629801
   39bf0:	0a0aea88 	.word	0x0a0aea88
   39bf4:	620cea82 	.word	0x620cea82
   39bf8:	4807f3c0 	.word	0x4807f3c0
   39bfc:	2c07f3c0 	.word	0x2c07f3c0
   39c00:	f8112000 	.word	0xf8112000
   39c04:	f3c6b00b 	.word	0xf3c6b00b
   39c08:	5d8e2607 	.word	0x5d8e2607
   39c0c:	6b0bea8a 	.word	0x6b0bea8a
   39c10:	4507f3c5 	.word	0x4507f3c5
   39c14:	a00cf811 	.word	0xa00cf811
   39c18:	f8115d4d 	.word	0xf8115d4d
   39c1c:	ea821008 	.word	0xea821008
   39c20:	ea8b2606 	.word	0xea8b2606
   39c24:	9c022b0a 	.word	0x9c022b0a
   39c28:	4b05ea8b 	.word	0x4b05ea8b
   39c2c:	4601ea86 	.word	0x4601ea86
   39c30:	2c13ea4f 	.word	0x2c13ea4f
   39c34:	ea4f0a31 	.word	0xea4f0a31
   39c38:	f366221b 	.word	0xf366221b
   39c3c:	f36b0e07 	.word	0xf36b0e07
   39c40:	f36c0007 	.word	0xf36c0007
   39c44:	ea4f240f 	.word	0xea4f240f
   39c48:	f3624c13 	.word	0xf3624c13
   39c4c:	f361200f 	.word	0xf361200f
   39c50:	f36c2e0f 	.word	0xf36c2e0f
   39c54:	0c314417 	.word	0x0c314417
   39c58:	4e17f361 	.word	0x4e17f361
   39c5c:	46204601 	.word	0x46204601
   39c60:	f3630e1b 	.word	0xf3630e1b
   39c64:	9b05601f 	.word	0x9b05601f
   39c68:	60180a3d 	.word	0x60180a3d
   39c6c:	f3672000 	.word	0xf3672000
   39c70:	ea4f0907 	.word	0xea4f0907
   39c74:	f365421b 	.word	0xf365421b
   39c78:	0c3d290f 	.word	0x0c3d290f
   39c7c:	4917f365 	.word	0x4917f365
   39c80:	0e360e3f 	.word	0x0e360e3f
   39c84:	4117f362 	.word	0x4117f362
   39c88:	6b1bea4f 	.word	0x6b1bea4f
   39c8c:	691ff367 	.word	0x691ff367
   39c90:	6e1ff366 	.word	0x6e1ff366
   39c94:	611ff36b 	.word	0x611ff36b
   39c98:	9004f8c3 	.word	0x9004f8c3
   39c9c:	e008f8c3 	.word	0xe008f8c3
   39ca0:	b00960d9 	.word	0xb00960d9
   39ca4:	8ff0e8bd 	.word	0x8ff0e8bd
   39ca8:	0004a170 	.word	0x0004a170
   39cac:	0004a270 	.word	0x0004a270

00039cb0 <symbol_000e471>:
   39cb0:	4ff0e92d 	.word	0x4ff0e92d
   39cb4:	3500e9d0 	.word	0x3500e9d0
   39cb8:	682fb089 	.word	0x682fb089
   39cbc:	f8d1105b 	.word	0xf8d1105b
   39cc0:	9306a000 	.word	0x9306a000
   39cc4:	684c3b01 	.word	0x684c3b01
   39cc8:	ea8a9301 	.word	0xea8a9301
   39ccc:	68eb0a07 	.word	0x68eb0a07
   39cd0:	68c9688f 	.word	0x68c9688f
   39cd4:	40596868 	.word	0x40596868
   39cd8:	68ae9b01 	.word	0x68ae9b01
   39cdc:	2b009205 	.word	0x2b009205
   39ce0:	0210f105 	.word	0x0210f105
   39ce4:	0004ea80 	.word	0x0004ea80
   39ce8:	0706ea87 	.word	0x0706ea87
   39cec:	f8df9204 	.word	0xf8df9204
   39cf0:	f340b3dc 	.word	0xf340b3dc
   39cf4:	46d180d7 	.word	0x46d180d7
   39cf8:	0830f105 	.word	0x0830f105
   39cfc:	f489fa5f 	.word	0xf489fa5f
   39d00:	5024f85b 	.word	0x5024f85b
   39d04:	6c20f858 	.word	0x6c20f858
   39d08:	fc80fa5f 	.word	0xfc80fa5f
   39d0c:	f85b0e04 	.word	0xf85b0e04
   39d10:	f85bc02c 	.word	0xf85bc02c
   39d14:	406e4024 	.word	0x406e4024
   39d18:	5c1cf858 	.word	0x5c1cf858
   39d1c:	2e07f3c1 	.word	0x2e07f3c1
   39d20:	a02ef85b 	.word	0xa02ef85b
   39d24:	0505ea8c 	.word	0x0505ea8c
   39d28:	2e34ea86 	.word	0x2e34ea86
   39d2c:	b2fbb2ca 	.word	0xb2fbb2ca
   39d30:	6c17ea4f 	.word	0x6c17ea4f
   39d34:	4407f3c7 	.word	0x4407f3c7
   39d38:	2707f3c7 	.word	0x2707f3c7
   39d3c:	6027f85b 	.word	0x6027f85b
   39d40:	2022f85b 	.word	0x2022f85b
   39d44:	7c14f858 	.word	0x7c14f858
   39d48:	3023f85b 	.word	0x3023f85b
   39d4c:	ea4f407a 	.word	0xea4f407a
   39d50:	f85b6719 	.word	0xf85b6719
   39d54:	f85b7027 	.word	0xf85b7027
   39d58:	ea82c02c 	.word	0xea82c02c
   39d5c:	ea822237 	.word	0xea822237
   39d60:	f8586636 	.word	0xf8586636
   39d64:	ea852c18 	.word	0xea852c18
   39d68:	ea8e2c3c 	.word	0xea8e2c3c
   39d6c:	0e0d6e3a 	.word	0x0e0d6e3a
   39d70:	0a02ea83 	.word	0x0a02ea83
   39d74:	2307f3c9 	.word	0x2307f3c9
   39d78:	3023f85b 	.word	0x3023f85b
   39d7c:	5025f85b 	.word	0x5025f85b
   39d80:	4107f3c1 	.word	0x4107f3c1
   39d84:	1021f85b 	.word	0x1021f85b
   39d88:	2707f3c0 	.word	0x2707f3c0
   39d8c:	2535ea8a 	.word	0x2535ea8a
   39d90:	4a07f3c0 	.word	0x4a07f3c0
   39d94:	6033ea8c 	.word	0x6033ea8c
   39d98:	4031ea80 	.word	0x4031ea80
   39d9c:	4024f85b 	.word	0x4024f85b
   39da0:	ea8e0e03 	.word	0xea8e0e03
   39da4:	f85b4434 	.word	0xf85b4434
   39da8:	b2e13023 	.word	0xb2e13023
   39dac:	f3c99302 	.word	0xf3c99302
   39db0:	f8584907 	.word	0xf8584907
   39db4:	f85b3c10 	.word	0xf85b3c10
   39db8:	f85b1021 	.word	0xf85b1021
   39dbc:	f3c42029 	.word	0xf3c42029
   39dc0:	f85b2c07 	.word	0xf85b2c07
   39dc4:	f85b9027 	.word	0xf85b9027
   39dc8:	4059702a 	.word	0x4059702a
   39dcc:	302cf85b 	.word	0x302cf85b
   39dd0:	4637ea86 	.word	0x4637ea86
   39dd4:	6539ea85 	.word	0x6539ea85
   39dd8:	4532ea85 	.word	0x4532ea85
   39ddc:	2707f3c6 	.word	0x2707f3c6
   39de0:	9b029303 	.word	0x9b029303
   39de4:	4e07f3c5 	.word	0x4e07f3c5
   39de8:	7027f85b 	.word	0x7027f85b
   39dec:	902ef85b 	.word	0x902ef85b
   39df0:	4c07f3c6 	.word	0x4c07f3c6
   39df4:	ea4fb2c2 	.word	0xea4fb2c2
   39df8:	ea816e15 	.word	0xea816e15
   39dfc:	b2e92333 	.word	0xb2e92333
   39e00:	a02cf85b 	.word	0xa02cf85b
   39e04:	6337ea83 	.word	0x6337ea83
   39e08:	2022f85b 	.word	0x2022f85b
   39e0c:	e02ef85b 	.word	0xe02ef85b
   39e10:	1021f85b 	.word	0x1021f85b
   39e14:	7c0cf858 	.word	0x7c0cf858
   39e18:	6c16ea4f 	.word	0x6c16ea4f
   39e1c:	b2f6407a 	.word	0xb2f6407a
   39e20:	2e3eea82 	.word	0x2e3eea82
   39e24:	2026f85b 	.word	0x2026f85b
   39e28:	6c08f858 	.word	0x6c08f858
   39e2c:	4939ea83 	.word	0x4939ea83
   39e30:	40710e23 	.word	0x40710e23
   39e34:	6023f85b 	.word	0x6023f85b
   39e38:	3c04f858 	.word	0x3c04f858
   39e3c:	702cf85b 	.word	0x702cf85b
   39e40:	f3c54053 	.word	0xf3c54053
   39e44:	ea832507 	.word	0xea832507
   39e48:	f85b2636 	.word	0xf85b2636
   39e4c:	f3c05025 	.word	0xf3c05025
   39e50:	f3c02307 	.word	0xf3c02307
   39e54:	ea814007 	.word	0xea814007
   39e58:	f85b2137 	.word	0xf85b2137
   39e5c:	f85b7023 	.word	0xf85b7023
   39e60:	ea863020 	.word	0xea863020
   39e64:	ea816635 	.word	0xea816635
   39e68:	f3c46737 	.word	0xf3c46737
   39e6c:	9a034407 	.word	0x9a034407
   39e70:	4133ea86 	.word	0x4133ea86
   39e74:	f85b9b01 	.word	0xf85b9b01
   39e78:	ea8e4024 	.word	0xea8e4024
   39e7c:	3b016e32 	.word	0x3b016e32
   39e80:	403aea8e 	.word	0x403aea8e
   39e84:	4734ea87 	.word	0x4734ea87
   39e88:	0820f108 	.word	0x0820f108
   39e8c:	f47f9301 	.word	0xf47f9301
   39e90:	46caaf35 	.word	0x46caaf35
   39e94:	9a049b06 	.word	0x9a049b06
   39e98:	6300f103 	.word	0x6300f103
   39e9c:	eb023b01 	.word	0xeb023b01
   39ea0:	93041343 	.word	0x93041343
   39ea4:	f38afa5f 	.word	0xf38afa5f
   39ea8:	5023f85b 	.word	0x5023f85b
   39eac:	fa5f9b04 	.word	0xfa5f9b04
   39eb0:	681cf881 	.word	0x681cf881
   39eb4:	f85b0e03 	.word	0xf85b0e03
   39eb8:	f85b2028 	.word	0xf85b2028
   39ebc:	f3c18023 	.word	0xf3c18023
   39ec0:	f85b2307 	.word	0xf85b2307
   39ec4:	406c3023 	.word	0x406c3023
   39ec8:	4507f3c7 	.word	0x4507f3c7
   39ecc:	5025f85b 	.word	0x5025f85b
   39ed0:	2438ea84 	.word	0x2438ea84
   39ed4:	f887fa5f 	.word	0xf887fa5f
   39ed8:	6028f85b 	.word	0x6028f85b
   39edc:	6433ea84 	.word	0x6433ea84
   39ee0:	4535ea84 	.word	0x4535ea84
   39ee4:	462e9602 	.word	0x462e9602
   39ee8:	fa5f9c04 	.word	0xfa5f9c04
   39eec:	f85bf980 	.word	0xf85bf980
   39ef0:	68639029 	.word	0x68639029
   39ef4:	f85b0e3c 	.word	0xf85b0e3c
   39ef8:	96014024 	.word	0x96014024
   39efc:	0303ea89 	.word	0x0303ea89
   39f00:	ea839e04 	.word	0xea839e04
   39f04:	f3c72434 	.word	0xf3c72434
   39f08:	0e0b2707 	.word	0x0e0b2707
   39f0c:	f85b4d6e 	.word	0xf85b4d6e
   39f10:	f89d9027 	.word	0xf89d9027
   39f14:	f85b8004 	.word	0xf85b8004
   39f18:	68f37023 	.word	0x68f37023
   39f1c:	0e00f04f 	.word	0x0e00f04f
   39f20:	8008f815 	.word	0x8008f815
   39f24:	69324053 	.word	0x69324053
   39f28:	4107f3c1 	.word	0x4107f3c1
   39f2c:	0802ea88 	.word	0x0802ea88
   39f30:	97034642 	.word	0x97034642
   39f34:	7021f85b 	.word	0x7021f85b
   39f38:	611aea4f 	.word	0x611aea4f
   39f3c:	1021f85b 	.word	0x1021f85b
   39f40:	e018f8cd 	.word	0xe018f8cd
   39f44:	2331ea83 	.word	0x2331ea83
   39f48:	6939ea83 	.word	0x6939ea83
   39f4c:	2307f3ca 	.word	0x2307f3ca
   39f50:	3023f85b 	.word	0x3023f85b
   39f54:	9e0268b1 	.word	0x9e0268b1
   39f58:	6333ea84 	.word	0x6333ea84
   39f5c:	4737ea83 	.word	0x4737ea83
   39f60:	0801ea86 	.word	0x0801ea86
   39f64:	2307f3c0 	.word	0x2307f3c0
   39f68:	f3ca9e03 	.word	0xf3ca9e03
   39f6c:	f3c04a07 	.word	0xf3c04a07
   39f70:	f85b4007 	.word	0xf85b4007
   39f74:	f85b102a 	.word	0xf85b102a
   39f78:	f8cd4023 	.word	0xf8cd4023
   39f7c:	f85be01c 	.word	0xf85be01c
   39f80:	0e383020 	.word	0x0e383020
   39f84:	ea885c28 	.word	0xea885c28
   39f88:	ea892836 	.word	0xea892836
   39f8c:	ea884933 	.word	0xea884933
   39f90:	ea886834 	.word	0xea886834
   39f94:	f3c94131 	.word	0xf3c94131
   39f98:	ea822407 	.word	0xea822407
   39f9c:	9a016000 	.word	0x9a016000
   39fa0:	8004f815 	.word	0x8004f815
   39fa4:	4307f3c1 	.word	0x4307f3c1
   39fa8:	6a11ea4f 	.word	0x6a11ea4f
   39fac:	f8155cec 	.word	0xf8155cec
   39fb0:	f3c2b00a 	.word	0xf3c2b00a
   39fb4:	9a042a07 	.word	0x9a042a07
   39fb8:	ea80b2fb 	.word	0xea80b2fb
   39fbc:	ea802008 	.word	0xea802008
   39fc0:	5ceb4004 	.word	0x5ceb4004
   39fc4:	f8156954 	.word	0xf8156954
   39fc8:	f3c9a00a 	.word	0xf3c9a00a
   39fcc:	40634807 	.word	0x40634807
   39fd0:	6008f815 	.word	0x6008f815
   39fd4:	6b0bea83 	.word	0x6b0bea83
   39fd8:	2b0aea8b 	.word	0x2b0aea8b
   39fdc:	4b06ea8b 	.word	0x4b06ea8b
   39fe0:	260046f4 	.word	0x260046f4
   39fe4:	f881fa5f 	.word	0xf881fa5f
   39fe8:	f8156994 	.word	0xf8156994
   39fec:	ea4f8008 	.word	0xea4f8008
   39ff0:	f8d26319 	.word	0xf8d26319
   39ff4:	5ceba01c 	.word	0x5ceba01c
   39ff8:	fa5f9a01 	.word	0xfa5f9a01
   39ffc:	f815f989 	.word	0xf815f989
   3a000:	ea889009 	.word	0xea889009
   3a004:	ea880804 	.word	0xea880804
   3a008:	0e136803 	.word	0x0e136803
   3a00c:	090aea89 	.word	0x090aea89
   3a010:	a003f815 	.word	0xa003f815
   3a014:	4307f3c2 	.word	0x4307f3c2
   3a018:	f3c75cec 	.word	0xf3c75cec
   3a01c:	5ceb2307 	.word	0x5ceb2307
   3a020:	2107f3c1 	.word	0x2107f3c1
   3a024:	ea885c69 	.word	0xea885c69
   3a028:	ea882803 	.word	0xea882803
   3a02c:	ea894804 	.word	0xea894804
   3a030:	ea4f690a 	.word	0xea4f690a
   3a034:	ea89241b 	.word	0xea89241b
   3a038:	f36b2901 	.word	0xf36b2901
   3a03c:	ea4f0c07 	.word	0xea4f0c07
   3a040:	f3682118 	.word	0xf3682118
   3a044:	22000607 	.word	0x22000607
   3a048:	260ff361 	.word	0x260ff361
   3a04c:	2c0ff364 	.word	0x2c0ff364
   3a050:	441bea4f 	.word	0x441bea4f
   3a054:	4c17f364 	.word	0x4c17f364
   3a058:	f3c74634 	.word	0xf3c74634
   3a05c:	5ded4707 	.word	0x5ded4707
   3a060:	0e07f360 	.word	0x0e07f360
   3a064:	4905ea89 	.word	0x4905ea89
   3a068:	2319ea4f 	.word	0x2319ea4f
   3a06c:	f3690a05 	.word	0xf3690a05
   3a070:	ea4f0207 	.word	0xea4f0207
   3a074:	f3634118 	.word	0xf3634118
   3a078:	f365220f 	.word	0xf365220f
   3a07c:	0c052e0f 	.word	0x0c052e0f
   3a080:	4417f361 	.word	0x4417f361
   3a084:	4e17f365 	.word	0x4e17f365
   3a088:	46110e00 	.word	0x46110e00
   3a08c:	6e1ff360 	.word	0x6e1ff360
   3a090:	ea4f4620 	.word	0xea4f4620
   3a094:	ea4f4319 	.word	0xea4f4319
   3a098:	f3636818 	.word	0xf3636818
   3a09c:	9b054117 	.word	0x9b054117
   3a0a0:	601ff368 	.word	0x601ff368
   3a0a4:	20006098 	.word	0x20006098
   3a0a8:	6b1bea4f 	.word	0x6b1bea4f
   3a0ac:	6919ea4f 	.word	0x6919ea4f
   3a0b0:	6c1ff36b 	.word	0x6c1ff36b
   3a0b4:	611ff369 	.word	0x611ff369
   3a0b8:	e000f8c3 	.word	0xe000f8c3
   3a0bc:	c004f8c3 	.word	0xc004f8c3
   3a0c0:	b00960d9 	.word	0xb00960d9
   3a0c4:	8ff0e8bd 	.word	0x8ff0e8bd
   3a0c8:	0004a698 	.word	0x0004a698
   3a0cc:	0004a798 	.word	0x0004a798

0003a0d0 <symbol_0005bab>:
   3a0d0:	4614b410 	.word	0x4614b410
   3a0d4:	461a2901 	.word	0x461a2901
   3a0d8:	d0034621 	.word	0xd0034621
   3a0dc:	4b04f85d 	.word	0x4b04f85d
   3a0e0:	bde6f7ff 	.word	0xbde6f7ff
   3a0e4:	4b04f85d 	.word	0x4b04f85d
   3a0e8:	bbcaf7ff 	.word	0xbbcaf7ff

0003a0ec <ok_rsp_parser>:
   3a0ec:	47702000 	.word	0x47702000

0003a0f0 <pdn_state_get_parser>:
   3a0f0:	b5702200 	.word	0xb5702200
   3a0f4:	b084780b 	.word	0xb084780b
   3a0f8:	e9cd460e 	.word	0xe9cd460e
   3a0fc:	e9cd2200 	.word	0xe9cd2200
   3a100:	b3232202 	.word	0xb3232202
   3a104:	2b20460c 	.word	0x2b20460c
   3a108:	d01b460d 	.word	0xd01b460d
   3a10c:	3201700b 	.word	0x3201700b
   3a110:	3f01f814 	.word	0x3f01f814
   3a114:	460d18b1 	.word	0x460d18b1
   3a118:	d1f42b00 	.word	0xd1f42b00
   3a11c:	4b0d2200 	.word	0x4b0d2200
   3a120:	f853702a 	.word	0xf853702a
   3a124:	4a0c3020 	.word	0x4a0c3020
   3a128:	2110681b 	.word	0x2110681b
   3a12c:	f0064668 	.word	0xf0064668
   3a130:	4669f859 	.word	0x4669f859
   3a134:	f0064630 	.word	0xf0064630
   3a138:	3000fc35 	.word	0x3000fc35
   3a13c:	2001bf18 	.word	0x2001bf18
   3a140:	bd70b004 	.word	0xbd70b004
   3a144:	3f01f814 	.word	0x3f01f814
   3a148:	d1dc2b00 	.word	0xd1dc2b00
   3a14c:	460de7e6 	.word	0x460de7e6
   3a150:	bf00e7e4 	.word	0xbf00e7e4
   3a154:	200260c0 	.word	0x200260c0
   3a158:	0004ac3c 	.word	0x0004ac3c

0003a15c <pdn_id_get_parser>:
   3a15c:	780bb570 	.word	0x780bb570
   3a160:	b3134606 	.word	0xb3134606
   3a164:	24004608 	.word	0x24004608
   3a168:	2b20460a 	.word	0x2b20460a
   3a16c:	d0174615 	.word	0xd0174615
   3a170:	34017013 	.word	0x34017013
   3a174:	3f01f810 	.word	0x3f01f810
   3a178:	4615190a 	.word	0x4615190a
   3a17c:	d1f42b00 	.word	0xd1f42b00
   3a180:	46082300 	.word	0x46082300
   3a184:	213a702b 	.word	0x213a702b
   3a188:	f928f006 	.word	0xf928f006
   3a18c:	3001b130 	.word	0x3001b130
   3a190:	fa4af005 	.word	0xfa4af005
   3a194:	f8534b06 	.word	0xf8534b06
   3a198:	60583026 	.word	0x60583026
   3a19c:	bd702000 	.word	0xbd702000
   3a1a0:	3f01f810 	.word	0x3f01f810
   3a1a4:	d1e02b00 	.word	0xd1e02b00
   3a1a8:	460de7ea 	.word	0x460de7ea
   3a1ac:	bf00e7e8 	.word	0xbf00e7e8
   3a1b0:	200260c0 	.word	0x200260c0

0003a1b4 <context_create_parser>:
   3a1b4:	780bb570 	.word	0x780bb570
   3a1b8:	b3134606 	.word	0xb3134606
   3a1bc:	24004608 	.word	0x24004608
   3a1c0:	2b20460a 	.word	0x2b20460a
   3a1c4:	d0174615 	.word	0xd0174615
   3a1c8:	34017013 	.word	0x34017013
   3a1cc:	3f01f810 	.word	0x3f01f810
   3a1d0:	4615190a 	.word	0x4615190a
   3a1d4:	d1f42b00 	.word	0xd1f42b00
   3a1d8:	46082300 	.word	0x46082300
   3a1dc:	213a702b 	.word	0x213a702b
   3a1e0:	f8fcf006 	.word	0xf8fcf006
   3a1e4:	4b08b130 	.word	0x4b08b130
   3a1e8:	f8533001 	.word	0xf8533001
   3a1ec:	f0054026 	.word	0xf0054026
   3a1f0:	6020fa1b 	.word	0x6020fa1b
   3a1f4:	bd702000 	.word	0xbd702000
   3a1f8:	3f01f810 	.word	0x3f01f810
   3a1fc:	d1e02b00 	.word	0xd1e02b00
   3a200:	460de7ea 	.word	0x460de7ea
   3a204:	bf00e7e8 	.word	0xbf00e7e8
   3a208:	200260c0 	.word	0x200260c0

0003a20c <pdn_interface_init>:
   3a20c:	33fff04f 	.word	0x33fff04f
   3a210:	4c09b510 	.word	0x4c09b510
   3a214:	21002228 	.word	0x21002228
   3a218:	60234808 	.word	0x60234808
   3a21c:	fd96f005 	.word	0xfd96f005
   3a220:	2201f240 	.word	0x2201f240
   3a224:	20662100 	.word	0x20662100
   3a228:	ff70f7f2 	.word	0xff70f7f2
   3a22c:	60202800 	.word	0x60202800
   3a230:	2003bfb4 	.word	0x2003bfb4
   3a234:	bd102000 	.word	0xbd102000
   3a238:	20025fbc 	.word	0x20025fbc
   3a23c:	200260c0 	.word	0x200260c0

0003a240 <pdn_interface_open>:
   3a240:	43f0e92d 	.word	0x43f0e92d
   3a244:	b0832866 	.word	0xb0832866
   3a248:	80bcf040 	.word	0x80bcf040
   3a24c:	7f00f5b1 	.word	0x7f00f5b1
   3a250:	80aaf040 	.word	0x80aaf040
   3a254:	2302f240 	.word	0x2302f240
   3a258:	f040429a 	.word	0xf040429a
   3a25c:	4c6280a5 	.word	0x4c6280a5
   3a260:	b34d6825 	.word	0xb34d6825
   3a264:	2b006863 	.word	0x2b006863
   3a268:	8098f000 	.word	0x8098f000
   3a26c:	2b0068a3 	.word	0x2b0068a3
   3a270:	8096f000 	.word	0x8096f000
   3a274:	2b0068e3 	.word	0x2b0068e3
   3a278:	8094f000 	.word	0x8094f000
   3a27c:	2b006923 	.word	0x2b006923
   3a280:	8098f000 	.word	0x8098f000
   3a284:	2b006963 	.word	0x2b006963
   3a288:	8098f000 	.word	0x8098f000
   3a28c:	2b0069a3 	.word	0x2b0069a3
   3a290:	8096f000 	.word	0x8096f000
   3a294:	2b0069e3 	.word	0x2b0069e3
   3a298:	808ef000 	.word	0x808ef000
   3a29c:	b1536a23 	.word	0xb1536a23
   3a2a0:	25096a63 	.word	0x25096a63
   3a2a4:	200cb143 	.word	0x200cb143
   3a2a8:	ff56f7ea 	.word	0xff56f7ea
   3a2ac:	30fff04f 	.word	0x30fff04f
   3a2b0:	e8bdb003 	.word	0xe8bdb003
   3a2b4:	250883f0 	.word	0x250883f0
   3a2b8:	f7fe2074 	.word	0xf7fe2074
   3a2bc:	f844ff3f 	.word	0xf844ff3f
   3a2c0:	28000025 	.word	0x28000025
   3a2c4:	2274d0ef 	.word	0x2274d0ef
   3a2c8:	f0052100 	.word	0xf0052100
   3a2cc:	2101fd3f 	.word	0x2101fd3f
   3a2d0:	f04f2003 	.word	0xf04f2003
   3a2d4:	f85437ff 	.word	0xf85437ff
   3a2d8:	4a443025 	.word	0x4a443025
   3a2dc:	f8546099 	.word	0xf8546099
   3a2e0:	f44f3025 	.word	0xf44f3025
   3a2e4:	67187180 	.word	0x67187180
   3a2e8:	4841605f 	.word	0x4841605f
   3a2ec:	810cf8df 	.word	0x810cf8df
   3a2f0:	ff78f005 	.word	0xff78f005
   3a2f4:	f8d8483e 	.word	0xf8d8483e
   3a2f8:	26009000 	.word	0x26009000
   3a2fc:	f942f006 	.word	0xf942f006
   3a300:	46024633 	.word	0x46024633
   3a304:	4648493a 	.word	0x4648493a
   3a308:	96009601 	.word	0x96009601
   3a30c:	fea8f7f2 	.word	0xfea8f7f2
   3a310:	48374681 	.word	0x48374681
   3a314:	f936f006 	.word	0xf936f006
   3a318:	d1594548 	.word	0xd1594548
   3a31c:	e9cd4633 	.word	0xe9cd4633
   3a320:	f44f6600 	.word	0xf44f6600
   3a324:	49327280 	.word	0x49327280
   3a328:	0000f8d8 	.word	0x0000f8d8
   3a32c:	ff80f7f2 	.word	0xff80f7f2
   3a330:	48304606 	.word	0x48304606
   3a334:	f926f006 	.word	0xf926f006
   3a338:	db154286 	.word	0xdb154286
   3a33c:	492c4602 	.word	0x492c4602
   3a340:	f006482c 	.word	0xf006482c
   3a344:	b978f94d 	.word	0xb978f94d
   3a348:	46284929 	.word	0x46284929
   3a34c:	ff32f7ff 	.word	0xff32f7ff
   3a350:	2202b9b0 	.word	0x2202b9b0
   3a354:	3025f854 	.word	0x3025f854
   3a358:	40f1f045 	.word	0x40f1f045
   3a35c:	10d0f440 	.word	0x10d0f440
   3a360:	b003609a 	.word	0xb003609a
   3a364:	83f0e8bd 	.word	0x83f0e8bd
   3a368:	f0064823 	.word	0xf0064823
   3a36c:	4920f90b 	.word	0x4920f90b
   3a370:	48214602 	.word	0x48214602
   3a374:	f934f006 	.word	0xf934f006
   3a378:	2008b960 	.word	0x2008b960
   3a37c:	feecf7ea 	.word	0xfeecf7ea
   3a380:	0025f854 	.word	0x0025f854
   3a384:	fef8f7fe 	.word	0xfef8f7fe
   3a388:	f04f2300 	.word	0xf04f2300
   3a38c:	f84430ff 	.word	0xf84430ff
   3a390:	e78d3025 	.word	0xe78d3025
   3a394:	f7ea2005 	.word	0xf7ea2005
   3a398:	e7f1fedf 	.word	0xe7f1fedf
   3a39c:	e78b2501 	.word	0xe78b2501
   3a3a0:	e7892502 	.word	0xe7892502
   3a3a4:	e7872503 	.word	0xe7872503
   3a3a8:	f7ea2016 	.word	0xf7ea2016
   3a3ac:	f04ffed5 	.word	0xf04ffed5
   3a3b0:	e77d30ff 	.word	0xe77d30ff
   3a3b4:	e77f2504 	.word	0xe77f2504
   3a3b8:	e77d2507 	.word	0xe77d2507
   3a3bc:	e77b2505 	.word	0xe77b2505
   3a3c0:	e7792506 	.word	0xe7792506
   3a3c4:	f7ea202f 	.word	0xf7ea202f
   3a3c8:	f04ffec7 	.word	0xf04ffec7
   3a3cc:	e76f30ff 	.word	0xe76f30ff
   3a3d0:	f7ea2005 	.word	0xf7ea2005
   3a3d4:	f854fec1 	.word	0xf854fec1
   3a3d8:	f7fe0025 	.word	0xf7fe0025
   3a3dc:	f844fecd 	.word	0xf844fecd
   3a3e0:	46386025 	.word	0x46386025
   3a3e4:	bf00e764 	.word	0xbf00e764
   3a3e8:	200260c0 	.word	0x200260c0
   3a3ec:	0004ac18 	.word	0x0004ac18
   3a3f0:	20025fc0 	.word	0x20025fc0
   3a3f4:	0004ac28 	.word	0x0004ac28
   3a3f8:	0004ac34 	.word	0x0004ac34
   3a3fc:	20025fbc 	.word	0x20025fbc

0003a400 <pdn_interface_connect>:
   3a400:	4ff0e92d 	.word	0x4ff0e92d
   3a404:	2900b083 	.word	0x2900b083
   3a408:	813ef000 	.word	0x813ef000
   3a40c:	46912a64 	.word	0x46912a64
   3a410:	813af200 	.word	0x813af200
   3a414:	46084605 	.word	0x46084605
   3a418:	f0064688 	.word	0xf0064688
   3a41c:	2864f8b3 	.word	0x2864f8b3
   3a420:	8132f200 	.word	0x8132f200
   3a424:	43ab4ba5 	.word	0x43ab4ba5
   3a428:	8125f040 	.word	0x8125f040
   3a42c:	45f1f025 	.word	0x45f1f025
   3a430:	15d0f425 	.word	0x15d0f425
   3a434:	f3002d09 	.word	0xf3002d09
   3a438:	4fa1811e 	.word	0x4fa1811e
   3a43c:	3025f857 	.word	0x3025f857
   3a440:	f0002b00 	.word	0xf0002b00
   3a444:	689a8118 	.word	0x689a8118
   3a448:	f0002a00 	.word	0xf0002a00
   3a44c:	2d008114 	.word	0x2d008114
   3a450:	8111f2c0 	.word	0x8111f2c0
   3a454:	2b02689b 	.word	0x2b02689b
   3a458:	810df040 	.word	0x810df040
   3a45c:	4a9a4e99 	.word	0x4a9a4e99
   3a460:	7180f44f 	.word	0x7180f44f
   3a464:	f0054630 	.word	0xf0054630
   3a468:	f857febd 	.word	0xf857febd
   3a46c:	46043025 	.word	0x46043025
   3a470:	7180f5c0 	.word	0x7180f5c0
   3a474:	4a95681b 	.word	0x4a95681b
   3a478:	f0051830 	.word	0xf0051830
   3a47c:	f857feb3 	.word	0xf857feb3
   3a480:	44043025 	.word	0x44043025
   3a484:	f0036f1b 	.word	0xf0036f1b
   3a488:	2a030203 	.word	0x2a030203
   3a48c:	80eaf000 	.word	0x80eaf000
   3a490:	eb06079b 	.word	0xeb06079b
   3a494:	f5c40004 	.word	0xf5c40004
   3a498:	bf4c7180 	.word	0xbf4c7180
   3a49c:	4b8d4b8c 	.word	0x4b8d4b8c
   3a4a0:	f0054a8d 	.word	0xf0054a8d
   3a4a4:	4404fe9f 	.word	0x4404fe9f
   3a4a8:	4a8c4643 	.word	0x4a8c4643
   3a4ac:	7180f5c4 	.word	0x7180f5c4
   3a4b0:	f0051930 	.word	0xf0051930
   3a4b4:	4420fe97 	.word	0x4420fe97
   3a4b8:	7f80f5b0 	.word	0x7f80f5b0
   3a4bc:	80f7f300 	.word	0x80f7f300
   3a4c0:	a238f8df 	.word	0xa238f8df
   3a4c4:	f8da487f 	.word	0xf8da487f
   3a4c8:	2400b000 	.word	0x2400b000
   3a4cc:	f85af006 	.word	0xf85af006
   3a4d0:	46024623 	.word	0x46024623
   3a4d4:	4658497b 	.word	0x4658497b
   3a4d8:	94009401 	.word	0x94009401
   3a4dc:	fdc0f7f2 	.word	0xfdc0f7f2
   3a4e0:	48784683 	.word	0x48784683
   3a4e4:	f84ef006 	.word	0xf84ef006
   3a4e8:	d0084558 	.word	0xd0084558
   3a4ec:	f7ea2005 	.word	0xf7ea2005
   3a4f0:	f04ffe33 	.word	0xf04ffe33
   3a4f4:	462034ff 	.word	0x462034ff
   3a4f8:	e8bdb003 	.word	0xe8bdb003
   3a4fc:	46238ff0 	.word	0x46238ff0
   3a500:	4400e9cd 	.word	0x4400e9cd
   3a504:	7280f44f 	.word	0x7280f44f
   3a508:	f8da496e 	.word	0xf8da496e
   3a50c:	f7f20000 	.word	0xf7f20000
   3a510:	4604fe8f 	.word	0x4604fe8f
   3a514:	f0064872 	.word	0xf0064872
   3a518:	4284f835 	.word	0x4284f835
   3a51c:	8091f2c0 	.word	0x8091f2c0
   3a520:	49684602 	.word	0x49684602
   3a524:	f006486e 	.word	0xf006486e
   3a528:	2800f85b 	.word	0x2800f85b
   3a52c:	8089f040 	.word	0x8089f040
   3a530:	46284964 	.word	0x46284964
   3a534:	fddaf7ff 	.word	0xfddaf7ff
   3a538:	28004604 	.word	0x28004604
   3a53c:	4a69d1db 	.word	0x4a69d1db
   3a540:	7180f44f 	.word	0x7180f44f
   3a544:	f005485f 	.word	0xf005485f
   3a548:	f857fe4d 	.word	0xf857fe4d
   3a54c:	f5c03025 	.word	0xf5c03025
   3a550:	681b7180 	.word	0x681b7180
   3a554:	44304a64 	.word	0x44304a64
   3a558:	fe44f005 	.word	0xfe44f005
   3a55c:	f8da4859 	.word	0xf8da4859
   3a560:	f006b000 	.word	0xf006b000
   3a564:	4623f80f 	.word	0x4623f80f
   3a568:	49564602 	.word	0x49564602
   3a56c:	94014658 	.word	0x94014658
   3a570:	f7f29400 	.word	0xf7f29400
   3a574:	4683fd75 	.word	0x4683fd75
   3a578:	f0064852 	.word	0xf0064852
   3a57c:	4558f803 	.word	0x4558f803
   3a580:	4623d1b4 	.word	0x4623d1b4
   3a584:	7280f44f 	.word	0x7280f44f
   3a588:	f8da494e 	.word	0xf8da494e
   3a58c:	e9cd0000 	.word	0xe9cd0000
   3a590:	f7f24400 	.word	0xf7f24400
   3a594:	4683fe4d 	.word	0x4683fe4d
   3a598:	f0054851 	.word	0xf0054851
   3a59c:	4583fff3 	.word	0x4583fff3
   3a5a0:	4602db4f 	.word	0x4602db4f
   3a5a4:	484e4947 	.word	0x484e4947
   3a5a8:	f81af006 	.word	0xf81af006
   3a5ac:	d1482800 	.word	0xd1482800
   3a5b0:	f8572103 	.word	0xf8572103
   3a5b4:	464a3025 	.word	0x464a3025
   3a5b8:	f8576099 	.word	0xf8576099
   3a5bc:	46410025 	.word	0x46410025
   3a5c0:	f7df300c 	.word	0xf7df300c
   3a5c4:	4a49fc75 	.word	0x4a49fc75
   3a5c8:	7180f44f 	.word	0x7180f44f
   3a5cc:	f005483d 	.word	0xf005483d
   3a5d0:	4601fe09 	.word	0x4601fe09
   3a5d4:	3025f857 	.word	0x3025f857
   3a5d8:	7180f5c1 	.word	0x7180f5c1
   3a5dc:	4a42681b 	.word	0x4a42681b
   3a5e0:	f0051830 	.word	0xf0051830
   3a5e4:	4837fdff 	.word	0x4837fdff
   3a5e8:	6000f8da 	.word	0x6000f8da
   3a5ec:	ffcaf005 	.word	0xffcaf005
   3a5f0:	46024623 	.word	0x46024623
   3a5f4:	46304933 	.word	0x46304933
   3a5f8:	94009401 	.word	0x94009401
   3a5fc:	fd30f7f2 	.word	0xfd30f7f2
   3a600:	48304606 	.word	0x48304606
   3a604:	ffbef005 	.word	0xffbef005
   3a608:	d15342b0 	.word	0xd15342b0
   3a60c:	f44f4623 	.word	0xf44f4623
   3a610:	492c7280 	.word	0x492c7280
   3a614:	0000f8da 	.word	0x0000f8da
   3a618:	4400e9cd 	.word	0x4400e9cd
   3a61c:	fe08f7f2 	.word	0xfe08f7f2
   3a620:	48334606 	.word	0x48334606
   3a624:	ffaef005 	.word	0xffaef005
   3a628:	db334286 	.word	0xdb334286
   3a62c:	49254602 	.word	0x49254602
   3a630:	f005482f 	.word	0xf005482f
   3a634:	bb68ffd5 	.word	0xbb68ffd5
   3a638:	49224628 	.word	0x49224628
   3a63c:	fd8ef7ff 	.word	0xfd8ef7ff
   3a640:	482ce759 	.word	0x482ce759
   3a644:	ff9ef005 	.word	0xff9ef005
   3a648:	4602491e 	.word	0x4602491e
   3a64c:	f0054829 	.word	0xf0054829
   3a650:	2800ffc7 	.word	0x2800ffc7
   3a654:	af4af47f 	.word	0xaf4af47f
   3a658:	f7ea2008 	.word	0xf7ea2008
   3a65c:	f04ffd7d 	.word	0xf04ffd7d
   3a660:	e74834ff 	.word	0xe74834ff
   3a664:	7180f5c4 	.word	0x7180f5c4
   3a668:	4b231930 	.word	0x4b231930
   3a66c:	f0054a1a 	.word	0xf0054a1a
   3a670:	4404fdb9 	.word	0x4404fdb9
   3a674:	f04fe718 	.word	0xf04fe718
   3a678:	200934ff 	.word	0x200934ff
   3a67c:	fd6cf7ea 	.word	0xfd6cf7ea
   3a680:	b0034620 	.word	0xb0034620
   3a684:	8ff0e8bd 	.word	0x8ff0e8bd
   3a688:	f7ea2016 	.word	0xf7ea2016
   3a68c:	f04ffd65 	.word	0xf04ffd65
   3a690:	e73034ff 	.word	0xe73034ff
   3a694:	f0054817 	.word	0xf0054817
   3a698:	490aff75 	.word	0x490aff75
   3a69c:	48154602 	.word	0x48154602
   3a6a0:	ff9ef005 	.word	0xff9ef005
   3a6a4:	2008b930 	.word	0x2008b930
   3a6a8:	fd56f7ea 	.word	0xfd56f7ea
   3a6ac:	f04fe723 	.word	0xf04fe723
   3a6b0:	e72034ff 	.word	0xe72034ff
   3a6b4:	f7ea2005 	.word	0xf7ea2005
   3a6b8:	e71cfd4f 	.word	0xe71cfd4f
   3a6bc:	789a0000 	.word	0x789a0000
   3a6c0:	200260c0 	.word	0x200260c0
   3a6c4:	20025fc0 	.word	0x20025fc0
   3a6c8:	0004aba4 	.word	0x0004aba4
   3a6cc:	0004abb0 	.word	0x0004abb0
   3a6d0:	0004abc4 	.word	0x0004abc4
   3a6d4:	0004abcc 	.word	0x0004abcc
   3a6d8:	0004abbc 	.word	0x0004abbc
   3a6dc:	0004abfc 	.word	0x0004abfc
   3a6e0:	00049bc4 	.word	0x00049bc4
   3a6e4:	0004abd0 	.word	0x0004abd0
   3a6e8:	0004abdc 	.word	0x0004abdc
   3a6ec:	0004abe0 	.word	0x0004abe0
   3a6f0:	0004abf0 	.word	0x0004abf0
   3a6f4:	0004ac34 	.word	0x0004ac34
   3a6f8:	0004abb4 	.word	0x0004abb4
   3a6fc:	20025fbc 	.word	0x20025fbc

0003a700 <pdn_interface_close>:
   3a700:	43f0e92d 	.word	0x43f0e92d
   3a704:	b0834b63 	.word	0xb0834b63
   3a708:	f0404383 	.word	0xf0404383
   3a70c:	f020809d 	.word	0xf020809d
   3a710:	f42444f1 	.word	0xf42444f1
   3a714:	2c0914d0 	.word	0x2c0914d0
   3a718:	8096f300 	.word	0x8096f300
   3a71c:	f8554d5e 	.word	0xf8554d5e
   3a720:	28000024 	.word	0x28000024
   3a724:	8090f000 	.word	0x8090f000
   3a728:	2b006883 	.word	0x2b006883
   3a72c:	808cf000 	.word	0x808cf000
   3a730:	2b036883 	.word	0x2b036883
   3a734:	f7fed008 	.word	0xf7fed008
   3a738:	2300fd1f 	.word	0x2300fd1f
   3a73c:	f8454618 	.word	0xf8454618
   3a740:	b0033024 	.word	0xb0033024
   3a744:	83f0e8bd 	.word	0x83f0e8bd
   3a748:	4a554e54 	.word	0x4a554e54
   3a74c:	7180f44f 	.word	0x7180f44f
   3a750:	f0054630 	.word	0xf0054630
   3a754:	f855fd47 	.word	0xf855fd47
   3a758:	f5c03024 	.word	0xf5c03024
   3a75c:	681b7180 	.word	0x681b7180
   3a760:	44304a50 	.word	0x44304a50
   3a764:	814cf8df 	.word	0x814cf8df
   3a768:	fd3cf005 	.word	0xfd3cf005
   3a76c:	f8d84630 	.word	0xf8d84630
   3a770:	27009000 	.word	0x27009000
   3a774:	ff06f005 	.word	0xff06f005
   3a778:	46024631 	.word	0x46024631
   3a77c:	4648463b 	.word	0x4648463b
   3a780:	97009701 	.word	0x97009701
   3a784:	fc6cf7f2 	.word	0xfc6cf7f2
   3a788:	46304681 	.word	0x46304681
   3a78c:	fefaf005 	.word	0xfefaf005
   3a790:	d1764548 	.word	0xd1764548
   3a794:	e9cd463b 	.word	0xe9cd463b
   3a798:	f44f7700 	.word	0xf44f7700
   3a79c:	46317280 	.word	0x46317280
   3a7a0:	0000f8d8 	.word	0x0000f8d8
   3a7a4:	fd44f7f2 	.word	0xfd44f7f2
   3a7a8:	483f4607 	.word	0x483f4607
   3a7ac:	feeaf005 	.word	0xfeeaf005
   3a7b0:	da4f4287 	.word	0xda4f4287
   3a7b4:	f005483d 	.word	0xf005483d
   3a7b8:	4938fee5 	.word	0x4938fee5
   3a7bc:	483b4602 	.word	0x483b4602
   3a7c0:	ff0ef005 	.word	0xff0ef005
   3a7c4:	d15c2800 	.word	0xd15c2800
   3a7c8:	f7ea2008 	.word	0xf7ea2008
   3a7cc:	4a38fcc5 	.word	0x4a38fcc5
   3a7d0:	7180f44f 	.word	0x7180f44f
   3a7d4:	f0054831 	.word	0xf0054831
   3a7d8:	4601fd05 	.word	0x4601fd05
   3a7dc:	3024f855 	.word	0x3024f855
   3a7e0:	7180f5c1 	.word	0x7180f5c1
   3a7e4:	4a2f681b 	.word	0x4a2f681b
   3a7e8:	f0051830 	.word	0xf0051830
   3a7ec:	482bfcfb 	.word	0x482bfcfb
   3a7f0:	7000f8d8 	.word	0x7000f8d8
   3a7f4:	f0052600 	.word	0xf0052600
   3a7f8:	4633fec5 	.word	0x4633fec5
   3a7fc:	49274602 	.word	0x49274602
   3a800:	96014638 	.word	0x96014638
   3a804:	f7f29600 	.word	0xf7f29600
   3a808:	4607fc2b 	.word	0x4607fc2b
   3a80c:	f0054823 	.word	0xf0054823
   3a810:	42b8feb9 	.word	0x42b8feb9
   3a814:	4633d139 	.word	0x4633d139
   3a818:	6600e9cd 	.word	0x6600e9cd
   3a81c:	7280f44f 	.word	0x7280f44f
   3a820:	f8d8491e 	.word	0xf8d8491e
   3a824:	f7f20000 	.word	0xf7f20000
   3a828:	4606fd03 	.word	0x4606fd03
   3a82c:	f005481e 	.word	0xf005481e
   3a830:	4286fea9 	.word	0x4286fea9
   3a834:	4602db16 	.word	0x4602db16
   3a838:	481b4918 	.word	0x481b4918
   3a83c:	fed0f005 	.word	0xfed0f005
   3a840:	f855b980 	.word	0xf855b980
   3a844:	e7760024 	.word	0xe7760024
   3a848:	f7ea2009 	.word	0xf7ea2009
   3a84c:	f04ffc85 	.word	0xf04ffc85
   3a850:	e77630ff 	.word	0xe77630ff
   3a854:	46314602 	.word	0x46314602
   3a858:	f0054813 	.word	0xf0054813
   3a85c:	2800fec1 	.word	0x2800fec1
   3a860:	e7a7d0b5 	.word	0xe7a7d0b5
   3a864:	f0054811 	.word	0xf0054811
   3a868:	490cfe8d 	.word	0x490cfe8d
   3a86c:	480f4602 	.word	0x480f4602
   3a870:	feb6f005 	.word	0xfeb6f005
   3a874:	2008b948 	.word	0x2008b948
   3a878:	fc6ef7ea 	.word	0xfc6ef7ea
   3a87c:	0024f855 	.word	0x0024f855
   3a880:	2005e759 	.word	0x2005e759
   3a884:	fc68f7ea 	.word	0xfc68f7ea
   3a888:	2005e7a1 	.word	0x2005e7a1
   3a88c:	fc64f7ea 	.word	0xfc64f7ea
   3a890:	bf00e7d7 	.word	0xbf00e7d7
   3a894:	789a0000 	.word	0x789a0000
   3a898:	200260c0 	.word	0x200260c0
   3a89c:	20025fc0 	.word	0x20025fc0
   3a8a0:	0004ab98 	.word	0x0004ab98
   3a8a4:	0004abdc 	.word	0x0004abdc
   3a8a8:	00049bc4 	.word	0x00049bc4
   3a8ac:	0004ac34 	.word	0x0004ac34
   3a8b0:	0004aba4 	.word	0x0004aba4
   3a8b4:	20025fbc 	.word	0x20025fbc

0003a8b8 <pdn_interface_setopt>:
   3a8b8:	f240b510 	.word	0xf240b510
   3a8bc:	42a12402 	.word	0x42a12402
   3a8c0:	b153d10b 	.word	0xb153d10b
   3a8c4:	b1419902 	.word	0xb1419902
   3a8c8:	43814925 	.word	0x43814925
   3a8cc:	2009d00b 	.word	0x2009d00b
   3a8d0:	fc42f7ea 	.word	0xfc42f7ea
   3a8d4:	30fff04f 	.word	0x30fff04f
   3a8d8:	2016bd10 	.word	0x2016bd10
   3a8dc:	fc3cf7ea 	.word	0xfc3cf7ea
   3a8e0:	30fff04f 	.word	0x30fff04f
   3a8e4:	f020bd10 	.word	0xf020bd10
   3a8e8:	f42040f1 	.word	0xf42040f1
   3a8ec:	280910d0 	.word	0x280910d0
   3a8f0:	491cdced 	.word	0x491cdced
   3a8f4:	1020f851 	.word	0x1020f851
   3a8f8:	d0e82900 	.word	0xd0e82900
   3a8fc:	2c00688c 	.word	0x2c00688c
   3a900:	2800d0e5 	.word	0x2800d0e5
   3a904:	2a01dbe3 	.word	0x2a01dbe3
   3a908:	202dd001 	.word	0x202dd001
   3a90c:	688ae7e6 	.word	0x688ae7e6
   3a910:	688ab1fa 	.word	0x688ab1fa
   3a914:	d01c2a03 	.word	0xd01c2a03
   3a918:	2a04688a 	.word	0x2a04688a
   3a91c:	9a02d019 	.word	0x9a02d019
   3a920:	1e420890 	.word	0x1e420890
   3a924:	d8d82a01 	.word	0xd8d82a01
   3a928:	07929a02 	.word	0x07929a02
   3a92c:	681ad1d5 	.word	0x681ad1d5
   3a930:	d0102a02 	.word	0xd0102a02
   3a934:	d1d02a0a 	.word	0xd1d02a0a
   3a938:	28022202 	.word	0x28022202
   3a93c:	685bd106 	.word	0x685bd106
   3a940:	d00a2b02 	.word	0xd00a2b02
   3a944:	d1c82b0a 	.word	0xd1c82b0a
   3a948:	0202f042 	.word	0x0202f042
   3a94c:	2000670a 	.word	0x2000670a
   3a950:	200ee7c4 	.word	0x200ee7c4
   3a954:	2201e7c2 	.word	0x2201e7c2
   3a958:	f042e7ef 	.word	0xf042e7ef
   3a95c:	e7f50201 	.word	0xe7f50201
   3a960:	789a0000 	.word	0x789a0000
   3a964:	200260c0 	.word	0x200260c0

0003a968 <pdn_interface_getopt>:
   3a968:	43f0e92d 	.word	0x43f0e92d
   3a96c:	2402f240 	.word	0x2402f240
   3a970:	42a1b083 	.word	0x42a1b083
   3a974:	f0409d0a 	.word	0xf0409d0a
   3a978:	461e80a9 	.word	0x461e80a9
   3a97c:	f0002b00 	.word	0xf0002b00
   3a980:	2d0080a5 	.word	0x2d0080a5
   3a984:	80a2f000 	.word	0x80a2f000
   3a988:	43834b56 	.word	0x43834b56
   3a98c:	8084f040 	.word	0x8084f040
   3a990:	44f1f020 	.word	0x44f1f020
   3a994:	14d0f424 	.word	0x14d0f424
   3a998:	dc7d2c09 	.word	0xdc7d2c09
   3a99c:	f8534b52 	.word	0xf8534b52
   3a9a0:	2b003024 	.word	0x2b003024
   3a9a4:	6899d078 	.word	0x6899d078
   3a9a8:	d0752900 	.word	0xd0752900
   3a9ac:	db732c00 	.word	0xdb732c00
   3a9b0:	d00e2a02 	.word	0xd00e2a02
   3a9b4:	d0082a03 	.word	0xd0082a03
   3a9b8:	d0152a01 	.word	0xd0152a01
   3a9bc:	f7ea202d 	.word	0xf7ea202d
   3a9c0:	2000fbcb 	.word	0x2000fbcb
   3a9c4:	e8bdb003 	.word	0xe8bdb003
   3a9c8:	682b83f0 	.word	0x682b83f0
   3a9cc:	2016bb23 	.word	0x2016bb23
   3a9d0:	682ae7f5 	.word	0x682ae7f5
   3a9d4:	d0fa2a00 	.word	0xd0fa2a00
   3a9d8:	20002201 	.word	0x20002201
   3a9dc:	7033681b 	.word	0x7033681b
   3a9e0:	b003602a 	.word	0xb003602a
   3a9e4:	83f0e8bd 	.word	0x83f0e8bd
   3a9e8:	2a00689a 	.word	0x2a00689a
   3a9ec:	689ad052 	.word	0x689ad052
   3a9f0:	d04f2a04 	.word	0xd04f2a04
   3a9f4:	2a07682a 	.word	0x2a07682a
   3a9f8:	f012d9e9 	.word	0xf012d9e9
   3a9fc:	d1e60203 	.word	0xd1e60203
   3aa00:	07996f1b 	.word	0x07996f1b
   3aa04:	2104d45d 	.word	0x2104d45d
   3aa08:	d50207db 	.word	0xd50207db
   3aa0c:	50b32302 	.word	0x50b32302
   3aa10:	602a460a 	.word	0x602a460a
   3aa14:	e7d52000 	.word	0xe7d52000
   3aa18:	f44f4a34 	.word	0xf44f4a34
   3aa1c:	48347180 	.word	0x48347180
   3aa20:	80d8f8df 	.word	0x80d8f8df
   3aa24:	fbdef005 	.word	0xfbdef005
   3aa28:	f8d84831 	.word	0xf8d84831
   3aa2c:	27009000 	.word	0x27009000
   3aa30:	fda8f005 	.word	0xfda8f005
   3aa34:	4602463b 	.word	0x4602463b
   3aa38:	4648492d 	.word	0x4648492d
   3aa3c:	97009701 	.word	0x97009701
   3aa40:	fb0ef7f2 	.word	0xfb0ef7f2
   3aa44:	482a4681 	.word	0x482a4681
   3aa48:	fd9cf005 	.word	0xfd9cf005
   3aa4c:	d1434548 	.word	0xd1434548
   3aa50:	e9cd463b 	.word	0xe9cd463b
   3aa54:	f44f7700 	.word	0xf44f7700
   3aa58:	49257280 	.word	0x49257280
   3aa5c:	0000f8d8 	.word	0x0000f8d8
   3aa60:	fbe6f7f2 	.word	0xfbe6f7f2
   3aa64:	48234607 	.word	0x48234607
   3aa68:	fd8cf005 	.word	0xfd8cf005
   3aa6c:	db194287 	.word	0xdb194287
   3aa70:	491f4602 	.word	0x491f4602
   3aa74:	f005481f 	.word	0xf005481f
   3aa78:	4607fdb3 	.word	0x4607fdb3
   3aa7c:	4620b990 	.word	0x4620b990
   3aa80:	f7ff491b 	.word	0xf7ff491b
   3aa84:	2800fb35 	.word	0x2800fb35
   3aa88:	2301db99 	.word	0x2301db99
   3aa8c:	46387030 	.word	0x46387030
   3aa90:	e797602b 	.word	0xe797602b
   3aa94:	e792200e 	.word	0xe792200e
   3aa98:	f7ea2009 	.word	0xf7ea2009
   3aa9c:	f04ffb5d 	.word	0xf04ffb5d
   3aaa0:	e78f30ff 	.word	0xe78f30ff
   3aaa4:	f0054814 	.word	0xf0054814
   3aaa8:	4911fd6d 	.word	0x4911fd6d
   3aaac:	48124602 	.word	0x48124602
   3aab0:	fd96f005 	.word	0xfd96f005
   3aab4:	2008b980 	.word	0x2008b980
   3aab8:	fb4ef7ea 	.word	0xfb4ef7ea
   3aabc:	30fff04f 	.word	0x30fff04f
   3aac0:	220ae77d 	.word	0x220ae77d
   3aac4:	60322108 	.word	0x60322108
   3aac8:	e79d2204 	.word	0xe79d2204
   3aacc:	f7ea2016 	.word	0xf7ea2016
   3aad0:	f04ffb43 	.word	0xf04ffb43
   3aad4:	e77530ff 	.word	0xe77530ff
   3aad8:	f7ea2005 	.word	0xf7ea2005
   3aadc:	f04ffb3d 	.word	0xf04ffb3d
   3aae0:	e76c30ff 	.word	0xe76c30ff
   3aae4:	789a0000 	.word	0x789a0000
   3aae8:	200260c0 	.word	0x200260c0
   3aaec:	0004ac04 	.word	0x0004ac04
   3aaf0:	20025fc0 	.word	0x20025fc0
   3aaf4:	0004ac10 	.word	0x0004ac10
   3aaf8:	0004ac34 	.word	0x0004ac34
   3aafc:	20025fbc 	.word	0x20025fbc

0003ab00 <pdn_interface_pdn_id_get>:
   3ab00:	f0002900 	.word	0xf0002900
   3ab04:	e92d83b9 	.word	0xe92d83b9
   3ab08:	4ca343f0 	.word	0x4ca343f0
   3ab0c:	b0832802 	.word	0xb0832802
   3ab10:	6823460d 	.word	0x6823460d
   3ab14:	8094f000 	.word	0x8094f000
   3ab18:	d03f280a 	.word	0xd03f280a
   3ab1c:	689bb11b 	.word	0x689bb11b
   3ab20:	f0002b03 	.word	0xf0002b03
   3ab24:	68638127 	.word	0x68638127
   3ab28:	689bb11b 	.word	0x689bb11b
   3ab2c:	f0002b03 	.word	0xf0002b03
   3ab30:	68a38110 	.word	0x68a38110
   3ab34:	689bb11b 	.word	0x689bb11b
   3ab38:	f0002b03 	.word	0xf0002b03
   3ab3c:	68e380f9 	.word	0x68e380f9
   3ab40:	689bb11b 	.word	0x689bb11b
   3ab44:	f0002b03 	.word	0xf0002b03
   3ab48:	692380e2 	.word	0x692380e2
   3ab4c:	689bb11b 	.word	0x689bb11b
   3ab50:	f0002b03 	.word	0xf0002b03
   3ab54:	69638123 	.word	0x69638123
   3ab58:	689bb11b 	.word	0x689bb11b
   3ab5c:	f0002b03 	.word	0xf0002b03
   3ab60:	69a38161 	.word	0x69a38161
   3ab64:	689bb11b 	.word	0x689bb11b
   3ab68:	f0002b03 	.word	0xf0002b03
   3ab6c:	69e3814a 	.word	0x69e3814a
   3ab70:	689bb11b 	.word	0x689bb11b
   3ab74:	f0002b03 	.word	0xf0002b03
   3ab78:	6a238133 	.word	0x6a238133
   3ab7c:	689bb11b 	.word	0x689bb11b
   3ab80:	f0002b03 	.word	0xf0002b03
   3ab84:	6a63811c 	.word	0x6a63811c
   3ab88:	689bb11b 	.word	0x689bb11b
   3ab8c:	f0002b03 	.word	0xf0002b03
   3ab90:	f04f80ad 	.word	0xf04f80ad
   3ab94:	b00330ff 	.word	0xb00330ff
   3ab98:	83f0e8bd 	.word	0x83f0e8bd
   3ab9c:	689bb11b 	.word	0x689bb11b
   3aba0:	f0002b03 	.word	0xf0002b03
   3aba4:	68638335 	.word	0x68638335
   3aba8:	689bb11b 	.word	0x689bb11b
   3abac:	f0002b03 	.word	0xf0002b03
   3abb0:	68a382fd 	.word	0x68a382fd
   3abb4:	689bb11b 	.word	0x689bb11b
   3abb8:	f0002b03 	.word	0xf0002b03
   3abbc:	68e382d5 	.word	0x68e382d5
   3abc0:	689eb11b 	.word	0x689eb11b
   3abc4:	f0002e03 	.word	0xf0002e03
   3abc8:	692381f0 	.word	0x692381f0
   3abcc:	689bb11b 	.word	0x689bb11b
   3abd0:	f0002b03 	.word	0xf0002b03
   3abd4:	69638203 	.word	0x69638203
   3abd8:	689bb11b 	.word	0x689bb11b
   3abdc:	f0002b03 	.word	0xf0002b03
   3abe0:	69a38215 	.word	0x69a38215
   3abe4:	689bb11b 	.word	0x689bb11b
   3abe8:	f0002b03 	.word	0xf0002b03
   3abec:	69e38227 	.word	0x69e38227
   3abf0:	689bb11b 	.word	0x689bb11b
   3abf4:	f0002b03 	.word	0xf0002b03
   3abf8:	6a238239 	.word	0x6a238239
   3abfc:	689bb11b 	.word	0x689bb11b
   3ac00:	f0002b03 	.word	0xf0002b03
   3ac04:	6a63824d 	.word	0x6a63824d
   3ac08:	d0c22b00 	.word	0xd0c22b00
   3ac0c:	2b03689b 	.word	0x2b03689b
   3ac10:	4628d1bf 	.word	0x4628d1bf
   3ac14:	fcb6f005 	.word	0xfcb6f005
   3ac18:	6a604606 	.word	0x6a604606
   3ac1c:	f005300c 	.word	0xf005300c
   3ac20:	42b0fcb1 	.word	0x42b0fcb1
   3ac24:	6a61d1b5 	.word	0x6a61d1b5
   3ac28:	310c4628 	.word	0x310c4628
   3ac2c:	f9b6f7df 	.word	0xf9b6f7df
   3ac30:	d1ae2800 	.word	0xd1ae2800
   3ac34:	6f1a6a63 	.word	0x6f1a6a63
   3ac38:	d5aa0792 	.word	0xd5aa0792
   3ac3c:	e11a2609 	.word	0xe11a2609
   3ac40:	689bb11b 	.word	0x689bb11b
   3ac44:	f0002b03 	.word	0xf0002b03
   3ac48:	686382fd 	.word	0x686382fd
   3ac4c:	689bb11b 	.word	0x689bb11b
   3ac50:	f0002b03 	.word	0xf0002b03
   3ac54:	68a382c5 	.word	0x68a382c5
   3ac58:	689bb11b 	.word	0x689bb11b
   3ac5c:	f0002b03 	.word	0xf0002b03
   3ac60:	68e38269 	.word	0x68e38269
   3ac64:	689eb11b 	.word	0x689eb11b
   3ac68:	f0002e03 	.word	0xf0002e03
   3ac6c:	692380ec 	.word	0x692380ec
   3ac70:	689bb11b 	.word	0x689bb11b
   3ac74:	f0002b03 	.word	0xf0002b03
   3ac78:	6963814a 	.word	0x6963814a
   3ac7c:	689bb11b 	.word	0x689bb11b
   3ac80:	f0002b03 	.word	0xf0002b03
   3ac84:	69a3815e 	.word	0x69a3815e
   3ac88:	689bb11b 	.word	0x689bb11b
   3ac8c:	f0002b03 	.word	0xf0002b03
   3ac90:	69e38172 	.word	0x69e38172
   3ac94:	689bb11b 	.word	0x689bb11b
   3ac98:	f0002b03 	.word	0xf0002b03
   3ac9c:	6a23821b 	.word	0x6a23821b
   3aca0:	689bb11b 	.word	0x689bb11b
   3aca4:	f0002b03 	.word	0xf0002b03
   3aca8:	6a63822d 	.word	0x6a63822d
   3acac:	f43f2b00 	.word	0xf43f2b00
   3acb0:	689baf70 	.word	0x689baf70
   3acb4:	f47f2b03 	.word	0xf47f2b03
   3acb8:	4628af6c 	.word	0x4628af6c
   3acbc:	fc62f005 	.word	0xfc62f005
   3acc0:	6a604606 	.word	0x6a604606
   3acc4:	f005300c 	.word	0xf005300c
   3acc8:	4286fc5d 	.word	0x4286fc5d
   3accc:	af61f47f 	.word	0xaf61f47f
   3acd0:	46286a61 	.word	0x46286a61
   3acd4:	f7df310c 	.word	0xf7df310c
   3acd8:	2800f961 	.word	0x2800f961
   3acdc:	af59f47f 	.word	0xaf59f47f
   3ace0:	6f1a6a63 	.word	0x6f1a6a63
   3ace4:	f57f07d2 	.word	0xf57f07d2
   3ace8:	e7a7af54 	.word	0xe7a7af54
   3acec:	f0054628 	.word	0xf0054628
   3acf0:	4606fc49 	.word	0x4606fc49
   3acf4:	300c6a60 	.word	0x300c6a60
   3acf8:	fc44f005 	.word	0xfc44f005
   3acfc:	f47f42b0 	.word	0xf47f42b0
   3ad00:	6a61af48 	.word	0x6a61af48
   3ad04:	310c4628 	.word	0x310c4628
   3ad08:	f948f7df 	.word	0xf948f7df
   3ad0c:	4628e741 	.word	0x4628e741
   3ad10:	fc38f005 	.word	0xfc38f005
   3ad14:	68e04606 	.word	0x68e04606
   3ad18:	f005300c 	.word	0xf005300c
   3ad1c:	4286fc33 	.word	0x4286fc33
   3ad20:	af13f47f 	.word	0xaf13f47f
   3ad24:	462868e1 	.word	0x462868e1
   3ad28:	f7df310c 	.word	0xf7df310c
   3ad2c:	e70cf937 	.word	0xe70cf937
   3ad30:	f0054628 	.word	0xf0054628
   3ad34:	4606fc27 	.word	0x4606fc27
   3ad38:	300c68a0 	.word	0x300c68a0
   3ad3c:	fc22f005 	.word	0xfc22f005
   3ad40:	f47f4286 	.word	0xf47f4286
   3ad44:	68a1aefc 	.word	0x68a1aefc
   3ad48:	310c4628 	.word	0x310c4628
   3ad4c:	f926f7df 	.word	0xf926f7df
   3ad50:	4628e6f5 	.word	0x4628e6f5
   3ad54:	fc16f005 	.word	0xfc16f005
   3ad58:	68604606 	.word	0x68604606
   3ad5c:	f005300c 	.word	0xf005300c
   3ad60:	4286fc11 	.word	0x4286fc11
   3ad64:	aee5f47f 	.word	0xaee5f47f
   3ad68:	46286861 	.word	0x46286861
   3ad6c:	f7df310c 	.word	0xf7df310c
   3ad70:	e6def915 	.word	0xe6def915
   3ad74:	f0054608 	.word	0xf0054608
   3ad78:	4606fc05 	.word	0x4606fc05
   3ad7c:	300c6820 	.word	0x300c6820
   3ad80:	fc00f005 	.word	0xfc00f005
   3ad84:	f47f4286 	.word	0xf47f4286
   3ad88:	6821aece 	.word	0x6821aece
   3ad8c:	310c4628 	.word	0x310c4628
   3ad90:	f904f7df 	.word	0xf904f7df
   3ad94:	bf00e6c7 	.word	0xbf00e6c7
   3ad98:	200260c0 	.word	0x200260c0
   3ad9c:	f0054628 	.word	0xf0054628
   3ada0:	4606fbf1 	.word	0x4606fbf1
   3ada4:	300c6920 	.word	0x300c6920
   3ada8:	fbecf005 	.word	0xfbecf005
   3adac:	f47f4286 	.word	0xf47f4286
   3adb0:	6921aed2 	.word	0x6921aed2
   3adb4:	310c4628 	.word	0x310c4628
   3adb8:	f8f0f7df 	.word	0xf8f0f7df
   3adbc:	4628e6cb 	.word	0x4628e6cb
   3adc0:	fbe0f005 	.word	0xfbe0f005
   3adc4:	6a204606 	.word	0x6a204606
   3adc8:	f005300c 	.word	0xf005300c
   3adcc:	4286fbdb 	.word	0x4286fbdb
   3add0:	aed9f47f 	.word	0xaed9f47f
   3add4:	46286a21 	.word	0x46286a21
   3add8:	f7df310c 	.word	0xf7df310c
   3addc:	e6d2f8df 	.word	0xe6d2f8df
   3ade0:	f0054628 	.word	0xf0054628
   3ade4:	4606fbcf 	.word	0x4606fbcf
   3ade8:	300c69e0 	.word	0x300c69e0
   3adec:	fbcaf005 	.word	0xfbcaf005
   3adf0:	f47f4286 	.word	0xf47f4286
   3adf4:	69e1aec2 	.word	0x69e1aec2
   3adf8:	310c4628 	.word	0x310c4628
   3adfc:	f8cef7df 	.word	0xf8cef7df
   3ae00:	4628e6bb 	.word	0x4628e6bb
   3ae04:	fbbef005 	.word	0xfbbef005
   3ae08:	69a04606 	.word	0x69a04606
   3ae0c:	f005300c 	.word	0xf005300c
   3ae10:	4286fbb9 	.word	0x4286fbb9
   3ae14:	aeabf47f 	.word	0xaeabf47f
   3ae18:	462869a1 	.word	0x462869a1
   3ae1c:	f7df310c 	.word	0xf7df310c
   3ae20:	e6a4f8bd 	.word	0xe6a4f8bd
   3ae24:	f0054628 	.word	0xf0054628
   3ae28:	4606fbad 	.word	0x4606fbad
   3ae2c:	300c6960 	.word	0x300c6960
   3ae30:	fba8f005 	.word	0xfba8f005
   3ae34:	f47f4286 	.word	0xf47f4286
   3ae38:	6961ae94 	.word	0x6961ae94
   3ae3c:	310c4628 	.word	0x310c4628
   3ae40:	f8acf7df 	.word	0xf8acf7df
   3ae44:	4628e68d 	.word	0x4628e68d
   3ae48:	fb9cf005 	.word	0xfb9cf005
   3ae4c:	68e04607 	.word	0x68e04607
   3ae50:	f005300c 	.word	0xf005300c
   3ae54:	4287fb97 	.word	0x4287fb97
   3ae58:	af09f47f 	.word	0xaf09f47f
   3ae5c:	462868e1 	.word	0x462868e1
   3ae60:	f7df310c 	.word	0xf7df310c
   3ae64:	2800f89b 	.word	0x2800f89b
   3ae68:	af01f47f 	.word	0xaf01f47f
   3ae6c:	6f1a68e3 	.word	0x6f1a68e3
   3ae70:	f57f07d1 	.word	0xf57f07d1
   3ae74:	6858aefc 	.word	0x6858aefc
   3ae78:	f47f1c43 	.word	0xf47f1c43
   3ae7c:	4dc6ae8c 	.word	0x4dc6ae8c
   3ae80:	f44f4ac6 	.word	0xf44f4ac6
   3ae84:	46287180 	.word	0x46287180
   3ae88:	f9acf005 	.word	0xf9acf005
   3ae8c:	3026f854 	.word	0x3026f854
   3ae90:	7180f5c0 	.word	0x7180f5c0
   3ae94:	4ac2681b 	.word	0x4ac2681b
   3ae98:	f8df4428 	.word	0xf8df4428
   3ae9c:	f005830c 	.word	0xf005830c
   3aea0:	4628f9a1 	.word	0x4628f9a1
   3aea4:	9000f8d8 	.word	0x9000f8d8
   3aea8:	f0052700 	.word	0xf0052700
   3aeac:	4629fb6b 	.word	0x4629fb6b
   3aeb0:	463b4602 	.word	0x463b4602
   3aeb4:	97014648 	.word	0x97014648
   3aeb8:	f7f29700 	.word	0xf7f29700
   3aebc:	4681f8d1 	.word	0x4681f8d1
   3aec0:	f0054628 	.word	0xf0054628
   3aec4:	4548fb5f 	.word	0x4548fb5f
   3aec8:	81e9f040 	.word	0x81e9f040
   3aecc:	f44f463b 	.word	0xf44f463b
   3aed0:	e9cd7280 	.word	0xe9cd7280
   3aed4:	46297700 	.word	0x46297700
   3aed8:	0000f8d8 	.word	0x0000f8d8
   3aedc:	f9a8f7f2 	.word	0xf9a8f7f2
   3aee0:	48b04607 	.word	0x48b04607
   3aee4:	fb4ef005 	.word	0xfb4ef005
   3aee8:	46024287 	.word	0x46024287
   3aeec:	81c7f2c0 	.word	0x81c7f2c0
   3aef0:	48ac4629 	.word	0x48ac4629
   3aef4:	fb74f005 	.word	0xfb74f005
   3aef8:	f0402800 	.word	0xf0402800
   3aefc:	462981c0 	.word	0x462981c0
   3af00:	f7ff4630 	.word	0xf7ff4630
   3af04:	f854f92b 	.word	0xf854f92b
   3af08:	68583026 	.word	0x68583026
   3af0c:	4628e643 	.word	0x4628e643
   3af10:	fb38f005 	.word	0xfb38f005
   3af14:	69204606 	.word	0x69204606
   3af18:	f005300c 	.word	0xf005300c
   3af1c:	4286fb33 	.word	0x4286fb33
   3af20:	aeabf47f 	.word	0xaeabf47f
   3af24:	46286921 	.word	0x46286921
   3af28:	f7df310c 	.word	0xf7df310c
   3af2c:	2800f837 	.word	0x2800f837
   3af30:	aea3f47f 	.word	0xaea3f47f
   3af34:	6f1a6923 	.word	0x6f1a6923
   3af38:	f57f07d2 	.word	0xf57f07d2
   3af3c:	2604ae9e 	.word	0x2604ae9e
   3af40:	4628e799 	.word	0x4628e799
   3af44:	fb1ef005 	.word	0xfb1ef005
   3af48:	69604606 	.word	0x69604606
   3af4c:	f005300c 	.word	0xf005300c
   3af50:	4286fb19 	.word	0x4286fb19
   3af54:	ae97f47f 	.word	0xae97f47f
   3af58:	46286961 	.word	0x46286961
   3af5c:	f7df310c 	.word	0xf7df310c
   3af60:	2800f81d 	.word	0x2800f81d
   3af64:	ae8ff47f 	.word	0xae8ff47f
   3af68:	6f1a6963 	.word	0x6f1a6963
   3af6c:	f57f07d7 	.word	0xf57f07d7
   3af70:	2605ae8a 	.word	0x2605ae8a
   3af74:	4628e77f 	.word	0x4628e77f
   3af78:	fb04f005 	.word	0xfb04f005
   3af7c:	69a04606 	.word	0x69a04606
   3af80:	f005300c 	.word	0xf005300c
   3af84:	4286faff 	.word	0x4286faff
   3af88:	ae83f47f 	.word	0xae83f47f
   3af8c:	462869a1 	.word	0x462869a1
   3af90:	f7df310c 	.word	0xf7df310c
   3af94:	2800f803 	.word	0x2800f803
   3af98:	ae7bf47f 	.word	0xae7bf47f
   3af9c:	6f1a69a3 	.word	0x6f1a69a3
   3afa0:	f57f07d6 	.word	0xf57f07d6
   3afa4:	2606ae76 	.word	0x2606ae76
   3afa8:	4628e765 	.word	0x4628e765
   3afac:	faeaf005 	.word	0xfaeaf005
   3afb0:	68e04607 	.word	0x68e04607
   3afb4:	f005300c 	.word	0xf005300c
   3afb8:	4287fae5 	.word	0x4287fae5
   3afbc:	ae05f47f 	.word	0xae05f47f
   3afc0:	462868e1 	.word	0x462868e1
   3afc4:	f7de310c 	.word	0xf7de310c
   3afc8:	2800ffe9 	.word	0x2800ffe9
   3afcc:	adfdf47f 	.word	0xadfdf47f
   3afd0:	6f1a68e3 	.word	0x6f1a68e3
   3afd4:	f53f0791 	.word	0xf53f0791
   3afd8:	e5f6af4e 	.word	0xe5f6af4e
   3afdc:	f0054628 	.word	0xf0054628
   3afe0:	4606fad1 	.word	0x4606fad1
   3afe4:	300c6920 	.word	0x300c6920
   3afe8:	faccf005 	.word	0xfaccf005
   3afec:	f47f4286 	.word	0xf47f4286
   3aff0:	6921adf2 	.word	0x6921adf2
   3aff4:	310c4628 	.word	0x310c4628
   3aff8:	ffd0f7de 	.word	0xffd0f7de
   3affc:	f47f2800 	.word	0xf47f2800
   3b000:	6923adea 	.word	0x6923adea
   3b004:	07926f1a 	.word	0x07926f1a
   3b008:	e5e4d499 	.word	0xe5e4d499
   3b00c:	f0054628 	.word	0xf0054628
   3b010:	4606fab9 	.word	0x4606fab9
   3b014:	300c6960 	.word	0x300c6960
   3b018:	fab4f005 	.word	0xfab4f005
   3b01c:	f47f4286 	.word	0xf47f4286
   3b020:	6961ade0 	.word	0x6961ade0
   3b024:	310c4628 	.word	0x310c4628
   3b028:	ffb8f7de 	.word	0xffb8f7de
   3b02c:	f47f2800 	.word	0xf47f2800
   3b030:	6963add8 	.word	0x6963add8
   3b034:	07976f1a 	.word	0x07976f1a
   3b038:	e5d2d49b 	.word	0xe5d2d49b
   3b03c:	f0054628 	.word	0xf0054628
   3b040:	4606faa1 	.word	0x4606faa1
   3b044:	300c69a0 	.word	0x300c69a0
   3b048:	fa9cf005 	.word	0xfa9cf005
   3b04c:	f47f4286 	.word	0xf47f4286
   3b050:	69a1adce 	.word	0x69a1adce
   3b054:	310c4628 	.word	0x310c4628
   3b058:	ffa0f7de 	.word	0xffa0f7de
   3b05c:	f47f2800 	.word	0xf47f2800
   3b060:	69a3adc6 	.word	0x69a3adc6
   3b064:	07966f1a 	.word	0x07966f1a
   3b068:	e5c0d49d 	.word	0xe5c0d49d
   3b06c:	f0054628 	.word	0xf0054628
   3b070:	4606fa89 	.word	0x4606fa89
   3b074:	300c69e0 	.word	0x300c69e0
   3b078:	fa84f005 	.word	0xfa84f005
   3b07c:	f47f4286 	.word	0xf47f4286
   3b080:	69e1adbc 	.word	0x69e1adbc
   3b084:	310c4628 	.word	0x310c4628
   3b088:	ff88f7de 	.word	0xff88f7de
   3b08c:	f47f2800 	.word	0xf47f2800
   3b090:	69e3adb4 	.word	0x69e3adb4
   3b094:	07906f1a 	.word	0x07906f1a
   3b098:	adaff57f 	.word	0xadaff57f
   3b09c:	e6ea2607 	.word	0xe6ea2607
   3b0a0:	f0054628 	.word	0xf0054628
   3b0a4:	4606fa6f 	.word	0x4606fa6f
   3b0a8:	300c6a20 	.word	0x300c6a20
   3b0ac:	fa6af005 	.word	0xfa6af005
   3b0b0:	f47f4286 	.word	0xf47f4286
   3b0b4:	6a21ada8 	.word	0x6a21ada8
   3b0b8:	310c4628 	.word	0x310c4628
   3b0bc:	ff6ef7de 	.word	0xff6ef7de
   3b0c0:	f47f2800 	.word	0xf47f2800
   3b0c4:	6a23ada0 	.word	0x6a23ada0
   3b0c8:	07916f1a 	.word	0x07916f1a
   3b0cc:	ad9bf57f 	.word	0xad9bf57f
   3b0d0:	e6d02608 	.word	0xe6d02608
   3b0d4:	f0054628 	.word	0xf0054628
   3b0d8:	4606fa55 	.word	0x4606fa55
   3b0dc:	300c69e0 	.word	0x300c69e0
   3b0e0:	fa50f005 	.word	0xfa50f005
   3b0e4:	f47f4286 	.word	0xf47f4286
   3b0e8:	69e1adda 	.word	0x69e1adda
   3b0ec:	310c4628 	.word	0x310c4628
   3b0f0:	ff54f7de 	.word	0xff54f7de
   3b0f4:	f47f2800 	.word	0xf47f2800
   3b0f8:	69e3add2 	.word	0x69e3add2
   3b0fc:	07d06f1a 	.word	0x07d06f1a
   3b100:	e5ccd4cc 	.word	0xe5ccd4cc
   3b104:	f0054628 	.word	0xf0054628
   3b108:	4606fa3d 	.word	0x4606fa3d
   3b10c:	300c6a20 	.word	0x300c6a20
   3b110:	fa38f005 	.word	0xfa38f005
   3b114:	f47f4286 	.word	0xf47f4286
   3b118:	6a21adc8 	.word	0x6a21adc8
   3b11c:	310c4628 	.word	0x310c4628
   3b120:	ff3cf7de 	.word	0xff3cf7de
   3b124:	f47f2800 	.word	0xf47f2800
   3b128:	6a23adc0 	.word	0x6a23adc0
   3b12c:	07d16f1a 	.word	0x07d16f1a
   3b130:	e5bad4ce 	.word	0xe5bad4ce
   3b134:	f0054628 	.word	0xf0054628
   3b138:	4606fa25 	.word	0x4606fa25
   3b13c:	300c68a0 	.word	0x300c68a0
   3b140:	fa20f005 	.word	0xfa20f005
   3b144:	f47f4286 	.word	0xf47f4286
   3b148:	68a1ad8c 	.word	0x68a1ad8c
   3b14c:	310c4628 	.word	0x310c4628
   3b150:	ff24f7de 	.word	0xff24f7de
   3b154:	f47f2800 	.word	0xf47f2800
   3b158:	68a3ad84 	.word	0x68a3ad84
   3b15c:	07d06f1a 	.word	0x07d06f1a
   3b160:	ad7ff57f 	.word	0xad7ff57f
   3b164:	e6862602 	.word	0xe6862602
   3b168:	f0054628 	.word	0xf0054628
   3b16c:	4606fa0b 	.word	0x4606fa0b
   3b170:	300c68a0 	.word	0x300c68a0
   3b174:	fa06f005 	.word	0xfa06f005
   3b178:	f47f4286 	.word	0xf47f4286
   3b17c:	68a1ad20 	.word	0x68a1ad20
   3b180:	310c4628 	.word	0x310c4628
   3b184:	ff0af7de 	.word	0xff0af7de
   3b188:	f47f2800 	.word	0xf47f2800
   3b18c:	68a3ad18 	.word	0x68a3ad18
   3b190:	07906f1a 	.word	0x07906f1a
   3b194:	e512d4e6 	.word	0xe512d4e6
   3b198:	20025fc0 	.word	0x20025fc0
   3b19c:	0004abe0 	.word	0x0004abe0
   3b1a0:	0004abdc 	.word	0x0004abdc
   3b1a4:	0004abf0 	.word	0x0004abf0
   3b1a8:	20025fbc 	.word	0x20025fbc
   3b1ac:	f0054628 	.word	0xf0054628
   3b1b0:	4606f9e9 	.word	0x4606f9e9
   3b1b4:	300c6860 	.word	0x300c6860
   3b1b8:	f9e4f005 	.word	0xf9e4f005
   3b1bc:	f47f4286 	.word	0xf47f4286
   3b1c0:	6861acf8 	.word	0x6861acf8
   3b1c4:	310c4628 	.word	0x310c4628
   3b1c8:	fee8f7de 	.word	0xfee8f7de
   3b1cc:	f47f2800 	.word	0xf47f2800
   3b1d0:	6863acf0 	.word	0x6863acf0
   3b1d4:	07966f1a 	.word	0x07966f1a
   3b1d8:	acebf57f 	.word	0xacebf57f
   3b1dc:	e64a2601 	.word	0xe64a2601
   3b1e0:	f0054628 	.word	0xf0054628
   3b1e4:	4606f9cf 	.word	0x4606f9cf
   3b1e8:	300c6860 	.word	0x300c6860
   3b1ec:	f9caf005 	.word	0xf9caf005
   3b1f0:	f47f4286 	.word	0xf47f4286
   3b1f4:	6861ad30 	.word	0x6861ad30
   3b1f8:	310c4628 	.word	0x310c4628
   3b1fc:	fecef7de 	.word	0xfecef7de
   3b200:	f47f2800 	.word	0xf47f2800
   3b204:	6863ad28 	.word	0x6863ad28
   3b208:	07d66f1a 	.word	0x07d66f1a
   3b20c:	e522d4e6 	.word	0xe522d4e6
   3b210:	f0054608 	.word	0xf0054608
   3b214:	4606f9b7 	.word	0x4606f9b7
   3b218:	300c6820 	.word	0x300c6820
   3b21c:	f9b2f005 	.word	0xf9b2f005
   3b220:	f47f4286 	.word	0xf47f4286
   3b224:	6821acc0 	.word	0x6821acc0
   3b228:	310c4628 	.word	0x310c4628
   3b22c:	feb6f7de 	.word	0xfeb6f7de
   3b230:	28004606 	.word	0x28004606
   3b234:	acb7f47f 	.word	0xacb7f47f
   3b238:	6f1a6823 	.word	0x6f1a6823
   3b23c:	f53f0797 	.word	0xf53f0797
   3b240:	e4b0ae1a 	.word	0xe4b0ae1a
   3b244:	f0054608 	.word	0xf0054608
   3b248:	4606f99d 	.word	0x4606f99d
   3b24c:	300c6820 	.word	0x300c6820
   3b250:	f998f005 	.word	0xf998f005
   3b254:	f47f4286 	.word	0xf47f4286
   3b258:	6821acf8 	.word	0x6821acf8
   3b25c:	310c4628 	.word	0x310c4628
   3b260:	fe9cf7de 	.word	0xfe9cf7de
   3b264:	28004606 	.word	0x28004606
   3b268:	aceff47f 	.word	0xaceff47f
   3b26c:	6f1a6823 	.word	0x6f1a6823
   3b270:	f53f07d7 	.word	0xf53f07d7
   3b274:	e4e8ae00 	.word	0xe4e8ae00
   3b278:	30fff04f 	.word	0x30fff04f
   3b27c:	480b4770 	.word	0x480b4770
   3b280:	f980f005 	.word	0xf980f005
   3b284:	4602490a 	.word	0x4602490a
   3b288:	f0054808 	.word	0xf0054808
   3b28c:	b930f9a9 	.word	0xb930f9a9
   3b290:	f7e92008 	.word	0xf7e92008
   3b294:	f854ff61 	.word	0xf854ff61
   3b298:	68583026 	.word	0x68583026
   3b29c:	2005e47b 	.word	0x2005e47b
   3b2a0:	ff5af7e9 	.word	0xff5af7e9
   3b2a4:	3026f854 	.word	0x3026f854
   3b2a8:	e4746858 	.word	0xe4746858
   3b2ac:	0004ac34 	.word	0x0004ac34
   3b2b0:	20025fc0 	.word	0x20025fc0

0003b2b4 <bsd_platform_getaddrinfo>:
   3b2b4:	bdb0f7f7 	.word	0xbdb0f7f7

0003b2b8 <bsd_platform_freeaddrinfo>:
   3b2b8:	bea4f7f7 	.word	0xbea4f7f7

0003b2bc <bsd_platform_poll>:
   3b2bc:	43f0e92d 	.word	0x43f0e92d
   3b2c0:	72e2ea42 	.word	0x72e2ea42
   3b2c4:	9200b083 	.word	0x9200b083
   3b2c8:	d0482800 	.word	0xd0482800
   3b2cc:	2b071e4b 	.word	0x2b071e4b
   3b2d0:	4680d845 	.word	0x4680d845
   3b2d4:	24004605 	.word	0x24004605
   3b2d8:	07c1eb00 	.word	0x07c1eb00
   3b2dc:	682888ab 	.word	0x682888ab
   3b2e0:	0303f003 	.word	0x0303f003
   3b2e4:	f043a901 	.word	0xf043a901
   3b2e8:	f7f6061c 	.word	0xf7f6061c
   3b2ec:	9b01fc9d 	.word	0x9b01fc9d
   3b2f0:	40333508 	.word	0x40333508
   3b2f4:	3c02f825 	.word	0x3c02f825
   3b2f8:	3401b103 	.word	0x3401b103
   3b2fc:	d1ed42af 	.word	0xd1ed42af
   3b300:	4669bb9c 	.word	0x4669bb9c
   3b304:	f7e94640 	.word	0xf7e94640
   3b308:	4607fe97 	.word	0x4607fe97
   3b30c:	283cb108 	.word	0x283cb108
   3b310:	46c1d11d 	.word	0x46c1d11d
   3b314:	f8b92600 	.word	0xf8b92600
   3b318:	f8d93004 	.word	0xf8d93004
   3b31c:	f0030000 	.word	0xf0030000
   3b320:	a9010303 	.word	0xa9010303
   3b324:	041cf043 	.word	0x041cf043
   3b328:	fc7ef7f6 	.word	0xfc7ef7f6
   3b32c:	f1099b01 	.word	0xf1099b01
   3b330:	40230908 	.word	0x40230908
   3b334:	3c02f829 	.word	0x3c02f829
   3b338:	3601b103 	.word	0x3601b103
   3b33c:	d1ea454d 	.word	0xd1ea454d
   3b340:	2f00b90e 	.word	0x2f00b90e
   3b344:	4630d0dd 	.word	0x4630d0dd
   3b348:	e8bdb003 	.word	0xe8bdb003
   3b34c:	202383f0 	.word	0x202383f0
   3b350:	ff02f7e9 	.word	0xff02f7e9
   3b354:	30fff04f 	.word	0x30fff04f
   3b358:	e8bdb003 	.word	0xe8bdb003
   3b35c:	201683f0 	.word	0x201683f0
   3b360:	fefaf7e9 	.word	0xfefaf7e9
   3b364:	30fff04f 	.word	0x30fff04f
   3b368:	4620e7ee 	.word	0x4620e7ee
   3b36c:	bf00e7ec 	.word	0xbf00e7ec

0003b370 <bsd_platform_fcntl>:
   3b370:	4b06b508 	.word	0x4b06b508
   3b374:	d0034383 	.word	0xd0034383
   3b378:	4008e8bd 	.word	0x4008e8bd
   3b37c:	bd00f7f6 	.word	0xbd00f7f6
   3b380:	f7e9202d 	.word	0xf7e9202d
   3b384:	f04ffee9 	.word	0xf04ffee9
   3b388:	bd0830ff 	.word	0xbd0830ff
   3b38c:	49765432 	.word	0x49765432

0003b390 <stream_handler_init>:
   3b390:	4604b510 	.word	0x4604b510
   3b394:	f7fd200c 	.word	0xf7fd200c
   3b398:	60e0fed1 	.word	0x60e0fed1
   3b39c:	2300b128 	.word	0x2300b128
   3b3a0:	e8bd6123 	.word	0xe8bd6123
   3b3a4:	f7f84010 	.word	0xf7f84010
   3b3a8:	2004b9c7 	.word	0x2004b9c7
   3b3ac:	bf00bd10 	.word	0xbf00bd10

0003b3b0 <stream_handler_put>:
   3b3b0:	4606b570 	.word	0x4606b570
   3b3b4:	460d2014 	.word	0x460d2014
   3b3b8:	fec0f7fd 	.word	0xfec0f7fd
   3b3bc:	682bb178 	.word	0x682bb178
   3b3c0:	60434604 	.word	0x60434604
   3b3c4:	4601686b 	.word	0x4601686b
   3b3c8:	68eb6083 	.word	0x68eb6083
   3b3cc:	68ab60c3 	.word	0x68ab60c3
   3b3d0:	68f06103 	.word	0x68f06103
   3b3d4:	f9baf7f8 	.word	0xf9baf7f8
   3b3d8:	6868b920 	.word	0x6868b920
   3b3dc:	f04fbd70 	.word	0xf04fbd70
   3b3e0:	bd7030ff 	.word	0xbd7030ff
   3b3e4:	f7fd4620 	.word	0xf7fd4620
   3b3e8:	f04ffec7 	.word	0xf04ffec7
   3b3ec:	bd7030ff 	.word	0xbd7030ff

0003b3f0 <stream_handler_get>:
   3b3f0:	4ff0e92d 	.word	0x4ff0e92d
   3b3f4:	b0874682 	.word	0xb0874682
   3b3f8:	468968c0 	.word	0x468968c0
   3b3fc:	f7f84693 	.word	0xf7f84693
   3b400:	2800f9c5 	.word	0x2800f9c5
   3b404:	4605d072 	.word	0x4605d072
   3b408:	0008f8d9 	.word	0x0008f8d9
   3b40c:	692bb120 	.word	0x692bb120
   3b410:	68eab113 	.word	0x68eab113
   3b414:	d15c2a00 	.word	0xd15c2a00
   3b418:	f8c92300 	.word	0xf8c92300
   3b41c:	f8d9300c 	.word	0xf8d9300c
   3b420:	f8d92000 	.word	0xf8d92000
   3b424:	f8da8004 	.word	0xf8da8004
   3b428:	92011010 	.word	0x92011010
   3b42c:	0f00f1b8 	.word	0x0f00f1b8
   3b430:	f00bd05a 	.word	0xf00bd05a
   3b434:	24000308 	.word	0x24000308
   3b438:	e0109300 	.word	0xe0109300
   3b43c:	3010f8da 	.word	0x3010f8da
   3b440:	f8ca443b 	.word	0xf8ca443b
   3b444:	46283010 	.word	0x46283010
   3b448:	f9a8f7f8 	.word	0xf9a8f7f8
   3b44c:	4605443c 	.word	0x4605443c
   3b450:	d0382800 	.word	0xd0382800
   3b454:	d93645a0 	.word	0xd93645a0
   3b458:	f8d92100 	.word	0xf8d92100
   3b45c:	68ae2000 	.word	0x68ae2000
   3b460:	0b04eba8 	.word	0x0b04eba8
   3b464:	455e1a76 	.word	0x455e1a76
   3b468:	bf284637 	.word	0xbf284637
   3b46c:	b132465f 	.word	0xb132465f
   3b470:	9b016868 	.word	0x9b016868
   3b474:	463a4401 	.word	0x463a4401
   3b478:	f7de1918 	.word	0xf7de1918
   3b47c:	9b00fd19 	.word	0x9b00fd19
   3b480:	d1e02b00 	.word	0xd1e02b00
   3b484:	d8d9455e 	.word	0xd8d9455e
   3b488:	000cf8da 	.word	0x000cf8da
   3b48c:	f974f7f8 	.word	0xf974f7f8
   3b490:	b1704606 	.word	0xb1704606
   3b494:	2301e9d0 	.word	0x2301e9d0
   3b498:	0103e9d0 	.word	0x0103e9d0
   3b49c:	2302e9cd 	.word	0x2302e9cd
   3b4a0:	1004e9cd 	.word	0x1004e9cd
   3b4a4:	3101e9da 	.word	0x3101e9da
   3b4a8:	4798a802 	.word	0x4798a802
   3b4ac:	f7fd4630 	.word	0xf7fd4630
   3b4b0:	2300fe63 	.word	0x2300fe63
   3b4b4:	f8ca4628 	.word	0xf8ca4628
   3b4b8:	f7f83010 	.word	0xf7f83010
   3b4bc:	443cf96f 	.word	0x443cf96f
   3b4c0:	28004605 	.word	0x28004605
   3b4c4:	4620d1c6 	.word	0x4620d1c6
   3b4c8:	4004f8c9 	.word	0x4004f8c9
   3b4cc:	e8bdb007 	.word	0xe8bdb007
   3b4d0:	f8d98ff0 	.word	0xf8d98ff0
   3b4d4:	429a300c 	.word	0x429a300c
   3b4d8:	461abf28 	.word	0x461abf28
   3b4dc:	200cf8c9 	.word	0x200cf8c9
   3b4e0:	f7de6929 	.word	0xf7de6929
   3b4e4:	e79afce5 	.word	0xe79afce5
   3b4e8:	e7ec4644 	.word	0xe7ec4644
   3b4ec:	30fff04f 	.word	0x30fff04f
   3b4f0:	bf00e7ec 	.word	0xbf00e7ec

0003b4f4 <stream_handler_available>:
   3b4f4:	4604b510 	.word	0x4604b510
   3b4f8:	f7f868c0 	.word	0xf7f868c0
   3b4fc:	b150f947 	.word	0xb150f947
   3b500:	42646924 	.word	0x42646924
   3b504:	441c6883 	.word	0x441c6883
   3b508:	f948f7f8 	.word	0xf948f7f8
   3b50c:	d1f92800 	.word	0xd1f92800
   3b510:	70e4ea24 	.word	0x70e4ea24
   3b514:	f04fbd10 	.word	0xf04fbd10
   3b518:	bd1030ff 	.word	0xbd1030ff

0003b51c <stream_handler_flush>:
   3b51c:	4605b530 	.word	0x4605b530
   3b520:	b08568c0 	.word	0xb08568c0
   3b524:	e01ab9a8 	.word	0xe01ab9a8
   3b528:	f7f868e8 	.word	0xf7f868e8
   3b52c:	4604f925 	.word	0x4604f925
   3b530:	e9d0b170 	.word	0xe9d0b170
   3b534:	e9d40101 	.word	0xe9d40101
   3b538:	e9cd3203 	.word	0xe9cd3203
   3b53c:	e9cd0100 	.word	0xe9cd0100
   3b540:	e9d52302 	.word	0xe9d52302
   3b544:	46683101 	.word	0x46683101
   3b548:	46204798 	.word	0x46204798
   3b54c:	fe14f7fd 	.word	0xfe14f7fd
   3b550:	f7f868e8 	.word	0xf7f868e8
   3b554:	2800f921 	.word	0x2800f921
   3b558:	b005d1e6 	.word	0xb005d1e6
   3b55c:	2008bd30 	.word	0x2008bd30
   3b560:	bd30b005 	.word	0xbd30b005

0003b564 <stream_handler_free>:
   3b564:	4605b530 	.word	0x4605b530
   3b568:	b08568c0 	.word	0xb08568c0
   3b56c:	e01cb9a0 	.word	0xe01cb9a0
   3b570:	f902f7f8 	.word	0xf902f7f8
   3b574:	b1704604 	.word	0xb1704604
   3b578:	0101e9d0 	.word	0x0101e9d0
   3b57c:	3203e9d4 	.word	0x3203e9d4
   3b580:	0100e9cd 	.word	0x0100e9cd
   3b584:	2302e9cd 	.word	0x2302e9cd
   3b588:	3101e9d5 	.word	0x3101e9d5
   3b58c:	47984668 	.word	0x47984668
   3b590:	f7fd4620 	.word	0xf7fd4620
   3b594:	68e8fdf1 	.word	0x68e8fdf1
   3b598:	f8fef7f8 	.word	0xf8fef7f8
   3b59c:	68e84604 	.word	0x68e84604
   3b5a0:	d1e52c00 	.word	0xd1e52c00
   3b5a4:	fde8f7fd 	.word	0xfde8f7fd
   3b5a8:	b00560ec 	.word	0xb00560ec
   3b5ac:	bf00bd30 	.word	0xbf00bd30

0003b5b0 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   3b5b0:	4a07      	ldr	r2, [pc, #28]	; (3b5d0 <SystemInit+0x20>)
   3b5b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   3b5b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   3b5ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   3b5be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   3b5c2:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   3b5c6:	4b03      	ldr	r3, [pc, #12]	; (3b5d4 <SystemInit+0x24>)
   3b5c8:	4a03      	ldr	r2, [pc, #12]	; (3b5d8 <SystemInit+0x28>)
   3b5ca:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   3b5cc:	4770      	bx	lr
   3b5ce:	bf00      	nop
   3b5d0:	e000ed00 	.word	0xe000ed00
   3b5d4:	20031c18 	.word	0x20031c18
   3b5d8:	03d09000 	.word	0x03d09000

0003b5dc <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
__STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   3b5dc:	4a04      	ldr	r2, [pc, #16]	; (3b5f0 <nvmc_word_write+0x14>)
   3b5de:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   3b5e2:	07db      	lsls	r3, r3, #31
   3b5e4:	d5fb      	bpl.n	3b5de <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   3b5e6:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   3b5e8:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   3b5ec:	4770      	bx	lr
   3b5ee:	bf00      	nop
   3b5f0:	40039000 	.word	0x40039000

0003b5f4 <partial_word_create>:
{
   3b5f4:	b513      	push	{r0, r1, r4, lr}
    byte_shift = addr % NVMC_BYTES_IN_WORD;
   3b5f6:	f000 0003 	and.w	r0, r0, #3
    NRFX_ASSERT(bytes_count <= (NVMC_BYTES_IN_WORD - byte_shift));
   3b5fa:	f1c0 0304 	rsb	r3, r0, #4
   3b5fe:	4293      	cmp	r3, r2
   3b600:	d205      	bcs.n	3b60e <partial_word_create+0x1a>
   3b602:	4b0b      	ldr	r3, [pc, #44]	; (3b630 <partial_word_create+0x3c>)
   3b604:	4a0b      	ldr	r2, [pc, #44]	; (3b634 <partial_word_create+0x40>)
   3b606:	2192      	movs	r1, #146	; 0x92
   3b608:	480b      	ldr	r0, [pc, #44]	; (3b638 <partial_word_create+0x44>)
   3b60a:	f003 ffef 	bl	3f5ec <__assert_func>
    value32 = 0xFFFFFFFF;
   3b60e:	f04f 33ff 	mov.w	r3, #4294967295
   3b612:	ac02      	add	r4, sp, #8
   3b614:	f844 3d04 	str.w	r3, [r4, #-4]!
    for (uint32_t i = 0; i < bytes_count; i++)
   3b618:	2300      	movs	r3, #0
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
   3b61a:	4404      	add	r4, r0
    for (uint32_t i = 0; i < bytes_count; i++)
   3b61c:	4293      	cmp	r3, r2
   3b61e:	d102      	bne.n	3b626 <partial_word_create+0x32>
}
   3b620:	9801      	ldr	r0, [sp, #4]
   3b622:	b002      	add	sp, #8
   3b624:	bd10      	pop	{r4, pc}
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
   3b626:	5cc8      	ldrb	r0, [r1, r3]
   3b628:	54e0      	strb	r0, [r4, r3]
    for (uint32_t i = 0; i < bytes_count; i++)
   3b62a:	3301      	adds	r3, #1
   3b62c:	e7f6      	b.n	3b61c <partial_word_create+0x28>
   3b62e:	bf00      	nop
   3b630:	00050035 	.word	0x00050035
   3b634:	0004ff9a 	.word	0x0004ff9a
   3b638:	00050055 	.word	0x00050055

0003b63c <nrfx_nvmc_page_erase>:
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   3b63c:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   3b640:	b508      	push	{r3, lr}
    NRFX_ASSERT(addr < flash_total_size_get());
   3b642:	d305      	bcc.n	3b650 <nrfx_nvmc_page_erase+0x14>
   3b644:	4b0d      	ldr	r3, [pc, #52]	; (3b67c <nrfx_nvmc_page_erase+0x40>)
   3b646:	4a0e      	ldr	r2, [pc, #56]	; (3b680 <nrfx_nvmc_page_erase+0x44>)
   3b648:	21d1      	movs	r1, #209	; 0xd1
   3b64a:	480e      	ldr	r0, [pc, #56]	; (3b684 <nrfx_nvmc_page_erase+0x48>)
   3b64c:	f003 ffce 	bl	3f5ec <__assert_func>
    return !(addr % flash_page_size_get());
   3b650:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   3b654:	b97b      	cbnz	r3, 3b676 <nrfx_nvmc_page_erase+0x3a>

#if defined(NVMC_CONFIGNS_WEN_Msk)
__STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                 nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   3b656:	2202      	movs	r2, #2
   3b658:	4b0b      	ldr	r3, [pc, #44]	; (3b688 <nrfx_nvmc_page_erase+0x4c>)
   3b65a:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   3b65e:	f04f 32ff 	mov.w	r2, #4294967295
   3b662:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   3b664:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   3b668:	07d2      	lsls	r2, r2, #31
   3b66a:	d5fb      	bpl.n	3b664 <nrfx_nvmc_page_erase+0x28>
    p_reg->CONFIGNS = (uint32_t)mode;
   3b66c:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   3b66e:	4807      	ldr	r0, [pc, #28]	; (3b68c <nrfx_nvmc_page_erase+0x50>)
   3b670:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   3b674:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   3b676:	4806      	ldr	r0, [pc, #24]	; (3b690 <nrfx_nvmc_page_erase+0x54>)
   3b678:	e7fc      	b.n	3b674 <nrfx_nvmc_page_erase+0x38>
   3b67a:	bf00      	nop
   3b67c:	0004ffee 	.word	0x0004ffee
   3b680:	0004ffae 	.word	0x0004ffae
   3b684:	00050055 	.word	0x00050055
   3b688:	40039000 	.word	0x40039000
   3b68c:	0bad0000 	.word	0x0bad0000
   3b690:	0bad000a 	.word	0x0bad000a

0003b694 <nrfx_nvmc_word_write>:
    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, &value, 1));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   3b694:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   3b698:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(addr < flash_total_size_get());
   3b69a:	d306      	bcc.n	3b6aa <nrfx_nvmc_word_write+0x16>
   3b69c:	f240 1141 	movw	r1, #321	; 0x141
   3b6a0:	4b0a      	ldr	r3, [pc, #40]	; (3b6cc <nrfx_nvmc_word_write+0x38>)
   3b6a2:	4a0b      	ldr	r2, [pc, #44]	; (3b6d0 <nrfx_nvmc_word_write+0x3c>)
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   3b6a4:	480b      	ldr	r0, [pc, #44]	; (3b6d4 <nrfx_nvmc_word_write+0x40>)
   3b6a6:	f003 ffa1 	bl	3f5ec <__assert_func>
   3b6aa:	f010 0403 	ands.w	r4, r0, #3
   3b6ae:	d004      	beq.n	3b6ba <nrfx_nvmc_word_write+0x26>
   3b6b0:	4b09      	ldr	r3, [pc, #36]	; (3b6d8 <nrfx_nvmc_word_write+0x44>)
   3b6b2:	4a07      	ldr	r2, [pc, #28]	; (3b6d0 <nrfx_nvmc_word_write+0x3c>)
   3b6b4:	f44f 71a1 	mov.w	r1, #322	; 0x142
   3b6b8:	e7f4      	b.n	3b6a4 <nrfx_nvmc_word_write+0x10>
   3b6ba:	2301      	movs	r3, #1
   3b6bc:	4d07      	ldr	r5, [pc, #28]	; (3b6dc <nrfx_nvmc_word_write+0x48>)
   3b6be:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   3b6c2:	f7ff ff8b 	bl	3b5dc <nvmc_word_write>
   3b6c6:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   3b6ca:	bd38      	pop	{r3, r4, r5, pc}
   3b6cc:	0004ffee 	.word	0x0004ffee
   3b6d0:	0004ffc3 	.word	0x0004ffc3
   3b6d4:	00050055 	.word	0x00050055
   3b6d8:	0005000c 	.word	0x0005000c
   3b6dc:	40039000 	.word	0x40039000

0003b6e0 <nrfx_nvmc_bytes_write>:

void nrfx_nvmc_bytes_write(uint32_t addr, void const * src, uint32_t num_bytes)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   3b6e0:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   3b6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3b6e8:	4604      	mov	r4, r0
   3b6ea:	460e      	mov	r6, r1
   3b6ec:	4615      	mov	r5, r2
    NRFX_ASSERT(addr < flash_total_size_get());
   3b6ee:	d306      	bcc.n	3b6fe <nrfx_nvmc_bytes_write+0x1e>
   3b6f0:	4b20      	ldr	r3, [pc, #128]	; (3b774 <nrfx_nvmc_bytes_write+0x94>)
   3b6f2:	4a21      	ldr	r2, [pc, #132]	; (3b778 <nrfx_nvmc_bytes_write+0x98>)
   3b6f4:	f240 114d 	movw	r1, #333	; 0x14d
   3b6f8:	4820      	ldr	r0, [pc, #128]	; (3b77c <nrfx_nvmc_bytes_write+0x9c>)
   3b6fa:	f003 ff77 	bl	3f5ec <__assert_func>
   3b6fe:	2201      	movs	r2, #1
   3b700:	4b1f      	ldr	r3, [pc, #124]	; (3b780 <nrfx_nvmc_bytes_write+0xa0>)
   3b702:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nvmc_write_mode_set();

    uint8_t const * bytes_src = (uint8_t const *)src;

    uint32_t unaligned_bytes = addr % NVMC_BYTES_IN_WORD;
    if (unaligned_bytes != 0)
   3b706:	f010 0303 	ands.w	r3, r0, #3
   3b70a:	d010      	beq.n	3b72e <nrfx_nvmc_bytes_write+0x4e>
    {
        uint32_t leading_bytes = NVMC_BYTES_IN_WORD - unaligned_bytes;
   3b70c:	f1c3 0704 	rsb	r7, r3, #4
   3b710:	42af      	cmp	r7, r5
   3b712:	bf28      	it	cs
   3b714:	462f      	movcs	r7, r5
        if (leading_bytes > num_bytes)
        {
            leading_bytes = num_bytes;
        }

        nvmc_word_write(addr - unaligned_bytes,
   3b716:	463a      	mov	r2, r7
   3b718:	eba0 0803 	sub.w	r8, r0, r3
   3b71c:	f7ff ff6a 	bl	3b5f4 <partial_word_create>
   3b720:	4601      	mov	r1, r0
   3b722:	4640      	mov	r0, r8
   3b724:	f7ff ff5a 	bl	3b5dc <nvmc_word_write>
                        partial_word_create(addr, bytes_src, leading_bytes));
        num_bytes -= leading_bytes;
   3b728:	1bed      	subs	r5, r5, r7
        addr      += leading_bytes;
   3b72a:	443c      	add	r4, r7
        bytes_src += leading_bytes;
   3b72c:	443e      	add	r6, r7
        }
    }
    else
#endif
    {
        uint32_t word_count = num_bytes / NVMC_BYTES_IN_WORD;
   3b72e:	4637      	mov	r7, r6
   3b730:	f025 0803 	bic.w	r8, r5, #3
   3b734:	44b0      	add	r8, r6
   3b736:	eba4 0906 	sub.w	r9, r4, r6
    for (uint32_t i = 0; i < num_words; i++)
   3b73a:	45b8      	cmp	r8, r7
   3b73c:	d113      	bne.n	3b766 <nrfx_nvmc_bytes_write+0x86>
        addr += word_count * NVMC_BYTES_IN_WORD;
        bytes_src += word_count * NVMC_BYTES_IN_WORD;
    }

    uint32_t trailing_bytes = num_bytes % NVMC_BYTES_IN_WORD;
    if (trailing_bytes != 0)
   3b73e:	f015 0203 	ands.w	r2, r5, #3
   3b742:	d00a      	beq.n	3b75a <nrfx_nvmc_bytes_write+0x7a>
        addr += word_count * NVMC_BYTES_IN_WORD;
   3b744:	f025 0103 	bic.w	r1, r5, #3
   3b748:	440c      	add	r4, r1
    {
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
   3b74a:	4620      	mov	r0, r4
   3b74c:	4431      	add	r1, r6
   3b74e:	f7ff ff51 	bl	3b5f4 <partial_word_create>
   3b752:	4601      	mov	r1, r0
   3b754:	4620      	mov	r0, r4
   3b756:	f7ff ff41 	bl	3b5dc <nvmc_word_write>
   3b75a:	2200      	movs	r2, #0
   3b75c:	4b08      	ldr	r3, [pc, #32]	; (3b780 <nrfx_nvmc_bytes_write+0xa0>)
   3b75e:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    }

    nvmc_readonly_mode_set();
}
   3b762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3b766:	eb09 0007 	add.w	r0, r9, r7
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
   3b76a:	f857 1b04 	ldr.w	r1, [r7], #4
   3b76e:	f7ff ff35 	bl	3b5dc <nvmc_word_write>
   3b772:	e7e2      	b.n	3b73a <nrfx_nvmc_bytes_write+0x5a>
   3b774:	0004ffee 	.word	0x0004ffee
   3b778:	0004ffd8 	.word	0x0004ffd8
   3b77c:	00050055 	.word	0x00050055
   3b780:	40039000 	.word	0x40039000

0003b784 <nrf_gpio_pin_port_decode.isra.0.part.1>:
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   3b784:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   3b786:	4a03      	ldr	r2, [pc, #12]	; (3b794 <nrf_gpio_pin_port_decode.isra.0.part.1+0x10>)
   3b788:	4b03      	ldr	r3, [pc, #12]	; (3b798 <nrf_gpio_pin_port_decode.isra.0.part.1+0x14>)
   3b78a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   3b78e:	4803      	ldr	r0, [pc, #12]	; (3b79c <nrf_gpio_pin_port_decode.isra.0.part.1+0x18>)
   3b790:	f003 ff2c 	bl	3f5ec <__assert_func>
   3b794:	00050092 	.word	0x00050092
   3b798:	0004d1ce 	.word	0x0004d1ce
   3b79c:	0004d1dc 	.word	0x0004d1dc

0003b7a0 <nrfx_uarte_init>:
}

nrfx_err_t nrfx_uarte_init(nrfx_uarte_t const *        p_instance,
                           nrfx_uarte_config_t const * p_config,
                           nrfx_uarte_event_handler_t  event_handler)
{
   3b7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3b7a4:	4606      	mov	r6, r0
   3b7a6:	4691      	mov	r9, r2
    NRFX_ASSERT(p_config);
   3b7a8:	b929      	cbnz	r1, 3b7b6 <nrfx_uarte_init+0x16>
   3b7aa:	4b4a      	ldr	r3, [pc, #296]	; (3b8d4 <nrfx_uarte_init+0x134>)
   3b7ac:	4a4a      	ldr	r2, [pc, #296]	; (3b8d8 <nrfx_uarte_init+0x138>)
   3b7ae:	21c6      	movs	r1, #198	; 0xc6
   3b7b0:	484a      	ldr	r0, [pc, #296]	; (3b8dc <nrfx_uarte_init+0x13c>)
   3b7b2:	f003 ff1b 	bl	3f5ec <__assert_func>
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3b7b6:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   3b7b8:	2024      	movs	r0, #36	; 0x24
   3b7ba:	4d49      	ldr	r5, [pc, #292]	; (3b8e0 <nrfx_uarte_init+0x140>)
   3b7bc:	fb00 5004 	mla	r0, r0, r4, r5
   3b7c0:	f890 0020 	ldrb.w	r0, [r0, #32]
   3b7c4:	2800      	cmp	r0, #0
   3b7c6:	f040 8083 	bne.w	3b8d0 <nrfx_uarte_init+0x130>
    if (p_config->pseltxd != NRF_UARTE_PSEL_DISCONNECTED)
   3b7ca:	6808      	ldr	r0, [r1, #0]
   3b7cc:	1c42      	adds	r2, r0, #1
   3b7ce:	d00d      	beq.n	3b7ec <nrfx_uarte_init+0x4c>
   3b7d0:	281f      	cmp	r0, #31
   3b7d2:	d901      	bls.n	3b7d8 <nrfx_uarte_init+0x38>
   3b7d4:	f7ff ffd6 	bl	3b784 <nrf_gpio_pin_port_decode.isra.0.part.1>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3b7d8:	2301      	movs	r3, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   3b7da:	f04f 0c03 	mov.w	ip, #3
    p_reg->OUTSET = set_mask;
   3b7de:	4f41      	ldr	r7, [pc, #260]	; (3b8e4 <nrfx_uarte_init+0x144>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3b7e0:	4083      	lsls	r3, r0
    p_reg->OUTSET = set_mask;
   3b7e2:	60bb      	str	r3, [r7, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   3b7e4:	f100 0380 	add.w	r3, r0, #128	; 0x80
   3b7e8:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    if (p_config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED)
   3b7ec:	684f      	ldr	r7, [r1, #4]
   3b7ee:	1c7b      	adds	r3, r7, #1
   3b7f0:	d009      	beq.n	3b806 <nrfx_uarte_init+0x66>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   3b7f2:	2f1f      	cmp	r7, #31
   3b7f4:	d8ee      	bhi.n	3b7d4 <nrfx_uarte_init+0x34>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   3b7f6:	f04f 0e00 	mov.w	lr, #0
   3b7fa:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 3b8e4 <nrfx_uarte_init+0x144>
   3b7fe:	f107 0380 	add.w	r3, r7, #128	; 0x80
   3b802:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
    nrf_uarte_configure(p_instance->p_reg, p_config->parity, p_config->hwfc);
   3b806:	f891 e014 	ldrb.w	lr, [r1, #20]
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   3b80a:	f891 c015 	ldrb.w	ip, [r1, #21]
    nrf_uarte_baudrate_set(p_instance->p_reg, p_config->baudrate);
   3b80e:	6833      	ldr	r3, [r6, #0]
    p_reg->BAUDRATE = baudrate;
   3b810:	698a      	ldr	r2, [r1, #24]
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   3b812:	ea4e 0c0c 	orr.w	ip, lr, ip
    if (p_config->hwfc == NRF_UARTE_HWFC_ENABLED)
   3b816:	f1be 0f01 	cmp.w	lr, #1
    p_reg->BAUDRATE = baudrate;
   3b81a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   3b81e:	f8c3 c56c 	str.w	ip, [r3, #1388]	; 0x56c
    p_reg->PSEL.TXD = pseltxd;
   3b822:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   3b826:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
   3b82a:	d123      	bne.n	3b874 <nrfx_uarte_init+0xd4>
        if (p_config->pselcts != NRF_UARTE_PSEL_DISCONNECTED)
   3b82c:	688f      	ldr	r7, [r1, #8]
   3b82e:	1c78      	adds	r0, r7, #1
   3b830:	d009      	beq.n	3b846 <nrfx_uarte_init+0xa6>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   3b832:	2f1f      	cmp	r7, #31
   3b834:	d8ce      	bhi.n	3b7d4 <nrfx_uarte_init+0x34>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   3b836:	f04f 0e00 	mov.w	lr, #0
   3b83a:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 3b8e4 <nrfx_uarte_init+0x144>
   3b83e:	f107 0080 	add.w	r0, r7, #128	; 0x80
   3b842:	f84c e020 	str.w	lr, [ip, r0, lsl #2]
        if (p_config->pselrts != NRF_UARTE_PSEL_DISCONNECTED)
   3b846:	68c8      	ldr	r0, [r1, #12]
   3b848:	1c42      	adds	r2, r0, #1
   3b84a:	d00f      	beq.n	3b86c <nrfx_uarte_init+0xcc>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   3b84c:	281f      	cmp	r0, #31
   3b84e:	d8c1      	bhi.n	3b7d4 <nrfx_uarte_init+0x34>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3b850:	f04f 0c01 	mov.w	ip, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   3b854:	f04f 0803 	mov.w	r8, #3
    p_reg->OUTSET = set_mask;
   3b858:	f8df e088 	ldr.w	lr, [pc, #136]	; 3b8e4 <nrfx_uarte_init+0x144>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3b85c:	fa0c fc00 	lsl.w	ip, ip, r0
    p_reg->OUTSET = set_mask;
   3b860:	f8ce c008 	str.w	ip, [lr, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   3b864:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   3b868:	f84e 802c 	str.w	r8, [lr, ip, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   3b86c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   3b870:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    apply_config(p_instance, p_config);

    p_cb->handler   = event_handler;
   3b874:	2324      	movs	r3, #36	; 0x24
   3b876:	4363      	muls	r3, r4
    p_cb->p_context = p_config->p_context;
   3b878:	6909      	ldr	r1, [r1, #16]
    p_cb->handler   = event_handler;
   3b87a:	18e8      	adds	r0, r5, r3
   3b87c:	f8c0 9004 	str.w	r9, [r0, #4]
    p_cb->p_context = p_config->p_context;
   3b880:	50e9      	str	r1, [r5, r3]

    if (p_cb->handler)
   3b882:	f1b9 0f00 	cmp.w	r9, #0
   3b886:	d012      	beq.n	3b8ae <nrfx_uarte_init+0x10e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b888:	2300      	movs	r3, #0
    {
        interrupts_enable(p_instance, p_config->interrupt_priority);
   3b88a:	6830      	ldr	r0, [r6, #0]
   3b88c:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   3b890:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   3b894:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   3b898:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   3b89c:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
    p_reg->INTENSET = mask;
   3b8a0:	4b11      	ldr	r3, [pc, #68]	; (3b8e8 <nrfx_uarte_init+0x148>)
   3b8a2:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    NRFX_IRQ_ENABLE(nrfx_get_irq_number((void *)p_instance->p_reg));
   3b8a6:	f340 3007 	sbfx	r0, r0, #12, #8
   3b8aa:	f7e6 fe4f 	bl	2254c <z_arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   3b8ae:	2208      	movs	r2, #8
    }

    nrf_uarte_enable(p_instance->p_reg);
   3b8b0:	6833      	ldr	r3, [r6, #0]
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   3b8b2:	480e      	ldr	r0, [pc, #56]	; (3b8ec <nrfx_uarte_init+0x14c>)
   3b8b4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->rx_buffer_length           = 0;
   3b8b8:	2324      	movs	r3, #36	; 0x24
   3b8ba:	2200      	movs	r2, #0
   3b8bc:	fb03 5304 	mla	r3, r3, r4, r5
    p_cb->rx_secondary_buffer_length = 0;
   3b8c0:	e9c3 2206 	strd	r2, r2, [r3, #24]
    p_cb->tx_buffer_length           = 0;
   3b8c4:	615a      	str	r2, [r3, #20]
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
   3b8c6:	2201      	movs	r2, #1
   3b8c8:	f883 2020 	strb.w	r2, [r3, #32]
}
   3b8cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return err_code;
   3b8d0:	4807      	ldr	r0, [pc, #28]	; (3b8f0 <nrfx_uarte_init+0x150>)
   3b8d2:	e7fb      	b.n	3b8cc <nrfx_uarte_init+0x12c>
   3b8d4:	000500c9 	.word	0x000500c9
   3b8d8:	000500ab 	.word	0x000500ab
   3b8dc:	000500d2 	.word	0x000500d2
   3b8e0:	200260e8 	.word	0x200260e8
   3b8e4:	40842500 	.word	0x40842500
   3b8e8:	00420310 	.word	0x00420310
   3b8ec:	0bad0000 	.word	0x0bad0000
   3b8f0:	0bad0005 	.word	0x0bad0005

0003b8f4 <nrfx_uarte_tx>:
}

nrfx_err_t nrfx_uarte_tx(nrfx_uarte_t const * p_instance,
                         uint8_t const *      p_data,
                         size_t               length)
{
   3b8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   3b8f6:	2324      	movs	r3, #36	; 0x24
   3b8f8:	4c2a      	ldr	r4, [pc, #168]	; (3b9a4 <nrfx_uarte_tx+0xb0>)
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3b8fa:	7905      	ldrb	r5, [r0, #4]
   3b8fc:	4627      	mov	r7, r4
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   3b8fe:	fb03 4305 	mla	r3, r3, r5, r4
   3b902:	f893 6020 	ldrb.w	r6, [r3, #32]
   3b906:	2e01      	cmp	r6, #1
   3b908:	d006      	beq.n	3b918 <nrfx_uarte_tx+0x24>
   3b90a:	f44f 7192 	mov.w	r1, #292	; 0x124
   3b90e:	4b26      	ldr	r3, [pc, #152]	; (3b9a8 <nrfx_uarte_tx+0xb4>)
   3b910:	4a26      	ldr	r2, [pc, #152]	; (3b9ac <nrfx_uarte_tx+0xb8>)
    NRFX_ASSERT(p_data);
   3b912:	4827      	ldr	r0, [pc, #156]	; (3b9b0 <nrfx_uarte_tx+0xbc>)
   3b914:	f003 fe6a 	bl	3f5ec <__assert_func>
   3b918:	b921      	cbnz	r1, 3b924 <nrfx_uarte_tx+0x30>
   3b91a:	4b26      	ldr	r3, [pc, #152]	; (3b9b4 <nrfx_uarte_tx+0xc0>)
   3b91c:	4a23      	ldr	r2, [pc, #140]	; (3b9ac <nrfx_uarte_tx+0xb8>)
   3b91e:	f240 1125 	movw	r1, #293	; 0x125
   3b922:	e7f6      	b.n	3b912 <nrfx_uarte_tx+0x1e>
    NRFX_ASSERT(length > 0);
   3b924:	b922      	cbnz	r2, 3b930 <nrfx_uarte_tx+0x3c>
   3b926:	4b24      	ldr	r3, [pc, #144]	; (3b9b8 <nrfx_uarte_tx+0xc4>)
   3b928:	4a20      	ldr	r2, [pc, #128]	; (3b9ac <nrfx_uarte_tx+0xb8>)
   3b92a:	f44f 7193 	mov.w	r1, #294	; 0x126
   3b92e:	e7f0      	b.n	3b912 <nrfx_uarte_tx+0x1e>
    NRFX_ASSERT(UARTE_LENGTH_VALIDATE(p_instance->drv_inst_idx, length));
   3b930:	b915      	cbnz	r5, 3b938 <nrfx_uarte_tx+0x44>
   3b932:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   3b936:	d304      	bcc.n	3b942 <nrfx_uarte_tx+0x4e>
   3b938:	4b20      	ldr	r3, [pc, #128]	; (3b9bc <nrfx_uarte_tx+0xc8>)
   3b93a:	4a1c      	ldr	r2, [pc, #112]	; (3b9ac <nrfx_uarte_tx+0xb8>)
   3b93c:	f240 1127 	movw	r1, #295	; 0x127
   3b940:	e7e7      	b.n	3b912 <nrfx_uarte_tx+0x1e>

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   3b942:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000

    nrfx_err_t err_code;

    // EasyDMA requires that transfer buffers are placed in DataRAM,
    // signal error if the are not.
    if (!nrfx_is_in_ram(p_data))
   3b946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   3b94a:	d125      	bne.n	3b998 <nrfx_uarte_tx+0xa4>
    return err_code;
}

bool nrfx_uarte_tx_in_progress(nrfx_uarte_t const * p_instance)
{
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   3b94c:	6965      	ldr	r5, [r4, #20]
    if (nrfx_uarte_tx_in_progress(p_instance))
   3b94e:	bb2d      	cbnz	r5, 3b99c <nrfx_uarte_tx+0xa8>
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDTX);
   3b950:	6803      	ldr	r3, [r0, #0]
    p_cb->tx_buffer_length = length;
   3b952:	6162      	str	r2, [r4, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b954:	f8c3 5120 	str.w	r5, [r3, #288]	; 0x120
   3b958:	f8c3 5158 	str.w	r5, [r3, #344]	; 0x158
    nrf_uarte_tx_buffer_set(p_instance->p_reg, p_cb->p_tx_buffer, p_cb->tx_buffer_length);
   3b95c:	6962      	ldr	r2, [r4, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3b95e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3b962:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    if (p_cb->handler == NULL)
   3b966:	6862      	ldr	r2, [r4, #4]
    p_cb->p_tx_buffer      = p_data;
   3b968:	60a1      	str	r1, [r4, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b96a:	609e      	str	r6, [r3, #8]
    if (p_cb->handler == NULL)
   3b96c:	b9c2      	cbnz	r2, 3b9a0 <nrfx_uarte_tx+0xac>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b96e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   3b972:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
        while ((!endtx) && (!txstopped));
   3b976:	b919      	cbnz	r1, 3b980 <nrfx_uarte_tx+0x8c>
   3b978:	2a00      	cmp	r2, #0
   3b97a:	d0f8      	beq.n	3b96e <nrfx_uarte_tx+0x7a>
            err_code = NRFX_ERROR_FORBIDDEN;
   3b97c:	4810      	ldr	r0, [pc, #64]	; (3b9c0 <nrfx_uarte_tx+0xcc>)
   3b97e:	e008      	b.n	3b992 <nrfx_uarte_tx+0x9e>
        if (txstopped)
   3b980:	2a00      	cmp	r2, #0
   3b982:	d1fb      	bne.n	3b97c <nrfx_uarte_tx+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b984:	2201      	movs	r2, #1
   3b986:	60da      	str	r2, [r3, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b988:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
            while (!nrf_uarte_event_check(p_instance->p_reg, NRF_UARTE_EVENT_TXSTOPPED))
   3b98c:	2a00      	cmp	r2, #0
   3b98e:	d0fb      	beq.n	3b988 <nrfx_uarte_tx+0x94>
    err_code = NRFX_SUCCESS;
   3b990:	480c      	ldr	r0, [pc, #48]	; (3b9c4 <nrfx_uarte_tx+0xd0>)
        p_cb->tx_buffer_length = 0;
   3b992:	2300      	movs	r3, #0
   3b994:	617b      	str	r3, [r7, #20]
}
   3b996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   3b998:	480b      	ldr	r0, [pc, #44]	; (3b9c8 <nrfx_uarte_tx+0xd4>)
   3b99a:	e7fc      	b.n	3b996 <nrfx_uarte_tx+0xa2>
        return err_code;
   3b99c:	480b      	ldr	r0, [pc, #44]	; (3b9cc <nrfx_uarte_tx+0xd8>)
   3b99e:	e7fa      	b.n	3b996 <nrfx_uarte_tx+0xa2>
    err_code = NRFX_SUCCESS;
   3b9a0:	4808      	ldr	r0, [pc, #32]	; (3b9c4 <nrfx_uarte_tx+0xd0>)
   3b9a2:	e7f8      	b.n	3b996 <nrfx_uarte_tx+0xa2>
   3b9a4:	200260e8 	.word	0x200260e8
   3b9a8:	00050110 	.word	0x00050110
   3b9ac:	000500bb 	.word	0x000500bb
   3b9b0:	000500d2 	.word	0x000500d2
   3b9b4:	0005013a 	.word	0x0005013a
   3b9b8:	00050141 	.word	0x00050141
   3b9bc:	0005014c 	.word	0x0005014c
   3b9c0:	0bad0008 	.word	0x0bad0008
   3b9c4:	0bad0000 	.word	0x0bad0000
   3b9c8:	0bad000a 	.word	0x0bad000a
   3b9cc:	0bad000b 	.word	0x0bad000b

0003b9d0 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   3b9d0:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   3b9d2:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   3b9d4:	4b08      	ldr	r3, [pc, #32]	; (3b9f8 <z_sys_device_do_config_level+0x28>)
   3b9d6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   3b9da:	3001      	adds	r0, #1
   3b9dc:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   3b9e0:	42a5      	cmp	r5, r4
   3b9e2:	d800      	bhi.n	3b9e6 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   3b9e4:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   3b9e6:	6823      	ldr	r3, [r4, #0]
   3b9e8:	4620      	mov	r0, r4
   3b9ea:	685b      	ldr	r3, [r3, #4]
   3b9ec:	4798      	blx	r3
		if (retval != 0) {
   3b9ee:	b100      	cbz	r0, 3b9f2 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   3b9f0:	6066      	str	r6, [r4, #4]
								info++) {
   3b9f2:	340c      	adds	r4, #12
   3b9f4:	e7f4      	b.n	3b9e0 <z_sys_device_do_config_level+0x10>
   3b9f6:	bf00      	nop
   3b9f8:	0004ac48 	.word	0x0004ac48

0003b9fc <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   3b9fc:	4b10      	ldr	r3, [pc, #64]	; (3ba40 <z_impl_device_get_binding+0x44>)
{
   3b9fe:	b570      	push	{r4, r5, r6, lr}
   3ba00:	4605      	mov	r5, r0
   3ba02:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   3ba04:	4c0f      	ldr	r4, [pc, #60]	; (3ba44 <z_impl_device_get_binding+0x48>)
   3ba06:	429c      	cmp	r4, r3
   3ba08:	d104      	bne.n	3ba14 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   3ba0a:	4c0e      	ldr	r4, [pc, #56]	; (3ba44 <z_impl_device_get_binding+0x48>)
   3ba0c:	42b4      	cmp	r4, r6
   3ba0e:	d109      	bne.n	3ba24 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   3ba10:	2400      	movs	r4, #0
   3ba12:	e012      	b.n	3ba3a <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   3ba14:	6862      	ldr	r2, [r4, #4]
   3ba16:	b11a      	cbz	r2, 3ba20 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   3ba18:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   3ba1a:	6812      	ldr	r2, [r2, #0]
   3ba1c:	42aa      	cmp	r2, r5
   3ba1e:	d00c      	beq.n	3ba3a <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   3ba20:	340c      	adds	r4, #12
   3ba22:	e7f0      	b.n	3ba06 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   3ba24:	6863      	ldr	r3, [r4, #4]
   3ba26:	b90b      	cbnz	r3, 3ba2c <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   3ba28:	340c      	adds	r4, #12
   3ba2a:	e7ef      	b.n	3ba0c <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   3ba2c:	6823      	ldr	r3, [r4, #0]
   3ba2e:	4628      	mov	r0, r5
   3ba30:	6819      	ldr	r1, [r3, #0]
   3ba32:	f7de fab3 	bl	19f9c <strcmp>
   3ba36:	2800      	cmp	r0, #0
   3ba38:	d1f6      	bne.n	3ba28 <z_impl_device_get_binding+0x2c>
}
   3ba3a:	4620      	mov	r0, r4
   3ba3c:	bd70      	pop	{r4, r5, r6, pc}
   3ba3e:	bf00      	nop
   3ba40:	200322c0 	.word	0x200322c0
   3ba44:	200321ac 	.word	0x200321ac

0003ba48 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   3ba48:	4b01      	ldr	r3, [pc, #4]	; (3ba50 <z_impl_z_errno+0x8>)
   3ba4a:	6898      	ldr	r0, [r3, #8]
}
   3ba4c:	3054      	adds	r0, #84	; 0x54
   3ba4e:	4770      	bx	lr
   3ba50:	2002a2dc 	.word	0x2002a2dc

0003ba54 <z_fatal_error>:
	z_arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   3ba54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ba58:	4605      	mov	r5, r0
   3ba5a:	460f      	mov	r7, r1
	return z_impl_k_current_get();
   3ba5c:	f002 f842 	bl	3dae4 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s", reason, reason_to_str(reason));
   3ba60:	2301      	movs	r3, #1
   3ba62:	4606      	mov	r6, r0
   3ba64:	f04f 0000 	mov.w	r0, #0
   3ba68:	4c2d      	ldr	r4, [pc, #180]	; (3bb20 <z_fatal_error+0xcc>)
   3ba6a:	f363 0002 	bfi	r0, r3, #0, #3
   3ba6e:	4b2d      	ldr	r3, [pc, #180]	; (3bb24 <z_fatal_error+0xd0>)
   3ba70:	2d04      	cmp	r5, #4
   3ba72:	eba4 0403 	sub.w	r4, r4, r3
   3ba76:	bf98      	it	ls
   3ba78:	4b2b      	ldrls	r3, [pc, #172]	; (3bb28 <z_fatal_error+0xd4>)
   3ba7a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   3ba7e:	f36f 00c5 	bfc	r0, #3, #3
   3ba82:	bf94      	ite	ls
   3ba84:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   3ba88:	4b28      	ldrhi	r3, [pc, #160]	; (3bb2c <z_fatal_error+0xd8>)
   3ba8a:	f364 108f 	bfi	r0, r4, #6, #10
   3ba8e:	462a      	mov	r2, r5
   3ba90:	4927      	ldr	r1, [pc, #156]	; (3bb30 <z_fatal_error+0xdc>)
   3ba92:	f00a fe06 	bl	466a2 <log_string_sync>
	 * if (k_is_in_isr()) {
	 *     LOG_ERR("Fault during interrupt handling\n");
	 * }
	 */

	LOG_ERR("Current thread: %p (%s)", thread,
   3ba96:	f04f 0800 	mov.w	r8, #0
   3ba9a:	2301      	movs	r3, #1
   3ba9c:	f363 0802 	bfi	r8, r3, #0, #3
   3baa0:	f36f 08c5 	bfc	r8, #3, #3
	const char *thread_name = k_thread_name_get(thread);
   3baa4:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   3baa6:	f364 188f 	bfi	r8, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   3baaa:	f00d f835 	bl	48b18 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   3baae:	2800      	cmp	r0, #0
   3bab0:	d034      	beq.n	3bb1c <z_fatal_error+0xc8>
   3bab2:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   3bab4:	4b1f      	ldr	r3, [pc, #124]	; (3bb34 <z_fatal_error+0xe0>)
   3bab6:	2a00      	cmp	r2, #0
   3bab8:	bf08      	it	eq
   3baba:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   3babc:	f00a fe03 	bl	466c6 <log_strdup>
   3bac0:	4632      	mov	r2, r6
   3bac2:	4603      	mov	r3, r0
   3bac4:	491c      	ldr	r1, [pc, #112]	; (3bb38 <z_fatal_error+0xe4>)
   3bac6:	4640      	mov	r0, r8
   3bac8:	f00a fdeb 	bl	466a2 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   3bacc:	4639      	mov	r1, r7
   3bace:	4628      	mov	r0, r5
   3bad0:	f7e3 fdd2 	bl	1f678 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   3bad4:	2d04      	cmp	r5, #4
   3bad6:	d10c      	bne.n	3baf2 <z_fatal_error+0x9e>
   3bad8:	4918      	ldr	r1, [pc, #96]	; (3bb3c <z_fatal_error+0xe8>)
   3bada:	2373      	movs	r3, #115	; 0x73
   3badc:	4a18      	ldr	r2, [pc, #96]	; (3bb40 <z_fatal_error+0xec>)
   3bade:	4819      	ldr	r0, [pc, #100]	; (3bb44 <z_fatal_error+0xf0>)
   3bae0:	f00a fdbc 	bl	4665c <printk>
   3bae4:	4818      	ldr	r0, [pc, #96]	; (3bb48 <z_fatal_error+0xf4>)
   3bae6:	f00a fdb9 	bl	4665c <printk>
   3baea:	2173      	movs	r1, #115	; 0x73
   3baec:	4814      	ldr	r0, [pc, #80]	; (3bb40 <z_fatal_error+0xec>)
   3baee:	f00a fdc2 	bl	46676 <assert_post_action>
			 "Attempted to recover from a kernel panic condition");
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
   3baf2:	f002 f91b 	bl	3dd2c <k_is_in_isr>
   3baf6:	b160      	cbz	r0, 3bb12 <z_fatal_error+0xbe>
   3baf8:	4914      	ldr	r1, [pc, #80]	; (3bb4c <z_fatal_error+0xf8>)
   3bafa:	2376      	movs	r3, #118	; 0x76
   3bafc:	4a10      	ldr	r2, [pc, #64]	; (3bb40 <z_fatal_error+0xec>)
   3bafe:	4811      	ldr	r0, [pc, #68]	; (3bb44 <z_fatal_error+0xf0>)
   3bb00:	f00a fdac 	bl	4665c <printk>
   3bb04:	4812      	ldr	r0, [pc, #72]	; (3bb50 <z_fatal_error+0xfc>)
   3bb06:	f00a fda9 	bl	4665c <printk>
   3bb0a:	2176      	movs	r1, #118	; 0x76
   3bb0c:	480c      	ldr	r0, [pc, #48]	; (3bb40 <z_fatal_error+0xec>)
   3bb0e:	f00a fdb2 	bl	46676 <assert_post_action>
	z_impl_k_thread_abort(thread);
   3bb12:	4630      	mov	r0, r6
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
   3bb14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3bb18:	f7e7 b9b4 	b.w	22e84 <z_impl_k_thread_abort>
		thread_name = "unknown";
   3bb1c:	4805      	ldr	r0, [pc, #20]	; (3bb34 <z_fatal_error+0xe0>)
   3bb1e:	e7cd      	b.n	3babc <z_fatal_error+0x68>
   3bb20:	000490f0 	.word	0x000490f0
   3bb24:	00049018 	.word	0x00049018
   3bb28:	0004ac60 	.word	0x0004ac60
   3bb2c:	00050211 	.word	0x00050211
   3bb30:	00050227 	.word	0x00050227
   3bb34:	0005021f 	.word	0x0005021f
   3bb38:	00050245 	.word	0x00050245
   3bb3c:	00050280 	.word	0x00050280
   3bb40:	0005025d 	.word	0x0005025d
   3bb44:	0004b5bf 	.word	0x0004b5bf
   3bb48:	0005029d 	.word	0x0005029d
   3bb4c:	000502d2 	.word	0x000502d2
   3bb50:	000502e1 	.word	0x000502e1

0003bb54 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   3bb54:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   3bb56:	4d0b      	ldr	r5, [pc, #44]	; (3bb84 <idle+0x30>)
	__asm__ volatile(
   3bb58:	f04f 0220 	mov.w	r2, #32
   3bb5c:	f3ef 8311 	mrs	r3, BASEPRI
   3bb60:	f382 8811 	msr	BASEPRI, r2
   3bb64:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   3bb68:	f002 fd6e 	bl	3e648 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   3bb6c:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   3bb6e:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   3bb70:	2802      	cmp	r0, #2
   3bb72:	bfd8      	it	le
   3bb74:	4608      	movle	r0, r1
   3bb76:	f002 fdad 	bl	3e6d4 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   3bb7a:	622c      	str	r4, [r5, #32]
	z_arch_cpu_idle();
   3bb7c:	f7e6 fc90 	bl	224a0 <z_arch_cpu_idle>
   3bb80:	e7ea      	b.n	3bb58 <idle+0x4>
   3bb82:	bf00      	nop
   3bb84:	2002a2dc 	.word	0x2002a2dc

0003bb88 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   3bb88:	4802      	ldr	r0, [pc, #8]	; (3bb94 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   3bb8a:	4a03      	ldr	r2, [pc, #12]	; (3bb98 <z_bss_zero+0x10>)
   3bb8c:	2100      	movs	r1, #0
   3bb8e:	1a12      	subs	r2, r2, r0
   3bb90:	f004 b8dc 	b.w	3fd4c <memset>
   3bb94:	20020000 	.word	0x20020000
   3bb98:	2002c4f0 	.word	0x2002c4f0

0003bb9c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   3bb9c:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3bb9e:	4806      	ldr	r0, [pc, #24]	; (3bbb8 <z_data_copy+0x1c>)
   3bba0:	4a06      	ldr	r2, [pc, #24]	; (3bbbc <z_data_copy+0x20>)
   3bba2:	4907      	ldr	r1, [pc, #28]	; (3bbc0 <z_data_copy+0x24>)
   3bba4:	1a12      	subs	r2, r2, r0
   3bba6:	f7de f983 	bl	19eb0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   3bbaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3bbae:	4a05      	ldr	r2, [pc, #20]	; (3bbc4 <z_data_copy+0x28>)
   3bbb0:	4905      	ldr	r1, [pc, #20]	; (3bbc8 <z_data_copy+0x2c>)
   3bbb2:	4806      	ldr	r0, [pc, #24]	; (3bbcc <z_data_copy+0x30>)
   3bbb4:	f7de b97c 	b.w	19eb0 <memcpy>
   3bbb8:	20031178 	.word	0x20031178
   3bbbc:	200323fc 	.word	0x200323fc
   3bbc0:	00050a5c 	.word	0x00050a5c
   3bbc4:	00000000 	.word	0x00000000
   3bbc8:	00050a58 	.word	0x00050a58
   3bbcc:	20020000 	.word	0x20020000

0003bbd0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   3bbd0:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   3bbd2:	2002      	movs	r0, #2
   3bbd4:	f7ff fefc 	bl	3b9d0 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   3bbd8:	4807      	ldr	r0, [pc, #28]	; (3bbf8 <bg_thread_main+0x28>)
   3bbda:	f00a fd3f 	bl	4665c <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   3bbde:	2003      	movs	r0, #3
   3bbe0:	f7ff fef6 	bl	3b9d0 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   3bbe4:	f002 f9a4 	bl	3df30 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   3bbe8:	f7e4 f8fe 	bl	1fde8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   3bbec:	4a03      	ldr	r2, [pc, #12]	; (3bbfc <bg_thread_main+0x2c>)
   3bbee:	7b13      	ldrb	r3, [r2, #12]
   3bbf0:	f023 0301 	bic.w	r3, r3, #1
   3bbf4:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   3bbf6:	bd08      	pop	{r3, pc}
   3bbf8:	00050312 	.word	0x00050312
   3bbfc:	200261bc 	.word	0x200261bc

0003bc00 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   3bc00:	b580      	push	{r7, lr}
   3bc02:	b0b2      	sub	sp, #200	; 0xc8
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   3bc04:	f7e5 fb02 	bl	2120c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   3bc08:	4b36      	ldr	r3, [pc, #216]	; (3bce4 <z_cstart+0xe4>)
   3bc0a:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   3bc0e:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   3bc12:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   3bc16:	2400      	movs	r4, #0
   3bc18:	23e0      	movs	r3, #224	; 0xe0
   3bc1a:	4d33      	ldr	r5, [pc, #204]	; (3bce8 <z_cstart+0xe8>)

	/* perform any architecture-specific initialization */
	z_arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   3bc1c:	2701      	movs	r7, #1
   3bc1e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   3bc22:	77ec      	strb	r4, [r5, #31]
   3bc24:	762c      	strb	r4, [r5, #24]
   3bc26:	766c      	strb	r4, [r5, #25]
   3bc28:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   3bc2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   3bc2c:	4e2f      	ldr	r6, [pc, #188]	; (3bcec <z_cstart+0xec>)
   3bc2e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   3bc32:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void z_arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   3bc34:	f7e7 f8fc 	bl	22e30 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   3bc38:	f7e6 fc2c 	bl	22494 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   3bc3c:	f04f 33ff 	mov.w	r3, #4294967295
   3bc40:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   3bc42:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   3bc44:	ab06      	add	r3, sp, #24
   3bc46:	22b0      	movs	r2, #176	; 0xb0
   3bc48:	4621      	mov	r1, r4
   3bc4a:	4618      	mov	r0, r3
   3bc4c:	f004 f87e 	bl	3fd4c <memset>
	_current = &dummy_thread;
   3bc50:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   3bc52:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   3bc54:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   3bc58:	f7ff feba 	bl	3b9d0 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   3bc5c:	4638      	mov	r0, r7
   3bc5e:	f7ff feb7 	bl	3b9d0 <z_sys_device_do_config_level>
	z_sched_init();
   3bc62:	f001 fddf 	bl	3d824 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   3bc66:	4b22      	ldr	r3, [pc, #136]	; (3bcf0 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   3bc68:	4d22      	ldr	r5, [pc, #136]	; (3bcf4 <z_cstart+0xf4>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
   3bc6a:	e9cd 7304 	strd	r7, r3, [sp, #16]
   3bc6e:	2307      	movs	r3, #7
   3bc70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   3bc74:	e9cd 4302 	strd	r4, r3, [sp, #8]
   3bc78:	e9cd 4400 	strd	r4, r4, [sp]
   3bc7c:	4b1e      	ldr	r3, [pc, #120]	; (3bcf8 <z_cstart+0xf8>)
   3bc7e:	491f      	ldr	r1, [pc, #124]	; (3bcfc <z_cstart+0xfc>)
   3bc80:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   3bc82:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   3bc84:	f002 f862 	bl	3dd4c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3bc88:	7b6b      	ldrb	r3, [r5, #13]
   3bc8a:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3bc8e:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3bc92:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3bc94:	d104      	bne.n	3bca0 <z_cstart+0xa0>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   3bc96:	69ab      	ldr	r3, [r5, #24]
   3bc98:	b913      	cbnz	r3, 3bca0 <z_cstart+0xa0>
		z_add_thread_to_ready_q(thread);
   3bc9a:	4628      	mov	r0, r5
   3bc9c:	f001 f9c6 	bl	3d02c <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   3bca0:	4b17      	ldr	r3, [pc, #92]	; (3bd00 <z_cstart+0x100>)
   3bca2:	2201      	movs	r2, #1
   3bca4:	9305      	str	r3, [sp, #20]
   3bca6:	230f      	movs	r3, #15
   3bca8:	e9cd 3203 	strd	r3, r2, [sp, #12]
   3bcac:	2300      	movs	r3, #0
   3bcae:	4d15      	ldr	r5, [pc, #84]	; (3bd04 <z_cstart+0x104>)
   3bcb0:	e9cd 3301 	strd	r3, r3, [sp, #4]
   3bcb4:	9300      	str	r3, [sp, #0]
   3bcb6:	f44f 72a0 	mov.w	r2, #320	; 0x140
   3bcba:	4b13      	ldr	r3, [pc, #76]	; (3bd08 <z_cstart+0x108>)
   3bcbc:	4913      	ldr	r1, [pc, #76]	; (3bd0c <z_cstart+0x10c>)
   3bcbe:	4628      	mov	r0, r5
   3bcc0:	f002 f844 	bl	3dd4c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3bcc4:	7b6b      	ldrb	r3, [r5, #13]
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   3bcc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   3bcca:	f023 0304 	bic.w	r3, r3, #4
   3bcce:	736b      	strb	r3, [r5, #13]
	list->head = (sys_dnode_t *)list;
   3bcd0:	4b0f      	ldr	r3, [pc, #60]	; (3bd10 <z_cstart+0x110>)
   3bcd2:	490a      	ldr	r1, [pc, #40]	; (3bcfc <z_cstart+0xfc>)
	list->tail = (sys_dnode_t *)list;
   3bcd4:	e9c6 3306 	strd	r3, r3, [r6, #24]
   3bcd8:	4806      	ldr	r0, [pc, #24]	; (3bcf4 <z_cstart+0xf4>)
   3bcda:	4b07      	ldr	r3, [pc, #28]	; (3bcf8 <z_cstart+0xf8>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   3bcdc:	60f5      	str	r5, [r6, #12]
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   3bcde:	f7e6 fcd7 	bl	22690 <z_arch_switch_to_main_thread>
   3bce2:	bf00      	nop
   3bce4:	2002ec30 	.word	0x2002ec30
   3bce8:	e000ed00 	.word	0xe000ed00
   3bcec:	2002a2dc 	.word	0x2002a2dc
   3bcf0:	00050347 	.word	0x00050347
   3bcf4:	200261bc 	.word	0x200261bc
   3bcf8:	0003bbd1 	.word	0x0003bbd1
   3bcfc:	2002caf0 	.word	0x2002caf0
   3bd00:	0005034c 	.word	0x0005034c
   3bd04:	2002610c 	.word	0x2002610c
   3bd08:	0003bb55 	.word	0x0003bb55
   3bd0c:	2002eaf0 	.word	0x2002eaf0
   3bd10:	2002a2f4 	.word	0x2002a2f4

0003bd14 <create_free_list>:
{
	u32_t j;
	char *p;

	/* blocks must be word aligned */
	__ASSERT(((slab->block_size | (uintptr_t)slab->buffer)
   3bd14:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   3bd18:	4313      	orrs	r3, r2
   3bd1a:	079b      	lsls	r3, r3, #30
{
   3bd1c:	b510      	push	{r4, lr}
   3bd1e:	4604      	mov	r4, r0
	__ASSERT(((slab->block_size | (uintptr_t)slab->buffer)
   3bd20:	d00d      	beq.n	3bd3e <create_free_list+0x2a>
   3bd22:	2327      	movs	r3, #39	; 0x27
   3bd24:	4a0d      	ldr	r2, [pc, #52]	; (3bd5c <create_free_list+0x48>)
   3bd26:	490e      	ldr	r1, [pc, #56]	; (3bd60 <create_free_list+0x4c>)
   3bd28:	480e      	ldr	r0, [pc, #56]	; (3bd64 <create_free_list+0x50>)
   3bd2a:	f00a fc97 	bl	4665c <printk>
   3bd2e:	4621      	mov	r1, r4
   3bd30:	480d      	ldr	r0, [pc, #52]	; (3bd68 <create_free_list+0x54>)
   3bd32:	f00a fc93 	bl	4665c <printk>
   3bd36:	2127      	movs	r1, #39	; 0x27
   3bd38:	4808      	ldr	r0, [pc, #32]	; (3bd5c <create_free_list+0x48>)
   3bd3a:	f00a fc9c 	bl	46676 <assert_post_action>
					& (sizeof(void *) - 1)) == 0,
		 "slab at %p not word aligned", slab);

	slab->free_list = NULL;
   3bd3e:	2300      	movs	r3, #0
	p = slab->buffer;
   3bd40:	6922      	ldr	r2, [r4, #16]

	for (j = 0U; j < slab->num_blocks; j++) {
   3bd42:	68a1      	ldr	r1, [r4, #8]
	slab->free_list = NULL;
   3bd44:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3bd46:	4299      	cmp	r1, r3
   3bd48:	d100      	bne.n	3bd4c <create_free_list+0x38>
		*(char **)p = slab->free_list;
		slab->free_list = p;
		p += slab->block_size;
	}
}
   3bd4a:	bd10      	pop	{r4, pc}
		*(char **)p = slab->free_list;
   3bd4c:	6960      	ldr	r0, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3bd4e:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   3bd50:	6010      	str	r0, [r2, #0]
		p += slab->block_size;
   3bd52:	68e0      	ldr	r0, [r4, #12]
		slab->free_list = p;
   3bd54:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   3bd56:	4402      	add	r2, r0
   3bd58:	e7f5      	b.n	3bd46 <create_free_list+0x32>
   3bd5a:	bf00      	nop
   3bd5c:	00050351 	.word	0x00050351
   3bd60:	00050377 	.word	0x00050377
   3bd64:	0004b5bf 	.word	0x0004b5bf
   3bd68:	000503c2 	.word	0x000503c2

0003bd6c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   3bd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3bd6e:	4d0e      	ldr	r5, [pc, #56]	; (3bda8 <init_mem_slab_module+0x3c>)
   3bd70:	4c0e      	ldr	r4, [pc, #56]	; (3bdac <init_mem_slab_module+0x40>)
   3bd72:	462f      	mov	r7, r5
   3bd74:	4e0e      	ldr	r6, [pc, #56]	; (3bdb0 <init_mem_slab_module+0x44>)
   3bd76:	42ac      	cmp	r4, r5
   3bd78:	d90c      	bls.n	3bd94 <init_mem_slab_module+0x28>
   3bd7a:	490e      	ldr	r1, [pc, #56]	; (3bdb4 <init_mem_slab_module+0x48>)
   3bd7c:	233e      	movs	r3, #62	; 0x3e
   3bd7e:	4632      	mov	r2, r6
   3bd80:	480d      	ldr	r0, [pc, #52]	; (3bdb8 <init_mem_slab_module+0x4c>)
   3bd82:	f00a fc6b 	bl	4665c <printk>
   3bd86:	480d      	ldr	r0, [pc, #52]	; (3bdbc <init_mem_slab_module+0x50>)
   3bd88:	f00a fc68 	bl	4665c <printk>
   3bd8c:	213e      	movs	r1, #62	; 0x3e
   3bd8e:	4630      	mov	r0, r6
   3bd90:	f00a fc71 	bl	46676 <assert_post_action>
   3bd94:	42bc      	cmp	r4, r7
   3bd96:	d301      	bcc.n	3bd9c <init_mem_slab_module+0x30>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   3bd98:	2000      	movs	r0, #0
   3bd9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		create_free_list(slab);
   3bd9c:	4620      	mov	r0, r4
   3bd9e:	f7ff ffb9 	bl	3bd14 <create_free_list>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3bda2:	341c      	adds	r4, #28
   3bda4:	e7e7      	b.n	3bd76 <init_mem_slab_module+0xa>
   3bda6:	bf00      	nop
   3bda8:	200322dc 	.word	0x200322dc
   3bdac:	200322c0 	.word	0x200322c0
   3bdb0:	00050351 	.word	0x00050351
   3bdb4:	000503e0 	.word	0x000503e0
   3bdb8:	0004b5bf 	.word	0x0004b5bf
   3bdbc:	000503fd 	.word	0x000503fd

0003bdc0 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   3bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3bdc2:	4604      	mov	r4, r0
   3bdc4:	460d      	mov	r5, r1
   3bdc6:	4616      	mov	r6, r2
   3bdc8:	f04f 0320 	mov.w	r3, #32
   3bdcc:	f3ef 8711 	mrs	r7, BASEPRI
   3bdd0:	f383 8811 	msr	BASEPRI, r3
   3bdd4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3bdd8:	4823      	ldr	r0, [pc, #140]	; (3be68 <k_mem_slab_alloc+0xa8>)
   3bdda:	f001 ffd1 	bl	3dd80 <z_spin_lock_valid>
   3bdde:	b960      	cbnz	r0, 3bdfa <k_mem_slab_alloc+0x3a>
   3bde0:	4922      	ldr	r1, [pc, #136]	; (3be6c <k_mem_slab_alloc+0xac>)
   3bde2:	235f      	movs	r3, #95	; 0x5f
   3bde4:	4a22      	ldr	r2, [pc, #136]	; (3be70 <k_mem_slab_alloc+0xb0>)
   3bde6:	4823      	ldr	r0, [pc, #140]	; (3be74 <k_mem_slab_alloc+0xb4>)
   3bde8:	f00a fc38 	bl	4665c <printk>
   3bdec:	4822      	ldr	r0, [pc, #136]	; (3be78 <k_mem_slab_alloc+0xb8>)
   3bdee:	f00a fc35 	bl	4665c <printk>
   3bdf2:	215f      	movs	r1, #95	; 0x5f
   3bdf4:	481e      	ldr	r0, [pc, #120]	; (3be70 <k_mem_slab_alloc+0xb0>)
   3bdf6:	f00a fc3e 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3bdfa:	481b      	ldr	r0, [pc, #108]	; (3be68 <k_mem_slab_alloc+0xa8>)
   3bdfc:	f001 ffde 	bl	3ddbc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   3be00:	6963      	ldr	r3, [r4, #20]
   3be02:	b1eb      	cbz	r3, 3be40 <k_mem_slab_alloc+0x80>
		/* take a free block */
		*mem = slab->free_list;
   3be04:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   3be06:	6963      	ldr	r3, [r4, #20]
   3be08:	681b      	ldr	r3, [r3, #0]
   3be0a:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   3be0c:	69a3      	ldr	r3, [r4, #24]
   3be0e:	3301      	adds	r3, #1
   3be10:	61a3      	str	r3, [r4, #24]
		result = 0;
   3be12:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3be14:	4814      	ldr	r0, [pc, #80]	; (3be68 <k_mem_slab_alloc+0xa8>)
   3be16:	f001 ffc1 	bl	3dd9c <z_spin_unlock_valid>
   3be1a:	b960      	cbnz	r0, 3be36 <k_mem_slab_alloc+0x76>
   3be1c:	4917      	ldr	r1, [pc, #92]	; (3be7c <k_mem_slab_alloc+0xbc>)
   3be1e:	2372      	movs	r3, #114	; 0x72
   3be20:	4a13      	ldr	r2, [pc, #76]	; (3be70 <k_mem_slab_alloc+0xb0>)
   3be22:	4814      	ldr	r0, [pc, #80]	; (3be74 <k_mem_slab_alloc+0xb4>)
   3be24:	f00a fc1a 	bl	4665c <printk>
   3be28:	4815      	ldr	r0, [pc, #84]	; (3be80 <k_mem_slab_alloc+0xc0>)
   3be2a:	f00a fc17 	bl	4665c <printk>
   3be2e:	2172      	movs	r1, #114	; 0x72
   3be30:	480f      	ldr	r0, [pc, #60]	; (3be70 <k_mem_slab_alloc+0xb0>)
   3be32:	f00a fc20 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3be36:	f387 8811 	msr	BASEPRI, r7
   3be3a:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   3be3e:	e010      	b.n	3be62 <k_mem_slab_alloc+0xa2>
	} else if (timeout == K_NO_WAIT) {
   3be40:	b91e      	cbnz	r6, 3be4a <k_mem_slab_alloc+0x8a>
		*mem = NULL;
   3be42:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   3be44:	f06f 040b 	mvn.w	r4, #11
   3be48:	e7e4      	b.n	3be14 <k_mem_slab_alloc+0x54>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   3be4a:	4622      	mov	r2, r4
   3be4c:	4633      	mov	r3, r6
   3be4e:	4639      	mov	r1, r7
   3be50:	4805      	ldr	r0, [pc, #20]	; (3be68 <k_mem_slab_alloc+0xa8>)
   3be52:	f001 fb9f 	bl	3d594 <z_pend_curr>
		if (result == 0) {
   3be56:	4604      	mov	r4, r0
   3be58:	b918      	cbnz	r0, 3be62 <k_mem_slab_alloc+0xa2>
			*mem = _current->base.swap_data;
   3be5a:	4b0a      	ldr	r3, [pc, #40]	; (3be84 <k_mem_slab_alloc+0xc4>)
   3be5c:	689b      	ldr	r3, [r3, #8]
   3be5e:	695b      	ldr	r3, [r3, #20]
   3be60:	602b      	str	r3, [r5, #0]
}
   3be62:	4620      	mov	r0, r4
   3be64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3be66:	bf00      	nop
   3be68:	2002626c 	.word	0x2002626c
   3be6c:	0004bff2 	.word	0x0004bff2
   3be70:	0004bfcb 	.word	0x0004bfcb
   3be74:	0004b5bf 	.word	0x0004b5bf
   3be78:	0004c007 	.word	0x0004c007
   3be7c:	0004c01c 	.word	0x0004c01c
   3be80:	0004c033 	.word	0x0004c033
   3be84:	2002a2dc 	.word	0x2002a2dc

0003be88 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   3be88:	b570      	push	{r4, r5, r6, lr}
   3be8a:	4604      	mov	r4, r0
   3be8c:	460d      	mov	r5, r1
	__asm__ volatile(
   3be8e:	f04f 0320 	mov.w	r3, #32
   3be92:	f3ef 8611 	mrs	r6, BASEPRI
   3be96:	f383 8811 	msr	BASEPRI, r3
   3be9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3be9e:	4823      	ldr	r0, [pc, #140]	; (3bf2c <k_mem_slab_free+0xa4>)
   3bea0:	f001 ff6e 	bl	3dd80 <z_spin_lock_valid>
   3bea4:	b960      	cbnz	r0, 3bec0 <k_mem_slab_free+0x38>
   3bea6:	4922      	ldr	r1, [pc, #136]	; (3bf30 <k_mem_slab_free+0xa8>)
   3bea8:	235f      	movs	r3, #95	; 0x5f
   3beaa:	4a22      	ldr	r2, [pc, #136]	; (3bf34 <k_mem_slab_free+0xac>)
   3beac:	4822      	ldr	r0, [pc, #136]	; (3bf38 <k_mem_slab_free+0xb0>)
   3beae:	f00a fbd5 	bl	4665c <printk>
   3beb2:	4822      	ldr	r0, [pc, #136]	; (3bf3c <k_mem_slab_free+0xb4>)
   3beb4:	f00a fbd2 	bl	4665c <printk>
   3beb8:	215f      	movs	r1, #95	; 0x5f
   3beba:	481e      	ldr	r0, [pc, #120]	; (3bf34 <k_mem_slab_free+0xac>)
   3bebc:	f00a fbdb 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3bec0:	481a      	ldr	r0, [pc, #104]	; (3bf2c <k_mem_slab_free+0xa4>)
   3bec2:	f001 ff7b 	bl	3ddbc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   3bec6:	4620      	mov	r0, r4
   3bec8:	f001 fc20 	bl	3d70c <z_unpend_first_thread>

	if (pending_thread != NULL) {
   3becc:	b180      	cbz	r0, 3bef0 <k_mem_slab_free+0x68>
}

static ALWAYS_INLINE void
z_arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   3bece:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   3bed0:	682a      	ldr	r2, [r5, #0]
   3bed2:	6681      	str	r1, [r0, #104]	; 0x68
	thread->base.swap_data = data;
   3bed4:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3bed6:	7b42      	ldrb	r2, [r0, #13]
   3bed8:	06d2      	lsls	r2, r2, #27
   3beda:	d103      	bne.n	3bee4 <k_mem_slab_free+0x5c>
	if (z_is_thread_ready(thread)) {
   3bedc:	6983      	ldr	r3, [r0, #24]
   3bede:	b90b      	cbnz	r3, 3bee4 <k_mem_slab_free+0x5c>
		z_add_thread_to_ready_q(thread);
   3bee0:	f001 f8a4 	bl	3d02c <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   3bee4:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   3bee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   3beea:	4810      	ldr	r0, [pc, #64]	; (3bf2c <k_mem_slab_free+0xa4>)
   3beec:	f000 bea8 	b.w	3cc40 <z_reschedule>
		**(char ***)mem = slab->free_list;
   3bef0:	682b      	ldr	r3, [r5, #0]
   3bef2:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3bef4:	480d      	ldr	r0, [pc, #52]	; (3bf2c <k_mem_slab_free+0xa4>)
   3bef6:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   3bef8:	682b      	ldr	r3, [r5, #0]
   3befa:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   3befc:	69a3      	ldr	r3, [r4, #24]
   3befe:	3b01      	subs	r3, #1
   3bf00:	61a3      	str	r3, [r4, #24]
   3bf02:	f001 ff4b 	bl	3dd9c <z_spin_unlock_valid>
   3bf06:	b960      	cbnz	r0, 3bf22 <k_mem_slab_free+0x9a>
   3bf08:	490d      	ldr	r1, [pc, #52]	; (3bf40 <k_mem_slab_free+0xb8>)
   3bf0a:	2372      	movs	r3, #114	; 0x72
   3bf0c:	4a09      	ldr	r2, [pc, #36]	; (3bf34 <k_mem_slab_free+0xac>)
   3bf0e:	480a      	ldr	r0, [pc, #40]	; (3bf38 <k_mem_slab_free+0xb0>)
   3bf10:	f00a fba4 	bl	4665c <printk>
   3bf14:	480b      	ldr	r0, [pc, #44]	; (3bf44 <k_mem_slab_free+0xbc>)
   3bf16:	f00a fba1 	bl	4665c <printk>
   3bf1a:	2172      	movs	r1, #114	; 0x72
   3bf1c:	4805      	ldr	r0, [pc, #20]	; (3bf34 <k_mem_slab_free+0xac>)
   3bf1e:	f00a fbaa 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3bf22:	f386 8811 	msr	BASEPRI, r6
   3bf26:	f3bf 8f6f 	isb	sy
}
   3bf2a:	bd70      	pop	{r4, r5, r6, pc}
   3bf2c:	2002626c 	.word	0x2002626c
   3bf30:	0004bff2 	.word	0x0004bff2
   3bf34:	0004bfcb 	.word	0x0004bfcb
   3bf38:	0004b5bf 	.word	0x0004b5bf
   3bf3c:	0004c007 	.word	0x0004c007
   3bf40:	0004c01c 	.word	0x0004c01c
   3bf44:	0004c033 	.word	0x0004c033

0003bf48 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   3bf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   3bf4a:	4d10      	ldr	r5, [pc, #64]	; (3bf8c <init_static_pools+0x44>)
   3bf4c:	4c10      	ldr	r4, [pc, #64]	; (3bf90 <init_static_pools+0x48>)
   3bf4e:	462f      	mov	r7, r5
   3bf50:	4e10      	ldr	r6, [pc, #64]	; (3bf94 <init_static_pools+0x4c>)
   3bf52:	42ac      	cmp	r4, r5
   3bf54:	d90c      	bls.n	3bf70 <init_static_pools+0x28>
   3bf56:	4910      	ldr	r1, [pc, #64]	; (3bf98 <init_static_pools+0x50>)
   3bf58:	2328      	movs	r3, #40	; 0x28
   3bf5a:	4632      	mov	r2, r6
   3bf5c:	480f      	ldr	r0, [pc, #60]	; (3bf9c <init_static_pools+0x54>)
   3bf5e:	f00a fb7d 	bl	4665c <printk>
   3bf62:	480f      	ldr	r0, [pc, #60]	; (3bfa0 <init_static_pools+0x58>)
   3bf64:	f00a fb7a 	bl	4665c <printk>
   3bf68:	2128      	movs	r1, #40	; 0x28
   3bf6a:	4630      	mov	r0, r6
   3bf6c:	f00a fb83 	bl	46676 <assert_post_action>
   3bf70:	42bc      	cmp	r4, r7
   3bf72:	d301      	bcc.n	3bf78 <init_static_pools+0x30>
		k_mem_pool_init(p);
	}

	return 0;
}
   3bf74:	2000      	movs	r0, #0
   3bf76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3bf78:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   3bf7c:	4620      	mov	r0, r4
   3bf7e:	e9c4 3305 	strd	r3, r3, [r4, #20]
   3bf82:	f009 ffa6 	bl	45ed2 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   3bf86:	341c      	adds	r4, #28
   3bf88:	e7e3      	b.n	3bf52 <init_static_pools+0xa>
   3bf8a:	bf00      	nop
   3bf8c:	200322f8 	.word	0x200322f8
   3bf90:	200322dc 	.word	0x200322dc
   3bf94:	0005041c 	.word	0x0005041c
   3bf98:	00050441 	.word	0x00050441
   3bf9c:	0004b5bf 	.word	0x0004b5bf
   3bfa0:	000503fd 	.word	0x000503fd

0003bfa4 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   3bfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bfa8:	4607      	mov	r7, r0
   3bfaa:	b085      	sub	sp, #20
   3bfac:	460d      	mov	r5, r1
   3bfae:	4692      	mov	sl, r2
   3bfb0:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3bfb2:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   3bfb6:	2b0d      	cmp	r3, #13
   3bfb8:	d805      	bhi.n	3bfc6 <k_mem_pool_alloc+0x22>
   3bfba:	2b00      	cmp	r3, #0
   3bfbc:	d04c      	beq.n	3c058 <k_mem_pool_alloc+0xb4>
   3bfbe:	4b2a      	ldr	r3, [pc, #168]	; (3c068 <k_mem_pool_alloc+0xc4>)
   3bfc0:	685b      	ldr	r3, [r3, #4]
   3bfc2:	051a      	lsls	r2, r3, #20
   3bfc4:	d448      	bmi.n	3c058 <k_mem_pool_alloc+0xb4>
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_arch_is_in_isr() && timeout != K_NO_WAIT), "");
   3bfc6:	2c00      	cmp	r4, #0
   3bfc8:	d139      	bne.n	3c03e <k_mem_pool_alloc+0x9a>
	s64_t end = 0;
   3bfca:	f04f 0800 	mov.w	r8, #0
	return pool - &_k_mem_pool_list_start[0];
   3bfce:	4b27      	ldr	r3, [pc, #156]	; (3c06c <k_mem_pool_alloc+0xc8>)
   3bfd0:	4e27      	ldr	r6, [pc, #156]	; (3c070 <k_mem_pool_alloc+0xcc>)
   3bfd2:	1afb      	subs	r3, r7, r3
   3bfd4:	109b      	asrs	r3, r3, #2
   3bfd6:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   3bfd8:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   3bfdc:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   3bfde:	ab03      	add	r3, sp, #12
   3bfe0:	aa02      	add	r2, sp, #8
   3bfe2:	9500      	str	r5, [sp, #0]
   3bfe4:	4651      	mov	r1, sl
   3bfe6:	4638      	mov	r0, r7
   3bfe8:	f009 ffbf 	bl	45f6a <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   3bfec:	796b      	ldrb	r3, [r5, #5]
   3bfee:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   3bff0:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   3bff2:	f362 0303 	bfi	r3, r2, #0, #4
   3bff6:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   3bff8:	686b      	ldr	r3, [r5, #4]
   3bffa:	9a03      	ldr	r2, [sp, #12]
   3bffc:	f362 331f 	bfi	r3, r2, #12, #20
   3c000:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   3c002:	b1c8      	cbz	r0, 3c038 <k_mem_pool_alloc+0x94>
   3c004:	b1c4      	cbz	r4, 3c038 <k_mem_pool_alloc+0x94>
   3c006:	f110 0f0c 	cmn.w	r0, #12
   3c00a:	d115      	bne.n	3c038 <k_mem_pool_alloc+0x94>
	__asm__ volatile(
   3c00c:	f04f 0320 	mov.w	r3, #32
   3c010:	f3ef 8011 	mrs	r0, BASEPRI
   3c014:	f383 8811 	msr	BASEPRI, r3
   3c018:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
   3c01c:	4622      	mov	r2, r4
   3c01e:	4659      	mov	r1, fp
   3c020:	f001 fa60 	bl	3d4e4 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   3c024:	1c63      	adds	r3, r4, #1
   3c026:	d0da      	beq.n	3bfde <k_mem_pool_alloc+0x3a>
	return z_impl_k_uptime_get();
   3c028:	f00c fde0 	bl	48bec <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   3c02c:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   3c030:	2c00      	cmp	r4, #0
   3c032:	dcd4      	bgt.n	3bfde <k_mem_pool_alloc+0x3a>
				break;
			}
		}
	}

	return -EAGAIN;
   3c034:	f06f 000a 	mvn.w	r0, #10
}
   3c038:	b005      	add	sp, #20
   3c03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(z_arch_is_in_isr() && timeout != K_NO_WAIT), "");
   3c03e:	490d      	ldr	r1, [pc, #52]	; (3c074 <k_mem_pool_alloc+0xd0>)
   3c040:	2337      	movs	r3, #55	; 0x37
   3c042:	4a0d      	ldr	r2, [pc, #52]	; (3c078 <k_mem_pool_alloc+0xd4>)
   3c044:	480d      	ldr	r0, [pc, #52]	; (3c07c <k_mem_pool_alloc+0xd8>)
   3c046:	f00a fb09 	bl	4665c <printk>
   3c04a:	480d      	ldr	r0, [pc, #52]	; (3c080 <k_mem_pool_alloc+0xdc>)
   3c04c:	f00a fb06 	bl	4665c <printk>
   3c050:	2137      	movs	r1, #55	; 0x37
   3c052:	4809      	ldr	r0, [pc, #36]	; (3c078 <k_mem_pool_alloc+0xd4>)
   3c054:	f00a fb0f 	bl	46676 <assert_post_action>
	if (timeout > 0) {
   3c058:	2c00      	cmp	r4, #0
   3c05a:	ddb6      	ble.n	3bfca <k_mem_pool_alloc+0x26>
   3c05c:	f00c fdc6 	bl	48bec <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   3c060:	eb10 0804 	adds.w	r8, r0, r4
   3c064:	e7b3      	b.n	3bfce <k_mem_pool_alloc+0x2a>
   3c066:	bf00      	nop
   3c068:	e000ed00 	.word	0xe000ed00
   3c06c:	200322dc 	.word	0x200322dc
   3c070:	b6db6db7 	.word	0xb6db6db7
   3c074:	0005045b 	.word	0x0005045b
   3c078:	0005041c 	.word	0x0005041c
   3c07c:	0004b5bf 	.word	0x0004b5bf
   3c080:	00050481 	.word	0x00050481

0003c084 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   3c084:	b570      	push	{r4, r5, r6, lr}
   3c086:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   3c088:	6802      	ldr	r2, [r0, #0]
   3c08a:	7841      	ldrb	r1, [r0, #1]
   3c08c:	4d23      	ldr	r5, [pc, #140]	; (3c11c <k_mem_pool_free_id+0x98>)
   3c08e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   3c092:	00a4      	lsls	r4, r4, #2
   3c094:	0b12      	lsrs	r2, r2, #12
   3c096:	f001 010f 	and.w	r1, r1, #15
   3c09a:	1928      	adds	r0, r5, r4
   3c09c:	f7e4 fd56 	bl	20b4c <z_sys_mem_pool_block_free>
   3c0a0:	f04f 0320 	mov.w	r3, #32
   3c0a4:	f3ef 8611 	mrs	r6, BASEPRI
   3c0a8:	f383 8811 	msr	BASEPRI, r3
   3c0ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3c0b0:	481b      	ldr	r0, [pc, #108]	; (3c120 <k_mem_pool_free_id+0x9c>)
   3c0b2:	f001 fe65 	bl	3dd80 <z_spin_lock_valid>
   3c0b6:	b960      	cbnz	r0, 3c0d2 <k_mem_pool_free_id+0x4e>
   3c0b8:	491a      	ldr	r1, [pc, #104]	; (3c124 <k_mem_pool_free_id+0xa0>)
   3c0ba:	235f      	movs	r3, #95	; 0x5f
   3c0bc:	4a1a      	ldr	r2, [pc, #104]	; (3c128 <k_mem_pool_free_id+0xa4>)
   3c0be:	481b      	ldr	r0, [pc, #108]	; (3c12c <k_mem_pool_free_id+0xa8>)
   3c0c0:	f00a facc 	bl	4665c <printk>
   3c0c4:	481a      	ldr	r0, [pc, #104]	; (3c130 <k_mem_pool_free_id+0xac>)
   3c0c6:	f00a fac9 	bl	4665c <printk>
   3c0ca:	215f      	movs	r1, #95	; 0x5f
   3c0cc:	4816      	ldr	r0, [pc, #88]	; (3c128 <k_mem_pool_free_id+0xa4>)
   3c0ce:	f00a fad2 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c0d2:	4813      	ldr	r0, [pc, #76]	; (3c120 <k_mem_pool_free_id+0x9c>)
   3c0d4:	f001 fe72 	bl	3ddbc <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   3c0d8:	f104 0014 	add.w	r0, r4, #20
   3c0dc:	4428      	add	r0, r5
   3c0de:	f00c fcde 	bl	48a9e <z_unpend_all>

	if (need_sched != 0) {
   3c0e2:	b128      	cbz	r0, 3c0f0 <k_mem_pool_free_id+0x6c>
		z_reschedule(&lock, key);
   3c0e4:	4631      	mov	r1, r6
	} else {
		k_spin_unlock(&lock, key);
	}
}
   3c0e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   3c0ea:	480d      	ldr	r0, [pc, #52]	; (3c120 <k_mem_pool_free_id+0x9c>)
   3c0ec:	f000 bda8 	b.w	3cc40 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3c0f0:	480b      	ldr	r0, [pc, #44]	; (3c120 <k_mem_pool_free_id+0x9c>)
   3c0f2:	f001 fe53 	bl	3dd9c <z_spin_unlock_valid>
   3c0f6:	b960      	cbnz	r0, 3c112 <k_mem_pool_free_id+0x8e>
   3c0f8:	490e      	ldr	r1, [pc, #56]	; (3c134 <k_mem_pool_free_id+0xb0>)
   3c0fa:	2372      	movs	r3, #114	; 0x72
   3c0fc:	4a0a      	ldr	r2, [pc, #40]	; (3c128 <k_mem_pool_free_id+0xa4>)
   3c0fe:	480b      	ldr	r0, [pc, #44]	; (3c12c <k_mem_pool_free_id+0xa8>)
   3c100:	f00a faac 	bl	4665c <printk>
   3c104:	480c      	ldr	r0, [pc, #48]	; (3c138 <k_mem_pool_free_id+0xb4>)
   3c106:	f00a faa9 	bl	4665c <printk>
   3c10a:	2172      	movs	r1, #114	; 0x72
   3c10c:	4806      	ldr	r0, [pc, #24]	; (3c128 <k_mem_pool_free_id+0xa4>)
   3c10e:	f00a fab2 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3c112:	f386 8811 	msr	BASEPRI, r6
   3c116:	f3bf 8f6f 	isb	sy
}
   3c11a:	bd70      	pop	{r4, r5, r6, pc}
   3c11c:	200322dc 	.word	0x200322dc
   3c120:	2002a2d4 	.word	0x2002a2d4
   3c124:	0004bff2 	.word	0x0004bff2
   3c128:	0004bfcb 	.word	0x0004bfcb
   3c12c:	0004b5bf 	.word	0x0004b5bf
   3c130:	0004c007 	.word	0x0004c007
   3c134:	0004c01c 	.word	0x0004c01c
   3c138:	0004c033 	.word	0x0004c033

0003c13c <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   3c13c:	4601      	mov	r1, r0
   3c13e:	4801      	ldr	r0, [pc, #4]	; (3c144 <k_malloc+0x8>)
   3c140:	f00c bc2e 	b.w	489a0 <k_mem_pool_malloc>
   3c144:	200322dc 	.word	0x200322dc

0003c148 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   3c148:	4b03      	ldr	r3, [pc, #12]	; (3c158 <z_thread_malloc+0x10>)
{
   3c14a:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   3c14c:	689b      	ldr	r3, [r3, #8]
   3c14e:	6e18      	ldr	r0, [r3, #96]	; 0x60
   3c150:	b108      	cbz	r0, 3c156 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   3c152:	f00c bc25 	b.w	489a0 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   3c156:	4770      	bx	lr
   3c158:	2002a2dc 	.word	0x2002a2dc

0003c15c <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   3c15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c160:	4604      	mov	r4, r0
   3c162:	4688      	mov	r8, r1
   3c164:	4615      	mov	r5, r2
   3c166:	f3ef 8305 	mrs	r3, IPSR
   3c16a:	2b0d      	cmp	r3, #13
   3c16c:	d804      	bhi.n	3c178 <z_impl_k_msgq_put+0x1c>
   3c16e:	b18b      	cbz	r3, 3c194 <z_impl_k_msgq_put+0x38>
   3c170:	4b42      	ldr	r3, [pc, #264]	; (3c27c <z_impl_k_msgq_put+0x120>)
   3c172:	685b      	ldr	r3, [r3, #4]
   3c174:	051a      	lsls	r2, r3, #20
   3c176:	d40d      	bmi.n	3c194 <z_impl_k_msgq_put+0x38>
	__ASSERT(!z_arch_is_in_isr() || timeout == K_NO_WAIT, "");
   3c178:	b165      	cbz	r5, 3c194 <z_impl_k_msgq_put+0x38>
   3c17a:	4941      	ldr	r1, [pc, #260]	; (3c280 <z_impl_k_msgq_put+0x124>)
   3c17c:	2371      	movs	r3, #113	; 0x71
   3c17e:	4a41      	ldr	r2, [pc, #260]	; (3c284 <z_impl_k_msgq_put+0x128>)
   3c180:	4841      	ldr	r0, [pc, #260]	; (3c288 <z_impl_k_msgq_put+0x12c>)
   3c182:	f00a fa6b 	bl	4665c <printk>
   3c186:	4841      	ldr	r0, [pc, #260]	; (3c28c <z_impl_k_msgq_put+0x130>)
   3c188:	f00a fa68 	bl	4665c <printk>
   3c18c:	2171      	movs	r1, #113	; 0x71
   3c18e:	483d      	ldr	r0, [pc, #244]	; (3c284 <z_impl_k_msgq_put+0x128>)
   3c190:	f00a fa71 	bl	46676 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   3c194:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   3c198:	f04f 0320 	mov.w	r3, #32
   3c19c:	f3ef 8711 	mrs	r7, BASEPRI
   3c1a0:	f383 8811 	msr	BASEPRI, r3
   3c1a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3c1a8:	4630      	mov	r0, r6
   3c1aa:	f001 fde9 	bl	3dd80 <z_spin_lock_valid>
   3c1ae:	b960      	cbnz	r0, 3c1ca <z_impl_k_msgq_put+0x6e>
   3c1b0:	4937      	ldr	r1, [pc, #220]	; (3c290 <z_impl_k_msgq_put+0x134>)
   3c1b2:	235f      	movs	r3, #95	; 0x5f
   3c1b4:	4a37      	ldr	r2, [pc, #220]	; (3c294 <z_impl_k_msgq_put+0x138>)
   3c1b6:	4834      	ldr	r0, [pc, #208]	; (3c288 <z_impl_k_msgq_put+0x12c>)
   3c1b8:	f00a fa50 	bl	4665c <printk>
   3c1bc:	4836      	ldr	r0, [pc, #216]	; (3c298 <z_impl_k_msgq_put+0x13c>)
   3c1be:	f00a fa4d 	bl	4665c <printk>
   3c1c2:	215f      	movs	r1, #95	; 0x5f
   3c1c4:	4833      	ldr	r0, [pc, #204]	; (3c294 <z_impl_k_msgq_put+0x138>)
   3c1c6:	f00a fa56 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c1ca:	4630      	mov	r0, r6
   3c1cc:	f001 fdf6 	bl	3ddbc <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   3c1d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   3c1d2:	6923      	ldr	r3, [r4, #16]
   3c1d4:	429a      	cmp	r2, r3
   3c1d6:	d241      	bcs.n	3c25c <z_impl_k_msgq_put+0x100>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3c1d8:	4620      	mov	r0, r4
   3c1da:	f001 fa97 	bl	3d70c <z_unpend_first_thread>
   3c1de:	68e2      	ldr	r2, [r4, #12]
		if (pending_thread != NULL) {
   3c1e0:	4605      	mov	r5, r0
   3c1e2:	4641      	mov	r1, r8
   3c1e4:	b1a0      	cbz	r0, 3c210 <z_impl_k_msgq_put+0xb4>
   3c1e6:	6940      	ldr	r0, [r0, #20]
   3c1e8:	f7dd fe62 	bl	19eb0 <memcpy>
   3c1ec:	2300      	movs	r3, #0
   3c1ee:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3c1f0:	7b6b      	ldrb	r3, [r5, #13]
   3c1f2:	06db      	lsls	r3, r3, #27
   3c1f4:	d104      	bne.n	3c200 <z_impl_k_msgq_put+0xa4>
	if (z_is_thread_ready(thread)) {
   3c1f6:	69ab      	ldr	r3, [r5, #24]
   3c1f8:	b913      	cbnz	r3, 3c200 <z_impl_k_msgq_put+0xa4>
		z_add_thread_to_ready_q(thread);
   3c1fa:	4628      	mov	r0, r5
   3c1fc:	f000 ff16 	bl	3d02c <z_add_thread_to_ready_q>
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			z_arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   3c200:	4639      	mov	r1, r7
   3c202:	4630      	mov	r0, r6
   3c204:	f000 fd1c 	bl	3cc40 <z_reschedule>
			return 0;
   3c208:	2400      	movs	r4, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3c20a:	4620      	mov	r0, r4
   3c20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c210:	6a20      	ldr	r0, [r4, #32]
   3c212:	f7dd fe4d 	bl	19eb0 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   3c216:	6a23      	ldr	r3, [r4, #32]
   3c218:	68e2      	ldr	r2, [r4, #12]
   3c21a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3c21c:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   3c21e:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   3c220:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   3c222:	bf04      	itt	eq
   3c224:	6963      	ldreq	r3, [r4, #20]
   3c226:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   3c228:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3c22a:	3301      	adds	r3, #1
   3c22c:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   3c22e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3c230:	4630      	mov	r0, r6
   3c232:	f001 fdb3 	bl	3dd9c <z_spin_unlock_valid>
   3c236:	b960      	cbnz	r0, 3c252 <z_impl_k_msgq_put+0xf6>
   3c238:	4918      	ldr	r1, [pc, #96]	; (3c29c <z_impl_k_msgq_put+0x140>)
   3c23a:	2372      	movs	r3, #114	; 0x72
   3c23c:	4a15      	ldr	r2, [pc, #84]	; (3c294 <z_impl_k_msgq_put+0x138>)
   3c23e:	4812      	ldr	r0, [pc, #72]	; (3c288 <z_impl_k_msgq_put+0x12c>)
   3c240:	f00a fa0c 	bl	4665c <printk>
   3c244:	4816      	ldr	r0, [pc, #88]	; (3c2a0 <z_impl_k_msgq_put+0x144>)
   3c246:	f00a fa09 	bl	4665c <printk>
   3c24a:	2172      	movs	r1, #114	; 0x72
   3c24c:	4811      	ldr	r0, [pc, #68]	; (3c294 <z_impl_k_msgq_put+0x138>)
   3c24e:	f00a fa12 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3c252:	f387 8811 	msr	BASEPRI, r7
   3c256:	f3bf 8f6f 	isb	sy
	return result;
   3c25a:	e7d6      	b.n	3c20a <z_impl_k_msgq_put+0xae>
	} else if (timeout == K_NO_WAIT) {
   3c25c:	b15d      	cbz	r5, 3c276 <z_impl_k_msgq_put+0x11a>
		_current->base.swap_data = data;
   3c25e:	4b11      	ldr	r3, [pc, #68]	; (3c2a4 <z_impl_k_msgq_put+0x148>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c260:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   3c262:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c264:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   3c266:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c26a:	4630      	mov	r0, r6
   3c26c:	462b      	mov	r3, r5
}
   3c26e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c272:	f001 b98f 	b.w	3d594 <z_pend_curr>
		result = -ENOMSG;
   3c276:	f06f 0422 	mvn.w	r4, #34	; 0x22
   3c27a:	e7d9      	b.n	3c230 <z_impl_k_msgq_put+0xd4>
   3c27c:	e000ed00 	.word	0xe000ed00
   3c280:	000504d2 	.word	0x000504d2
   3c284:	00050484 	.word	0x00050484
   3c288:	0004b5bf 	.word	0x0004b5bf
   3c28c:	00050481 	.word	0x00050481
   3c290:	0004bff2 	.word	0x0004bff2
   3c294:	0004bfcb 	.word	0x0004bfcb
   3c298:	0004c007 	.word	0x0004c007
   3c29c:	0004c01c 	.word	0x0004c01c
   3c2a0:	0004c033 	.word	0x0004c033
   3c2a4:	2002a2dc 	.word	0x2002a2dc

0003c2a8 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   3c2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c2ac:	4604      	mov	r4, r0
   3c2ae:	4688      	mov	r8, r1
   3c2b0:	4615      	mov	r5, r2
   3c2b2:	f3ef 8305 	mrs	r3, IPSR
   3c2b6:	2b0d      	cmp	r3, #13
   3c2b8:	d804      	bhi.n	3c2c4 <z_impl_k_msgq_get+0x1c>
   3c2ba:	b18b      	cbz	r3, 3c2e0 <z_impl_k_msgq_get+0x38>
   3c2bc:	4b48      	ldr	r3, [pc, #288]	; (3c3e0 <z_impl_k_msgq_get+0x138>)
   3c2be:	685b      	ldr	r3, [r3, #4]
   3c2c0:	051a      	lsls	r2, r3, #20
   3c2c2:	d40d      	bmi.n	3c2e0 <z_impl_k_msgq_get+0x38>
	__ASSERT(!z_arch_is_in_isr() || timeout == K_NO_WAIT, "");
   3c2c4:	b165      	cbz	r5, 3c2e0 <z_impl_k_msgq_get+0x38>
   3c2c6:	4947      	ldr	r1, [pc, #284]	; (3c3e4 <z_impl_k_msgq_get+0x13c>)
   3c2c8:	23bc      	movs	r3, #188	; 0xbc
   3c2ca:	4a47      	ldr	r2, [pc, #284]	; (3c3e8 <z_impl_k_msgq_get+0x140>)
   3c2cc:	4847      	ldr	r0, [pc, #284]	; (3c3ec <z_impl_k_msgq_get+0x144>)
   3c2ce:	f00a f9c5 	bl	4665c <printk>
   3c2d2:	4847      	ldr	r0, [pc, #284]	; (3c3f0 <z_impl_k_msgq_get+0x148>)
   3c2d4:	f00a f9c2 	bl	4665c <printk>
   3c2d8:	21bc      	movs	r1, #188	; 0xbc
   3c2da:	4843      	ldr	r0, [pc, #268]	; (3c3e8 <z_impl_k_msgq_get+0x140>)
   3c2dc:	f00a f9cb 	bl	46676 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   3c2e0:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   3c2e4:	f04f 0320 	mov.w	r3, #32
   3c2e8:	f3ef 8711 	mrs	r7, BASEPRI
   3c2ec:	f383 8811 	msr	BASEPRI, r3
   3c2f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3c2f4:	4630      	mov	r0, r6
   3c2f6:	f001 fd43 	bl	3dd80 <z_spin_lock_valid>
   3c2fa:	b960      	cbnz	r0, 3c316 <z_impl_k_msgq_get+0x6e>
   3c2fc:	493d      	ldr	r1, [pc, #244]	; (3c3f4 <z_impl_k_msgq_get+0x14c>)
   3c2fe:	235f      	movs	r3, #95	; 0x5f
   3c300:	4a3d      	ldr	r2, [pc, #244]	; (3c3f8 <z_impl_k_msgq_get+0x150>)
   3c302:	483a      	ldr	r0, [pc, #232]	; (3c3ec <z_impl_k_msgq_get+0x144>)
   3c304:	f00a f9aa 	bl	4665c <printk>
   3c308:	483c      	ldr	r0, [pc, #240]	; (3c3fc <z_impl_k_msgq_get+0x154>)
   3c30a:	f00a f9a7 	bl	4665c <printk>
   3c30e:	215f      	movs	r1, #95	; 0x5f
   3c310:	4839      	ldr	r0, [pc, #228]	; (3c3f8 <z_impl_k_msgq_get+0x150>)
   3c312:	f00a f9b0 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c316:	4630      	mov	r0, r6
   3c318:	f001 fd50 	bl	3ddbc <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   3c31c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3c31e:	2b00      	cmp	r3, #0
   3c320:	d039      	beq.n	3c396 <z_impl_k_msgq_get+0xee>
   3c322:	68e2      	ldr	r2, [r4, #12]
   3c324:	69e1      	ldr	r1, [r4, #28]
   3c326:	4640      	mov	r0, r8
   3c328:	f7dd fdc2 	bl	19eb0 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   3c32c:	69e3      	ldr	r3, [r4, #28]
   3c32e:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3c330:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   3c332:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   3c334:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   3c336:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   3c338:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   3c33a:	bf04      	itt	eq
   3c33c:	6963      	ldreq	r3, [r4, #20]
   3c33e:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   3c340:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3c342:	3b01      	subs	r3, #1
   3c344:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3c346:	f001 f9e1 	bl	3d70c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   3c34a:	4605      	mov	r5, r0
   3c34c:	2800      	cmp	r0, #0
   3c34e:	d031      	beq.n	3c3b4 <z_impl_k_msgq_get+0x10c>
   3c350:	68e2      	ldr	r2, [r4, #12]
   3c352:	6941      	ldr	r1, [r0, #20]
   3c354:	6a20      	ldr	r0, [r4, #32]
   3c356:	f7dd fdab 	bl	19eb0 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   3c35a:	6a23      	ldr	r3, [r4, #32]
   3c35c:	68e2      	ldr	r2, [r4, #12]
   3c35e:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3c360:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   3c362:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   3c364:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   3c366:	bf04      	itt	eq
   3c368:	6963      	ldreq	r3, [r4, #20]
   3c36a:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
   3c36c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3c36e:	3301      	adds	r3, #1
   3c370:	6263      	str	r3, [r4, #36]	; 0x24
   3c372:	2300      	movs	r3, #0
   3c374:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3c376:	7b6b      	ldrb	r3, [r5, #13]
   3c378:	06db      	lsls	r3, r3, #27
   3c37a:	d104      	bne.n	3c386 <z_impl_k_msgq_get+0xde>
	if (z_is_thread_ready(thread)) {
   3c37c:	69ab      	ldr	r3, [r5, #24]
   3c37e:	b913      	cbnz	r3, 3c386 <z_impl_k_msgq_get+0xde>
		z_add_thread_to_ready_q(thread);
   3c380:	4628      	mov	r0, r5
   3c382:	f000 fe53 	bl	3d02c <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			z_arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   3c386:	4639      	mov	r1, r7
   3c388:	4630      	mov	r0, r6
   3c38a:	f000 fc59 	bl	3cc40 <z_reschedule>
			return 0;
   3c38e:	2500      	movs	r5, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3c390:	4628      	mov	r0, r5
   3c392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   3c396:	b15d      	cbz	r5, 3c3b0 <z_impl_k_msgq_get+0x108>
		_current->base.swap_data = data;
   3c398:	4b19      	ldr	r3, [pc, #100]	; (3c400 <z_impl_k_msgq_get+0x158>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c39a:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   3c39c:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c39e:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   3c3a0:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c3a4:	4630      	mov	r0, r6
   3c3a6:	462b      	mov	r3, r5
}
   3c3a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c3ac:	f001 b8f2 	b.w	3d594 <z_pend_curr>
		result = -ENOMSG;
   3c3b0:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3c3b4:	4630      	mov	r0, r6
   3c3b6:	f001 fcf1 	bl	3dd9c <z_spin_unlock_valid>
   3c3ba:	b960      	cbnz	r0, 3c3d6 <z_impl_k_msgq_get+0x12e>
   3c3bc:	4911      	ldr	r1, [pc, #68]	; (3c404 <z_impl_k_msgq_get+0x15c>)
   3c3be:	2372      	movs	r3, #114	; 0x72
   3c3c0:	4a0d      	ldr	r2, [pc, #52]	; (3c3f8 <z_impl_k_msgq_get+0x150>)
   3c3c2:	480a      	ldr	r0, [pc, #40]	; (3c3ec <z_impl_k_msgq_get+0x144>)
   3c3c4:	f00a f94a 	bl	4665c <printk>
   3c3c8:	480f      	ldr	r0, [pc, #60]	; (3c408 <z_impl_k_msgq_get+0x160>)
   3c3ca:	f00a f947 	bl	4665c <printk>
   3c3ce:	2172      	movs	r1, #114	; 0x72
   3c3d0:	4809      	ldr	r0, [pc, #36]	; (3c3f8 <z_impl_k_msgq_get+0x150>)
   3c3d2:	f00a f950 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3c3d6:	f387 8811 	msr	BASEPRI, r7
   3c3da:	f3bf 8f6f 	isb	sy
	return result;
   3c3de:	e7d7      	b.n	3c390 <z_impl_k_msgq_get+0xe8>
   3c3e0:	e000ed00 	.word	0xe000ed00
   3c3e4:	000504d2 	.word	0x000504d2
   3c3e8:	00050484 	.word	0x00050484
   3c3ec:	0004b5bf 	.word	0x0004b5bf
   3c3f0:	00050481 	.word	0x00050481
   3c3f4:	0004bff2 	.word	0x0004bff2
   3c3f8:	0004bfcb 	.word	0x0004bfcb
   3c3fc:	0004c007 	.word	0x0004c007
   3c400:	2002a2dc 	.word	0x2002a2dc
   3c404:	0004c01c 	.word	0x0004c01c
   3c408:	0004c033 	.word	0x0004c033

0003c40c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   3c40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c40e:	4604      	mov	r4, r0
   3c410:	460e      	mov	r6, r1
	__asm__ volatile(
   3c412:	f04f 0320 	mov.w	r3, #32
   3c416:	f3ef 8511 	mrs	r5, BASEPRI
   3c41a:	f383 8811 	msr	BASEPRI, r3
   3c41e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3c422:	485f      	ldr	r0, [pc, #380]	; (3c5a0 <z_impl_k_mutex_lock+0x194>)
   3c424:	f001 fcac 	bl	3dd80 <z_spin_lock_valid>
   3c428:	b960      	cbnz	r0, 3c444 <z_impl_k_mutex_lock+0x38>
   3c42a:	495e      	ldr	r1, [pc, #376]	; (3c5a4 <z_impl_k_mutex_lock+0x198>)
   3c42c:	235f      	movs	r3, #95	; 0x5f
   3c42e:	4a5e      	ldr	r2, [pc, #376]	; (3c5a8 <z_impl_k_mutex_lock+0x19c>)
   3c430:	485e      	ldr	r0, [pc, #376]	; (3c5ac <z_impl_k_mutex_lock+0x1a0>)
   3c432:	f00a f913 	bl	4665c <printk>
   3c436:	485e      	ldr	r0, [pc, #376]	; (3c5b0 <z_impl_k_mutex_lock+0x1a4>)
   3c438:	f00a f910 	bl	4665c <printk>
   3c43c:	215f      	movs	r1, #95	; 0x5f
   3c43e:	485a      	ldr	r0, [pc, #360]	; (3c5a8 <z_impl_k_mutex_lock+0x19c>)
   3c440:	f00a f919 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c444:	4856      	ldr	r0, [pc, #344]	; (3c5a0 <z_impl_k_mutex_lock+0x194>)
   3c446:	f001 fcb9 	bl	3ddbc <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   3c44a:	68e3      	ldr	r3, [r4, #12]
   3c44c:	4a59      	ldr	r2, [pc, #356]	; (3c5b4 <z_impl_k_mutex_lock+0x1a8>)
   3c44e:	b1eb      	cbz	r3, 3c48c <z_impl_k_mutex_lock+0x80>
   3c450:	68a0      	ldr	r0, [r4, #8]
   3c452:	6891      	ldr	r1, [r2, #8]
   3c454:	4288      	cmp	r0, r1
   3c456:	d038      	beq.n	3c4ca <z_impl_k_mutex_lock+0xbe>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   3c458:	2e00      	cmp	r6, #0
   3c45a:	d138      	bne.n	3c4ce <z_impl_k_mutex_lock+0xc2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3c45c:	4850      	ldr	r0, [pc, #320]	; (3c5a0 <z_impl_k_mutex_lock+0x194>)
   3c45e:	f001 fc9d 	bl	3dd9c <z_spin_unlock_valid>
   3c462:	b960      	cbnz	r0, 3c47e <z_impl_k_mutex_lock+0x72>
   3c464:	4954      	ldr	r1, [pc, #336]	; (3c5b8 <z_impl_k_mutex_lock+0x1ac>)
   3c466:	2372      	movs	r3, #114	; 0x72
   3c468:	4a4f      	ldr	r2, [pc, #316]	; (3c5a8 <z_impl_k_mutex_lock+0x19c>)
   3c46a:	4850      	ldr	r0, [pc, #320]	; (3c5ac <z_impl_k_mutex_lock+0x1a0>)
   3c46c:	f00a f8f6 	bl	4665c <printk>
   3c470:	4852      	ldr	r0, [pc, #328]	; (3c5bc <z_impl_k_mutex_lock+0x1b0>)
   3c472:	f00a f8f3 	bl	4665c <printk>
   3c476:	2172      	movs	r1, #114	; 0x72
   3c478:	484b      	ldr	r0, [pc, #300]	; (3c5a8 <z_impl_k_mutex_lock+0x19c>)
   3c47a:	f00a f8fc 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3c47e:	f385 8811 	msr	BASEPRI, r5
   3c482:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   3c486:	f06f 000f 	mvn.w	r0, #15
   3c48a:	e01d      	b.n	3c4c8 <z_impl_k_mutex_lock+0xbc>
					_current->base.prio :
   3c48c:	6891      	ldr	r1, [r2, #8]
   3c48e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   3c492:	3301      	adds	r3, #1
   3c494:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   3c496:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   3c498:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   3c49a:	60a3      	str	r3, [r4, #8]
   3c49c:	4840      	ldr	r0, [pc, #256]	; (3c5a0 <z_impl_k_mutex_lock+0x194>)
   3c49e:	f001 fc7d 	bl	3dd9c <z_spin_unlock_valid>
   3c4a2:	b960      	cbnz	r0, 3c4be <z_impl_k_mutex_lock+0xb2>
   3c4a4:	4944      	ldr	r1, [pc, #272]	; (3c5b8 <z_impl_k_mutex_lock+0x1ac>)
   3c4a6:	2372      	movs	r3, #114	; 0x72
   3c4a8:	4a3f      	ldr	r2, [pc, #252]	; (3c5a8 <z_impl_k_mutex_lock+0x19c>)
   3c4aa:	4840      	ldr	r0, [pc, #256]	; (3c5ac <z_impl_k_mutex_lock+0x1a0>)
   3c4ac:	f00a f8d6 	bl	4665c <printk>
   3c4b0:	4842      	ldr	r0, [pc, #264]	; (3c5bc <z_impl_k_mutex_lock+0x1b0>)
   3c4b2:	f00a f8d3 	bl	4665c <printk>
   3c4b6:	2172      	movs	r1, #114	; 0x72
   3c4b8:	483b      	ldr	r0, [pc, #236]	; (3c5a8 <z_impl_k_mutex_lock+0x19c>)
   3c4ba:	f00a f8dc 	bl	46676 <assert_post_action>
   3c4be:	f385 8811 	msr	BASEPRI, r5
   3c4c2:	f3bf 8f6f 	isb	sy
		return 0;
   3c4c6:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   3c4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   3c4ca:	6921      	ldr	r1, [r4, #16]
   3c4cc:	e7e1      	b.n	3c492 <z_impl_k_mutex_lock+0x86>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   3c4ce:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3c4d2:	f991 100e 	ldrsb.w	r1, [r1, #14]
   3c4d6:	4299      	cmp	r1, r3
   3c4d8:	bfa8      	it	ge
   3c4da:	4619      	movge	r1, r3
   3c4dc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   3c4e0:	4299      	cmp	r1, r3
   3c4e2:	da3f      	bge.n	3c564 <z_impl_k_mutex_lock+0x158>
		return z_set_prio(mutex->owner, new_prio);
   3c4e4:	f001 f884 	bl	3d5f0 <z_set_prio>
   3c4e8:	4607      	mov	r7, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   3c4ea:	4633      	mov	r3, r6
   3c4ec:	4622      	mov	r2, r4
   3c4ee:	4629      	mov	r1, r5
   3c4f0:	482b      	ldr	r0, [pc, #172]	; (3c5a0 <z_impl_k_mutex_lock+0x194>)
   3c4f2:	f001 f84f 	bl	3d594 <z_pend_curr>
	if (got_mutex == 0) {
   3c4f6:	2800      	cmp	r0, #0
   3c4f8:	d0e6      	beq.n	3c4c8 <z_impl_k_mutex_lock+0xbc>
	__asm__ volatile(
   3c4fa:	f04f 0320 	mov.w	r3, #32
   3c4fe:	f3ef 8511 	mrs	r5, BASEPRI
   3c502:	f383 8811 	msr	BASEPRI, r3
   3c506:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3c50a:	4825      	ldr	r0, [pc, #148]	; (3c5a0 <z_impl_k_mutex_lock+0x194>)
   3c50c:	f001 fc38 	bl	3dd80 <z_spin_lock_valid>
   3c510:	b960      	cbnz	r0, 3c52c <z_impl_k_mutex_lock+0x120>
   3c512:	4924      	ldr	r1, [pc, #144]	; (3c5a4 <z_impl_k_mutex_lock+0x198>)
   3c514:	235f      	movs	r3, #95	; 0x5f
   3c516:	4a24      	ldr	r2, [pc, #144]	; (3c5a8 <z_impl_k_mutex_lock+0x19c>)
   3c518:	4824      	ldr	r0, [pc, #144]	; (3c5ac <z_impl_k_mutex_lock+0x1a0>)
   3c51a:	f00a f89f 	bl	4665c <printk>
   3c51e:	4824      	ldr	r0, [pc, #144]	; (3c5b0 <z_impl_k_mutex_lock+0x1a4>)
   3c520:	f00a f89c 	bl	4665c <printk>
   3c524:	215f      	movs	r1, #95	; 0x5f
   3c526:	4820      	ldr	r0, [pc, #128]	; (3c5a8 <z_impl_k_mutex_lock+0x19c>)
   3c528:	f00a f8a5 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c52c:	481c      	ldr	r0, [pc, #112]	; (3c5a0 <z_impl_k_mutex_lock+0x194>)
   3c52e:	f001 fc45 	bl	3ddbc <z_spin_lock_set_owner>
	return list->head == list;
   3c532:	6823      	ldr	r3, [r4, #0]
   3c534:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3c536:	429c      	cmp	r4, r3
   3c538:	d007      	beq.n	3c54a <z_impl_k_mutex_lock+0x13e>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   3c53a:	b133      	cbz	r3, 3c54a <z_impl_k_mutex_lock+0x13e>
   3c53c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   3c540:	4299      	cmp	r1, r3
   3c542:	bfa8      	it	ge
   3c544:	4619      	movge	r1, r3
   3c546:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   3c54a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   3c54c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3c550:	4299      	cmp	r1, r3
   3c552:	d109      	bne.n	3c568 <z_impl_k_mutex_lock+0x15c>
	if (resched) {
   3c554:	b16f      	cbz	r7, 3c572 <z_impl_k_mutex_lock+0x166>
		z_reschedule(&lock, key);
   3c556:	4629      	mov	r1, r5
   3c558:	4811      	ldr	r0, [pc, #68]	; (3c5a0 <z_impl_k_mutex_lock+0x194>)
   3c55a:	f000 fb71 	bl	3cc40 <z_reschedule>
	return -EAGAIN;
   3c55e:	f06f 000a 	mvn.w	r0, #10
   3c562:	e7b1      	b.n	3c4c8 <z_impl_k_mutex_lock+0xbc>
	bool resched = false;
   3c564:	2700      	movs	r7, #0
   3c566:	e7c0      	b.n	3c4ea <z_impl_k_mutex_lock+0xde>
		return z_set_prio(mutex->owner, new_prio);
   3c568:	f001 f842 	bl	3d5f0 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   3c56c:	2800      	cmp	r0, #0
   3c56e:	d1f2      	bne.n	3c556 <z_impl_k_mutex_lock+0x14a>
   3c570:	e7f0      	b.n	3c554 <z_impl_k_mutex_lock+0x148>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3c572:	480b      	ldr	r0, [pc, #44]	; (3c5a0 <z_impl_k_mutex_lock+0x194>)
   3c574:	f001 fc12 	bl	3dd9c <z_spin_unlock_valid>
   3c578:	b960      	cbnz	r0, 3c594 <z_impl_k_mutex_lock+0x188>
   3c57a:	490f      	ldr	r1, [pc, #60]	; (3c5b8 <z_impl_k_mutex_lock+0x1ac>)
   3c57c:	2372      	movs	r3, #114	; 0x72
   3c57e:	4a0a      	ldr	r2, [pc, #40]	; (3c5a8 <z_impl_k_mutex_lock+0x19c>)
   3c580:	480a      	ldr	r0, [pc, #40]	; (3c5ac <z_impl_k_mutex_lock+0x1a0>)
   3c582:	f00a f86b 	bl	4665c <printk>
   3c586:	480d      	ldr	r0, [pc, #52]	; (3c5bc <z_impl_k_mutex_lock+0x1b0>)
   3c588:	f00a f868 	bl	4665c <printk>
   3c58c:	2172      	movs	r1, #114	; 0x72
   3c58e:	4806      	ldr	r0, [pc, #24]	; (3c5a8 <z_impl_k_mutex_lock+0x19c>)
   3c590:	f00a f871 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3c594:	f385 8811 	msr	BASEPRI, r5
   3c598:	f3bf 8f6f 	isb	sy
   3c59c:	e7df      	b.n	3c55e <z_impl_k_mutex_lock+0x152>
   3c59e:	bf00      	nop
   3c5a0:	2002a2d8 	.word	0x2002a2d8
   3c5a4:	0004bff2 	.word	0x0004bff2
   3c5a8:	0004bfcb 	.word	0x0004bfcb
   3c5ac:	0004b5bf 	.word	0x0004b5bf
   3c5b0:	0004c007 	.word	0x0004c007
   3c5b4:	2002a2dc 	.word	0x2002a2dc
   3c5b8:	0004c01c 	.word	0x0004c01c
   3c5bc:	0004c033 	.word	0x0004c033

0003c5c0 <z_impl_k_mutex_unlock>:

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
	struct k_thread *new_owner;

	__ASSERT(mutex->lock_count > 0U, "");
   3c5c0:	68c3      	ldr	r3, [r0, #12]
{
   3c5c2:	b570      	push	{r4, r5, r6, lr}
   3c5c4:	4604      	mov	r4, r0
	__ASSERT(mutex->lock_count > 0U, "");
   3c5c6:	b963      	cbnz	r3, 3c5e2 <z_impl_k_mutex_unlock+0x22>
   3c5c8:	495c      	ldr	r1, [pc, #368]	; (3c73c <z_impl_k_mutex_unlock+0x17c>)
   3c5ca:	23d2      	movs	r3, #210	; 0xd2
   3c5cc:	4a5c      	ldr	r2, [pc, #368]	; (3c740 <z_impl_k_mutex_unlock+0x180>)
   3c5ce:	485d      	ldr	r0, [pc, #372]	; (3c744 <z_impl_k_mutex_unlock+0x184>)
   3c5d0:	f00a f844 	bl	4665c <printk>
   3c5d4:	485c      	ldr	r0, [pc, #368]	; (3c748 <z_impl_k_mutex_unlock+0x188>)
   3c5d6:	f00a f841 	bl	4665c <printk>
   3c5da:	21d2      	movs	r1, #210	; 0xd2
   3c5dc:	4858      	ldr	r0, [pc, #352]	; (3c740 <z_impl_k_mutex_unlock+0x180>)
   3c5de:	f00a f84a 	bl	46676 <assert_post_action>
	__ASSERT(mutex->owner == _current, "");
   3c5e2:	4d5a      	ldr	r5, [pc, #360]	; (3c74c <z_impl_k_mutex_unlock+0x18c>)
   3c5e4:	68a2      	ldr	r2, [r4, #8]
   3c5e6:	68ab      	ldr	r3, [r5, #8]
   3c5e8:	429a      	cmp	r2, r3
   3c5ea:	d00c      	beq.n	3c606 <z_impl_k_mutex_unlock+0x46>
   3c5ec:	4958      	ldr	r1, [pc, #352]	; (3c750 <z_impl_k_mutex_unlock+0x190>)
   3c5ee:	23d3      	movs	r3, #211	; 0xd3
   3c5f0:	4a53      	ldr	r2, [pc, #332]	; (3c740 <z_impl_k_mutex_unlock+0x180>)
   3c5f2:	4854      	ldr	r0, [pc, #336]	; (3c744 <z_impl_k_mutex_unlock+0x184>)
   3c5f4:	f00a f832 	bl	4665c <printk>
   3c5f8:	4853      	ldr	r0, [pc, #332]	; (3c748 <z_impl_k_mutex_unlock+0x188>)
   3c5fa:	f00a f82f 	bl	4665c <printk>
   3c5fe:	21d3      	movs	r1, #211	; 0xd3
   3c600:	484f      	ldr	r0, [pc, #316]	; (3c740 <z_impl_k_mutex_unlock+0x180>)
   3c602:	f00a f838 	bl	46676 <assert_post_action>
   3c606:	f3ef 8305 	mrs	r3, IPSR
   3c60a:	2b0d      	cmp	r3, #13
   3c60c:	d804      	bhi.n	3c618 <z_impl_k_mutex_unlock+0x58>
   3c60e:	b193      	cbz	r3, 3c636 <z_impl_k_mutex_unlock+0x76>
   3c610:	4b50      	ldr	r3, [pc, #320]	; (3c754 <z_impl_k_mutex_unlock+0x194>)
   3c612:	685b      	ldr	r3, [r3, #4]
   3c614:	051a      	lsls	r2, r3, #20
   3c616:	d40e      	bmi.n	3c636 <z_impl_k_mutex_unlock+0x76>
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_arch_is_in_isr(), "");
   3c618:	494f      	ldr	r1, [pc, #316]	; (3c758 <z_impl_k_mutex_unlock+0x198>)
   3c61a:	f44f 7386 	mov.w	r3, #268	; 0x10c
   3c61e:	4a4f      	ldr	r2, [pc, #316]	; (3c75c <z_impl_k_mutex_unlock+0x19c>)
   3c620:	4848      	ldr	r0, [pc, #288]	; (3c744 <z_impl_k_mutex_unlock+0x184>)
   3c622:	f00a f81b 	bl	4665c <printk>
   3c626:	4848      	ldr	r0, [pc, #288]	; (3c748 <z_impl_k_mutex_unlock+0x188>)
   3c628:	f00a f818 	bl	4665c <printk>
   3c62c:	f44f 7186 	mov.w	r1, #268	; 0x10c
   3c630:	484a      	ldr	r0, [pc, #296]	; (3c75c <z_impl_k_mutex_unlock+0x19c>)
   3c632:	f00a f820 	bl	46676 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   3c636:	68ab      	ldr	r3, [r5, #8]
   3c638:	7bdb      	ldrb	r3, [r3, #15]
   3c63a:	2b01      	cmp	r3, #1
   3c63c:	d10e      	bne.n	3c65c <z_impl_k_mutex_unlock+0x9c>
   3c63e:	4948      	ldr	r1, [pc, #288]	; (3c760 <z_impl_k_mutex_unlock+0x1a0>)
   3c640:	f240 130d 	movw	r3, #269	; 0x10d
   3c644:	4a45      	ldr	r2, [pc, #276]	; (3c75c <z_impl_k_mutex_unlock+0x19c>)
   3c646:	483f      	ldr	r0, [pc, #252]	; (3c744 <z_impl_k_mutex_unlock+0x184>)
   3c648:	f00a f808 	bl	4665c <printk>
   3c64c:	483e      	ldr	r0, [pc, #248]	; (3c748 <z_impl_k_mutex_unlock+0x188>)
   3c64e:	f00a f805 	bl	4665c <printk>
   3c652:	f240 110d 	movw	r1, #269	; 0x10d
   3c656:	4841      	ldr	r0, [pc, #260]	; (3c75c <z_impl_k_mutex_unlock+0x19c>)
   3c658:	f00a f80d 	bl	46676 <assert_post_action>

	--_current->base.sched_locked;
   3c65c:	68aa      	ldr	r2, [r5, #8]
   3c65e:	7bd3      	ldrb	r3, [r2, #15]
   3c660:	3b01      	subs	r3, #1
   3c662:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   3c664:	68e3      	ldr	r3, [r4, #12]
   3c666:	2b01      	cmp	r3, #1
   3c668:	d005      	beq.n	3c676 <z_impl_k_mutex_unlock+0xb6>
		mutex->lock_count--;
   3c66a:	3b01      	subs	r3, #1
   3c66c:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
   3c66e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   3c672:	f000 bc59 	b.w	3cf28 <k_sched_unlock>
	__asm__ volatile(
   3c676:	f04f 0320 	mov.w	r3, #32
   3c67a:	f3ef 8611 	mrs	r6, BASEPRI
   3c67e:	f383 8811 	msr	BASEPRI, r3
   3c682:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3c686:	4837      	ldr	r0, [pc, #220]	; (3c764 <z_impl_k_mutex_unlock+0x1a4>)
   3c688:	f001 fb7a 	bl	3dd80 <z_spin_lock_valid>
   3c68c:	b960      	cbnz	r0, 3c6a8 <z_impl_k_mutex_unlock+0xe8>
   3c68e:	4936      	ldr	r1, [pc, #216]	; (3c768 <z_impl_k_mutex_unlock+0x1a8>)
   3c690:	235f      	movs	r3, #95	; 0x5f
   3c692:	4a36      	ldr	r2, [pc, #216]	; (3c76c <z_impl_k_mutex_unlock+0x1ac>)
   3c694:	482b      	ldr	r0, [pc, #172]	; (3c744 <z_impl_k_mutex_unlock+0x184>)
   3c696:	f009 ffe1 	bl	4665c <printk>
   3c69a:	4835      	ldr	r0, [pc, #212]	; (3c770 <z_impl_k_mutex_unlock+0x1b0>)
   3c69c:	f009 ffde 	bl	4665c <printk>
   3c6a0:	215f      	movs	r1, #95	; 0x5f
   3c6a2:	4832      	ldr	r0, [pc, #200]	; (3c76c <z_impl_k_mutex_unlock+0x1ac>)
   3c6a4:	f009 ffe7 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c6a8:	482e      	ldr	r0, [pc, #184]	; (3c764 <z_impl_k_mutex_unlock+0x1a4>)
   3c6aa:	f001 fb87 	bl	3ddbc <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   3c6ae:	68a0      	ldr	r0, [r4, #8]
   3c6b0:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   3c6b2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3c6b6:	4299      	cmp	r1, r3
   3c6b8:	d001      	beq.n	3c6be <z_impl_k_mutex_unlock+0xfe>
		return z_set_prio(mutex->owner, new_prio);
   3c6ba:	f000 ff99 	bl	3d5f0 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   3c6be:	4620      	mov	r0, r4
   3c6c0:	f001 f824 	bl	3d70c <z_unpend_first_thread>
   3c6c4:	4605      	mov	r5, r0
	mutex->owner = new_owner;
   3c6c6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   3c6c8:	b308      	cbz	r0, 3c70e <z_impl_k_mutex_unlock+0x14e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3c6ca:	7b43      	ldrb	r3, [r0, #13]
   3c6cc:	06db      	lsls	r3, r3, #27
   3c6ce:	d103      	bne.n	3c6d8 <z_impl_k_mutex_unlock+0x118>
	if (z_is_thread_ready(thread)) {
   3c6d0:	6983      	ldr	r3, [r0, #24]
   3c6d2:	b90b      	cbnz	r3, 3c6d8 <z_impl_k_mutex_unlock+0x118>
		z_add_thread_to_ready_q(thread);
   3c6d4:	f000 fcaa 	bl	3d02c <z_add_thread_to_ready_q>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3c6d8:	4822      	ldr	r0, [pc, #136]	; (3c764 <z_impl_k_mutex_unlock+0x1a4>)
   3c6da:	f001 fb5f 	bl	3dd9c <z_spin_unlock_valid>
   3c6de:	b960      	cbnz	r0, 3c6fa <z_impl_k_mutex_unlock+0x13a>
   3c6e0:	4924      	ldr	r1, [pc, #144]	; (3c774 <z_impl_k_mutex_unlock+0x1b4>)
   3c6e2:	2372      	movs	r3, #114	; 0x72
   3c6e4:	4a21      	ldr	r2, [pc, #132]	; (3c76c <z_impl_k_mutex_unlock+0x1ac>)
   3c6e6:	4817      	ldr	r0, [pc, #92]	; (3c744 <z_impl_k_mutex_unlock+0x184>)
   3c6e8:	f009 ffb8 	bl	4665c <printk>
   3c6ec:	4822      	ldr	r0, [pc, #136]	; (3c778 <z_impl_k_mutex_unlock+0x1b8>)
   3c6ee:	f009 ffb5 	bl	4665c <printk>
   3c6f2:	2172      	movs	r1, #114	; 0x72
   3c6f4:	481d      	ldr	r0, [pc, #116]	; (3c76c <z_impl_k_mutex_unlock+0x1ac>)
   3c6f6:	f009 ffbe 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3c6fa:	f386 8811 	msr	BASEPRI, r6
   3c6fe:	f3bf 8f6f 	isb	sy
   3c702:	2300      	movs	r3, #0
   3c704:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
   3c706:	f995 300e 	ldrsb.w	r3, [r5, #14]
   3c70a:	6123      	str	r3, [r4, #16]
   3c70c:	e7af      	b.n	3c66e <z_impl_k_mutex_unlock+0xae>
		mutex->lock_count = 0U;
   3c70e:	60e0      	str	r0, [r4, #12]
   3c710:	4814      	ldr	r0, [pc, #80]	; (3c764 <z_impl_k_mutex_unlock+0x1a4>)
   3c712:	f001 fb43 	bl	3dd9c <z_spin_unlock_valid>
   3c716:	b960      	cbnz	r0, 3c732 <z_impl_k_mutex_unlock+0x172>
   3c718:	4916      	ldr	r1, [pc, #88]	; (3c774 <z_impl_k_mutex_unlock+0x1b4>)
   3c71a:	2372      	movs	r3, #114	; 0x72
   3c71c:	4a13      	ldr	r2, [pc, #76]	; (3c76c <z_impl_k_mutex_unlock+0x1ac>)
   3c71e:	4809      	ldr	r0, [pc, #36]	; (3c744 <z_impl_k_mutex_unlock+0x184>)
   3c720:	f009 ff9c 	bl	4665c <printk>
   3c724:	4814      	ldr	r0, [pc, #80]	; (3c778 <z_impl_k_mutex_unlock+0x1b8>)
   3c726:	f009 ff99 	bl	4665c <printk>
   3c72a:	2172      	movs	r1, #114	; 0x72
   3c72c:	480f      	ldr	r0, [pc, #60]	; (3c76c <z_impl_k_mutex_unlock+0x1ac>)
   3c72e:	f009 ffa2 	bl	46676 <assert_post_action>
   3c732:	f386 8811 	msr	BASEPRI, r6
   3c736:	f3bf 8f6f 	isb	sy
   3c73a:	e798      	b.n	3c66e <z_impl_k_mutex_unlock+0xae>
   3c73c:	00050519 	.word	0x00050519
   3c740:	000504f6 	.word	0x000504f6
   3c744:	0004b5bf 	.word	0x0004b5bf
   3c748:	00050481 	.word	0x00050481
   3c74c:	2002a2dc 	.word	0x2002a2dc
   3c750:	00050530 	.word	0x00050530
   3c754:	e000ed00 	.word	0xe000ed00
   3c758:	0005057c 	.word	0x0005057c
   3c75c:	00050550 	.word	0x00050550
   3c760:	00050590 	.word	0x00050590
   3c764:	2002a2d8 	.word	0x2002a2d8
   3c768:	0004bff2 	.word	0x0004bff2
   3c76c:	0004bfcb 	.word	0x0004bfcb
   3c770:	0004c007 	.word	0x0004c007
   3c774:	0004c01c 	.word	0x0004c01c
   3c778:	0004c033 	.word	0x0004c033

0003c77c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   3c77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c780:	4604      	mov	r4, r0
   3c782:	460e      	mov	r6, r1
   3c784:	4690      	mov	r8, r2
   3c786:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3c788:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   3c78c:	f04f 0320 	mov.w	r3, #32
   3c790:	f3ef 8711 	mrs	r7, BASEPRI
   3c794:	f383 8811 	msr	BASEPRI, r3
   3c798:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3c79c:	4628      	mov	r0, r5
   3c79e:	f001 faef 	bl	3dd80 <z_spin_lock_valid>
   3c7a2:	b960      	cbnz	r0, 3c7be <queue_insert+0x42>
   3c7a4:	4932      	ldr	r1, [pc, #200]	; (3c870 <queue_insert+0xf4>)
   3c7a6:	235f      	movs	r3, #95	; 0x5f
   3c7a8:	4a32      	ldr	r2, [pc, #200]	; (3c874 <queue_insert+0xf8>)
   3c7aa:	4833      	ldr	r0, [pc, #204]	; (3c878 <queue_insert+0xfc>)
   3c7ac:	f009 ff56 	bl	4665c <printk>
   3c7b0:	4832      	ldr	r0, [pc, #200]	; (3c87c <queue_insert+0x100>)
   3c7b2:	f009 ff53 	bl	4665c <printk>
   3c7b6:	215f      	movs	r1, #95	; 0x5f
   3c7b8:	482e      	ldr	r0, [pc, #184]	; (3c874 <queue_insert+0xf8>)
   3c7ba:	f009 ff5c 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c7be:	4628      	mov	r0, r5
   3c7c0:	f001 fafc 	bl	3ddbc <z_spin_lock_set_owner>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   3c7c4:	f1b9 0f00 	cmp.w	r9, #0
   3c7c8:	d02c      	beq.n	3c824 <queue_insert+0xa8>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   3c7ca:	2008      	movs	r0, #8
   3c7cc:	f7ff fcbc 	bl	3c148 <z_thread_malloc>
		if (anode == NULL) {
   3c7d0:	b9c0      	cbnz	r0, 3c804 <queue_insert+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3c7d2:	4628      	mov	r0, r5
   3c7d4:	f001 fae2 	bl	3dd9c <z_spin_unlock_valid>
   3c7d8:	b960      	cbnz	r0, 3c7f4 <queue_insert+0x78>
   3c7da:	4929      	ldr	r1, [pc, #164]	; (3c880 <queue_insert+0x104>)
   3c7dc:	2372      	movs	r3, #114	; 0x72
   3c7de:	4a25      	ldr	r2, [pc, #148]	; (3c874 <queue_insert+0xf8>)
   3c7e0:	4825      	ldr	r0, [pc, #148]	; (3c878 <queue_insert+0xfc>)
   3c7e2:	f009 ff3b 	bl	4665c <printk>
   3c7e6:	4827      	ldr	r0, [pc, #156]	; (3c884 <queue_insert+0x108>)
   3c7e8:	f009 ff38 	bl	4665c <printk>
   3c7ec:	2172      	movs	r1, #114	; 0x72
   3c7ee:	4821      	ldr	r0, [pc, #132]	; (3c874 <queue_insert+0xf8>)
   3c7f0:	f009 ff41 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3c7f4:	f387 8811 	msr	BASEPRI, r7
   3c7f8:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   3c7fc:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   3c800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   3c804:	2301      	movs	r3, #1
		anode->data = data;
   3c806:	f8c0 8004 	str.w	r8, [r0, #4]
   3c80a:	6003      	str	r3, [r0, #0]
   3c80c:	6803      	ldr	r3, [r0, #0]
   3c80e:	f003 0303 	and.w	r3, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   3c812:	b95e      	cbnz	r6, 3c82c <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   3c814:	6822      	ldr	r2, [r4, #0]
   3c816:	4313      	orrs	r3, r2
   3c818:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3c81a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   3c81c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3c81e:	b973      	cbnz	r3, 3c83e <queue_insert+0xc2>
	list->tail = node;
   3c820:	6060      	str	r0, [r4, #4]
   3c822:	e00c      	b.n	3c83e <queue_insert+0xc2>
	node->next_and_flags = flags;
   3c824:	f8c8 9000 	str.w	r9, [r8]
   3c828:	4640      	mov	r0, r8
   3c82a:	e7ef      	b.n	3c80c <queue_insert+0x90>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3c82c:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   3c82e:	f032 0203 	bics.w	r2, r2, #3
   3c832:	d115      	bne.n	3c860 <queue_insert+0xe4>
Z_GENLIST_APPEND(sflist, sfnode)
   3c834:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3c836:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   3c838:	b962      	cbnz	r2, 3c854 <queue_insert+0xd8>
	list->head = node;
   3c83a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   3c83e:	2104      	movs	r1, #4
   3c840:	f104 000c 	add.w	r0, r4, #12
   3c844:	f00c fa2a 	bl	48c9c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   3c848:	4628      	mov	r0, r5
   3c84a:	4639      	mov	r1, r7
   3c84c:	f000 f9f8 	bl	3cc40 <z_reschedule>
	return 0;
   3c850:	2000      	movs	r0, #0
   3c852:	e7d5      	b.n	3c800 <queue_insert+0x84>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3c854:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3c856:	f003 0303 	and.w	r3, r3, #3
   3c85a:	4303      	orrs	r3, r0
   3c85c:	6013      	str	r3, [r2, #0]
   3c85e:	e7df      	b.n	3c820 <queue_insert+0xa4>
   3c860:	4313      	orrs	r3, r2
   3c862:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3c864:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3c866:	f003 0303 	and.w	r3, r3, #3
   3c86a:	4318      	orrs	r0, r3
   3c86c:	6030      	str	r0, [r6, #0]
   3c86e:	e7e6      	b.n	3c83e <queue_insert+0xc2>
   3c870:	0004bff2 	.word	0x0004bff2
   3c874:	0004bfcb 	.word	0x0004bfcb
   3c878:	0004b5bf 	.word	0x0004b5bf
   3c87c:	0004c007 	.word	0x0004c007
   3c880:	0004c01c 	.word	0x0004c01c
   3c884:	0004c033 	.word	0x0004c033

0003c888 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   3c888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c88c:	4604      	mov	r4, r0
   3c88e:	b089      	sub	sp, #36	; 0x24
   3c890:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3c892:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   3c896:	f04f 0320 	mov.w	r3, #32
   3c89a:	f3ef 8811 	mrs	r8, BASEPRI
   3c89e:	f383 8811 	msr	BASEPRI, r3
   3c8a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3c8a6:	4628      	mov	r0, r5
   3c8a8:	f001 fa6a 	bl	3dd80 <z_spin_lock_valid>
   3c8ac:	b960      	cbnz	r0, 3c8c8 <z_impl_k_queue_get+0x40>
   3c8ae:	4967      	ldr	r1, [pc, #412]	; (3ca4c <z_impl_k_queue_get+0x1c4>)
   3c8b0:	235f      	movs	r3, #95	; 0x5f
   3c8b2:	4a67      	ldr	r2, [pc, #412]	; (3ca50 <z_impl_k_queue_get+0x1c8>)
   3c8b4:	4867      	ldr	r0, [pc, #412]	; (3ca54 <z_impl_k_queue_get+0x1cc>)
   3c8b6:	f009 fed1 	bl	4665c <printk>
   3c8ba:	4867      	ldr	r0, [pc, #412]	; (3ca58 <z_impl_k_queue_get+0x1d0>)
   3c8bc:	f009 fece 	bl	4665c <printk>
   3c8c0:	215f      	movs	r1, #95	; 0x5f
   3c8c2:	4863      	ldr	r0, [pc, #396]	; (3ca50 <z_impl_k_queue_get+0x1c8>)
   3c8c4:	f009 fed7 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c8c8:	4628      	mov	r0, r5
   3c8ca:	f001 fa77 	bl	3ddbc <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   3c8ce:	6820      	ldr	r0, [r4, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   3c8d0:	b320      	cbz	r0, 3c91c <z_impl_k_queue_get+0x94>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3c8d2:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3c8d4:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3c8d6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3c8da:	4290      	cmp	r0, r2
	list->tail = node;
   3c8dc:	bf08      	it	eq
   3c8de:	6063      	streq	r3, [r4, #4]
	list->head = node;
   3c8e0:	6023      	str	r3, [r4, #0]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   3c8e2:	2101      	movs	r1, #1
   3c8e4:	f00c f88f 	bl	48a06 <z_queue_node_peek>
   3c8e8:	4606      	mov	r6, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3c8ea:	4628      	mov	r0, r5
   3c8ec:	f001 fa56 	bl	3dd9c <z_spin_unlock_valid>
   3c8f0:	b960      	cbnz	r0, 3c90c <z_impl_k_queue_get+0x84>
   3c8f2:	495a      	ldr	r1, [pc, #360]	; (3ca5c <z_impl_k_queue_get+0x1d4>)
   3c8f4:	2372      	movs	r3, #114	; 0x72
   3c8f6:	4a56      	ldr	r2, [pc, #344]	; (3ca50 <z_impl_k_queue_get+0x1c8>)
   3c8f8:	4856      	ldr	r0, [pc, #344]	; (3ca54 <z_impl_k_queue_get+0x1cc>)
   3c8fa:	f009 feaf 	bl	4665c <printk>
   3c8fe:	4858      	ldr	r0, [pc, #352]	; (3ca60 <z_impl_k_queue_get+0x1d8>)
   3c900:	f009 feac 	bl	4665c <printk>
   3c904:	2172      	movs	r1, #114	; 0x72
   3c906:	4852      	ldr	r0, [pc, #328]	; (3ca50 <z_impl_k_queue_get+0x1c8>)
   3c908:	f009 feb5 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3c90c:	f388 8811 	msr	BASEPRI, r8
   3c910:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   3c914:	4630      	mov	r0, r6
   3c916:	b009      	add	sp, #36	; 0x24
   3c918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c91c:	4628      	mov	r0, r5
	if (timeout == K_NO_WAIT) {
   3c91e:	b9af      	cbnz	r7, 3c94c <z_impl_k_queue_get+0xc4>
   3c920:	f001 fa3c 	bl	3dd9c <z_spin_unlock_valid>
   3c924:	b960      	cbnz	r0, 3c940 <z_impl_k_queue_get+0xb8>
   3c926:	494d      	ldr	r1, [pc, #308]	; (3ca5c <z_impl_k_queue_get+0x1d4>)
   3c928:	2372      	movs	r3, #114	; 0x72
   3c92a:	4a49      	ldr	r2, [pc, #292]	; (3ca50 <z_impl_k_queue_get+0x1c8>)
   3c92c:	4849      	ldr	r0, [pc, #292]	; (3ca54 <z_impl_k_queue_get+0x1cc>)
   3c92e:	f009 fe95 	bl	4665c <printk>
   3c932:	484b      	ldr	r0, [pc, #300]	; (3ca60 <z_impl_k_queue_get+0x1d8>)
   3c934:	f009 fe92 	bl	4665c <printk>
   3c938:	2172      	movs	r1, #114	; 0x72
   3c93a:	4845      	ldr	r0, [pc, #276]	; (3ca50 <z_impl_k_queue_get+0x1c8>)
   3c93c:	f009 fe9b 	bl	46676 <assert_post_action>
   3c940:	f388 8811 	msr	BASEPRI, r8
   3c944:	f3bf 8f6f 	isb	sy
			return NULL;
   3c948:	2600      	movs	r6, #0
   3c94a:	e7e3      	b.n	3c914 <z_impl_k_queue_get+0x8c>
   3c94c:	f001 fa26 	bl	3dd9c <z_spin_unlock_valid>
   3c950:	b960      	cbnz	r0, 3c96c <z_impl_k_queue_get+0xe4>
   3c952:	4942      	ldr	r1, [pc, #264]	; (3ca5c <z_impl_k_queue_get+0x1d4>)
   3c954:	2372      	movs	r3, #114	; 0x72
   3c956:	4a3e      	ldr	r2, [pc, #248]	; (3ca50 <z_impl_k_queue_get+0x1c8>)
   3c958:	483e      	ldr	r0, [pc, #248]	; (3ca54 <z_impl_k_queue_get+0x1cc>)
   3c95a:	f009 fe7f 	bl	4665c <printk>
   3c95e:	4840      	ldr	r0, [pc, #256]	; (3ca60 <z_impl_k_queue_get+0x1d8>)
   3c960:	f009 fe7c 	bl	4665c <printk>
   3c964:	2172      	movs	r1, #114	; 0x72
   3c966:	483a      	ldr	r0, [pc, #232]	; (3ca50 <z_impl_k_queue_get+0x1c8>)
   3c968:	f009 fe85 	bl	46676 <assert_post_action>
   3c96c:	f388 8811 	msr	BASEPRI, r8
   3c970:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   3c974:	2200      	movs	r2, #0
   3c976:	4623      	mov	r3, r4
   3c978:	2104      	movs	r1, #4
   3c97a:	a803      	add	r0, sp, #12
   3c97c:	f002 f9e2 	bl	3ed44 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   3c980:	1c7a      	adds	r2, r7, #1
   3c982:	d002      	beq.n	3c98a <z_impl_k_queue_get+0x102>
   3c984:	f00c f932 	bl	48bec <z_impl_k_uptime_get>
   3c988:	4683      	mov	fp, r0
{
   3c98a:	f04f 0900 	mov.w	r9, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3c98e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 3ca50 <z_impl_k_queue_get+0x1c8>
   3c992:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 3ca54 <z_impl_k_queue_get+0x1cc>
		event.state = K_POLL_STATE_NOT_READY;
   3c996:	9b06      	ldr	r3, [sp, #24]
   3c998:	f36f 3310 	bfc	r3, #12, #5
   3c99c:	9306      	str	r3, [sp, #24]
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke3(*(u32_t *)&events, *(u32_t *)&num_events, *(u32_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   3c99e:	2101      	movs	r1, #1
   3c9a0:	eba7 0209 	sub.w	r2, r7, r9
   3c9a4:	a803      	add	r0, sp, #12
   3c9a6:	f002 fa23 	bl	3edf0 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   3c9aa:	b108      	cbz	r0, 3c9b0 <z_impl_k_queue_get+0x128>
   3c9ac:	300b      	adds	r0, #11
   3c9ae:	d1cb      	bne.n	3c948 <z_impl_k_queue_get+0xc0>
	__asm__ volatile(
   3c9b0:	f04f 0320 	mov.w	r3, #32
   3c9b4:	f3ef 8211 	mrs	r2, BASEPRI
   3c9b8:	f383 8811 	msr	BASEPRI, r3
   3c9bc:	f3bf 8f6f 	isb	sy
   3c9c0:	4628      	mov	r0, r5
   3c9c2:	9201      	str	r2, [sp, #4]
   3c9c4:	f001 f9dc 	bl	3dd80 <z_spin_lock_valid>
   3c9c8:	b960      	cbnz	r0, 3c9e4 <z_impl_k_queue_get+0x15c>
   3c9ca:	4920      	ldr	r1, [pc, #128]	; (3ca4c <z_impl_k_queue_get+0x1c4>)
   3c9cc:	235f      	movs	r3, #95	; 0x5f
   3c9ce:	4642      	mov	r2, r8
   3c9d0:	4650      	mov	r0, sl
   3c9d2:	f009 fe43 	bl	4665c <printk>
   3c9d6:	4820      	ldr	r0, [pc, #128]	; (3ca58 <z_impl_k_queue_get+0x1d0>)
   3c9d8:	f009 fe40 	bl	4665c <printk>
   3c9dc:	215f      	movs	r1, #95	; 0x5f
   3c9de:	4640      	mov	r0, r8
   3c9e0:	f009 fe49 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c9e4:	4628      	mov	r0, r5
   3c9e6:	f001 f9e9 	bl	3ddbc <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   3c9ea:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   3c9ec:	b138      	cbz	r0, 3c9fe <z_impl_k_queue_get+0x176>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3c9ee:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3c9f0:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3c9f2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3c9f6:	4290      	cmp	r0, r2
	list->head = node;
   3c9f8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   3c9fa:	bf08      	it	eq
   3c9fc:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   3c9fe:	2101      	movs	r1, #1
   3ca00:	f00c f801 	bl	48a06 <z_queue_node_peek>
   3ca04:	4606      	mov	r6, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3ca06:	4628      	mov	r0, r5
   3ca08:	f001 f9c8 	bl	3dd9c <z_spin_unlock_valid>
   3ca0c:	b960      	cbnz	r0, 3ca28 <z_impl_k_queue_get+0x1a0>
   3ca0e:	4913      	ldr	r1, [pc, #76]	; (3ca5c <z_impl_k_queue_get+0x1d4>)
   3ca10:	2372      	movs	r3, #114	; 0x72
   3ca12:	4642      	mov	r2, r8
   3ca14:	4650      	mov	r0, sl
   3ca16:	f009 fe21 	bl	4665c <printk>
   3ca1a:	4811      	ldr	r0, [pc, #68]	; (3ca60 <z_impl_k_queue_get+0x1d8>)
   3ca1c:	f009 fe1e 	bl	4665c <printk>
   3ca20:	2172      	movs	r1, #114	; 0x72
   3ca22:	4640      	mov	r0, r8
   3ca24:	f009 fe27 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3ca28:	9b01      	ldr	r3, [sp, #4]
   3ca2a:	f383 8811 	msr	BASEPRI, r3
   3ca2e:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   3ca32:	2e00      	cmp	r6, #0
   3ca34:	f47f af6e 	bne.w	3c914 <z_impl_k_queue_get+0x8c>
   3ca38:	1c7b      	adds	r3, r7, #1
   3ca3a:	d0ac      	beq.n	3c996 <z_impl_k_queue_get+0x10e>
	return z_impl_k_uptime_get();
   3ca3c:	f00c f8d6 	bl	48bec <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   3ca40:	eba0 090b 	sub.w	r9, r0, fp
	} while (!val && !done);
   3ca44:	454f      	cmp	r7, r9
   3ca46:	daa6      	bge.n	3c996 <z_impl_k_queue_get+0x10e>
   3ca48:	e77e      	b.n	3c948 <z_impl_k_queue_get+0xc0>
   3ca4a:	bf00      	nop
   3ca4c:	0004bff2 	.word	0x0004bff2
   3ca50:	0004bfcb 	.word	0x0004bfcb
   3ca54:	0004b5bf 	.word	0x0004b5bf
   3ca58:	0004c007 	.word	0x0004c007
   3ca5c:	0004c01c 	.word	0x0004c01c
   3ca60:	0004c033 	.word	0x0004c033

0003ca64 <resched.part.15>:
   3ca64:	f3ef 8005 	mrs	r0, IPSR
   3ca68:	280d      	cmp	r0, #13
   3ca6a:	d809      	bhi.n	3ca80 <resched.part.15+0x1c>
   3ca6c:	b128      	cbz	r0, 3ca7a <resched.part.15+0x16>
   3ca6e:	4b05      	ldr	r3, [pc, #20]	; (3ca84 <resched.part.15+0x20>)
   3ca70:	6858      	ldr	r0, [r3, #4]
   3ca72:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   3ca76:	f3c0 20c0 	ubfx	r0, r0, #11, #1
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
}
   3ca7a:	f080 0001 	eor.w	r0, r0, #1
   3ca7e:	4770      	bx	lr
   3ca80:	2001      	movs	r0, #1
   3ca82:	e7fa      	b.n	3ca7a <resched.part.15+0x16>
   3ca84:	e000ed00 	.word	0xe000ed00

0003ca88 <pended_on.isra.16>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   3ca88:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   3ca8a:	b510      	push	{r4, lr}
   3ca8c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   3ca8e:	b95b      	cbnz	r3, 3caa8 <pended_on.isra.16+0x20>
   3ca90:	4906      	ldr	r1, [pc, #24]	; (3caac <pended_on.isra.16+0x24>)
   3ca92:	4807      	ldr	r0, [pc, #28]	; (3cab0 <pended_on.isra.16+0x28>)
   3ca94:	f240 1383 	movw	r3, #387	; 0x183
   3ca98:	4a06      	ldr	r2, [pc, #24]	; (3cab4 <pended_on.isra.16+0x2c>)
   3ca9a:	f009 fddf 	bl	4665c <printk>
   3ca9e:	f240 1183 	movw	r1, #387	; 0x183
   3caa2:	4804      	ldr	r0, [pc, #16]	; (3cab4 <pended_on.isra.16+0x2c>)
   3caa4:	f009 fde7 	bl	46676 <assert_post_action>
}
   3caa8:	6820      	ldr	r0, [r4, #0]
   3caaa:	bd10      	pop	{r4, pc}
   3caac:	00050603 	.word	0x00050603
   3cab0:	0004b5bf 	.word	0x0004b5bf
   3cab4:	000505e0 	.word	0x000505e0

0003cab8 <z_reset_time_slice>:
{
   3cab8:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   3caba:	4c08      	ldr	r4, [pc, #32]	; (3cadc <z_reset_time_slice+0x24>)
   3cabc:	6823      	ldr	r3, [r4, #0]
   3cabe:	b15b      	cbz	r3, 3cad8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   3cac0:	f7e5 fa8e 	bl	21fe0 <z_clock_elapsed>
   3cac4:	6823      	ldr	r3, [r4, #0]
   3cac6:	4a06      	ldr	r2, [pc, #24]	; (3cae0 <z_reset_time_slice+0x28>)
   3cac8:	4418      	add	r0, r3
   3caca:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   3cacc:	2100      	movs	r1, #0
}
   3cace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   3cad2:	4618      	mov	r0, r3
   3cad4:	f001 bdfe 	b.w	3e6d4 <z_set_timeout_expiry>
}
   3cad8:	bd10      	pop	{r4, pc}
   3cada:	bf00      	nop
   3cadc:	2002a31c 	.word	0x2002a31c
   3cae0:	2002a2dc 	.word	0x2002a2dc

0003cae4 <k_sched_time_slice_set>:
{
   3cae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3cae6:	4607      	mov	r7, r0
   3cae8:	460d      	mov	r5, r1
	__asm__ volatile(
   3caea:	f04f 0320 	mov.w	r3, #32
   3caee:	f3ef 8411 	mrs	r4, BASEPRI
   3caf2:	f383 8811 	msr	BASEPRI, r3
   3caf6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3cafa:	481f      	ldr	r0, [pc, #124]	; (3cb78 <k_sched_time_slice_set+0x94>)
   3cafc:	f001 f940 	bl	3dd80 <z_spin_lock_valid>
   3cb00:	b960      	cbnz	r0, 3cb1c <k_sched_time_slice_set+0x38>
   3cb02:	491e      	ldr	r1, [pc, #120]	; (3cb7c <k_sched_time_slice_set+0x98>)
   3cb04:	235f      	movs	r3, #95	; 0x5f
   3cb06:	4a1e      	ldr	r2, [pc, #120]	; (3cb80 <k_sched_time_slice_set+0x9c>)
   3cb08:	481e      	ldr	r0, [pc, #120]	; (3cb84 <k_sched_time_slice_set+0xa0>)
   3cb0a:	f009 fda7 	bl	4665c <printk>
   3cb0e:	481e      	ldr	r0, [pc, #120]	; (3cb88 <k_sched_time_slice_set+0xa4>)
   3cb10:	f009 fda4 	bl	4665c <printk>
   3cb14:	215f      	movs	r1, #95	; 0x5f
   3cb16:	481a      	ldr	r0, [pc, #104]	; (3cb80 <k_sched_time_slice_set+0x9c>)
   3cb18:	f009 fdad 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3cb1c:	4816      	ldr	r0, [pc, #88]	; (3cb78 <k_sched_time_slice_set+0x94>)
   3cb1e:	f001 f94d 	bl	3ddbc <z_spin_lock_set_owner>

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
   3cb22:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   3cb26:	2200      	movs	r2, #0
   3cb28:	f240 30e7 	movw	r0, #999	; 0x3e7
   3cb2c:	2100      	movs	r1, #0
   3cb2e:	4b17      	ldr	r3, [pc, #92]	; (3cb8c <k_sched_time_slice_set+0xa8>)
   3cb30:	fbc6 0107 	smlal	r0, r1, r6, r7
   3cb34:	611a      	str	r2, [r3, #16]
   3cb36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3cb3a:	2300      	movs	r3, #0
   3cb3c:	f7dc f8ee 	bl	18d1c <__aeabi_ldivmod>
   3cb40:	4b13      	ldr	r3, [pc, #76]	; (3cb90 <k_sched_time_slice_set+0xac>)
   3cb42:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   3cb44:	4b13      	ldr	r3, [pc, #76]	; (3cb94 <k_sched_time_slice_set+0xb0>)
   3cb46:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   3cb48:	f7ff ffb6 	bl	3cab8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3cb4c:	480a      	ldr	r0, [pc, #40]	; (3cb78 <k_sched_time_slice_set+0x94>)
   3cb4e:	f001 f925 	bl	3dd9c <z_spin_unlock_valid>
   3cb52:	b960      	cbnz	r0, 3cb6e <k_sched_time_slice_set+0x8a>
   3cb54:	4910      	ldr	r1, [pc, #64]	; (3cb98 <k_sched_time_slice_set+0xb4>)
   3cb56:	2372      	movs	r3, #114	; 0x72
   3cb58:	4a09      	ldr	r2, [pc, #36]	; (3cb80 <k_sched_time_slice_set+0x9c>)
   3cb5a:	480a      	ldr	r0, [pc, #40]	; (3cb84 <k_sched_time_slice_set+0xa0>)
   3cb5c:	f009 fd7e 	bl	4665c <printk>
   3cb60:	480e      	ldr	r0, [pc, #56]	; (3cb9c <k_sched_time_slice_set+0xb8>)
   3cb62:	f009 fd7b 	bl	4665c <printk>
   3cb66:	2172      	movs	r1, #114	; 0x72
   3cb68:	4805      	ldr	r0, [pc, #20]	; (3cb80 <k_sched_time_slice_set+0x9c>)
   3cb6a:	f009 fd84 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3cb6e:	f384 8811 	msr	BASEPRI, r4
   3cb72:	f3bf 8f6f 	isb	sy
}
   3cb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3cb78:	2002a314 	.word	0x2002a314
   3cb7c:	0004bff2 	.word	0x0004bff2
   3cb80:	0004bfcb 	.word	0x0004bfcb
   3cb84:	0004b5bf 	.word	0x0004b5bf
   3cb88:	0004c007 	.word	0x0004c007
   3cb8c:	2002a2dc 	.word	0x2002a2dc
   3cb90:	2002a31c 	.word	0x2002a31c
   3cb94:	2002a318 	.word	0x2002a318
   3cb98:	0004c01c 	.word	0x0004c01c
   3cb9c:	0004c033 	.word	0x0004c033

0003cba0 <z_unpend_thread_no_timeout>:
{
   3cba0:	b538      	push	{r3, r4, r5, lr}
   3cba2:	4604      	mov	r4, r0
	__asm__ volatile(
   3cba4:	f04f 0320 	mov.w	r3, #32
   3cba8:	f3ef 8511 	mrs	r5, BASEPRI
   3cbac:	f383 8811 	msr	BASEPRI, r3
   3cbb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3cbb4:	481b      	ldr	r0, [pc, #108]	; (3cc24 <z_unpend_thread_no_timeout+0x84>)
   3cbb6:	f001 f8e3 	bl	3dd80 <z_spin_lock_valid>
   3cbba:	b960      	cbnz	r0, 3cbd6 <z_unpend_thread_no_timeout+0x36>
   3cbbc:	491a      	ldr	r1, [pc, #104]	; (3cc28 <z_unpend_thread_no_timeout+0x88>)
   3cbbe:	235f      	movs	r3, #95	; 0x5f
   3cbc0:	4a1a      	ldr	r2, [pc, #104]	; (3cc2c <z_unpend_thread_no_timeout+0x8c>)
   3cbc2:	481b      	ldr	r0, [pc, #108]	; (3cc30 <z_unpend_thread_no_timeout+0x90>)
   3cbc4:	f009 fd4a 	bl	4665c <printk>
   3cbc8:	481a      	ldr	r0, [pc, #104]	; (3cc34 <z_unpend_thread_no_timeout+0x94>)
   3cbca:	f009 fd47 	bl	4665c <printk>
   3cbce:	215f      	movs	r1, #95	; 0x5f
   3cbd0:	4816      	ldr	r0, [pc, #88]	; (3cc2c <z_unpend_thread_no_timeout+0x8c>)
   3cbd2:	f009 fd50 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3cbd6:	4813      	ldr	r0, [pc, #76]	; (3cc24 <z_unpend_thread_no_timeout+0x84>)
   3cbd8:	f001 f8f0 	bl	3ddbc <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3cbdc:	f104 0008 	add.w	r0, r4, #8
   3cbe0:	f7ff ff52 	bl	3ca88 <pended_on.isra.16>
   3cbe4:	4621      	mov	r1, r4
   3cbe6:	f000 f8e5 	bl	3cdb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3cbea:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3cbec:	480d      	ldr	r0, [pc, #52]	; (3cc24 <z_unpend_thread_no_timeout+0x84>)
   3cbee:	f023 0302 	bic.w	r3, r3, #2
   3cbf2:	7363      	strb	r3, [r4, #13]
   3cbf4:	f001 f8d2 	bl	3dd9c <z_spin_unlock_valid>
   3cbf8:	b960      	cbnz	r0, 3cc14 <z_unpend_thread_no_timeout+0x74>
   3cbfa:	490f      	ldr	r1, [pc, #60]	; (3cc38 <z_unpend_thread_no_timeout+0x98>)
   3cbfc:	2372      	movs	r3, #114	; 0x72
   3cbfe:	4a0b      	ldr	r2, [pc, #44]	; (3cc2c <z_unpend_thread_no_timeout+0x8c>)
   3cc00:	480b      	ldr	r0, [pc, #44]	; (3cc30 <z_unpend_thread_no_timeout+0x90>)
   3cc02:	f009 fd2b 	bl	4665c <printk>
   3cc06:	480d      	ldr	r0, [pc, #52]	; (3cc3c <z_unpend_thread_no_timeout+0x9c>)
   3cc08:	f009 fd28 	bl	4665c <printk>
   3cc0c:	2172      	movs	r1, #114	; 0x72
   3cc0e:	4807      	ldr	r0, [pc, #28]	; (3cc2c <z_unpend_thread_no_timeout+0x8c>)
   3cc10:	f009 fd31 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3cc14:	f385 8811 	msr	BASEPRI, r5
   3cc18:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   3cc1c:	2300      	movs	r3, #0
   3cc1e:	60a3      	str	r3, [r4, #8]
}
   3cc20:	bd38      	pop	{r3, r4, r5, pc}
   3cc22:	bf00      	nop
   3cc24:	2002a314 	.word	0x2002a314
   3cc28:	0004bff2 	.word	0x0004bff2
   3cc2c:	0004bfcb 	.word	0x0004bfcb
   3cc30:	0004b5bf 	.word	0x0004b5bf
   3cc34:	0004c007 	.word	0x0004c007
   3cc38:	0004c01c 	.word	0x0004c01c
   3cc3c:	0004c033 	.word	0x0004c033

0003cc40 <z_reschedule>:

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   3cc40:	b510      	push	{r4, lr}
   3cc42:	4602      	mov	r2, r0
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   3cc44:	460c      	mov	r4, r1
   3cc46:	b9c1      	cbnz	r1, 3cc7a <z_reschedule+0x3a>
   3cc48:	f7ff ff0c 	bl	3ca64 <resched.part.15>
	if (resched(key.key)) {
   3cc4c:	b1a8      	cbz	r0, 3cc7a <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3cc4e:	4610      	mov	r0, r2
   3cc50:	f001 f8a4 	bl	3dd9c <z_spin_unlock_valid>
   3cc54:	b960      	cbnz	r0, 3cc70 <z_reschedule+0x30>
   3cc56:	4914      	ldr	r1, [pc, #80]	; (3cca8 <z_reschedule+0x68>)
   3cc58:	2389      	movs	r3, #137	; 0x89
   3cc5a:	4a14      	ldr	r2, [pc, #80]	; (3ccac <z_reschedule+0x6c>)
   3cc5c:	4814      	ldr	r0, [pc, #80]	; (3ccb0 <z_reschedule+0x70>)
   3cc5e:	f009 fcfd 	bl	4665c <printk>
   3cc62:	4814      	ldr	r0, [pc, #80]	; (3ccb4 <z_reschedule+0x74>)
   3cc64:	f009 fcfa 	bl	4665c <printk>
   3cc68:	2189      	movs	r1, #137	; 0x89
   3cc6a:	4810      	ldr	r0, [pc, #64]	; (3ccac <z_reschedule+0x6c>)
   3cc6c:	f009 fd03 	bl	46676 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   3cc70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3cc74:	2000      	movs	r0, #0
   3cc76:	f7e5 bc4f 	b.w	22518 <z_arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3cc7a:	4610      	mov	r0, r2
   3cc7c:	f001 f88e 	bl	3dd9c <z_spin_unlock_valid>
   3cc80:	b960      	cbnz	r0, 3cc9c <z_reschedule+0x5c>
   3cc82:	4909      	ldr	r1, [pc, #36]	; (3cca8 <z_reschedule+0x68>)
   3cc84:	2372      	movs	r3, #114	; 0x72
   3cc86:	4a09      	ldr	r2, [pc, #36]	; (3ccac <z_reschedule+0x6c>)
   3cc88:	4809      	ldr	r0, [pc, #36]	; (3ccb0 <z_reschedule+0x70>)
   3cc8a:	f009 fce7 	bl	4665c <printk>
   3cc8e:	4809      	ldr	r0, [pc, #36]	; (3ccb4 <z_reschedule+0x74>)
   3cc90:	f009 fce4 	bl	4665c <printk>
   3cc94:	2172      	movs	r1, #114	; 0x72
   3cc96:	4805      	ldr	r0, [pc, #20]	; (3ccac <z_reschedule+0x6c>)
   3cc98:	f009 fced 	bl	46676 <assert_post_action>
   3cc9c:	f384 8811 	msr	BASEPRI, r4
   3cca0:	f3bf 8f6f 	isb	sy
   3cca4:	bd10      	pop	{r4, pc}
   3cca6:	bf00      	nop
   3cca8:	0004c01c 	.word	0x0004c01c
   3ccac:	0004bfcb 	.word	0x0004bfcb
   3ccb0:	0004b5bf 	.word	0x0004b5bf
   3ccb4:	0004c033 	.word	0x0004c033

0003ccb8 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   3ccb8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3ccba:	f04f 0320 	mov.w	r3, #32
   3ccbe:	f3ef 8511 	mrs	r5, BASEPRI
   3ccc2:	f383 8811 	msr	BASEPRI, r3
   3ccc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3ccca:	482d      	ldr	r0, [pc, #180]	; (3cd80 <k_sched_lock+0xc8>)
   3cccc:	f001 f858 	bl	3dd80 <z_spin_lock_valid>
   3ccd0:	b960      	cbnz	r0, 3ccec <k_sched_lock+0x34>
   3ccd2:	492c      	ldr	r1, [pc, #176]	; (3cd84 <k_sched_lock+0xcc>)
   3ccd4:	235f      	movs	r3, #95	; 0x5f
   3ccd6:	4a2c      	ldr	r2, [pc, #176]	; (3cd88 <k_sched_lock+0xd0>)
   3ccd8:	482c      	ldr	r0, [pc, #176]	; (3cd8c <k_sched_lock+0xd4>)
   3ccda:	f009 fcbf 	bl	4665c <printk>
   3ccde:	482c      	ldr	r0, [pc, #176]	; (3cd90 <k_sched_lock+0xd8>)
   3cce0:	f009 fcbc 	bl	4665c <printk>
   3cce4:	215f      	movs	r1, #95	; 0x5f
   3cce6:	4828      	ldr	r0, [pc, #160]	; (3cd88 <k_sched_lock+0xd0>)
   3cce8:	f009 fcc5 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ccec:	4824      	ldr	r0, [pc, #144]	; (3cd80 <k_sched_lock+0xc8>)
   3ccee:	f001 f865 	bl	3ddbc <z_spin_lock_set_owner>
   3ccf2:	f3ef 8305 	mrs	r3, IPSR
   3ccf6:	2b0d      	cmp	r3, #13
   3ccf8:	d804      	bhi.n	3cd04 <k_sched_lock+0x4c>
   3ccfa:	b193      	cbz	r3, 3cd22 <k_sched_lock+0x6a>
   3ccfc:	4b25      	ldr	r3, [pc, #148]	; (3cd94 <k_sched_lock+0xdc>)
   3ccfe:	685b      	ldr	r3, [r3, #4]
   3cd00:	051b      	lsls	r3, r3, #20
   3cd02:	d40e      	bmi.n	3cd22 <k_sched_lock+0x6a>
	__ASSERT(!z_arch_is_in_isr(), "");
   3cd04:	4924      	ldr	r1, [pc, #144]	; (3cd98 <k_sched_lock+0xe0>)
   3cd06:	f44f 7386 	mov.w	r3, #268	; 0x10c
   3cd0a:	4a24      	ldr	r2, [pc, #144]	; (3cd9c <k_sched_lock+0xe4>)
   3cd0c:	481f      	ldr	r0, [pc, #124]	; (3cd8c <k_sched_lock+0xd4>)
   3cd0e:	f009 fca5 	bl	4665c <printk>
   3cd12:	4823      	ldr	r0, [pc, #140]	; (3cda0 <k_sched_lock+0xe8>)
   3cd14:	f009 fca2 	bl	4665c <printk>
   3cd18:	f44f 7186 	mov.w	r1, #268	; 0x10c
   3cd1c:	481f      	ldr	r0, [pc, #124]	; (3cd9c <k_sched_lock+0xe4>)
   3cd1e:	f009 fcaa 	bl	46676 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   3cd22:	4c20      	ldr	r4, [pc, #128]	; (3cda4 <k_sched_lock+0xec>)
   3cd24:	68a2      	ldr	r2, [r4, #8]
   3cd26:	7bd2      	ldrb	r2, [r2, #15]
   3cd28:	2a01      	cmp	r2, #1
   3cd2a:	d10e      	bne.n	3cd4a <k_sched_lock+0x92>
   3cd2c:	491e      	ldr	r1, [pc, #120]	; (3cda8 <k_sched_lock+0xf0>)
   3cd2e:	f240 130d 	movw	r3, #269	; 0x10d
   3cd32:	4a1a      	ldr	r2, [pc, #104]	; (3cd9c <k_sched_lock+0xe4>)
   3cd34:	4815      	ldr	r0, [pc, #84]	; (3cd8c <k_sched_lock+0xd4>)
   3cd36:	f009 fc91 	bl	4665c <printk>
   3cd3a:	4819      	ldr	r0, [pc, #100]	; (3cda0 <k_sched_lock+0xe8>)
   3cd3c:	f009 fc8e 	bl	4665c <printk>
   3cd40:	f240 110d 	movw	r1, #269	; 0x10d
   3cd44:	4815      	ldr	r0, [pc, #84]	; (3cd9c <k_sched_lock+0xe4>)
   3cd46:	f009 fc96 	bl	46676 <assert_post_action>
	--_current->base.sched_locked;
   3cd4a:	68a2      	ldr	r2, [r4, #8]
   3cd4c:	7bd3      	ldrb	r3, [r2, #15]
   3cd4e:	3b01      	subs	r3, #1
   3cd50:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3cd52:	480b      	ldr	r0, [pc, #44]	; (3cd80 <k_sched_lock+0xc8>)
   3cd54:	f001 f822 	bl	3dd9c <z_spin_unlock_valid>
   3cd58:	b960      	cbnz	r0, 3cd74 <k_sched_lock+0xbc>
   3cd5a:	4914      	ldr	r1, [pc, #80]	; (3cdac <k_sched_lock+0xf4>)
   3cd5c:	2372      	movs	r3, #114	; 0x72
   3cd5e:	4a0a      	ldr	r2, [pc, #40]	; (3cd88 <k_sched_lock+0xd0>)
   3cd60:	480a      	ldr	r0, [pc, #40]	; (3cd8c <k_sched_lock+0xd4>)
   3cd62:	f009 fc7b 	bl	4665c <printk>
   3cd66:	4812      	ldr	r0, [pc, #72]	; (3cdb0 <k_sched_lock+0xf8>)
   3cd68:	f009 fc78 	bl	4665c <printk>
   3cd6c:	2172      	movs	r1, #114	; 0x72
   3cd6e:	4806      	ldr	r0, [pc, #24]	; (3cd88 <k_sched_lock+0xd0>)
   3cd70:	f009 fc81 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3cd74:	f385 8811 	msr	BASEPRI, r5
   3cd78:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   3cd7c:	bd38      	pop	{r3, r4, r5, pc}
   3cd7e:	bf00      	nop
   3cd80:	2002a314 	.word	0x2002a314
   3cd84:	0004bff2 	.word	0x0004bff2
   3cd88:	0004bfcb 	.word	0x0004bfcb
   3cd8c:	0004b5bf 	.word	0x0004b5bf
   3cd90:	0004c007 	.word	0x0004c007
   3cd94:	e000ed00 	.word	0xe000ed00
   3cd98:	0005057c 	.word	0x0005057c
   3cd9c:	00050550 	.word	0x00050550
   3cda0:	00050481 	.word	0x00050481
   3cda4:	2002a2dc 	.word	0x2002a2dc
   3cda8:	00050590 	.word	0x00050590
   3cdac:	0004c01c 	.word	0x0004c01c
   3cdb0:	0004c033 	.word	0x0004c033

0003cdb4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3cdb4:	4b12      	ldr	r3, [pc, #72]	; (3ce00 <z_priq_dumb_remove+0x4c>)
{
   3cdb6:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3cdb8:	f103 0228 	add.w	r2, r3, #40	; 0x28
   3cdbc:	4282      	cmp	r2, r0
{
   3cdbe:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3cdc0:	d105      	bne.n	3cdce <z_priq_dumb_remove+0x1a>
   3cdc2:	689b      	ldr	r3, [r3, #8]
   3cdc4:	428b      	cmp	r3, r1
   3cdc6:	d102      	bne.n	3cdce <z_priq_dumb_remove+0x1a>
   3cdc8:	7b4b      	ldrb	r3, [r1, #13]
   3cdca:	06db      	lsls	r3, r3, #27
   3cdcc:	d116      	bne.n	3cdfc <z_priq_dumb_remove+0x48>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3cdce:	4b0d      	ldr	r3, [pc, #52]	; (3ce04 <z_priq_dumb_remove+0x50>)
   3cdd0:	429c      	cmp	r4, r3
   3cdd2:	d10b      	bne.n	3cdec <z_priq_dumb_remove+0x38>
   3cdd4:	490c      	ldr	r1, [pc, #48]	; (3ce08 <z_priq_dumb_remove+0x54>)
   3cdd6:	480d      	ldr	r0, [pc, #52]	; (3ce0c <z_priq_dumb_remove+0x58>)
   3cdd8:	f44f 7325 	mov.w	r3, #660	; 0x294
   3cddc:	4a0c      	ldr	r2, [pc, #48]	; (3ce10 <z_priq_dumb_remove+0x5c>)
   3cdde:	f009 fc3d 	bl	4665c <printk>
   3cde2:	f44f 7125 	mov.w	r1, #660	; 0x294
   3cde6:	480a      	ldr	r0, [pc, #40]	; (3ce10 <z_priq_dumb_remove+0x5c>)
   3cde8:	f009 fc45 	bl	46676 <assert_post_action>
	node->prev->next = node->next;
   3cdec:	e9d4 2300 	ldrd	r2, r3, [r4]
   3cdf0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   3cdf2:	6822      	ldr	r2, [r4, #0]
   3cdf4:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   3cdf6:	2300      	movs	r3, #0
	node->prev = NULL;
   3cdf8:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   3cdfc:	bd10      	pop	{r4, pc}
   3cdfe:	bf00      	nop
   3ce00:	2002a2dc 	.word	0x2002a2dc
   3ce04:	2002610c 	.word	0x2002610c
   3ce08:	00050639 	.word	0x00050639
   3ce0c:	0004b5bf 	.word	0x0004b5bf
   3ce10:	000505e0 	.word	0x000505e0

0003ce14 <z_unpend_thread>:
{
   3ce14:	b538      	push	{r3, r4, r5, lr}
   3ce16:	4604      	mov	r4, r0
	__asm__ volatile(
   3ce18:	f04f 0320 	mov.w	r3, #32
   3ce1c:	f3ef 8511 	mrs	r5, BASEPRI
   3ce20:	f383 8811 	msr	BASEPRI, r3
   3ce24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3ce28:	481d      	ldr	r0, [pc, #116]	; (3cea0 <z_unpend_thread+0x8c>)
   3ce2a:	f000 ffa9 	bl	3dd80 <z_spin_lock_valid>
   3ce2e:	b960      	cbnz	r0, 3ce4a <z_unpend_thread+0x36>
   3ce30:	491c      	ldr	r1, [pc, #112]	; (3cea4 <z_unpend_thread+0x90>)
   3ce32:	235f      	movs	r3, #95	; 0x5f
   3ce34:	4a1c      	ldr	r2, [pc, #112]	; (3cea8 <z_unpend_thread+0x94>)
   3ce36:	481d      	ldr	r0, [pc, #116]	; (3ceac <z_unpend_thread+0x98>)
   3ce38:	f009 fc10 	bl	4665c <printk>
   3ce3c:	481c      	ldr	r0, [pc, #112]	; (3ceb0 <z_unpend_thread+0x9c>)
   3ce3e:	f009 fc0d 	bl	4665c <printk>
   3ce42:	215f      	movs	r1, #95	; 0x5f
   3ce44:	4818      	ldr	r0, [pc, #96]	; (3cea8 <z_unpend_thread+0x94>)
   3ce46:	f009 fc16 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ce4a:	4815      	ldr	r0, [pc, #84]	; (3cea0 <z_unpend_thread+0x8c>)
   3ce4c:	f000 ffb6 	bl	3ddbc <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3ce50:	f104 0008 	add.w	r0, r4, #8
   3ce54:	f7ff fe18 	bl	3ca88 <pended_on.isra.16>
   3ce58:	4621      	mov	r1, r4
   3ce5a:	f7ff ffab 	bl	3cdb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3ce5e:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3ce60:	480f      	ldr	r0, [pc, #60]	; (3cea0 <z_unpend_thread+0x8c>)
   3ce62:	f023 0302 	bic.w	r3, r3, #2
   3ce66:	7363      	strb	r3, [r4, #13]
   3ce68:	f000 ff98 	bl	3dd9c <z_spin_unlock_valid>
   3ce6c:	b960      	cbnz	r0, 3ce88 <z_unpend_thread+0x74>
   3ce6e:	4911      	ldr	r1, [pc, #68]	; (3ceb4 <z_unpend_thread+0xa0>)
   3ce70:	2372      	movs	r3, #114	; 0x72
   3ce72:	4a0d      	ldr	r2, [pc, #52]	; (3cea8 <z_unpend_thread+0x94>)
   3ce74:	480d      	ldr	r0, [pc, #52]	; (3ceac <z_unpend_thread+0x98>)
   3ce76:	f009 fbf1 	bl	4665c <printk>
   3ce7a:	480f      	ldr	r0, [pc, #60]	; (3ceb8 <z_unpend_thread+0xa4>)
   3ce7c:	f009 fbee 	bl	4665c <printk>
   3ce80:	2172      	movs	r1, #114	; 0x72
   3ce82:	4809      	ldr	r0, [pc, #36]	; (3cea8 <z_unpend_thread+0x94>)
   3ce84:	f009 fbf7 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3ce88:	f385 8811 	msr	BASEPRI, r5
   3ce8c:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   3ce90:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   3ce92:	f104 0018 	add.w	r0, r4, #24
   3ce96:	60a3      	str	r3, [r4, #8]
}
   3ce98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3ce9c:	f001 bb88 	b.w	3e5b0 <z_abort_timeout>
   3cea0:	2002a314 	.word	0x2002a314
   3cea4:	0004bff2 	.word	0x0004bff2
   3cea8:	0004bfcb 	.word	0x0004bfcb
   3ceac:	0004b5bf 	.word	0x0004b5bf
   3ceb0:	0004c007 	.word	0x0004c007
   3ceb4:	0004c01c 	.word	0x0004c01c
   3ceb8:	0004c033 	.word	0x0004c033

0003cebc <update_cache>:
{
   3cebc:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   3cebe:	4c15      	ldr	r4, [pc, #84]	; (3cf14 <update_cache+0x58>)
{
   3cec0:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   3cec2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   3cec6:	f00b fde4 	bl	48a92 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   3ceca:	4605      	mov	r5, r0
   3cecc:	b900      	cbnz	r0, 3ced0 <update_cache+0x14>
   3cece:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   3ced0:	b9ca      	cbnz	r2, 3cf06 <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
   3ced2:	68a3      	ldr	r3, [r4, #8]
   3ced4:	b963      	cbnz	r3, 3cef0 <update_cache+0x34>
   3ced6:	4910      	ldr	r1, [pc, #64]	; (3cf18 <update_cache+0x5c>)
   3ced8:	2375      	movs	r3, #117	; 0x75
   3ceda:	4a10      	ldr	r2, [pc, #64]	; (3cf1c <update_cache+0x60>)
   3cedc:	4810      	ldr	r0, [pc, #64]	; (3cf20 <update_cache+0x64>)
   3cede:	f009 fbbd 	bl	4665c <printk>
   3cee2:	4810      	ldr	r0, [pc, #64]	; (3cf24 <update_cache+0x68>)
   3cee4:	f009 fbba 	bl	4665c <printk>
   3cee8:	2175      	movs	r1, #117	; 0x75
   3ceea:	480c      	ldr	r0, [pc, #48]	; (3cf1c <update_cache+0x60>)
   3ceec:	f009 fbc3 	bl	46676 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   3cef0:	68a3      	ldr	r3, [r4, #8]
   3cef2:	7b5a      	ldrb	r2, [r3, #13]
   3cef4:	06d2      	lsls	r2, r2, #27
   3cef6:	d106      	bne.n	3cf06 <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   3cef8:	69aa      	ldr	r2, [r5, #24]
   3cefa:	b922      	cbnz	r2, 3cf06 <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(th)) {
   3cefc:	89da      	ldrh	r2, [r3, #14]
   3cefe:	2a7f      	cmp	r2, #127	; 0x7f
   3cf00:	d901      	bls.n	3cf06 <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
   3cf02:	6263      	str	r3, [r4, #36]	; 0x24
}
   3cf04:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   3cf06:	68a3      	ldr	r3, [r4, #8]
   3cf08:	42ab      	cmp	r3, r5
   3cf0a:	d001      	beq.n	3cf10 <update_cache+0x54>
			z_reset_time_slice();
   3cf0c:	f7ff fdd4 	bl	3cab8 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   3cf10:	6265      	str	r5, [r4, #36]	; 0x24
}
   3cf12:	e7f7      	b.n	3cf04 <update_cache+0x48>
   3cf14:	2002a2dc 	.word	0x2002a2dc
   3cf18:	0005061a 	.word	0x0005061a
   3cf1c:	000505e0 	.word	0x000505e0
   3cf20:	0004b5bf 	.word	0x0004b5bf
   3cf24:	00050481 	.word	0x00050481

0003cf28 <k_sched_unlock>:
{
   3cf28:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   3cf2a:	4c33      	ldr	r4, [pc, #204]	; (3cff8 <k_sched_unlock+0xd0>)
   3cf2c:	68a2      	ldr	r2, [r4, #8]
   3cf2e:	7bd2      	ldrb	r2, [r2, #15]
   3cf30:	b972      	cbnz	r2, 3cf50 <k_sched_unlock+0x28>
   3cf32:	4932      	ldr	r1, [pc, #200]	; (3cffc <k_sched_unlock+0xd4>)
   3cf34:	f240 232d 	movw	r3, #557	; 0x22d
   3cf38:	4a31      	ldr	r2, [pc, #196]	; (3d000 <k_sched_unlock+0xd8>)
   3cf3a:	4832      	ldr	r0, [pc, #200]	; (3d004 <k_sched_unlock+0xdc>)
   3cf3c:	f009 fb8e 	bl	4665c <printk>
   3cf40:	4831      	ldr	r0, [pc, #196]	; (3d008 <k_sched_unlock+0xe0>)
   3cf42:	f009 fb8b 	bl	4665c <printk>
   3cf46:	f240 212d 	movw	r1, #557	; 0x22d
   3cf4a:	482d      	ldr	r0, [pc, #180]	; (3d000 <k_sched_unlock+0xd8>)
   3cf4c:	f009 fb93 	bl	46676 <assert_post_action>
   3cf50:	f3ef 8305 	mrs	r3, IPSR
   3cf54:	2b0d      	cmp	r3, #13
   3cf56:	d804      	bhi.n	3cf62 <k_sched_unlock+0x3a>
   3cf58:	b193      	cbz	r3, 3cf80 <k_sched_unlock+0x58>
   3cf5a:	4b2c      	ldr	r3, [pc, #176]	; (3d00c <k_sched_unlock+0xe4>)
   3cf5c:	685b      	ldr	r3, [r3, #4]
   3cf5e:	051b      	lsls	r3, r3, #20
   3cf60:	d40e      	bmi.n	3cf80 <k_sched_unlock+0x58>
	__ASSERT(!z_arch_is_in_isr(), "");
   3cf62:	492b      	ldr	r1, [pc, #172]	; (3d010 <k_sched_unlock+0xe8>)
   3cf64:	f240 232e 	movw	r3, #558	; 0x22e
   3cf68:	4a25      	ldr	r2, [pc, #148]	; (3d000 <k_sched_unlock+0xd8>)
   3cf6a:	4826      	ldr	r0, [pc, #152]	; (3d004 <k_sched_unlock+0xdc>)
   3cf6c:	f009 fb76 	bl	4665c <printk>
   3cf70:	4825      	ldr	r0, [pc, #148]	; (3d008 <k_sched_unlock+0xe0>)
   3cf72:	f009 fb73 	bl	4665c <printk>
   3cf76:	f240 212e 	movw	r1, #558	; 0x22e
   3cf7a:	4821      	ldr	r0, [pc, #132]	; (3d000 <k_sched_unlock+0xd8>)
   3cf7c:	f009 fb7b 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3cf80:	f04f 0320 	mov.w	r3, #32
   3cf84:	f3ef 8511 	mrs	r5, BASEPRI
   3cf88:	f383 8811 	msr	BASEPRI, r3
   3cf8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3cf90:	4820      	ldr	r0, [pc, #128]	; (3d014 <k_sched_unlock+0xec>)
   3cf92:	f000 fef5 	bl	3dd80 <z_spin_lock_valid>
   3cf96:	b960      	cbnz	r0, 3cfb2 <k_sched_unlock+0x8a>
   3cf98:	491f      	ldr	r1, [pc, #124]	; (3d018 <k_sched_unlock+0xf0>)
   3cf9a:	235f      	movs	r3, #95	; 0x5f
   3cf9c:	4a1f      	ldr	r2, [pc, #124]	; (3d01c <k_sched_unlock+0xf4>)
   3cf9e:	4819      	ldr	r0, [pc, #100]	; (3d004 <k_sched_unlock+0xdc>)
   3cfa0:	f009 fb5c 	bl	4665c <printk>
   3cfa4:	481e      	ldr	r0, [pc, #120]	; (3d020 <k_sched_unlock+0xf8>)
   3cfa6:	f009 fb59 	bl	4665c <printk>
   3cfaa:	215f      	movs	r1, #95	; 0x5f
   3cfac:	481b      	ldr	r0, [pc, #108]	; (3d01c <k_sched_unlock+0xf4>)
   3cfae:	f009 fb62 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3cfb2:	4818      	ldr	r0, [pc, #96]	; (3d014 <k_sched_unlock+0xec>)
   3cfb4:	f000 ff02 	bl	3ddbc <z_spin_lock_set_owner>
		++_current->base.sched_locked;
   3cfb8:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   3cfba:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   3cfbc:	7bd3      	ldrb	r3, [r2, #15]
   3cfbe:	3301      	adds	r3, #1
   3cfc0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   3cfc2:	f7ff ff7b 	bl	3cebc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3cfc6:	4813      	ldr	r0, [pc, #76]	; (3d014 <k_sched_unlock+0xec>)
   3cfc8:	f000 fee8 	bl	3dd9c <z_spin_unlock_valid>
   3cfcc:	b960      	cbnz	r0, 3cfe8 <k_sched_unlock+0xc0>
   3cfce:	4915      	ldr	r1, [pc, #84]	; (3d024 <k_sched_unlock+0xfc>)
   3cfd0:	2372      	movs	r3, #114	; 0x72
   3cfd2:	4a12      	ldr	r2, [pc, #72]	; (3d01c <k_sched_unlock+0xf4>)
   3cfd4:	480b      	ldr	r0, [pc, #44]	; (3d004 <k_sched_unlock+0xdc>)
   3cfd6:	f009 fb41 	bl	4665c <printk>
   3cfda:	4813      	ldr	r0, [pc, #76]	; (3d028 <k_sched_unlock+0x100>)
   3cfdc:	f009 fb3e 	bl	4665c <printk>
   3cfe0:	2172      	movs	r1, #114	; 0x72
   3cfe2:	480e      	ldr	r0, [pc, #56]	; (3d01c <k_sched_unlock+0xf4>)
   3cfe4:	f009 fb47 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3cfe8:	f385 8811 	msr	BASEPRI, r5
   3cfec:	f3bf 8f6f 	isb	sy
}
   3cff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   3cff4:	f00b bd43 	b.w	48a7e <z_reschedule_unlocked>
   3cff8:	2002a2dc 	.word	0x2002a2dc
   3cffc:	000505b8 	.word	0x000505b8
   3d000:	000505e0 	.word	0x000505e0
   3d004:	0004b5bf 	.word	0x0004b5bf
   3d008:	00050481 	.word	0x00050481
   3d00c:	e000ed00 	.word	0xe000ed00
   3d010:	0005057c 	.word	0x0005057c
   3d014:	2002a314 	.word	0x2002a314
   3d018:	0004bff2 	.word	0x0004bff2
   3d01c:	0004bfcb 	.word	0x0004bfcb
   3d020:	0004c007 	.word	0x0004c007
   3d024:	0004c01c 	.word	0x0004c01c
   3d028:	0004c033 	.word	0x0004c033

0003d02c <z_add_thread_to_ready_q>:
{
   3d02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d02e:	4604      	mov	r4, r0
	__asm__ volatile(
   3d030:	f04f 0320 	mov.w	r3, #32
   3d034:	f3ef 8511 	mrs	r5, BASEPRI
   3d038:	f383 8811 	msr	BASEPRI, r3
   3d03c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3d040:	482f      	ldr	r0, [pc, #188]	; (3d100 <z_add_thread_to_ready_q+0xd4>)
   3d042:	f000 fe9d 	bl	3dd80 <z_spin_lock_valid>
   3d046:	b960      	cbnz	r0, 3d062 <z_add_thread_to_ready_q+0x36>
   3d048:	492e      	ldr	r1, [pc, #184]	; (3d104 <z_add_thread_to_ready_q+0xd8>)
   3d04a:	235f      	movs	r3, #95	; 0x5f
   3d04c:	4a2e      	ldr	r2, [pc, #184]	; (3d108 <z_add_thread_to_ready_q+0xdc>)
   3d04e:	482f      	ldr	r0, [pc, #188]	; (3d10c <z_add_thread_to_ready_q+0xe0>)
   3d050:	f009 fb04 	bl	4665c <printk>
   3d054:	482e      	ldr	r0, [pc, #184]	; (3d110 <z_add_thread_to_ready_q+0xe4>)
   3d056:	f009 fb01 	bl	4665c <printk>
   3d05a:	215f      	movs	r1, #95	; 0x5f
   3d05c:	482a      	ldr	r0, [pc, #168]	; (3d108 <z_add_thread_to_ready_q+0xdc>)
   3d05e:	f009 fb0a 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d062:	4827      	ldr	r0, [pc, #156]	; (3d100 <z_add_thread_to_ready_q+0xd4>)
   3d064:	f000 feaa 	bl	3ddbc <z_spin_lock_set_owner>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3d068:	4b2a      	ldr	r3, [pc, #168]	; (3d114 <z_add_thread_to_ready_q+0xe8>)
   3d06a:	429c      	cmp	r4, r3
   3d06c:	d10b      	bne.n	3d086 <z_add_thread_to_ready_q+0x5a>
   3d06e:	492a      	ldr	r1, [pc, #168]	; (3d118 <z_add_thread_to_ready_q+0xec>)
   3d070:	4826      	ldr	r0, [pc, #152]	; (3d10c <z_add_thread_to_ready_q+0xe0>)
   3d072:	f240 237e 	movw	r3, #638	; 0x27e
   3d076:	4a29      	ldr	r2, [pc, #164]	; (3d11c <z_add_thread_to_ready_q+0xf0>)
   3d078:	f009 faf0 	bl	4665c <printk>
   3d07c:	f240 217e 	movw	r1, #638	; 0x27e
   3d080:	4826      	ldr	r0, [pc, #152]	; (3d11c <z_add_thread_to_ready_q+0xf0>)
   3d082:	f009 faf8 	bl	46676 <assert_post_action>
	return list->head == list;
   3d086:	4a26      	ldr	r2, [pc, #152]	; (3d120 <z_add_thread_to_ready_q+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3d088:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3d08c:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   3d090:	428b      	cmp	r3, r1
   3d092:	d00b      	beq.n	3d0ac <z_add_thread_to_ready_q+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d094:	b153      	cbz	r3, 3d0ac <z_add_thread_to_ready_q+0x80>
	if (t1->base.prio < t2->base.prio) {
   3d096:	f994 600e 	ldrsb.w	r6, [r4, #14]
   3d09a:	f993 700e 	ldrsb.w	r7, [r3, #14]
   3d09e:	42b7      	cmp	r7, r6
   3d0a0:	dc0a      	bgt.n	3d0b8 <z_add_thread_to_ready_q+0x8c>
	return (node == list->tail) ? NULL : node->next;
   3d0a2:	4298      	cmp	r0, r3
   3d0a4:	d002      	beq.n	3d0ac <z_add_thread_to_ready_q+0x80>
   3d0a6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d0a8:	2b00      	cmp	r3, #0
   3d0aa:	d1f6      	bne.n	3d09a <z_add_thread_to_ready_q+0x6e>
	node->prev = list->tail;
   3d0ac:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3d0b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3d0b2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3d0b4:	62d4      	str	r4, [r2, #44]	; 0x2c
   3d0b6:	e005      	b.n	3d0c4 <z_add_thread_to_ready_q+0x98>
	node->prev = successor->prev;
   3d0b8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3d0ba:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3d0be:	685a      	ldr	r2, [r3, #4]
   3d0c0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3d0c2:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   3d0c4:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   3d0c6:	2000      	movs	r0, #0
   3d0c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3d0cc:	7363      	strb	r3, [r4, #13]
   3d0ce:	f7ff fef5 	bl	3cebc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d0d2:	480b      	ldr	r0, [pc, #44]	; (3d100 <z_add_thread_to_ready_q+0xd4>)
   3d0d4:	f000 fe62 	bl	3dd9c <z_spin_unlock_valid>
   3d0d8:	b960      	cbnz	r0, 3d0f4 <z_add_thread_to_ready_q+0xc8>
   3d0da:	4912      	ldr	r1, [pc, #72]	; (3d124 <z_add_thread_to_ready_q+0xf8>)
   3d0dc:	2372      	movs	r3, #114	; 0x72
   3d0de:	4a0a      	ldr	r2, [pc, #40]	; (3d108 <z_add_thread_to_ready_q+0xdc>)
   3d0e0:	480a      	ldr	r0, [pc, #40]	; (3d10c <z_add_thread_to_ready_q+0xe0>)
   3d0e2:	f009 fabb 	bl	4665c <printk>
   3d0e6:	4810      	ldr	r0, [pc, #64]	; (3d128 <z_add_thread_to_ready_q+0xfc>)
   3d0e8:	f009 fab8 	bl	4665c <printk>
   3d0ec:	2172      	movs	r1, #114	; 0x72
   3d0ee:	4806      	ldr	r0, [pc, #24]	; (3d108 <z_add_thread_to_ready_q+0xdc>)
   3d0f0:	f009 fac1 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3d0f4:	f385 8811 	msr	BASEPRI, r5
   3d0f8:	f3bf 8f6f 	isb	sy
}
   3d0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3d0fe:	bf00      	nop
   3d100:	2002a314 	.word	0x2002a314
   3d104:	0004bff2 	.word	0x0004bff2
   3d108:	0004bfcb 	.word	0x0004bfcb
   3d10c:	0004b5bf 	.word	0x0004b5bf
   3d110:	0004c007 	.word	0x0004c007
   3d114:	2002610c 	.word	0x2002610c
   3d118:	00050639 	.word	0x00050639
   3d11c:	000505e0 	.word	0x000505e0
   3d120:	2002a2dc 	.word	0x2002a2dc
   3d124:	0004c01c 	.word	0x0004c01c
   3d128:	0004c033 	.word	0x0004c033

0003d12c <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   3d12c:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   3d130:	b570      	push	{r4, r5, r6, lr}
   3d132:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   3d134:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   3d138:	2b00      	cmp	r3, #0
   3d13a:	d040      	beq.n	3d1be <z_thread_timeout+0x92>
	__asm__ volatile(
   3d13c:	f04f 0320 	mov.w	r3, #32
   3d140:	f3ef 8611 	mrs	r6, BASEPRI
   3d144:	f383 8811 	msr	BASEPRI, r3
   3d148:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3d14c:	4824      	ldr	r0, [pc, #144]	; (3d1e0 <z_thread_timeout+0xb4>)
   3d14e:	f000 fe17 	bl	3dd80 <z_spin_lock_valid>
   3d152:	b960      	cbnz	r0, 3d16e <z_thread_timeout+0x42>
   3d154:	4923      	ldr	r1, [pc, #140]	; (3d1e4 <z_thread_timeout+0xb8>)
   3d156:	235f      	movs	r3, #95	; 0x5f
   3d158:	4a23      	ldr	r2, [pc, #140]	; (3d1e8 <z_thread_timeout+0xbc>)
   3d15a:	4824      	ldr	r0, [pc, #144]	; (3d1ec <z_thread_timeout+0xc0>)
   3d15c:	f009 fa7e 	bl	4665c <printk>
   3d160:	4823      	ldr	r0, [pc, #140]	; (3d1f0 <z_thread_timeout+0xc4>)
   3d162:	f009 fa7b 	bl	4665c <printk>
   3d166:	215f      	movs	r1, #95	; 0x5f
   3d168:	481f      	ldr	r0, [pc, #124]	; (3d1e8 <z_thread_timeout+0xbc>)
   3d16a:	f009 fa84 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d16e:	481c      	ldr	r0, [pc, #112]	; (3d1e0 <z_thread_timeout+0xb4>)
   3d170:	f000 fe24 	bl	3ddbc <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3d174:	f1a4 0010 	sub.w	r0, r4, #16
   3d178:	f7ff fc86 	bl	3ca88 <pended_on.isra.16>
   3d17c:	4629      	mov	r1, r5
   3d17e:	f7ff fe19 	bl	3cdb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3d182:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d186:	4816      	ldr	r0, [pc, #88]	; (3d1e0 <z_thread_timeout+0xb4>)
   3d188:	f023 0302 	bic.w	r3, r3, #2
   3d18c:	f804 3c0b 	strb.w	r3, [r4, #-11]
   3d190:	f000 fe04 	bl	3dd9c <z_spin_unlock_valid>
   3d194:	b960      	cbnz	r0, 3d1b0 <z_thread_timeout+0x84>
   3d196:	4917      	ldr	r1, [pc, #92]	; (3d1f4 <z_thread_timeout+0xc8>)
   3d198:	2372      	movs	r3, #114	; 0x72
   3d19a:	4a13      	ldr	r2, [pc, #76]	; (3d1e8 <z_thread_timeout+0xbc>)
   3d19c:	4813      	ldr	r0, [pc, #76]	; (3d1ec <z_thread_timeout+0xc0>)
   3d19e:	f009 fa5d 	bl	4665c <printk>
   3d1a2:	4815      	ldr	r0, [pc, #84]	; (3d1f8 <z_thread_timeout+0xcc>)
   3d1a4:	f009 fa5a 	bl	4665c <printk>
   3d1a8:	2172      	movs	r1, #114	; 0x72
   3d1aa:	480f      	ldr	r0, [pc, #60]	; (3d1e8 <z_thread_timeout+0xbc>)
   3d1ac:	f009 fa63 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3d1b0:	f386 8811 	msr	BASEPRI, r6
   3d1b4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   3d1b8:	2300      	movs	r3, #0
   3d1ba:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3d1be:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   3d1c2:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3d1c4:	f023 0314 	bic.w	r3, r3, #20
   3d1c8:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   3d1cc:	f00b fc35 	bl	48a3a <z_is_thread_ready>
   3d1d0:	b120      	cbz	r0, 3d1dc <z_thread_timeout+0xb0>
		z_add_thread_to_ready_q(thread);
   3d1d2:	4628      	mov	r0, r5
}
   3d1d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3d1d8:	f7ff bf28 	b.w	3d02c <z_add_thread_to_ready_q>
   3d1dc:	bd70      	pop	{r4, r5, r6, pc}
   3d1de:	bf00      	nop
   3d1e0:	2002a314 	.word	0x2002a314
   3d1e4:	0004bff2 	.word	0x0004bff2
   3d1e8:	0004bfcb 	.word	0x0004bfcb
   3d1ec:	0004b5bf 	.word	0x0004b5bf
   3d1f0:	0004c007 	.word	0x0004c007
   3d1f4:	0004c01c 	.word	0x0004c01c
   3d1f8:	0004c033 	.word	0x0004c033

0003d1fc <z_move_thread_to_end_of_prio_q>:
{
   3d1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d1fe:	4604      	mov	r4, r0
	__asm__ volatile(
   3d200:	f04f 0320 	mov.w	r3, #32
   3d204:	f3ef 8511 	mrs	r5, BASEPRI
   3d208:	f383 8811 	msr	BASEPRI, r3
   3d20c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3d210:	4834      	ldr	r0, [pc, #208]	; (3d2e4 <z_move_thread_to_end_of_prio_q+0xe8>)
   3d212:	f000 fdb5 	bl	3dd80 <z_spin_lock_valid>
   3d216:	b960      	cbnz	r0, 3d232 <z_move_thread_to_end_of_prio_q+0x36>
   3d218:	4933      	ldr	r1, [pc, #204]	; (3d2e8 <z_move_thread_to_end_of_prio_q+0xec>)
   3d21a:	235f      	movs	r3, #95	; 0x5f
   3d21c:	4a33      	ldr	r2, [pc, #204]	; (3d2ec <z_move_thread_to_end_of_prio_q+0xf0>)
   3d21e:	4834      	ldr	r0, [pc, #208]	; (3d2f0 <z_move_thread_to_end_of_prio_q+0xf4>)
   3d220:	f009 fa1c 	bl	4665c <printk>
   3d224:	4833      	ldr	r0, [pc, #204]	; (3d2f4 <z_move_thread_to_end_of_prio_q+0xf8>)
   3d226:	f009 fa19 	bl	4665c <printk>
   3d22a:	215f      	movs	r1, #95	; 0x5f
   3d22c:	482f      	ldr	r0, [pc, #188]	; (3d2ec <z_move_thread_to_end_of_prio_q+0xf0>)
   3d22e:	f009 fa22 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d232:	482c      	ldr	r0, [pc, #176]	; (3d2e4 <z_move_thread_to_end_of_prio_q+0xe8>)
   3d234:	f000 fdc2 	bl	3ddbc <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   3d238:	7b63      	ldrb	r3, [r4, #13]
   3d23a:	065a      	lsls	r2, r3, #25
   3d23c:	d503      	bpl.n	3d246 <z_move_thread_to_end_of_prio_q+0x4a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   3d23e:	4621      	mov	r1, r4
   3d240:	482d      	ldr	r0, [pc, #180]	; (3d2f8 <z_move_thread_to_end_of_prio_q+0xfc>)
   3d242:	f7ff fdb7 	bl	3cdb4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3d246:	4b2d      	ldr	r3, [pc, #180]	; (3d2fc <z_move_thread_to_end_of_prio_q+0x100>)
   3d248:	429c      	cmp	r4, r3
   3d24a:	d10b      	bne.n	3d264 <z_move_thread_to_end_of_prio_q+0x68>
   3d24c:	492c      	ldr	r1, [pc, #176]	; (3d300 <z_move_thread_to_end_of_prio_q+0x104>)
   3d24e:	4828      	ldr	r0, [pc, #160]	; (3d2f0 <z_move_thread_to_end_of_prio_q+0xf4>)
   3d250:	f240 237e 	movw	r3, #638	; 0x27e
   3d254:	4a2b      	ldr	r2, [pc, #172]	; (3d304 <z_move_thread_to_end_of_prio_q+0x108>)
   3d256:	f009 fa01 	bl	4665c <printk>
   3d25a:	f240 217e 	movw	r1, #638	; 0x27e
   3d25e:	4829      	ldr	r0, [pc, #164]	; (3d304 <z_move_thread_to_end_of_prio_q+0x108>)
   3d260:	f009 fa09 	bl	46676 <assert_post_action>
	return list->head == list;
   3d264:	4a28      	ldr	r2, [pc, #160]	; (3d308 <z_move_thread_to_end_of_prio_q+0x10c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3d266:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3d26a:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   3d26e:	428b      	cmp	r3, r1
   3d270:	d00b      	beq.n	3d28a <z_move_thread_to_end_of_prio_q+0x8e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d272:	b153      	cbz	r3, 3d28a <z_move_thread_to_end_of_prio_q+0x8e>
	if (t1->base.prio < t2->base.prio) {
   3d274:	f994 600e 	ldrsb.w	r6, [r4, #14]
   3d278:	f993 700e 	ldrsb.w	r7, [r3, #14]
   3d27c:	42b7      	cmp	r7, r6
   3d27e:	dc0a      	bgt.n	3d296 <z_move_thread_to_end_of_prio_q+0x9a>
	return (node == list->tail) ? NULL : node->next;
   3d280:	4283      	cmp	r3, r0
   3d282:	d002      	beq.n	3d28a <z_move_thread_to_end_of_prio_q+0x8e>
   3d284:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d286:	2b00      	cmp	r3, #0
   3d288:	d1f6      	bne.n	3d278 <z_move_thread_to_end_of_prio_q+0x7c>
	node->prev = list->tail;
   3d28a:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3d28e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3d290:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3d292:	62d4      	str	r4, [r2, #44]	; 0x2c
   3d294:	e005      	b.n	3d2a2 <z_move_thread_to_end_of_prio_q+0xa6>
	node->prev = successor->prev;
   3d296:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   3d298:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   3d29c:	6859      	ldr	r1, [r3, #4]
   3d29e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   3d2a0:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   3d2a2:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   3d2a4:	6890      	ldr	r0, [r2, #8]
   3d2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3d2aa:	7363      	strb	r3, [r4, #13]
   3d2ac:	1b03      	subs	r3, r0, r4
   3d2ae:	4258      	negs	r0, r3
   3d2b0:	4158      	adcs	r0, r3
   3d2b2:	f7ff fe03 	bl	3cebc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d2b6:	480b      	ldr	r0, [pc, #44]	; (3d2e4 <z_move_thread_to_end_of_prio_q+0xe8>)
   3d2b8:	f000 fd70 	bl	3dd9c <z_spin_unlock_valid>
   3d2bc:	b960      	cbnz	r0, 3d2d8 <z_move_thread_to_end_of_prio_q+0xdc>
   3d2be:	4913      	ldr	r1, [pc, #76]	; (3d30c <z_move_thread_to_end_of_prio_q+0x110>)
   3d2c0:	2372      	movs	r3, #114	; 0x72
   3d2c2:	4a0a      	ldr	r2, [pc, #40]	; (3d2ec <z_move_thread_to_end_of_prio_q+0xf0>)
   3d2c4:	480a      	ldr	r0, [pc, #40]	; (3d2f0 <z_move_thread_to_end_of_prio_q+0xf4>)
   3d2c6:	f009 f9c9 	bl	4665c <printk>
   3d2ca:	4811      	ldr	r0, [pc, #68]	; (3d310 <z_move_thread_to_end_of_prio_q+0x114>)
   3d2cc:	f009 f9c6 	bl	4665c <printk>
   3d2d0:	2172      	movs	r1, #114	; 0x72
   3d2d2:	4806      	ldr	r0, [pc, #24]	; (3d2ec <z_move_thread_to_end_of_prio_q+0xf0>)
   3d2d4:	f009 f9cf 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3d2d8:	f385 8811 	msr	BASEPRI, r5
   3d2dc:	f3bf 8f6f 	isb	sy
}
   3d2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3d2e2:	bf00      	nop
   3d2e4:	2002a314 	.word	0x2002a314
   3d2e8:	0004bff2 	.word	0x0004bff2
   3d2ec:	0004bfcb 	.word	0x0004bfcb
   3d2f0:	0004b5bf 	.word	0x0004b5bf
   3d2f4:	0004c007 	.word	0x0004c007
   3d2f8:	2002a304 	.word	0x2002a304
   3d2fc:	2002610c 	.word	0x2002610c
   3d300:	00050639 	.word	0x00050639
   3d304:	000505e0 	.word	0x000505e0
   3d308:	2002a2dc 	.word	0x2002a2dc
   3d30c:	0004c01c 	.word	0x0004c01c
   3d310:	0004c033 	.word	0x0004c033

0003d314 <z_time_slice>:
	if (pending_current == _current) {
   3d314:	4a15      	ldr	r2, [pc, #84]	; (3d36c <z_time_slice+0x58>)
   3d316:	4916      	ldr	r1, [pc, #88]	; (3d370 <z_time_slice+0x5c>)
{
   3d318:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   3d31a:	680c      	ldr	r4, [r1, #0]
   3d31c:	6893      	ldr	r3, [r2, #8]
   3d31e:	42a3      	cmp	r3, r4
   3d320:	4614      	mov	r4, r2
   3d322:	d103      	bne.n	3d32c <z_time_slice+0x18>
}
   3d324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   3d328:	f7ff bbc6 	b.w	3cab8 <z_reset_time_slice>
	pending_current = NULL;
   3d32c:	2500      	movs	r5, #0
   3d32e:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   3d330:	4910      	ldr	r1, [pc, #64]	; (3d374 <z_time_slice+0x60>)
   3d332:	6809      	ldr	r1, [r1, #0]
   3d334:	b1b9      	cbz	r1, 3d366 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   3d336:	89d9      	ldrh	r1, [r3, #14]
   3d338:	297f      	cmp	r1, #127	; 0x7f
   3d33a:	d814      	bhi.n	3d366 <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   3d33c:	490e      	ldr	r1, [pc, #56]	; (3d378 <z_time_slice+0x64>)
   3d33e:	f993 500e 	ldrsb.w	r5, [r3, #14]
   3d342:	6809      	ldr	r1, [r1, #0]
   3d344:	428d      	cmp	r5, r1
   3d346:	db0e      	blt.n	3d366 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   3d348:	490c      	ldr	r1, [pc, #48]	; (3d37c <z_time_slice+0x68>)
   3d34a:	428b      	cmp	r3, r1
   3d34c:	d00b      	beq.n	3d366 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   3d34e:	6999      	ldr	r1, [r3, #24]
   3d350:	b949      	cbnz	r1, 3d366 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   3d352:	6911      	ldr	r1, [r2, #16]
   3d354:	4281      	cmp	r1, r0
   3d356:	dc03      	bgt.n	3d360 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   3d358:	4618      	mov	r0, r3
   3d35a:	f7ff ff4f 	bl	3d1fc <z_move_thread_to_end_of_prio_q>
   3d35e:	e7e1      	b.n	3d324 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   3d360:	1a09      	subs	r1, r1, r0
   3d362:	6111      	str	r1, [r2, #16]
}
   3d364:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   3d366:	2300      	movs	r3, #0
   3d368:	6123      	str	r3, [r4, #16]
   3d36a:	e7fb      	b.n	3d364 <z_time_slice+0x50>
   3d36c:	2002a2dc 	.word	0x2002a2dc
   3d370:	2002a310 	.word	0x2002a310
   3d374:	2002a31c 	.word	0x2002a31c
   3d378:	2002a318 	.word	0x2002a318
   3d37c:	2002610c 	.word	0x2002610c

0003d380 <z_remove_thread_from_ready_q>:
{
   3d380:	b538      	push	{r3, r4, r5, lr}
   3d382:	4604      	mov	r4, r0
	__asm__ volatile(
   3d384:	f04f 0320 	mov.w	r3, #32
   3d388:	f3ef 8511 	mrs	r5, BASEPRI
   3d38c:	f383 8811 	msr	BASEPRI, r3
   3d390:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3d394:	481d      	ldr	r0, [pc, #116]	; (3d40c <z_remove_thread_from_ready_q+0x8c>)
   3d396:	f000 fcf3 	bl	3dd80 <z_spin_lock_valid>
   3d39a:	b960      	cbnz	r0, 3d3b6 <z_remove_thread_from_ready_q+0x36>
   3d39c:	491c      	ldr	r1, [pc, #112]	; (3d410 <z_remove_thread_from_ready_q+0x90>)
   3d39e:	235f      	movs	r3, #95	; 0x5f
   3d3a0:	4a1c      	ldr	r2, [pc, #112]	; (3d414 <z_remove_thread_from_ready_q+0x94>)
   3d3a2:	481d      	ldr	r0, [pc, #116]	; (3d418 <z_remove_thread_from_ready_q+0x98>)
   3d3a4:	f009 f95a 	bl	4665c <printk>
   3d3a8:	481c      	ldr	r0, [pc, #112]	; (3d41c <z_remove_thread_from_ready_q+0x9c>)
   3d3aa:	f009 f957 	bl	4665c <printk>
   3d3ae:	215f      	movs	r1, #95	; 0x5f
   3d3b0:	4818      	ldr	r0, [pc, #96]	; (3d414 <z_remove_thread_from_ready_q+0x94>)
   3d3b2:	f009 f960 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d3b6:	4815      	ldr	r0, [pc, #84]	; (3d40c <z_remove_thread_from_ready_q+0x8c>)
   3d3b8:	f000 fd00 	bl	3ddbc <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   3d3bc:	7b63      	ldrb	r3, [r4, #13]
   3d3be:	065a      	lsls	r2, r3, #25
   3d3c0:	d507      	bpl.n	3d3d2 <z_remove_thread_from_ready_q+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   3d3c2:	4621      	mov	r1, r4
   3d3c4:	4816      	ldr	r0, [pc, #88]	; (3d420 <z_remove_thread_from_ready_q+0xa0>)
   3d3c6:	f7ff fcf5 	bl	3cdb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   3d3ca:	7b63      	ldrb	r3, [r4, #13]
   3d3cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   3d3d0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   3d3d2:	4b14      	ldr	r3, [pc, #80]	; (3d424 <z_remove_thread_from_ready_q+0xa4>)
   3d3d4:	6898      	ldr	r0, [r3, #8]
   3d3d6:	1b03      	subs	r3, r0, r4
   3d3d8:	4258      	negs	r0, r3
   3d3da:	4158      	adcs	r0, r3
   3d3dc:	f7ff fd6e 	bl	3cebc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d3e0:	480a      	ldr	r0, [pc, #40]	; (3d40c <z_remove_thread_from_ready_q+0x8c>)
   3d3e2:	f000 fcdb 	bl	3dd9c <z_spin_unlock_valid>
   3d3e6:	b960      	cbnz	r0, 3d402 <z_remove_thread_from_ready_q+0x82>
   3d3e8:	490f      	ldr	r1, [pc, #60]	; (3d428 <z_remove_thread_from_ready_q+0xa8>)
   3d3ea:	2372      	movs	r3, #114	; 0x72
   3d3ec:	4a09      	ldr	r2, [pc, #36]	; (3d414 <z_remove_thread_from_ready_q+0x94>)
   3d3ee:	480a      	ldr	r0, [pc, #40]	; (3d418 <z_remove_thread_from_ready_q+0x98>)
   3d3f0:	f009 f934 	bl	4665c <printk>
   3d3f4:	480d      	ldr	r0, [pc, #52]	; (3d42c <z_remove_thread_from_ready_q+0xac>)
   3d3f6:	f009 f931 	bl	4665c <printk>
   3d3fa:	2172      	movs	r1, #114	; 0x72
   3d3fc:	4805      	ldr	r0, [pc, #20]	; (3d414 <z_remove_thread_from_ready_q+0x94>)
   3d3fe:	f009 f93a 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3d402:	f385 8811 	msr	BASEPRI, r5
   3d406:	f3bf 8f6f 	isb	sy
}
   3d40a:	bd38      	pop	{r3, r4, r5, pc}
   3d40c:	2002a314 	.word	0x2002a314
   3d410:	0004bff2 	.word	0x0004bff2
   3d414:	0004bfcb 	.word	0x0004bfcb
   3d418:	0004b5bf 	.word	0x0004b5bf
   3d41c:	0004c007 	.word	0x0004c007
   3d420:	2002a304 	.word	0x2002a304
   3d424:	2002a2dc 	.word	0x2002a2dc
   3d428:	0004c01c 	.word	0x0004c01c
   3d42c:	0004c033 	.word	0x0004c033

0003d430 <pend>:
{
   3d430:	b570      	push	{r4, r5, r6, lr}
   3d432:	4604      	mov	r4, r0
   3d434:	460d      	mov	r5, r1
   3d436:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   3d438:	f7ff ffa2 	bl	3d380 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   3d43c:	7b63      	ldrb	r3, [r4, #13]
   3d43e:	f043 0302 	orr.w	r3, r3, #2
   3d442:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   3d444:	2d00      	cmp	r5, #0
   3d446:	d02c      	beq.n	3d4a2 <pend+0x72>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3d448:	4b21      	ldr	r3, [pc, #132]	; (3d4d0 <pend+0xa0>)
		thread->base.pended_on = wait_q;
   3d44a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3d44c:	429c      	cmp	r4, r3
   3d44e:	d10b      	bne.n	3d468 <pend+0x38>
   3d450:	4920      	ldr	r1, [pc, #128]	; (3d4d4 <pend+0xa4>)
   3d452:	4821      	ldr	r0, [pc, #132]	; (3d4d8 <pend+0xa8>)
   3d454:	f240 237e 	movw	r3, #638	; 0x27e
   3d458:	4a20      	ldr	r2, [pc, #128]	; (3d4dc <pend+0xac>)
   3d45a:	f009 f8ff 	bl	4665c <printk>
   3d45e:	f240 217e 	movw	r1, #638	; 0x27e
   3d462:	481e      	ldr	r0, [pc, #120]	; (3d4dc <pend+0xac>)
   3d464:	f009 f907 	bl	46676 <assert_post_action>
	return list->head == list;
   3d468:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3d46a:	429d      	cmp	r5, r3
   3d46c:	d00c      	beq.n	3d488 <pend+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d46e:	b15b      	cbz	r3, 3d488 <pend+0x58>
	if (t1->base.prio < t2->base.prio) {
   3d470:	f994 200e 	ldrsb.w	r2, [r4, #14]
   3d474:	f993 100e 	ldrsb.w	r1, [r3, #14]
   3d478:	4291      	cmp	r1, r2
   3d47a:	dc0c      	bgt.n	3d496 <pend+0x66>
	return (node == list->tail) ? NULL : node->next;
   3d47c:	6869      	ldr	r1, [r5, #4]
   3d47e:	428b      	cmp	r3, r1
   3d480:	d002      	beq.n	3d488 <pend+0x58>
   3d482:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d484:	2b00      	cmp	r3, #0
   3d486:	d1f5      	bne.n	3d474 <pend+0x44>
	node->prev = list->tail;
   3d488:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   3d48a:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   3d48c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   3d48e:	686b      	ldr	r3, [r5, #4]
   3d490:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3d492:	606c      	str	r4, [r5, #4]
   3d494:	e005      	b.n	3d4a2 <pend+0x72>
	node->prev = successor->prev;
   3d496:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3d498:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3d49c:	685a      	ldr	r2, [r3, #4]
   3d49e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3d4a0:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   3d4a2:	1c73      	adds	r3, r6, #1
   3d4a4:	d013      	beq.n	3d4ce <pend+0x9e>
   3d4a6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   3d4aa:	f240 30e7 	movw	r0, #999	; 0x3e7
   3d4ae:	2100      	movs	r1, #0
   3d4b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3d4b4:	fbc5 0106 	smlal	r0, r1, r5, r6
   3d4b8:	2300      	movs	r3, #0
   3d4ba:	f7db fc2f 	bl	18d1c <__aeabi_ldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   3d4be:	4908      	ldr	r1, [pc, #32]	; (3d4e0 <pend+0xb0>)
   3d4c0:	1c42      	adds	r2, r0, #1
   3d4c2:	f104 0018 	add.w	r0, r4, #24
}
   3d4c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3d4ca:	f000 bfcb 	b.w	3e464 <z_add_timeout>
   3d4ce:	bd70      	pop	{r4, r5, r6, pc}
   3d4d0:	2002610c 	.word	0x2002610c
   3d4d4:	00050639 	.word	0x00050639
   3d4d8:	0004b5bf 	.word	0x0004b5bf
   3d4dc:	000505e0 	.word	0x000505e0
   3d4e0:	0003d12d 	.word	0x0003d12d

0003d4e4 <z_pend_curr_irqlock>:
{
   3d4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d4e6:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   3d4e8:	4d21      	ldr	r5, [pc, #132]	; (3d570 <z_pend_curr_irqlock+0x8c>)
	pending_current = _current;
   3d4ea:	4c22      	ldr	r4, [pc, #136]	; (3d574 <z_pend_curr_irqlock+0x90>)
	pend(_current, wait_q, timeout);
   3d4ec:	68a8      	ldr	r0, [r5, #8]
   3d4ee:	f7ff ff9f 	bl	3d430 <pend>
	pending_current = _current;
   3d4f2:	68ab      	ldr	r3, [r5, #8]
   3d4f4:	4630      	mov	r0, r6
   3d4f6:	6023      	str	r3, [r4, #0]
   3d4f8:	f7e5 f80e 	bl	22518 <z_arch_swap>
   3d4fc:	4606      	mov	r6, r0
	__asm__ volatile(
   3d4fe:	f04f 0320 	mov.w	r3, #32
   3d502:	f3ef 8711 	mrs	r7, BASEPRI
   3d506:	f383 8811 	msr	BASEPRI, r3
   3d50a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3d50e:	481a      	ldr	r0, [pc, #104]	; (3d578 <z_pend_curr_irqlock+0x94>)
   3d510:	f000 fc36 	bl	3dd80 <z_spin_lock_valid>
   3d514:	b960      	cbnz	r0, 3d530 <z_pend_curr_irqlock+0x4c>
   3d516:	4919      	ldr	r1, [pc, #100]	; (3d57c <z_pend_curr_irqlock+0x98>)
   3d518:	235f      	movs	r3, #95	; 0x5f
   3d51a:	4a19      	ldr	r2, [pc, #100]	; (3d580 <z_pend_curr_irqlock+0x9c>)
   3d51c:	4819      	ldr	r0, [pc, #100]	; (3d584 <z_pend_curr_irqlock+0xa0>)
   3d51e:	f009 f89d 	bl	4665c <printk>
   3d522:	4819      	ldr	r0, [pc, #100]	; (3d588 <z_pend_curr_irqlock+0xa4>)
   3d524:	f009 f89a 	bl	4665c <printk>
   3d528:	215f      	movs	r1, #95	; 0x5f
   3d52a:	4815      	ldr	r0, [pc, #84]	; (3d580 <z_pend_curr_irqlock+0x9c>)
   3d52c:	f009 f8a3 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d530:	4811      	ldr	r0, [pc, #68]	; (3d578 <z_pend_curr_irqlock+0x94>)
   3d532:	f000 fc43 	bl	3ddbc <z_spin_lock_set_owner>
		if (pending_current == _current) {
   3d536:	6823      	ldr	r3, [r4, #0]
   3d538:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d53a:	480f      	ldr	r0, [pc, #60]	; (3d578 <z_pend_curr_irqlock+0x94>)
   3d53c:	429a      	cmp	r2, r3
			pending_current = NULL;
   3d53e:	bf04      	itt	eq
   3d540:	2300      	moveq	r3, #0
   3d542:	6023      	streq	r3, [r4, #0]
   3d544:	f000 fc2a 	bl	3dd9c <z_spin_unlock_valid>
   3d548:	b960      	cbnz	r0, 3d564 <z_pend_curr_irqlock+0x80>
   3d54a:	4910      	ldr	r1, [pc, #64]	; (3d58c <z_pend_curr_irqlock+0xa8>)
   3d54c:	2372      	movs	r3, #114	; 0x72
   3d54e:	4a0c      	ldr	r2, [pc, #48]	; (3d580 <z_pend_curr_irqlock+0x9c>)
   3d550:	480c      	ldr	r0, [pc, #48]	; (3d584 <z_pend_curr_irqlock+0xa0>)
   3d552:	f009 f883 	bl	4665c <printk>
   3d556:	480e      	ldr	r0, [pc, #56]	; (3d590 <z_pend_curr_irqlock+0xac>)
   3d558:	f009 f880 	bl	4665c <printk>
   3d55c:	2172      	movs	r1, #114	; 0x72
   3d55e:	4808      	ldr	r0, [pc, #32]	; (3d580 <z_pend_curr_irqlock+0x9c>)
   3d560:	f009 f889 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3d564:	f387 8811 	msr	BASEPRI, r7
   3d568:	f3bf 8f6f 	isb	sy
}
   3d56c:	4630      	mov	r0, r6
   3d56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3d570:	2002a2dc 	.word	0x2002a2dc
   3d574:	2002a310 	.word	0x2002a310
   3d578:	2002a314 	.word	0x2002a314
   3d57c:	0004bff2 	.word	0x0004bff2
   3d580:	0004bfcb 	.word	0x0004bfcb
   3d584:	0004b5bf 	.word	0x0004b5bf
   3d588:	0004c007 	.word	0x0004c007
   3d58c:	0004c01c 	.word	0x0004c01c
   3d590:	0004c033 	.word	0x0004c033

0003d594 <z_pend_curr>:
{
   3d594:	b538      	push	{r3, r4, r5, lr}
   3d596:	4605      	mov	r5, r0
   3d598:	460c      	mov	r4, r1
   3d59a:	4611      	mov	r1, r2
	pending_current = _current;
   3d59c:	4a0e      	ldr	r2, [pc, #56]	; (3d5d8 <z_pend_curr+0x44>)
   3d59e:	6890      	ldr	r0, [r2, #8]
   3d5a0:	4a0e      	ldr	r2, [pc, #56]	; (3d5dc <z_pend_curr+0x48>)
   3d5a2:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   3d5a4:	461a      	mov	r2, r3
   3d5a6:	f7ff ff43 	bl	3d430 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d5aa:	4628      	mov	r0, r5
   3d5ac:	f000 fbf6 	bl	3dd9c <z_spin_unlock_valid>
   3d5b0:	b960      	cbnz	r0, 3d5cc <z_pend_curr+0x38>
   3d5b2:	490b      	ldr	r1, [pc, #44]	; (3d5e0 <z_pend_curr+0x4c>)
   3d5b4:	2389      	movs	r3, #137	; 0x89
   3d5b6:	4a0b      	ldr	r2, [pc, #44]	; (3d5e4 <z_pend_curr+0x50>)
   3d5b8:	480b      	ldr	r0, [pc, #44]	; (3d5e8 <z_pend_curr+0x54>)
   3d5ba:	f009 f84f 	bl	4665c <printk>
   3d5be:	480b      	ldr	r0, [pc, #44]	; (3d5ec <z_pend_curr+0x58>)
   3d5c0:	f009 f84c 	bl	4665c <printk>
   3d5c4:	2189      	movs	r1, #137	; 0x89
   3d5c6:	4807      	ldr	r0, [pc, #28]	; (3d5e4 <z_pend_curr+0x50>)
   3d5c8:	f009 f855 	bl	46676 <assert_post_action>
   3d5cc:	4620      	mov	r0, r4
}
   3d5ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3d5d2:	f7e4 bfa1 	b.w	22518 <z_arch_swap>
   3d5d6:	bf00      	nop
   3d5d8:	2002a2dc 	.word	0x2002a2dc
   3d5dc:	2002a310 	.word	0x2002a310
   3d5e0:	0004c01c 	.word	0x0004c01c
   3d5e4:	0004bfcb 	.word	0x0004bfcb
   3d5e8:	0004b5bf 	.word	0x0004b5bf
   3d5ec:	0004c033 	.word	0x0004c033

0003d5f0 <z_set_prio>:
{
   3d5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d5f2:	4604      	mov	r4, r0
   3d5f4:	460d      	mov	r5, r1
	__asm__ volatile(
   3d5f6:	f04f 0320 	mov.w	r3, #32
   3d5fa:	f3ef 8611 	mrs	r6, BASEPRI
   3d5fe:	f383 8811 	msr	BASEPRI, r3
   3d602:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3d606:	4835      	ldr	r0, [pc, #212]	; (3d6dc <z_set_prio+0xec>)
   3d608:	f000 fbba 	bl	3dd80 <z_spin_lock_valid>
   3d60c:	b960      	cbnz	r0, 3d628 <z_set_prio+0x38>
   3d60e:	4934      	ldr	r1, [pc, #208]	; (3d6e0 <z_set_prio+0xf0>)
   3d610:	235f      	movs	r3, #95	; 0x5f
   3d612:	4a34      	ldr	r2, [pc, #208]	; (3d6e4 <z_set_prio+0xf4>)
   3d614:	4834      	ldr	r0, [pc, #208]	; (3d6e8 <z_set_prio+0xf8>)
   3d616:	f009 f821 	bl	4665c <printk>
   3d61a:	4834      	ldr	r0, [pc, #208]	; (3d6ec <z_set_prio+0xfc>)
   3d61c:	f009 f81e 	bl	4665c <printk>
   3d620:	215f      	movs	r1, #95	; 0x5f
   3d622:	4830      	ldr	r0, [pc, #192]	; (3d6e4 <z_set_prio+0xf4>)
   3d624:	f009 f827 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d628:	482c      	ldr	r0, [pc, #176]	; (3d6dc <z_set_prio+0xec>)
   3d62a:	f000 fbc7 	bl	3ddbc <z_spin_lock_set_owner>
		need_sched = z_is_thread_ready(thread);
   3d62e:	4620      	mov	r0, r4
   3d630:	f00b fa03 	bl	48a3a <z_is_thread_ready>
   3d634:	b26d      	sxtb	r5, r5
		if (need_sched) {
   3d636:	4607      	mov	r7, r0
   3d638:	2800      	cmp	r0, #0
   3d63a:	d04c      	beq.n	3d6d6 <z_set_prio+0xe6>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   3d63c:	4621      	mov	r1, r4
   3d63e:	482c      	ldr	r0, [pc, #176]	; (3d6f0 <z_set_prio+0x100>)
   3d640:	f7ff fbb8 	bl	3cdb4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3d644:	4b2b      	ldr	r3, [pc, #172]	; (3d6f4 <z_set_prio+0x104>)
				thread->base.prio = prio;
   3d646:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3d648:	429c      	cmp	r4, r3
   3d64a:	d10b      	bne.n	3d664 <z_set_prio+0x74>
   3d64c:	492a      	ldr	r1, [pc, #168]	; (3d6f8 <z_set_prio+0x108>)
   3d64e:	4826      	ldr	r0, [pc, #152]	; (3d6e8 <z_set_prio+0xf8>)
   3d650:	f240 237e 	movw	r3, #638	; 0x27e
   3d654:	4a29      	ldr	r2, [pc, #164]	; (3d6fc <z_set_prio+0x10c>)
   3d656:	f009 f801 	bl	4665c <printk>
   3d65a:	f240 217e 	movw	r1, #638	; 0x27e
   3d65e:	4827      	ldr	r0, [pc, #156]	; (3d6fc <z_set_prio+0x10c>)
   3d660:	f009 f809 	bl	46676 <assert_post_action>
	return list->head == list;
   3d664:	4a26      	ldr	r2, [pc, #152]	; (3d700 <z_set_prio+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3d666:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3d66a:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   3d66e:	428b      	cmp	r3, r1
   3d670:	d00b      	beq.n	3d68a <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d672:	b153      	cbz	r3, 3d68a <z_set_prio+0x9a>
	if (t1->base.prio < t2->base.prio) {
   3d674:	f994 500e 	ldrsb.w	r5, [r4, #14]
   3d678:	f993 c00e 	ldrsb.w	ip, [r3, #14]
   3d67c:	45ac      	cmp	ip, r5
   3d67e:	dc0a      	bgt.n	3d696 <z_set_prio+0xa6>
	return (node == list->tail) ? NULL : node->next;
   3d680:	4298      	cmp	r0, r3
   3d682:	d002      	beq.n	3d68a <z_set_prio+0x9a>
   3d684:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d686:	2b00      	cmp	r3, #0
   3d688:	d1f6      	bne.n	3d678 <z_set_prio+0x88>
	node->prev = list->tail;
   3d68a:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3d68e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3d690:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3d692:	62d4      	str	r4, [r2, #44]	; 0x2c
   3d694:	e005      	b.n	3d6a2 <z_set_prio+0xb2>
	node->prev = successor->prev;
   3d696:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3d698:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3d69c:	685a      	ldr	r2, [r3, #4]
   3d69e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3d6a0:	605c      	str	r4, [r3, #4]
			update_cache(1);
   3d6a2:	2001      	movs	r0, #1
   3d6a4:	f7ff fc0a 	bl	3cebc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d6a8:	480c      	ldr	r0, [pc, #48]	; (3d6dc <z_set_prio+0xec>)
   3d6aa:	f000 fb77 	bl	3dd9c <z_spin_unlock_valid>
   3d6ae:	b960      	cbnz	r0, 3d6ca <z_set_prio+0xda>
   3d6b0:	4914      	ldr	r1, [pc, #80]	; (3d704 <z_set_prio+0x114>)
   3d6b2:	2372      	movs	r3, #114	; 0x72
   3d6b4:	4a0b      	ldr	r2, [pc, #44]	; (3d6e4 <z_set_prio+0xf4>)
   3d6b6:	480c      	ldr	r0, [pc, #48]	; (3d6e8 <z_set_prio+0xf8>)
   3d6b8:	f008 ffd0 	bl	4665c <printk>
   3d6bc:	4812      	ldr	r0, [pc, #72]	; (3d708 <z_set_prio+0x118>)
   3d6be:	f008 ffcd 	bl	4665c <printk>
   3d6c2:	2172      	movs	r1, #114	; 0x72
   3d6c4:	4807      	ldr	r0, [pc, #28]	; (3d6e4 <z_set_prio+0xf4>)
   3d6c6:	f008 ffd6 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3d6ca:	f386 8811 	msr	BASEPRI, r6
   3d6ce:	f3bf 8f6f 	isb	sy
}
   3d6d2:	4638      	mov	r0, r7
   3d6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			thread->base.prio = prio;
   3d6d6:	73a5      	strb	r5, [r4, #14]
   3d6d8:	e7e6      	b.n	3d6a8 <z_set_prio+0xb8>
   3d6da:	bf00      	nop
   3d6dc:	2002a314 	.word	0x2002a314
   3d6e0:	0004bff2 	.word	0x0004bff2
   3d6e4:	0004bfcb 	.word	0x0004bfcb
   3d6e8:	0004b5bf 	.word	0x0004b5bf
   3d6ec:	0004c007 	.word	0x0004c007
   3d6f0:	2002a304 	.word	0x2002a304
   3d6f4:	2002610c 	.word	0x2002610c
   3d6f8:	00050639 	.word	0x00050639
   3d6fc:	000505e0 	.word	0x000505e0
   3d700:	2002a2dc 	.word	0x2002a2dc
   3d704:	0004c01c 	.word	0x0004c01c
   3d708:	0004c033 	.word	0x0004c033

0003d70c <z_unpend_first_thread>:
{
   3d70c:	b538      	push	{r3, r4, r5, lr}
   3d70e:	4604      	mov	r4, r0
	__asm__ volatile(
   3d710:	f04f 0320 	mov.w	r3, #32
   3d714:	f3ef 8511 	mrs	r5, BASEPRI
   3d718:	f383 8811 	msr	BASEPRI, r3
   3d71c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3d720:	4839      	ldr	r0, [pc, #228]	; (3d808 <z_unpend_first_thread+0xfc>)
   3d722:	f000 fb2d 	bl	3dd80 <z_spin_lock_valid>
   3d726:	b960      	cbnz	r0, 3d742 <z_unpend_first_thread+0x36>
   3d728:	4938      	ldr	r1, [pc, #224]	; (3d80c <z_unpend_first_thread+0x100>)
   3d72a:	235f      	movs	r3, #95	; 0x5f
   3d72c:	4a38      	ldr	r2, [pc, #224]	; (3d810 <z_unpend_first_thread+0x104>)
   3d72e:	4839      	ldr	r0, [pc, #228]	; (3d814 <z_unpend_first_thread+0x108>)
   3d730:	f008 ff94 	bl	4665c <printk>
   3d734:	4838      	ldr	r0, [pc, #224]	; (3d818 <z_unpend_first_thread+0x10c>)
   3d736:	f008 ff91 	bl	4665c <printk>
   3d73a:	215f      	movs	r1, #95	; 0x5f
   3d73c:	4834      	ldr	r0, [pc, #208]	; (3d810 <z_unpend_first_thread+0x104>)
   3d73e:	f008 ff9a 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d742:	4831      	ldr	r0, [pc, #196]	; (3d808 <z_unpend_first_thread+0xfc>)
   3d744:	f000 fb3a 	bl	3ddbc <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   3d748:	4620      	mov	r0, r4
   3d74a:	f00b f9a2 	bl	48a92 <z_priq_dumb_best>
   3d74e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d750:	482d      	ldr	r0, [pc, #180]	; (3d808 <z_unpend_first_thread+0xfc>)
   3d752:	f000 fb23 	bl	3dd9c <z_spin_unlock_valid>
   3d756:	b960      	cbnz	r0, 3d772 <z_unpend_first_thread+0x66>
   3d758:	4930      	ldr	r1, [pc, #192]	; (3d81c <z_unpend_first_thread+0x110>)
   3d75a:	2372      	movs	r3, #114	; 0x72
   3d75c:	4a2c      	ldr	r2, [pc, #176]	; (3d810 <z_unpend_first_thread+0x104>)
   3d75e:	482d      	ldr	r0, [pc, #180]	; (3d814 <z_unpend_first_thread+0x108>)
   3d760:	f008 ff7c 	bl	4665c <printk>
   3d764:	482e      	ldr	r0, [pc, #184]	; (3d820 <z_unpend_first_thread+0x114>)
   3d766:	f008 ff79 	bl	4665c <printk>
   3d76a:	2172      	movs	r1, #114	; 0x72
   3d76c:	4828      	ldr	r0, [pc, #160]	; (3d810 <z_unpend_first_thread+0x104>)
   3d76e:	f008 ff82 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3d772:	f385 8811 	msr	BASEPRI, r5
   3d776:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   3d77a:	2c00      	cmp	r4, #0
   3d77c:	d041      	beq.n	3d802 <z_unpend_first_thread+0xf6>
	__asm__ volatile(
   3d77e:	f04f 0320 	mov.w	r3, #32
   3d782:	f3ef 8511 	mrs	r5, BASEPRI
   3d786:	f383 8811 	msr	BASEPRI, r3
   3d78a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3d78e:	481e      	ldr	r0, [pc, #120]	; (3d808 <z_unpend_first_thread+0xfc>)
   3d790:	f000 faf6 	bl	3dd80 <z_spin_lock_valid>
   3d794:	b960      	cbnz	r0, 3d7b0 <z_unpend_first_thread+0xa4>
   3d796:	491d      	ldr	r1, [pc, #116]	; (3d80c <z_unpend_first_thread+0x100>)
   3d798:	235f      	movs	r3, #95	; 0x5f
   3d79a:	4a1d      	ldr	r2, [pc, #116]	; (3d810 <z_unpend_first_thread+0x104>)
   3d79c:	481d      	ldr	r0, [pc, #116]	; (3d814 <z_unpend_first_thread+0x108>)
   3d79e:	f008 ff5d 	bl	4665c <printk>
   3d7a2:	481d      	ldr	r0, [pc, #116]	; (3d818 <z_unpend_first_thread+0x10c>)
   3d7a4:	f008 ff5a 	bl	4665c <printk>
   3d7a8:	215f      	movs	r1, #95	; 0x5f
   3d7aa:	4819      	ldr	r0, [pc, #100]	; (3d810 <z_unpend_first_thread+0x104>)
   3d7ac:	f008 ff63 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d7b0:	4815      	ldr	r0, [pc, #84]	; (3d808 <z_unpend_first_thread+0xfc>)
   3d7b2:	f000 fb03 	bl	3ddbc <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3d7b6:	f104 0008 	add.w	r0, r4, #8
   3d7ba:	f7ff f965 	bl	3ca88 <pended_on.isra.16>
   3d7be:	4621      	mov	r1, r4
   3d7c0:	f7ff faf8 	bl	3cdb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3d7c4:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d7c6:	4810      	ldr	r0, [pc, #64]	; (3d808 <z_unpend_first_thread+0xfc>)
   3d7c8:	f023 0302 	bic.w	r3, r3, #2
   3d7cc:	7363      	strb	r3, [r4, #13]
   3d7ce:	f000 fae5 	bl	3dd9c <z_spin_unlock_valid>
   3d7d2:	b960      	cbnz	r0, 3d7ee <z_unpend_first_thread+0xe2>
   3d7d4:	4911      	ldr	r1, [pc, #68]	; (3d81c <z_unpend_first_thread+0x110>)
   3d7d6:	2372      	movs	r3, #114	; 0x72
   3d7d8:	4a0d      	ldr	r2, [pc, #52]	; (3d810 <z_unpend_first_thread+0x104>)
   3d7da:	480e      	ldr	r0, [pc, #56]	; (3d814 <z_unpend_first_thread+0x108>)
   3d7dc:	f008 ff3e 	bl	4665c <printk>
   3d7e0:	480f      	ldr	r0, [pc, #60]	; (3d820 <z_unpend_first_thread+0x114>)
   3d7e2:	f008 ff3b 	bl	4665c <printk>
   3d7e6:	2172      	movs	r1, #114	; 0x72
   3d7e8:	4809      	ldr	r0, [pc, #36]	; (3d810 <z_unpend_first_thread+0x104>)
   3d7ea:	f008 ff44 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3d7ee:	f385 8811 	msr	BASEPRI, r5
   3d7f2:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   3d7f6:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   3d7f8:	f104 0018 	add.w	r0, r4, #24
   3d7fc:	60a3      	str	r3, [r4, #8]
   3d7fe:	f000 fed7 	bl	3e5b0 <z_abort_timeout>
}
   3d802:	4620      	mov	r0, r4
   3d804:	bd38      	pop	{r3, r4, r5, pc}
   3d806:	bf00      	nop
   3d808:	2002a314 	.word	0x2002a314
   3d80c:	0004bff2 	.word	0x0004bff2
   3d810:	0004bfcb 	.word	0x0004bfcb
   3d814:	0004b5bf 	.word	0x0004b5bf
   3d818:	0004c007 	.word	0x0004c007
   3d81c:	0004c01c 	.word	0x0004c01c
   3d820:	0004c033 	.word	0x0004c033

0003d824 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   3d824:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   3d826:	4b04      	ldr	r3, [pc, #16]	; (3d838 <z_sched_init+0x14>)
   3d828:	4608      	mov	r0, r1
   3d82a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   3d82e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   3d832:	f7ff b957 	b.w	3cae4 <k_sched_time_slice_set>
   3d836:	bf00      	nop
   3d838:	2002a2dc 	.word	0x2002a2dc

0003d83c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   3d83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d83e:	f3ef 8305 	mrs	r3, IPSR
   3d842:	2b0d      	cmp	r3, #13
   3d844:	d804      	bhi.n	3d850 <z_impl_k_yield+0x14>
   3d846:	b193      	cbz	r3, 3d86e <z_impl_k_yield+0x32>
   3d848:	4b46      	ldr	r3, [pc, #280]	; (3d964 <z_impl_k_yield+0x128>)
   3d84a:	685b      	ldr	r3, [r3, #4]
   3d84c:	051b      	lsls	r3, r3, #20
   3d84e:	d40e      	bmi.n	3d86e <z_impl_k_yield+0x32>
	__ASSERT(!z_arch_is_in_isr(), "");
   3d850:	4945      	ldr	r1, [pc, #276]	; (3d968 <z_impl_k_yield+0x12c>)
   3d852:	f44f 7362 	mov.w	r3, #904	; 0x388
   3d856:	4a45      	ldr	r2, [pc, #276]	; (3d96c <z_impl_k_yield+0x130>)
   3d858:	4845      	ldr	r0, [pc, #276]	; (3d970 <z_impl_k_yield+0x134>)
   3d85a:	f008 feff 	bl	4665c <printk>
   3d85e:	4845      	ldr	r0, [pc, #276]	; (3d974 <z_impl_k_yield+0x138>)
   3d860:	f008 fefc 	bl	4665c <printk>
   3d864:	f44f 7162 	mov.w	r1, #904	; 0x388
   3d868:	4840      	ldr	r0, [pc, #256]	; (3d96c <z_impl_k_yield+0x130>)
   3d86a:	f008 ff04 	bl	46676 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   3d86e:	4c42      	ldr	r4, [pc, #264]	; (3d978 <z_impl_k_yield+0x13c>)
   3d870:	4e42      	ldr	r6, [pc, #264]	; (3d97c <z_impl_k_yield+0x140>)
   3d872:	68a2      	ldr	r2, [r4, #8]
   3d874:	42b2      	cmp	r2, r6
   3d876:	d068      	beq.n	3d94a <z_impl_k_yield+0x10e>
	__asm__ volatile(
   3d878:	f04f 0320 	mov.w	r3, #32
   3d87c:	f3ef 8711 	mrs	r7, BASEPRI
   3d880:	f383 8811 	msr	BASEPRI, r3
   3d884:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3d888:	483d      	ldr	r0, [pc, #244]	; (3d980 <z_impl_k_yield+0x144>)
   3d88a:	f000 fa79 	bl	3dd80 <z_spin_lock_valid>
   3d88e:	b960      	cbnz	r0, 3d8aa <z_impl_k_yield+0x6e>
   3d890:	493c      	ldr	r1, [pc, #240]	; (3d984 <z_impl_k_yield+0x148>)
   3d892:	235f      	movs	r3, #95	; 0x5f
   3d894:	4a3c      	ldr	r2, [pc, #240]	; (3d988 <z_impl_k_yield+0x14c>)
   3d896:	4836      	ldr	r0, [pc, #216]	; (3d970 <z_impl_k_yield+0x134>)
   3d898:	f008 fee0 	bl	4665c <printk>
   3d89c:	483b      	ldr	r0, [pc, #236]	; (3d98c <z_impl_k_yield+0x150>)
   3d89e:	f008 fedd 	bl	4665c <printk>
   3d8a2:	215f      	movs	r1, #95	; 0x5f
   3d8a4:	4838      	ldr	r0, [pc, #224]	; (3d988 <z_impl_k_yield+0x14c>)
   3d8a6:	f008 fee6 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d8aa:	4835      	ldr	r0, [pc, #212]	; (3d980 <z_impl_k_yield+0x144>)
   3d8ac:	f000 fa86 	bl	3ddbc <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   3d8b0:	68a1      	ldr	r1, [r4, #8]
   3d8b2:	4837      	ldr	r0, [pc, #220]	; (3d990 <z_impl_k_yield+0x154>)
   3d8b4:	f7ff fa7e 	bl	3cdb4 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   3d8b8:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3d8ba:	42b5      	cmp	r5, r6
   3d8bc:	d10b      	bne.n	3d8d6 <z_impl_k_yield+0x9a>
   3d8be:	4935      	ldr	r1, [pc, #212]	; (3d994 <z_impl_k_yield+0x158>)
   3d8c0:	482b      	ldr	r0, [pc, #172]	; (3d970 <z_impl_k_yield+0x134>)
   3d8c2:	f240 237e 	movw	r3, #638	; 0x27e
   3d8c6:	4a29      	ldr	r2, [pc, #164]	; (3d96c <z_impl_k_yield+0x130>)
   3d8c8:	f008 fec8 	bl	4665c <printk>
   3d8cc:	f240 217e 	movw	r1, #638	; 0x27e
   3d8d0:	4826      	ldr	r0, [pc, #152]	; (3d96c <z_impl_k_yield+0x130>)
   3d8d2:	f008 fed0 	bl	46676 <assert_post_action>
   3d8d6:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3d8da:	4a2d      	ldr	r2, [pc, #180]	; (3d990 <z_impl_k_yield+0x154>)
   3d8dc:	4293      	cmp	r3, r2
   3d8de:	d00b      	beq.n	3d8f8 <z_impl_k_yield+0xbc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d8e0:	b153      	cbz	r3, 3d8f8 <z_impl_k_yield+0xbc>
	if (t1->base.prio < t2->base.prio) {
   3d8e2:	f995 000e 	ldrsb.w	r0, [r5, #14]
   3d8e6:	f993 600e 	ldrsb.w	r6, [r3, #14]
   3d8ea:	4286      	cmp	r6, r0
   3d8ec:	dc0a      	bgt.n	3d904 <z_impl_k_yield+0xc8>
	return (node == list->tail) ? NULL : node->next;
   3d8ee:	428b      	cmp	r3, r1
   3d8f0:	d002      	beq.n	3d8f8 <z_impl_k_yield+0xbc>
   3d8f2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d8f4:	2b00      	cmp	r3, #0
   3d8f6:	d1f6      	bne.n	3d8e6 <z_impl_k_yield+0xaa>
	node->prev = list->tail;
   3d8f8:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   3d8fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   3d8fe:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3d900:	62e5      	str	r5, [r4, #44]	; 0x2c
   3d902:	e005      	b.n	3d910 <z_impl_k_yield+0xd4>
	node->prev = successor->prev;
   3d904:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3d906:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   3d90a:	685a      	ldr	r2, [r3, #4]
   3d90c:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   3d90e:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   3d910:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   3d912:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   3d914:	7b53      	ldrb	r3, [r2, #13]
   3d916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3d91a:	7353      	strb	r3, [r2, #13]
   3d91c:	f7ff face 	bl	3cebc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3d920:	4817      	ldr	r0, [pc, #92]	; (3d980 <z_impl_k_yield+0x144>)
   3d922:	f000 fa3b 	bl	3dd9c <z_spin_unlock_valid>
   3d926:	b960      	cbnz	r0, 3d942 <z_impl_k_yield+0x106>
   3d928:	491b      	ldr	r1, [pc, #108]	; (3d998 <z_impl_k_yield+0x15c>)
   3d92a:	2372      	movs	r3, #114	; 0x72
   3d92c:	4a16      	ldr	r2, [pc, #88]	; (3d988 <z_impl_k_yield+0x14c>)
   3d92e:	4810      	ldr	r0, [pc, #64]	; (3d970 <z_impl_k_yield+0x134>)
   3d930:	f008 fe94 	bl	4665c <printk>
   3d934:	4819      	ldr	r0, [pc, #100]	; (3d99c <z_impl_k_yield+0x160>)
   3d936:	f008 fe91 	bl	4665c <printk>
   3d93a:	2172      	movs	r1, #114	; 0x72
   3d93c:	4812      	ldr	r0, [pc, #72]	; (3d988 <z_impl_k_yield+0x14c>)
   3d93e:	f008 fe9a 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3d942:	f387 8811 	msr	BASEPRI, r7
   3d946:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3d94a:	f04f 0320 	mov.w	r3, #32
   3d94e:	f3ef 8011 	mrs	r0, BASEPRI
   3d952:	f383 8811 	msr	BASEPRI, r3
   3d956:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   3d95a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   3d95e:	f7e4 bddb 	b.w	22518 <z_arch_swap>
   3d962:	bf00      	nop
   3d964:	e000ed00 	.word	0xe000ed00
   3d968:	0005057c 	.word	0x0005057c
   3d96c:	000505e0 	.word	0x000505e0
   3d970:	0004b5bf 	.word	0x0004b5bf
   3d974:	00050481 	.word	0x00050481
   3d978:	2002a2dc 	.word	0x2002a2dc
   3d97c:	2002610c 	.word	0x2002610c
   3d980:	2002a314 	.word	0x2002a314
   3d984:	0004bff2 	.word	0x0004bff2
   3d988:	0004bfcb 	.word	0x0004bfcb
   3d98c:	0004c007 	.word	0x0004c007
   3d990:	2002a304 	.word	0x2002a304
   3d994:	00050639 	.word	0x00050639
   3d998:	0004c01c 	.word	0x0004c01c
   3d99c:	0004c033 	.word	0x0004c033

0003d9a0 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   3d9a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3d9a4:	4604      	mov	r4, r0
   3d9a6:	f3ef 8305 	mrs	r3, IPSR
   3d9aa:	2b0d      	cmp	r3, #13
   3d9ac:	d804      	bhi.n	3d9b8 <z_tick_sleep+0x18>
   3d9ae:	b193      	cbz	r3, 3d9d6 <z_tick_sleep+0x36>
   3d9b0:	4b3e      	ldr	r3, [pc, #248]	; (3daac <z_tick_sleep+0x10c>)
   3d9b2:	685b      	ldr	r3, [r3, #4]
   3d9b4:	051a      	lsls	r2, r3, #20
   3d9b6:	d40e      	bmi.n	3d9d6 <z_tick_sleep+0x36>
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!z_arch_is_in_isr(), "");
   3d9b8:	493d      	ldr	r1, [pc, #244]	; (3dab0 <z_tick_sleep+0x110>)
   3d9ba:	f240 33a6 	movw	r3, #934	; 0x3a6
   3d9be:	4a3d      	ldr	r2, [pc, #244]	; (3dab4 <z_tick_sleep+0x114>)
   3d9c0:	483d      	ldr	r0, [pc, #244]	; (3dab8 <z_tick_sleep+0x118>)
   3d9c2:	f008 fe4b 	bl	4665c <printk>
   3d9c6:	483d      	ldr	r0, [pc, #244]	; (3dabc <z_tick_sleep+0x11c>)
   3d9c8:	f008 fe48 	bl	4665c <printk>
   3d9cc:	f240 31a6 	movw	r1, #934	; 0x3a6
   3d9d0:	4838      	ldr	r0, [pc, #224]	; (3dab4 <z_tick_sleep+0x114>)
   3d9d2:	f008 fe50 	bl	46676 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   3d9d6:	b92c      	cbnz	r4, 3d9e4 <z_tick_sleep+0x44>
	z_impl_k_yield();
   3d9d8:	f7ff ff30 	bl	3d83c <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   3d9dc:	4620      	mov	r0, r4
   3d9de:	b002      	add	sp, #8
   3d9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   3d9e4:	f00b f8fe 	bl	48be4 <z_tick_get_32>
	struct k_spinlock local_lock = {};
   3d9e8:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   3d9ea:	f104 0801 	add.w	r8, r4, #1
	struct k_spinlock local_lock = {};
   3d9ee:	ae02      	add	r6, sp, #8
	expected_wakeup_time = ticks + z_tick_get_32();
   3d9f0:	eb08 0400 	add.w	r4, r8, r0
	struct k_spinlock local_lock = {};
   3d9f4:	f846 3d04 	str.w	r3, [r6, #-4]!
   3d9f8:	f04f 0320 	mov.w	r3, #32
   3d9fc:	f3ef 8711 	mrs	r7, BASEPRI
   3da00:	f383 8811 	msr	BASEPRI, r3
   3da04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3da08:	4630      	mov	r0, r6
   3da0a:	f000 f9b9 	bl	3dd80 <z_spin_lock_valid>
   3da0e:	b960      	cbnz	r0, 3da2a <z_tick_sleep+0x8a>
   3da10:	492b      	ldr	r1, [pc, #172]	; (3dac0 <z_tick_sleep+0x120>)
   3da12:	235f      	movs	r3, #95	; 0x5f
   3da14:	4a2b      	ldr	r2, [pc, #172]	; (3dac4 <z_tick_sleep+0x124>)
   3da16:	4828      	ldr	r0, [pc, #160]	; (3dab8 <z_tick_sleep+0x118>)
   3da18:	f008 fe20 	bl	4665c <printk>
   3da1c:	482a      	ldr	r0, [pc, #168]	; (3dac8 <z_tick_sleep+0x128>)
   3da1e:	f008 fe1d 	bl	4665c <printk>
   3da22:	215f      	movs	r1, #95	; 0x5f
   3da24:	4827      	ldr	r0, [pc, #156]	; (3dac4 <z_tick_sleep+0x124>)
   3da26:	f008 fe26 	bl	46676 <assert_post_action>
	pending_current = _current;
   3da2a:	4d28      	ldr	r5, [pc, #160]	; (3dacc <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   3da2c:	4630      	mov	r0, r6
   3da2e:	f000 f9c5 	bl	3ddbc <z_spin_lock_set_owner>
   3da32:	4b27      	ldr	r3, [pc, #156]	; (3dad0 <z_tick_sleep+0x130>)
   3da34:	68a8      	ldr	r0, [r5, #8]
   3da36:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   3da38:	f7ff fca2 	bl	3d380 <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   3da3c:	68a8      	ldr	r0, [r5, #8]
   3da3e:	4642      	mov	r2, r8
   3da40:	3018      	adds	r0, #24
   3da42:	4924      	ldr	r1, [pc, #144]	; (3dad4 <z_tick_sleep+0x134>)
   3da44:	f000 fd0e 	bl	3e464 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   3da48:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3da4a:	4630      	mov	r0, r6
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3da4c:	7b53      	ldrb	r3, [r2, #13]
   3da4e:	f043 0310 	orr.w	r3, r3, #16
   3da52:	7353      	strb	r3, [r2, #13]
   3da54:	f000 f9a2 	bl	3dd9c <z_spin_unlock_valid>
   3da58:	b960      	cbnz	r0, 3da74 <z_tick_sleep+0xd4>
   3da5a:	491f      	ldr	r1, [pc, #124]	; (3dad8 <z_tick_sleep+0x138>)
   3da5c:	2389      	movs	r3, #137	; 0x89
   3da5e:	4a19      	ldr	r2, [pc, #100]	; (3dac4 <z_tick_sleep+0x124>)
   3da60:	4815      	ldr	r0, [pc, #84]	; (3dab8 <z_tick_sleep+0x118>)
   3da62:	f008 fdfb 	bl	4665c <printk>
   3da66:	481d      	ldr	r0, [pc, #116]	; (3dadc <z_tick_sleep+0x13c>)
   3da68:	f008 fdf8 	bl	4665c <printk>
   3da6c:	2189      	movs	r1, #137	; 0x89
   3da6e:	4815      	ldr	r0, [pc, #84]	; (3dac4 <z_tick_sleep+0x124>)
   3da70:	f008 fe01 	bl	46676 <assert_post_action>
   3da74:	4638      	mov	r0, r7
   3da76:	f7e4 fd4f 	bl	22518 <z_arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   3da7a:	68ab      	ldr	r3, [r5, #8]
   3da7c:	7b5b      	ldrb	r3, [r3, #13]
   3da7e:	06db      	lsls	r3, r3, #27
   3da80:	d50e      	bpl.n	3daa0 <z_tick_sleep+0x100>
   3da82:	4917      	ldr	r1, [pc, #92]	; (3dae0 <z_tick_sleep+0x140>)
   3da84:	f240 33c3 	movw	r3, #963	; 0x3c3
   3da88:	4a0a      	ldr	r2, [pc, #40]	; (3dab4 <z_tick_sleep+0x114>)
   3da8a:	480b      	ldr	r0, [pc, #44]	; (3dab8 <z_tick_sleep+0x118>)
   3da8c:	f008 fde6 	bl	4665c <printk>
   3da90:	480a      	ldr	r0, [pc, #40]	; (3dabc <z_tick_sleep+0x11c>)
   3da92:	f008 fde3 	bl	4665c <printk>
   3da96:	f240 31c3 	movw	r1, #963	; 0x3c3
   3da9a:	4806      	ldr	r0, [pc, #24]	; (3dab4 <z_tick_sleep+0x114>)
   3da9c:	f008 fdeb 	bl	46676 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   3daa0:	f00b f8a0 	bl	48be4 <z_tick_get_32>
   3daa4:	1a24      	subs	r4, r4, r0
   3daa6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   3daaa:	e797      	b.n	3d9dc <z_tick_sleep+0x3c>
   3daac:	e000ed00 	.word	0xe000ed00
   3dab0:	0005057c 	.word	0x0005057c
   3dab4:	000505e0 	.word	0x000505e0
   3dab8:	0004b5bf 	.word	0x0004b5bf
   3dabc:	00050481 	.word	0x00050481
   3dac0:	0004bff2 	.word	0x0004bff2
   3dac4:	0004bfcb 	.word	0x0004bfcb
   3dac8:	0004c007 	.word	0x0004c007
   3dacc:	2002a2dc 	.word	0x2002a2dc
   3dad0:	2002a310 	.word	0x2002a310
   3dad4:	0003d12d 	.word	0x0003d12d
   3dad8:	0004c01c 	.word	0x0004c01c
   3dadc:	0004c033 	.word	0x0004c033
   3dae0:	0005065a 	.word	0x0005065a

0003dae4 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   3dae4:	4b01      	ldr	r3, [pc, #4]	; (3daec <z_impl_k_current_get+0x8>)
   3dae6:	6898      	ldr	r0, [r3, #8]
   3dae8:	4770      	bx	lr
   3daea:	bf00      	nop
   3daec:	2002a2dc 	.word	0x2002a2dc

0003daf0 <z_impl_k_sem_init>:

#endif /* CONFIG_OBJECT_TRACING */

void z_impl_k_sem_init(struct k_sem *sem, unsigned int initial_count,
		      unsigned int limit)
{
   3daf0:	b570      	push	{r4, r5, r6, lr}
   3daf2:	4604      	mov	r4, r0
   3daf4:	460e      	mov	r6, r1
	__ASSERT(limit != 0U, "limit cannot be zero");
   3daf6:	4615      	mov	r5, r2
   3daf8:	b962      	cbnz	r2, 3db14 <z_impl_k_sem_init+0x24>
   3dafa:	4912      	ldr	r1, [pc, #72]	; (3db44 <z_impl_k_sem_init+0x54>)
   3dafc:	2341      	movs	r3, #65	; 0x41
   3dafe:	4a12      	ldr	r2, [pc, #72]	; (3db48 <z_impl_k_sem_init+0x58>)
   3db00:	4812      	ldr	r0, [pc, #72]	; (3db4c <z_impl_k_sem_init+0x5c>)
   3db02:	f008 fdab 	bl	4665c <printk>
   3db06:	4812      	ldr	r0, [pc, #72]	; (3db50 <z_impl_k_sem_init+0x60>)
   3db08:	f008 fda8 	bl	4665c <printk>
   3db0c:	2141      	movs	r1, #65	; 0x41
   3db0e:	480e      	ldr	r0, [pc, #56]	; (3db48 <z_impl_k_sem_init+0x58>)
   3db10:	f008 fdb1 	bl	46676 <assert_post_action>
	__ASSERT(initial_count <= limit, "count cannot be greater than limit");
   3db14:	42b5      	cmp	r5, r6
   3db16:	d20c      	bcs.n	3db32 <z_impl_k_sem_init+0x42>
   3db18:	490e      	ldr	r1, [pc, #56]	; (3db54 <z_impl_k_sem_init+0x64>)
   3db1a:	2342      	movs	r3, #66	; 0x42
   3db1c:	4a0a      	ldr	r2, [pc, #40]	; (3db48 <z_impl_k_sem_init+0x58>)
   3db1e:	480b      	ldr	r0, [pc, #44]	; (3db4c <z_impl_k_sem_init+0x5c>)
   3db20:	f008 fd9c 	bl	4665c <printk>
   3db24:	480c      	ldr	r0, [pc, #48]	; (3db58 <z_impl_k_sem_init+0x68>)
   3db26:	f008 fd99 	bl	4665c <printk>
   3db2a:	2142      	movs	r1, #66	; 0x42
   3db2c:	4806      	ldr	r0, [pc, #24]	; (3db48 <z_impl_k_sem_init+0x58>)
   3db2e:	f008 fda2 	bl	46676 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SEMA_INIT);
	sem->count = initial_count;
	sem->limit = limit;
	z_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   3db32:	f104 0310 	add.w	r3, r4, #16
	sem->limit = limit;
   3db36:	e9c4 6502 	strd	r6, r5, [r4, #8]
	list->tail = (sys_dnode_t *)list;
   3db3a:	e9c4 4400 	strd	r4, r4, [r4]
   3db3e:	e9c4 3304 	strd	r3, r3, [r4, #16]

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	z_object_init(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_INIT);
}
   3db42:	bd70      	pop	{r4, r5, r6, pc}
   3db44:	000506b3 	.word	0x000506b3
   3db48:	00050692 	.word	0x00050692
   3db4c:	0004b5bf 	.word	0x0004b5bf
   3db50:	000506bf 	.word	0x000506bf
   3db54:	000506d6 	.word	0x000506d6
   3db58:	000506ed 	.word	0x000506ed

0003db5c <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   3db5c:	b570      	push	{r4, r5, r6, lr}
   3db5e:	4604      	mov	r4, r0
   3db60:	f04f 0320 	mov.w	r3, #32
   3db64:	f3ef 8611 	mrs	r6, BASEPRI
   3db68:	f383 8811 	msr	BASEPRI, r3
   3db6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3db70:	4819      	ldr	r0, [pc, #100]	; (3dbd8 <z_impl_k_sem_give+0x7c>)
   3db72:	f000 f905 	bl	3dd80 <z_spin_lock_valid>
   3db76:	b960      	cbnz	r0, 3db92 <z_impl_k_sem_give+0x36>
   3db78:	4918      	ldr	r1, [pc, #96]	; (3dbdc <z_impl_k_sem_give+0x80>)
   3db7a:	235f      	movs	r3, #95	; 0x5f
   3db7c:	4a18      	ldr	r2, [pc, #96]	; (3dbe0 <z_impl_k_sem_give+0x84>)
   3db7e:	4819      	ldr	r0, [pc, #100]	; (3dbe4 <z_impl_k_sem_give+0x88>)
   3db80:	f008 fd6c 	bl	4665c <printk>
   3db84:	4818      	ldr	r0, [pc, #96]	; (3dbe8 <z_impl_k_sem_give+0x8c>)
   3db86:	f008 fd69 	bl	4665c <printk>
   3db8a:	215f      	movs	r1, #95	; 0x5f
   3db8c:	4814      	ldr	r0, [pc, #80]	; (3dbe0 <z_impl_k_sem_give+0x84>)
   3db8e:	f008 fd72 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3db92:	4811      	ldr	r0, [pc, #68]	; (3dbd8 <z_impl_k_sem_give+0x7c>)
   3db94:	f000 f912 	bl	3ddbc <z_spin_lock_set_owner>
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   3db98:	4620      	mov	r0, r4
   3db9a:	f7ff fdb7 	bl	3d70c <z_unpend_first_thread>
	if (thread != NULL) {
   3db9e:	4605      	mov	r5, r0
   3dba0:	b170      	cbz	r0, 3dbc0 <z_impl_k_sem_give+0x64>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3dba2:	7b43      	ldrb	r3, [r0, #13]
   3dba4:	06db      	lsls	r3, r3, #27
   3dba6:	d103      	bne.n	3dbb0 <z_impl_k_sem_give+0x54>
	if (z_is_thread_ready(thread)) {
   3dba8:	6983      	ldr	r3, [r0, #24]
   3dbaa:	b90b      	cbnz	r3, 3dbb0 <z_impl_k_sem_give+0x54>
		z_add_thread_to_ready_q(thread);
   3dbac:	f7ff fa3e 	bl	3d02c <z_add_thread_to_ready_q>
   3dbb0:	2300      	movs	r3, #0
   3dbb2:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   3dbb4:	4631      	mov	r1, r6
}
   3dbb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   3dbba:	4807      	ldr	r0, [pc, #28]	; (3dbd8 <z_impl_k_sem_give+0x7c>)
   3dbbc:	f7ff b840 	b.w	3cc40 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3dbc0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   3dbc4:	429a      	cmp	r2, r3
   3dbc6:	bf18      	it	ne
   3dbc8:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3dbca:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3dbcc:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3dbce:	f104 0010 	add.w	r0, r4, #16
   3dbd2:	f00b f863 	bl	48c9c <z_handle_obj_poll_events>
   3dbd6:	e7ed      	b.n	3dbb4 <z_impl_k_sem_give+0x58>
   3dbd8:	2002a320 	.word	0x2002a320
   3dbdc:	0004bff2 	.word	0x0004bff2
   3dbe0:	0004bfcb 	.word	0x0004bfcb
   3dbe4:	0004b5bf 	.word	0x0004b5bf
   3dbe8:	0004c007 	.word	0x0004c007

0003dbec <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   3dbec:	b570      	push	{r4, r5, r6, lr}
   3dbee:	4605      	mov	r5, r0
   3dbf0:	460e      	mov	r6, r1
   3dbf2:	f3ef 8305 	mrs	r3, IPSR
   3dbf6:	2b0d      	cmp	r3, #13
   3dbf8:	d804      	bhi.n	3dc04 <z_impl_k_sem_take+0x18>
   3dbfa:	b18b      	cbz	r3, 3dc20 <z_impl_k_sem_take+0x34>
   3dbfc:	4b34      	ldr	r3, [pc, #208]	; (3dcd0 <z_impl_k_sem_take+0xe4>)
   3dbfe:	685b      	ldr	r3, [r3, #4]
   3dc00:	051b      	lsls	r3, r3, #20
   3dc02:	d40d      	bmi.n	3dc20 <z_impl_k_sem_take+0x34>
	__ASSERT(((z_arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
   3dc04:	b166      	cbz	r6, 3dc20 <z_impl_k_sem_take+0x34>
   3dc06:	4933      	ldr	r1, [pc, #204]	; (3dcd4 <z_impl_k_sem_take+0xe8>)
   3dc08:	238d      	movs	r3, #141	; 0x8d
   3dc0a:	4a33      	ldr	r2, [pc, #204]	; (3dcd8 <z_impl_k_sem_take+0xec>)
   3dc0c:	4833      	ldr	r0, [pc, #204]	; (3dcdc <z_impl_k_sem_take+0xf0>)
   3dc0e:	f008 fd25 	bl	4665c <printk>
   3dc12:	4833      	ldr	r0, [pc, #204]	; (3dce0 <z_impl_k_sem_take+0xf4>)
   3dc14:	f008 fd22 	bl	4665c <printk>
   3dc18:	218d      	movs	r1, #141	; 0x8d
   3dc1a:	482f      	ldr	r0, [pc, #188]	; (3dcd8 <z_impl_k_sem_take+0xec>)
   3dc1c:	f008 fd2b 	bl	46676 <assert_post_action>
   3dc20:	f04f 0320 	mov.w	r3, #32
   3dc24:	f3ef 8411 	mrs	r4, BASEPRI
   3dc28:	f383 8811 	msr	BASEPRI, r3
   3dc2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3dc30:	482c      	ldr	r0, [pc, #176]	; (3dce4 <z_impl_k_sem_take+0xf8>)
   3dc32:	f000 f8a5 	bl	3dd80 <z_spin_lock_valid>
   3dc36:	b960      	cbnz	r0, 3dc52 <z_impl_k_sem_take+0x66>
   3dc38:	492b      	ldr	r1, [pc, #172]	; (3dce8 <z_impl_k_sem_take+0xfc>)
   3dc3a:	235f      	movs	r3, #95	; 0x5f
   3dc3c:	4a2b      	ldr	r2, [pc, #172]	; (3dcec <z_impl_k_sem_take+0x100>)
   3dc3e:	4827      	ldr	r0, [pc, #156]	; (3dcdc <z_impl_k_sem_take+0xf0>)
   3dc40:	f008 fd0c 	bl	4665c <printk>
   3dc44:	482a      	ldr	r0, [pc, #168]	; (3dcf0 <z_impl_k_sem_take+0x104>)
   3dc46:	f008 fd09 	bl	4665c <printk>
   3dc4a:	215f      	movs	r1, #95	; 0x5f
   3dc4c:	4827      	ldr	r0, [pc, #156]	; (3dcec <z_impl_k_sem_take+0x100>)
   3dc4e:	f008 fd12 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3dc52:	4824      	ldr	r0, [pc, #144]	; (3dce4 <z_impl_k_sem_take+0xf8>)
   3dc54:	f000 f8b2 	bl	3ddbc <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   3dc58:	68ab      	ldr	r3, [r5, #8]
   3dc5a:	b1c3      	cbz	r3, 3dc8e <z_impl_k_sem_take+0xa2>
		sem->count--;
   3dc5c:	3b01      	subs	r3, #1
   3dc5e:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3dc60:	4820      	ldr	r0, [pc, #128]	; (3dce4 <z_impl_k_sem_take+0xf8>)
   3dc62:	f000 f89b 	bl	3dd9c <z_spin_unlock_valid>
   3dc66:	b960      	cbnz	r0, 3dc82 <z_impl_k_sem_take+0x96>
   3dc68:	4922      	ldr	r1, [pc, #136]	; (3dcf4 <z_impl_k_sem_take+0x108>)
   3dc6a:	2372      	movs	r3, #114	; 0x72
   3dc6c:	4a1f      	ldr	r2, [pc, #124]	; (3dcec <z_impl_k_sem_take+0x100>)
   3dc6e:	481b      	ldr	r0, [pc, #108]	; (3dcdc <z_impl_k_sem_take+0xf0>)
   3dc70:	f008 fcf4 	bl	4665c <printk>
   3dc74:	4820      	ldr	r0, [pc, #128]	; (3dcf8 <z_impl_k_sem_take+0x10c>)
   3dc76:	f008 fcf1 	bl	4665c <printk>
   3dc7a:	2172      	movs	r1, #114	; 0x72
   3dc7c:	481b      	ldr	r0, [pc, #108]	; (3dcec <z_impl_k_sem_take+0x100>)
   3dc7e:	f008 fcfa 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3dc82:	f384 8811 	msr	BASEPRI, r4
   3dc86:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   3dc8a:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   3dc8c:	bd70      	pop	{r4, r5, r6, pc}
	if (timeout == K_NO_WAIT) {
   3dc8e:	b9be      	cbnz	r6, 3dcc0 <z_impl_k_sem_take+0xd4>
   3dc90:	4814      	ldr	r0, [pc, #80]	; (3dce4 <z_impl_k_sem_take+0xf8>)
   3dc92:	f000 f883 	bl	3dd9c <z_spin_unlock_valid>
   3dc96:	b960      	cbnz	r0, 3dcb2 <z_impl_k_sem_take+0xc6>
   3dc98:	4916      	ldr	r1, [pc, #88]	; (3dcf4 <z_impl_k_sem_take+0x108>)
   3dc9a:	2372      	movs	r3, #114	; 0x72
   3dc9c:	4a13      	ldr	r2, [pc, #76]	; (3dcec <z_impl_k_sem_take+0x100>)
   3dc9e:	480f      	ldr	r0, [pc, #60]	; (3dcdc <z_impl_k_sem_take+0xf0>)
   3dca0:	f008 fcdc 	bl	4665c <printk>
   3dca4:	4814      	ldr	r0, [pc, #80]	; (3dcf8 <z_impl_k_sem_take+0x10c>)
   3dca6:	f008 fcd9 	bl	4665c <printk>
   3dcaa:	2172      	movs	r1, #114	; 0x72
   3dcac:	480f      	ldr	r0, [pc, #60]	; (3dcec <z_impl_k_sem_take+0x100>)
   3dcae:	f008 fce2 	bl	46676 <assert_post_action>
   3dcb2:	f384 8811 	msr	BASEPRI, r4
   3dcb6:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   3dcba:	f06f 000f 	mvn.w	r0, #15
   3dcbe:	e7e5      	b.n	3dc8c <z_impl_k_sem_take+0xa0>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   3dcc0:	4633      	mov	r3, r6
   3dcc2:	462a      	mov	r2, r5
   3dcc4:	4621      	mov	r1, r4
}
   3dcc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   3dcca:	4806      	ldr	r0, [pc, #24]	; (3dce4 <z_impl_k_sem_take+0xf8>)
   3dccc:	f7ff bc62 	b.w	3d594 <z_pend_curr>
   3dcd0:	e000ed00 	.word	0xe000ed00
   3dcd4:	00050712 	.word	0x00050712
   3dcd8:	00050692 	.word	0x00050692
   3dcdc:	0004b5bf 	.word	0x0004b5bf
   3dce0:	00050481 	.word	0x00050481
   3dce4:	2002a320 	.word	0x2002a320
   3dce8:	0004bff2 	.word	0x0004bff2
   3dcec:	0004bfcb 	.word	0x0004bfcb
   3dcf0:	0004c007 	.word	0x0004c007
   3dcf4:	0004c01c 	.word	0x0004c01c
   3dcf8:	0004c033 	.word	0x0004c033

0003dcfc <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   3dcfc:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   3dcfe:	4c08      	ldr	r4, [pc, #32]	; (3dd20 <k_sys_work_q_init+0x24>)
   3dd00:	f04f 33ff 	mov.w	r3, #4294967295
   3dd04:	f44f 6200 	mov.w	r2, #2048	; 0x800
   3dd08:	4906      	ldr	r1, [pc, #24]	; (3dd24 <k_sys_work_q_init+0x28>)
   3dd0a:	4620      	mov	r0, r4
   3dd0c:	f000 fa72 	bl	3e1f4 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   3dd10:	4905      	ldr	r1, [pc, #20]	; (3dd28 <k_sys_work_q_init+0x2c>)
   3dd12:	f104 0014 	add.w	r0, r4, #20
   3dd16:	f00a fefc 	bl	48b12 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   3dd1a:	2000      	movs	r0, #0
   3dd1c:	bd10      	pop	{r4, pc}
   3dd1e:	bf00      	nop
   3dd20:	2002a324 	.word	0x2002a324
   3dd24:	2002f430 	.word	0x2002f430
   3dd28:	00050740 	.word	0x00050740

0003dd2c <k_is_in_isr>:
   3dd2c:	f3ef 8005 	mrs	r0, IPSR
   3dd30:	280d      	cmp	r0, #13
   3dd32:	d807      	bhi.n	3dd44 <k_is_in_isr+0x18>
   3dd34:	b138      	cbz	r0, 3dd46 <k_is_in_isr+0x1a>
   3dd36:	4b04      	ldr	r3, [pc, #16]	; (3dd48 <k_is_in_isr+0x1c>)
   3dd38:	6858      	ldr	r0, [r3, #4]
   3dd3a:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   3dd3e:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   3dd42:	4770      	bx	lr
   3dd44:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_arch_is_in_isr();
}
   3dd46:	4770      	bx	lr
   3dd48:	e000ed00 	.word	0xe000ed00

0003dd4c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   3dd4c:	b530      	push	{r4, r5, lr}
   3dd4e:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3dd50:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   3dd52:	4604      	mov	r4, r0
	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3dd54:	9504      	str	r5, [sp, #16]
   3dd56:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   3dd58:	9503      	str	r5, [sp, #12]
   3dd5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   3dd5c:	9502      	str	r5, [sp, #8]
   3dd5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   3dd60:	9501      	str	r5, [sp, #4]
   3dd62:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   3dd64:	9500      	str	r5, [sp, #0]
   3dd66:	f7e4 fc41 	bl	225ec <z_arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   3dd6a:	4b04      	ldr	r3, [pc, #16]	; (3dd7c <z_setup_new_thread+0x30>)
   3dd6c:	689b      	ldr	r3, [r3, #8]
   3dd6e:	b913      	cbnz	r3, 3dd76 <z_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   3dd70:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   3dd72:	b007      	add	sp, #28
   3dd74:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   3dd76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3dd78:	e7fa      	b.n	3dd70 <z_setup_new_thread+0x24>
   3dd7a:	bf00      	nop
   3dd7c:	2002a2dc 	.word	0x2002a2dc

0003dd80 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   3dd80:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   3dd82:	b138      	cbz	r0, 3dd94 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   3dd84:	4b04      	ldr	r3, [pc, #16]	; (3dd98 <z_spin_lock_valid+0x18>)
   3dd86:	f000 0003 	and.w	r0, r0, #3
   3dd8a:	7d1b      	ldrb	r3, [r3, #20]
   3dd8c:	1ac0      	subs	r0, r0, r3
   3dd8e:	bf18      	it	ne
   3dd90:	2001      	movne	r0, #1
   3dd92:	4770      	bx	lr
			return false;
		}
	}
	return true;
   3dd94:	2001      	movs	r0, #1
}
   3dd96:	4770      	bx	lr
   3dd98:	2002a2dc 	.word	0x2002a2dc

0003dd9c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   3dd9c:	4a06      	ldr	r2, [pc, #24]	; (3ddb8 <z_spin_unlock_valid+0x1c>)
   3dd9e:	7d11      	ldrb	r1, [r2, #20]
   3dda0:	6893      	ldr	r3, [r2, #8]
   3dda2:	6802      	ldr	r2, [r0, #0]
   3dda4:	430b      	orrs	r3, r1
   3dda6:	429a      	cmp	r2, r3
   3dda8:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   3ddac:	bf06      	itte	eq
   3ddae:	6003      	streq	r3, [r0, #0]
	return true;
   3ddb0:	2001      	moveq	r0, #1
		return false;
   3ddb2:	4618      	movne	r0, r3
}
   3ddb4:	4770      	bx	lr
   3ddb6:	bf00      	nop
   3ddb8:	2002a2dc 	.word	0x2002a2dc

0003ddbc <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   3ddbc:	4a02      	ldr	r2, [pc, #8]	; (3ddc8 <z_spin_lock_set_owner+0xc>)
   3ddbe:	7d11      	ldrb	r1, [r2, #20]
   3ddc0:	6893      	ldr	r3, [r2, #8]
   3ddc2:	430b      	orrs	r3, r1
   3ddc4:	6003      	str	r3, [r0, #0]
}
   3ddc6:	4770      	bx	lr
   3ddc8:	2002a2dc 	.word	0x2002a2dc

0003ddcc <z_impl_k_thread_start>:
{
   3ddcc:	b538      	push	{r3, r4, r5, lr}
   3ddce:	4604      	mov	r4, r0
	__asm__ volatile(
   3ddd0:	f04f 0320 	mov.w	r3, #32
   3ddd4:	f3ef 8511 	mrs	r5, BASEPRI
   3ddd8:	f383 8811 	msr	BASEPRI, r3
   3dddc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3dde0:	481e      	ldr	r0, [pc, #120]	; (3de5c <z_impl_k_thread_start+0x90>)
   3dde2:	f7ff ffcd 	bl	3dd80 <z_spin_lock_valid>
   3dde6:	b960      	cbnz	r0, 3de02 <z_impl_k_thread_start+0x36>
   3dde8:	491d      	ldr	r1, [pc, #116]	; (3de60 <z_impl_k_thread_start+0x94>)
   3ddea:	235f      	movs	r3, #95	; 0x5f
   3ddec:	4a1d      	ldr	r2, [pc, #116]	; (3de64 <z_impl_k_thread_start+0x98>)
   3ddee:	481e      	ldr	r0, [pc, #120]	; (3de68 <z_impl_k_thread_start+0x9c>)
   3ddf0:	f008 fc34 	bl	4665c <printk>
   3ddf4:	481d      	ldr	r0, [pc, #116]	; (3de6c <z_impl_k_thread_start+0xa0>)
   3ddf6:	f008 fc31 	bl	4665c <printk>
   3ddfa:	215f      	movs	r1, #95	; 0x5f
   3ddfc:	4819      	ldr	r0, [pc, #100]	; (3de64 <z_impl_k_thread_start+0x98>)
   3ddfe:	f008 fc3a 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3de02:	4816      	ldr	r0, [pc, #88]	; (3de5c <z_impl_k_thread_start+0x90>)
   3de04:	f7ff ffda 	bl	3ddbc <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   3de08:	7b63      	ldrb	r3, [r4, #13]
   3de0a:	075a      	lsls	r2, r3, #29
   3de0c:	d415      	bmi.n	3de3a <z_impl_k_thread_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3de0e:	4813      	ldr	r0, [pc, #76]	; (3de5c <z_impl_k_thread_start+0x90>)
   3de10:	f7ff ffc4 	bl	3dd9c <z_spin_unlock_valid>
   3de14:	b960      	cbnz	r0, 3de30 <z_impl_k_thread_start+0x64>
   3de16:	4916      	ldr	r1, [pc, #88]	; (3de70 <z_impl_k_thread_start+0xa4>)
   3de18:	2372      	movs	r3, #114	; 0x72
   3de1a:	4a12      	ldr	r2, [pc, #72]	; (3de64 <z_impl_k_thread_start+0x98>)
   3de1c:	4812      	ldr	r0, [pc, #72]	; (3de68 <z_impl_k_thread_start+0x9c>)
   3de1e:	f008 fc1d 	bl	4665c <printk>
   3de22:	4814      	ldr	r0, [pc, #80]	; (3de74 <z_impl_k_thread_start+0xa8>)
   3de24:	f008 fc1a 	bl	4665c <printk>
   3de28:	2172      	movs	r1, #114	; 0x72
   3de2a:	480e      	ldr	r0, [pc, #56]	; (3de64 <z_impl_k_thread_start+0x98>)
   3de2c:	f008 fc23 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3de30:	f385 8811 	msr	BASEPRI, r5
   3de34:	f3bf 8f6f 	isb	sy
}
   3de38:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3de3a:	f023 0304 	bic.w	r3, r3, #4
   3de3e:	7363      	strb	r3, [r4, #13]
	if (z_is_thread_ready(thread)) {
   3de40:	4620      	mov	r0, r4
   3de42:	f00a fe5b 	bl	48afc <z_is_thread_ready>
   3de46:	b110      	cbz	r0, 3de4e <z_impl_k_thread_start+0x82>
		z_add_thread_to_ready_q(thread);
   3de48:	4620      	mov	r0, r4
   3de4a:	f7ff f8ef 	bl	3d02c <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   3de4e:	4629      	mov	r1, r5
}
   3de50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   3de54:	4801      	ldr	r0, [pc, #4]	; (3de5c <z_impl_k_thread_start+0x90>)
   3de56:	f7fe bef3 	b.w	3cc40 <z_reschedule>
   3de5a:	bf00      	nop
   3de5c:	2002a3e8 	.word	0x2002a3e8
   3de60:	0004bff2 	.word	0x0004bff2
   3de64:	0004bfcb 	.word	0x0004bfcb
   3de68:	0004b5bf 	.word	0x0004b5bf
   3de6c:	0004c007 	.word	0x0004c007
   3de70:	0004c01c 	.word	0x0004c01c
   3de74:	0004c033 	.word	0x0004c033

0003de78 <z_impl_k_thread_create>:
{
   3de78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3de7c:	b086      	sub	sp, #24
   3de7e:	4604      	mov	r4, r0
   3de80:	460e      	mov	r6, r1
   3de82:	4617      	mov	r7, r2
   3de84:	4698      	mov	r8, r3
   3de86:	9d11      	ldr	r5, [sp, #68]	; 0x44
   3de88:	f3ef 8305 	mrs	r3, IPSR
   3de8c:	2b0d      	cmp	r3, #13
   3de8e:	d804      	bhi.n	3de9a <z_impl_k_thread_create+0x22>
   3de90:	b193      	cbz	r3, 3deb8 <z_impl_k_thread_create+0x40>
   3de92:	4b21      	ldr	r3, [pc, #132]	; (3df18 <z_impl_k_thread_create+0xa0>)
   3de94:	685b      	ldr	r3, [r3, #4]
   3de96:	051a      	lsls	r2, r3, #20
   3de98:	d40e      	bmi.n	3deb8 <z_impl_k_thread_create+0x40>
	__ASSERT(!z_arch_is_in_isr(), "Threads may not be created in ISRs");
   3de9a:	4920      	ldr	r1, [pc, #128]	; (3df1c <z_impl_k_thread_create+0xa4>)
   3de9c:	f240 2315 	movw	r3, #533	; 0x215
   3dea0:	4a1f      	ldr	r2, [pc, #124]	; (3df20 <z_impl_k_thread_create+0xa8>)
   3dea2:	4820      	ldr	r0, [pc, #128]	; (3df24 <z_impl_k_thread_create+0xac>)
   3dea4:	f008 fbda 	bl	4665c <printk>
   3dea8:	481f      	ldr	r0, [pc, #124]	; (3df28 <z_impl_k_thread_create+0xb0>)
   3deaa:	f008 fbd7 	bl	4665c <printk>
   3deae:	f240 2115 	movw	r1, #533	; 0x215
   3deb2:	481b      	ldr	r0, [pc, #108]	; (3df20 <z_impl_k_thread_create+0xa8>)
   3deb4:	f008 fbdf 	bl	46676 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3deb8:	2300      	movs	r3, #0
   3deba:	9305      	str	r3, [sp, #20]
   3debc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3debe:	463a      	mov	r2, r7
   3dec0:	9304      	str	r3, [sp, #16]
   3dec2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3dec4:	4631      	mov	r1, r6
   3dec6:	9303      	str	r3, [sp, #12]
   3dec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3deca:	4620      	mov	r0, r4
   3decc:	9302      	str	r3, [sp, #8]
   3dece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3ded0:	9301      	str	r3, [sp, #4]
   3ded2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3ded4:	9300      	str	r3, [sp, #0]
   3ded6:	4643      	mov	r3, r8
   3ded8:	f7ff ff38 	bl	3dd4c <z_setup_new_thread>
	if (delay != K_FOREVER) {
   3dedc:	1c6b      	adds	r3, r5, #1
   3dede:	d003      	beq.n	3dee8 <z_impl_k_thread_create+0x70>
	if (delay == 0) {
   3dee0:	b935      	cbnz	r5, 3def0 <z_impl_k_thread_create+0x78>
	z_impl_k_thread_start(thread);
   3dee2:	4620      	mov	r0, r4
   3dee4:	f7ff ff72 	bl	3ddcc <z_impl_k_thread_start>
}
   3dee8:	4620      	mov	r0, r4
   3deea:	b006      	add	sp, #24
   3deec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3def0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   3def4:	f240 30e7 	movw	r0, #999	; 0x3e7
   3def8:	2100      	movs	r1, #0
   3defa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3defe:	2300      	movs	r3, #0
   3df00:	fbc6 0105 	smlal	r0, r1, r6, r5
   3df04:	f7da ff0a 	bl	18d1c <__aeabi_ldivmod>
   3df08:	4908      	ldr	r1, [pc, #32]	; (3df2c <z_impl_k_thread_create+0xb4>)
   3df0a:	1c42      	adds	r2, r0, #1
   3df0c:	f104 0018 	add.w	r0, r4, #24
   3df10:	f000 faa8 	bl	3e464 <z_add_timeout>
   3df14:	e7e8      	b.n	3dee8 <z_impl_k_thread_create+0x70>
   3df16:	bf00      	nop
   3df18:	e000ed00 	.word	0xe000ed00
   3df1c:	0005057c 	.word	0x0005057c
   3df20:	00050749 	.word	0x00050749
   3df24:	0004b5bf 	.word	0x0004b5bf
   3df28:	0005076d 	.word	0x0005076d
   3df2c:	0003d12d 	.word	0x0003d12d

0003df30 <z_init_static_threads>:
{
   3df30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   3df34:	4f3c      	ldr	r7, [pc, #240]	; (3e028 <z_init_static_threads+0xf8>)
   3df36:	4d3d      	ldr	r5, [pc, #244]	; (3e02c <z_init_static_threads+0xfc>)
   3df38:	463e      	mov	r6, r7
   3df3a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 3e03c <z_init_static_threads+0x10c>
{
   3df3e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   3df40:	42bd      	cmp	r5, r7
   3df42:	d90e      	bls.n	3df62 <z_init_static_threads+0x32>
   3df44:	493a      	ldr	r1, [pc, #232]	; (3e030 <z_init_static_threads+0x100>)
   3df46:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   3df4a:	4642      	mov	r2, r8
   3df4c:	4839      	ldr	r0, [pc, #228]	; (3e034 <z_init_static_threads+0x104>)
   3df4e:	f008 fb85 	bl	4665c <printk>
   3df52:	4839      	ldr	r0, [pc, #228]	; (3e038 <z_init_static_threads+0x108>)
   3df54:	f008 fb82 	bl	4665c <printk>
   3df58:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   3df5c:	4640      	mov	r0, r8
   3df5e:	f008 fb8a 	bl	46676 <assert_post_action>
   3df62:	42b5      	cmp	r5, r6
   3df64:	f105 0430 	add.w	r4, r5, #48	; 0x30
   3df68:	d31f      	bcc.n	3dfaa <z_init_static_threads+0x7a>
	k_sched_lock();
   3df6a:	f7fe fea5 	bl	3ccb8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   3df6e:	4c2f      	ldr	r4, [pc, #188]	; (3e02c <z_init_static_threads+0xfc>)
   3df70:	4d32      	ldr	r5, [pc, #200]	; (3e03c <z_init_static_threads+0x10c>)
   3df72:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 3e030 <z_init_static_threads+0x100>
   3df76:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 3e034 <z_init_static_threads+0x104>
   3df7a:	42b4      	cmp	r4, r6
   3df7c:	d90e      	bls.n	3df9c <z_init_static_threads+0x6c>
   3df7e:	4641      	mov	r1, r8
   3df80:	f240 23f3 	movw	r3, #755	; 0x2f3
   3df84:	462a      	mov	r2, r5
   3df86:	4648      	mov	r0, r9
   3df88:	f008 fb68 	bl	4665c <printk>
   3df8c:	482a      	ldr	r0, [pc, #168]	; (3e038 <z_init_static_threads+0x108>)
   3df8e:	f008 fb65 	bl	4665c <printk>
   3df92:	f240 21f3 	movw	r1, #755	; 0x2f3
   3df96:	4628      	mov	r0, r5
   3df98:	f008 fb6d 	bl	46676 <assert_post_action>
   3df9c:	42b4      	cmp	r4, r6
   3df9e:	d321      	bcc.n	3dfe4 <z_init_static_threads+0xb4>
}
   3dfa0:	b007      	add	sp, #28
   3dfa2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   3dfa6:	f7fe bfbf 	b.w	3cf28 <k_sched_unlock>
		z_setup_new_thread(
   3dfaa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3dfae:	9305      	str	r3, [sp, #20]
   3dfb0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3dfb4:	9304      	str	r3, [sp, #16]
   3dfb6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3dfba:	9303      	str	r3, [sp, #12]
   3dfbc:	f854 3c18 	ldr.w	r3, [r4, #-24]
   3dfc0:	9302      	str	r3, [sp, #8]
   3dfc2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   3dfc6:	9301      	str	r3, [sp, #4]
   3dfc8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   3dfcc:	9300      	str	r3, [sp, #0]
   3dfce:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   3dfd2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   3dfd6:	f7ff feb9 	bl	3dd4c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   3dfda:	f854 3c30 	ldr.w	r3, [r4, #-48]
   3dfde:	64dd      	str	r5, [r3, #76]	; 0x4c
   3dfe0:	4625      	mov	r5, r4
   3dfe2:	e7ad      	b.n	3df40 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_FOREVER) {
   3dfe4:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   3dfe8:	f1bc 3fff 	cmp.w	ip, #4294967295
   3dfec:	d006      	beq.n	3dffc <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   3dfee:	6827      	ldr	r7, [r4, #0]
	if (delay == 0) {
   3dff0:	f1bc 0f00 	cmp.w	ip, #0
   3dff4:	d104      	bne.n	3e000 <z_init_static_threads+0xd0>
   3dff6:	4638      	mov	r0, r7
   3dff8:	f7ff fee8 	bl	3ddcc <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   3dffc:	3430      	adds	r4, #48	; 0x30
   3dffe:	e7bc      	b.n	3df7a <z_init_static_threads+0x4a>
   3e000:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   3e004:	f240 30e7 	movw	r0, #999	; 0x3e7
   3e008:	2100      	movs	r1, #0
   3e00a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3e00e:	2300      	movs	r3, #0
   3e010:	fbce 010c 	smlal	r0, r1, lr, ip
   3e014:	f7da fe82 	bl	18d1c <__aeabi_ldivmod>
   3e018:	4909      	ldr	r1, [pc, #36]	; (3e040 <z_init_static_threads+0x110>)
   3e01a:	1c42      	adds	r2, r0, #1
   3e01c:	f107 0018 	add.w	r0, r7, #24
   3e020:	f000 fa20 	bl	3e464 <z_add_timeout>
   3e024:	e7ea      	b.n	3dffc <z_init_static_threads+0xcc>
   3e026:	bf00      	nop
   3e028:	200322c0 	.word	0x200322c0
   3e02c:	200322c0 	.word	0x200322c0
   3e030:	00050792 	.word	0x00050792
   3e034:	0004b5bf 	.word	0x0004b5bf
   3e038:	000503fd 	.word	0x000503fd
   3e03c:	00050749 	.word	0x00050749
   3e040:	0003d12d 	.word	0x0003d12d

0003e044 <z_impl_k_thread_suspend>:
{
   3e044:	b538      	push	{r3, r4, r5, lr}
   3e046:	4605      	mov	r5, r0
	__asm__ volatile(
   3e048:	f04f 0320 	mov.w	r3, #32
   3e04c:	f3ef 8411 	mrs	r4, BASEPRI
   3e050:	f383 8811 	msr	BASEPRI, r3
   3e054:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e058:	481b      	ldr	r0, [pc, #108]	; (3e0c8 <z_impl_k_thread_suspend+0x84>)
   3e05a:	f7ff fe91 	bl	3dd80 <z_spin_lock_valid>
   3e05e:	b960      	cbnz	r0, 3e07a <z_impl_k_thread_suspend+0x36>
   3e060:	491a      	ldr	r1, [pc, #104]	; (3e0cc <z_impl_k_thread_suspend+0x88>)
   3e062:	235f      	movs	r3, #95	; 0x5f
   3e064:	4a1a      	ldr	r2, [pc, #104]	; (3e0d0 <z_impl_k_thread_suspend+0x8c>)
   3e066:	481b      	ldr	r0, [pc, #108]	; (3e0d4 <z_impl_k_thread_suspend+0x90>)
   3e068:	f008 faf8 	bl	4665c <printk>
   3e06c:	481a      	ldr	r0, [pc, #104]	; (3e0d8 <z_impl_k_thread_suspend+0x94>)
   3e06e:	f008 faf5 	bl	4665c <printk>
   3e072:	215f      	movs	r1, #95	; 0x5f
   3e074:	4816      	ldr	r0, [pc, #88]	; (3e0d0 <z_impl_k_thread_suspend+0x8c>)
   3e076:	f008 fafe 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e07a:	4813      	ldr	r0, [pc, #76]	; (3e0c8 <z_impl_k_thread_suspend+0x84>)
   3e07c:	f7ff fe9e 	bl	3ddbc <z_spin_lock_set_owner>
	z_thread_single_suspend(thread);
   3e080:	4628      	mov	r0, r5
   3e082:	f00a fd4b 	bl	48b1c <z_thread_single_suspend>
	if (thread == _current) {
   3e086:	4b15      	ldr	r3, [pc, #84]	; (3e0dc <z_impl_k_thread_suspend+0x98>)
   3e088:	689b      	ldr	r3, [r3, #8]
   3e08a:	42ab      	cmp	r3, r5
   3e08c:	d105      	bne.n	3e09a <z_impl_k_thread_suspend+0x56>
		z_reschedule(&lock, key);
   3e08e:	4621      	mov	r1, r4
}
   3e090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   3e094:	480c      	ldr	r0, [pc, #48]	; (3e0c8 <z_impl_k_thread_suspend+0x84>)
   3e096:	f7fe bdd3 	b.w	3cc40 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e09a:	480b      	ldr	r0, [pc, #44]	; (3e0c8 <z_impl_k_thread_suspend+0x84>)
   3e09c:	f7ff fe7e 	bl	3dd9c <z_spin_unlock_valid>
   3e0a0:	b960      	cbnz	r0, 3e0bc <z_impl_k_thread_suspend+0x78>
   3e0a2:	490f      	ldr	r1, [pc, #60]	; (3e0e0 <z_impl_k_thread_suspend+0x9c>)
   3e0a4:	2372      	movs	r3, #114	; 0x72
   3e0a6:	4a0a      	ldr	r2, [pc, #40]	; (3e0d0 <z_impl_k_thread_suspend+0x8c>)
   3e0a8:	480a      	ldr	r0, [pc, #40]	; (3e0d4 <z_impl_k_thread_suspend+0x90>)
   3e0aa:	f008 fad7 	bl	4665c <printk>
   3e0ae:	480d      	ldr	r0, [pc, #52]	; (3e0e4 <z_impl_k_thread_suspend+0xa0>)
   3e0b0:	f008 fad4 	bl	4665c <printk>
   3e0b4:	2172      	movs	r1, #114	; 0x72
   3e0b6:	4806      	ldr	r0, [pc, #24]	; (3e0d0 <z_impl_k_thread_suspend+0x8c>)
   3e0b8:	f008 fadd 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3e0bc:	f384 8811 	msr	BASEPRI, r4
   3e0c0:	f3bf 8f6f 	isb	sy
}
   3e0c4:	bd38      	pop	{r3, r4, r5, pc}
   3e0c6:	bf00      	nop
   3e0c8:	2002a3e8 	.word	0x2002a3e8
   3e0cc:	0004bff2 	.word	0x0004bff2
   3e0d0:	0004bfcb 	.word	0x0004bfcb
   3e0d4:	0004b5bf 	.word	0x0004b5bf
   3e0d8:	0004c007 	.word	0x0004c007
   3e0dc:	2002a2dc 	.word	0x2002a2dc
   3e0e0:	0004c01c 	.word	0x0004c01c
   3e0e4:	0004c033 	.word	0x0004c033

0003e0e8 <z_impl_k_thread_resume>:
{
   3e0e8:	b538      	push	{r3, r4, r5, lr}
   3e0ea:	4605      	mov	r5, r0
	__asm__ volatile(
   3e0ec:	f04f 0320 	mov.w	r3, #32
   3e0f0:	f3ef 8411 	mrs	r4, BASEPRI
   3e0f4:	f383 8811 	msr	BASEPRI, r3
   3e0f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e0fc:	480e      	ldr	r0, [pc, #56]	; (3e138 <z_impl_k_thread_resume+0x50>)
   3e0fe:	f7ff fe3f 	bl	3dd80 <z_spin_lock_valid>
   3e102:	b960      	cbnz	r0, 3e11e <z_impl_k_thread_resume+0x36>
   3e104:	490d      	ldr	r1, [pc, #52]	; (3e13c <z_impl_k_thread_resume+0x54>)
   3e106:	235f      	movs	r3, #95	; 0x5f
   3e108:	4a0d      	ldr	r2, [pc, #52]	; (3e140 <z_impl_k_thread_resume+0x58>)
   3e10a:	480e      	ldr	r0, [pc, #56]	; (3e144 <z_impl_k_thread_resume+0x5c>)
   3e10c:	f008 faa6 	bl	4665c <printk>
   3e110:	480d      	ldr	r0, [pc, #52]	; (3e148 <z_impl_k_thread_resume+0x60>)
   3e112:	f008 faa3 	bl	4665c <printk>
   3e116:	215f      	movs	r1, #95	; 0x5f
   3e118:	4809      	ldr	r0, [pc, #36]	; (3e140 <z_impl_k_thread_resume+0x58>)
   3e11a:	f008 faac 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e11e:	4806      	ldr	r0, [pc, #24]	; (3e138 <z_impl_k_thread_resume+0x50>)
   3e120:	f7ff fe4c 	bl	3ddbc <z_spin_lock_set_owner>
	z_thread_single_resume(thread);
   3e124:	4628      	mov	r0, r5
   3e126:	f00a fd06 	bl	48b36 <z_thread_single_resume>
	z_reschedule(&lock, key);
   3e12a:	4621      	mov	r1, r4
}
   3e12c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   3e130:	4801      	ldr	r0, [pc, #4]	; (3e138 <z_impl_k_thread_resume+0x50>)
   3e132:	f7fe bd85 	b.w	3cc40 <z_reschedule>
   3e136:	bf00      	nop
   3e138:	2002a3e8 	.word	0x2002a3e8
   3e13c:	0004bff2 	.word	0x0004bff2
   3e140:	0004bfcb 	.word	0x0004bfcb
   3e144:	0004b5bf 	.word	0x0004b5bf
   3e148:	0004c007 	.word	0x0004c007

0003e14c <work_cancel>:
	work->work_q = NULL;
}

static int work_cancel(struct k_delayed_work *work)
{
	__ASSERT(work->work_q != NULL, "");
   3e14c:	69c3      	ldr	r3, [r0, #28]
{
   3e14e:	b570      	push	{r4, r5, r6, lr}
   3e150:	4604      	mov	r4, r0
	__ASSERT(work->work_q != NULL, "");
   3e152:	b963      	cbnz	r3, 3e16e <work_cancel+0x22>
   3e154:	4923      	ldr	r1, [pc, #140]	; (3e1e4 <work_cancel+0x98>)
   3e156:	2339      	movs	r3, #57	; 0x39
   3e158:	4a23      	ldr	r2, [pc, #140]	; (3e1e8 <work_cancel+0x9c>)
   3e15a:	4824      	ldr	r0, [pc, #144]	; (3e1ec <work_cancel+0xa0>)
   3e15c:	f008 fa7e 	bl	4665c <printk>
   3e160:	4823      	ldr	r0, [pc, #140]	; (3e1f0 <work_cancel+0xa4>)
   3e162:	f008 fa7b 	bl	4665c <printk>
   3e166:	2139      	movs	r1, #57	; 0x39
   3e168:	481f      	ldr	r0, [pc, #124]	; (3e1e8 <work_cancel+0x9c>)
   3e16a:	f008 fa84 	bl	46676 <assert_post_action>
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   3e16e:	f104 0508 	add.w	r5, r4, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3e172:	e8d5 3faf 	lda	r3, [r5]

	if (k_work_pending(&work->work)) {
   3e176:	07db      	lsls	r3, r3, #31
   3e178:	d52f      	bpl.n	3e1da <work_cancel+0x8e>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   3e17a:	2100      	movs	r1, #0
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   3e17c:	69e2      	ldr	r2, [r4, #28]
   3e17e:	6813      	ldr	r3, [r2, #0]
   3e180:	b913      	cbnz	r3, 3e188 <work_cancel+0x3c>
			return -EINVAL;
   3e182:	f06f 0015 	mvn.w	r0, #21
	work->work_q = NULL;

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);

	return 0;
}
   3e186:	bd70      	pop	{r4, r5, r6, pc}
   3e188:	429c      	cmp	r4, r3
   3e18a:	d121      	bne.n	3e1d0 <work_cancel+0x84>
   3e18c:	6823      	ldr	r3, [r4, #0]
   3e18e:	6856      	ldr	r6, [r2, #4]
   3e190:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   3e194:	b991      	cbnz	r1, 3e1bc <work_cancel+0x70>
   3e196:	42b4      	cmp	r4, r6
	list->head = node;
   3e198:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   3e19a:	d100      	bne.n	3e19e <work_cancel+0x52>
	list->tail = node;
   3e19c:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3e19e:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3e1a0:	f003 0303 	and.w	r3, r3, #3
   3e1a4:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   3e1a6:	2000      	movs	r0, #0
   3e1a8:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3e1aa:	e8d5 3fef 	ldaex	r3, [r5]
   3e1ae:	f023 0301 	bic.w	r3, r3, #1
   3e1b2:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3e1b6:	2a00      	cmp	r2, #0
   3e1b8:	d0e5      	beq.n	3e186 <work_cancel+0x3a>
   3e1ba:	e7f6      	b.n	3e1aa <work_cancel+0x5e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3e1bc:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   3e1be:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   3e1c0:	f003 0303 	and.w	r3, r3, #3
   3e1c4:	ea43 0300 	orr.w	r3, r3, r0
   3e1c8:	600b      	str	r3, [r1, #0]
	list->tail = node;
   3e1ca:	bf08      	it	eq
   3e1cc:	6051      	streq	r1, [r2, #4]
   3e1ce:	e7e6      	b.n	3e19e <work_cancel+0x52>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3e1d0:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   3e1d2:	4619      	mov	r1, r3
   3e1d4:	f020 0303 	bic.w	r3, r0, #3
   3e1d8:	e7d2      	b.n	3e180 <work_cancel+0x34>
		(void)z_abort_timeout(&work->timeout);
   3e1da:	f104 000c 	add.w	r0, r4, #12
   3e1de:	f000 f9e7 	bl	3e5b0 <z_abort_timeout>
   3e1e2:	e7e0      	b.n	3e1a6 <work_cancel+0x5a>
   3e1e4:	000507e3 	.word	0x000507e3
   3e1e8:	000507bf 	.word	0x000507bf
   3e1ec:	0004b5bf 	.word	0x0004b5bf
   3e1f0:	00050481 	.word	0x00050481

0003e1f4 <k_work_q_start>:
{
   3e1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e1f8:	4605      	mov	r5, r0
   3e1fa:	b086      	sub	sp, #24
   3e1fc:	460e      	mov	r6, r1
   3e1fe:	4617      	mov	r7, r2
   3e200:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   3e202:	f00a fc0c 	bl	48a1e <z_impl_k_queue_init>
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   3e206:	f105 0414 	add.w	r4, r5, #20
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   3e20a:	2000      	movs	r0, #0
   3e20c:	4b09      	ldr	r3, [pc, #36]	; (3e234 <k_work_q_start+0x40>)
   3e20e:	e9cd 0004 	strd	r0, r0, [sp, #16]
   3e212:	e9cd 0802 	strd	r0, r8, [sp, #8]
   3e216:	e9cd 5000 	strd	r5, r0, [sp]
   3e21a:	463a      	mov	r2, r7
   3e21c:	4631      	mov	r1, r6
   3e21e:	4620      	mov	r0, r4
   3e220:	f7ff fe2a 	bl	3de78 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   3e224:	4620      	mov	r0, r4
   3e226:	4904      	ldr	r1, [pc, #16]	; (3e238 <k_work_q_start+0x44>)
}
   3e228:	b006      	add	sp, #24
   3e22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3e22e:	f00a bc70 	b.w	48b12 <z_impl_k_thread_name_set>
   3e232:	bf00      	nop
   3e234:	00046117 	.word	0x00046117
   3e238:	0004d3b5 	.word	0x0004d3b5

0003e23c <k_delayed_work_submit_to_queue>:

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   3e23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e240:	4606      	mov	r6, r0
   3e242:	460d      	mov	r5, r1
   3e244:	4690      	mov	r8, r2
   3e246:	f04f 0320 	mov.w	r3, #32
   3e24a:	f3ef 8711 	mrs	r7, BASEPRI
   3e24e:	f383 8811 	msr	BASEPRI, r3
   3e252:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e256:	4836      	ldr	r0, [pc, #216]	; (3e330 <k_delayed_work_submit_to_queue+0xf4>)
   3e258:	f7ff fd92 	bl	3dd80 <z_spin_lock_valid>
   3e25c:	b960      	cbnz	r0, 3e278 <k_delayed_work_submit_to_queue+0x3c>
   3e25e:	4935      	ldr	r1, [pc, #212]	; (3e334 <k_delayed_work_submit_to_queue+0xf8>)
   3e260:	235f      	movs	r3, #95	; 0x5f
   3e262:	4a35      	ldr	r2, [pc, #212]	; (3e338 <k_delayed_work_submit_to_queue+0xfc>)
   3e264:	4835      	ldr	r0, [pc, #212]	; (3e33c <k_delayed_work_submit_to_queue+0x100>)
   3e266:	f008 f9f9 	bl	4665c <printk>
   3e26a:	4835      	ldr	r0, [pc, #212]	; (3e340 <k_delayed_work_submit_to_queue+0x104>)
   3e26c:	f008 f9f6 	bl	4665c <printk>
   3e270:	215f      	movs	r1, #95	; 0x5f
   3e272:	4831      	ldr	r0, [pc, #196]	; (3e338 <k_delayed_work_submit_to_queue+0xfc>)
   3e274:	f008 f9ff 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e278:	482d      	ldr	r0, [pc, #180]	; (3e330 <k_delayed_work_submit_to_queue+0xf4>)
   3e27a:	f7ff fd9f 	bl	3ddbc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   3e27e:	69ec      	ldr	r4, [r5, #28]
   3e280:	b1e4      	cbz	r4, 3e2bc <k_delayed_work_submit_to_queue+0x80>
   3e282:	42b4      	cmp	r4, r6
   3e284:	d150      	bne.n	3e328 <k_delayed_work_submit_to_queue+0xec>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   3e286:	4628      	mov	r0, r5
   3e288:	f7ff ff60 	bl	3e14c <work_cancel>
		if (err < 0) {
   3e28c:	1e04      	subs	r4, r0, #0
   3e28e:	da17      	bge.n	3e2c0 <k_delayed_work_submit_to_queue+0x84>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e290:	4827      	ldr	r0, [pc, #156]	; (3e330 <k_delayed_work_submit_to_queue+0xf4>)
   3e292:	f7ff fd83 	bl	3dd9c <z_spin_unlock_valid>
   3e296:	b960      	cbnz	r0, 3e2b2 <k_delayed_work_submit_to_queue+0x76>
   3e298:	492a      	ldr	r1, [pc, #168]	; (3e344 <k_delayed_work_submit_to_queue+0x108>)
   3e29a:	2372      	movs	r3, #114	; 0x72
   3e29c:	4a26      	ldr	r2, [pc, #152]	; (3e338 <k_delayed_work_submit_to_queue+0xfc>)
   3e29e:	4827      	ldr	r0, [pc, #156]	; (3e33c <k_delayed_work_submit_to_queue+0x100>)
   3e2a0:	f008 f9dc 	bl	4665c <printk>
   3e2a4:	4828      	ldr	r0, [pc, #160]	; (3e348 <k_delayed_work_submit_to_queue+0x10c>)
   3e2a6:	f008 f9d9 	bl	4665c <printk>
   3e2aa:	2172      	movs	r1, #114	; 0x72
   3e2ac:	4822      	ldr	r0, [pc, #136]	; (3e338 <k_delayed_work_submit_to_queue+0xfc>)
   3e2ae:	f008 f9e2 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3e2b2:	f387 8811 	msr	BASEPRI, r7
   3e2b6:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + z_ms_to_ticks(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   3e2ba:	e01f      	b.n	3e2fc <k_delayed_work_submit_to_queue+0xc0>
	if (work->work_q == work_q) {
   3e2bc:	2e00      	cmp	r6, #0
   3e2be:	d0e2      	beq.n	3e286 <k_delayed_work_submit_to_queue+0x4a>
	work->work_q = work_q;
   3e2c0:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
   3e2c2:	f1b8 0f00 	cmp.w	r8, #0
   3e2c6:	d11c      	bne.n	3e302 <k_delayed_work_submit_to_queue+0xc6>
   3e2c8:	4819      	ldr	r0, [pc, #100]	; (3e330 <k_delayed_work_submit_to_queue+0xf4>)
   3e2ca:	f7ff fd67 	bl	3dd9c <z_spin_unlock_valid>
   3e2ce:	b960      	cbnz	r0, 3e2ea <k_delayed_work_submit_to_queue+0xae>
   3e2d0:	491c      	ldr	r1, [pc, #112]	; (3e344 <k_delayed_work_submit_to_queue+0x108>)
   3e2d2:	2372      	movs	r3, #114	; 0x72
   3e2d4:	4a18      	ldr	r2, [pc, #96]	; (3e338 <k_delayed_work_submit_to_queue+0xfc>)
   3e2d6:	4819      	ldr	r0, [pc, #100]	; (3e33c <k_delayed_work_submit_to_queue+0x100>)
   3e2d8:	f008 f9c0 	bl	4665c <printk>
   3e2dc:	481a      	ldr	r0, [pc, #104]	; (3e348 <k_delayed_work_submit_to_queue+0x10c>)
   3e2de:	f008 f9bd 	bl	4665c <printk>
   3e2e2:	2172      	movs	r1, #114	; 0x72
   3e2e4:	4814      	ldr	r0, [pc, #80]	; (3e338 <k_delayed_work_submit_to_queue+0xfc>)
   3e2e6:	f008 f9c6 	bl	46676 <assert_post_action>
   3e2ea:	f387 8811 	msr	BASEPRI, r7
   3e2ee:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   3e2f2:	4629      	mov	r1, r5
   3e2f4:	4630      	mov	r0, r6
   3e2f6:	f00a fc54 	bl	48ba2 <k_work_submit_to_queue>
		return 0;
   3e2fa:	2400      	movs	r4, #0
}
   3e2fc:	4620      	mov	r0, r4
   3e2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3e302:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   3e306:	f240 30e7 	movw	r0, #999	; 0x3e7
   3e30a:	2100      	movs	r1, #0
   3e30c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3e310:	2300      	movs	r3, #0
   3e312:	fbc6 0108 	smlal	r0, r1, r6, r8
   3e316:	f7da fd01 	bl	18d1c <__aeabi_ldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   3e31a:	490c      	ldr	r1, [pc, #48]	; (3e34c <k_delayed_work_submit_to_queue+0x110>)
   3e31c:	1c42      	adds	r2, r0, #1
   3e31e:	f105 000c 	add.w	r0, r5, #12
   3e322:	f000 f89f 	bl	3e464 <z_add_timeout>
   3e326:	e7b3      	b.n	3e290 <k_delayed_work_submit_to_queue+0x54>
		err = -EADDRINUSE;
   3e328:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   3e32c:	e7b0      	b.n	3e290 <k_delayed_work_submit_to_queue+0x54>
   3e32e:	bf00      	nop
   3e330:	2002a3ec 	.word	0x2002a3ec
   3e334:	0004bff2 	.word	0x0004bff2
   3e338:	0004bfcb 	.word	0x0004bfcb
   3e33c:	0004b5bf 	.word	0x0004b5bf
   3e340:	0004c007 	.word	0x0004c007
   3e344:	0004c01c 	.word	0x0004c01c
   3e348:	0004c033 	.word	0x0004c033
   3e34c:	00048bcb 	.word	0x00048bcb

0003e350 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   3e350:	b538      	push	{r3, r4, r5, lr}
	if (!work->work_q) {
   3e352:	69c3      	ldr	r3, [r0, #28]
{
   3e354:	4604      	mov	r4, r0
	if (!work->work_q) {
   3e356:	2b00      	cmp	r3, #0
   3e358:	d036      	beq.n	3e3c8 <k_delayed_work_cancel+0x78>
	__asm__ volatile(
   3e35a:	f04f 0320 	mov.w	r3, #32
   3e35e:	f3ef 8511 	mrs	r5, BASEPRI
   3e362:	f383 8811 	msr	BASEPRI, r3
   3e366:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e36a:	4819      	ldr	r0, [pc, #100]	; (3e3d0 <k_delayed_work_cancel+0x80>)
   3e36c:	f7ff fd08 	bl	3dd80 <z_spin_lock_valid>
   3e370:	b960      	cbnz	r0, 3e38c <k_delayed_work_cancel+0x3c>
   3e372:	4918      	ldr	r1, [pc, #96]	; (3e3d4 <k_delayed_work_cancel+0x84>)
   3e374:	235f      	movs	r3, #95	; 0x5f
   3e376:	4a18      	ldr	r2, [pc, #96]	; (3e3d8 <k_delayed_work_cancel+0x88>)
   3e378:	4818      	ldr	r0, [pc, #96]	; (3e3dc <k_delayed_work_cancel+0x8c>)
   3e37a:	f008 f96f 	bl	4665c <printk>
   3e37e:	4818      	ldr	r0, [pc, #96]	; (3e3e0 <k_delayed_work_cancel+0x90>)
   3e380:	f008 f96c 	bl	4665c <printk>
   3e384:	215f      	movs	r1, #95	; 0x5f
   3e386:	4814      	ldr	r0, [pc, #80]	; (3e3d8 <k_delayed_work_cancel+0x88>)
   3e388:	f008 f975 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e38c:	4810      	ldr	r0, [pc, #64]	; (3e3d0 <k_delayed_work_cancel+0x80>)
   3e38e:	f7ff fd15 	bl	3ddbc <z_spin_lock_set_owner>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   3e392:	4620      	mov	r0, r4
   3e394:	f7ff feda 	bl	3e14c <work_cancel>
   3e398:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e39a:	480d      	ldr	r0, [pc, #52]	; (3e3d0 <k_delayed_work_cancel+0x80>)
   3e39c:	f7ff fcfe 	bl	3dd9c <z_spin_unlock_valid>
   3e3a0:	b960      	cbnz	r0, 3e3bc <k_delayed_work_cancel+0x6c>
   3e3a2:	4910      	ldr	r1, [pc, #64]	; (3e3e4 <k_delayed_work_cancel+0x94>)
   3e3a4:	2372      	movs	r3, #114	; 0x72
   3e3a6:	4a0c      	ldr	r2, [pc, #48]	; (3e3d8 <k_delayed_work_cancel+0x88>)
   3e3a8:	480c      	ldr	r0, [pc, #48]	; (3e3dc <k_delayed_work_cancel+0x8c>)
   3e3aa:	f008 f957 	bl	4665c <printk>
   3e3ae:	480e      	ldr	r0, [pc, #56]	; (3e3e8 <k_delayed_work_cancel+0x98>)
   3e3b0:	f008 f954 	bl	4665c <printk>
   3e3b4:	2172      	movs	r1, #114	; 0x72
   3e3b6:	4808      	ldr	r0, [pc, #32]	; (3e3d8 <k_delayed_work_cancel+0x88>)
   3e3b8:	f008 f95d 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3e3bc:	f385 8811 	msr	BASEPRI, r5
   3e3c0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   3e3c4:	4620      	mov	r0, r4
   3e3c6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3e3c8:	f06f 0415 	mvn.w	r4, #21
   3e3cc:	e7fa      	b.n	3e3c4 <k_delayed_work_cancel+0x74>
   3e3ce:	bf00      	nop
   3e3d0:	2002a3ec 	.word	0x2002a3ec
   3e3d4:	0004bff2 	.word	0x0004bff2
   3e3d8:	0004bfcb 	.word	0x0004bfcb
   3e3dc:	0004b5bf 	.word	0x0004b5bf
   3e3e0:	0004c007 	.word	0x0004c007
   3e3e4:	0004c01c 	.word	0x0004c01c
   3e3e8:	0004c033 	.word	0x0004c033

0003e3ec <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   3e3ec:	4b03      	ldr	r3, [pc, #12]	; (3e3fc <elapsed+0x10>)
   3e3ee:	681b      	ldr	r3, [r3, #0]
   3e3f0:	b90b      	cbnz	r3, 3e3f6 <elapsed+0xa>
   3e3f2:	f7e3 bdf5 	b.w	21fe0 <z_clock_elapsed>
}
   3e3f6:	2000      	movs	r0, #0
   3e3f8:	4770      	bx	lr
   3e3fa:	bf00      	nop
   3e3fc:	2002a3f0 	.word	0x2002a3f0

0003e400 <next_timeout>:
	return list->head == list;
   3e400:	4b0b      	ldr	r3, [pc, #44]	; (3e430 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   3e402:	b510      	push	{r4, lr}
   3e404:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3e406:	429c      	cmp	r4, r3
   3e408:	bf08      	it	eq
   3e40a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   3e40c:	f7ff ffee 	bl	3e3ec <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   3e410:	b154      	cbz	r4, 3e428 <next_timeout+0x28>
   3e412:	68a3      	ldr	r3, [r4, #8]
   3e414:	1a18      	subs	r0, r3, r0
   3e416:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   3e41a:	4b06      	ldr	r3, [pc, #24]	; (3e434 <next_timeout+0x34>)
   3e41c:	691b      	ldr	r3, [r3, #16]
   3e41e:	b113      	cbz	r3, 3e426 <next_timeout+0x26>
   3e420:	4298      	cmp	r0, r3
   3e422:	bfa8      	it	ge
   3e424:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   3e426:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   3e428:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   3e42c:	e7f5      	b.n	3e41a <next_timeout+0x1a>
   3e42e:	bf00      	nop
   3e430:	20031c1c 	.word	0x20031c1c
   3e434:	2002a2dc 	.word	0x2002a2dc

0003e438 <remove_timeout>:
{
   3e438:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3e43a:	b140      	cbz	r0, 3e44e <remove_timeout+0x16>
   3e43c:	4a08      	ldr	r2, [pc, #32]	; (3e460 <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
   3e43e:	6852      	ldr	r2, [r2, #4]
   3e440:	4290      	cmp	r0, r2
   3e442:	d004      	beq.n	3e44e <remove_timeout+0x16>
	if (next(t) != NULL) {
   3e444:	b11b      	cbz	r3, 3e44e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   3e446:	689a      	ldr	r2, [r3, #8]
   3e448:	6881      	ldr	r1, [r0, #8]
   3e44a:	440a      	add	r2, r1
   3e44c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   3e44e:	6842      	ldr	r2, [r0, #4]
   3e450:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3e452:	6803      	ldr	r3, [r0, #0]
   3e454:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3e456:	2300      	movs	r3, #0
	node->prev = NULL;
   3e458:	e9c0 3300 	strd	r3, r3, [r0]
}
   3e45c:	4770      	bx	lr
   3e45e:	bf00      	nop
   3e460:	20031c1c 	.word	0x20031c1c

0003e464 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   3e464:	6803      	ldr	r3, [r0, #0]
{
   3e466:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3e46a:	4604      	mov	r4, r0
   3e46c:	460e      	mov	r6, r1
   3e46e:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   3e470:	b163      	cbz	r3, 3e48c <z_add_timeout+0x28>
   3e472:	4943      	ldr	r1, [pc, #268]	; (3e580 <z_add_timeout+0x11c>)
   3e474:	2356      	movs	r3, #86	; 0x56
   3e476:	4a43      	ldr	r2, [pc, #268]	; (3e584 <z_add_timeout+0x120>)
   3e478:	4843      	ldr	r0, [pc, #268]	; (3e588 <z_add_timeout+0x124>)
   3e47a:	f008 f8ef 	bl	4665c <printk>
   3e47e:	4843      	ldr	r0, [pc, #268]	; (3e58c <z_add_timeout+0x128>)
   3e480:	f008 f8ec 	bl	4665c <printk>
   3e484:	2156      	movs	r1, #86	; 0x56
   3e486:	483f      	ldr	r0, [pc, #252]	; (3e584 <z_add_timeout+0x120>)
   3e488:	f008 f8f5 	bl	46676 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   3e48c:	2d01      	cmp	r5, #1
   3e48e:	bfb8      	it	lt
   3e490:	2501      	movlt	r5, #1
	to->fn = fn;
   3e492:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   3e494:	f04f 0320 	mov.w	r3, #32
   3e498:	f3ef 8811 	mrs	r8, BASEPRI
   3e49c:	f383 8811 	msr	BASEPRI, r3
   3e4a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e4a4:	483a      	ldr	r0, [pc, #232]	; (3e590 <z_add_timeout+0x12c>)
   3e4a6:	f7ff fc6b 	bl	3dd80 <z_spin_lock_valid>
   3e4aa:	b960      	cbnz	r0, 3e4c6 <z_add_timeout+0x62>
   3e4ac:	4939      	ldr	r1, [pc, #228]	; (3e594 <z_add_timeout+0x130>)
   3e4ae:	235f      	movs	r3, #95	; 0x5f
   3e4b0:	4a39      	ldr	r2, [pc, #228]	; (3e598 <z_add_timeout+0x134>)
   3e4b2:	4835      	ldr	r0, [pc, #212]	; (3e588 <z_add_timeout+0x124>)
   3e4b4:	f008 f8d2 	bl	4665c <printk>
   3e4b8:	4838      	ldr	r0, [pc, #224]	; (3e59c <z_add_timeout+0x138>)
   3e4ba:	f008 f8cf 	bl	4665c <printk>
   3e4be:	215f      	movs	r1, #95	; 0x5f
   3e4c0:	4835      	ldr	r0, [pc, #212]	; (3e598 <z_add_timeout+0x134>)
   3e4c2:	f008 f8d8 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e4c6:	4832      	ldr	r0, [pc, #200]	; (3e590 <z_add_timeout+0x12c>)
   3e4c8:	f7ff fc78 	bl	3ddbc <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   3e4cc:	f7ff ff8e 	bl	3e3ec <elapsed>
	return list->head == list;
   3e4d0:	4e33      	ldr	r6, [pc, #204]	; (3e5a0 <z_add_timeout+0x13c>)
   3e4d2:	4428      	add	r0, r5
   3e4d4:	6835      	ldr	r5, [r6, #0]
   3e4d6:	60a0      	str	r0, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3e4d8:	42b5      	cmp	r5, r6
   3e4da:	d005      	beq.n	3e4e8 <z_add_timeout+0x84>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   3e4dc:	4f29      	ldr	r7, [pc, #164]	; (3e584 <z_add_timeout+0x120>)
   3e4de:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 3e5ac <z_add_timeout+0x148>
   3e4e2:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 3e588 <z_add_timeout+0x124>
		for (t = first(); t != NULL; t = next(t)) {
   3e4e6:	b935      	cbnz	r5, 3e4f6 <z_add_timeout+0x92>
	node->prev = list->tail;
   3e4e8:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   3e4ea:	6026      	str	r6, [r4, #0]
	node->prev = list->tail;
   3e4ec:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   3e4ee:	6873      	ldr	r3, [r6, #4]
   3e4f0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3e4f2:	6074      	str	r4, [r6, #4]
   3e4f4:	e01b      	b.n	3e52e <z_add_timeout+0xca>
			__ASSERT(t->dticks >= 0, "");
   3e4f6:	68ab      	ldr	r3, [r5, #8]
   3e4f8:	2b00      	cmp	r3, #0
   3e4fa:	da0c      	bge.n	3e516 <z_add_timeout+0xb2>
   3e4fc:	4649      	mov	r1, r9
   3e4fe:	235f      	movs	r3, #95	; 0x5f
   3e500:	463a      	mov	r2, r7
   3e502:	4650      	mov	r0, sl
   3e504:	f008 f8aa 	bl	4665c <printk>
   3e508:	4820      	ldr	r0, [pc, #128]	; (3e58c <z_add_timeout+0x128>)
   3e50a:	f008 f8a7 	bl	4665c <printk>
   3e50e:	215f      	movs	r1, #95	; 0x5f
   3e510:	4638      	mov	r0, r7
   3e512:	f008 f8b0 	bl	46676 <assert_post_action>

			if (t->dticks > to->dticks) {
   3e516:	68aa      	ldr	r2, [r5, #8]
   3e518:	68a3      	ldr	r3, [r4, #8]
   3e51a:	429a      	cmp	r2, r3
   3e51c:	dd28      	ble.n	3e570 <z_add_timeout+0x10c>
				t->dticks -= to->dticks;
   3e51e:	1ad3      	subs	r3, r2, r3
   3e520:	60ab      	str	r3, [r5, #8]
	node->prev = successor->prev;
   3e522:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   3e524:	e9c4 5300 	strd	r5, r3, [r4]
	successor->prev->next = node;
   3e528:	686b      	ldr	r3, [r5, #4]
   3e52a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   3e52c:	606c      	str	r4, [r5, #4]
	return list->head == list;
   3e52e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3e530:	42b3      	cmp	r3, r6
   3e532:	d006      	beq.n	3e542 <z_add_timeout+0xde>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   3e534:	429c      	cmp	r4, r3
   3e536:	d104      	bne.n	3e542 <z_add_timeout+0xde>
			z_clock_set_timeout(next_timeout(), false);
   3e538:	f7ff ff62 	bl	3e400 <next_timeout>
   3e53c:	2100      	movs	r1, #0
   3e53e:	f7e3 fccd 	bl	21edc <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e542:	4813      	ldr	r0, [pc, #76]	; (3e590 <z_add_timeout+0x12c>)
   3e544:	f7ff fc2a 	bl	3dd9c <z_spin_unlock_valid>
   3e548:	b960      	cbnz	r0, 3e564 <z_add_timeout+0x100>
   3e54a:	4916      	ldr	r1, [pc, #88]	; (3e5a4 <z_add_timeout+0x140>)
   3e54c:	2372      	movs	r3, #114	; 0x72
   3e54e:	4a12      	ldr	r2, [pc, #72]	; (3e598 <z_add_timeout+0x134>)
   3e550:	480d      	ldr	r0, [pc, #52]	; (3e588 <z_add_timeout+0x124>)
   3e552:	f008 f883 	bl	4665c <printk>
   3e556:	4814      	ldr	r0, [pc, #80]	; (3e5a8 <z_add_timeout+0x144>)
   3e558:	f008 f880 	bl	4665c <printk>
   3e55c:	2172      	movs	r1, #114	; 0x72
   3e55e:	480e      	ldr	r0, [pc, #56]	; (3e598 <z_add_timeout+0x134>)
   3e560:	f008 f889 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3e564:	f388 8811 	msr	BASEPRI, r8
   3e568:	f3bf 8f6f 	isb	sy
		}
	}
}
   3e56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   3e570:	1a9b      	subs	r3, r3, r2
   3e572:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   3e574:	6873      	ldr	r3, [r6, #4]
   3e576:	42ab      	cmp	r3, r5
   3e578:	d0b6      	beq.n	3e4e8 <z_add_timeout+0x84>
   3e57a:	682d      	ldr	r5, [r5, #0]
   3e57c:	e7b3      	b.n	3e4e6 <z_add_timeout+0x82>
   3e57e:	bf00      	nop
   3e580:	00050824 	.word	0x00050824
   3e584:	000507ff 	.word	0x000507ff
   3e588:	0004b5bf 	.word	0x0004b5bf
   3e58c:	00050481 	.word	0x00050481
   3e590:	2002a3f4 	.word	0x2002a3f4
   3e594:	0004bff2 	.word	0x0004bff2
   3e598:	0004bfcb 	.word	0x0004bfcb
   3e59c:	0004c007 	.word	0x0004c007
   3e5a0:	20031c1c 	.word	0x20031c1c
   3e5a4:	0004c01c 	.word	0x0004c01c
   3e5a8:	0004c033 	.word	0x0004c033
   3e5ac:	00050844 	.word	0x00050844

0003e5b0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   3e5b0:	b538      	push	{r3, r4, r5, lr}
   3e5b2:	4604      	mov	r4, r0
	__asm__ volatile(
   3e5b4:	f04f 0320 	mov.w	r3, #32
   3e5b8:	f3ef 8511 	mrs	r5, BASEPRI
   3e5bc:	f383 8811 	msr	BASEPRI, r3
   3e5c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e5c4:	4819      	ldr	r0, [pc, #100]	; (3e62c <z_abort_timeout+0x7c>)
   3e5c6:	f7ff fbdb 	bl	3dd80 <z_spin_lock_valid>
   3e5ca:	b960      	cbnz	r0, 3e5e6 <z_abort_timeout+0x36>
   3e5cc:	4918      	ldr	r1, [pc, #96]	; (3e630 <z_abort_timeout+0x80>)
   3e5ce:	235f      	movs	r3, #95	; 0x5f
   3e5d0:	4a18      	ldr	r2, [pc, #96]	; (3e634 <z_abort_timeout+0x84>)
   3e5d2:	4819      	ldr	r0, [pc, #100]	; (3e638 <z_abort_timeout+0x88>)
   3e5d4:	f008 f842 	bl	4665c <printk>
   3e5d8:	4818      	ldr	r0, [pc, #96]	; (3e63c <z_abort_timeout+0x8c>)
   3e5da:	f008 f83f 	bl	4665c <printk>
   3e5de:	215f      	movs	r1, #95	; 0x5f
   3e5e0:	4814      	ldr	r0, [pc, #80]	; (3e634 <z_abort_timeout+0x84>)
   3e5e2:	f008 f848 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e5e6:	4811      	ldr	r0, [pc, #68]	; (3e62c <z_abort_timeout+0x7c>)
   3e5e8:	f7ff fbe8 	bl	3ddbc <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   3e5ec:	6823      	ldr	r3, [r4, #0]
   3e5ee:	b1d3      	cbz	r3, 3e626 <z_abort_timeout+0x76>
			remove_timeout(to);
   3e5f0:	4620      	mov	r0, r4
   3e5f2:	f7ff ff21 	bl	3e438 <remove_timeout>
			ret = 0;
   3e5f6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e5f8:	480c      	ldr	r0, [pc, #48]	; (3e62c <z_abort_timeout+0x7c>)
   3e5fa:	f7ff fbcf 	bl	3dd9c <z_spin_unlock_valid>
   3e5fe:	b960      	cbnz	r0, 3e61a <z_abort_timeout+0x6a>
   3e600:	490f      	ldr	r1, [pc, #60]	; (3e640 <z_abort_timeout+0x90>)
   3e602:	2372      	movs	r3, #114	; 0x72
   3e604:	4a0b      	ldr	r2, [pc, #44]	; (3e634 <z_abort_timeout+0x84>)
   3e606:	480c      	ldr	r0, [pc, #48]	; (3e638 <z_abort_timeout+0x88>)
   3e608:	f008 f828 	bl	4665c <printk>
   3e60c:	480d      	ldr	r0, [pc, #52]	; (3e644 <z_abort_timeout+0x94>)
   3e60e:	f008 f825 	bl	4665c <printk>
   3e612:	2172      	movs	r1, #114	; 0x72
   3e614:	4807      	ldr	r0, [pc, #28]	; (3e634 <z_abort_timeout+0x84>)
   3e616:	f008 f82e 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3e61a:	f385 8811 	msr	BASEPRI, r5
   3e61e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   3e622:	4620      	mov	r0, r4
   3e624:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   3e626:	f06f 0415 	mvn.w	r4, #21
   3e62a:	e7e5      	b.n	3e5f8 <z_abort_timeout+0x48>
   3e62c:	2002a3f4 	.word	0x2002a3f4
   3e630:	0004bff2 	.word	0x0004bff2
   3e634:	0004bfcb 	.word	0x0004bfcb
   3e638:	0004b5bf 	.word	0x0004b5bf
   3e63c:	0004c007 	.word	0x0004c007
   3e640:	0004c01c 	.word	0x0004c01c
   3e644:	0004c033 	.word	0x0004c033

0003e648 <z_get_next_timeout_expiry>:

	return ticks - elapsed();
}

s32_t z_get_next_timeout_expiry(void)
{
   3e648:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3e64a:	f04f 0320 	mov.w	r3, #32
   3e64e:	f3ef 8511 	mrs	r5, BASEPRI
   3e652:	f383 8811 	msr	BASEPRI, r3
   3e656:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e65a:	4817      	ldr	r0, [pc, #92]	; (3e6b8 <z_get_next_timeout_expiry+0x70>)
   3e65c:	f7ff fb90 	bl	3dd80 <z_spin_lock_valid>
   3e660:	b960      	cbnz	r0, 3e67c <z_get_next_timeout_expiry+0x34>
   3e662:	4916      	ldr	r1, [pc, #88]	; (3e6bc <z_get_next_timeout_expiry+0x74>)
   3e664:	235f      	movs	r3, #95	; 0x5f
   3e666:	4a16      	ldr	r2, [pc, #88]	; (3e6c0 <z_get_next_timeout_expiry+0x78>)
   3e668:	4816      	ldr	r0, [pc, #88]	; (3e6c4 <z_get_next_timeout_expiry+0x7c>)
   3e66a:	f007 fff7 	bl	4665c <printk>
   3e66e:	4816      	ldr	r0, [pc, #88]	; (3e6c8 <z_get_next_timeout_expiry+0x80>)
   3e670:	f007 fff4 	bl	4665c <printk>
   3e674:	215f      	movs	r1, #95	; 0x5f
   3e676:	4812      	ldr	r0, [pc, #72]	; (3e6c0 <z_get_next_timeout_expiry+0x78>)
   3e678:	f007 fffd 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e67c:	480e      	ldr	r0, [pc, #56]	; (3e6b8 <z_get_next_timeout_expiry+0x70>)
   3e67e:	f7ff fb9d 	bl	3ddbc <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   3e682:	f7ff febd 	bl	3e400 <next_timeout>
   3e686:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e688:	480b      	ldr	r0, [pc, #44]	; (3e6b8 <z_get_next_timeout_expiry+0x70>)
   3e68a:	f7ff fb87 	bl	3dd9c <z_spin_unlock_valid>
   3e68e:	b960      	cbnz	r0, 3e6aa <z_get_next_timeout_expiry+0x62>
   3e690:	490e      	ldr	r1, [pc, #56]	; (3e6cc <z_get_next_timeout_expiry+0x84>)
   3e692:	2372      	movs	r3, #114	; 0x72
   3e694:	4a0a      	ldr	r2, [pc, #40]	; (3e6c0 <z_get_next_timeout_expiry+0x78>)
   3e696:	480b      	ldr	r0, [pc, #44]	; (3e6c4 <z_get_next_timeout_expiry+0x7c>)
   3e698:	f007 ffe0 	bl	4665c <printk>
   3e69c:	480c      	ldr	r0, [pc, #48]	; (3e6d0 <z_get_next_timeout_expiry+0x88>)
   3e69e:	f007 ffdd 	bl	4665c <printk>
   3e6a2:	2172      	movs	r1, #114	; 0x72
   3e6a4:	4806      	ldr	r0, [pc, #24]	; (3e6c0 <z_get_next_timeout_expiry+0x78>)
   3e6a6:	f007 ffe6 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3e6aa:	f385 8811 	msr	BASEPRI, r5
   3e6ae:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   3e6b2:	4620      	mov	r0, r4
   3e6b4:	bd38      	pop	{r3, r4, r5, pc}
   3e6b6:	bf00      	nop
   3e6b8:	2002a3f4 	.word	0x2002a3f4
   3e6bc:	0004bff2 	.word	0x0004bff2
   3e6c0:	0004bfcb 	.word	0x0004bfcb
   3e6c4:	0004b5bf 	.word	0x0004b5bf
   3e6c8:	0004c007 	.word	0x0004c007
   3e6cc:	0004c01c 	.word	0x0004c01c
   3e6d0:	0004c033 	.word	0x0004c033

0003e6d4 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   3e6d4:	b570      	push	{r4, r5, r6, lr}
   3e6d6:	4604      	mov	r4, r0
   3e6d8:	460e      	mov	r6, r1
	__asm__ volatile(
   3e6da:	f04f 0320 	mov.w	r3, #32
   3e6de:	f3ef 8511 	mrs	r5, BASEPRI
   3e6e2:	f383 8811 	msr	BASEPRI, r3
   3e6e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e6ea:	481a      	ldr	r0, [pc, #104]	; (3e754 <z_set_timeout_expiry+0x80>)
   3e6ec:	f7ff fb48 	bl	3dd80 <z_spin_lock_valid>
   3e6f0:	b960      	cbnz	r0, 3e70c <z_set_timeout_expiry+0x38>
   3e6f2:	4919      	ldr	r1, [pc, #100]	; (3e758 <z_set_timeout_expiry+0x84>)
   3e6f4:	235f      	movs	r3, #95	; 0x5f
   3e6f6:	4a19      	ldr	r2, [pc, #100]	; (3e75c <z_set_timeout_expiry+0x88>)
   3e6f8:	4819      	ldr	r0, [pc, #100]	; (3e760 <z_set_timeout_expiry+0x8c>)
   3e6fa:	f007 ffaf 	bl	4665c <printk>
   3e6fe:	4819      	ldr	r0, [pc, #100]	; (3e764 <z_set_timeout_expiry+0x90>)
   3e700:	f007 ffac 	bl	4665c <printk>
   3e704:	215f      	movs	r1, #95	; 0x5f
   3e706:	4815      	ldr	r0, [pc, #84]	; (3e75c <z_set_timeout_expiry+0x88>)
   3e708:	f007 ffb5 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e70c:	4811      	ldr	r0, [pc, #68]	; (3e754 <z_set_timeout_expiry+0x80>)
   3e70e:	f7ff fb55 	bl	3ddbc <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   3e712:	f7ff fe75 	bl	3e400 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   3e716:	2801      	cmp	r0, #1
   3e718:	dd05      	ble.n	3e726 <z_set_timeout_expiry+0x52>
   3e71a:	42a0      	cmp	r0, r4
   3e71c:	dd03      	ble.n	3e726 <z_set_timeout_expiry+0x52>
			z_clock_set_timeout(ticks, idle);
   3e71e:	4631      	mov	r1, r6
   3e720:	4620      	mov	r0, r4
   3e722:	f7e3 fbdb 	bl	21edc <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e726:	480b      	ldr	r0, [pc, #44]	; (3e754 <z_set_timeout_expiry+0x80>)
   3e728:	f7ff fb38 	bl	3dd9c <z_spin_unlock_valid>
   3e72c:	b960      	cbnz	r0, 3e748 <z_set_timeout_expiry+0x74>
   3e72e:	490e      	ldr	r1, [pc, #56]	; (3e768 <z_set_timeout_expiry+0x94>)
   3e730:	2372      	movs	r3, #114	; 0x72
   3e732:	4a0a      	ldr	r2, [pc, #40]	; (3e75c <z_set_timeout_expiry+0x88>)
   3e734:	480a      	ldr	r0, [pc, #40]	; (3e760 <z_set_timeout_expiry+0x8c>)
   3e736:	f007 ff91 	bl	4665c <printk>
   3e73a:	480c      	ldr	r0, [pc, #48]	; (3e76c <z_set_timeout_expiry+0x98>)
   3e73c:	f007 ff8e 	bl	4665c <printk>
   3e740:	2172      	movs	r1, #114	; 0x72
   3e742:	4806      	ldr	r0, [pc, #24]	; (3e75c <z_set_timeout_expiry+0x88>)
   3e744:	f007 ff97 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3e748:	f385 8811 	msr	BASEPRI, r5
   3e74c:	f3bf 8f6f 	isb	sy
		}
	}
}
   3e750:	bd70      	pop	{r4, r5, r6, pc}
   3e752:	bf00      	nop
   3e754:	2002a3f4 	.word	0x2002a3f4
   3e758:	0004bff2 	.word	0x0004bff2
   3e75c:	0004bfcb 	.word	0x0004bfcb
   3e760:	0004b5bf 	.word	0x0004b5bf
   3e764:	0004c007 	.word	0x0004c007
   3e768:	0004c01c 	.word	0x0004c01c
   3e76c:	0004c033 	.word	0x0004c033

0003e770 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   3e770:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   3e774:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   3e776:	f7fe fdcd 	bl	3d314 <z_time_slice>
	__asm__ volatile(
   3e77a:	f04f 0320 	mov.w	r3, #32
   3e77e:	f3ef 8511 	mrs	r5, BASEPRI
   3e782:	f383 8811 	msr	BASEPRI, r3
   3e786:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e78a:	4846      	ldr	r0, [pc, #280]	; (3e8a4 <z_clock_announce+0x134>)
   3e78c:	f7ff faf8 	bl	3dd80 <z_spin_lock_valid>
   3e790:	b960      	cbnz	r0, 3e7ac <z_clock_announce+0x3c>
   3e792:	4945      	ldr	r1, [pc, #276]	; (3e8a8 <z_clock_announce+0x138>)
   3e794:	235f      	movs	r3, #95	; 0x5f
   3e796:	4a45      	ldr	r2, [pc, #276]	; (3e8ac <z_clock_announce+0x13c>)
   3e798:	4845      	ldr	r0, [pc, #276]	; (3e8b0 <z_clock_announce+0x140>)
   3e79a:	f007 ff5f 	bl	4665c <printk>
   3e79e:	4845      	ldr	r0, [pc, #276]	; (3e8b4 <z_clock_announce+0x144>)
   3e7a0:	f007 ff5c 	bl	4665c <printk>
   3e7a4:	215f      	movs	r1, #95	; 0x5f
   3e7a6:	4841      	ldr	r0, [pc, #260]	; (3e8ac <z_clock_announce+0x13c>)
   3e7a8:	f007 ff65 	bl	46676 <assert_post_action>
   3e7ac:	4f42      	ldr	r7, [pc, #264]	; (3e8b8 <z_clock_announce+0x148>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   3e7ae:	4e43      	ldr	r6, [pc, #268]	; (3e8bc <z_clock_announce+0x14c>)
   3e7b0:	46b9      	mov	r9, r7
	z_spin_lock_set_owner(l);
   3e7b2:	483c      	ldr	r0, [pc, #240]	; (3e8a4 <z_clock_announce+0x134>)
	return list->head == list;
   3e7b4:	f8df 8110 	ldr.w	r8, [pc, #272]	; 3e8c8 <z_clock_announce+0x158>
   3e7b8:	f7ff fb00 	bl	3ddbc <z_spin_lock_set_owner>
   3e7bc:	6034      	str	r4, [r6, #0]
   3e7be:	f8d8 4000 	ldr.w	r4, [r8]
   3e7c2:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3e7c4:	4544      	cmp	r4, r8
   3e7c6:	e9d7 bc00 	ldrd	fp, ip, [r7]
   3e7ca:	d005      	beq.n	3e7d8 <z_clock_announce+0x68>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   3e7cc:	b124      	cbz	r4, 3e7d8 <z_clock_announce+0x68>
   3e7ce:	68a3      	ldr	r3, [r4, #8]
   3e7d0:	4293      	cmp	r3, r2
   3e7d2:	dd25      	ble.n	3e820 <z_clock_announce+0xb0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   3e7d4:	1a9b      	subs	r3, r3, r2
   3e7d6:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   3e7d8:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   3e7da:	eb1b 0002 	adds.w	r0, fp, r2
   3e7de:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   3e7e2:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   3e7e6:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   3e7e8:	f7ff fe0a 	bl	3e400 <next_timeout>
   3e7ec:	4621      	mov	r1, r4
   3e7ee:	f7e3 fb75 	bl	21edc <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e7f2:	482c      	ldr	r0, [pc, #176]	; (3e8a4 <z_clock_announce+0x134>)
   3e7f4:	f7ff fad2 	bl	3dd9c <z_spin_unlock_valid>
   3e7f8:	b960      	cbnz	r0, 3e814 <z_clock_announce+0xa4>
   3e7fa:	4931      	ldr	r1, [pc, #196]	; (3e8c0 <z_clock_announce+0x150>)
   3e7fc:	2372      	movs	r3, #114	; 0x72
   3e7fe:	4a2b      	ldr	r2, [pc, #172]	; (3e8ac <z_clock_announce+0x13c>)
   3e800:	482b      	ldr	r0, [pc, #172]	; (3e8b0 <z_clock_announce+0x140>)
   3e802:	f007 ff2b 	bl	4665c <printk>
   3e806:	482f      	ldr	r0, [pc, #188]	; (3e8c4 <z_clock_announce+0x154>)
   3e808:	f007 ff28 	bl	4665c <printk>
   3e80c:	2172      	movs	r1, #114	; 0x72
   3e80e:	4827      	ldr	r0, [pc, #156]	; (3e8ac <z_clock_announce+0x13c>)
   3e810:	f007 ff31 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3e814:	f385 8811 	msr	BASEPRI, r5
   3e818:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   3e81c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   3e820:	eb1b 0003 	adds.w	r0, fp, r3
   3e824:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   3e828:	1ad3      	subs	r3, r2, r3
   3e82a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   3e82c:	2300      	movs	r3, #0
		curr_tick += dt;
   3e82e:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   3e832:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   3e834:	4620      	mov	r0, r4
   3e836:	f7ff fdff 	bl	3e438 <remove_timeout>
   3e83a:	481a      	ldr	r0, [pc, #104]	; (3e8a4 <z_clock_announce+0x134>)
   3e83c:	f7ff faae 	bl	3dd9c <z_spin_unlock_valid>
   3e840:	b960      	cbnz	r0, 3e85c <z_clock_announce+0xec>
   3e842:	491f      	ldr	r1, [pc, #124]	; (3e8c0 <z_clock_announce+0x150>)
   3e844:	2372      	movs	r3, #114	; 0x72
   3e846:	4a19      	ldr	r2, [pc, #100]	; (3e8ac <z_clock_announce+0x13c>)
   3e848:	4819      	ldr	r0, [pc, #100]	; (3e8b0 <z_clock_announce+0x140>)
   3e84a:	f007 ff07 	bl	4665c <printk>
   3e84e:	481d      	ldr	r0, [pc, #116]	; (3e8c4 <z_clock_announce+0x154>)
   3e850:	f007 ff04 	bl	4665c <printk>
   3e854:	2172      	movs	r1, #114	; 0x72
   3e856:	4815      	ldr	r0, [pc, #84]	; (3e8ac <z_clock_announce+0x13c>)
   3e858:	f007 ff0d 	bl	46676 <assert_post_action>
   3e85c:	f385 8811 	msr	BASEPRI, r5
   3e860:	f3bf 8f6f 	isb	sy
		t->fn(t);
   3e864:	68e3      	ldr	r3, [r4, #12]
   3e866:	4620      	mov	r0, r4
   3e868:	4798      	blx	r3
	__asm__ volatile(
   3e86a:	f04f 0320 	mov.w	r3, #32
   3e86e:	f3ef 8511 	mrs	r5, BASEPRI
   3e872:	f383 8811 	msr	BASEPRI, r3
   3e876:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e87a:	480a      	ldr	r0, [pc, #40]	; (3e8a4 <z_clock_announce+0x134>)
   3e87c:	f7ff fa80 	bl	3dd80 <z_spin_lock_valid>
   3e880:	b960      	cbnz	r0, 3e89c <z_clock_announce+0x12c>
   3e882:	4909      	ldr	r1, [pc, #36]	; (3e8a8 <z_clock_announce+0x138>)
   3e884:	235f      	movs	r3, #95	; 0x5f
   3e886:	4a09      	ldr	r2, [pc, #36]	; (3e8ac <z_clock_announce+0x13c>)
   3e888:	4809      	ldr	r0, [pc, #36]	; (3e8b0 <z_clock_announce+0x140>)
   3e88a:	f007 fee7 	bl	4665c <printk>
   3e88e:	4809      	ldr	r0, [pc, #36]	; (3e8b4 <z_clock_announce+0x144>)
   3e890:	f007 fee4 	bl	4665c <printk>
   3e894:	215f      	movs	r1, #95	; 0x5f
   3e896:	4805      	ldr	r0, [pc, #20]	; (3e8ac <z_clock_announce+0x13c>)
   3e898:	f007 feed 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e89c:	4801      	ldr	r0, [pc, #4]	; (3e8a4 <z_clock_announce+0x134>)
   3e89e:	f7ff fa8d 	bl	3ddbc <z_spin_lock_set_owner>
   3e8a2:	e78c      	b.n	3e7be <z_clock_announce+0x4e>
   3e8a4:	2002a3f4 	.word	0x2002a3f4
   3e8a8:	0004bff2 	.word	0x0004bff2
   3e8ac:	0004bfcb 	.word	0x0004bfcb
   3e8b0:	0004b5bf 	.word	0x0004b5bf
   3e8b4:	0004c007 	.word	0x0004c007
   3e8b8:	200237f8 	.word	0x200237f8
   3e8bc:	2002a3f0 	.word	0x2002a3f0
   3e8c0:	0004c01c 	.word	0x0004c01c
   3e8c4:	0004c033 	.word	0x0004c033
   3e8c8:	20031c1c 	.word	0x20031c1c

0003e8cc <z_tick_get>:

s64_t z_tick_get(void)
{
   3e8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e8d0:	f04f 0320 	mov.w	r3, #32
   3e8d4:	f3ef 8611 	mrs	r6, BASEPRI
   3e8d8:	f383 8811 	msr	BASEPRI, r3
   3e8dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3e8e0:	481a      	ldr	r0, [pc, #104]	; (3e94c <z_tick_get+0x80>)
   3e8e2:	f7ff fa4d 	bl	3dd80 <z_spin_lock_valid>
   3e8e6:	b960      	cbnz	r0, 3e902 <z_tick_get+0x36>
   3e8e8:	4919      	ldr	r1, [pc, #100]	; (3e950 <z_tick_get+0x84>)
   3e8ea:	235f      	movs	r3, #95	; 0x5f
   3e8ec:	4a19      	ldr	r2, [pc, #100]	; (3e954 <z_tick_get+0x88>)
   3e8ee:	481a      	ldr	r0, [pc, #104]	; (3e958 <z_tick_get+0x8c>)
   3e8f0:	f007 feb4 	bl	4665c <printk>
   3e8f4:	4819      	ldr	r0, [pc, #100]	; (3e95c <z_tick_get+0x90>)
   3e8f6:	f007 feb1 	bl	4665c <printk>
   3e8fa:	215f      	movs	r1, #95	; 0x5f
   3e8fc:	4815      	ldr	r0, [pc, #84]	; (3e954 <z_tick_get+0x88>)
   3e8fe:	f007 feba 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e902:	4812      	ldr	r0, [pc, #72]	; (3e94c <z_tick_get+0x80>)
   3e904:	f7ff fa5a 	bl	3ddbc <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   3e908:	f7e3 fb6a 	bl	21fe0 <z_clock_elapsed>
   3e90c:	4b14      	ldr	r3, [pc, #80]	; (3e960 <z_tick_get+0x94>)
   3e90e:	e9d3 4500 	ldrd	r4, r5, [r3]
   3e912:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3e914:	480d      	ldr	r0, [pc, #52]	; (3e94c <z_tick_get+0x80>)
   3e916:	f145 0800 	adc.w	r8, r5, #0
   3e91a:	f7ff fa3f 	bl	3dd9c <z_spin_unlock_valid>
   3e91e:	b960      	cbnz	r0, 3e93a <z_tick_get+0x6e>
   3e920:	4910      	ldr	r1, [pc, #64]	; (3e964 <z_tick_get+0x98>)
   3e922:	2372      	movs	r3, #114	; 0x72
   3e924:	4a0b      	ldr	r2, [pc, #44]	; (3e954 <z_tick_get+0x88>)
   3e926:	480c      	ldr	r0, [pc, #48]	; (3e958 <z_tick_get+0x8c>)
   3e928:	f007 fe98 	bl	4665c <printk>
   3e92c:	480e      	ldr	r0, [pc, #56]	; (3e968 <z_tick_get+0x9c>)
   3e92e:	f007 fe95 	bl	4665c <printk>
   3e932:	2172      	movs	r1, #114	; 0x72
   3e934:	4807      	ldr	r0, [pc, #28]	; (3e954 <z_tick_get+0x88>)
   3e936:	f007 fe9e 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3e93a:	f386 8811 	msr	BASEPRI, r6
   3e93e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   3e942:	4638      	mov	r0, r7
   3e944:	4641      	mov	r1, r8
   3e946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3e94a:	bf00      	nop
   3e94c:	2002a3f4 	.word	0x2002a3f4
   3e950:	0004bff2 	.word	0x0004bff2
   3e954:	0004bfcb 	.word	0x0004bfcb
   3e958:	0004b5bf 	.word	0x0004b5bf
   3e95c:	0004c007 	.word	0x0004c007
   3e960:	200237f8 	.word	0x200237f8
   3e964:	0004c01c 	.word	0x0004c01c
   3e968:	0004c033 	.word	0x0004c033

0003e96c <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   3e96c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   3e96e:	6883      	ldr	r3, [r0, #8]
{
   3e970:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   3e972:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   3e974:	b964      	cbnz	r4, 3e990 <k_poll_poller_cb+0x24>
   3e976:	4915      	ldr	r1, [pc, #84]	; (3e9cc <k_poll_poller_cb+0x60>)
   3e978:	23e0      	movs	r3, #224	; 0xe0
   3e97a:	4a15      	ldr	r2, [pc, #84]	; (3e9d0 <k_poll_poller_cb+0x64>)
   3e97c:	4815      	ldr	r0, [pc, #84]	; (3e9d4 <k_poll_poller_cb+0x68>)
   3e97e:	f007 fe6d 	bl	4665c <printk>
   3e982:	4815      	ldr	r0, [pc, #84]	; (3e9d8 <k_poll_poller_cb+0x6c>)
   3e984:	f007 fe6a 	bl	4665c <printk>
   3e988:	21e0      	movs	r1, #224	; 0xe0
   3e98a:	4811      	ldr	r0, [pc, #68]	; (3e9d0 <k_poll_poller_cb+0x64>)
   3e98c:	f007 fe73 	bl	46676 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   3e990:	7b63      	ldrb	r3, [r4, #13]
   3e992:	079a      	lsls	r2, r3, #30
   3e994:	d401      	bmi.n	3e99a <k_poll_poller_cb+0x2e>
		return 0;
   3e996:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   3e998:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   3e99a:	6a23      	ldr	r3, [r4, #32]
   3e99c:	3302      	adds	r3, #2
   3e99e:	d012      	beq.n	3e9c6 <k_poll_poller_cb+0x5a>
	z_unpend_thread(thread);
   3e9a0:	4620      	mov	r0, r4
   3e9a2:	f7fe fa37 	bl	3ce14 <z_unpend_thread>
	z_arch_thread_return_value_set(thread,
   3e9a6:	2d08      	cmp	r5, #8
   3e9a8:	bf0c      	ite	eq
   3e9aa:	f06f 0303 	mvneq.w	r3, #3
   3e9ae:	2300      	movne	r3, #0
   3e9b0:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3e9b2:	7b63      	ldrb	r3, [r4, #13]
   3e9b4:	06db      	lsls	r3, r3, #27
   3e9b6:	d1ee      	bne.n	3e996 <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   3e9b8:	69a5      	ldr	r5, [r4, #24]
   3e9ba:	2d00      	cmp	r5, #0
   3e9bc:	d1eb      	bne.n	3e996 <k_poll_poller_cb+0x2a>
		z_add_thread_to_ready_q(thread);
   3e9be:	4620      	mov	r0, r4
   3e9c0:	f7fe fb34 	bl	3d02c <z_add_thread_to_ready_q>
   3e9c4:	e7e7      	b.n	3e996 <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   3e9c6:	f06f 000a 	mvn.w	r0, #10
   3e9ca:	e7e5      	b.n	3e998 <k_poll_poller_cb+0x2c>
   3e9cc:	000509c2 	.word	0x000509c2
   3e9d0:	000509a0 	.word	0x000509a0
   3e9d4:	0004b5bf 	.word	0x0004b5bf
   3e9d8:	000509d8 	.word	0x000509d8

0003e9dc <clear_event_registrations>:
{
   3e9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e9e0:	2414      	movs	r4, #20
   3e9e2:	4680      	mov	r8, r0
   3e9e4:	4617      	mov	r7, r2
   3e9e6:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   3e9ea:	4d48      	ldr	r5, [pc, #288]	; (3eb0c <clear_event_registrations+0x130>)
   3e9ec:	f8df 9158 	ldr.w	r9, [pc, #344]	; 3eb48 <clear_event_registrations+0x16c>
   3e9f0:	4e47      	ldr	r6, [pc, #284]	; (3eb10 <clear_event_registrations+0x134>)
	while (num_events--) {
   3e9f2:	4544      	cmp	r4, r8
   3e9f4:	d101      	bne.n	3e9fa <clear_event_registrations+0x1e>
}
   3e9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   3e9fa:	2300      	movs	r3, #0
   3e9fc:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   3ea00:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   3ea04:	f003 030f 	and.w	r3, r3, #15
   3ea08:	2b04      	cmp	r3, #4
   3ea0a:	d83f      	bhi.n	3ea8c <clear_event_registrations+0xb0>
   3ea0c:	e8df f003 	tbb	[pc, r3]
   3ea10:	3e032f4b 	.word	0x3e032f4b
   3ea14:	20          	.byte	0x20
   3ea15:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3ea16:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3ea1a:	b963      	cbnz	r3, 3ea36 <clear_event_registrations+0x5a>
   3ea1c:	493d      	ldr	r1, [pc, #244]	; (3eb14 <clear_event_registrations+0x138>)
   3ea1e:	2396      	movs	r3, #150	; 0x96
   3ea20:	462a      	mov	r2, r5
   3ea22:	4630      	mov	r0, r6
   3ea24:	f007 fe1a 	bl	4665c <printk>
   3ea28:	483b      	ldr	r0, [pc, #236]	; (3eb18 <clear_event_registrations+0x13c>)
   3ea2a:	f007 fe17 	bl	4665c <printk>
   3ea2e:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3ea30:	4628      	mov	r0, r5
   3ea32:	f007 fe20 	bl	46676 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   3ea36:	f854 2c14 	ldr.w	r2, [r4, #-20]
   3ea3a:	b3a2      	cbz	r2, 3eaa6 <clear_event_registrations+0xca>
	node->prev->next = node->next;
   3ea3c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3ea40:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   3ea42:	f854 2c14 	ldr.w	r2, [r4, #-20]
   3ea46:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   3ea48:	2300      	movs	r3, #0
	node->prev = NULL;
   3ea4a:	e944 3305 	strd	r3, r3, [r4, #-20]
   3ea4e:	e02a      	b.n	3eaa6 <clear_event_registrations+0xca>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3ea50:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3ea54:	2b00      	cmp	r3, #0
   3ea56:	d1ee      	bne.n	3ea36 <clear_event_registrations+0x5a>
   3ea58:	4930      	ldr	r1, [pc, #192]	; (3eb1c <clear_event_registrations+0x140>)
   3ea5a:	239a      	movs	r3, #154	; 0x9a
   3ea5c:	462a      	mov	r2, r5
   3ea5e:	4630      	mov	r0, r6
   3ea60:	f007 fdfc 	bl	4665c <printk>
   3ea64:	482e      	ldr	r0, [pc, #184]	; (3eb20 <clear_event_registrations+0x144>)
   3ea66:	f007 fdf9 	bl	4665c <printk>
   3ea6a:	219a      	movs	r1, #154	; 0x9a
   3ea6c:	e7e0      	b.n	3ea30 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3ea6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3ea72:	2b00      	cmp	r3, #0
   3ea74:	d1df      	bne.n	3ea36 <clear_event_registrations+0x5a>
   3ea76:	492b      	ldr	r1, [pc, #172]	; (3eb24 <clear_event_registrations+0x148>)
   3ea78:	239e      	movs	r3, #158	; 0x9e
   3ea7a:	462a      	mov	r2, r5
   3ea7c:	4630      	mov	r0, r6
   3ea7e:	f007 fded 	bl	4665c <printk>
   3ea82:	4829      	ldr	r0, [pc, #164]	; (3eb28 <clear_event_registrations+0x14c>)
   3ea84:	f007 fdea 	bl	4665c <printk>
   3ea88:	219e      	movs	r1, #158	; 0x9e
   3ea8a:	e7d1      	b.n	3ea30 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   3ea8c:	4649      	mov	r1, r9
   3ea8e:	23a5      	movs	r3, #165	; 0xa5
   3ea90:	462a      	mov	r2, r5
   3ea92:	4630      	mov	r0, r6
   3ea94:	f007 fde2 	bl	4665c <printk>
   3ea98:	4824      	ldr	r0, [pc, #144]	; (3eb2c <clear_event_registrations+0x150>)
   3ea9a:	f007 fddf 	bl	4665c <printk>
   3ea9e:	21a5      	movs	r1, #165	; 0xa5
   3eaa0:	4628      	mov	r0, r5
   3eaa2:	f007 fde8 	bl	46676 <assert_post_action>
   3eaa6:	4822      	ldr	r0, [pc, #136]	; (3eb30 <clear_event_registrations+0x154>)
   3eaa8:	f7ff f978 	bl	3dd9c <z_spin_unlock_valid>
   3eaac:	b960      	cbnz	r0, 3eac8 <clear_event_registrations+0xec>
   3eaae:	4921      	ldr	r1, [pc, #132]	; (3eb34 <clear_event_registrations+0x158>)
   3eab0:	2372      	movs	r3, #114	; 0x72
   3eab2:	4a21      	ldr	r2, [pc, #132]	; (3eb38 <clear_event_registrations+0x15c>)
   3eab4:	4630      	mov	r0, r6
   3eab6:	f007 fdd1 	bl	4665c <printk>
   3eaba:	4820      	ldr	r0, [pc, #128]	; (3eb3c <clear_event_registrations+0x160>)
   3eabc:	f007 fdce 	bl	4665c <printk>
   3eac0:	2172      	movs	r1, #114	; 0x72
   3eac2:	481d      	ldr	r0, [pc, #116]	; (3eb38 <clear_event_registrations+0x15c>)
   3eac4:	f007 fdd7 	bl	46676 <assert_post_action>
   3eac8:	f387 8811 	msr	BASEPRI, r7
   3eacc:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3ead0:	f04f 0320 	mov.w	r3, #32
   3ead4:	f3ef 8711 	mrs	r7, BASEPRI
   3ead8:	f383 8811 	msr	BASEPRI, r3
   3eadc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3eae0:	4813      	ldr	r0, [pc, #76]	; (3eb30 <clear_event_registrations+0x154>)
   3eae2:	f7ff f94d 	bl	3dd80 <z_spin_lock_valid>
   3eae6:	b960      	cbnz	r0, 3eb02 <clear_event_registrations+0x126>
   3eae8:	4915      	ldr	r1, [pc, #84]	; (3eb40 <clear_event_registrations+0x164>)
   3eaea:	235f      	movs	r3, #95	; 0x5f
   3eaec:	4a12      	ldr	r2, [pc, #72]	; (3eb38 <clear_event_registrations+0x15c>)
   3eaee:	4630      	mov	r0, r6
   3eaf0:	f007 fdb4 	bl	4665c <printk>
   3eaf4:	4813      	ldr	r0, [pc, #76]	; (3eb44 <clear_event_registrations+0x168>)
   3eaf6:	f007 fdb1 	bl	4665c <printk>
   3eafa:	215f      	movs	r1, #95	; 0x5f
   3eafc:	480e      	ldr	r0, [pc, #56]	; (3eb38 <clear_event_registrations+0x15c>)
   3eafe:	f007 fdba 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3eb02:	480b      	ldr	r0, [pc, #44]	; (3eb30 <clear_event_registrations+0x154>)
   3eb04:	f7ff f95a 	bl	3ddbc <z_spin_lock_set_owner>
   3eb08:	3c14      	subs	r4, #20
   3eb0a:	e772      	b.n	3e9f2 <clear_event_registrations+0x16>
   3eb0c:	000509a0 	.word	0x000509a0
   3eb10:	0004b5bf 	.word	0x0004b5bf
   3eb14:	00050853 	.word	0x00050853
   3eb18:	0005086d 	.word	0x0005086d
   3eb1c:	00050882 	.word	0x00050882
   3eb20:	0005089e 	.word	0x0005089e
   3eb24:	000508af 	.word	0x000508af
   3eb28:	000508cc 	.word	0x000508cc
   3eb2c:	000508e3 	.word	0x000508e3
   3eb30:	2002a3f8 	.word	0x2002a3f8
   3eb34:	0004c01c 	.word	0x0004c01c
   3eb38:	0004bfcb 	.word	0x0004bfcb
   3eb3c:	0004c033 	.word	0x0004c033
   3eb40:	0004bff2 	.word	0x0004bff2
   3eb44:	0004c007 	.word	0x0004c007
   3eb48:	000505de 	.word	0x000505de

0003eb4c <register_events>:
{
   3eb4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   3eb50:	2600      	movs	r6, #0
{
   3eb52:	468a      	mov	sl, r1
   3eb54:	4615      	mov	r5, r2
   3eb56:	4604      	mov	r4, r0
	int events_registered = 0;
   3eb58:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3eb5a:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 3ed40 <register_events+0x1f4>
   3eb5e:	4f68      	ldr	r7, [pc, #416]	; (3ed00 <register_events+0x1b4>)
{
   3eb60:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   3eb62:	4556      	cmp	r6, sl
   3eb64:	db03      	blt.n	3eb6e <register_events+0x22>
}
   3eb66:	4640      	mov	r0, r8
   3eb68:	b003      	add	sp, #12
   3eb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3eb6e:	f04f 0320 	mov.w	r3, #32
   3eb72:	f3ef 8b11 	mrs	fp, BASEPRI
   3eb76:	f383 8811 	msr	BASEPRI, r3
   3eb7a:	f3bf 8f6f 	isb	sy
   3eb7e:	4648      	mov	r0, r9
   3eb80:	f7ff f8fe 	bl	3dd80 <z_spin_lock_valid>
   3eb84:	b960      	cbnz	r0, 3eba0 <register_events+0x54>
   3eb86:	495f      	ldr	r1, [pc, #380]	; (3ed04 <register_events+0x1b8>)
   3eb88:	235f      	movs	r3, #95	; 0x5f
   3eb8a:	463a      	mov	r2, r7
   3eb8c:	485e      	ldr	r0, [pc, #376]	; (3ed08 <register_events+0x1bc>)
   3eb8e:	f007 fd65 	bl	4665c <printk>
   3eb92:	485e      	ldr	r0, [pc, #376]	; (3ed0c <register_events+0x1c0>)
   3eb94:	f007 fd62 	bl	4665c <printk>
   3eb98:	215f      	movs	r1, #95	; 0x5f
   3eb9a:	4638      	mov	r0, r7
   3eb9c:	f007 fd6b 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3eba0:	4648      	mov	r0, r9
   3eba2:	f7ff f90b 	bl	3ddbc <z_spin_lock_set_owner>
	switch (event->type) {
   3eba6:	7b63      	ldrb	r3, [r4, #13]
   3eba8:	f003 030f 	and.w	r3, r3, #15
   3ebac:	2b04      	cmp	r3, #4
   3ebae:	d825      	bhi.n	3ebfc <register_events+0xb0>
   3ebb0:	e8df f003 	tbb	[pc, r3]
   3ebb4:	24031e07 	.word	0x24031e07
   3ebb8:	18          	.byte	0x18
   3ebb9:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   3ebba:	6923      	ldr	r3, [r4, #16]
   3ebbc:	689b      	ldr	r3, [r3, #8]
   3ebbe:	2b00      	cmp	r3, #0
   3ebc0:	d12d      	bne.n	3ec1e <register_events+0xd2>
		} else if (!just_check && poller->is_polling) {
   3ebc2:	9b01      	ldr	r3, [sp, #4]
   3ebc4:	2b00      	cmp	r3, #0
   3ebc6:	d135      	bne.n	3ec34 <register_events+0xe8>
   3ebc8:	782b      	ldrb	r3, [r5, #0]
   3ebca:	2b00      	cmp	r3, #0
   3ebcc:	d032      	beq.n	3ec34 <register_events+0xe8>
	switch (event->type) {
   3ebce:	7b63      	ldrb	r3, [r4, #13]
   3ebd0:	f003 030f 	and.w	r3, r3, #15
   3ebd4:	2b04      	cmp	r3, #4
   3ebd6:	f200 8085 	bhi.w	3ece4 <register_events+0x198>
   3ebda:	e8df f003 	tbb	[pc, r3]
   3ebde:	7058      	.short	0x7058
   3ebe0:	8343      	.short	0x8343
   3ebe2:	5c          	.byte	0x5c
   3ebe3:	00          	.byte	0x00
		if (!k_queue_is_empty(event->queue)) {
   3ebe4:	6923      	ldr	r3, [r4, #16]
   3ebe6:	681b      	ldr	r3, [r3, #0]
   3ebe8:	2b00      	cmp	r3, #0
   3ebea:	d0ea      	beq.n	3ebc2 <register_events+0x76>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   3ebec:	2204      	movs	r2, #4
   3ebee:	e017      	b.n	3ec20 <register_events+0xd4>
		if (event->signal->signaled != 0U) {
   3ebf0:	6923      	ldr	r3, [r4, #16]
   3ebf2:	689b      	ldr	r3, [r3, #8]
   3ebf4:	2b00      	cmp	r3, #0
   3ebf6:	d0e4      	beq.n	3ebc2 <register_events+0x76>
			*state = K_POLL_STATE_SIGNALED;
   3ebf8:	2201      	movs	r2, #1
   3ebfa:	e011      	b.n	3ec20 <register_events+0xd4>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   3ebfc:	2350      	movs	r3, #80	; 0x50
   3ebfe:	4a44      	ldr	r2, [pc, #272]	; (3ed10 <register_events+0x1c4>)
   3ec00:	4944      	ldr	r1, [pc, #272]	; (3ed14 <register_events+0x1c8>)
   3ec02:	4841      	ldr	r0, [pc, #260]	; (3ed08 <register_events+0x1bc>)
   3ec04:	f007 fd2a 	bl	4665c <printk>
   3ec08:	7b61      	ldrb	r1, [r4, #13]
   3ec0a:	4843      	ldr	r0, [pc, #268]	; (3ed18 <register_events+0x1cc>)
   3ec0c:	f001 010f 	and.w	r1, r1, #15
   3ec10:	f007 fd24 	bl	4665c <printk>
   3ec14:	2150      	movs	r1, #80	; 0x50
   3ec16:	483e      	ldr	r0, [pc, #248]	; (3ed10 <register_events+0x1c4>)
   3ec18:	f007 fd2d 	bl	46676 <assert_post_action>
   3ec1c:	e7d1      	b.n	3ebc2 <register_events+0x76>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   3ec1e:	2202      	movs	r2, #2
	event->poller = NULL;
   3ec20:	2100      	movs	r1, #0
	event->state |= state;
   3ec22:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   3ec24:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   3ec26:	f3c3 3004 	ubfx	r0, r3, #12, #5
   3ec2a:	4302      	orrs	r2, r0
   3ec2c:	f362 3310 	bfi	r3, r2, #12, #5
   3ec30:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   3ec32:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3ec34:	4648      	mov	r0, r9
   3ec36:	f7ff f8b1 	bl	3dd9c <z_spin_unlock_valid>
   3ec3a:	b960      	cbnz	r0, 3ec56 <register_events+0x10a>
   3ec3c:	4937      	ldr	r1, [pc, #220]	; (3ed1c <register_events+0x1d0>)
   3ec3e:	2372      	movs	r3, #114	; 0x72
   3ec40:	463a      	mov	r2, r7
   3ec42:	4831      	ldr	r0, [pc, #196]	; (3ed08 <register_events+0x1bc>)
   3ec44:	f007 fd0a 	bl	4665c <printk>
   3ec48:	4835      	ldr	r0, [pc, #212]	; (3ed20 <register_events+0x1d4>)
   3ec4a:	f007 fd07 	bl	4665c <printk>
   3ec4e:	2172      	movs	r1, #114	; 0x72
   3ec50:	4638      	mov	r0, r7
   3ec52:	f007 fd10 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3ec56:	f38b 8811 	msr	BASEPRI, fp
   3ec5a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   3ec5e:	3601      	adds	r6, #1
   3ec60:	3414      	adds	r4, #20
   3ec62:	e77e      	b.n	3eb62 <register_events+0x16>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3ec64:	6923      	ldr	r3, [r4, #16]
   3ec66:	b963      	cbnz	r3, 3ec82 <register_events+0x136>
   3ec68:	492e      	ldr	r1, [pc, #184]	; (3ed24 <register_events+0x1d8>)
   3ec6a:	2375      	movs	r3, #117	; 0x75
   3ec6c:	4a28      	ldr	r2, [pc, #160]	; (3ed10 <register_events+0x1c4>)
   3ec6e:	4826      	ldr	r0, [pc, #152]	; (3ed08 <register_events+0x1bc>)
   3ec70:	f007 fcf4 	bl	4665c <printk>
   3ec74:	482c      	ldr	r0, [pc, #176]	; (3ed28 <register_events+0x1dc>)
   3ec76:	f007 fcf1 	bl	4665c <printk>
   3ec7a:	2175      	movs	r1, #117	; 0x75
   3ec7c:	4824      	ldr	r0, [pc, #144]	; (3ed10 <register_events+0x1c4>)
   3ec7e:	f007 fcfa 	bl	46676 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   3ec82:	462a      	mov	r2, r5
   3ec84:	4621      	mov	r1, r4
   3ec86:	6920      	ldr	r0, [r4, #16]
   3ec88:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   3ec8a:	f009 ffd8 	bl	48c3e <add_event>
	event->poller = poller;
   3ec8e:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   3ec90:	f108 0801 	add.w	r8, r8, #1
   3ec94:	e7ce      	b.n	3ec34 <register_events+0xe8>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3ec96:	6923      	ldr	r3, [r4, #16]
   3ec98:	b963      	cbnz	r3, 3ecb4 <register_events+0x168>
   3ec9a:	4924      	ldr	r1, [pc, #144]	; (3ed2c <register_events+0x1e0>)
   3ec9c:	2379      	movs	r3, #121	; 0x79
   3ec9e:	4a1c      	ldr	r2, [pc, #112]	; (3ed10 <register_events+0x1c4>)
   3eca0:	4819      	ldr	r0, [pc, #100]	; (3ed08 <register_events+0x1bc>)
   3eca2:	f007 fcdb 	bl	4665c <printk>
   3eca6:	4822      	ldr	r0, [pc, #136]	; (3ed30 <register_events+0x1e4>)
   3eca8:	f007 fcd8 	bl	4665c <printk>
   3ecac:	2179      	movs	r1, #121	; 0x79
   3ecae:	4818      	ldr	r0, [pc, #96]	; (3ed10 <register_events+0x1c4>)
   3ecb0:	f007 fce1 	bl	46676 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   3ecb4:	6920      	ldr	r0, [r4, #16]
   3ecb6:	462a      	mov	r2, r5
   3ecb8:	4621      	mov	r1, r4
   3ecba:	300c      	adds	r0, #12
   3ecbc:	e7e5      	b.n	3ec8a <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3ecbe:	6923      	ldr	r3, [r4, #16]
   3ecc0:	b963      	cbnz	r3, 3ecdc <register_events+0x190>
   3ecc2:	491c      	ldr	r1, [pc, #112]	; (3ed34 <register_events+0x1e8>)
   3ecc4:	237d      	movs	r3, #125	; 0x7d
   3ecc6:	4a12      	ldr	r2, [pc, #72]	; (3ed10 <register_events+0x1c4>)
   3ecc8:	480f      	ldr	r0, [pc, #60]	; (3ed08 <register_events+0x1bc>)
   3ecca:	f007 fcc7 	bl	4665c <printk>
   3ecce:	481a      	ldr	r0, [pc, #104]	; (3ed38 <register_events+0x1ec>)
   3ecd0:	f007 fcc4 	bl	4665c <printk>
   3ecd4:	217d      	movs	r1, #125	; 0x7d
   3ecd6:	480e      	ldr	r0, [pc, #56]	; (3ed10 <register_events+0x1c4>)
   3ecd8:	f007 fccd 	bl	46676 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   3ecdc:	462a      	mov	r2, r5
   3ecde:	4621      	mov	r1, r4
   3ece0:	6920      	ldr	r0, [r4, #16]
   3ece2:	e7d2      	b.n	3ec8a <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   3ece4:	2384      	movs	r3, #132	; 0x84
   3ece6:	4a0a      	ldr	r2, [pc, #40]	; (3ed10 <register_events+0x1c4>)
   3ece8:	490a      	ldr	r1, [pc, #40]	; (3ed14 <register_events+0x1c8>)
   3ecea:	4807      	ldr	r0, [pc, #28]	; (3ed08 <register_events+0x1bc>)
   3ecec:	f007 fcb6 	bl	4665c <printk>
   3ecf0:	4812      	ldr	r0, [pc, #72]	; (3ed3c <register_events+0x1f0>)
   3ecf2:	f007 fcb3 	bl	4665c <printk>
   3ecf6:	2184      	movs	r1, #132	; 0x84
   3ecf8:	4805      	ldr	r0, [pc, #20]	; (3ed10 <register_events+0x1c4>)
   3ecfa:	f007 fcbc 	bl	46676 <assert_post_action>
   3ecfe:	e7c6      	b.n	3ec8e <register_events+0x142>
   3ed00:	0004bfcb 	.word	0x0004bfcb
   3ed04:	0004bff2 	.word	0x0004bff2
   3ed08:	0004b5bf 	.word	0x0004b5bf
   3ed0c:	0004c007 	.word	0x0004c007
   3ed10:	000509a0 	.word	0x000509a0
   3ed14:	000505de 	.word	0x000505de
   3ed18:	000509f7 	.word	0x000509f7
   3ed1c:	0004c01c 	.word	0x0004c01c
   3ed20:	0004c033 	.word	0x0004c033
   3ed24:	00050853 	.word	0x00050853
   3ed28:	0005086d 	.word	0x0005086d
   3ed2c:	00050882 	.word	0x00050882
   3ed30:	0005089e 	.word	0x0005089e
   3ed34:	000508af 	.word	0x000508af
   3ed38:	000508cc 	.word	0x000508cc
   3ed3c:	000508e3 	.word	0x000508e3
   3ed40:	2002a3f8 	.word	0x2002a3f8

0003ed44 <k_poll_event_init>:
{
   3ed44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ed46:	4604      	mov	r4, r0
   3ed48:	460f      	mov	r7, r1
   3ed4a:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   3ed4c:	4616      	mov	r6, r2
   3ed4e:	b162      	cbz	r2, 3ed6a <k_poll_event_init+0x26>
   3ed50:	491f      	ldr	r1, [pc, #124]	; (3edd0 <k_poll_event_init+0x8c>)
   3ed52:	232a      	movs	r3, #42	; 0x2a
   3ed54:	4a1f      	ldr	r2, [pc, #124]	; (3edd4 <k_poll_event_init+0x90>)
   3ed56:	4820      	ldr	r0, [pc, #128]	; (3edd8 <k_poll_event_init+0x94>)
   3ed58:	f007 fc80 	bl	4665c <printk>
   3ed5c:	481f      	ldr	r0, [pc, #124]	; (3eddc <k_poll_event_init+0x98>)
   3ed5e:	f007 fc7d 	bl	4665c <printk>
   3ed62:	212a      	movs	r1, #42	; 0x2a
   3ed64:	481b      	ldr	r0, [pc, #108]	; (3edd4 <k_poll_event_init+0x90>)
   3ed66:	f007 fc86 	bl	46676 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   3ed6a:	2f0f      	cmp	r7, #15
   3ed6c:	d90c      	bls.n	3ed88 <k_poll_event_init+0x44>
   3ed6e:	491c      	ldr	r1, [pc, #112]	; (3ede0 <k_poll_event_init+0x9c>)
   3ed70:	232b      	movs	r3, #43	; 0x2b
   3ed72:	4a18      	ldr	r2, [pc, #96]	; (3edd4 <k_poll_event_init+0x90>)
   3ed74:	4818      	ldr	r0, [pc, #96]	; (3edd8 <k_poll_event_init+0x94>)
   3ed76:	f007 fc71 	bl	4665c <printk>
   3ed7a:	481a      	ldr	r0, [pc, #104]	; (3ede4 <k_poll_event_init+0xa0>)
   3ed7c:	f007 fc6e 	bl	4665c <printk>
   3ed80:	212b      	movs	r1, #43	; 0x2b
   3ed82:	4814      	ldr	r0, [pc, #80]	; (3edd4 <k_poll_event_init+0x90>)
   3ed84:	f007 fc77 	bl	46676 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   3ed88:	b965      	cbnz	r5, 3eda4 <k_poll_event_init+0x60>
   3ed8a:	4917      	ldr	r1, [pc, #92]	; (3ede8 <k_poll_event_init+0xa4>)
   3ed8c:	232c      	movs	r3, #44	; 0x2c
   3ed8e:	4a11      	ldr	r2, [pc, #68]	; (3edd4 <k_poll_event_init+0x90>)
   3ed90:	4811      	ldr	r0, [pc, #68]	; (3edd8 <k_poll_event_init+0x94>)
   3ed92:	f007 fc63 	bl	4665c <printk>
   3ed96:	4815      	ldr	r0, [pc, #84]	; (3edec <k_poll_event_init+0xa8>)
   3ed98:	f007 fc60 	bl	4665c <printk>
   3ed9c:	212c      	movs	r1, #44	; 0x2c
   3ed9e:	480d      	ldr	r0, [pc, #52]	; (3edd4 <k_poll_event_init+0x90>)
   3eda0:	f007 fc69 	bl	46676 <assert_post_action>
	event->poller = NULL;
   3eda4:	2200      	movs	r2, #0
	event->type = type;
   3eda6:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
   3eda8:	60a2      	str	r2, [r4, #8]
	event->type = type;
   3edaa:	f367 0303 	bfi	r3, r7, #0, #4
   3edae:	7363      	strb	r3, [r4, #13]
	event->state = K_POLL_STATE_NOT_READY;
   3edb0:	68e3      	ldr	r3, [r4, #12]
	event->obj = obj;
   3edb2:	6125      	str	r5, [r4, #16]
	event->state = K_POLL_STATE_NOT_READY;
   3edb4:	f362 3310 	bfi	r3, r2, #12, #5
   3edb8:	60e3      	str	r3, [r4, #12]
	event->mode = mode;
   3edba:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3edbe:	f366 0341 	bfi	r3, r6, #1, #1
   3edc2:	73a3      	strb	r3, [r4, #14]
	event->unused = 0U;
   3edc4:	89e3      	ldrh	r3, [r4, #14]
   3edc6:	f362 038f 	bfi	r3, r2, #2, #14
   3edca:	81e3      	strh	r3, [r4, #14]
}
   3edcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3edce:	bf00      	nop
   3edd0:	000508f9 	.word	0x000508f9
   3edd4:	000509a0 	.word	0x000509a0
   3edd8:	0004b5bf 	.word	0x0004b5bf
   3eddc:	00050919 	.word	0x00050919
   3ede0:	0005093f 	.word	0x0005093f
   3ede4:	00050963 	.word	0x00050963
   3ede8:	00050973 	.word	0x00050973
   3edec:	00050986 	.word	0x00050986

0003edf0 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   3edf0:	2301      	movs	r3, #1
{
   3edf2:	b5f0      	push	{r4, r5, r6, r7, lr}
   3edf4:	b087      	sub	sp, #28
	struct _poller poller = { .is_polling = true,
   3edf6:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   3edfa:	4b70      	ldr	r3, [pc, #448]	; (3efbc <z_impl_k_poll+0x1cc>)
{
   3edfc:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   3edfe:	689b      	ldr	r3, [r3, #8]
{
   3ee00:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   3ee02:	9304      	str	r3, [sp, #16]
   3ee04:	4b6e      	ldr	r3, [pc, #440]	; (3efc0 <z_impl_k_poll+0x1d0>)
{
   3ee06:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   3ee08:	9305      	str	r3, [sp, #20]
   3ee0a:	f3ef 8305 	mrs	r3, IPSR
   3ee0e:	2b0d      	cmp	r3, #13
   3ee10:	d804      	bhi.n	3ee1c <z_impl_k_poll+0x2c>
   3ee12:	b183      	cbz	r3, 3ee36 <z_impl_k_poll+0x46>
   3ee14:	4b6b      	ldr	r3, [pc, #428]	; (3efc4 <z_impl_k_poll+0x1d4>)
   3ee16:	685b      	ldr	r3, [r3, #4]
   3ee18:	051b      	lsls	r3, r3, #20
   3ee1a:	d40c      	bmi.n	3ee36 <z_impl_k_poll+0x46>
				  .cb         = k_poll_poller_cb };

	__ASSERT(!z_arch_is_in_isr(), "");
   3ee1c:	496a      	ldr	r1, [pc, #424]	; (3efc8 <z_impl_k_poll+0x1d8>)
   3ee1e:	23ff      	movs	r3, #255	; 0xff
   3ee20:	4a6a      	ldr	r2, [pc, #424]	; (3efcc <z_impl_k_poll+0x1dc>)
   3ee22:	486b      	ldr	r0, [pc, #428]	; (3efd0 <z_impl_k_poll+0x1e0>)
   3ee24:	f007 fc1a 	bl	4665c <printk>
   3ee28:	486a      	ldr	r0, [pc, #424]	; (3efd4 <z_impl_k_poll+0x1e4>)
   3ee2a:	f007 fc17 	bl	4665c <printk>
   3ee2e:	21ff      	movs	r1, #255	; 0xff
   3ee30:	4866      	ldr	r0, [pc, #408]	; (3efcc <z_impl_k_poll+0x1dc>)
   3ee32:	f007 fc20 	bl	46676 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   3ee36:	b974      	cbnz	r4, 3ee56 <z_impl_k_poll+0x66>
   3ee38:	4967      	ldr	r1, [pc, #412]	; (3efd8 <z_impl_k_poll+0x1e8>)
   3ee3a:	f44f 7380 	mov.w	r3, #256	; 0x100
   3ee3e:	4a63      	ldr	r2, [pc, #396]	; (3efcc <z_impl_k_poll+0x1dc>)
   3ee40:	4863      	ldr	r0, [pc, #396]	; (3efd0 <z_impl_k_poll+0x1e0>)
   3ee42:	f007 fc0b 	bl	4665c <printk>
   3ee46:	4865      	ldr	r0, [pc, #404]	; (3efdc <z_impl_k_poll+0x1ec>)
   3ee48:	f007 fc08 	bl	4665c <printk>
   3ee4c:	f44f 7180 	mov.w	r1, #256	; 0x100
   3ee50:	485e      	ldr	r0, [pc, #376]	; (3efcc <z_impl_k_poll+0x1dc>)
   3ee52:	f007 fc10 	bl	46676 <assert_post_action>
	__ASSERT(num_events > 0, "zero events\n");
   3ee56:	2d00      	cmp	r5, #0
   3ee58:	dc0e      	bgt.n	3ee78 <z_impl_k_poll+0x88>
   3ee5a:	4961      	ldr	r1, [pc, #388]	; (3efe0 <z_impl_k_poll+0x1f0>)
   3ee5c:	f240 1301 	movw	r3, #257	; 0x101
   3ee60:	4a5a      	ldr	r2, [pc, #360]	; (3efcc <z_impl_k_poll+0x1dc>)
   3ee62:	485b      	ldr	r0, [pc, #364]	; (3efd0 <z_impl_k_poll+0x1e0>)
   3ee64:	f007 fbfa 	bl	4665c <printk>
   3ee68:	485e      	ldr	r0, [pc, #376]	; (3efe4 <z_impl_k_poll+0x1f4>)
   3ee6a:	f007 fbf7 	bl	4665c <printk>
   3ee6e:	f240 1101 	movw	r1, #257	; 0x101
   3ee72:	4856      	ldr	r0, [pc, #344]	; (3efcc <z_impl_k_poll+0x1dc>)
   3ee74:	f007 fbff 	bl	46676 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   3ee78:	fab6 f386 	clz	r3, r6
   3ee7c:	aa03      	add	r2, sp, #12
   3ee7e:	095b      	lsrs	r3, r3, #5
   3ee80:	4629      	mov	r1, r5
   3ee82:	4620      	mov	r0, r4
   3ee84:	f7ff fe62 	bl	3eb4c <register_events>
   3ee88:	4607      	mov	r7, r0
	__asm__ volatile(
   3ee8a:	f04f 0320 	mov.w	r3, #32
   3ee8e:	f3ef 8511 	mrs	r5, BASEPRI
   3ee92:	f383 8811 	msr	BASEPRI, r3
   3ee96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3ee9a:	4853      	ldr	r0, [pc, #332]	; (3efe8 <z_impl_k_poll+0x1f8>)
   3ee9c:	f7fe ff70 	bl	3dd80 <z_spin_lock_valid>
   3eea0:	b960      	cbnz	r0, 3eebc <z_impl_k_poll+0xcc>
   3eea2:	4952      	ldr	r1, [pc, #328]	; (3efec <z_impl_k_poll+0x1fc>)
   3eea4:	235f      	movs	r3, #95	; 0x5f
   3eea6:	4a52      	ldr	r2, [pc, #328]	; (3eff0 <z_impl_k_poll+0x200>)
   3eea8:	4849      	ldr	r0, [pc, #292]	; (3efd0 <z_impl_k_poll+0x1e0>)
   3eeaa:	f007 fbd7 	bl	4665c <printk>
   3eeae:	4851      	ldr	r0, [pc, #324]	; (3eff4 <z_impl_k_poll+0x204>)
   3eeb0:	f007 fbd4 	bl	4665c <printk>
   3eeb4:	215f      	movs	r1, #95	; 0x5f
   3eeb6:	484e      	ldr	r0, [pc, #312]	; (3eff0 <z_impl_k_poll+0x200>)
   3eeb8:	f007 fbdd 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3eebc:	484a      	ldr	r0, [pc, #296]	; (3efe8 <z_impl_k_poll+0x1f8>)
   3eebe:	f7fe ff7d 	bl	3ddbc <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   3eec2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   3eec6:	b9eb      	cbnz	r3, 3ef04 <z_impl_k_poll+0x114>
		clear_event_registrations(events, events_registered, key);
   3eec8:	4620      	mov	r0, r4
   3eeca:	462a      	mov	r2, r5
   3eecc:	4639      	mov	r1, r7
   3eece:	f7ff fd85 	bl	3e9dc <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3eed2:	4845      	ldr	r0, [pc, #276]	; (3efe8 <z_impl_k_poll+0x1f8>)
   3eed4:	f7fe ff62 	bl	3dd9c <z_spin_unlock_valid>
   3eed8:	b960      	cbnz	r0, 3eef4 <z_impl_k_poll+0x104>
   3eeda:	4947      	ldr	r1, [pc, #284]	; (3eff8 <z_impl_k_poll+0x208>)
   3eedc:	2372      	movs	r3, #114	; 0x72
   3eede:	4a44      	ldr	r2, [pc, #272]	; (3eff0 <z_impl_k_poll+0x200>)
   3eee0:	483b      	ldr	r0, [pc, #236]	; (3efd0 <z_impl_k_poll+0x1e0>)
   3eee2:	f007 fbbb 	bl	4665c <printk>
   3eee6:	4845      	ldr	r0, [pc, #276]	; (3effc <z_impl_k_poll+0x20c>)
   3eee8:	f007 fbb8 	bl	4665c <printk>
   3eeec:	2172      	movs	r1, #114	; 0x72
   3eeee:	4840      	ldr	r0, [pc, #256]	; (3eff0 <z_impl_k_poll+0x200>)
   3eef0:	f007 fbc1 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3eef4:	f385 8811 	msr	BASEPRI, r5
   3eef8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   3eefc:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   3eefe:	4628      	mov	r0, r5
   3ef00:	b007      	add	sp, #28
   3ef02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   3ef04:	2300      	movs	r3, #0
   3ef06:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   3ef0a:	b9be      	cbnz	r6, 3ef3c <z_impl_k_poll+0x14c>
   3ef0c:	4836      	ldr	r0, [pc, #216]	; (3efe8 <z_impl_k_poll+0x1f8>)
   3ef0e:	f7fe ff45 	bl	3dd9c <z_spin_unlock_valid>
   3ef12:	b960      	cbnz	r0, 3ef2e <z_impl_k_poll+0x13e>
   3ef14:	4938      	ldr	r1, [pc, #224]	; (3eff8 <z_impl_k_poll+0x208>)
   3ef16:	2372      	movs	r3, #114	; 0x72
   3ef18:	4a35      	ldr	r2, [pc, #212]	; (3eff0 <z_impl_k_poll+0x200>)
   3ef1a:	482d      	ldr	r0, [pc, #180]	; (3efd0 <z_impl_k_poll+0x1e0>)
   3ef1c:	f007 fb9e 	bl	4665c <printk>
   3ef20:	4836      	ldr	r0, [pc, #216]	; (3effc <z_impl_k_poll+0x20c>)
   3ef22:	f007 fb9b 	bl	4665c <printk>
   3ef26:	2172      	movs	r1, #114	; 0x72
   3ef28:	4831      	ldr	r0, [pc, #196]	; (3eff0 <z_impl_k_poll+0x200>)
   3ef2a:	f007 fba4 	bl	46676 <assert_post_action>
   3ef2e:	f385 8811 	msr	BASEPRI, r5
   3ef32:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   3ef36:	f06f 050a 	mvn.w	r5, #10
   3ef3a:	e7e0      	b.n	3eefe <z_impl_k_poll+0x10e>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   3ef3c:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3ef3e:	4629      	mov	r1, r5
   3ef40:	4633      	mov	r3, r6
   3ef42:	4829      	ldr	r0, [pc, #164]	; (3efe8 <z_impl_k_poll+0x1f8>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   3ef44:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3ef48:	f7fe fb24 	bl	3d594 <z_pend_curr>
   3ef4c:	4605      	mov	r5, r0
	__asm__ volatile(
   3ef4e:	f04f 0320 	mov.w	r3, #32
   3ef52:	f3ef 8611 	mrs	r6, BASEPRI
   3ef56:	f383 8811 	msr	BASEPRI, r3
   3ef5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3ef5e:	4822      	ldr	r0, [pc, #136]	; (3efe8 <z_impl_k_poll+0x1f8>)
   3ef60:	f7fe ff0e 	bl	3dd80 <z_spin_lock_valid>
   3ef64:	b960      	cbnz	r0, 3ef80 <z_impl_k_poll+0x190>
   3ef66:	4921      	ldr	r1, [pc, #132]	; (3efec <z_impl_k_poll+0x1fc>)
   3ef68:	235f      	movs	r3, #95	; 0x5f
   3ef6a:	4a21      	ldr	r2, [pc, #132]	; (3eff0 <z_impl_k_poll+0x200>)
   3ef6c:	4818      	ldr	r0, [pc, #96]	; (3efd0 <z_impl_k_poll+0x1e0>)
   3ef6e:	f007 fb75 	bl	4665c <printk>
   3ef72:	4820      	ldr	r0, [pc, #128]	; (3eff4 <z_impl_k_poll+0x204>)
   3ef74:	f007 fb72 	bl	4665c <printk>
   3ef78:	215f      	movs	r1, #95	; 0x5f
   3ef7a:	481d      	ldr	r0, [pc, #116]	; (3eff0 <z_impl_k_poll+0x200>)
   3ef7c:	f007 fb7b 	bl	46676 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ef80:	4819      	ldr	r0, [pc, #100]	; (3efe8 <z_impl_k_poll+0x1f8>)
   3ef82:	f7fe ff1b 	bl	3ddbc <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   3ef86:	4620      	mov	r0, r4
   3ef88:	4632      	mov	r2, r6
   3ef8a:	4639      	mov	r1, r7
   3ef8c:	f7ff fd26 	bl	3e9dc <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3ef90:	4815      	ldr	r0, [pc, #84]	; (3efe8 <z_impl_k_poll+0x1f8>)
   3ef92:	f7fe ff03 	bl	3dd9c <z_spin_unlock_valid>
   3ef96:	b960      	cbnz	r0, 3efb2 <z_impl_k_poll+0x1c2>
   3ef98:	4917      	ldr	r1, [pc, #92]	; (3eff8 <z_impl_k_poll+0x208>)
   3ef9a:	2372      	movs	r3, #114	; 0x72
   3ef9c:	4a14      	ldr	r2, [pc, #80]	; (3eff0 <z_impl_k_poll+0x200>)
   3ef9e:	480c      	ldr	r0, [pc, #48]	; (3efd0 <z_impl_k_poll+0x1e0>)
   3efa0:	f007 fb5c 	bl	4665c <printk>
   3efa4:	4815      	ldr	r0, [pc, #84]	; (3effc <z_impl_k_poll+0x20c>)
   3efa6:	f007 fb59 	bl	4665c <printk>
   3efaa:	2172      	movs	r1, #114	; 0x72
   3efac:	4810      	ldr	r0, [pc, #64]	; (3eff0 <z_impl_k_poll+0x200>)
   3efae:	f007 fb62 	bl	46676 <assert_post_action>
	__asm__ volatile(
   3efb2:	f386 8811 	msr	BASEPRI, r6
   3efb6:	f3bf 8f6f 	isb	sy
	return swap_rc;
   3efba:	e7a0      	b.n	3eefe <z_impl_k_poll+0x10e>
   3efbc:	2002a2dc 	.word	0x2002a2dc
   3efc0:	0003e96d 	.word	0x0003e96d
   3efc4:	e000ed00 	.word	0xe000ed00
   3efc8:	0005057c 	.word	0x0005057c
   3efcc:	000509a0 	.word	0x000509a0
   3efd0:	0004b5bf 	.word	0x0004b5bf
   3efd4:	00050481 	.word	0x00050481
   3efd8:	00050a14 	.word	0x00050a14
   3efdc:	00050a2a 	.word	0x00050a2a
   3efe0:	00050a39 	.word	0x00050a39
   3efe4:	00050a48 	.word	0x00050a48
   3efe8:	2002a3f8 	.word	0x2002a3f8
   3efec:	0004bff2 	.word	0x0004bff2
   3eff0:	0004bfcb 	.word	0x0004bfcb
   3eff4:	0004c007 	.word	0x0004c007
   3eff8:	0004c01c 	.word	0x0004c01c
   3effc:	0004c033 	.word	0x0004c033

0003f000 <ocrypto_ecdsa_p256_public_key>:
   3f000:	b530      	push	{r4, r5, lr}
   3f002:	b099      	sub	sp, #100	; 0x64
   3f004:	4605      	mov	r5, r0
   3f006:	4668      	mov	r0, sp
   3f008:	f000 f8f2 	bl	3f1f0 <ocrypto_sc_p256_from32bytes>
   3f00c:	4669      	mov	r1, sp
   3f00e:	a808      	add	r0, sp, #32
   3f010:	f000 fae6 	bl	3f5e0 <ocrypto_curve_p256_scalarmult_base>
   3f014:	4604      	mov	r4, r0
   3f016:	a908      	add	r1, sp, #32
   3f018:	4628      	mov	r0, r5
   3f01a:	f000 fa21 	bl	3f460 <ocrypto_curve_p256_to64bytes>
   3f01e:	4620      	mov	r0, r4
   3f020:	b019      	add	sp, #100	; 0x64
   3f022:	bd30      	pop	{r4, r5, pc}

0003f024 <ocrypto_mod_p256_cneg>:
   3f024:	b570      	push	{r4, r5, r6, lr}
   3f026:	b088      	sub	sp, #32
   3f028:	4604      	mov	r4, r0
   3f02a:	460d      	mov	r5, r1
   3f02c:	4668      	mov	r0, sp
   3f02e:	2120      	movs	r1, #32
   3f030:	4616      	mov	r6, r2
   3f032:	f7da fbc8 	bl	197c6 <ocrypto_constant_time_fill_zero>
   3f036:	2300      	movs	r3, #0
   3f038:	4629      	mov	r1, r5
   3f03a:	4620      	mov	r0, r4
   3f03c:	2220      	movs	r2, #32
   3f03e:	9300      	str	r3, [sp, #0]
   3f040:	f7da fbba 	bl	197b8 <ocrypto_constant_time_copy>
   3f044:	462a      	mov	r2, r5
   3f046:	4669      	mov	r1, sp
   3f048:	4668      	mov	r0, sp
   3f04a:	f7da fc02 	bl	19852 <ocrypto_mod_p256_sub>
   3f04e:	4632      	mov	r2, r6
   3f050:	4669      	mov	r1, sp
   3f052:	4620      	mov	r0, r4
   3f054:	f7da f90d 	bl	19272 <ocrypto_bigint_cswap256>
   3f058:	b008      	add	sp, #32
   3f05a:	bd70      	pop	{r4, r5, r6, pc}

0003f05c <ocrypto_mod_p256_toBytes>:
   3f05c:	69cb      	ldr	r3, [r1, #28]
   3f05e:	ba1b      	rev	r3, r3
   3f060:	6003      	str	r3, [r0, #0]
   3f062:	698b      	ldr	r3, [r1, #24]
   3f064:	ba1b      	rev	r3, r3
   3f066:	6043      	str	r3, [r0, #4]
   3f068:	694b      	ldr	r3, [r1, #20]
   3f06a:	ba1b      	rev	r3, r3
   3f06c:	6083      	str	r3, [r0, #8]
   3f06e:	690b      	ldr	r3, [r1, #16]
   3f070:	ba1b      	rev	r3, r3
   3f072:	60c3      	str	r3, [r0, #12]
   3f074:	68cb      	ldr	r3, [r1, #12]
   3f076:	ba1b      	rev	r3, r3
   3f078:	6103      	str	r3, [r0, #16]
   3f07a:	688b      	ldr	r3, [r1, #8]
   3f07c:	ba1b      	rev	r3, r3
   3f07e:	6143      	str	r3, [r0, #20]
   3f080:	684b      	ldr	r3, [r1, #4]
   3f082:	ba1b      	rev	r3, r3
   3f084:	6183      	str	r3, [r0, #24]
   3f086:	680b      	ldr	r3, [r1, #0]
   3f088:	ba1b      	rev	r3, r3
   3f08a:	61c3      	str	r3, [r0, #28]
   3f08c:	4770      	bx	lr
   3f08e:	bf00      	nop

0003f090 <ocrypto_mod_p256_invert>:
   3f090:	b570      	push	{r4, r5, r6, lr}
   3f092:	460d      	mov	r5, r1
   3f094:	2405      	movs	r4, #5
   3f096:	b098      	sub	sp, #96	; 0x60
   3f098:	4606      	mov	r6, r0
   3f09a:	a810      	add	r0, sp, #64	; 0x40
   3f09c:	f7da fc06 	bl	198ac <ocrypto_mod_p256_square>
   3f0a0:	462a      	mov	r2, r5
   3f0a2:	a910      	add	r1, sp, #64	; 0x40
   3f0a4:	4668      	mov	r0, sp
   3f0a6:	f7da fc02 	bl	198ae <ocrypto_mod_p256_mul>
   3f0aa:	4669      	mov	r1, sp
   3f0ac:	a810      	add	r0, sp, #64	; 0x40
   3f0ae:	f7da fbfd 	bl	198ac <ocrypto_mod_p256_square>
   3f0b2:	a910      	add	r1, sp, #64	; 0x40
   3f0b4:	4608      	mov	r0, r1
   3f0b6:	f7da fbf9 	bl	198ac <ocrypto_mod_p256_square>
   3f0ba:	466a      	mov	r2, sp
   3f0bc:	a910      	add	r1, sp, #64	; 0x40
   3f0be:	a808      	add	r0, sp, #32
   3f0c0:	f7da fbf5 	bl	198ae <ocrypto_mod_p256_mul>
   3f0c4:	a908      	add	r1, sp, #32
   3f0c6:	a810      	add	r0, sp, #64	; 0x40
   3f0c8:	f7da fbf0 	bl	198ac <ocrypto_mod_p256_square>
   3f0cc:	a910      	add	r1, sp, #64	; 0x40
   3f0ce:	4608      	mov	r0, r1
   3f0d0:	f7da fbec 	bl	198ac <ocrypto_mod_p256_square>
   3f0d4:	a910      	add	r1, sp, #64	; 0x40
   3f0d6:	4608      	mov	r0, r1
   3f0d8:	f7da fbe8 	bl	198ac <ocrypto_mod_p256_square>
   3f0dc:	a910      	add	r1, sp, #64	; 0x40
   3f0de:	4608      	mov	r0, r1
   3f0e0:	f7da fbe4 	bl	198ac <ocrypto_mod_p256_square>
   3f0e4:	a910      	add	r1, sp, #64	; 0x40
   3f0e6:	aa08      	add	r2, sp, #32
   3f0e8:	4608      	mov	r0, r1
   3f0ea:	f7da fbe0 	bl	198ae <ocrypto_mod_p256_mul>
   3f0ee:	a910      	add	r1, sp, #64	; 0x40
   3f0f0:	4608      	mov	r0, r1
   3f0f2:	f7da fbdb 	bl	198ac <ocrypto_mod_p256_square>
   3f0f6:	a910      	add	r1, sp, #64	; 0x40
   3f0f8:	4608      	mov	r0, r1
   3f0fa:	f7da fbd7 	bl	198ac <ocrypto_mod_p256_square>
   3f0fe:	a910      	add	r1, sp, #64	; 0x40
   3f100:	466a      	mov	r2, sp
   3f102:	a808      	add	r0, sp, #32
   3f104:	f7da fbd3 	bl	198ae <ocrypto_mod_p256_mul>
   3f108:	a908      	add	r1, sp, #32
   3f10a:	a810      	add	r0, sp, #64	; 0x40
   3f10c:	f7da fbce 	bl	198ac <ocrypto_mod_p256_square>
   3f110:	a910      	add	r1, sp, #64	; 0x40
   3f112:	4608      	mov	r0, r1
   3f114:	f7da fbca 	bl	198ac <ocrypto_mod_p256_square>
   3f118:	3c01      	subs	r4, #1
   3f11a:	a910      	add	r1, sp, #64	; 0x40
   3f11c:	d1f5      	bne.n	3f10a <ocrypto_mod_p256_invert+0x7a>
   3f11e:	aa08      	add	r2, sp, #32
   3f120:	4608      	mov	r0, r1
   3f122:	f7da fbc4 	bl	198ae <ocrypto_mod_p256_mul>
   3f126:	2405      	movs	r4, #5
   3f128:	a910      	add	r1, sp, #64	; 0x40
   3f12a:	4608      	mov	r0, r1
   3f12c:	f7da fbbe 	bl	198ac <ocrypto_mod_p256_square>
   3f130:	a910      	add	r1, sp, #64	; 0x40
   3f132:	4608      	mov	r0, r1
   3f134:	f7da fbba 	bl	198ac <ocrypto_mod_p256_square>
   3f138:	3c01      	subs	r4, #1
   3f13a:	d1f5      	bne.n	3f128 <ocrypto_mod_p256_invert+0x98>
   3f13c:	a910      	add	r1, sp, #64	; 0x40
   3f13e:	aa08      	add	r2, sp, #32
   3f140:	4608      	mov	r0, r1
   3f142:	f7da fbb4 	bl	198ae <ocrypto_mod_p256_mul>
   3f146:	a910      	add	r1, sp, #64	; 0x40
   3f148:	a808      	add	r0, sp, #32
   3f14a:	f7da fbaf 	bl	198ac <ocrypto_mod_p256_square>
   3f14e:	a908      	add	r1, sp, #32
   3f150:	4608      	mov	r0, r1
   3f152:	f7da fbab 	bl	198ac <ocrypto_mod_p256_square>
   3f156:	a908      	add	r1, sp, #32
   3f158:	466a      	mov	r2, sp
   3f15a:	4668      	mov	r0, sp
   3f15c:	f7da fba7 	bl	198ae <ocrypto_mod_p256_mul>
   3f160:	2410      	movs	r4, #16
   3f162:	4669      	mov	r1, sp
   3f164:	a810      	add	r0, sp, #64	; 0x40
   3f166:	f7da fba1 	bl	198ac <ocrypto_mod_p256_square>
   3f16a:	a910      	add	r1, sp, #64	; 0x40
   3f16c:	4608      	mov	r0, r1
   3f16e:	f7da fb9d 	bl	198ac <ocrypto_mod_p256_square>
   3f172:	3c01      	subs	r4, #1
   3f174:	a910      	add	r1, sp, #64	; 0x40
   3f176:	d1f5      	bne.n	3f164 <ocrypto_mod_p256_invert+0xd4>
   3f178:	462a      	mov	r2, r5
   3f17a:	4608      	mov	r0, r1
   3f17c:	f7da fb97 	bl	198ae <ocrypto_mod_p256_mul>
   3f180:	2440      	movs	r4, #64	; 0x40
   3f182:	a910      	add	r1, sp, #64	; 0x40
   3f184:	4608      	mov	r0, r1
   3f186:	f7da fb91 	bl	198ac <ocrypto_mod_p256_square>
   3f18a:	a910      	add	r1, sp, #64	; 0x40
   3f18c:	4608      	mov	r0, r1
   3f18e:	f7da fb8d 	bl	198ac <ocrypto_mod_p256_square>
   3f192:	3c01      	subs	r4, #1
   3f194:	d1f5      	bne.n	3f182 <ocrypto_mod_p256_invert+0xf2>
   3f196:	a910      	add	r1, sp, #64	; 0x40
   3f198:	466a      	mov	r2, sp
   3f19a:	4608      	mov	r0, r1
   3f19c:	f7da fb87 	bl	198ae <ocrypto_mod_p256_mul>
   3f1a0:	2410      	movs	r4, #16
   3f1a2:	a910      	add	r1, sp, #64	; 0x40
   3f1a4:	4608      	mov	r0, r1
   3f1a6:	f7da fb81 	bl	198ac <ocrypto_mod_p256_square>
   3f1aa:	a910      	add	r1, sp, #64	; 0x40
   3f1ac:	4608      	mov	r0, r1
   3f1ae:	f7da fb7d 	bl	198ac <ocrypto_mod_p256_square>
   3f1b2:	3c01      	subs	r4, #1
   3f1b4:	d1f5      	bne.n	3f1a2 <ocrypto_mod_p256_invert+0x112>
   3f1b6:	a910      	add	r1, sp, #64	; 0x40
   3f1b8:	466a      	mov	r2, sp
   3f1ba:	4608      	mov	r0, r1
   3f1bc:	f7da fb77 	bl	198ae <ocrypto_mod_p256_mul>
   3f1c0:	2410      	movs	r4, #16
   3f1c2:	a910      	add	r1, sp, #64	; 0x40
   3f1c4:	4608      	mov	r0, r1
   3f1c6:	f7da fb71 	bl	198ac <ocrypto_mod_p256_square>
   3f1ca:	a910      	add	r1, sp, #64	; 0x40
   3f1cc:	4608      	mov	r0, r1
   3f1ce:	f7da fb6d 	bl	198ac <ocrypto_mod_p256_square>
   3f1d2:	3c01      	subs	r4, #1
   3f1d4:	d1f5      	bne.n	3f1c2 <ocrypto_mod_p256_invert+0x132>
   3f1d6:	a910      	add	r1, sp, #64	; 0x40
   3f1d8:	aa08      	add	r2, sp, #32
   3f1da:	4608      	mov	r0, r1
   3f1dc:	f7da fb67 	bl	198ae <ocrypto_mod_p256_mul>
   3f1e0:	462a      	mov	r2, r5
   3f1e2:	a910      	add	r1, sp, #64	; 0x40
   3f1e4:	4630      	mov	r0, r6
   3f1e6:	f7da fb62 	bl	198ae <ocrypto_mod_p256_mul>
   3f1ea:	b018      	add	sp, #96	; 0x60
   3f1ec:	bd70      	pop	{r4, r5, r6, pc}
   3f1ee:	bf00      	nop

0003f1f0 <ocrypto_sc_p256_from32bytes>:
   3f1f0:	b538      	push	{r3, r4, r5, lr}
   3f1f2:	460b      	mov	r3, r1
   3f1f4:	680a      	ldr	r2, [r1, #0]
   3f1f6:	4d12      	ldr	r5, [pc, #72]	; (3f240 <ocrypto_sc_p256_from32bytes+0x50>)
   3f1f8:	ba12      	rev	r2, r2
   3f1fa:	61c2      	str	r2, [r0, #28]
   3f1fc:	684a      	ldr	r2, [r1, #4]
   3f1fe:	4601      	mov	r1, r0
   3f200:	ba12      	rev	r2, r2
   3f202:	6182      	str	r2, [r0, #24]
   3f204:	689a      	ldr	r2, [r3, #8]
   3f206:	4604      	mov	r4, r0
   3f208:	ba12      	rev	r2, r2
   3f20a:	6142      	str	r2, [r0, #20]
   3f20c:	68da      	ldr	r2, [r3, #12]
   3f20e:	ba12      	rev	r2, r2
   3f210:	6102      	str	r2, [r0, #16]
   3f212:	691a      	ldr	r2, [r3, #16]
   3f214:	ba12      	rev	r2, r2
   3f216:	60c2      	str	r2, [r0, #12]
   3f218:	695a      	ldr	r2, [r3, #20]
   3f21a:	ba12      	rev	r2, r2
   3f21c:	6082      	str	r2, [r0, #8]
   3f21e:	699a      	ldr	r2, [r3, #24]
   3f220:	ba12      	rev	r2, r2
   3f222:	6042      	str	r2, [r0, #4]
   3f224:	69db      	ldr	r3, [r3, #28]
   3f226:	462a      	mov	r2, r5
   3f228:	ba1b      	rev	r3, r3
   3f22a:	6003      	str	r3, [r0, #0]
   3f22c:	f7d9 ff96 	bl	1915c <ocrypto_bigint_sub256>
   3f230:	4629      	mov	r1, r5
   3f232:	4602      	mov	r2, r0
   3f234:	4620      	mov	r0, r4
   3f236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3f23a:	f7d9 bfaf 	b.w	1919c <ocrypto_bigint_cadd256>
   3f23e:	bf00      	nop
   3f240:	0004ac74 	.word	0x0004ac74

0003f244 <p256_zdblu>:
   3f244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f248:	4607      	mov	r7, r0
   3f24a:	460d      	mov	r5, r1
   3f24c:	4690      	mov	r8, r2
   3f24e:	b088      	sub	sp, #32
   3f250:	f102 0120 	add.w	r1, r2, #32
   3f254:	4668      	mov	r0, sp
   3f256:	f107 0620 	add.w	r6, r7, #32
   3f25a:	f7da fb27 	bl	198ac <ocrypto_mod_p256_square>
   3f25e:	466a      	mov	r2, sp
   3f260:	4669      	mov	r1, sp
   3f262:	4668      	mov	r0, sp
   3f264:	f7da fab6 	bl	197d4 <ocrypto_mod_p256_add>
   3f268:	4630      	mov	r0, r6
   3f26a:	4669      	mov	r1, sp
   3f26c:	f7da fb1e 	bl	198ac <ocrypto_mod_p256_square>
   3f270:	4632      	mov	r2, r6
   3f272:	4631      	mov	r1, r6
   3f274:	4630      	mov	r0, r6
   3f276:	f105 0420 	add.w	r4, r5, #32
   3f27a:	f7da faab 	bl	197d4 <ocrypto_mod_p256_add>
   3f27e:	466a      	mov	r2, sp
   3f280:	4669      	mov	r1, sp
   3f282:	4668      	mov	r0, sp
   3f284:	f7da faa6 	bl	197d4 <ocrypto_mod_p256_add>
   3f288:	4620      	mov	r0, r4
   3f28a:	4641      	mov	r1, r8
   3f28c:	f7da fb0e 	bl	198ac <ocrypto_mod_p256_square>
   3f290:	466a      	mov	r2, sp
   3f292:	4641      	mov	r1, r8
   3f294:	4638      	mov	r0, r7
   3f296:	f7da fb0a 	bl	198ae <ocrypto_mod_p256_mul>
   3f29a:	4622      	mov	r2, r4
   3f29c:	4621      	mov	r1, r4
   3f29e:	4668      	mov	r0, sp
   3f2a0:	f7da fa98 	bl	197d4 <ocrypto_mod_p256_add>
   3f2a4:	4622      	mov	r2, r4
   3f2a6:	4669      	mov	r1, sp
   3f2a8:	4668      	mov	r0, sp
   3f2aa:	f7da fa93 	bl	197d4 <ocrypto_mod_p256_add>
   3f2ae:	4669      	mov	r1, sp
   3f2b0:	4668      	mov	r0, sp
   3f2b2:	4a11      	ldr	r2, [pc, #68]	; (3f2f8 <p256_zdblu+0xb4>)
   3f2b4:	f7da fa8e 	bl	197d4 <ocrypto_mod_p256_add>
   3f2b8:	4669      	mov	r1, sp
   3f2ba:	4628      	mov	r0, r5
   3f2bc:	f7da faf6 	bl	198ac <ocrypto_mod_p256_square>
   3f2c0:	463a      	mov	r2, r7
   3f2c2:	4629      	mov	r1, r5
   3f2c4:	4628      	mov	r0, r5
   3f2c6:	f7da fac4 	bl	19852 <ocrypto_mod_p256_sub>
   3f2ca:	463a      	mov	r2, r7
   3f2cc:	4629      	mov	r1, r5
   3f2ce:	4628      	mov	r0, r5
   3f2d0:	f7da fabf 	bl	19852 <ocrypto_mod_p256_sub>
   3f2d4:	462a      	mov	r2, r5
   3f2d6:	4639      	mov	r1, r7
   3f2d8:	4620      	mov	r0, r4
   3f2da:	f7da faba 	bl	19852 <ocrypto_mod_p256_sub>
   3f2de:	466a      	mov	r2, sp
   3f2e0:	4621      	mov	r1, r4
   3f2e2:	4620      	mov	r0, r4
   3f2e4:	f7da fae3 	bl	198ae <ocrypto_mod_p256_mul>
   3f2e8:	4632      	mov	r2, r6
   3f2ea:	4621      	mov	r1, r4
   3f2ec:	4620      	mov	r0, r4
   3f2ee:	f7da fab0 	bl	19852 <ocrypto_mod_p256_sub>
   3f2f2:	b008      	add	sp, #32
   3f2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3f2f8:	0004ad14 	.word	0x0004ad14

0003f2fc <p256_zaddc>:
   3f2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   3f2fe:	4604      	mov	r4, r0
   3f300:	460e      	mov	r6, r1
   3f302:	b099      	sub	sp, #100	; 0x64
   3f304:	460a      	mov	r2, r1
   3f306:	4601      	mov	r1, r0
   3f308:	4668      	mov	r0, sp
   3f30a:	f7da faa2 	bl	19852 <ocrypto_mod_p256_sub>
   3f30e:	4669      	mov	r1, sp
   3f310:	4668      	mov	r0, sp
   3f312:	f7da facb 	bl	198ac <ocrypto_mod_p256_square>
   3f316:	466a      	mov	r2, sp
   3f318:	4621      	mov	r1, r4
   3f31a:	a808      	add	r0, sp, #32
   3f31c:	f106 0520 	add.w	r5, r6, #32
   3f320:	f104 0720 	add.w	r7, r4, #32
   3f324:	f7da fac3 	bl	198ae <ocrypto_mod_p256_mul>
   3f328:	466a      	mov	r2, sp
   3f32a:	4631      	mov	r1, r6
   3f32c:	4668      	mov	r0, sp
   3f32e:	f7da fabe 	bl	198ae <ocrypto_mod_p256_mul>
   3f332:	4639      	mov	r1, r7
   3f334:	462a      	mov	r2, r5
   3f336:	a810      	add	r0, sp, #64	; 0x40
   3f338:	f7da fa4c 	bl	197d4 <ocrypto_mod_p256_add>
   3f33c:	462a      	mov	r2, r5
   3f33e:	4639      	mov	r1, r7
   3f340:	4628      	mov	r0, r5
   3f342:	f7da fa86 	bl	19852 <ocrypto_mod_p256_sub>
   3f346:	4629      	mov	r1, r5
   3f348:	4630      	mov	r0, r6
   3f34a:	f7da faaf 	bl	198ac <ocrypto_mod_p256_square>
   3f34e:	466a      	mov	r2, sp
   3f350:	a908      	add	r1, sp, #32
   3f352:	4620      	mov	r0, r4
   3f354:	f7da fa3e 	bl	197d4 <ocrypto_mod_p256_add>
   3f358:	4622      	mov	r2, r4
   3f35a:	4631      	mov	r1, r6
   3f35c:	4630      	mov	r0, r6
   3f35e:	f7da fa78 	bl	19852 <ocrypto_mod_p256_sub>
   3f362:	466a      	mov	r2, sp
   3f364:	a908      	add	r1, sp, #32
   3f366:	4668      	mov	r0, sp
   3f368:	f7da fa73 	bl	19852 <ocrypto_mod_p256_sub>
   3f36c:	466a      	mov	r2, sp
   3f36e:	4639      	mov	r1, r7
   3f370:	4638      	mov	r0, r7
   3f372:	f7da fa9c 	bl	198ae <ocrypto_mod_p256_mul>
   3f376:	4632      	mov	r2, r6
   3f378:	a908      	add	r1, sp, #32
   3f37a:	4668      	mov	r0, sp
   3f37c:	f7da fa69 	bl	19852 <ocrypto_mod_p256_sub>
   3f380:	466a      	mov	r2, sp
   3f382:	4629      	mov	r1, r5
   3f384:	4628      	mov	r0, r5
   3f386:	f7da fa92 	bl	198ae <ocrypto_mod_p256_mul>
   3f38a:	463a      	mov	r2, r7
   3f38c:	4629      	mov	r1, r5
   3f38e:	4628      	mov	r0, r5
   3f390:	f7da fa5f 	bl	19852 <ocrypto_mod_p256_sub>
   3f394:	a910      	add	r1, sp, #64	; 0x40
   3f396:	4668      	mov	r0, sp
   3f398:	f7da fa88 	bl	198ac <ocrypto_mod_p256_square>
   3f39c:	4622      	mov	r2, r4
   3f39e:	4669      	mov	r1, sp
   3f3a0:	4620      	mov	r0, r4
   3f3a2:	f7da fa56 	bl	19852 <ocrypto_mod_p256_sub>
   3f3a6:	a908      	add	r1, sp, #32
   3f3a8:	4622      	mov	r2, r4
   3f3aa:	4608      	mov	r0, r1
   3f3ac:	f7da fa51 	bl	19852 <ocrypto_mod_p256_sub>
   3f3b0:	a910      	add	r1, sp, #64	; 0x40
   3f3b2:	aa08      	add	r2, sp, #32
   3f3b4:	4608      	mov	r0, r1
   3f3b6:	f7da fa7a 	bl	198ae <ocrypto_mod_p256_mul>
   3f3ba:	463a      	mov	r2, r7
   3f3bc:	a910      	add	r1, sp, #64	; 0x40
   3f3be:	4638      	mov	r0, r7
   3f3c0:	f7da fa47 	bl	19852 <ocrypto_mod_p256_sub>
   3f3c4:	b019      	add	sp, #100	; 0x64
   3f3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003f3c8 <p256_zaddu>:
   3f3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f3cc:	460c      	mov	r4, r1
   3f3ce:	4605      	mov	r5, r0
   3f3d0:	4690      	mov	r8, r2
   3f3d2:	b088      	sub	sp, #32
   3f3d4:	4622      	mov	r2, r4
   3f3d6:	4601      	mov	r1, r0
   3f3d8:	4668      	mov	r0, sp
   3f3da:	f7da fa3a 	bl	19852 <ocrypto_mod_p256_sub>
   3f3de:	4669      	mov	r1, sp
   3f3e0:	4668      	mov	r0, sp
   3f3e2:	f7da fa63 	bl	198ac <ocrypto_mod_p256_square>
   3f3e6:	466a      	mov	r2, sp
   3f3e8:	4629      	mov	r1, r5
   3f3ea:	4628      	mov	r0, r5
   3f3ec:	f104 0620 	add.w	r6, r4, #32
   3f3f0:	f7da fa5d 	bl	198ae <ocrypto_mod_p256_mul>
   3f3f4:	f105 0720 	add.w	r7, r5, #32
   3f3f8:	466a      	mov	r2, sp
   3f3fa:	4621      	mov	r1, r4
   3f3fc:	4668      	mov	r0, sp
   3f3fe:	f7da fa56 	bl	198ae <ocrypto_mod_p256_mul>
   3f402:	4632      	mov	r2, r6
   3f404:	4630      	mov	r0, r6
   3f406:	4639      	mov	r1, r7
   3f408:	f7da fa23 	bl	19852 <ocrypto_mod_p256_sub>
   3f40c:	4631      	mov	r1, r6
   3f40e:	4620      	mov	r0, r4
   3f410:	f7da fa4c 	bl	198ac <ocrypto_mod_p256_square>
   3f414:	462a      	mov	r2, r5
   3f416:	4621      	mov	r1, r4
   3f418:	4620      	mov	r0, r4
   3f41a:	f7da fa1a 	bl	19852 <ocrypto_mod_p256_sub>
   3f41e:	466a      	mov	r2, sp
   3f420:	4621      	mov	r1, r4
   3f422:	4620      	mov	r0, r4
   3f424:	f7da fa15 	bl	19852 <ocrypto_mod_p256_sub>
   3f428:	466a      	mov	r2, sp
   3f42a:	4629      	mov	r1, r5
   3f42c:	4640      	mov	r0, r8
   3f42e:	f7da fa10 	bl	19852 <ocrypto_mod_p256_sub>
   3f432:	4642      	mov	r2, r8
   3f434:	4639      	mov	r1, r7
   3f436:	4638      	mov	r0, r7
   3f438:	f7da fa39 	bl	198ae <ocrypto_mod_p256_mul>
   3f43c:	4622      	mov	r2, r4
   3f43e:	4629      	mov	r1, r5
   3f440:	4668      	mov	r0, sp
   3f442:	f7da fa06 	bl	19852 <ocrypto_mod_p256_sub>
   3f446:	466a      	mov	r2, sp
   3f448:	4631      	mov	r1, r6
   3f44a:	4630      	mov	r0, r6
   3f44c:	f7da fa2f 	bl	198ae <ocrypto_mod_p256_mul>
   3f450:	463a      	mov	r2, r7
   3f452:	4631      	mov	r1, r6
   3f454:	4630      	mov	r0, r6
   3f456:	f7da f9fc 	bl	19852 <ocrypto_mod_p256_sub>
   3f45a:	b008      	add	sp, #32
   3f45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003f460 <ocrypto_curve_p256_to64bytes>:
   3f460:	b538      	push	{r3, r4, r5, lr}
   3f462:	4604      	mov	r4, r0
   3f464:	460d      	mov	r5, r1
   3f466:	f7ff fdf9 	bl	3f05c <ocrypto_mod_p256_toBytes>
   3f46a:	f105 0120 	add.w	r1, r5, #32
   3f46e:	f104 0020 	add.w	r0, r4, #32
   3f472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3f476:	f7ff bdf1 	b.w	3f05c <ocrypto_mod_p256_toBytes>
   3f47a:	bf00      	nop

0003f47c <ocrypto_curve_p256_scalarmult>:
   3f47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3f480:	b0b8      	sub	sp, #224	; 0xe0
   3f482:	468a      	mov	sl, r1
   3f484:	4681      	mov	r9, r0
   3f486:	4611      	mov	r1, r2
   3f488:	a810      	add	r0, sp, #64	; 0x40
   3f48a:	4a51      	ldr	r2, [pc, #324]	; (3f5d0 <ocrypto_curve_p256_scalarmult+0x154>)
   3f48c:	f7d9 fe66 	bl	1915c <ocrypto_bigint_sub256>
   3f490:	4950      	ldr	r1, [pc, #320]	; (3f5d4 <ocrypto_curve_p256_scalarmult+0x158>)
   3f492:	4602      	mov	r2, r0
   3f494:	a810      	add	r0, sp, #64	; 0x40
   3f496:	f7d9 fe81 	bl	1919c <ocrypto_bigint_cadd256>
   3f49a:	4680      	mov	r8, r0
   3f49c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   3f49e:	494c      	ldr	r1, [pc, #304]	; (3f5d0 <ocrypto_curve_p256_scalarmult+0x154>)
   3f4a0:	ea08 77d7 	and.w	r7, r8, r7, lsr #31
   3f4a4:	f1c7 0201 	rsb	r2, r7, #1
   3f4a8:	a810      	add	r0, sp, #64	; 0x40
   3f4aa:	f7d9 fe77 	bl	1919c <ocrypto_bigint_cadd256>
   3f4ae:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   3f4b0:	4652      	mov	r2, sl
   3f4b2:	43ed      	mvns	r5, r5
   3f4b4:	a928      	add	r1, sp, #160	; 0xa0
   3f4b6:	a818      	add	r0, sp, #96	; 0x60
   3f4b8:	f7ff fec4 	bl	3f244 <p256_zdblu>
   3f4bc:	0fed      	lsrs	r5, r5, #31
   3f4be:	a920      	add	r1, sp, #128	; 0x80
   3f4c0:	f1c5 0201 	rsb	r2, r5, #1
   3f4c4:	4608      	mov	r0, r1
   3f4c6:	f7ff fdad 	bl	3f024 <ocrypto_mod_p256_cneg>
   3f4ca:	26fe      	movs	r6, #254	; 0xfe
   3f4cc:	f1c8 0801 	rsb	r8, r8, #1
   3f4d0:	466a      	mov	r2, sp
   3f4d2:	a918      	add	r1, sp, #96	; 0x60
   3f4d4:	a828      	add	r0, sp, #160	; 0xa0
   3f4d6:	f7ff ff77 	bl	3f3c8 <p256_zaddu>
   3f4da:	1173      	asrs	r3, r6, #5
   3f4dc:	aa38      	add	r2, sp, #224	; 0xe0
   3f4de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   3f4e2:	f853 4ca0 	ldr.w	r4, [r3, #-160]
   3f4e6:	f006 031f 	and.w	r3, r6, #31
   3f4ea:	40dc      	lsrs	r4, r3
   3f4ec:	f004 0401 	and.w	r4, r4, #1
   3f4f0:	4065      	eors	r5, r4
   3f4f2:	462a      	mov	r2, r5
   3f4f4:	a928      	add	r1, sp, #160	; 0xa0
   3f4f6:	a818      	add	r0, sp, #96	; 0x60
   3f4f8:	f7d9 febb 	bl	19272 <ocrypto_bigint_cswap256>
   3f4fc:	462a      	mov	r2, r5
   3f4fe:	a930      	add	r1, sp, #192	; 0xc0
   3f500:	a820      	add	r0, sp, #128	; 0x80
   3f502:	f7d9 feb6 	bl	19272 <ocrypto_bigint_cswap256>
   3f506:	3e01      	subs	r6, #1
   3f508:	a928      	add	r1, sp, #160	; 0xa0
   3f50a:	a818      	add	r0, sp, #96	; 0x60
   3f50c:	f7ff fef6 	bl	3f2fc <p256_zaddc>
   3f510:	1c73      	adds	r3, r6, #1
   3f512:	4625      	mov	r5, r4
   3f514:	d1dc      	bne.n	3f4d0 <ocrypto_curve_p256_scalarmult+0x54>
   3f516:	f1c4 0201 	rsb	r2, r4, #1
   3f51a:	a808      	add	r0, sp, #32
   3f51c:	a920      	add	r1, sp, #128	; 0x80
   3f51e:	f7ff fd81 	bl	3f024 <ocrypto_mod_p256_cneg>
   3f522:	407d      	eors	r5, r7
   3f524:	466a      	mov	r2, sp
   3f526:	a918      	add	r1, sp, #96	; 0x60
   3f528:	a828      	add	r0, sp, #160	; 0xa0
   3f52a:	f7ff ff4d 	bl	3f3c8 <p256_zaddu>
   3f52e:	a928      	add	r1, sp, #160	; 0xa0
   3f530:	462a      	mov	r2, r5
   3f532:	a818      	add	r0, sp, #96	; 0x60
   3f534:	f7d9 fe9d 	bl	19272 <ocrypto_bigint_cswap256>
   3f538:	462a      	mov	r2, r5
   3f53a:	a930      	add	r1, sp, #192	; 0xc0
   3f53c:	a820      	add	r0, sp, #128	; 0x80
   3f53e:	f7d9 fe98 	bl	19272 <ocrypto_bigint_cswap256>
   3f542:	a908      	add	r1, sp, #32
   3f544:	466a      	mov	r2, sp
   3f546:	4608      	mov	r0, r1
   3f548:	f7da f9b1 	bl	198ae <ocrypto_mod_p256_mul>
   3f54c:	a908      	add	r1, sp, #32
   3f54e:	4608      	mov	r0, r1
   3f550:	f7ff fd9e 	bl	3f090 <ocrypto_mod_p256_invert>
   3f554:	a908      	add	r1, sp, #32
   3f556:	f109 0420 	add.w	r4, r9, #32
   3f55a:	f10a 0220 	add.w	r2, sl, #32
   3f55e:	4608      	mov	r0, r1
   3f560:	f7da f9a5 	bl	198ae <ocrypto_mod_p256_mul>
   3f564:	a920      	add	r1, sp, #128	; 0x80
   3f566:	aa08      	add	r2, sp, #32
   3f568:	4620      	mov	r0, r4
   3f56a:	f7da f9a0 	bl	198ae <ocrypto_mod_p256_mul>
   3f56e:	aa08      	add	r2, sp, #32
   3f570:	a918      	add	r1, sp, #96	; 0x60
   3f572:	4668      	mov	r0, sp
   3f574:	f7da f99b 	bl	198ae <ocrypto_mod_p256_mul>
   3f578:	4669      	mov	r1, sp
   3f57a:	4668      	mov	r0, sp
   3f57c:	f7da f996 	bl	198ac <ocrypto_mod_p256_square>
   3f580:	aa18      	add	r2, sp, #96	; 0x60
   3f582:	4669      	mov	r1, sp
   3f584:	a808      	add	r0, sp, #32
   3f586:	f7da f992 	bl	198ae <ocrypto_mod_p256_mul>
   3f58a:	4621      	mov	r1, r4
   3f58c:	4668      	mov	r0, sp
   3f58e:	f7da f98d 	bl	198ac <ocrypto_mod_p256_square>
   3f592:	aa08      	add	r2, sp, #32
   3f594:	4669      	mov	r1, sp
   3f596:	4610      	mov	r0, r2
   3f598:	f7da f95b 	bl	19852 <ocrypto_mod_p256_sub>
   3f59c:	a908      	add	r1, sp, #32
   3f59e:	4a0e      	ldr	r2, [pc, #56]	; (3f5d8 <ocrypto_curve_p256_scalarmult+0x15c>)
   3f5a0:	4668      	mov	r0, sp
   3f5a2:	f7da f956 	bl	19852 <ocrypto_mod_p256_sub>
   3f5a6:	4620      	mov	r0, r4
   3f5a8:	2120      	movs	r1, #32
   3f5aa:	f7da f8f8 	bl	1979e <ocrypto_constant_time_is_zero>
   3f5ae:	a908      	add	r1, sp, #32
   3f5b0:	4243      	negs	r3, r0
   3f5b2:	4602      	mov	r2, r0
   3f5b4:	4668      	mov	r0, sp
   3f5b6:	ea43 0808 	orr.w	r8, r3, r8
   3f5ba:	f7d9 fe5a 	bl	19272 <ocrypto_bigint_cswap256>
   3f5be:	4648      	mov	r0, r9
   3f5c0:	4669      	mov	r1, sp
   3f5c2:	4a06      	ldr	r2, [pc, #24]	; (3f5dc <ocrypto_curve_p256_scalarmult+0x160>)
   3f5c4:	f7da f973 	bl	198ae <ocrypto_mod_p256_mul>
   3f5c8:	4640      	mov	r0, r8
   3f5ca:	b038      	add	sp, #224	; 0xe0
   3f5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3f5d0:	0004ad54 	.word	0x0004ad54
   3f5d4:	0004acd4 	.word	0x0004acd4
   3f5d8:	0004ad34 	.word	0x0004ad34
   3f5dc:	0004acf4 	.word	0x0004acf4

0003f5e0 <ocrypto_curve_p256_scalarmult_base>:
   3f5e0:	460a      	mov	r2, r1
   3f5e2:	4901      	ldr	r1, [pc, #4]	; (3f5e8 <ocrypto_curve_p256_scalarmult_base+0x8>)
   3f5e4:	f7ff bf4a 	b.w	3f47c <ocrypto_curve_p256_scalarmult>
   3f5e8:	0004ac94 	.word	0x0004ac94

0003f5ec <__assert_func>:
   3f5ec:	4c0a      	ldr	r4, [pc, #40]	; (3f618 <__assert_func+0x2c>)
   3f5ee:	461d      	mov	r5, r3
   3f5f0:	4606      	mov	r6, r0
   3f5f2:	6823      	ldr	r3, [r4, #0]
   3f5f4:	b500      	push	{lr}
   3f5f6:	68d8      	ldr	r0, [r3, #12]
   3f5f8:	b085      	sub	sp, #20
   3f5fa:	b152      	cbz	r2, 3f612 <__assert_func+0x26>
   3f5fc:	4c07      	ldr	r4, [pc, #28]	; (3f61c <__assert_func+0x30>)
   3f5fe:	9202      	str	r2, [sp, #8]
   3f600:	4633      	mov	r3, r6
   3f602:	462a      	mov	r2, r5
   3f604:	9100      	str	r1, [sp, #0]
   3f606:	9401      	str	r4, [sp, #4]
   3f608:	4905      	ldr	r1, [pc, #20]	; (3f620 <__assert_func+0x34>)
   3f60a:	f000 f811 	bl	3f630 <fiprintf>
   3f60e:	f003 ff45 	bl	4349c <abort>
   3f612:	4c04      	ldr	r4, [pc, #16]	; (3f624 <__assert_func+0x38>)
   3f614:	4622      	mov	r2, r4
   3f616:	e7f2      	b.n	3f5fe <__assert_func+0x12>
   3f618:	20031c24 	.word	0x20031c24
   3f61c:	0004ad74 	.word	0x0004ad74
   3f620:	0004ad84 	.word	0x0004ad84
   3f624:	0004a0d8 	.word	0x0004a0d8

0003f628 <atoi>:
   3f628:	220a      	movs	r2, #10
   3f62a:	2100      	movs	r1, #0
   3f62c:	f001 bb7a 	b.w	40d24 <strtol>

0003f630 <fiprintf>:
   3f630:	b40e      	push	{r1, r2, r3}
   3f632:	b510      	push	{r4, lr}
   3f634:	b083      	sub	sp, #12
   3f636:	4b07      	ldr	r3, [pc, #28]	; (3f654 <fiprintf+0x24>)
   3f638:	4601      	mov	r1, r0
   3f63a:	ac05      	add	r4, sp, #20
   3f63c:	6818      	ldr	r0, [r3, #0]
   3f63e:	f854 2b04 	ldr.w	r2, [r4], #4
   3f642:	4623      	mov	r3, r4
   3f644:	9401      	str	r4, [sp, #4]
   3f646:	f002 ff59 	bl	424fc <_vfiprintf_r>
   3f64a:	b003      	add	sp, #12
   3f64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3f650:	b003      	add	sp, #12
   3f652:	4770      	bx	lr
   3f654:	20031c24 	.word	0x20031c24

0003f658 <__locale_mb_cur_max>:
   3f658:	4b04      	ldr	r3, [pc, #16]	; (3f66c <__locale_mb_cur_max+0x14>)
   3f65a:	4a05      	ldr	r2, [pc, #20]	; (3f670 <__locale_mb_cur_max+0x18>)
   3f65c:	681b      	ldr	r3, [r3, #0]
   3f65e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   3f660:	2b00      	cmp	r3, #0
   3f662:	bf08      	it	eq
   3f664:	4613      	moveq	r3, r2
   3f666:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   3f66a:	4770      	bx	lr
   3f66c:	20031c24 	.word	0x20031c24
   3f670:	20031c28 	.word	0x20031c28

0003f674 <__locale_ctype_ptr_l>:
   3f674:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   3f678:	4770      	bx	lr
   3f67a:	bf00      	nop

0003f67c <__locale_ctype_ptr>:
   3f67c:	4b04      	ldr	r3, [pc, #16]	; (3f690 <__locale_ctype_ptr+0x14>)
   3f67e:	4a05      	ldr	r2, [pc, #20]	; (3f694 <__locale_ctype_ptr+0x18>)
   3f680:	681b      	ldr	r3, [r3, #0]
   3f682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   3f684:	2b00      	cmp	r3, #0
   3f686:	bf08      	it	eq
   3f688:	4613      	moveq	r3, r2
   3f68a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   3f68e:	4770      	bx	lr
   3f690:	20031c24 	.word	0x20031c24
   3f694:	20031c28 	.word	0x20031c28

0003f698 <malloc>:
   3f698:	4b02      	ldr	r3, [pc, #8]	; (3f6a4 <malloc+0xc>)
   3f69a:	4601      	mov	r1, r0
   3f69c:	6818      	ldr	r0, [r3, #0]
   3f69e:	f000 b80b 	b.w	3f6b8 <_malloc_r>
   3f6a2:	bf00      	nop
   3f6a4:	20031c24 	.word	0x20031c24

0003f6a8 <free>:
   3f6a8:	4b02      	ldr	r3, [pc, #8]	; (3f6b4 <free+0xc>)
   3f6aa:	4601      	mov	r1, r0
   3f6ac:	6818      	ldr	r0, [r3, #0]
   3f6ae:	f004 b9db 	b.w	43a68 <_free_r>
   3f6b2:	bf00      	nop
   3f6b4:	20031c24 	.word	0x20031c24

0003f6b8 <_malloc_r>:
   3f6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f6bc:	f101 050b 	add.w	r5, r1, #11
   3f6c0:	b083      	sub	sp, #12
   3f6c2:	4606      	mov	r6, r0
   3f6c4:	2d16      	cmp	r5, #22
   3f6c6:	d824      	bhi.n	3f712 <_malloc_r+0x5a>
   3f6c8:	2910      	cmp	r1, #16
   3f6ca:	f200 80d1 	bhi.w	3f870 <_malloc_r+0x1b8>
   3f6ce:	f000 fb87 	bl	3fde0 <__malloc_lock>
   3f6d2:	2510      	movs	r5, #16
   3f6d4:	2218      	movs	r2, #24
   3f6d6:	2402      	movs	r4, #2
   3f6d8:	4fca      	ldr	r7, [pc, #808]	; (3fa04 <_malloc_r+0x34c>)
   3f6da:	443a      	add	r2, r7
   3f6dc:	6853      	ldr	r3, [r2, #4]
   3f6de:	f1a2 0108 	sub.w	r1, r2, #8
   3f6e2:	428b      	cmp	r3, r1
   3f6e4:	f000 8187 	beq.w	3f9f6 <_malloc_r+0x33e>
   3f6e8:	685a      	ldr	r2, [r3, #4]
   3f6ea:	f103 0908 	add.w	r9, r3, #8
   3f6ee:	68d9      	ldr	r1, [r3, #12]
   3f6f0:	4630      	mov	r0, r6
   3f6f2:	f022 0203 	bic.w	r2, r2, #3
   3f6f6:	689d      	ldr	r5, [r3, #8]
   3f6f8:	4413      	add	r3, r2
   3f6fa:	60e9      	str	r1, [r5, #12]
   3f6fc:	608d      	str	r5, [r1, #8]
   3f6fe:	685a      	ldr	r2, [r3, #4]
   3f700:	f042 0201 	orr.w	r2, r2, #1
   3f704:	605a      	str	r2, [r3, #4]
   3f706:	f000 fb71 	bl	3fdec <__malloc_unlock>
   3f70a:	4648      	mov	r0, r9
   3f70c:	b003      	add	sp, #12
   3f70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f712:	f035 0507 	bics.w	r5, r5, #7
   3f716:	f100 80ab 	bmi.w	3f870 <_malloc_r+0x1b8>
   3f71a:	42a9      	cmp	r1, r5
   3f71c:	f200 80a8 	bhi.w	3f870 <_malloc_r+0x1b8>
   3f720:	f000 fb5e 	bl	3fde0 <__malloc_lock>
   3f724:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   3f728:	f0c0 8192 	bcc.w	3fa50 <_malloc_r+0x398>
   3f72c:	0a6b      	lsrs	r3, r5, #9
   3f72e:	d00b      	beq.n	3f748 <_malloc_r+0x90>
   3f730:	2b04      	cmp	r3, #4
   3f732:	f240 8096 	bls.w	3f862 <_malloc_r+0x1aa>
   3f736:	2b14      	cmp	r3, #20
   3f738:	f200 81c7 	bhi.w	3faca <_malloc_r+0x412>
   3f73c:	f103 045c 	add.w	r4, r3, #92	; 0x5c
   3f740:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   3f744:	00e3      	lsls	r3, r4, #3
   3f746:	e004      	b.n	3f752 <_malloc_r+0x9a>
   3f748:	f44f 7300 	mov.w	r3, #512	; 0x200
   3f74c:	2440      	movs	r4, #64	; 0x40
   3f74e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   3f752:	4fac      	ldr	r7, [pc, #688]	; (3fa04 <_malloc_r+0x34c>)
   3f754:	443b      	add	r3, r7
   3f756:	f1a3 0008 	sub.w	r0, r3, #8
   3f75a:	685b      	ldr	r3, [r3, #4]
   3f75c:	4298      	cmp	r0, r3
   3f75e:	d106      	bne.n	3f76e <_malloc_r+0xb6>
   3f760:	e00c      	b.n	3f77c <_malloc_r+0xc4>
   3f762:	2900      	cmp	r1, #0
   3f764:	f280 8135 	bge.w	3f9d2 <_malloc_r+0x31a>
   3f768:	68db      	ldr	r3, [r3, #12]
   3f76a:	4298      	cmp	r0, r3
   3f76c:	d006      	beq.n	3f77c <_malloc_r+0xc4>
   3f76e:	685a      	ldr	r2, [r3, #4]
   3f770:	f022 0203 	bic.w	r2, r2, #3
   3f774:	1b51      	subs	r1, r2, r5
   3f776:	290f      	cmp	r1, #15
   3f778:	ddf3      	ble.n	3f762 <_malloc_r+0xaa>
   3f77a:	4664      	mov	r4, ip
   3f77c:	693a      	ldr	r2, [r7, #16]
   3f77e:	f8df c29c 	ldr.w	ip, [pc, #668]	; 3fa1c <_malloc_r+0x364>
   3f782:	4562      	cmp	r2, ip
   3f784:	d07c      	beq.n	3f880 <_malloc_r+0x1c8>
   3f786:	6853      	ldr	r3, [r2, #4]
   3f788:	f023 0303 	bic.w	r3, r3, #3
   3f78c:	1b59      	subs	r1, r3, r5
   3f78e:	290f      	cmp	r1, #15
   3f790:	f300 8148 	bgt.w	3fa24 <_malloc_r+0x36c>
   3f794:	2900      	cmp	r1, #0
   3f796:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   3f79a:	da54      	bge.n	3f846 <_malloc_r+0x18e>
   3f79c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3f7a0:	f080 8172 	bcs.w	3fa88 <_malloc_r+0x3d0>
   3f7a4:	08db      	lsrs	r3, r3, #3
   3f7a6:	2101      	movs	r1, #1
   3f7a8:	1098      	asrs	r0, r3, #2
   3f7aa:	eb03 0e01 	add.w	lr, r3, r1
   3f7ae:	4081      	lsls	r1, r0
   3f7b0:	eb07 08ce 	add.w	r8, r7, lr, lsl #3
   3f7b4:	6878      	ldr	r0, [r7, #4]
   3f7b6:	f857 303e 	ldr.w	r3, [r7, lr, lsl #3]
   3f7ba:	4301      	orrs	r1, r0
   3f7bc:	f1a8 0008 	sub.w	r0, r8, #8
   3f7c0:	6093      	str	r3, [r2, #8]
   3f7c2:	60d0      	str	r0, [r2, #12]
   3f7c4:	6079      	str	r1, [r7, #4]
   3f7c6:	f847 203e 	str.w	r2, [r7, lr, lsl #3]
   3f7ca:	60da      	str	r2, [r3, #12]
   3f7cc:	10a3      	asrs	r3, r4, #2
   3f7ce:	2001      	movs	r0, #1
   3f7d0:	4098      	lsls	r0, r3
   3f7d2:	4288      	cmp	r0, r1
   3f7d4:	d85a      	bhi.n	3f88c <_malloc_r+0x1d4>
   3f7d6:	4208      	tst	r0, r1
   3f7d8:	d105      	bne.n	3f7e6 <_malloc_r+0x12e>
   3f7da:	f024 0403 	bic.w	r4, r4, #3
   3f7de:	0040      	lsls	r0, r0, #1
   3f7e0:	3404      	adds	r4, #4
   3f7e2:	4208      	tst	r0, r1
   3f7e4:	d0fb      	beq.n	3f7de <_malloc_r+0x126>
   3f7e6:	eb07 09c4 	add.w	r9, r7, r4, lsl #3
   3f7ea:	46a0      	mov	r8, r4
   3f7ec:	46ce      	mov	lr, r9
   3f7ee:	f8de 300c 	ldr.w	r3, [lr, #12]
   3f7f2:	459e      	cmp	lr, r3
   3f7f4:	d107      	bne.n	3f806 <_malloc_r+0x14e>
   3f7f6:	e12f      	b.n	3fa58 <_malloc_r+0x3a0>
   3f7f8:	2a00      	cmp	r2, #0
   3f7fa:	f280 8136 	bge.w	3fa6a <_malloc_r+0x3b2>
   3f7fe:	68db      	ldr	r3, [r3, #12]
   3f800:	459e      	cmp	lr, r3
   3f802:	f000 8129 	beq.w	3fa58 <_malloc_r+0x3a0>
   3f806:	6859      	ldr	r1, [r3, #4]
   3f808:	f021 0103 	bic.w	r1, r1, #3
   3f80c:	1b4a      	subs	r2, r1, r5
   3f80e:	2a0f      	cmp	r2, #15
   3f810:	ddf2      	ble.n	3f7f8 <_malloc_r+0x140>
   3f812:	f8d3 e00c 	ldr.w	lr, [r3, #12]
   3f816:	f045 0401 	orr.w	r4, r5, #1
   3f81a:	f042 0801 	orr.w	r8, r2, #1
   3f81e:	441d      	add	r5, r3
   3f820:	4630      	mov	r0, r6
   3f822:	689e      	ldr	r6, [r3, #8]
   3f824:	605c      	str	r4, [r3, #4]
   3f826:	f103 0908 	add.w	r9, r3, #8
   3f82a:	f8c6 e00c 	str.w	lr, [r6, #12]
   3f82e:	f8ce 6008 	str.w	r6, [lr, #8]
   3f832:	e9c7 5504 	strd	r5, r5, [r7, #16]
   3f836:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   3f83a:	f8c5 8004 	str.w	r8, [r5, #4]
   3f83e:	505a      	str	r2, [r3, r1]
   3f840:	f000 fad4 	bl	3fdec <__malloc_unlock>
   3f844:	e761      	b.n	3f70a <_malloc_r+0x52>
   3f846:	4413      	add	r3, r2
   3f848:	f102 0908 	add.w	r9, r2, #8
   3f84c:	4630      	mov	r0, r6
   3f84e:	685a      	ldr	r2, [r3, #4]
   3f850:	f042 0201 	orr.w	r2, r2, #1
   3f854:	605a      	str	r2, [r3, #4]
   3f856:	f000 fac9 	bl	3fdec <__malloc_unlock>
   3f85a:	4648      	mov	r0, r9
   3f85c:	b003      	add	sp, #12
   3f85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f862:	09ab      	lsrs	r3, r5, #6
   3f864:	f103 0439 	add.w	r4, r3, #57	; 0x39
   3f868:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   3f86c:	00e3      	lsls	r3, r4, #3
   3f86e:	e770      	b.n	3f752 <_malloc_r+0x9a>
   3f870:	f04f 0900 	mov.w	r9, #0
   3f874:	230c      	movs	r3, #12
   3f876:	4648      	mov	r0, r9
   3f878:	6033      	str	r3, [r6, #0]
   3f87a:	b003      	add	sp, #12
   3f87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f880:	10a3      	asrs	r3, r4, #2
   3f882:	2001      	movs	r0, #1
   3f884:	6879      	ldr	r1, [r7, #4]
   3f886:	4098      	lsls	r0, r3
   3f888:	4288      	cmp	r0, r1
   3f88a:	d9a4      	bls.n	3f7d6 <_malloc_r+0x11e>
   3f88c:	f8d7 9008 	ldr.w	r9, [r7, #8]
   3f890:	f8d9 3004 	ldr.w	r3, [r9, #4]
   3f894:	f023 0803 	bic.w	r8, r3, #3
   3f898:	eba8 0205 	sub.w	r2, r8, r5
   3f89c:	2a0f      	cmp	r2, #15
   3f89e:	dd13      	ble.n	3f8c8 <_malloc_r+0x210>
   3f8a0:	45a8      	cmp	r8, r5
   3f8a2:	d311      	bcc.n	3f8c8 <_malloc_r+0x210>
   3f8a4:	f045 0301 	orr.w	r3, r5, #1
   3f8a8:	f042 0201 	orr.w	r2, r2, #1
   3f8ac:	444d      	add	r5, r9
   3f8ae:	f109 0908 	add.w	r9, r9, #8
   3f8b2:	f849 3c04 	str.w	r3, [r9, #-4]
   3f8b6:	4630      	mov	r0, r6
   3f8b8:	60bd      	str	r5, [r7, #8]
   3f8ba:	606a      	str	r2, [r5, #4]
   3f8bc:	f000 fa96 	bl	3fdec <__malloc_unlock>
   3f8c0:	4648      	mov	r0, r9
   3f8c2:	b003      	add	sp, #12
   3f8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f8c8:	f8df b154 	ldr.w	fp, [pc, #340]	; 3fa20 <_malloc_r+0x368>
   3f8cc:	4b4e      	ldr	r3, [pc, #312]	; (3fa08 <_malloc_r+0x350>)
   3f8ce:	f8db 2000 	ldr.w	r2, [fp]
   3f8d2:	681b      	ldr	r3, [r3, #0]
   3f8d4:	3201      	adds	r2, #1
   3f8d6:	442b      	add	r3, r5
   3f8d8:	f000 8135 	beq.w	3fb46 <_malloc_r+0x48e>
   3f8dc:	f241 020f 	movw	r2, #4111	; 0x100f
   3f8e0:	4c4a      	ldr	r4, [pc, #296]	; (3fa0c <_malloc_r+0x354>)
   3f8e2:	441a      	add	r2, r3
   3f8e4:	4014      	ands	r4, r2
   3f8e6:	4621      	mov	r1, r4
   3f8e8:	4630      	mov	r0, r6
   3f8ea:	f000 fc69 	bl	401c0 <_sbrk_r>
   3f8ee:	f1b0 3fff 	cmp.w	r0, #4294967295
   3f8f2:	4682      	mov	sl, r0
   3f8f4:	f000 80f7 	beq.w	3fae6 <_malloc_r+0x42e>
   3f8f8:	eb09 0008 	add.w	r0, r9, r8
   3f8fc:	4550      	cmp	r0, sl
   3f8fe:	f200 80f0 	bhi.w	3fae2 <_malloc_r+0x42a>
   3f902:	4b43      	ldr	r3, [pc, #268]	; (3fa10 <_malloc_r+0x358>)
   3f904:	681a      	ldr	r2, [r3, #0]
   3f906:	4422      	add	r2, r4
   3f908:	601a      	str	r2, [r3, #0]
   3f90a:	f000 8133 	beq.w	3fb74 <_malloc_r+0x4bc>
   3f90e:	f8db 1000 	ldr.w	r1, [fp]
   3f912:	3101      	adds	r1, #1
   3f914:	f000 814c 	beq.w	3fbb0 <_malloc_r+0x4f8>
   3f918:	ebaa 0000 	sub.w	r0, sl, r0
   3f91c:	4402      	add	r2, r0
   3f91e:	601a      	str	r2, [r3, #0]
   3f920:	f01a 0207 	ands.w	r2, sl, #7
   3f924:	f000 811b 	beq.w	3fb5e <_malloc_r+0x4a6>
   3f928:	f1c2 0008 	rsb	r0, r2, #8
   3f92c:	f241 0108 	movw	r1, #4104	; 0x1008
   3f930:	4482      	add	sl, r0
   3f932:	1a89      	subs	r1, r1, r2
   3f934:	4454      	add	r4, sl
   3f936:	4630      	mov	r0, r6
   3f938:	9301      	str	r3, [sp, #4]
   3f93a:	f3c4 020b 	ubfx	r2, r4, #0, #12
   3f93e:	1a8c      	subs	r4, r1, r2
   3f940:	4621      	mov	r1, r4
   3f942:	f000 fc3d 	bl	401c0 <_sbrk_r>
   3f946:	1c43      	adds	r3, r0, #1
   3f948:	9b01      	ldr	r3, [sp, #4]
   3f94a:	f000 812e 	beq.w	3fbaa <_malloc_r+0x4f2>
   3f94e:	eba0 010a 	sub.w	r1, r0, sl
   3f952:	4421      	add	r1, r4
   3f954:	f041 0101 	orr.w	r1, r1, #1
   3f958:	681a      	ldr	r2, [r3, #0]
   3f95a:	45b9      	cmp	r9, r7
   3f95c:	f8c7 a008 	str.w	sl, [r7, #8]
   3f960:	4422      	add	r2, r4
   3f962:	f8ca 1004 	str.w	r1, [sl, #4]
   3f966:	601a      	str	r2, [r3, #0]
   3f968:	d017      	beq.n	3f99a <_malloc_r+0x2e2>
   3f96a:	f1b8 0f0f 	cmp.w	r8, #15
   3f96e:	f240 8118 	bls.w	3fba2 <_malloc_r+0x4ea>
   3f972:	f8d9 0004 	ldr.w	r0, [r9, #4]
   3f976:	f1a8 010c 	sub.w	r1, r8, #12
   3f97a:	f04f 0c05 	mov.w	ip, #5
   3f97e:	f021 0107 	bic.w	r1, r1, #7
   3f982:	f000 0001 	and.w	r0, r0, #1
   3f986:	eb09 0401 	add.w	r4, r9, r1
   3f98a:	4308      	orrs	r0, r1
   3f98c:	290f      	cmp	r1, #15
   3f98e:	f8c9 0004 	str.w	r0, [r9, #4]
   3f992:	e9c4 cc01 	strd	ip, ip, [r4, #4]
   3f996:	f200 8122 	bhi.w	3fbde <_malloc_r+0x526>
   3f99a:	4b1e      	ldr	r3, [pc, #120]	; (3fa14 <_malloc_r+0x35c>)
   3f99c:	481e      	ldr	r0, [pc, #120]	; (3fa18 <_malloc_r+0x360>)
   3f99e:	6819      	ldr	r1, [r3, #0]
   3f9a0:	f8d7 9008 	ldr.w	r9, [r7, #8]
   3f9a4:	428a      	cmp	r2, r1
   3f9a6:	6801      	ldr	r1, [r0, #0]
   3f9a8:	bf88      	it	hi
   3f9aa:	601a      	strhi	r2, [r3, #0]
   3f9ac:	428a      	cmp	r2, r1
   3f9ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
   3f9b2:	bf88      	it	hi
   3f9b4:	6002      	strhi	r2, [r0, #0]
   3f9b6:	f023 0303 	bic.w	r3, r3, #3
   3f9ba:	1b5a      	subs	r2, r3, r5
   3f9bc:	2a0f      	cmp	r2, #15
   3f9be:	dd02      	ble.n	3f9c6 <_malloc_r+0x30e>
   3f9c0:	429d      	cmp	r5, r3
   3f9c2:	f67f af6f 	bls.w	3f8a4 <_malloc_r+0x1ec>
   3f9c6:	4630      	mov	r0, r6
   3f9c8:	f04f 0900 	mov.w	r9, #0
   3f9cc:	f000 fa0e 	bl	3fdec <__malloc_unlock>
   3f9d0:	e69b      	b.n	3f70a <_malloc_r+0x52>
   3f9d2:	441a      	add	r2, r3
   3f9d4:	f103 0908 	add.w	r9, r3, #8
   3f9d8:	4630      	mov	r0, r6
   3f9da:	6851      	ldr	r1, [r2, #4]
   3f9dc:	e9d3 7502 	ldrd	r7, r5, [r3, #8]
   3f9e0:	f041 0101 	orr.w	r1, r1, #1
   3f9e4:	60fd      	str	r5, [r7, #12]
   3f9e6:	60af      	str	r7, [r5, #8]
   3f9e8:	6051      	str	r1, [r2, #4]
   3f9ea:	f000 f9ff 	bl	3fdec <__malloc_unlock>
   3f9ee:	4648      	mov	r0, r9
   3f9f0:	b003      	add	sp, #12
   3f9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f9f6:	68d3      	ldr	r3, [r2, #12]
   3f9f8:	429a      	cmp	r2, r3
   3f9fa:	f47f ae75 	bne.w	3f6e8 <_malloc_r+0x30>
   3f9fe:	3402      	adds	r4, #2
   3fa00:	e6bc      	b.n	3f77c <_malloc_r+0xc4>
   3fa02:	bf00      	nop
   3fa04:	20031d94 	.word	0x20031d94
   3fa08:	2002a42c 	.word	0x2002a42c
   3fa0c:	fffff000 	.word	0xfffff000
   3fa10:	2002a3fc 	.word	0x2002a3fc
   3fa14:	2002a424 	.word	0x2002a424
   3fa18:	2002a428 	.word	0x2002a428
   3fa1c:	20031d9c 	.word	0x20031d9c
   3fa20:	2003219c 	.word	0x2003219c
   3fa24:	f045 0401 	orr.w	r4, r5, #1
   3fa28:	f041 0e01 	orr.w	lr, r1, #1
   3fa2c:	4415      	add	r5, r2
   3fa2e:	f102 0908 	add.w	r9, r2, #8
   3fa32:	6054      	str	r4, [r2, #4]
   3fa34:	4630      	mov	r0, r6
   3fa36:	e9c7 5504 	strd	r5, r5, [r7, #16]
   3fa3a:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   3fa3e:	f8c5 e004 	str.w	lr, [r5, #4]
   3fa42:	50d1      	str	r1, [r2, r3]
   3fa44:	f000 f9d2 	bl	3fdec <__malloc_unlock>
   3fa48:	4648      	mov	r0, r9
   3fa4a:	b003      	add	sp, #12
   3fa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fa50:	08ec      	lsrs	r4, r5, #3
   3fa52:	f105 0208 	add.w	r2, r5, #8
   3fa56:	e63f      	b.n	3f6d8 <_malloc_r+0x20>
   3fa58:	f108 0801 	add.w	r8, r8, #1
   3fa5c:	f10e 0e08 	add.w	lr, lr, #8
   3fa60:	f018 0f03 	tst.w	r8, #3
   3fa64:	f47f aec3 	bne.w	3f7ee <_malloc_r+0x136>
   3fa68:	e055      	b.n	3fb16 <_malloc_r+0x45e>
   3fa6a:	4419      	add	r1, r3
   3fa6c:	68da      	ldr	r2, [r3, #12]
   3fa6e:	4699      	mov	r9, r3
   3fa70:	4630      	mov	r0, r6
   3fa72:	684b      	ldr	r3, [r1, #4]
   3fa74:	f859 5f08 	ldr.w	r5, [r9, #8]!
   3fa78:	f043 0301 	orr.w	r3, r3, #1
   3fa7c:	604b      	str	r3, [r1, #4]
   3fa7e:	60ea      	str	r2, [r5, #12]
   3fa80:	6095      	str	r5, [r2, #8]
   3fa82:	f000 f9b3 	bl	3fdec <__malloc_unlock>
   3fa86:	e640      	b.n	3f70a <_malloc_r+0x52>
   3fa88:	0a59      	lsrs	r1, r3, #9
   3fa8a:	2904      	cmp	r1, #4
   3fa8c:	d932      	bls.n	3faf4 <_malloc_r+0x43c>
   3fa8e:	2914      	cmp	r1, #20
   3fa90:	d868      	bhi.n	3fb64 <_malloc_r+0x4ac>
   3fa92:	f101 005c 	add.w	r0, r1, #92	; 0x5c
   3fa96:	315b      	adds	r1, #91	; 0x5b
   3fa98:	00c0      	lsls	r0, r0, #3
   3fa9a:	eb07 0e00 	add.w	lr, r7, r0
   3fa9e:	5838      	ldr	r0, [r7, r0]
   3faa0:	f1ae 0e08 	sub.w	lr, lr, #8
   3faa4:	4586      	cmp	lr, r0
   3faa6:	d051      	beq.n	3fb4c <_malloc_r+0x494>
   3faa8:	6841      	ldr	r1, [r0, #4]
   3faaa:	f021 0103 	bic.w	r1, r1, #3
   3faae:	4299      	cmp	r1, r3
   3fab0:	d902      	bls.n	3fab8 <_malloc_r+0x400>
   3fab2:	6880      	ldr	r0, [r0, #8]
   3fab4:	4586      	cmp	lr, r0
   3fab6:	d1f7      	bne.n	3faa8 <_malloc_r+0x3f0>
   3fab8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   3fabc:	6879      	ldr	r1, [r7, #4]
   3fabe:	e9c2 0e02 	strd	r0, lr, [r2, #8]
   3fac2:	f8ce 2008 	str.w	r2, [lr, #8]
   3fac6:	60c2      	str	r2, [r0, #12]
   3fac8:	e680      	b.n	3f7cc <_malloc_r+0x114>
   3faca:	2b54      	cmp	r3, #84	; 0x54
   3facc:	d918      	bls.n	3fb00 <_malloc_r+0x448>
   3face:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   3fad2:	d85b      	bhi.n	3fb8c <_malloc_r+0x4d4>
   3fad4:	0beb      	lsrs	r3, r5, #15
   3fad6:	f103 0478 	add.w	r4, r3, #120	; 0x78
   3fada:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   3fade:	00e3      	lsls	r3, r4, #3
   3fae0:	e637      	b.n	3f752 <_malloc_r+0x9a>
   3fae2:	45b9      	cmp	r9, r7
   3fae4:	d067      	beq.n	3fbb6 <_malloc_r+0x4fe>
   3fae6:	f8d7 9008 	ldr.w	r9, [r7, #8]
   3faea:	f8d9 3004 	ldr.w	r3, [r9, #4]
   3faee:	f023 0303 	bic.w	r3, r3, #3
   3faf2:	e762      	b.n	3f9ba <_malloc_r+0x302>
   3faf4:	0999      	lsrs	r1, r3, #6
   3faf6:	f101 0039 	add.w	r0, r1, #57	; 0x39
   3fafa:	3138      	adds	r1, #56	; 0x38
   3fafc:	00c0      	lsls	r0, r0, #3
   3fafe:	e7cc      	b.n	3fa9a <_malloc_r+0x3e2>
   3fb00:	0b2b      	lsrs	r3, r5, #12
   3fb02:	f103 046f 	add.w	r4, r3, #111	; 0x6f
   3fb06:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   3fb0a:	00e3      	lsls	r3, r4, #3
   3fb0c:	e621      	b.n	3f752 <_malloc_r+0x9a>
   3fb0e:	f8d9 9000 	ldr.w	r9, [r9]
   3fb12:	4599      	cmp	r9, r3
   3fb14:	d17a      	bne.n	3fc0c <_malloc_r+0x554>
   3fb16:	f014 0f03 	tst.w	r4, #3
   3fb1a:	f1a9 0308 	sub.w	r3, r9, #8
   3fb1e:	f104 34ff 	add.w	r4, r4, #4294967295
   3fb22:	d1f4      	bne.n	3fb0e <_malloc_r+0x456>
   3fb24:	687b      	ldr	r3, [r7, #4]
   3fb26:	ea23 0300 	bic.w	r3, r3, r0
   3fb2a:	607b      	str	r3, [r7, #4]
   3fb2c:	0040      	lsls	r0, r0, #1
   3fb2e:	4298      	cmp	r0, r3
   3fb30:	f63f aeac 	bhi.w	3f88c <_malloc_r+0x1d4>
   3fb34:	b918      	cbnz	r0, 3fb3e <_malloc_r+0x486>
   3fb36:	e6a9      	b.n	3f88c <_malloc_r+0x1d4>
   3fb38:	0040      	lsls	r0, r0, #1
   3fb3a:	f108 0804 	add.w	r8, r8, #4
   3fb3e:	4218      	tst	r0, r3
   3fb40:	d0fa      	beq.n	3fb38 <_malloc_r+0x480>
   3fb42:	4644      	mov	r4, r8
   3fb44:	e64f      	b.n	3f7e6 <_malloc_r+0x12e>
   3fb46:	f103 0410 	add.w	r4, r3, #16
   3fb4a:	e6cc      	b.n	3f8e6 <_malloc_r+0x22e>
   3fb4c:	1089      	asrs	r1, r1, #2
   3fb4e:	f04f 0801 	mov.w	r8, #1
   3fb52:	687b      	ldr	r3, [r7, #4]
   3fb54:	fa08 f101 	lsl.w	r1, r8, r1
   3fb58:	4319      	orrs	r1, r3
   3fb5a:	6079      	str	r1, [r7, #4]
   3fb5c:	e7af      	b.n	3fabe <_malloc_r+0x406>
   3fb5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   3fb62:	e6e7      	b.n	3f934 <_malloc_r+0x27c>
   3fb64:	2954      	cmp	r1, #84	; 0x54
   3fb66:	d82b      	bhi.n	3fbc0 <_malloc_r+0x508>
   3fb68:	0b19      	lsrs	r1, r3, #12
   3fb6a:	f101 006f 	add.w	r0, r1, #111	; 0x6f
   3fb6e:	316e      	adds	r1, #110	; 0x6e
   3fb70:	00c0      	lsls	r0, r0, #3
   3fb72:	e792      	b.n	3fa9a <_malloc_r+0x3e2>
   3fb74:	f3c0 010b 	ubfx	r1, r0, #0, #12
   3fb78:	2900      	cmp	r1, #0
   3fb7a:	f47f aec8 	bne.w	3f90e <_malloc_r+0x256>
   3fb7e:	eb08 0304 	add.w	r3, r8, r4
   3fb82:	68b9      	ldr	r1, [r7, #8]
   3fb84:	f043 0301 	orr.w	r3, r3, #1
   3fb88:	604b      	str	r3, [r1, #4]
   3fb8a:	e706      	b.n	3f99a <_malloc_r+0x2e2>
   3fb8c:	f240 5254 	movw	r2, #1364	; 0x554
   3fb90:	4293      	cmp	r3, r2
   3fb92:	d81e      	bhi.n	3fbd2 <_malloc_r+0x51a>
   3fb94:	0cab      	lsrs	r3, r5, #18
   3fb96:	f103 047d 	add.w	r4, r3, #125	; 0x7d
   3fb9a:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   3fb9e:	00e3      	lsls	r3, r4, #3
   3fba0:	e5d7      	b.n	3f752 <_malloc_r+0x9a>
   3fba2:	2301      	movs	r3, #1
   3fba4:	f8ca 3004 	str.w	r3, [sl, #4]
   3fba8:	e70d      	b.n	3f9c6 <_malloc_r+0x30e>
   3fbaa:	2101      	movs	r1, #1
   3fbac:	2400      	movs	r4, #0
   3fbae:	e6d3      	b.n	3f958 <_malloc_r+0x2a0>
   3fbb0:	f8cb a000 	str.w	sl, [fp]
   3fbb4:	e6b4      	b.n	3f920 <_malloc_r+0x268>
   3fbb6:	4b16      	ldr	r3, [pc, #88]	; (3fc10 <_malloc_r+0x558>)
   3fbb8:	681a      	ldr	r2, [r3, #0]
   3fbba:	4422      	add	r2, r4
   3fbbc:	601a      	str	r2, [r3, #0]
   3fbbe:	e6a6      	b.n	3f90e <_malloc_r+0x256>
   3fbc0:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
   3fbc4:	d814      	bhi.n	3fbf0 <_malloc_r+0x538>
   3fbc6:	0bd9      	lsrs	r1, r3, #15
   3fbc8:	f101 0078 	add.w	r0, r1, #120	; 0x78
   3fbcc:	3177      	adds	r1, #119	; 0x77
   3fbce:	00c0      	lsls	r0, r0, #3
   3fbd0:	e763      	b.n	3fa9a <_malloc_r+0x3e2>
   3fbd2:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   3fbd6:	247f      	movs	r4, #127	; 0x7f
   3fbd8:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   3fbdc:	e5b9      	b.n	3f752 <_malloc_r+0x9a>
   3fbde:	f109 0108 	add.w	r1, r9, #8
   3fbe2:	4630      	mov	r0, r6
   3fbe4:	9301      	str	r3, [sp, #4]
   3fbe6:	f003 ff3f 	bl	43a68 <_free_r>
   3fbea:	9b01      	ldr	r3, [sp, #4]
   3fbec:	681a      	ldr	r2, [r3, #0]
   3fbee:	e6d4      	b.n	3f99a <_malloc_r+0x2e2>
   3fbf0:	f240 5054 	movw	r0, #1364	; 0x554
   3fbf4:	4281      	cmp	r1, r0
   3fbf6:	d805      	bhi.n	3fc04 <_malloc_r+0x54c>
   3fbf8:	0c99      	lsrs	r1, r3, #18
   3fbfa:	f101 007d 	add.w	r0, r1, #125	; 0x7d
   3fbfe:	317c      	adds	r1, #124	; 0x7c
   3fc00:	00c0      	lsls	r0, r0, #3
   3fc02:	e74a      	b.n	3fa9a <_malloc_r+0x3e2>
   3fc04:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
   3fc08:	217e      	movs	r1, #126	; 0x7e
   3fc0a:	e746      	b.n	3fa9a <_malloc_r+0x3e2>
   3fc0c:	687b      	ldr	r3, [r7, #4]
   3fc0e:	e78d      	b.n	3fb2c <_malloc_r+0x474>
   3fc10:	2002a3fc 	.word	0x2002a3fc

0003fc14 <__ascii_mbtowc>:
   3fc14:	b082      	sub	sp, #8
   3fc16:	b149      	cbz	r1, 3fc2c <__ascii_mbtowc+0x18>
   3fc18:	b15a      	cbz	r2, 3fc32 <__ascii_mbtowc+0x1e>
   3fc1a:	b16b      	cbz	r3, 3fc38 <__ascii_mbtowc+0x24>
   3fc1c:	7813      	ldrb	r3, [r2, #0]
   3fc1e:	600b      	str	r3, [r1, #0]
   3fc20:	7812      	ldrb	r2, [r2, #0]
   3fc22:	1c10      	adds	r0, r2, #0
   3fc24:	bf18      	it	ne
   3fc26:	2001      	movne	r0, #1
   3fc28:	b002      	add	sp, #8
   3fc2a:	4770      	bx	lr
   3fc2c:	a901      	add	r1, sp, #4
   3fc2e:	2a00      	cmp	r2, #0
   3fc30:	d1f3      	bne.n	3fc1a <__ascii_mbtowc+0x6>
   3fc32:	4610      	mov	r0, r2
   3fc34:	b002      	add	sp, #8
   3fc36:	4770      	bx	lr
   3fc38:	f06f 0001 	mvn.w	r0, #1
   3fc3c:	e7f4      	b.n	3fc28 <__ascii_mbtowc+0x14>
   3fc3e:	bf00      	nop

0003fc40 <memchr>:
   3fc40:	0783      	lsls	r3, r0, #30
   3fc42:	b470      	push	{r4, r5, r6}
   3fc44:	b2cd      	uxtb	r5, r1
   3fc46:	d03b      	beq.n	3fcc0 <memchr+0x80>
   3fc48:	1e54      	subs	r4, r2, #1
   3fc4a:	b302      	cbz	r2, 3fc8e <memchr+0x4e>
   3fc4c:	7803      	ldrb	r3, [r0, #0]
   3fc4e:	42ab      	cmp	r3, r5
   3fc50:	d01e      	beq.n	3fc90 <memchr+0x50>
   3fc52:	1c43      	adds	r3, r0, #1
   3fc54:	e005      	b.n	3fc62 <memchr+0x22>
   3fc56:	f114 34ff 	adds.w	r4, r4, #4294967295
   3fc5a:	d318      	bcc.n	3fc8e <memchr+0x4e>
   3fc5c:	7802      	ldrb	r2, [r0, #0]
   3fc5e:	42aa      	cmp	r2, r5
   3fc60:	d016      	beq.n	3fc90 <memchr+0x50>
   3fc62:	f013 0f03 	tst.w	r3, #3
   3fc66:	4618      	mov	r0, r3
   3fc68:	f103 0301 	add.w	r3, r3, #1
   3fc6c:	d1f3      	bne.n	3fc56 <memchr+0x16>
   3fc6e:	2c03      	cmp	r4, #3
   3fc70:	d810      	bhi.n	3fc94 <memchr+0x54>
   3fc72:	b33c      	cbz	r4, 3fcc4 <memchr+0x84>
   3fc74:	7803      	ldrb	r3, [r0, #0]
   3fc76:	42ab      	cmp	r3, r5
   3fc78:	d00a      	beq.n	3fc90 <memchr+0x50>
   3fc7a:	4404      	add	r4, r0
   3fc7c:	1c43      	adds	r3, r0, #1
   3fc7e:	e002      	b.n	3fc86 <memchr+0x46>
   3fc80:	7802      	ldrb	r2, [r0, #0]
   3fc82:	42aa      	cmp	r2, r5
   3fc84:	d004      	beq.n	3fc90 <memchr+0x50>
   3fc86:	4618      	mov	r0, r3
   3fc88:	3301      	adds	r3, #1
   3fc8a:	4284      	cmp	r4, r0
   3fc8c:	d1f8      	bne.n	3fc80 <memchr+0x40>
   3fc8e:	2000      	movs	r0, #0
   3fc90:	bc70      	pop	{r4, r5, r6}
   3fc92:	4770      	bx	lr
   3fc94:	020a      	lsls	r2, r1, #8
   3fc96:	4601      	mov	r1, r0
   3fc98:	b292      	uxth	r2, r2
   3fc9a:	432a      	orrs	r2, r5
   3fc9c:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   3fca0:	4608      	mov	r0, r1
   3fca2:	3104      	adds	r1, #4
   3fca4:	6803      	ldr	r3, [r0, #0]
   3fca6:	4053      	eors	r3, r2
   3fca8:	f1a3 3601 	sub.w	r6, r3, #16843009	; 0x1010101
   3fcac:	ea26 0303 	bic.w	r3, r6, r3
   3fcb0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   3fcb4:	d1de      	bne.n	3fc74 <memchr+0x34>
   3fcb6:	3c04      	subs	r4, #4
   3fcb8:	4608      	mov	r0, r1
   3fcba:	2c03      	cmp	r4, #3
   3fcbc:	d8f0      	bhi.n	3fca0 <memchr+0x60>
   3fcbe:	e7d8      	b.n	3fc72 <memchr+0x32>
   3fcc0:	4614      	mov	r4, r2
   3fcc2:	e7d4      	b.n	3fc6e <memchr+0x2e>
   3fcc4:	4620      	mov	r0, r4
   3fcc6:	e7e3      	b.n	3fc90 <memchr+0x50>

0003fcc8 <memcmp>:
   3fcc8:	2a03      	cmp	r2, #3
   3fcca:	b470      	push	{r4, r5, r6}
   3fccc:	d912      	bls.n	3fcf4 <memcmp+0x2c>
   3fcce:	ea40 0501 	orr.w	r5, r0, r1
   3fcd2:	4604      	mov	r4, r0
   3fcd4:	460b      	mov	r3, r1
   3fcd6:	07ad      	lsls	r5, r5, #30
   3fcd8:	d11f      	bne.n	3fd1a <memcmp+0x52>
   3fcda:	4619      	mov	r1, r3
   3fcdc:	4620      	mov	r0, r4
   3fcde:	3304      	adds	r3, #4
   3fce0:	3404      	adds	r4, #4
   3fce2:	680d      	ldr	r5, [r1, #0]
   3fce4:	6806      	ldr	r6, [r0, #0]
   3fce6:	42ae      	cmp	r6, r5
   3fce8:	d117      	bne.n	3fd1a <memcmp+0x52>
   3fcea:	3a04      	subs	r2, #4
   3fcec:	4620      	mov	r0, r4
   3fcee:	4619      	mov	r1, r3
   3fcf0:	2a03      	cmp	r2, #3
   3fcf2:	d8f2      	bhi.n	3fcda <memcmp+0x12>
   3fcf4:	1e54      	subs	r4, r2, #1
   3fcf6:	b16a      	cbz	r2, 3fd14 <memcmp+0x4c>
   3fcf8:	7802      	ldrb	r2, [r0, #0]
   3fcfa:	780b      	ldrb	r3, [r1, #0]
   3fcfc:	429a      	cmp	r2, r3
   3fcfe:	d10e      	bne.n	3fd1e <memcmp+0x56>
   3fd00:	440c      	add	r4, r1
   3fd02:	e005      	b.n	3fd10 <memcmp+0x48>
   3fd04:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   3fd08:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   3fd0c:	429a      	cmp	r2, r3
   3fd0e:	d106      	bne.n	3fd1e <memcmp+0x56>
   3fd10:	42a1      	cmp	r1, r4
   3fd12:	d1f7      	bne.n	3fd04 <memcmp+0x3c>
   3fd14:	2000      	movs	r0, #0
   3fd16:	bc70      	pop	{r4, r5, r6}
   3fd18:	4770      	bx	lr
   3fd1a:	1e54      	subs	r4, r2, #1
   3fd1c:	e7ec      	b.n	3fcf8 <memcmp+0x30>
   3fd1e:	1ad0      	subs	r0, r2, r3
   3fd20:	bc70      	pop	{r4, r5, r6}
   3fd22:	4770      	bx	lr

0003fd24 <__memcpy_chk>:
   3fd24:	429a      	cmp	r2, r3
   3fd26:	b508      	push	{r3, lr}
   3fd28:	d80d      	bhi.n	3fd46 <__memcpy_chk+0x22>
   3fd2a:	4281      	cmp	r1, r0
   3fd2c:	d804      	bhi.n	3fd38 <__memcpy_chk+0x14>
   3fd2e:	188b      	adds	r3, r1, r2
   3fd30:	4298      	cmp	r0, r3
   3fd32:	d308      	bcc.n	3fd46 <__memcpy_chk+0x22>
   3fd34:	4281      	cmp	r1, r0
   3fd36:	d302      	bcc.n	3fd3e <__memcpy_chk+0x1a>
   3fd38:	1883      	adds	r3, r0, r2
   3fd3a:	4299      	cmp	r1, r3
   3fd3c:	d303      	bcc.n	3fd46 <__memcpy_chk+0x22>
   3fd3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3fd42:	f7da b8b5 	b.w	19eb0 <memcpy>
   3fd46:	f003 fbb1 	bl	434ac <__chk_fail>
   3fd4a:	bf00      	nop

0003fd4c <memset>:
   3fd4c:	b4f0      	push	{r4, r5, r6, r7}
   3fd4e:	0786      	lsls	r6, r0, #30
   3fd50:	d043      	beq.n	3fdda <memset+0x8e>
   3fd52:	1e54      	subs	r4, r2, #1
   3fd54:	2a00      	cmp	r2, #0
   3fd56:	d03e      	beq.n	3fdd6 <memset+0x8a>
   3fd58:	b2ca      	uxtb	r2, r1
   3fd5a:	4603      	mov	r3, r0
   3fd5c:	e002      	b.n	3fd64 <memset+0x18>
   3fd5e:	f114 34ff 	adds.w	r4, r4, #4294967295
   3fd62:	d338      	bcc.n	3fdd6 <memset+0x8a>
   3fd64:	f803 2b01 	strb.w	r2, [r3], #1
   3fd68:	079d      	lsls	r5, r3, #30
   3fd6a:	d1f8      	bne.n	3fd5e <memset+0x12>
   3fd6c:	2c03      	cmp	r4, #3
   3fd6e:	d92b      	bls.n	3fdc8 <memset+0x7c>
   3fd70:	b2cd      	uxtb	r5, r1
   3fd72:	2c0f      	cmp	r4, #15
   3fd74:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   3fd78:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   3fd7c:	d916      	bls.n	3fdac <memset+0x60>
   3fd7e:	f1a4 0710 	sub.w	r7, r4, #16
   3fd82:	f103 0620 	add.w	r6, r3, #32
   3fd86:	f103 0210 	add.w	r2, r3, #16
   3fd8a:	093f      	lsrs	r7, r7, #4
   3fd8c:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   3fd90:	e942 5504 	strd	r5, r5, [r2, #-16]
   3fd94:	e942 5502 	strd	r5, r5, [r2, #-8]
   3fd98:	3210      	adds	r2, #16
   3fd9a:	42b2      	cmp	r2, r6
   3fd9c:	d1f8      	bne.n	3fd90 <memset+0x44>
   3fd9e:	f004 040f 	and.w	r4, r4, #15
   3fda2:	3701      	adds	r7, #1
   3fda4:	2c03      	cmp	r4, #3
   3fda6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   3fdaa:	d90d      	bls.n	3fdc8 <memset+0x7c>
   3fdac:	461e      	mov	r6, r3
   3fdae:	4622      	mov	r2, r4
   3fdb0:	3a04      	subs	r2, #4
   3fdb2:	f846 5b04 	str.w	r5, [r6], #4
   3fdb6:	2a03      	cmp	r2, #3
   3fdb8:	d8fa      	bhi.n	3fdb0 <memset+0x64>
   3fdba:	1f22      	subs	r2, r4, #4
   3fdbc:	f004 0403 	and.w	r4, r4, #3
   3fdc0:	f022 0203 	bic.w	r2, r2, #3
   3fdc4:	3204      	adds	r2, #4
   3fdc6:	4413      	add	r3, r2
   3fdc8:	b12c      	cbz	r4, 3fdd6 <memset+0x8a>
   3fdca:	b2c9      	uxtb	r1, r1
   3fdcc:	441c      	add	r4, r3
   3fdce:	f803 1b01 	strb.w	r1, [r3], #1
   3fdd2:	429c      	cmp	r4, r3
   3fdd4:	d1fb      	bne.n	3fdce <memset+0x82>
   3fdd6:	bcf0      	pop	{r4, r5, r6, r7}
   3fdd8:	4770      	bx	lr
   3fdda:	4614      	mov	r4, r2
   3fddc:	4603      	mov	r3, r0
   3fdde:	e7c5      	b.n	3fd6c <memset+0x20>

0003fde0 <__malloc_lock>:
   3fde0:	4801      	ldr	r0, [pc, #4]	; (3fde8 <__malloc_lock+0x8>)
   3fde2:	f004 bccb 	b.w	4477c <__retarget_lock_acquire_recursive>
   3fde6:	bf00      	nop
   3fde8:	2002c4d8 	.word	0x2002c4d8

0003fdec <__malloc_unlock>:
   3fdec:	4801      	ldr	r0, [pc, #4]	; (3fdf4 <__malloc_unlock+0x8>)
   3fdee:	f004 bcc7 	b.w	44780 <__retarget_lock_release_recursive>
   3fdf2:	bf00      	nop
   3fdf4:	2002c4d8 	.word	0x2002c4d8

0003fdf8 <srand>:
   3fdf8:	4b02      	ldr	r3, [pc, #8]	; (3fe04 <srand+0xc>)
   3fdfa:	2200      	movs	r2, #0
   3fdfc:	681b      	ldr	r3, [r3, #0]
   3fdfe:	e9c3 022a 	strd	r0, r2, [r3, #168]	; 0xa8
   3fe02:	4770      	bx	lr
   3fe04:	20031c24 	.word	0x20031c24

0003fe08 <rand>:
   3fe08:	4b0b      	ldr	r3, [pc, #44]	; (3fe38 <rand+0x30>)
   3fe0a:	6819      	ldr	r1, [r3, #0]
   3fe0c:	b430      	push	{r4, r5}
   3fe0e:	e9d1 202a 	ldrd	r2, r0, [r1, #168]	; 0xa8
   3fe12:	4c0a      	ldr	r4, [pc, #40]	; (3fe3c <rand+0x34>)
   3fe14:	4d0a      	ldr	r5, [pc, #40]	; (3fe40 <rand+0x38>)
   3fe16:	fb04 f402 	mul.w	r4, r4, r2
   3fe1a:	fba2 2305 	umull	r2, r3, r2, r5
   3fe1e:	fb05 4000 	mla	r0, r5, r0, r4
   3fe22:	1c54      	adds	r4, r2, #1
   3fe24:	4403      	add	r3, r0
   3fe26:	f143 0500 	adc.w	r5, r3, #0
   3fe2a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
   3fe2e:	e9c1 452a 	strd	r4, r5, [r1, #168]	; 0xa8
   3fe32:	bc30      	pop	{r4, r5}
   3fe34:	4770      	bx	lr
   3fe36:	bf00      	nop
   3fe38:	20031c24 	.word	0x20031c24
   3fe3c:	5851f42d 	.word	0x5851f42d
   3fe40:	4c957f2d 	.word	0x4c957f2d

0003fe44 <realloc>:
   3fe44:	4b02      	ldr	r3, [pc, #8]	; (3fe50 <realloc+0xc>)
   3fe46:	460a      	mov	r2, r1
   3fe48:	4601      	mov	r1, r0
   3fe4a:	6818      	ldr	r0, [r3, #0]
   3fe4c:	f000 b802 	b.w	3fe54 <_realloc_r>
   3fe50:	20031c24 	.word	0x20031c24

0003fe54 <_realloc_r>:
   3fe54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fe58:	4692      	mov	sl, r2
   3fe5a:	b083      	sub	sp, #12
   3fe5c:	2900      	cmp	r1, #0
   3fe5e:	d07a      	beq.n	3ff56 <_realloc_r+0x102>
   3fe60:	460d      	mov	r5, r1
   3fe62:	f10a 040b 	add.w	r4, sl, #11
   3fe66:	4680      	mov	r8, r0
   3fe68:	f7ff ffba 	bl	3fde0 <__malloc_lock>
   3fe6c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   3fe70:	2c16      	cmp	r4, #22
   3fe72:	f1a5 0708 	sub.w	r7, r5, #8
   3fe76:	f021 0603 	bic.w	r6, r1, #3
   3fe7a:	d842      	bhi.n	3ff02 <_realloc_r+0xae>
   3fe7c:	2210      	movs	r2, #16
   3fe7e:	2300      	movs	r3, #0
   3fe80:	4614      	mov	r4, r2
   3fe82:	4554      	cmp	r4, sl
   3fe84:	f0c0 80f7 	bcc.w	40076 <CONFIG_FLASH_LOAD_OFFSET+0x76>
   3fe88:	2b00      	cmp	r3, #0
   3fe8a:	f040 80f4 	bne.w	40076 <CONFIG_FLASH_LOAD_OFFSET+0x76>
   3fe8e:	4296      	cmp	r6, r2
   3fe90:	eb07 0906 	add.w	r9, r7, r6
   3fe94:	da49      	bge.n	3ff2a <_realloc_r+0xd6>
   3fe96:	4bc4      	ldr	r3, [pc, #784]	; (401a8 <CONFIG_FLASH_LOAD_OFFSET+0x1a8>)
   3fe98:	6898      	ldr	r0, [r3, #8]
   3fe9a:	4548      	cmp	r0, r9
   3fe9c:	d073      	beq.n	3ff86 <_realloc_r+0x132>
   3fe9e:	f8d9 0004 	ldr.w	r0, [r9, #4]
   3fea2:	f020 0301 	bic.w	r3, r0, #1
   3fea6:	444b      	add	r3, r9
   3fea8:	685b      	ldr	r3, [r3, #4]
   3feaa:	07db      	lsls	r3, r3, #31
   3feac:	d52e      	bpl.n	3ff0c <_realloc_r+0xb8>
   3feae:	07c9      	lsls	r1, r1, #31
   3feb0:	f140 8109 	bpl.w	400c6 <CONFIG_FLASH_LOAD_OFFSET+0xc6>
   3feb4:	4651      	mov	r1, sl
   3feb6:	4640      	mov	r0, r8
   3feb8:	f7ff fbfe 	bl	3f6b8 <_malloc_r>
   3febc:	4682      	mov	sl, r0
   3febe:	b1e0      	cbz	r0, 3fefa <_realloc_r+0xa6>
   3fec0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   3fec4:	f1a0 0208 	sub.w	r2, r0, #8
   3fec8:	f023 0301 	bic.w	r3, r3, #1
   3fecc:	443b      	add	r3, r7
   3fece:	4293      	cmp	r3, r2
   3fed0:	f000 8102 	beq.w	400d8 <CONFIG_FLASH_LOAD_OFFSET+0xd8>
   3fed4:	1f32      	subs	r2, r6, #4
   3fed6:	2a24      	cmp	r2, #36	; 0x24
   3fed8:	f200 810e 	bhi.w	400f8 <CONFIG_FLASH_LOAD_OFFSET+0xf8>
   3fedc:	2a13      	cmp	r2, #19
   3fede:	6829      	ldr	r1, [r5, #0]
   3fee0:	f200 80e6 	bhi.w	400b0 <CONFIG_FLASH_LOAD_OFFSET+0xb0>
   3fee4:	4603      	mov	r3, r0
   3fee6:	462a      	mov	r2, r5
   3fee8:	6019      	str	r1, [r3, #0]
   3feea:	6851      	ldr	r1, [r2, #4]
   3feec:	6059      	str	r1, [r3, #4]
   3feee:	6892      	ldr	r2, [r2, #8]
   3fef0:	609a      	str	r2, [r3, #8]
   3fef2:	4629      	mov	r1, r5
   3fef4:	4640      	mov	r0, r8
   3fef6:	f003 fdb7 	bl	43a68 <_free_r>
   3fefa:	4640      	mov	r0, r8
   3fefc:	f7ff ff76 	bl	3fdec <__malloc_unlock>
   3ff00:	e025      	b.n	3ff4e <_realloc_r+0xfa>
   3ff02:	f024 0407 	bic.w	r4, r4, #7
   3ff06:	4622      	mov	r2, r4
   3ff08:	0fe3      	lsrs	r3, r4, #31
   3ff0a:	e7ba      	b.n	3fe82 <_realloc_r+0x2e>
   3ff0c:	f020 0003 	bic.w	r0, r0, #3
   3ff10:	1833      	adds	r3, r6, r0
   3ff12:	4293      	cmp	r3, r2
   3ff14:	f2c0 8081 	blt.w	4001a <CONFIG_FLASH_LOAD_OFFSET+0x1a>
   3ff18:	f8d9 200c 	ldr.w	r2, [r9, #12]
   3ff1c:	461e      	mov	r6, r3
   3ff1e:	f8d9 1008 	ldr.w	r1, [r9, #8]
   3ff22:	eb07 0903 	add.w	r9, r7, r3
   3ff26:	60ca      	str	r2, [r1, #12]
   3ff28:	6091      	str	r1, [r2, #8]
   3ff2a:	1b33      	subs	r3, r6, r4
   3ff2c:	687a      	ldr	r2, [r7, #4]
   3ff2e:	2b0f      	cmp	r3, #15
   3ff30:	f002 0201 	and.w	r2, r2, #1
   3ff34:	d815      	bhi.n	3ff62 <_realloc_r+0x10e>
   3ff36:	4332      	orrs	r2, r6
   3ff38:	607a      	str	r2, [r7, #4]
   3ff3a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   3ff3e:	f043 0301 	orr.w	r3, r3, #1
   3ff42:	f8c9 3004 	str.w	r3, [r9, #4]
   3ff46:	4640      	mov	r0, r8
   3ff48:	46aa      	mov	sl, r5
   3ff4a:	f7ff ff4f 	bl	3fdec <__malloc_unlock>
   3ff4e:	4650      	mov	r0, sl
   3ff50:	b003      	add	sp, #12
   3ff52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ff56:	4611      	mov	r1, r2
   3ff58:	b003      	add	sp, #12
   3ff5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ff5e:	f7ff bbab 	b.w	3f6b8 <_malloc_r>
   3ff62:	4322      	orrs	r2, r4
   3ff64:	f043 0301 	orr.w	r3, r3, #1
   3ff68:	443c      	add	r4, r7
   3ff6a:	4640      	mov	r0, r8
   3ff6c:	607a      	str	r2, [r7, #4]
   3ff6e:	6063      	str	r3, [r4, #4]
   3ff70:	f104 0108 	add.w	r1, r4, #8
   3ff74:	f8d9 3004 	ldr.w	r3, [r9, #4]
   3ff78:	f043 0301 	orr.w	r3, r3, #1
   3ff7c:	f8c9 3004 	str.w	r3, [r9, #4]
   3ff80:	f003 fd72 	bl	43a68 <_free_r>
   3ff84:	e7df      	b.n	3ff46 <_realloc_r+0xf2>
   3ff86:	f8d0 9004 	ldr.w	r9, [r0, #4]
   3ff8a:	f104 0010 	add.w	r0, r4, #16
   3ff8e:	f029 0903 	bic.w	r9, r9, #3
   3ff92:	44b1      	add	r9, r6
   3ff94:	4581      	cmp	r9, r0
   3ff96:	f280 80b3 	bge.w	40100 <CONFIG_FLASH_LOAD_OFFSET+0x100>
   3ff9a:	07c9      	lsls	r1, r1, #31
   3ff9c:	d48a      	bmi.n	3feb4 <_realloc_r+0x60>
   3ff9e:	f855 1c08 	ldr.w	r1, [r5, #-8]
   3ffa2:	eba7 0b01 	sub.w	fp, r7, r1
   3ffa6:	f8db 1004 	ldr.w	r1, [fp, #4]
   3ffaa:	f021 0103 	bic.w	r1, r1, #3
   3ffae:	4489      	add	r9, r1
   3ffb0:	4548      	cmp	r0, r9
   3ffb2:	dc41      	bgt.n	40038 <CONFIG_FLASH_LOAD_OFFSET+0x38>
   3ffb4:	46da      	mov	sl, fp
   3ffb6:	1f32      	subs	r2, r6, #4
   3ffb8:	f8db 100c 	ldr.w	r1, [fp, #12]
   3ffbc:	f85a 0f08 	ldr.w	r0, [sl, #8]!
   3ffc0:	2a24      	cmp	r2, #36	; 0x24
   3ffc2:	60c1      	str	r1, [r0, #12]
   3ffc4:	6088      	str	r0, [r1, #8]
   3ffc6:	f200 80dc 	bhi.w	40182 <CONFIG_FLASH_LOAD_OFFSET+0x182>
   3ffca:	2a13      	cmp	r2, #19
   3ffcc:	6829      	ldr	r1, [r5, #0]
   3ffce:	f240 80d6 	bls.w	4017e <CONFIG_FLASH_LOAD_OFFSET+0x17e>
   3ffd2:	f8cb 1008 	str.w	r1, [fp, #8]
   3ffd6:	2a1b      	cmp	r2, #27
   3ffd8:	6869      	ldr	r1, [r5, #4]
   3ffda:	f8cb 100c 	str.w	r1, [fp, #12]
   3ffde:	68a9      	ldr	r1, [r5, #8]
   3ffe0:	f200 80d6 	bhi.w	40190 <CONFIG_FLASH_LOAD_OFFSET+0x190>
   3ffe4:	f10b 0210 	add.w	r2, fp, #16
   3ffe8:	3508      	adds	r5, #8
   3ffea:	6011      	str	r1, [r2, #0]
   3ffec:	6869      	ldr	r1, [r5, #4]
   3ffee:	6051      	str	r1, [r2, #4]
   3fff0:	68a9      	ldr	r1, [r5, #8]
   3fff2:	6091      	str	r1, [r2, #8]
   3fff4:	eba9 0904 	sub.w	r9, r9, r4
   3fff8:	eb0b 0104 	add.w	r1, fp, r4
   3fffc:	4640      	mov	r0, r8
   3fffe:	f049 0201 	orr.w	r2, r9, #1
   40002:	6099      	str	r1, [r3, #8]
   40004:	604a      	str	r2, [r1, #4]
   40006:	f8db 3004 	ldr.w	r3, [fp, #4]
   4000a:	f003 0301 	and.w	r3, r3, #1
   4000e:	431c      	orrs	r4, r3
   40010:	f8cb 4004 	str.w	r4, [fp, #4]
   40014:	f7ff feea 	bl	3fdec <__malloc_unlock>
   40018:	e799      	b.n	3ff4e <_realloc_r+0xfa>
   4001a:	07cb      	lsls	r3, r1, #31
   4001c:	f53f af4a 	bmi.w	3feb4 <_realloc_r+0x60>
   40020:	f855 3c08 	ldr.w	r3, [r5, #-8]
   40024:	eba7 0b03 	sub.w	fp, r7, r3
   40028:	f8db 1004 	ldr.w	r1, [fp, #4]
   4002c:	f021 0103 	bic.w	r1, r1, #3
   40030:	4408      	add	r0, r1
   40032:	1983      	adds	r3, r0, r6
   40034:	4293      	cmp	r3, r2
   40036:	da24      	bge.n	40082 <CONFIG_FLASH_LOAD_OFFSET+0x82>
   40038:	1873      	adds	r3, r6, r1
   4003a:	4293      	cmp	r3, r2
   4003c:	f6ff af3a 	blt.w	3feb4 <_realloc_r+0x60>
   40040:	46da      	mov	sl, fp
   40042:	1f32      	subs	r2, r6, #4
   40044:	f8db 100c 	ldr.w	r1, [fp, #12]
   40048:	eb0b 0903 	add.w	r9, fp, r3
   4004c:	f85a 0f08 	ldr.w	r0, [sl, #8]!
   40050:	2a24      	cmp	r2, #36	; 0x24
   40052:	60c1      	str	r1, [r0, #12]
   40054:	6088      	str	r0, [r1, #8]
   40056:	d847      	bhi.n	400e8 <CONFIG_FLASH_LOAD_OFFSET+0xe8>
   40058:	2a13      	cmp	r2, #19
   4005a:	6829      	ldr	r1, [r5, #0]
   4005c:	d91e      	bls.n	4009c <CONFIG_FLASH_LOAD_OFFSET+0x9c>
   4005e:	f8cb 1008 	str.w	r1, [fp, #8]
   40062:	2a1b      	cmp	r2, #27
   40064:	6869      	ldr	r1, [r5, #4]
   40066:	f8cb 100c 	str.w	r1, [fp, #12]
   4006a:	68a9      	ldr	r1, [r5, #8]
   4006c:	d85b      	bhi.n	40126 <CONFIG_FLASH_LOAD_OFFSET+0x126>
   4006e:	f10b 0210 	add.w	r2, fp, #16
   40072:	3508      	adds	r5, #8
   40074:	e013      	b.n	4009e <CONFIG_FLASH_LOAD_OFFSET+0x9e>
   40076:	230c      	movs	r3, #12
   40078:	f04f 0a00 	mov.w	sl, #0
   4007c:	f8c8 3000 	str.w	r3, [r8]
   40080:	e765      	b.n	3ff4e <_realloc_r+0xfa>
   40082:	f8d9 100c 	ldr.w	r1, [r9, #12]
   40086:	46da      	mov	sl, fp
   40088:	f8d9 0008 	ldr.w	r0, [r9, #8]
   4008c:	1f32      	subs	r2, r6, #4
   4008e:	eb0b 0903 	add.w	r9, fp, r3
   40092:	60c1      	str	r1, [r0, #12]
   40094:	6088      	str	r0, [r1, #8]
   40096:	f8db 100c 	ldr.w	r1, [fp, #12]
   4009a:	e7d7      	b.n	4004c <CONFIG_FLASH_LOAD_OFFSET+0x4c>
   4009c:	4652      	mov	r2, sl
   4009e:	6011      	str	r1, [r2, #0]
   400a0:	461e      	mov	r6, r3
   400a2:	686b      	ldr	r3, [r5, #4]
   400a4:	465f      	mov	r7, fp
   400a6:	6053      	str	r3, [r2, #4]
   400a8:	68ab      	ldr	r3, [r5, #8]
   400aa:	4655      	mov	r5, sl
   400ac:	6093      	str	r3, [r2, #8]
   400ae:	e73c      	b.n	3ff2a <_realloc_r+0xd6>
   400b0:	6001      	str	r1, [r0, #0]
   400b2:	2a1b      	cmp	r2, #27
   400b4:	686b      	ldr	r3, [r5, #4]
   400b6:	6043      	str	r3, [r0, #4]
   400b8:	d841      	bhi.n	4013e <CONFIG_FLASH_LOAD_OFFSET+0x13e>
   400ba:	f105 0208 	add.w	r2, r5, #8
   400be:	f100 0308 	add.w	r3, r0, #8
   400c2:	68a9      	ldr	r1, [r5, #8]
   400c4:	e710      	b.n	3fee8 <_realloc_r+0x94>
   400c6:	f855 3c08 	ldr.w	r3, [r5, #-8]
   400ca:	eba7 0b03 	sub.w	fp, r7, r3
   400ce:	f8db 1004 	ldr.w	r1, [fp, #4]
   400d2:	f021 0103 	bic.w	r1, r1, #3
   400d6:	e7af      	b.n	40038 <CONFIG_FLASH_LOAD_OFFSET+0x38>
   400d8:	f850 3c04 	ldr.w	r3, [r0, #-4]
   400dc:	f023 0303 	bic.w	r3, r3, #3
   400e0:	441e      	add	r6, r3
   400e2:	eb07 0906 	add.w	r9, r7, r6
   400e6:	e720      	b.n	3ff2a <_realloc_r+0xd6>
   400e8:	4629      	mov	r1, r5
   400ea:	4650      	mov	r0, sl
   400ec:	461e      	mov	r6, r3
   400ee:	465f      	mov	r7, fp
   400f0:	f004 fc04 	bl	448fc <memmove>
   400f4:	4655      	mov	r5, sl
   400f6:	e718      	b.n	3ff2a <_realloc_r+0xd6>
   400f8:	4629      	mov	r1, r5
   400fa:	f004 fbff 	bl	448fc <memmove>
   400fe:	e6f8      	b.n	3fef2 <_realloc_r+0x9e>
   40100:	eba9 0904 	sub.w	r9, r9, r4
   40104:	4427      	add	r7, r4
   40106:	4640      	mov	r0, r8
   40108:	46aa      	mov	sl, r5
   4010a:	f049 0201 	orr.w	r2, r9, #1
   4010e:	609f      	str	r7, [r3, #8]
   40110:	607a      	str	r2, [r7, #4]
   40112:	f855 3c04 	ldr.w	r3, [r5, #-4]
   40116:	f003 0301 	and.w	r3, r3, #1
   4011a:	431c      	orrs	r4, r3
   4011c:	f845 4c04 	str.w	r4, [r5, #-4]
   40120:	f7ff fe64 	bl	3fdec <__malloc_unlock>
   40124:	e713      	b.n	3ff4e <_realloc_r+0xfa>
   40126:	f8cb 1010 	str.w	r1, [fp, #16]
   4012a:	2a24      	cmp	r2, #36	; 0x24
   4012c:	68e9      	ldr	r1, [r5, #12]
   4012e:	f8cb 1014 	str.w	r1, [fp, #20]
   40132:	6929      	ldr	r1, [r5, #16]
   40134:	d00f      	beq.n	40156 <CONFIG_FLASH_LOAD_OFFSET+0x156>
   40136:	f10b 0218 	add.w	r2, fp, #24
   4013a:	3510      	adds	r5, #16
   4013c:	e7af      	b.n	4009e <CONFIG_FLASH_LOAD_OFFSET+0x9e>
   4013e:	68ab      	ldr	r3, [r5, #8]
   40140:	2a24      	cmp	r2, #36	; 0x24
   40142:	6083      	str	r3, [r0, #8]
   40144:	68eb      	ldr	r3, [r5, #12]
   40146:	60c3      	str	r3, [r0, #12]
   40148:	d00f      	beq.n	4016a <CONFIG_FLASH_LOAD_OFFSET+0x16a>
   4014a:	f105 0210 	add.w	r2, r5, #16
   4014e:	f100 0310 	add.w	r3, r0, #16
   40152:	6929      	ldr	r1, [r5, #16]
   40154:	e6c8      	b.n	3fee8 <_realloc_r+0x94>
   40156:	f8cb 1018 	str.w	r1, [fp, #24]
   4015a:	f10b 0220 	add.w	r2, fp, #32
   4015e:	6969      	ldr	r1, [r5, #20]
   40160:	3518      	adds	r5, #24
   40162:	f8cb 101c 	str.w	r1, [fp, #28]
   40166:	6829      	ldr	r1, [r5, #0]
   40168:	e799      	b.n	4009e <CONFIG_FLASH_LOAD_OFFSET+0x9e>
   4016a:	6929      	ldr	r1, [r5, #16]
   4016c:	f105 0218 	add.w	r2, r5, #24
   40170:	f100 0318 	add.w	r3, r0, #24
   40174:	6101      	str	r1, [r0, #16]
   40176:	6969      	ldr	r1, [r5, #20]
   40178:	6141      	str	r1, [r0, #20]
   4017a:	69a9      	ldr	r1, [r5, #24]
   4017c:	e6b4      	b.n	3fee8 <_realloc_r+0x94>
   4017e:	4652      	mov	r2, sl
   40180:	e733      	b.n	3ffea <_realloc_r+0x196>
   40182:	4629      	mov	r1, r5
   40184:	4650      	mov	r0, sl
   40186:	9301      	str	r3, [sp, #4]
   40188:	f004 fbb8 	bl	448fc <memmove>
   4018c:	9b01      	ldr	r3, [sp, #4]
   4018e:	e731      	b.n	3fff4 <_realloc_r+0x1a0>
   40190:	f8cb 1010 	str.w	r1, [fp, #16]
   40194:	2a24      	cmp	r2, #36	; 0x24
   40196:	68e9      	ldr	r1, [r5, #12]
   40198:	f8cb 1014 	str.w	r1, [fp, #20]
   4019c:	6929      	ldr	r1, [r5, #16]
   4019e:	d005      	beq.n	401ac <CONFIG_FLASH_LOAD_OFFSET+0x1ac>
   401a0:	f10b 0218 	add.w	r2, fp, #24
   401a4:	3510      	adds	r5, #16
   401a6:	e720      	b.n	3ffea <_realloc_r+0x196>
   401a8:	20031d94 	.word	0x20031d94
   401ac:	f8cb 1018 	str.w	r1, [fp, #24]
   401b0:	f10b 0220 	add.w	r2, fp, #32
   401b4:	6969      	ldr	r1, [r5, #20]
   401b6:	3518      	adds	r5, #24
   401b8:	f8cb 101c 	str.w	r1, [fp, #28]
   401bc:	6829      	ldr	r1, [r5, #0]
   401be:	e714      	b.n	3ffea <_realloc_r+0x196>

000401c0 <_sbrk_r>:
   401c0:	b538      	push	{r3, r4, r5, lr}
   401c2:	2300      	movs	r3, #0
   401c4:	4c06      	ldr	r4, [pc, #24]	; (401e0 <_sbrk_r+0x20>)
   401c6:	4605      	mov	r5, r0
   401c8:	4608      	mov	r0, r1
   401ca:	6023      	str	r3, [r4, #0]
   401cc:	f7e3 f934 	bl	23438 <_sbrk>
   401d0:	1c43      	adds	r3, r0, #1
   401d2:	d000      	beq.n	401d6 <_sbrk_r+0x16>
   401d4:	bd38      	pop	{r3, r4, r5, pc}
   401d6:	6823      	ldr	r3, [r4, #0]
   401d8:	2b00      	cmp	r3, #0
   401da:	d0fb      	beq.n	401d4 <_sbrk_r+0x14>
   401dc:	602b      	str	r3, [r5, #0]
   401de:	bd38      	pop	{r3, r4, r5, pc}
   401e0:	2002c4ec 	.word	0x2002c4ec

000401e4 <snprintf>:
   401e4:	b40c      	push	{r2, r3}
   401e6:	4b22      	ldr	r3, [pc, #136]	; (40270 <snprintf+0x8c>)
   401e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   401ea:	1e0c      	subs	r4, r1, #0
   401ec:	b09d      	sub	sp, #116	; 0x74
   401ee:	681d      	ldr	r5, [r3, #0]
   401f0:	db39      	blt.n	40266 <snprintf+0x82>
   401f2:	f44f 7302 	mov.w	r3, #520	; 0x208
   401f6:	9002      	str	r0, [sp, #8]
   401f8:	9006      	str	r0, [sp, #24]
   401fa:	f8ad 3014 	strh.w	r3, [sp, #20]
   401fe:	d01a      	beq.n	40236 <snprintf+0x52>
   40200:	a823      	add	r0, sp, #140	; 0x8c
   40202:	3c01      	subs	r4, #1
   40204:	f64f 76ff 	movw	r6, #65535	; 0xffff
   40208:	9a22      	ldr	r2, [sp, #136]	; 0x88
   4020a:	4603      	mov	r3, r0
   4020c:	9001      	str	r0, [sp, #4]
   4020e:	a902      	add	r1, sp, #8
   40210:	4628      	mov	r0, r5
   40212:	9404      	str	r4, [sp, #16]
   40214:	9407      	str	r4, [sp, #28]
   40216:	f8ad 6016 	strh.w	r6, [sp, #22]
   4021a:	f7db fb51 	bl	1b8c0 <_svfprintf_r>
   4021e:	1c42      	adds	r2, r0, #1
   40220:	da01      	bge.n	40226 <snprintf+0x42>
   40222:	238b      	movs	r3, #139	; 0x8b
   40224:	602b      	str	r3, [r5, #0]
   40226:	9b02      	ldr	r3, [sp, #8]
   40228:	2200      	movs	r2, #0
   4022a:	701a      	strb	r2, [r3, #0]
   4022c:	b01d      	add	sp, #116	; 0x74
   4022e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   40232:	b002      	add	sp, #8
   40234:	4770      	bx	lr
   40236:	ae23      	add	r6, sp, #140	; 0x8c
   40238:	f64f 77ff 	movw	r7, #65535	; 0xffff
   4023c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   4023e:	a902      	add	r1, sp, #8
   40240:	4633      	mov	r3, r6
   40242:	4628      	mov	r0, r5
   40244:	9404      	str	r4, [sp, #16]
   40246:	9407      	str	r4, [sp, #28]
   40248:	9601      	str	r6, [sp, #4]
   4024a:	f8ad 7016 	strh.w	r7, [sp, #22]
   4024e:	f7db fb37 	bl	1b8c0 <_svfprintf_r>
   40252:	1c43      	adds	r3, r0, #1
   40254:	db04      	blt.n	40260 <snprintf+0x7c>
   40256:	b01d      	add	sp, #116	; 0x74
   40258:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   4025c:	b002      	add	sp, #8
   4025e:	4770      	bx	lr
   40260:	238b      	movs	r3, #139	; 0x8b
   40262:	602b      	str	r3, [r5, #0]
   40264:	e7f7      	b.n	40256 <snprintf+0x72>
   40266:	238b      	movs	r3, #139	; 0x8b
   40268:	f04f 30ff 	mov.w	r0, #4294967295
   4026c:	602b      	str	r3, [r5, #0]
   4026e:	e7f2      	b.n	40256 <snprintf+0x72>
   40270:	20031c24 	.word	0x20031c24

00040274 <__sprintf_chk>:
   40274:	b408      	push	{r3}
   40276:	b510      	push	{r4, lr}
   40278:	b083      	sub	sp, #12
   4027a:	1e14      	subs	r4, r2, #0
   4027c:	ab05      	add	r3, sp, #20
   4027e:	f853 1b04 	ldr.w	r1, [r3], #4
   40282:	9301      	str	r3, [sp, #4]
   40284:	db0c      	blt.n	402a0 <__sprintf_chk+0x2c>
   40286:	460a      	mov	r2, r1
   40288:	4621      	mov	r1, r4
   4028a:	f003 f84d 	bl	43328 <vsnprintf>
   4028e:	2800      	cmp	r0, #0
   40290:	db01      	blt.n	40296 <__sprintf_chk+0x22>
   40292:	42a0      	cmp	r0, r4
   40294:	d20c      	bcs.n	402b0 <__sprintf_chk+0x3c>
   40296:	b003      	add	sp, #12
   40298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   4029c:	b001      	add	sp, #4
   4029e:	4770      	bx	lr
   402a0:	461a      	mov	r2, r3
   402a2:	f003 f867 	bl	43374 <vsprintf>
   402a6:	b003      	add	sp, #12
   402a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   402ac:	b001      	add	sp, #4
   402ae:	4770      	bx	lr
   402b0:	f003 f8fc 	bl	434ac <__chk_fail>

000402b4 <sscanf>:
   402b4:	b40e      	push	{r1, r2, r3}
   402b6:	b5f0      	push	{r4, r5, r6, r7, lr}
   402b8:	b09c      	sub	sp, #112	; 0x70
   402ba:	f44f 7201 	mov.w	r2, #516	; 0x204
   402be:	2500      	movs	r5, #0
   402c0:	4f10      	ldr	r7, [pc, #64]	; (40304 <sscanf+0x50>)
   402c2:	ac21      	add	r4, sp, #132	; 0x84
   402c4:	f8ad 2014 	strh.w	r2, [sp, #20]
   402c8:	9002      	str	r0, [sp, #8]
   402ca:	f854 6b04 	ldr.w	r6, [r4], #4
   402ce:	9006      	str	r0, [sp, #24]
   402d0:	f000 f958 	bl	40584 <strlen>
   402d4:	4b0c      	ldr	r3, [pc, #48]	; (40308 <sscanf+0x54>)
   402d6:	4601      	mov	r1, r0
   402d8:	4632      	mov	r2, r6
   402da:	f64f 76ff 	movw	r6, #65535	; 0xffff
   402de:	9103      	str	r1, [sp, #12]
   402e0:	9107      	str	r1, [sp, #28]
   402e2:	a902      	add	r1, sp, #8
   402e4:	6818      	ldr	r0, [r3, #0]
   402e6:	4623      	mov	r3, r4
   402e8:	9401      	str	r4, [sp, #4]
   402ea:	970a      	str	r7, [sp, #40]	; 0x28
   402ec:	950e      	str	r5, [sp, #56]	; 0x38
   402ee:	9513      	str	r5, [sp, #76]	; 0x4c
   402f0:	f8ad 6016 	strh.w	r6, [sp, #22]
   402f4:	f000 fdf0 	bl	40ed8 <__ssvfscanf_r>
   402f8:	b01c      	add	sp, #112	; 0x70
   402fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   402fe:	b003      	add	sp, #12
   40300:	4770      	bx	lr
   40302:	bf00      	nop
   40304:	00040331 	.word	0x00040331
   40308:	20031c24 	.word	0x20031c24

0004030c <__sread>:
   4030c:	b510      	push	{r4, lr}
   4030e:	460c      	mov	r4, r1
   40310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   40314:	f004 ffc4 	bl	452a0 <_read_r>
   40318:	2800      	cmp	r0, #0
   4031a:	db03      	blt.n	40324 <__sread+0x18>
   4031c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   4031e:	4403      	add	r3, r0
   40320:	6523      	str	r3, [r4, #80]	; 0x50
   40322:	bd10      	pop	{r4, pc}
   40324:	89a3      	ldrh	r3, [r4, #12]
   40326:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   4032a:	81a3      	strh	r3, [r4, #12]
   4032c:	bd10      	pop	{r4, pc}
   4032e:	bf00      	nop

00040330 <__seofread>:
   40330:	2000      	movs	r0, #0
   40332:	4770      	bx	lr

00040334 <__swrite>:
   40334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   40338:	461f      	mov	r7, r3
   4033a:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   4033e:	4616      	mov	r6, r2
   40340:	460c      	mov	r4, r1
   40342:	05da      	lsls	r2, r3, #23
   40344:	4605      	mov	r5, r0
   40346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   4034a:	d507      	bpl.n	4035c <__swrite+0x28>
   4034c:	2302      	movs	r3, #2
   4034e:	2200      	movs	r2, #0
   40350:	f004 fa18 	bl	44784 <_lseek_r>
   40354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   40358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   4035c:	f423 5080 	bic.w	r0, r3, #4096	; 0x1000
   40360:	4632      	mov	r2, r6
   40362:	463b      	mov	r3, r7
   40364:	81a0      	strh	r0, [r4, #12]
   40366:	4628      	mov	r0, r5
   40368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   4036c:	f003 b81a 	b.w	433a4 <_write_r>

00040370 <__sseek>:
   40370:	b510      	push	{r4, lr}
   40372:	460c      	mov	r4, r1
   40374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   40378:	f004 fa04 	bl	44784 <_lseek_r>
   4037c:	1c42      	adds	r2, r0, #1
   4037e:	89a3      	ldrh	r3, [r4, #12]
   40380:	d004      	beq.n	4038c <__sseek+0x1c>
   40382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   40386:	6520      	str	r0, [r4, #80]	; 0x50
   40388:	81a3      	strh	r3, [r4, #12]
   4038a:	bd10      	pop	{r4, pc}
   4038c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   40390:	81a3      	strh	r3, [r4, #12]
   40392:	bd10      	pop	{r4, pc}

00040394 <__sclose>:
   40394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   40398:	f003 b8a4 	b.w	434e4 <_close_r>

0004039c <strcat>:
   4039c:	0783      	lsls	r3, r0, #30
   4039e:	b510      	push	{r4, lr}
   403a0:	4604      	mov	r4, r0
   403a2:	d110      	bne.n	403c6 <strcat+0x2a>
   403a4:	6802      	ldr	r2, [r0, #0]
   403a6:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   403aa:	ea23 0302 	bic.w	r3, r3, r2
   403ae:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   403b2:	d108      	bne.n	403c6 <strcat+0x2a>
   403b4:	f850 2f04 	ldr.w	r2, [r0, #4]!
   403b8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   403bc:	ea23 0302 	bic.w	r3, r3, r2
   403c0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   403c4:	d0f6      	beq.n	403b4 <strcat+0x18>
   403c6:	7803      	ldrb	r3, [r0, #0]
   403c8:	b11b      	cbz	r3, 403d2 <strcat+0x36>
   403ca:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   403ce:	2b00      	cmp	r3, #0
   403d0:	d1fb      	bne.n	403ca <strcat+0x2e>
   403d2:	f000 f879 	bl	404c8 <strcpy>
   403d6:	4620      	mov	r0, r4
   403d8:	bd10      	pop	{r4, pc}
   403da:	bf00      	nop

000403dc <strchr>:
   403dc:	b2c9      	uxtb	r1, r1
   403de:	f000 0303 	and.w	r3, r0, #3
   403e2:	2900      	cmp	r1, #0
   403e4:	d043      	beq.n	4046e <strchr+0x92>
   403e6:	b17b      	cbz	r3, 40408 <strchr+0x2c>
   403e8:	7803      	ldrb	r3, [r0, #0]
   403ea:	2b00      	cmp	r3, #0
   403ec:	d069      	beq.n	404c2 <strchr+0xe6>
   403ee:	4299      	cmp	r1, r3
   403f0:	d03c      	beq.n	4046c <strchr+0x90>
   403f2:	1c43      	adds	r3, r0, #1
   403f4:	e005      	b.n	40402 <strchr+0x26>
   403f6:	f813 2b01 	ldrb.w	r2, [r3], #1
   403fa:	2a00      	cmp	r2, #0
   403fc:	d05f      	beq.n	404be <strchr+0xe2>
   403fe:	428a      	cmp	r2, r1
   40400:	d034      	beq.n	4046c <strchr+0x90>
   40402:	079a      	lsls	r2, r3, #30
   40404:	4618      	mov	r0, r3
   40406:	d1f6      	bne.n	403f6 <strchr+0x1a>
   40408:	b470      	push	{r4, r5, r6}
   4040a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   4040e:	6803      	ldr	r3, [r0, #0]
   40410:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   40414:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   40418:	ea86 0403 	eor.w	r4, r6, r3
   4041c:	ea22 0203 	bic.w	r2, r2, r3
   40420:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   40424:	ea23 0304 	bic.w	r3, r3, r4
   40428:	4313      	orrs	r3, r2
   4042a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   4042e:	d10f      	bne.n	40450 <strchr+0x74>
   40430:	f850 4f04 	ldr.w	r4, [r0, #4]!
   40434:	ea84 0506 	eor.w	r5, r4, r6
   40438:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   4043c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   40440:	ea23 0304 	bic.w	r3, r3, r4
   40444:	ea22 0205 	bic.w	r2, r2, r5
   40448:	4313      	orrs	r3, r2
   4044a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   4044e:	d0ef      	beq.n	40430 <strchr+0x54>
   40450:	7803      	ldrb	r3, [r0, #0]
   40452:	b143      	cbz	r3, 40466 <strchr+0x8a>
   40454:	4299      	cmp	r1, r3
   40456:	d102      	bne.n	4045e <strchr+0x82>
   40458:	e006      	b.n	40468 <strchr+0x8c>
   4045a:	428b      	cmp	r3, r1
   4045c:	d004      	beq.n	40468 <strchr+0x8c>
   4045e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   40462:	2b00      	cmp	r3, #0
   40464:	d1f9      	bne.n	4045a <strchr+0x7e>
   40466:	4618      	mov	r0, r3
   40468:	bc70      	pop	{r4, r5, r6}
   4046a:	4770      	bx	lr
   4046c:	4770      	bx	lr
   4046e:	b16b      	cbz	r3, 4048c <strchr+0xb0>
   40470:	7803      	ldrb	r3, [r0, #0]
   40472:	2b00      	cmp	r3, #0
   40474:	d0fa      	beq.n	4046c <strchr+0x90>
   40476:	1c43      	adds	r3, r0, #1
   40478:	e002      	b.n	40480 <strchr+0xa4>
   4047a:	7802      	ldrb	r2, [r0, #0]
   4047c:	2a00      	cmp	r2, #0
   4047e:	d0f5      	beq.n	4046c <strchr+0x90>
   40480:	f013 0f03 	tst.w	r3, #3
   40484:	4618      	mov	r0, r3
   40486:	f103 0301 	add.w	r3, r3, #1
   4048a:	d1f6      	bne.n	4047a <strchr+0x9e>
   4048c:	6802      	ldr	r2, [r0, #0]
   4048e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   40492:	ea23 0302 	bic.w	r3, r3, r2
   40496:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   4049a:	d108      	bne.n	404ae <strchr+0xd2>
   4049c:	f850 2f04 	ldr.w	r2, [r0, #4]!
   404a0:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   404a4:	ea23 0302 	bic.w	r3, r3, r2
   404a8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   404ac:	d0f6      	beq.n	4049c <strchr+0xc0>
   404ae:	7803      	ldrb	r3, [r0, #0]
   404b0:	2b00      	cmp	r3, #0
   404b2:	d0db      	beq.n	4046c <strchr+0x90>
   404b4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   404b8:	2b00      	cmp	r3, #0
   404ba:	d1fb      	bne.n	404b4 <strchr+0xd8>
   404bc:	4770      	bx	lr
   404be:	4610      	mov	r0, r2
   404c0:	4770      	bx	lr
   404c2:	4618      	mov	r0, r3
   404c4:	4770      	bx	lr
   404c6:	bf00      	nop

000404c8 <strcpy>:
   404c8:	ea80 0201 	eor.w	r2, r0, r1
   404cc:	4684      	mov	ip, r0
   404ce:	f012 0f03 	tst.w	r2, #3
   404d2:	d14f      	bne.n	40574 <strcpy+0xac>
   404d4:	f011 0f03 	tst.w	r1, #3
   404d8:	d132      	bne.n	40540 <strcpy+0x78>
   404da:	f84d 4d04 	str.w	r4, [sp, #-4]!
   404de:	f011 0f04 	tst.w	r1, #4
   404e2:	f851 3b04 	ldr.w	r3, [r1], #4
   404e6:	d00b      	beq.n	40500 <strcpy+0x38>
   404e8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   404ec:	439a      	bics	r2, r3
   404ee:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   404f2:	bf04      	itt	eq
   404f4:	f84c 3b04 	streq.w	r3, [ip], #4
   404f8:	f851 3b04 	ldreq.w	r3, [r1], #4
   404fc:	d116      	bne.n	4052c <strcpy+0x64>
   404fe:	bf00      	nop
   40500:	f851 4b04 	ldr.w	r4, [r1], #4
   40504:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   40508:	439a      	bics	r2, r3
   4050a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   4050e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   40512:	d10b      	bne.n	4052c <strcpy+0x64>
   40514:	f84c 3b04 	str.w	r3, [ip], #4
   40518:	43a2      	bics	r2, r4
   4051a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   4051e:	bf04      	itt	eq
   40520:	f851 3b04 	ldreq.w	r3, [r1], #4
   40524:	f84c 4b04 	streq.w	r4, [ip], #4
   40528:	d0ea      	beq.n	40500 <strcpy+0x38>
   4052a:	4623      	mov	r3, r4
   4052c:	f80c 3b01 	strb.w	r3, [ip], #1
   40530:	f013 0fff 	tst.w	r3, #255	; 0xff
   40534:	ea4f 2333 	mov.w	r3, r3, ror #8
   40538:	d1f8      	bne.n	4052c <strcpy+0x64>
   4053a:	f85d 4b04 	ldr.w	r4, [sp], #4
   4053e:	4770      	bx	lr
   40540:	f011 0f01 	tst.w	r1, #1
   40544:	d006      	beq.n	40554 <strcpy+0x8c>
   40546:	f811 2b01 	ldrb.w	r2, [r1], #1
   4054a:	f80c 2b01 	strb.w	r2, [ip], #1
   4054e:	2a00      	cmp	r2, #0
   40550:	bf08      	it	eq
   40552:	4770      	bxeq	lr
   40554:	f011 0f02 	tst.w	r1, #2
   40558:	d0bf      	beq.n	404da <strcpy+0x12>
   4055a:	f831 2b02 	ldrh.w	r2, [r1], #2
   4055e:	f012 0fff 	tst.w	r2, #255	; 0xff
   40562:	bf16      	itet	ne
   40564:	f82c 2b02 	strhne.w	r2, [ip], #2
   40568:	f88c 2000 	strbeq.w	r2, [ip]
   4056c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   40570:	d1b3      	bne.n	404da <strcpy+0x12>
   40572:	4770      	bx	lr
   40574:	f811 2b01 	ldrb.w	r2, [r1], #1
   40578:	f80c 2b01 	strb.w	r2, [ip], #1
   4057c:	2a00      	cmp	r2, #0
   4057e:	d1f9      	bne.n	40574 <strcpy+0xac>
   40580:	4770      	bx	lr
   40582:	bf00      	nop

00040584 <strlen>:
   40584:	f020 0103 	bic.w	r1, r0, #3
   40588:	f010 0003 	ands.w	r0, r0, #3
   4058c:	f1c0 0000 	rsb	r0, r0, #0
   40590:	f851 3b04 	ldr.w	r3, [r1], #4
   40594:	f100 0c04 	add.w	ip, r0, #4
   40598:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   4059c:	f06f 0200 	mvn.w	r2, #0
   405a0:	bf1c      	itt	ne
   405a2:	fa22 f20c 	lsrne.w	r2, r2, ip
   405a6:	4313      	orrne	r3, r2
   405a8:	f04f 0c01 	mov.w	ip, #1
   405ac:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   405b0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   405b4:	eba3 020c 	sub.w	r2, r3, ip
   405b8:	ea22 0203 	bic.w	r2, r2, r3
   405bc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   405c0:	bf04      	itt	eq
   405c2:	f851 3b04 	ldreq.w	r3, [r1], #4
   405c6:	3004      	addeq	r0, #4
   405c8:	d0f4      	beq.n	405b4 <strlen+0x30>
   405ca:	f1c2 0100 	rsb	r1, r2, #0
   405ce:	ea02 0201 	and.w	r2, r2, r1
   405d2:	fab2 f282 	clz	r2, r2
   405d6:	f1c2 021f 	rsb	r2, r2, #31
   405da:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   405de:	4770      	bx	lr

000405e0 <strncmp>:
   405e0:	2a00      	cmp	r2, #0
   405e2:	d03e      	beq.n	40662 <strncmp+0x82>
   405e4:	ea40 0301 	orr.w	r3, r0, r1
   405e8:	f013 0303 	ands.w	r3, r3, #3
   405ec:	b4f0      	push	{r4, r5, r6, r7}
   405ee:	d125      	bne.n	4063c <strncmp+0x5c>
   405f0:	2a03      	cmp	r2, #3
   405f2:	d923      	bls.n	4063c <strncmp+0x5c>
   405f4:	6804      	ldr	r4, [r0, #0]
   405f6:	680d      	ldr	r5, [r1, #0]
   405f8:	42ac      	cmp	r4, r5
   405fa:	d11f      	bne.n	4063c <strncmp+0x5c>
   405fc:	3a04      	subs	r2, #4
   405fe:	d02d      	beq.n	4065c <strncmp+0x7c>
   40600:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   40604:	ea25 0404 	bic.w	r4, r5, r4
   40608:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   4060c:	d126      	bne.n	4065c <strncmp+0x7c>
   4060e:	1d06      	adds	r6, r0, #4
   40610:	1d0d      	adds	r5, r1, #4
   40612:	e00d      	b.n	40630 <strncmp+0x50>
   40614:	f856 3b04 	ldr.w	r3, [r6], #4
   40618:	680f      	ldr	r7, [r1, #0]
   4061a:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   4061e:	42bb      	cmp	r3, r7
   40620:	ea24 0303 	bic.w	r3, r4, r3
   40624:	d10a      	bne.n	4063c <strncmp+0x5c>
   40626:	3a04      	subs	r2, #4
   40628:	d018      	beq.n	4065c <strncmp+0x7c>
   4062a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   4062e:	d115      	bne.n	4065c <strncmp+0x7c>
   40630:	2a03      	cmp	r2, #3
   40632:	4629      	mov	r1, r5
   40634:	4630      	mov	r0, r6
   40636:	f105 0504 	add.w	r5, r5, #4
   4063a:	d8eb      	bhi.n	40614 <strncmp+0x34>
   4063c:	7804      	ldrb	r4, [r0, #0]
   4063e:	3a01      	subs	r2, #1
   40640:	780b      	ldrb	r3, [r1, #0]
   40642:	42a3      	cmp	r3, r4
   40644:	d10f      	bne.n	40666 <strncmp+0x86>
   40646:	b14b      	cbz	r3, 4065c <strncmp+0x7c>
   40648:	b142      	cbz	r2, 4065c <strncmp+0x7c>
   4064a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
   4064e:	3a01      	subs	r2, #1
   40650:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   40654:	429c      	cmp	r4, r3
   40656:	d106      	bne.n	40666 <strncmp+0x86>
   40658:	2c00      	cmp	r4, #0
   4065a:	d1f5      	bne.n	40648 <strncmp+0x68>
   4065c:	2000      	movs	r0, #0
   4065e:	bcf0      	pop	{r4, r5, r6, r7}
   40660:	4770      	bx	lr
   40662:	4610      	mov	r0, r2
   40664:	4770      	bx	lr
   40666:	1ae0      	subs	r0, r4, r3
   40668:	bcf0      	pop	{r4, r5, r6, r7}
   4066a:	4770      	bx	lr

0004066c <strncpy>:
   4066c:	b470      	push	{r4, r5, r6}
   4066e:	ea40 0401 	orr.w	r4, r0, r1
   40672:	07a3      	lsls	r3, r4, #30
   40674:	d101      	bne.n	4067a <strncpy+0xe>
   40676:	2a03      	cmp	r2, #3
   40678:	d817      	bhi.n	406aa <strncpy+0x3e>
   4067a:	4606      	mov	r6, r0
   4067c:	b19a      	cbz	r2, 406a6 <strncpy+0x3a>
   4067e:	780c      	ldrb	r4, [r1, #0]
   40680:	3a01      	subs	r2, #1
   40682:	1c73      	adds	r3, r6, #1
   40684:	7034      	strb	r4, [r6, #0]
   40686:	b13c      	cbz	r4, 40698 <strncpy+0x2c>
   40688:	b16a      	cbz	r2, 406a6 <strncpy+0x3a>
   4068a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   4068e:	3a01      	subs	r2, #1
   40690:	f803 4b01 	strb.w	r4, [r3], #1
   40694:	2c00      	cmp	r4, #0
   40696:	d1f7      	bne.n	40688 <strncpy+0x1c>
   40698:	b12a      	cbz	r2, 406a6 <strncpy+0x3a>
   4069a:	441a      	add	r2, r3
   4069c:	2100      	movs	r1, #0
   4069e:	f803 1b01 	strb.w	r1, [r3], #1
   406a2:	4293      	cmp	r3, r2
   406a4:	d1fb      	bne.n	4069e <strncpy+0x32>
   406a6:	bc70      	pop	{r4, r5, r6}
   406a8:	4770      	bx	lr
   406aa:	460b      	mov	r3, r1
   406ac:	4606      	mov	r6, r0
   406ae:	4619      	mov	r1, r3
   406b0:	f853 5b04 	ldr.w	r5, [r3], #4
   406b4:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   406b8:	ea24 0405 	bic.w	r4, r4, r5
   406bc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   406c0:	d1dd      	bne.n	4067e <strncpy+0x12>
   406c2:	3a04      	subs	r2, #4
   406c4:	f846 5b04 	str.w	r5, [r6], #4
   406c8:	4619      	mov	r1, r3
   406ca:	2a03      	cmp	r2, #3
   406cc:	d8ef      	bhi.n	406ae <strncpy+0x42>
   406ce:	e7d5      	b.n	4067c <strncpy+0x10>

000406d0 <critical_factorization>:
   406d0:	f04f 0c01 	mov.w	ip, #1
   406d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   406d8:	4664      	mov	r4, ip
   406da:	2600      	movs	r6, #0
   406dc:	f04f 35ff 	mov.w	r5, #4294967295
   406e0:	1933      	adds	r3, r6, r4
   406e2:	1947      	adds	r7, r0, r5
   406e4:	428b      	cmp	r3, r1
   406e6:	d20c      	bcs.n	40702 <critical_factorization+0x32>
   406e8:	5d3f      	ldrb	r7, [r7, r4]
   406ea:	f810 e003 	ldrb.w	lr, [r0, r3]
   406ee:	45be      	cmp	lr, r7
   406f0:	d22c      	bcs.n	4074c <critical_factorization+0x7c>
   406f2:	461e      	mov	r6, r3
   406f4:	2401      	movs	r4, #1
   406f6:	eba3 0c05 	sub.w	ip, r3, r5
   406fa:	1947      	adds	r7, r0, r5
   406fc:	1933      	adds	r3, r6, r4
   406fe:	428b      	cmp	r3, r1
   40700:	d3f2      	bcc.n	406e8 <critical_factorization+0x18>
   40702:	f04f 0801 	mov.w	r8, #1
   40706:	2600      	movs	r6, #0
   40708:	f04f 37ff 	mov.w	r7, #4294967295
   4070c:	f8c2 c000 	str.w	ip, [r2]
   40710:	4644      	mov	r4, r8
   40712:	1933      	adds	r3, r6, r4
   40714:	eb00 0c07 	add.w	ip, r0, r7
   40718:	428b      	cmp	r3, r1
   4071a:	d20e      	bcs.n	4073a <critical_factorization+0x6a>
   4071c:	f81c c004 	ldrb.w	ip, [ip, r4]
   40720:	f810 e003 	ldrb.w	lr, [r0, r3]
   40724:	45e6      	cmp	lr, ip
   40726:	d918      	bls.n	4075a <critical_factorization+0x8a>
   40728:	461e      	mov	r6, r3
   4072a:	2401      	movs	r4, #1
   4072c:	eba3 0807 	sub.w	r8, r3, r7
   40730:	eb00 0c07 	add.w	ip, r0, r7
   40734:	1933      	adds	r3, r6, r4
   40736:	428b      	cmp	r3, r1
   40738:	d3f0      	bcc.n	4071c <critical_factorization+0x4c>
   4073a:	3701      	adds	r7, #1
   4073c:	1c68      	adds	r0, r5, #1
   4073e:	4287      	cmp	r7, r0
   40740:	d302      	bcc.n	40748 <critical_factorization+0x78>
   40742:	4638      	mov	r0, r7
   40744:	f8c2 8000 	str.w	r8, [r2]
   40748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   4074c:	d00c      	beq.n	40768 <critical_factorization+0x98>
   4074e:	f04f 0c01 	mov.w	ip, #1
   40752:	4635      	mov	r5, r6
   40754:	4664      	mov	r4, ip
   40756:	4466      	add	r6, ip
   40758:	e7c2      	b.n	406e0 <critical_factorization+0x10>
   4075a:	d00c      	beq.n	40776 <critical_factorization+0xa6>
   4075c:	f04f 0801 	mov.w	r8, #1
   40760:	4637      	mov	r7, r6
   40762:	4644      	mov	r4, r8
   40764:	4446      	add	r6, r8
   40766:	e7d4      	b.n	40712 <critical_factorization+0x42>
   40768:	4564      	cmp	r4, ip
   4076a:	f104 0401 	add.w	r4, r4, #1
   4076e:	d1b7      	bne.n	406e0 <critical_factorization+0x10>
   40770:	461e      	mov	r6, r3
   40772:	2401      	movs	r4, #1
   40774:	e7b4      	b.n	406e0 <critical_factorization+0x10>
   40776:	4544      	cmp	r4, r8
   40778:	f104 0401 	add.w	r4, r4, #1
   4077c:	d1c9      	bne.n	40712 <critical_factorization+0x42>
   4077e:	461e      	mov	r6, r3
   40780:	2401      	movs	r4, #1
   40782:	e7c6      	b.n	40712 <critical_factorization+0x42>

00040784 <two_way_long_needle>:
   40784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40788:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
   4078c:	4691      	mov	r9, r2
   4078e:	4605      	mov	r5, r0
   40790:	468b      	mov	fp, r1
   40792:	4610      	mov	r0, r2
   40794:	4619      	mov	r1, r3
   40796:	aa05      	add	r2, sp, #20
   40798:	461c      	mov	r4, r3
   4079a:	f7ff ff99 	bl	406d0 <critical_factorization>
   4079e:	ab05      	add	r3, sp, #20
   407a0:	4680      	mov	r8, r0
   407a2:	f20d 4214 	addw	r2, sp, #1044	; 0x414
   407a6:	f843 4f04 	str.w	r4, [r3, #4]!
   407aa:	4293      	cmp	r3, r2
   407ac:	d1fb      	bne.n	407a6 <two_way_long_needle+0x22>
   407ae:	9b05      	ldr	r3, [sp, #20]
   407b0:	eb09 0103 	add.w	r1, r9, r3
   407b4:	2c00      	cmp	r4, #0
   407b6:	f000 80e0 	beq.w	4097a <two_way_long_needle+0x1f6>
   407ba:	f104 3aff 	add.w	sl, r4, #4294967295
   407be:	f109 32ff 	add.w	r2, r9, #4294967295
   407c2:	4653      	mov	r3, sl
   407c4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   407c8:	ae06      	add	r6, sp, #24
   407ca:	f846 3020 	str.w	r3, [r6, r0, lsl #2]
   407ce:	f113 33ff 	adds.w	r3, r3, #4294967295
   407d2:	d2f7      	bcs.n	407c4 <two_way_long_needle+0x40>
   407d4:	4642      	mov	r2, r8
   407d6:	4648      	mov	r0, r9
   407d8:	f7ff fa76 	bl	3fcc8 <memcmp>
   407dc:	2800      	cmp	r0, #0
   407de:	d063      	beq.n	408a8 <two_way_long_needle+0x124>
   407e0:	eba4 0208 	sub.w	r2, r4, r8
   407e4:	f108 37ff 	add.w	r7, r8, #4294967295
   407e8:	f04f 0a00 	mov.w	sl, #0
   407ec:	4542      	cmp	r2, r8
   407ee:	eb09 0307 	add.w	r3, r9, r7
   407f2:	bf38      	it	cc
   407f4:	4642      	movcc	r2, r8
   407f6:	3201      	adds	r2, #1
   407f8:	9205      	str	r2, [sp, #20]
   407fa:	465a      	mov	r2, fp
   407fc:	46c3      	mov	fp, r8
   407fe:	4698      	mov	r8, r3
   40800:	eb0a 0604 	add.w	r6, sl, r4
   40804:	18a8      	adds	r0, r5, r2
   40806:	2100      	movs	r1, #0
   40808:	1ab2      	subs	r2, r6, r2
   4080a:	f7ff fa19 	bl	3fc40 <memchr>
   4080e:	2e00      	cmp	r6, #0
   40810:	d045      	beq.n	4089e <two_way_long_needle+0x11a>
   40812:	2800      	cmp	r0, #0
   40814:	d143      	bne.n	4089e <two_way_long_needle+0x11a>
   40816:	19ab      	adds	r3, r5, r6
   40818:	aa06      	add	r2, sp, #24
   4081a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   4081e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   40822:	bb9b      	cbnz	r3, 4088c <two_way_long_needle+0x108>
   40824:	1e61      	subs	r1, r4, #1
   40826:	458b      	cmp	fp, r1
   40828:	d215      	bcs.n	40856 <two_way_long_needle+0xd2>
   4082a:	eb0a 020b 	add.w	r2, sl, fp
   4082e:	f819 300b 	ldrb.w	r3, [r9, fp]
   40832:	eb09 000b 	add.w	r0, r9, fp
   40836:	f815 c002 	ldrb.w	ip, [r5, r2]
   4083a:	442a      	add	r2, r5
   4083c:	4563      	cmp	r3, ip
   4083e:	465b      	mov	r3, fp
   40840:	d006      	beq.n	40850 <two_way_long_needle+0xcc>
   40842:	e026      	b.n	40892 <two_way_long_needle+0x10e>
   40844:	f810 ef01 	ldrb.w	lr, [r0, #1]!
   40848:	f812 cf01 	ldrb.w	ip, [r2, #1]!
   4084c:	45e6      	cmp	lr, ip
   4084e:	d120      	bne.n	40892 <two_way_long_needle+0x10e>
   40850:	3301      	adds	r3, #1
   40852:	428b      	cmp	r3, r1
   40854:	d3f6      	bcc.n	40844 <two_way_long_needle+0xc0>
   40856:	1c7b      	adds	r3, r7, #1
   40858:	d011      	beq.n	4087e <two_way_long_needle+0xfa>
   4085a:	eb0a 0307 	add.w	r3, sl, r7
   4085e:	f898 0000 	ldrb.w	r0, [r8]
   40862:	5ce9      	ldrb	r1, [r5, r3]
   40864:	18ea      	adds	r2, r5, r3
   40866:	4288      	cmp	r0, r1
   40868:	d10f      	bne.n	4088a <two_way_long_needle+0x106>
   4086a:	4643      	mov	r3, r8
   4086c:	e005      	b.n	4087a <two_way_long_needle+0xf6>
   4086e:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   40872:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   40876:	4288      	cmp	r0, r1
   40878:	d107      	bne.n	4088a <two_way_long_needle+0x106>
   4087a:	4599      	cmp	r9, r3
   4087c:	d1f7      	bne.n	4086e <two_way_long_needle+0xea>
   4087e:	eb05 000a 	add.w	r0, r5, sl
   40882:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   40886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4088a:	9b05      	ldr	r3, [sp, #20]
   4088c:	449a      	add	sl, r3
   4088e:	4632      	mov	r2, r6
   40890:	e7b6      	b.n	40800 <two_way_long_needle+0x7c>
   40892:	f1cb 0201 	rsb	r2, fp, #1
   40896:	4492      	add	sl, r2
   40898:	4632      	mov	r2, r6
   4089a:	449a      	add	sl, r3
   4089c:	e7b0      	b.n	40800 <two_way_long_needle+0x7c>
   4089e:	2000      	movs	r0, #0
   408a0:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   408a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   408a8:	f108 33ff 	add.w	r3, r8, #4294967295
   408ac:	f8cd 9004 	str.w	r9, [sp, #4]
   408b0:	4606      	mov	r6, r0
   408b2:	465a      	mov	r2, fp
   408b4:	9303      	str	r3, [sp, #12]
   408b6:	444b      	add	r3, r9
   408b8:	46a1      	mov	r9, r4
   408ba:	4604      	mov	r4, r0
   408bc:	9302      	str	r3, [sp, #8]
   408be:	eb06 0709 	add.w	r7, r6, r9
   408c2:	18a8      	adds	r0, r5, r2
   408c4:	2100      	movs	r1, #0
   408c6:	1aba      	subs	r2, r7, r2
   408c8:	f7ff f9ba 	bl	3fc40 <memchr>
   408cc:	2800      	cmp	r0, #0
   408ce:	d1e6      	bne.n	4089e <two_way_long_needle+0x11a>
   408d0:	2f00      	cmp	r7, #0
   408d2:	d0e4      	beq.n	4089e <two_way_long_needle+0x11a>
   408d4:	19eb      	adds	r3, r5, r7
   408d6:	aa06      	add	r2, sp, #24
   408d8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   408dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   408e0:	b14b      	cbz	r3, 408f6 <two_way_long_needle+0x172>
   408e2:	b124      	cbz	r4, 408ee <two_way_long_needle+0x16a>
   408e4:	9a05      	ldr	r2, [sp, #20]
   408e6:	429a      	cmp	r2, r3
   408e8:	bf88      	it	hi
   408ea:	eba9 0302 	subhi.w	r3, r9, r2
   408ee:	441e      	add	r6, r3
   408f0:	2400      	movs	r4, #0
   408f2:	463a      	mov	r2, r7
   408f4:	e7e3      	b.n	408be <two_way_long_needle+0x13a>
   408f6:	4544      	cmp	r4, r8
   408f8:	4623      	mov	r3, r4
   408fa:	bf38      	it	cc
   408fc:	4643      	movcc	r3, r8
   408fe:	4553      	cmp	r3, sl
   40900:	d212      	bcs.n	40928 <two_way_long_needle+0x1a4>
   40902:	18f2      	adds	r2, r6, r3
   40904:	9901      	ldr	r1, [sp, #4]
   40906:	5ca8      	ldrb	r0, [r5, r2]
   40908:	442a      	add	r2, r5
   4090a:	f811 c003 	ldrb.w	ip, [r1, r3]
   4090e:	4419      	add	r1, r3
   40910:	4584      	cmp	ip, r0
   40912:	d006      	beq.n	40922 <two_way_long_needle+0x19e>
   40914:	e02a      	b.n	4096c <two_way_long_needle+0x1e8>
   40916:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   4091a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   4091e:	4584      	cmp	ip, r0
   40920:	d124      	bne.n	4096c <two_way_long_needle+0x1e8>
   40922:	3301      	adds	r3, #1
   40924:	4553      	cmp	r3, sl
   40926:	d1f6      	bne.n	40916 <two_way_long_needle+0x192>
   40928:	9b03      	ldr	r3, [sp, #12]
   4092a:	4544      	cmp	r4, r8
   4092c:	4619      	mov	r1, r3
   4092e:	d234      	bcs.n	4099a <two_way_long_needle+0x216>
   40930:	18f3      	adds	r3, r6, r3
   40932:	9a02      	ldr	r2, [sp, #8]
   40934:	5ce8      	ldrb	r0, [r5, r3]
   40936:	442b      	add	r3, r5
   40938:	7812      	ldrb	r2, [r2, #0]
   4093a:	4290      	cmp	r0, r2
   4093c:	d12d      	bne.n	4099a <two_way_long_needle+0x216>
   4093e:	9802      	ldr	r0, [sp, #8]
   40940:	f104 3bff 	add.w	fp, r4, #4294967295
   40944:	e006      	b.n	40954 <two_way_long_needle+0x1d0>
   40946:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
   4094a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   4094e:	45e6      	cmp	lr, ip
   40950:	d103      	bne.n	4095a <two_way_long_needle+0x1d6>
   40952:	4611      	mov	r1, r2
   40954:	1e4a      	subs	r2, r1, #1
   40956:	4593      	cmp	fp, r2
   40958:	d1f5      	bne.n	40946 <two_way_long_needle+0x1c2>
   4095a:	3401      	adds	r4, #1
   4095c:	428c      	cmp	r4, r1
   4095e:	d81e      	bhi.n	4099e <two_way_long_needle+0x21a>
   40960:	9c05      	ldr	r4, [sp, #20]
   40962:	463a      	mov	r2, r7
   40964:	4426      	add	r6, r4
   40966:	eba9 0404 	sub.w	r4, r9, r4
   4096a:	e7a8      	b.n	408be <two_way_long_needle+0x13a>
   4096c:	f1c8 0201 	rsb	r2, r8, #1
   40970:	2400      	movs	r4, #0
   40972:	4416      	add	r6, r2
   40974:	463a      	mov	r2, r7
   40976:	441e      	add	r6, r3
   40978:	e7a1      	b.n	408be <two_way_long_needle+0x13a>
   4097a:	4642      	mov	r2, r8
   4097c:	4648      	mov	r0, r9
   4097e:	f7ff f9a3 	bl	3fcc8 <memcmp>
   40982:	2800      	cmp	r0, #0
   40984:	f47f af2c 	bne.w	407e0 <two_way_long_needle+0x5c>
   40988:	eb05 000b 	add.w	r0, r5, fp
   4098c:	f1cb 0200 	rsb	r2, fp, #0
   40990:	4621      	mov	r1, r4
   40992:	f7ff f955 	bl	3fc40 <memchr>
   40996:	4620      	mov	r0, r4
   40998:	e782      	b.n	408a0 <two_way_long_needle+0x11c>
   4099a:	4641      	mov	r1, r8
   4099c:	e7dd      	b.n	4095a <two_way_long_needle+0x1d6>
   4099e:	19a8      	adds	r0, r5, r6
   409a0:	e77e      	b.n	408a0 <two_way_long_needle+0x11c>
   409a2:	bf00      	nop

000409a4 <strstr>:
   409a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   409a8:	7802      	ldrb	r2, [r0, #0]
   409aa:	460e      	mov	r6, r1
   409ac:	b085      	sub	sp, #20
   409ae:	4605      	mov	r5, r0
   409b0:	7809      	ldrb	r1, [r1, #0]
   409b2:	2a00      	cmp	r2, #0
   409b4:	f000 809a 	beq.w	40aec <strstr+0x148>
   409b8:	b1a1      	cbz	r1, 409e4 <strstr+0x40>
   409ba:	4684      	mov	ip, r0
   409bc:	1c74      	adds	r4, r6, #1
   409be:	4608      	mov	r0, r1
   409c0:	2701      	movs	r7, #1
   409c2:	e001      	b.n	409c8 <strstr+0x24>
   409c4:	b168      	cbz	r0, 409e2 <strstr+0x3e>
   409c6:	461c      	mov	r4, r3
   409c8:	4290      	cmp	r0, r2
   409ca:	bf14      	ite	ne
   409cc:	2700      	movne	r7, #0
   409ce:	f007 0701 	andeq.w	r7, r7, #1
   409d2:	4623      	mov	r3, r4
   409d4:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
   409d8:	f813 0b01 	ldrb.w	r0, [r3], #1
   409dc:	2a00      	cmp	r2, #0
   409de:	d1f1      	bne.n	409c4 <strstr+0x20>
   409e0:	bb08      	cbnz	r0, 40a26 <strstr+0x82>
   409e2:	b11f      	cbz	r7, 409ec <strstr+0x48>
   409e4:	4628      	mov	r0, r5
   409e6:	b005      	add	sp, #20
   409e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   409ec:	1c68      	adds	r0, r5, #1
   409ee:	1ba4      	subs	r4, r4, r6
   409f0:	f7ff fcf4 	bl	403dc <strchr>
   409f4:	4607      	mov	r7, r0
   409f6:	b188      	cbz	r0, 40a1c <strstr+0x78>
   409f8:	2c01      	cmp	r4, #1
   409fa:	d00f      	beq.n	40a1c <strstr+0x78>
   409fc:	4425      	add	r5, r4
   409fe:	4285      	cmp	r5, r0
   40a00:	bf2c      	ite	cs
   40a02:	eba5 0900 	subcs.w	r9, r5, r0
   40a06:	f04f 0901 	movcc.w	r9, #1
   40a0a:	2c1f      	cmp	r4, #31
   40a0c:	d910      	bls.n	40a30 <strstr+0x8c>
   40a0e:	4623      	mov	r3, r4
   40a10:	4632      	mov	r2, r6
   40a12:	4649      	mov	r1, r9
   40a14:	f7ff feb6 	bl	40784 <two_way_long_needle>
   40a18:	4605      	mov	r5, r0
   40a1a:	e7e3      	b.n	409e4 <strstr+0x40>
   40a1c:	463d      	mov	r5, r7
   40a1e:	4628      	mov	r0, r5
   40a20:	b005      	add	sp, #20
   40a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40a26:	2500      	movs	r5, #0
   40a28:	4628      	mov	r0, r5
   40a2a:	b005      	add	sp, #20
   40a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40a30:	aa03      	add	r2, sp, #12
   40a32:	4621      	mov	r1, r4
   40a34:	4630      	mov	r0, r6
   40a36:	f7ff fe4b 	bl	406d0 <critical_factorization>
   40a3a:	9903      	ldr	r1, [sp, #12]
   40a3c:	4680      	mov	r8, r0
   40a3e:	4630      	mov	r0, r6
   40a40:	4431      	add	r1, r6
   40a42:	4642      	mov	r2, r8
   40a44:	f7ff f940 	bl	3fcc8 <memcmp>
   40a48:	2800      	cmp	r0, #0
   40a4a:	d153      	bne.n	40af4 <strstr+0x150>
   40a4c:	f108 33ff 	add.w	r3, r8, #4294967295
   40a50:	4682      	mov	sl, r0
   40a52:	4605      	mov	r5, r0
   40a54:	464a      	mov	r2, r9
   40a56:	9301      	str	r3, [sp, #4]
   40a58:	46b3      	mov	fp, r6
   40a5a:	18f3      	adds	r3, r6, r3
   40a5c:	9300      	str	r3, [sp, #0]
   40a5e:	1966      	adds	r6, r4, r5
   40a60:	18b8      	adds	r0, r7, r2
   40a62:	2100      	movs	r1, #0
   40a64:	1ab2      	subs	r2, r6, r2
   40a66:	f7ff f8eb 	bl	3fc40 <memchr>
   40a6a:	2800      	cmp	r0, #0
   40a6c:	d1db      	bne.n	40a26 <strstr+0x82>
   40a6e:	2e00      	cmp	r6, #0
   40a70:	d0d9      	beq.n	40a26 <strstr+0x82>
   40a72:	45d0      	cmp	r8, sl
   40a74:	4643      	mov	r3, r8
   40a76:	bf38      	it	cc
   40a78:	4653      	movcc	r3, sl
   40a7a:	429c      	cmp	r4, r3
   40a7c:	d913      	bls.n	40aa6 <strstr+0x102>
   40a7e:	195a      	adds	r2, r3, r5
   40a80:	f81b 0003 	ldrb.w	r0, [fp, r3]
   40a84:	eb0b 0103 	add.w	r1, fp, r3
   40a88:	f817 c002 	ldrb.w	ip, [r7, r2]
   40a8c:	443a      	add	r2, r7
   40a8e:	4584      	cmp	ip, r0
   40a90:	d006      	beq.n	40aa0 <strstr+0xfc>
   40a92:	e077      	b.n	40b84 <strstr+0x1e0>
   40a94:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   40a98:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   40a9c:	4584      	cmp	ip, r0
   40a9e:	d171      	bne.n	40b84 <strstr+0x1e0>
   40aa0:	3301      	adds	r3, #1
   40aa2:	429c      	cmp	r4, r3
   40aa4:	d1f6      	bne.n	40a94 <strstr+0xf0>
   40aa6:	9b01      	ldr	r3, [sp, #4]
   40aa8:	45d0      	cmp	r8, sl
   40aaa:	4619      	mov	r1, r3
   40aac:	d97c      	bls.n	40ba8 <strstr+0x204>
   40aae:	18eb      	adds	r3, r5, r3
   40ab0:	9a00      	ldr	r2, [sp, #0]
   40ab2:	5cf8      	ldrb	r0, [r7, r3]
   40ab4:	443b      	add	r3, r7
   40ab6:	7812      	ldrb	r2, [r2, #0]
   40ab8:	4282      	cmp	r2, r0
   40aba:	d175      	bne.n	40ba8 <strstr+0x204>
   40abc:	9800      	ldr	r0, [sp, #0]
   40abe:	f10a 39ff 	add.w	r9, sl, #4294967295
   40ac2:	e006      	b.n	40ad2 <strstr+0x12e>
   40ac4:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
   40ac8:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   40acc:	45e6      	cmp	lr, ip
   40ace:	d103      	bne.n	40ad8 <strstr+0x134>
   40ad0:	4611      	mov	r1, r2
   40ad2:	1e4a      	subs	r2, r1, #1
   40ad4:	454a      	cmp	r2, r9
   40ad6:	d1f5      	bne.n	40ac4 <strstr+0x120>
   40ad8:	f10a 0a01 	add.w	sl, sl, #1
   40adc:	458a      	cmp	sl, r1
   40ade:	d84f      	bhi.n	40b80 <strstr+0x1dc>
   40ae0:	9b03      	ldr	r3, [sp, #12]
   40ae2:	4632      	mov	r2, r6
   40ae4:	441d      	add	r5, r3
   40ae6:	eba4 0a03 	sub.w	sl, r4, r3
   40aea:	e7b8      	b.n	40a5e <strstr+0xba>
   40aec:	2900      	cmp	r1, #0
   40aee:	bf18      	it	ne
   40af0:	2500      	movne	r5, #0
   40af2:	e777      	b.n	409e4 <strstr+0x40>
   40af4:	eba4 0308 	sub.w	r3, r4, r8
   40af8:	f108 3aff 	add.w	sl, r8, #4294967295
   40afc:	464a      	mov	r2, r9
   40afe:	2500      	movs	r5, #0
   40b00:	4543      	cmp	r3, r8
   40b02:	eb06 010a 	add.w	r1, r6, sl
   40b06:	46b3      	mov	fp, r6
   40b08:	bf38      	it	cc
   40b0a:	4643      	movcc	r3, r8
   40b0c:	4689      	mov	r9, r1
   40b0e:	3301      	adds	r3, #1
   40b10:	9303      	str	r3, [sp, #12]
   40b12:	1966      	adds	r6, r4, r5
   40b14:	18b8      	adds	r0, r7, r2
   40b16:	2100      	movs	r1, #0
   40b18:	1ab2      	subs	r2, r6, r2
   40b1a:	f7ff f891 	bl	3fc40 <memchr>
   40b1e:	2e00      	cmp	r6, #0
   40b20:	d081      	beq.n	40a26 <strstr+0x82>
   40b22:	2800      	cmp	r0, #0
   40b24:	f47f af7f 	bne.w	40a26 <strstr+0x82>
   40b28:	4544      	cmp	r4, r8
   40b2a:	d914      	bls.n	40b56 <strstr+0x1b2>
   40b2c:	eb08 0205 	add.w	r2, r8, r5
   40b30:	f81b 0008 	ldrb.w	r0, [fp, r8]
   40b34:	eb0b 0108 	add.w	r1, fp, r8
   40b38:	5cbb      	ldrb	r3, [r7, r2]
   40b3a:	443a      	add	r2, r7
   40b3c:	4298      	cmp	r0, r3
   40b3e:	4643      	mov	r3, r8
   40b40:	d006      	beq.n	40b50 <strstr+0x1ac>
   40b42:	e027      	b.n	40b94 <strstr+0x1f0>
   40b44:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   40b48:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   40b4c:	4584      	cmp	ip, r0
   40b4e:	d121      	bne.n	40b94 <strstr+0x1f0>
   40b50:	3301      	adds	r3, #1
   40b52:	429c      	cmp	r4, r3
   40b54:	d1f6      	bne.n	40b44 <strstr+0x1a0>
   40b56:	f1ba 3fff 	cmp.w	sl, #4294967295
   40b5a:	d011      	beq.n	40b80 <strstr+0x1dc>
   40b5c:	eb05 030a 	add.w	r3, r5, sl
   40b60:	f899 2000 	ldrb.w	r2, [r9]
   40b64:	5cf9      	ldrb	r1, [r7, r3]
   40b66:	443b      	add	r3, r7
   40b68:	4291      	cmp	r1, r2
   40b6a:	d119      	bne.n	40ba0 <strstr+0x1fc>
   40b6c:	464a      	mov	r2, r9
   40b6e:	e005      	b.n	40b7c <strstr+0x1d8>
   40b70:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   40b74:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   40b78:	4288      	cmp	r0, r1
   40b7a:	d111      	bne.n	40ba0 <strstr+0x1fc>
   40b7c:	455a      	cmp	r2, fp
   40b7e:	d1f7      	bne.n	40b70 <strstr+0x1cc>
   40b80:	443d      	add	r5, r7
   40b82:	e72f      	b.n	409e4 <strstr+0x40>
   40b84:	f1c8 0201 	rsb	r2, r8, #1
   40b88:	f04f 0a00 	mov.w	sl, #0
   40b8c:	4415      	add	r5, r2
   40b8e:	4632      	mov	r2, r6
   40b90:	441d      	add	r5, r3
   40b92:	e764      	b.n	40a5e <strstr+0xba>
   40b94:	f1c8 0201 	rsb	r2, r8, #1
   40b98:	4415      	add	r5, r2
   40b9a:	4632      	mov	r2, r6
   40b9c:	441d      	add	r5, r3
   40b9e:	e7b8      	b.n	40b12 <strstr+0x16e>
   40ba0:	9b03      	ldr	r3, [sp, #12]
   40ba2:	4632      	mov	r2, r6
   40ba4:	441d      	add	r5, r3
   40ba6:	e7b4      	b.n	40b12 <strstr+0x16e>
   40ba8:	4641      	mov	r1, r8
   40baa:	e795      	b.n	40ad8 <strstr+0x134>

00040bac <_strtod_r>:
   40bac:	4b05      	ldr	r3, [pc, #20]	; (40bc4 <_strtod_r+0x18>)
   40bae:	681b      	ldr	r3, [r3, #0]
   40bb0:	b410      	push	{r4}
   40bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   40bb4:	4c04      	ldr	r4, [pc, #16]	; (40bc8 <_strtod_r+0x1c>)
   40bb6:	2b00      	cmp	r3, #0
   40bb8:	bf08      	it	eq
   40bba:	4623      	moveq	r3, r4
   40bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
   40bc0:	f7d9 bee2 	b.w	1a988 <_strtod_l>
   40bc4:	20031c24 	.word	0x20031c24
   40bc8:	20031c28 	.word	0x20031c28

00040bcc <strtod>:
   40bcc:	4b06      	ldr	r3, [pc, #24]	; (40be8 <strtod+0x1c>)
   40bce:	460a      	mov	r2, r1
   40bd0:	4601      	mov	r1, r0
   40bd2:	6818      	ldr	r0, [r3, #0]
   40bd4:	b410      	push	{r4}
   40bd6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   40bd8:	4c04      	ldr	r4, [pc, #16]	; (40bec <strtod+0x20>)
   40bda:	2b00      	cmp	r3, #0
   40bdc:	bf08      	it	eq
   40bde:	4623      	moveq	r3, r4
   40be0:	f85d 4b04 	ldr.w	r4, [sp], #4
   40be4:	f7d9 bed0 	b.w	1a988 <_strtod_l>
   40be8:	20031c24 	.word	0x20031c24
   40bec:	20031c28 	.word	0x20031c28

00040bf0 <_strtol_l.isra.0>:
   40bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40bf4:	460e      	mov	r6, r1
   40bf6:	4680      	mov	r8, r0
   40bf8:	4617      	mov	r7, r2
   40bfa:	4699      	mov	r9, r3
   40bfc:	460d      	mov	r5, r1
   40bfe:	e000      	b.n	40c02 <_strtol_l.isra.0+0x12>
   40c00:	4625      	mov	r5, r4
   40c02:	462c      	mov	r4, r5
   40c04:	980a      	ldr	r0, [sp, #40]	; 0x28
   40c06:	f814 bb01 	ldrb.w	fp, [r4], #1
   40c0a:	f7fe fd33 	bl	3f674 <__locale_ctype_ptr_l>
   40c0e:	4458      	add	r0, fp
   40c10:	7841      	ldrb	r1, [r0, #1]
   40c12:	f011 0108 	ands.w	r1, r1, #8
   40c16:	d1f3      	bne.n	40c00 <_strtol_l.isra.0+0x10>
   40c18:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   40c1c:	d053      	beq.n	40cc6 <_strtol_l.isra.0+0xd6>
   40c1e:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   40c22:	d045      	beq.n	40cb0 <_strtol_l.isra.0+0xc0>
   40c24:	f039 0310 	bics.w	r3, r9, #16
   40c28:	d107      	bne.n	40c3a <_strtol_l.isra.0+0x4a>
   40c2a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   40c2e:	d04f      	beq.n	40cd0 <_strtol_l.isra.0+0xe0>
   40c30:	f1b9 0f00 	cmp.w	r9, #0
   40c34:	d101      	bne.n	40c3a <_strtol_l.isra.0+0x4a>
   40c36:	f04f 090a 	mov.w	r9, #10
   40c3a:	464b      	mov	r3, r9
   40c3c:	2900      	cmp	r1, #0
   40c3e:	f04f 0500 	mov.w	r5, #0
   40c42:	bf0c      	ite	eq
   40c44:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
   40c48:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
   40c4c:	4628      	mov	r0, r5
   40c4e:	fbba fcf3 	udiv	ip, sl, r3
   40c52:	fb03 ae1c 	mls	lr, r3, ip, sl
   40c56:	e00e      	b.n	40c76 <_strtol_l.isra.0+0x86>
   40c58:	f1ab 0237 	sub.w	r2, fp, #55	; 0x37
   40c5c:	4591      	cmp	r9, r2
   40c5e:	dd1a      	ble.n	40c96 <_strtol_l.isra.0+0xa6>
   40c60:	2d00      	cmp	r5, #0
   40c62:	db04      	blt.n	40c6e <_strtol_l.isra.0+0x7e>
   40c64:	4584      	cmp	ip, r0
   40c66:	d302      	bcc.n	40c6e <_strtol_l.isra.0+0x7e>
   40c68:	d11e      	bne.n	40ca8 <_strtol_l.isra.0+0xb8>
   40c6a:	4596      	cmp	lr, r2
   40c6c:	da1c      	bge.n	40ca8 <_strtol_l.isra.0+0xb8>
   40c6e:	f04f 35ff 	mov.w	r5, #4294967295
   40c72:	f814 bb01 	ldrb.w	fp, [r4], #1
   40c76:	f1ab 0230 	sub.w	r2, fp, #48	; 0x30
   40c7a:	2a09      	cmp	r2, #9
   40c7c:	d9ee      	bls.n	40c5c <_strtol_l.isra.0+0x6c>
   40c7e:	f1ab 0241 	sub.w	r2, fp, #65	; 0x41
   40c82:	2a19      	cmp	r2, #25
   40c84:	d9e8      	bls.n	40c58 <_strtol_l.isra.0+0x68>
   40c86:	f1ab 0261 	sub.w	r2, fp, #97	; 0x61
   40c8a:	2a19      	cmp	r2, #25
   40c8c:	d803      	bhi.n	40c96 <_strtol_l.isra.0+0xa6>
   40c8e:	f1ab 0257 	sub.w	r2, fp, #87	; 0x57
   40c92:	4591      	cmp	r9, r2
   40c94:	dce4      	bgt.n	40c60 <_strtol_l.isra.0+0x70>
   40c96:	1c6b      	adds	r3, r5, #1
   40c98:	d00e      	beq.n	40cb8 <_strtol_l.isra.0+0xc8>
   40c9a:	b101      	cbz	r1, 40c9e <_strtol_l.isra.0+0xae>
   40c9c:	4240      	negs	r0, r0
   40c9e:	b10f      	cbz	r7, 40ca4 <_strtol_l.isra.0+0xb4>
   40ca0:	bb15      	cbnz	r5, 40ce8 <_strtol_l.isra.0+0xf8>
   40ca2:	603e      	str	r6, [r7, #0]
   40ca4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40ca8:	fb03 2000 	mla	r0, r3, r0, r2
   40cac:	2501      	movs	r5, #1
   40cae:	e7e0      	b.n	40c72 <_strtol_l.isra.0+0x82>
   40cb0:	1cac      	adds	r4, r5, #2
   40cb2:	f895 b001 	ldrb.w	fp, [r5, #1]
   40cb6:	e7b5      	b.n	40c24 <_strtol_l.isra.0+0x34>
   40cb8:	2322      	movs	r3, #34	; 0x22
   40cba:	f8c8 3000 	str.w	r3, [r8]
   40cbe:	b1af      	cbz	r7, 40cec <_strtol_l.isra.0+0xfc>
   40cc0:	1e66      	subs	r6, r4, #1
   40cc2:	4650      	mov	r0, sl
   40cc4:	e7ed      	b.n	40ca2 <_strtol_l.isra.0+0xb2>
   40cc6:	1cac      	adds	r4, r5, #2
   40cc8:	f895 b001 	ldrb.w	fp, [r5, #1]
   40ccc:	2101      	movs	r1, #1
   40cce:	e7a9      	b.n	40c24 <_strtol_l.isra.0+0x34>
   40cd0:	7823      	ldrb	r3, [r4, #0]
   40cd2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   40cd6:	2b58      	cmp	r3, #88	; 0x58
   40cd8:	d10a      	bne.n	40cf0 <_strtol_l.isra.0+0x100>
   40cda:	f04f 0910 	mov.w	r9, #16
   40cde:	f894 b001 	ldrb.w	fp, [r4, #1]
   40ce2:	3402      	adds	r4, #2
   40ce4:	464b      	mov	r3, r9
   40ce6:	e7a9      	b.n	40c3c <_strtol_l.isra.0+0x4c>
   40ce8:	4682      	mov	sl, r0
   40cea:	e7e9      	b.n	40cc0 <_strtol_l.isra.0+0xd0>
   40cec:	4650      	mov	r0, sl
   40cee:	e7d9      	b.n	40ca4 <_strtol_l.isra.0+0xb4>
   40cf0:	f1b9 0f00 	cmp.w	r9, #0
   40cf4:	d1a1      	bne.n	40c3a <_strtol_l.isra.0+0x4a>
   40cf6:	f04f 0908 	mov.w	r9, #8
   40cfa:	464b      	mov	r3, r9
   40cfc:	e79e      	b.n	40c3c <_strtol_l.isra.0+0x4c>
   40cfe:	bf00      	nop

00040d00 <_strtol_r>:
   40d00:	b530      	push	{r4, r5, lr}
   40d02:	4c06      	ldr	r4, [pc, #24]	; (40d1c <_strtol_r+0x1c>)
   40d04:	b083      	sub	sp, #12
   40d06:	4d06      	ldr	r5, [pc, #24]	; (40d20 <_strtol_r+0x20>)
   40d08:	6824      	ldr	r4, [r4, #0]
   40d0a:	6b64      	ldr	r4, [r4, #52]	; 0x34
   40d0c:	2c00      	cmp	r4, #0
   40d0e:	bf08      	it	eq
   40d10:	462c      	moveq	r4, r5
   40d12:	9400      	str	r4, [sp, #0]
   40d14:	f7ff ff6c 	bl	40bf0 <_strtol_l.isra.0>
   40d18:	b003      	add	sp, #12
   40d1a:	bd30      	pop	{r4, r5, pc}
   40d1c:	20031c24 	.word	0x20031c24
   40d20:	20031c28 	.word	0x20031c28

00040d24 <strtol>:
   40d24:	b570      	push	{r4, r5, r6, lr}
   40d26:	4c08      	ldr	r4, [pc, #32]	; (40d48 <strtol+0x24>)
   40d28:	b082      	sub	sp, #8
   40d2a:	4e08      	ldr	r6, [pc, #32]	; (40d4c <strtol+0x28>)
   40d2c:	4613      	mov	r3, r2
   40d2e:	6825      	ldr	r5, [r4, #0]
   40d30:	460a      	mov	r2, r1
   40d32:	4601      	mov	r1, r0
   40d34:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   40d36:	4628      	mov	r0, r5
   40d38:	2c00      	cmp	r4, #0
   40d3a:	bf08      	it	eq
   40d3c:	4634      	moveq	r4, r6
   40d3e:	9400      	str	r4, [sp, #0]
   40d40:	f7ff ff56 	bl	40bf0 <_strtol_l.isra.0>
   40d44:	b002      	add	sp, #8
   40d46:	bd70      	pop	{r4, r5, r6, pc}
   40d48:	20031c24 	.word	0x20031c24
   40d4c:	20031c28 	.word	0x20031c28

00040d50 <_strtoul_l.isra.0>:
   40d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   40d54:	460d      	mov	r5, r1
   40d56:	4607      	mov	r7, r0
   40d58:	4616      	mov	r6, r2
   40d5a:	4698      	mov	r8, r3
   40d5c:	468a      	mov	sl, r1
   40d5e:	e000      	b.n	40d62 <_strtoul_l.isra.0+0x12>
   40d60:	46a2      	mov	sl, r4
   40d62:	4654      	mov	r4, sl
   40d64:	9808      	ldr	r0, [sp, #32]
   40d66:	f814 9b01 	ldrb.w	r9, [r4], #1
   40d6a:	f7fe fc83 	bl	3f674 <__locale_ctype_ptr_l>
   40d6e:	4448      	add	r0, r9
   40d70:	7840      	ldrb	r0, [r0, #1]
   40d72:	f010 0008 	ands.w	r0, r0, #8
   40d76:	d1f3      	bne.n	40d60 <_strtoul_l.isra.0+0x10>
   40d78:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
   40d7c:	d062      	beq.n	40e44 <_strtoul_l.isra.0+0xf4>
   40d7e:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
   40d82:	d011      	beq.n	40da8 <_strtoul_l.isra.0+0x58>
   40d84:	4649      	mov	r1, r9
   40d86:	4603      	mov	r3, r0
   40d88:	f038 0210 	bics.w	r2, r8, #16
   40d8c:	d114      	bne.n	40db8 <_strtoul_l.isra.0+0x68>
   40d8e:	2930      	cmp	r1, #48	; 0x30
   40d90:	d05e      	beq.n	40e50 <_strtoul_l.isra.0+0x100>
   40d92:	f1b8 0f00 	cmp.w	r8, #0
   40d96:	d10f      	bne.n	40db8 <_strtoul_l.isra.0+0x68>
   40d98:	f04f 080a 	mov.w	r8, #10
   40d9c:	f04f 0905 	mov.w	r9, #5
   40da0:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 40e84 <_strtoul_l.isra.0+0x134>
   40da4:	46c2      	mov	sl, r8
   40da6:	e010      	b.n	40dca <_strtoul_l.isra.0+0x7a>
   40da8:	f038 0210 	bics.w	r2, r8, #16
   40dac:	4603      	mov	r3, r0
   40dae:	f10a 0402 	add.w	r4, sl, #2
   40db2:	f89a 1001 	ldrb.w	r1, [sl, #1]
   40db6:	d0ea      	beq.n	40d8e <_strtoul_l.isra.0+0x3e>
   40db8:	f04f 3eff 	mov.w	lr, #4294967295
   40dbc:	46c2      	mov	sl, r8
   40dbe:	fbbe fef8 	udiv	lr, lr, r8
   40dc2:	fb08 f90e 	mul.w	r9, r8, lr
   40dc6:	ea6f 0909 	mvn.w	r9, r9
   40dca:	f04f 0c00 	mov.w	ip, #0
   40dce:	4660      	mov	r0, ip
   40dd0:	e00f      	b.n	40df2 <_strtoul_l.isra.0+0xa2>
   40dd2:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   40dd6:	4590      	cmp	r8, r2
   40dd8:	dd1b      	ble.n	40e12 <_strtoul_l.isra.0+0xc2>
   40dda:	f1bc 0f00 	cmp.w	ip, #0
   40dde:	db04      	blt.n	40dea <_strtoul_l.isra.0+0x9a>
   40de0:	4570      	cmp	r0, lr
   40de2:	d802      	bhi.n	40dea <_strtoul_l.isra.0+0x9a>
   40de4:	d121      	bne.n	40e2a <_strtoul_l.isra.0+0xda>
   40de6:	454a      	cmp	r2, r9
   40de8:	dd1f      	ble.n	40e2a <_strtoul_l.isra.0+0xda>
   40dea:	f04f 3cff 	mov.w	ip, #4294967295
   40dee:	f814 1b01 	ldrb.w	r1, [r4], #1
   40df2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   40df6:	2a09      	cmp	r2, #9
   40df8:	d9ed      	bls.n	40dd6 <_strtoul_l.isra.0+0x86>
   40dfa:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   40dfe:	2a19      	cmp	r2, #25
   40e00:	d9e7      	bls.n	40dd2 <_strtoul_l.isra.0+0x82>
   40e02:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   40e06:	2a19      	cmp	r2, #25
   40e08:	d803      	bhi.n	40e12 <_strtoul_l.isra.0+0xc2>
   40e0a:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   40e0e:	4590      	cmp	r8, r2
   40e10:	dce3      	bgt.n	40dda <_strtoul_l.isra.0+0x8a>
   40e12:	f1bc 0f00 	cmp.w	ip, #0
   40e16:	db0d      	blt.n	40e34 <_strtoul_l.isra.0+0xe4>
   40e18:	b103      	cbz	r3, 40e1c <_strtoul_l.isra.0+0xcc>
   40e1a:	4240      	negs	r0, r0
   40e1c:	b11e      	cbz	r6, 40e26 <_strtoul_l.isra.0+0xd6>
   40e1e:	f1bc 0f00 	cmp.w	ip, #0
   40e22:	d10d      	bne.n	40e40 <_strtoul_l.isra.0+0xf0>
   40e24:	6035      	str	r5, [r6, #0]
   40e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   40e2a:	fb0a 2000 	mla	r0, sl, r0, r2
   40e2e:	f04f 0c01 	mov.w	ip, #1
   40e32:	e7dc      	b.n	40dee <_strtoul_l.isra.0+0x9e>
   40e34:	2322      	movs	r3, #34	; 0x22
   40e36:	f04f 30ff 	mov.w	r0, #4294967295
   40e3a:	603b      	str	r3, [r7, #0]
   40e3c:	2e00      	cmp	r6, #0
   40e3e:	d0f2      	beq.n	40e26 <_strtoul_l.isra.0+0xd6>
   40e40:	1e65      	subs	r5, r4, #1
   40e42:	e7ef      	b.n	40e24 <_strtoul_l.isra.0+0xd4>
   40e44:	f10a 0402 	add.w	r4, sl, #2
   40e48:	f89a 1001 	ldrb.w	r1, [sl, #1]
   40e4c:	2301      	movs	r3, #1
   40e4e:	e79b      	b.n	40d88 <_strtoul_l.isra.0+0x38>
   40e50:	7822      	ldrb	r2, [r4, #0]
   40e52:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   40e56:	2a58      	cmp	r2, #88	; 0x58
   40e58:	d109      	bne.n	40e6e <_strtoul_l.isra.0+0x11e>
   40e5a:	f04f 0810 	mov.w	r8, #16
   40e5e:	7861      	ldrb	r1, [r4, #1]
   40e60:	f04f 090f 	mov.w	r9, #15
   40e64:	3402      	adds	r4, #2
   40e66:	46c2      	mov	sl, r8
   40e68:	f06f 4e70 	mvn.w	lr, #4026531840	; 0xf0000000
   40e6c:	e7ad      	b.n	40dca <_strtoul_l.isra.0+0x7a>
   40e6e:	f1b8 0f00 	cmp.w	r8, #0
   40e72:	d1a1      	bne.n	40db8 <_strtoul_l.isra.0+0x68>
   40e74:	f04f 0808 	mov.w	r8, #8
   40e78:	f04f 0907 	mov.w	r9, #7
   40e7c:	f06f 4e60 	mvn.w	lr, #3758096384	; 0xe0000000
   40e80:	46c2      	mov	sl, r8
   40e82:	e7a2      	b.n	40dca <_strtoul_l.isra.0+0x7a>
   40e84:	19999999 	.word	0x19999999

00040e88 <_strtoul_r>:
   40e88:	b530      	push	{r4, r5, lr}
   40e8a:	4c06      	ldr	r4, [pc, #24]	; (40ea4 <_strtoul_r+0x1c>)
   40e8c:	b083      	sub	sp, #12
   40e8e:	4d06      	ldr	r5, [pc, #24]	; (40ea8 <_strtoul_r+0x20>)
   40e90:	6824      	ldr	r4, [r4, #0]
   40e92:	6b64      	ldr	r4, [r4, #52]	; 0x34
   40e94:	2c00      	cmp	r4, #0
   40e96:	bf08      	it	eq
   40e98:	462c      	moveq	r4, r5
   40e9a:	9400      	str	r4, [sp, #0]
   40e9c:	f7ff ff58 	bl	40d50 <_strtoul_l.isra.0>
   40ea0:	b003      	add	sp, #12
   40ea2:	bd30      	pop	{r4, r5, pc}
   40ea4:	20031c24 	.word	0x20031c24
   40ea8:	20031c28 	.word	0x20031c28

00040eac <strtoul>:
   40eac:	b570      	push	{r4, r5, r6, lr}
   40eae:	4c08      	ldr	r4, [pc, #32]	; (40ed0 <strtoul+0x24>)
   40eb0:	b082      	sub	sp, #8
   40eb2:	4e08      	ldr	r6, [pc, #32]	; (40ed4 <strtoul+0x28>)
   40eb4:	4613      	mov	r3, r2
   40eb6:	6825      	ldr	r5, [r4, #0]
   40eb8:	460a      	mov	r2, r1
   40eba:	4601      	mov	r1, r0
   40ebc:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   40ebe:	4628      	mov	r0, r5
   40ec0:	2c00      	cmp	r4, #0
   40ec2:	bf08      	it	eq
   40ec4:	4634      	moveq	r4, r6
   40ec6:	9400      	str	r4, [sp, #0]
   40ec8:	f7ff ff42 	bl	40d50 <_strtoul_l.isra.0>
   40ecc:	b002      	add	sp, #8
   40ece:	bd70      	pop	{r4, r5, r6, pc}
   40ed0:	20031c24 	.word	0x20031c24
   40ed4:	20031c28 	.word	0x20031c28

00040ed8 <__ssvfscanf_r>:
   40ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40edc:	ed2d 8b02 	vpush	{d8}
   40ee0:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
   40ee4:	468b      	mov	fp, r1
   40ee6:	af02      	add	r7, sp, #8
   40ee8:	633b      	str	r3, [r7, #48]	; 0x30
   40eea:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   40eee:	0499      	lsls	r1, r3, #18
   40ef0:	e9c7 200e 	strd	r2, r0, [r7, #56]	; 0x38
   40ef4:	d409      	bmi.n	40f0a <__ssvfscanf_r+0x32>
   40ef6:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
   40efa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   40efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   40f02:	f8ab 300c 	strh.w	r3, [fp, #12]
   40f06:	f8cb 2064 	str.w	r2, [fp, #100]	; 0x64
   40f0a:	2300      	movs	r3, #0
   40f0c:	469a      	mov	sl, r3
   40f0e:	61fb      	str	r3, [r7, #28]
   40f10:	637b      	str	r3, [r7, #52]	; 0x34
   40f12:	e9c7 3309 	strd	r3, r3, [r7, #36]	; 0x24
   40f16:	f8d7 8038 	ldr.w	r8, [r7, #56]	; 0x38
   40f1a:	f818 3b01 	ldrb.w	r3, [r8], #1
   40f1e:	647b      	str	r3, [r7, #68]	; 0x44
   40f20:	2b00      	cmp	r3, #0
   40f22:	f000 8082 	beq.w	4102a <__ssvfscanf_r+0x152>
   40f26:	f7fe fba9 	bl	3f67c <__locale_ctype_ptr>
   40f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   40f2c:	4418      	add	r0, r3
   40f2e:	7846      	ldrb	r6, [r0, #1]
   40f30:	f016 0608 	ands.w	r6, r6, #8
   40f34:	f040 808b 	bne.w	4104e <__ssvfscanf_r+0x176>
   40f38:	2b25      	cmp	r3, #37	; 0x25
   40f3a:	f040 80ab 	bne.w	41094 <__ssvfscanf_r+0x1bc>
   40f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   40f40:	4635      	mov	r5, r6
   40f42:	4634      	mov	r4, r6
   40f44:	785a      	ldrb	r2, [r3, #1]
   40f46:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   40f4a:	f108 0101 	add.w	r1, r8, #1
   40f4e:	2b55      	cmp	r3, #85	; 0x55
   40f50:	d86b      	bhi.n	4102a <__ssvfscanf_r+0x152>
   40f52:	e8df f013 	tbh	[pc, r3, lsl #1]
   40f56:	009e      	.short	0x009e
   40f58:	006a006a 	.word	0x006a006a
   40f5c:	006a006a 	.word	0x006a006a
   40f60:	006a0444 	.word	0x006a0444
   40f64:	006a006a 	.word	0x006a006a
   40f68:	006a006a 	.word	0x006a006a
   40f6c:	04360436 	.word	0x04360436
   40f70:	04360436 	.word	0x04360436
   40f74:	04360436 	.word	0x04360436
   40f78:	04360436 	.word	0x04360436
   40f7c:	04360436 	.word	0x04360436
   40f80:	006a006a 	.word	0x006a006a
   40f84:	006a006a 	.word	0x006a006a
   40f88:	006a006a 	.word	0x006a006a
   40f8c:	0432006a 	.word	0x0432006a
   40f90:	042e006a 	.word	0x042e006a
   40f94:	04320486 	.word	0x04320486
   40f98:	04320432 	.word	0x04320432
   40f9c:	006a006a 	.word	0x006a006a
   40fa0:	006a006a 	.word	0x006a006a
   40fa4:	006a00b6 	.word	0x006a00b6
   40fa8:	047c006a 	.word	0x047c006a
   40fac:	006a006a 	.word	0x006a006a
   40fb0:	0476006a 	.word	0x0476006a
   40fb4:	006a006a 	.word	0x006a006a
   40fb8:	006a006a 	.word	0x006a006a
   40fbc:	006a046c 	.word	0x006a046c
   40fc0:	0462006a 	.word	0x0462006a
   40fc4:	006a006a 	.word	0x006a006a
   40fc8:	006a006a 	.word	0x006a006a
   40fcc:	0432006a 	.word	0x0432006a
   40fd0:	041c006a 	.word	0x041c006a
   40fd4:	043200c4 	.word	0x043200c4
   40fd8:	04320432 	.word	0x04320432
   40fdc:	044d0455 	.word	0x044d0455
   40fe0:	006a00b6 	.word	0x006a00b6
   40fe4:	04ab04ba 	.word	0x04ab04ba
   40fe8:	049a049c 	.word	0x049a049c
   40fec:	006a0496 	.word	0x006a0496
   40ff0:	0492006a 	.word	0x0492006a
   40ff4:	048a00be 	.word	0x048a00be
   40ff8:	006a006a 	.word	0x006a006a
   40ffc:	006a046c 	.word	0x006a046c
   41000:	00be      	.short	0x00be
   41002:	4659      	mov	r1, fp
   41004:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   41006:	f004 fcb9 	bl	4597c <__ssrefill_r>
   4100a:	2800      	cmp	r0, #0
   4100c:	f001 812a 	beq.w	42264 <__ssvfscanf_r+0x138c>
   41010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   41012:	2b00      	cmp	r3, #0
   41014:	f001 8050 	beq.w	420b8 <__ssvfscanf_r+0x11e0>
   41018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   4101a:	2b00      	cmp	r3, #0
   4101c:	f001 81d7 	beq.w	423ce <__ssvfscanf_r+0x14f6>
   41020:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   41024:	065b      	lsls	r3, r3, #25
   41026:	f101 816d 	bmi.w	42304 <__ssvfscanf_r+0x142c>
   4102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   4102c:	b13b      	cbz	r3, 4103e <__ssvfscanf_r+0x166>
   4102e:	f8d3 8000 	ldr.w	r8, [r3]
   41032:	f1b8 0f00 	cmp.w	r8, #0
   41036:	d002      	beq.n	4103e <__ssvfscanf_r+0x166>
   41038:	4640      	mov	r0, r8
   4103a:	f7fe fb35 	bl	3f6a8 <free>
   4103e:	6b78      	ldr	r0, [r7, #52]	; 0x34
   41040:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
   41044:	46bd      	mov	sp, r7
   41046:	ecbd 8b02 	vpop	{d8}
   4104a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4104e:	f8db 2004 	ldr.w	r2, [fp, #4]
   41052:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   41054:	e012      	b.n	4107c <__ssvfscanf_r+0x1a4>
   41056:	f7fe fb11 	bl	3f67c <__locale_ctype_ptr>
   4105a:	f8db 3000 	ldr.w	r3, [fp]
   4105e:	781a      	ldrb	r2, [r3, #0]
   41060:	3301      	adds	r3, #1
   41062:	4410      	add	r0, r2
   41064:	7842      	ldrb	r2, [r0, #1]
   41066:	0712      	lsls	r2, r2, #28
   41068:	d510      	bpl.n	4108c <__ssvfscanf_r+0x1b4>
   4106a:	f8db 2004 	ldr.w	r2, [fp, #4]
   4106e:	f10a 0a01 	add.w	sl, sl, #1
   41072:	f8cb 3000 	str.w	r3, [fp]
   41076:	3a01      	subs	r2, #1
   41078:	f8cb 2004 	str.w	r2, [fp, #4]
   4107c:	2a00      	cmp	r2, #0
   4107e:	dcea      	bgt.n	41056 <__ssvfscanf_r+0x17e>
   41080:	4659      	mov	r1, fp
   41082:	4620      	mov	r0, r4
   41084:	f004 fc7a 	bl	4597c <__ssrefill_r>
   41088:	2800      	cmp	r0, #0
   4108a:	d0e4      	beq.n	41056 <__ssvfscanf_r+0x17e>
   4108c:	f8c7 8038 	str.w	r8, [r7, #56]	; 0x38
   41090:	e741      	b.n	40f16 <__ssvfscanf_r+0x3e>
   41092:	4688      	mov	r8, r1
   41094:	f8db 3004 	ldr.w	r3, [fp, #4]
   41098:	2b00      	cmp	r3, #0
   4109a:	f340 8726 	ble.w	41eea <__ssvfscanf_r+0x1012>
   4109e:	f8db 3000 	ldr.w	r3, [fp]
   410a2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
   410a6:	7819      	ldrb	r1, [r3, #0]
   410a8:	4291      	cmp	r1, r2
   410aa:	d1be      	bne.n	4102a <__ssvfscanf_r+0x152>
   410ac:	f8db 2004 	ldr.w	r2, [fp, #4]
   410b0:	3301      	adds	r3, #1
   410b2:	f10a 0a01 	add.w	sl, sl, #1
   410b6:	f8c7 8038 	str.w	r8, [r7, #56]	; 0x38
   410ba:	3a01      	subs	r2, #1
   410bc:	e9cb 3200 	strd	r3, r2, [fp]
   410c0:	e729      	b.n	40f16 <__ssvfscanf_r+0x3e>
   410c2:	072a      	lsls	r2, r5, #28
   410c4:	d1b1      	bne.n	4102a <__ssvfscanf_r+0x152>
   410c6:	f898 2001 	ldrb.w	r2, [r8, #1]
   410ca:	f045 0502 	orr.w	r5, r5, #2
   410ce:	4688      	mov	r8, r1
   410d0:	e739      	b.n	40f46 <__ssvfscanf_r+0x6e>
   410d2:	072b      	lsls	r3, r5, #28
   410d4:	d1a9      	bne.n	4102a <__ssvfscanf_r+0x152>
   410d6:	f898 2001 	ldrb.w	r2, [r8, #1]
   410da:	4688      	mov	r8, r1
   410dc:	e733      	b.n	40f46 <__ssvfscanf_r+0x6e>
   410de:	63b9      	str	r1, [r7, #56]	; 0x38
   410e0:	4b9f      	ldr	r3, [pc, #636]	; (41360 <__ssvfscanf_r+0x488>)
   410e2:	f04f 0803 	mov.w	r8, #3
   410e6:	61fb      	str	r3, [r7, #28]
   410e8:	230a      	movs	r3, #10
   410ea:	62bb      	str	r3, [r7, #40]	; 0x28
   410ec:	f8db 3004 	ldr.w	r3, [fp, #4]
   410f0:	2b00      	cmp	r3, #0
   410f2:	f340 8356 	ble.w	417a2 <__ssvfscanf_r+0x8ca>
   410f6:	0668      	lsls	r0, r5, #25
   410f8:	d512      	bpl.n	41120 <__ssvfscanf_r+0x248>
   410fa:	f108 38ff 	add.w	r8, r8, #4294967295
   410fe:	f1b8 0f03 	cmp.w	r8, #3
   41102:	f200 8219 	bhi.w	41538 <__ssvfscanf_r+0x660>
   41106:	e8df f018 	tbh	[pc, r8, lsl #1]
   4110a:	012d      	.short	0x012d
   4110c:	0021008f 	.word	0x0021008f
   41110:	03f5      	.short	0x03f5
   41112:	4659      	mov	r1, fp
   41114:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   41116:	f004 fc31 	bl	4597c <__ssrefill_r>
   4111a:	2800      	cmp	r0, #0
   4111c:	f47f af7c 	bne.w	41018 <__ssvfscanf_r+0x140>
   41120:	f7fe faac 	bl	3f67c <__locale_ctype_ptr>
   41124:	f8db 3000 	ldr.w	r3, [fp]
   41128:	781a      	ldrb	r2, [r3, #0]
   4112a:	3301      	adds	r3, #1
   4112c:	4410      	add	r0, r2
   4112e:	7842      	ldrb	r2, [r0, #1]
   41130:	0711      	lsls	r1, r2, #28
   41132:	d5e2      	bpl.n	410fa <__ssvfscanf_r+0x222>
   41134:	f8db 2004 	ldr.w	r2, [fp, #4]
   41138:	f10a 0a01 	add.w	sl, sl, #1
   4113c:	3a01      	subs	r2, #1
   4113e:	2a00      	cmp	r2, #0
   41140:	f8cb 2004 	str.w	r2, [fp, #4]
   41144:	dde5      	ble.n	41112 <__ssvfscanf_r+0x23a>
   41146:	f8cb 3000 	str.w	r3, [fp]
   4114a:	e7e9      	b.n	41120 <__ssvfscanf_r+0x248>
   4114c:	1e63      	subs	r3, r4, #1
   4114e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   41152:	f240 86c6 	bls.w	41ee2 <__ssvfscanf_r+0x100a>
   41156:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
   4115a:	eb04 0902 	add.w	r9, r4, r2
   4115e:	f240 145d 	movw	r4, #349	; 0x15d
   41162:	f507 76ac 	add.w	r6, r7, #344	; 0x158
   41166:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
   4116a:	f445 6558 	orr.w	r5, r5, #3456	; 0xd80
   4116e:	f04f 0800 	mov.w	r8, #0
   41172:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
   41176:	623e      	str	r6, [r7, #32]
   41178:	f8db 1000 	ldr.w	r1, [fp]
   4117c:	7808      	ldrb	r0, [r1, #0]
   4117e:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   41182:	2b4d      	cmp	r3, #77	; 0x4d
   41184:	f200 82b5 	bhi.w	416f2 <__ssvfscanf_r+0x81a>
   41188:	e8df f013 	tbh	[pc, r3, lsl #1]
   4118c:	02b302fc 	.word	0x02b302fc
   41190:	02b302fc 	.word	0x02b302fc
   41194:	02da02b3 	.word	0x02da02b3
   41198:	02f202f2 	.word	0x02f202f2
   4119c:	02f202f2 	.word	0x02f202f2
   411a0:	02f202f2 	.word	0x02f202f2
   411a4:	02e902f2 	.word	0x02e902f2
   411a8:	02b302e9 	.word	0x02b302e9
   411ac:	02b302b3 	.word	0x02b302b3
   411b0:	02b302b3 	.word	0x02b302b3
   411b4:	02b302b3 	.word	0x02b302b3
   411b8:	02f802f8 	.word	0x02f802f8
   411bc:	02f802f8 	.word	0x02f802f8
   411c0:	02f802f8 	.word	0x02f802f8
   411c4:	02b302b3 	.word	0x02b302b3
   411c8:	02b302b3 	.word	0x02b302b3
   411cc:	02b302b3 	.word	0x02b302b3
   411d0:	02b302b3 	.word	0x02b302b3
   411d4:	02b302b3 	.word	0x02b302b3
   411d8:	02b302b3 	.word	0x02b302b3
   411dc:	02b302b3 	.word	0x02b302b3
   411e0:	02b302b3 	.word	0x02b302b3
   411e4:	029802b3 	.word	0x029802b3
   411e8:	02b302b3 	.word	0x02b302b3
   411ec:	02b302b3 	.word	0x02b302b3
   411f0:	02b302b3 	.word	0x02b302b3
   411f4:	02b302b3 	.word	0x02b302b3
   411f8:	02f802f8 	.word	0x02f802f8
   411fc:	02f802f8 	.word	0x02f802f8
   41200:	02f802f8 	.word	0x02f802f8
   41204:	02b302b3 	.word	0x02b302b3
   41208:	02b302b3 	.word	0x02b302b3
   4120c:	02b302b3 	.word	0x02b302b3
   41210:	02b302b3 	.word	0x02b302b3
   41214:	02b302b3 	.word	0x02b302b3
   41218:	02b302b3 	.word	0x02b302b3
   4121c:	02b302b3 	.word	0x02b302b3
   41220:	02b302b3 	.word	0x02b302b3
   41224:	029802b3 	.word	0x029802b3
   41228:	2c00      	cmp	r4, #0
   4122a:	f005 0610 	and.w	r6, r5, #16
   4122e:	bf08      	it	eq
   41230:	f04f 34ff 	moveq.w	r4, #4294967295
   41234:	f015 0801 	ands.w	r8, r5, #1
   41238:	f000 84d5 	beq.w	41be6 <__ssvfscanf_r+0xd0e>
   4123c:	2e00      	cmp	r6, #0
   4123e:	f040 869a 	bne.w	41f76 <__ssvfscanf_r+0x109e>
   41242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   41244:	062a      	lsls	r2, r5, #24
   41246:	f853 8b04 	ldr.w	r8, [r3], #4
   4124a:	633b      	str	r3, [r7, #48]	; 0x30
   4124c:	f140 87ee 	bpl.w	4222c <__ssvfscanf_r+0x1354>
   41250:	f1b8 0f00 	cmp.w	r8, #0
   41254:	f001 80d4 	beq.w	42400 <__ssvfscanf_r+0x1528>
   41258:	2080      	movs	r0, #128	; 0x80
   4125a:	f7fe fa1d 	bl	3f698 <malloc>
   4125e:	4681      	mov	r9, r0
   41260:	2800      	cmp	r0, #0
   41262:	f001 8097 	beq.w	42394 <__ssvfscanf_r+0x14bc>
   41266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   41268:	f8c8 0000 	str.w	r0, [r8]
   4126c:	88d5      	ldrh	r5, [r2, #6]
   4126e:	8893      	ldrh	r3, [r2, #4]
   41270:	429d      	cmp	r5, r3
   41272:	f081 8005 	bcs.w	42280 <__ssvfscanf_r+0x13a8>
   41276:	6810      	ldr	r0, [r2, #0]
   41278:	2220      	movs	r2, #32
   4127a:	1c6b      	adds	r3, r5, #1
   4127c:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
   41280:	f8c7 8020 	str.w	r8, [r7, #32]
   41284:	46c8      	mov	r8, r9
   41286:	61ba      	str	r2, [r7, #24]
   41288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   4128a:	80d3      	strh	r3, [r2, #6]
   4128c:	2500      	movs	r5, #0
   4128e:	f7fe f9f5 	bl	3f67c <__locale_ctype_ptr>
   41292:	f8db 3000 	ldr.w	r3, [fp]
   41296:	781b      	ldrb	r3, [r3, #0]
   41298:	4418      	add	r0, r3
   4129a:	7843      	ldrb	r3, [r0, #1]
   4129c:	071b      	lsls	r3, r3, #28
   4129e:	f100 870b 	bmi.w	420b8 <__ssvfscanf_r+0x11e0>
   412a2:	2c00      	cmp	r4, #0
   412a4:	f000 8708 	beq.w	420b8 <__ssvfscanf_r+0x11e0>
   412a8:	f7fe f9d6 	bl	3f658 <__locale_mb_cur_max>
   412ac:	42a8      	cmp	r0, r5
   412ae:	f43f aeb3 	beq.w	41018 <__ssvfscanf_r+0x140>
   412b2:	1c6b      	adds	r3, r5, #1
   412b4:	f8db 2000 	ldr.w	r2, [fp]
   412b8:	f507 70ac 	add.w	r0, r7, #344	; 0x158
   412bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   412be:	f8db 3004 	ldr.w	r3, [fp, #4]
   412c2:	f812 1b01 	ldrb.w	r1, [r2], #1
   412c6:	3b01      	subs	r3, #1
   412c8:	5541      	strb	r1, [r0, r5]
   412ca:	f107 0550 	add.w	r5, r7, #80	; 0x50
   412ce:	e9cb 2300 	strd	r2, r3, [fp]
   412d2:	687b      	ldr	r3, [r7, #4]
   412d4:	2b03      	cmp	r3, #3
   412d6:	d102      	bne.n	412de <__ssvfscanf_r+0x406>
   412d8:	682b      	ldr	r3, [r5, #0]
   412da:	2b04      	cmp	r3, #4
   412dc:	d004      	beq.n	412e8 <__ssvfscanf_r+0x410>
   412de:	2208      	movs	r2, #8
   412e0:	2100      	movs	r1, #0
   412e2:	4628      	mov	r0, r5
   412e4:	f7fe fd32 	bl	3fd4c <memset>
   412e8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   412ec:	9500      	str	r5, [sp, #0]
   412ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   412f0:	4641      	mov	r1, r8
   412f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   412f4:	f003 fad4 	bl	448a0 <_mbrtowc_r>
   412f8:	1c42      	adds	r2, r0, #1
   412fa:	6078      	str	r0, [r7, #4]
   412fc:	f43f ae8c 	beq.w	41018 <__ssvfscanf_r+0x140>
   41300:	2800      	cmp	r0, #0
   41302:	f040 87a6 	bne.w	42252 <__ssvfscanf_r+0x137a>
   41306:	f8c8 0000 	str.w	r0, [r8]
   4130a:	f003 fa15 	bl	44738 <iswspace>
   4130e:	2800      	cmp	r0, #0
   41310:	f040 86bd 	bne.w	4208e <__ssvfscanf_r+0x11b6>
   41314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   41316:	449a      	add	sl, r3
   41318:	3c01      	subs	r4, #1
   4131a:	2e00      	cmp	r6, #0
   4131c:	f041 8015 	bne.w	4234a <__ssvfscanf_r+0x1472>
   41320:	f108 0804 	add.w	r8, r8, #4
   41324:	69bb      	ldr	r3, [r7, #24]
   41326:	eba8 0509 	sub.w	r5, r8, r9
   4132a:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
   4132e:	f201 800c 	bhi.w	4234a <__ssvfscanf_r+0x1472>
   41332:	6a3a      	ldr	r2, [r7, #32]
   41334:	2a00      	cmp	r2, #0
   41336:	f001 8008 	beq.w	4234a <__ssvfscanf_r+0x1472>
   4133a:	4648      	mov	r0, r9
   4133c:	00d9      	lsls	r1, r3, #3
   4133e:	f7fe fd81 	bl	3fe44 <realloc>
   41342:	4681      	mov	r9, r0
   41344:	2800      	cmp	r0, #0
   41346:	f001 8025 	beq.w	42394 <__ssvfscanf_r+0x14bc>
   4134a:	69bb      	ldr	r3, [r7, #24]
   4134c:	eb00 0805 	add.w	r8, r0, r5
   41350:	6a3a      	ldr	r2, [r7, #32]
   41352:	005b      	lsls	r3, r3, #1
   41354:	62fe      	str	r6, [r7, #44]	; 0x2c
   41356:	6010      	str	r0, [r2, #0]
   41358:	61bb      	str	r3, [r7, #24]
   4135a:	f000 bf7e 	b.w	4225a <__ssvfscanf_r+0x1382>
   4135e:	bf00      	nop
   41360:	00040d01 	.word	0x00040d01
   41364:	2c00      	cmp	r4, #0
   41366:	f005 0310 	and.w	r3, r5, #16
   4136a:	bf08      	it	eq
   4136c:	f04f 34ff 	moveq.w	r4, #4294967295
   41370:	f015 0601 	ands.w	r6, r5, #1
   41374:	617b      	str	r3, [r7, #20]
   41376:	f000 8535 	beq.w	41de4 <__ssvfscanf_r+0xf0c>
   4137a:	2b00      	cmp	r3, #0
   4137c:	f040 8604 	bne.w	41f88 <__ssvfscanf_r+0x10b0>
   41380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   41382:	062d      	lsls	r5, r5, #24
   41384:	f853 8b04 	ldr.w	r8, [r3], #4
   41388:	633b      	str	r3, [r7, #48]	; 0x30
   4138a:	f140 8747 	bpl.w	4221c <__ssvfscanf_r+0x1344>
   4138e:	f1b8 0f00 	cmp.w	r8, #0
   41392:	f001 8035 	beq.w	42400 <__ssvfscanf_r+0x1528>
   41396:	2080      	movs	r0, #128	; 0x80
   41398:	f7fe f97e 	bl	3f698 <malloc>
   4139c:	6138      	str	r0, [r7, #16]
   4139e:	2800      	cmp	r0, #0
   413a0:	f000 87f8 	beq.w	42394 <__ssvfscanf_r+0x14bc>
   413a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   413a6:	693a      	ldr	r2, [r7, #16]
   413a8:	88cd      	ldrh	r5, [r1, #6]
   413aa:	888b      	ldrh	r3, [r1, #4]
   413ac:	f8c8 2000 	str.w	r2, [r8]
   413b0:	429d      	cmp	r5, r3
   413b2:	d310      	bcc.n	413d6 <__ssvfscanf_r+0x4fe>
   413b4:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   413b8:	4293      	cmp	r3, r2
   413ba:	f201 802f 	bhi.w	4241c <__ssvfscanf_r+0x1544>
   413be:	f103 0608 	add.w	r6, r3, #8
   413c2:	6808      	ldr	r0, [r1, #0]
   413c4:	00b1      	lsls	r1, r6, #2
   413c6:	f7fe fd3d 	bl	3fe44 <realloc>
   413ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   413cc:	2800      	cmp	r0, #0
   413ce:	f000 87e3 	beq.w	42398 <__ssvfscanf_r+0x14c0>
   413d2:	6018      	str	r0, [r3, #0]
   413d4:	809e      	strh	r6, [r3, #4]
   413d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
   413d8:	1c6b      	adds	r3, r5, #1
   413da:	f8c7 8008 	str.w	r8, [r7, #8]
   413de:	680a      	ldr	r2, [r1, #0]
   413e0:	80cb      	strh	r3, [r1, #6]
   413e2:	2320      	movs	r3, #32
   413e4:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
   413e8:	f8d7 8010 	ldr.w	r8, [r7, #16]
   413ec:	60fb      	str	r3, [r7, #12]
   413ee:	2500      	movs	r5, #0
   413f0:	f8c7 a020 	str.w	sl, [r7, #32]
   413f4:	62fc      	str	r4, [r7, #44]	; 0x2c
   413f6:	687e      	ldr	r6, [r7, #4]
   413f8:	e05a      	b.n	414b0 <__ssvfscanf_r+0x5d8>
   413fa:	46b2      	mov	sl, r6
   413fc:	f8c8 6000 	str.w	r6, [r8]
   41400:	f107 0350 	add.w	r3, r7, #80	; 0x50
   41404:	2208      	movs	r2, #8
   41406:	2100      	movs	r1, #0
   41408:	4caa      	ldr	r4, [pc, #680]	; (416b4 <__ssvfscanf_r+0x7dc>)
   4140a:	4618      	mov	r0, r3
   4140c:	61bb      	str	r3, [r7, #24]
   4140e:	f7fe fc9d 	bl	3fd4c <memset>
   41412:	4ba9      	ldr	r3, [pc, #676]	; (416b8 <__ssvfscanf_r+0x7e0>)
   41414:	4652      	mov	r2, sl
   41416:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   41418:	6819      	ldr	r1, [r3, #0]
   4141a:	69bb      	ldr	r3, [r7, #24]
   4141c:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
   41420:	f107 0140 	add.w	r1, r7, #64	; 0x40
   41424:	f1bc 0f00 	cmp.w	ip, #0
   41428:	bf08      	it	eq
   4142a:	46a4      	moveq	ip, r4
   4142c:	f8dc a0e0 	ldr.w	sl, [ip, #224]	; 0xe0
   41430:	47d0      	blx	sl
   41432:	2801      	cmp	r0, #1
   41434:	bf0c      	ite	eq
   41436:	f897 a040 	ldrbeq.w	sl, [r7, #64]	; 0x40
   4143a:	f04f 0a00 	movne.w	sl, #0
   4143e:	f107 0358 	add.w	r3, r7, #88	; 0x58
   41442:	f813 300a 	ldrb.w	r3, [r3, sl]
   41446:	2b00      	cmp	r3, #0
   41448:	f000 8782 	beq.w	42350 <__ssvfscanf_r+0x1478>
   4144c:	6a3b      	ldr	r3, [r7, #32]
   4144e:	2e03      	cmp	r6, #3
   41450:	444b      	add	r3, r9
   41452:	623b      	str	r3, [r7, #32]
   41454:	f000 8609 	beq.w	4206a <__ssvfscanf_r+0x1192>
   41458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   4145a:	3b01      	subs	r3, #1
   4145c:	62fb      	str	r3, [r7, #44]	; 0x2c
   4145e:	697b      	ldr	r3, [r7, #20]
   41460:	2b00      	cmp	r3, #0
   41462:	f040 85fc 	bne.w	4205e <__ssvfscanf_r+0x1186>
   41466:	f108 0804 	add.w	r8, r8, #4
   4146a:	6938      	ldr	r0, [r7, #16]
   4146c:	68fa      	ldr	r2, [r7, #12]
   4146e:	eba8 0500 	sub.w	r5, r8, r0
   41472:	4614      	mov	r4, r2
   41474:	ebb2 0fa5 	cmp.w	r2, r5, asr #2
   41478:	f200 85f1 	bhi.w	4205e <__ssvfscanf_r+0x1186>
   4147c:	68b9      	ldr	r1, [r7, #8]
   4147e:	2900      	cmp	r1, #0
   41480:	f000 85ed 	beq.w	4205e <__ssvfscanf_r+0x1186>
   41484:	00d1      	lsls	r1, r2, #3
   41486:	f7fe fcdd 	bl	3fe44 <realloc>
   4148a:	6138      	str	r0, [r7, #16]
   4148c:	2800      	cmp	r0, #0
   4148e:	f000 8781 	beq.w	42394 <__ssvfscanf_r+0x14bc>
   41492:	eb00 0805 	add.w	r8, r0, r5
   41496:	68b9      	ldr	r1, [r7, #8]
   41498:	0062      	lsls	r2, r4, #1
   4149a:	697d      	ldr	r5, [r7, #20]
   4149c:	6008      	str	r0, [r1, #0]
   4149e:	60fa      	str	r2, [r7, #12]
   414a0:	f8db 3004 	ldr.w	r3, [fp, #4]
   414a4:	2b00      	cmp	r3, #0
   414a6:	dd3a      	ble.n	4151e <__ssvfscanf_r+0x646>
   414a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   414aa:	2b00      	cmp	r3, #0
   414ac:	f000 868a 	beq.w	421c4 <__ssvfscanf_r+0x12ec>
   414b0:	f7fe f8d2 	bl	3f658 <__locale_mb_cur_max>
   414b4:	42a8      	cmp	r0, r5
   414b6:	f43f adaf 	beq.w	41018 <__ssvfscanf_r+0x140>
   414ba:	f8db 2000 	ldr.w	r2, [fp]
   414be:	f507 70ac 	add.w	r0, r7, #344	; 0x158
   414c2:	f8db 3004 	ldr.w	r3, [fp, #4]
   414c6:	2e03      	cmp	r6, #3
   414c8:	f812 1b01 	ldrb.w	r1, [r2], #1
   414cc:	f105 0901 	add.w	r9, r5, #1
   414d0:	f103 33ff 	add.w	r3, r3, #4294967295
   414d4:	5541      	strb	r1, [r0, r5]
   414d6:	f107 0548 	add.w	r5, r7, #72	; 0x48
   414da:	e9cb 2300 	strd	r2, r3, [fp]
   414de:	d102      	bne.n	414e6 <__ssvfscanf_r+0x60e>
   414e0:	682b      	ldr	r3, [r5, #0]
   414e2:	2b04      	cmp	r3, #4
   414e4:	d004      	beq.n	414f0 <__ssvfscanf_r+0x618>
   414e6:	2208      	movs	r2, #8
   414e8:	2100      	movs	r1, #0
   414ea:	4628      	mov	r0, r5
   414ec:	f7fe fc2e 	bl	3fd4c <memset>
   414f0:	9500      	str	r5, [sp, #0]
   414f2:	464b      	mov	r3, r9
   414f4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   414f8:	4641      	mov	r1, r8
   414fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   414fc:	f003 f9d0 	bl	448a0 <_mbrtowc_r>
   41500:	4606      	mov	r6, r0
   41502:	3001      	adds	r0, #1
   41504:	f43f ad88 	beq.w	41018 <__ssvfscanf_r+0x140>
   41508:	2e00      	cmp	r6, #0
   4150a:	f43f af76 	beq.w	413fa <__ssvfscanf_r+0x522>
   4150e:	1cb1      	adds	r1, r6, #2
   41510:	f040 87b2 	bne.w	42478 <__ssvfscanf_r+0x15a0>
   41514:	f8db 3004 	ldr.w	r3, [fp, #4]
   41518:	464d      	mov	r5, r9
   4151a:	2b00      	cmp	r3, #0
   4151c:	dcc4      	bgt.n	414a8 <__ssvfscanf_r+0x5d0>
   4151e:	4659      	mov	r1, fp
   41520:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   41522:	f004 fa2b 	bl	4597c <__ssrefill_r>
   41526:	2800      	cmp	r0, #0
   41528:	d0be      	beq.n	414a8 <__ssvfscanf_r+0x5d0>
   4152a:	f8d7 a020 	ldr.w	sl, [r7, #32]
   4152e:	607e      	str	r6, [r7, #4]
   41530:	2d00      	cmp	r5, #0
   41532:	f000 864a 	beq.w	421ca <__ssvfscanf_r+0x12f2>
   41536:	e56f      	b.n	41018 <__ssvfscanf_r+0x140>
   41538:	2c00      	cmp	r4, #0
   4153a:	f005 0210 	and.w	r2, r5, #16
   4153e:	bf08      	it	eq
   41540:	2401      	moveq	r4, #1
   41542:	f015 0301 	ands.w	r3, r5, #1
   41546:	62fa      	str	r2, [r7, #44]	; 0x2c
   41548:	f000 83f9 	beq.w	41d3e <__ssvfscanf_r+0xe66>
   4154c:	2a00      	cmp	r2, #0
   4154e:	f040 84e9 	bne.w	41f24 <__ssvfscanf_r+0x104c>
   41552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   41554:	062a      	lsls	r2, r5, #24
   41556:	f853 8b04 	ldr.w	r8, [r3], #4
   4155a:	633b      	str	r3, [r7, #48]	; 0x30
   4155c:	f140 8658 	bpl.w	42210 <__ssvfscanf_r+0x1338>
   41560:	f1b8 0f00 	cmp.w	r8, #0
   41564:	f000 874c 	beq.w	42400 <__ssvfscanf_r+0x1528>
   41568:	2080      	movs	r0, #128	; 0x80
   4156a:	f7fe f895 	bl	3f698 <malloc>
   4156e:	61b8      	str	r0, [r7, #24]
   41570:	2800      	cmp	r0, #0
   41572:	f000 870f 	beq.w	42394 <__ssvfscanf_r+0x14bc>
   41576:	6a79      	ldr	r1, [r7, #36]	; 0x24
   41578:	69ba      	ldr	r2, [r7, #24]
   4157a:	88cd      	ldrh	r5, [r1, #6]
   4157c:	888b      	ldrh	r3, [r1, #4]
   4157e:	f8c8 2000 	str.w	r2, [r8]
   41582:	429d      	cmp	r5, r3
   41584:	d310      	bcc.n	415a8 <__ssvfscanf_r+0x6d0>
   41586:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   4158a:	4293      	cmp	r3, r2
   4158c:	f200 8746 	bhi.w	4241c <__ssvfscanf_r+0x1544>
   41590:	f103 0608 	add.w	r6, r3, #8
   41594:	6808      	ldr	r0, [r1, #0]
   41596:	00b1      	lsls	r1, r6, #2
   41598:	f7fe fc54 	bl	3fe44 <realloc>
   4159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   4159e:	2800      	cmp	r0, #0
   415a0:	f000 86fa 	beq.w	42398 <__ssvfscanf_r+0x14c0>
   415a4:	6018      	str	r0, [r3, #0]
   415a6:	809e      	strh	r6, [r3, #4]
   415a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   415aa:	1c6b      	adds	r3, r5, #1
   415ac:	f8c7 8010 	str.w	r8, [r7, #16]
   415b0:	680a      	ldr	r2, [r1, #0]
   415b2:	80cb      	strh	r3, [r1, #6]
   415b4:	2320      	movs	r3, #32
   415b6:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
   415ba:	f8d7 8018 	ldr.w	r8, [r7, #24]
   415be:	617b      	str	r3, [r7, #20]
   415c0:	f8c7 a020 	str.w	sl, [r7, #32]
   415c4:	2500      	movs	r5, #0
   415c6:	f507 79ac 	add.w	r9, r7, #344	; 0x158
   415ca:	f8d7 a004 	ldr.w	sl, [r7, #4]
   415ce:	f7fe f843 	bl	3f658 <__locale_mb_cur_max>
   415d2:	42a8      	cmp	r0, r5
   415d4:	f43f ad20 	beq.w	41018 <__ssvfscanf_r+0x140>
   415d8:	f8db 1000 	ldr.w	r1, [fp]
   415dc:	f1ba 0f03 	cmp.w	sl, #3
   415e0:	f8db 2004 	ldr.w	r2, [fp, #4]
   415e4:	f105 0601 	add.w	r6, r5, #1
   415e8:	f811 0b01 	ldrb.w	r0, [r1], #1
   415ec:	f102 32ff 	add.w	r2, r2, #4294967295
   415f0:	f809 0005 	strb.w	r0, [r9, r5]
   415f4:	f107 0550 	add.w	r5, r7, #80	; 0x50
   415f8:	e9cb 1200 	strd	r1, r2, [fp]
   415fc:	d102      	bne.n	41604 <__ssvfscanf_r+0x72c>
   415fe:	682b      	ldr	r3, [r5, #0]
   41600:	2b04      	cmp	r3, #4
   41602:	d004      	beq.n	4160e <__ssvfscanf_r+0x736>
   41604:	2208      	movs	r2, #8
   41606:	2100      	movs	r1, #0
   41608:	4628      	mov	r0, r5
   4160a:	f7fe fb9f 	bl	3fd4c <memset>
   4160e:	9500      	str	r5, [sp, #0]
   41610:	4633      	mov	r3, r6
   41612:	464a      	mov	r2, r9
   41614:	4641      	mov	r1, r8
   41616:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   41618:	f003 f942 	bl	448a0 <_mbrtowc_r>
   4161c:	f1b0 3fff 	cmp.w	r0, #4294967295
   41620:	4682      	mov	sl, r0
   41622:	f43f acf9 	beq.w	41018 <__ssvfscanf_r+0x140>
   41626:	2800      	cmp	r0, #0
   41628:	f040 8513 	bne.w	42052 <__ssvfscanf_r+0x117a>
   4162c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   4162e:	b90b      	cbnz	r3, 41634 <__ssvfscanf_r+0x75c>
   41630:	f8c8 3000 	str.w	r3, [r8]
   41634:	6a3b      	ldr	r3, [r7, #32]
   41636:	4433      	add	r3, r6
   41638:	623b      	str	r3, [r7, #32]
   4163a:	3c01      	subs	r4, #1
   4163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   4163e:	2b00      	cmp	r3, #0
   41640:	f040 8510 	bne.w	42064 <__ssvfscanf_r+0x118c>
   41644:	69b8      	ldr	r0, [r7, #24]
   41646:	697b      	ldr	r3, [r7, #20]
   41648:	eba8 0500 	sub.w	r5, r8, r0
   4164c:	461e      	mov	r6, r3
   4164e:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
   41652:	d80e      	bhi.n	41672 <__ssvfscanf_r+0x79a>
   41654:	693a      	ldr	r2, [r7, #16]
   41656:	b162      	cbz	r2, 41672 <__ssvfscanf_r+0x79a>
   41658:	00d9      	lsls	r1, r3, #3
   4165a:	f7fe fbf3 	bl	3fe44 <realloc>
   4165e:	61b8      	str	r0, [r7, #24]
   41660:	2800      	cmp	r0, #0
   41662:	f000 8697 	beq.w	42394 <__ssvfscanf_r+0x14bc>
   41666:	0071      	lsls	r1, r6, #1
   41668:	693a      	ldr	r2, [r7, #16]
   4166a:	eb00 0805 	add.w	r8, r0, r5
   4166e:	6179      	str	r1, [r7, #20]
   41670:	6010      	str	r0, [r2, #0]
   41672:	f108 0804 	add.w	r8, r8, #4
   41676:	2500      	movs	r5, #0
   41678:	f8db 2004 	ldr.w	r2, [fp, #4]
   4167c:	2a00      	cmp	r2, #0
   4167e:	f340 843d 	ble.w	41efc <__ssvfscanf_r+0x1024>
   41682:	2c00      	cmp	r4, #0
   41684:	d1a3      	bne.n	415ce <__ssvfscanf_r+0x6f6>
   41686:	f8c7 a004 	str.w	sl, [r7, #4]
   4168a:	f8d7 a020 	ldr.w	sl, [r7, #32]
   4168e:	69bb      	ldr	r3, [r7, #24]
   41690:	eba8 0103 	sub.w	r1, r8, r3
   41694:	697b      	ldr	r3, [r7, #20]
   41696:	ebb3 0fa1 	cmp.w	r3, r1, asr #2
   4169a:	d903      	bls.n	416a4 <__ssvfscanf_r+0x7cc>
   4169c:	693c      	ldr	r4, [r7, #16]
   4169e:	2c00      	cmp	r4, #0
   416a0:	f040 860b 	bne.w	422ba <__ssvfscanf_r+0x13e2>
   416a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   416a6:	2b00      	cmp	r3, #0
   416a8:	f47f ac35 	bne.w	40f16 <__ssvfscanf_r+0x3e>
   416ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   416ae:	3301      	adds	r3, #1
   416b0:	637b      	str	r3, [r7, #52]	; 0x34
   416b2:	e430      	b.n	40f16 <__ssvfscanf_r+0x3e>
   416b4:	20031c28 	.word	0x20031c28
   416b8:	20031c24 	.word	0x20031c24
   416bc:	f405 63c0 	and.w	r3, r5, #1536	; 0x600
   416c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   416c4:	d115      	bne.n	416f2 <__ssvfscanf_r+0x81a>
   416c6:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   416ca:	f04f 0910 	mov.w	r9, #16
   416ce:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
   416d2:	7030      	strb	r0, [r6, #0]
   416d4:	3601      	adds	r6, #1
   416d6:	f8db 3004 	ldr.w	r3, [fp, #4]
   416da:	3b01      	subs	r3, #1
   416dc:	2b00      	cmp	r3, #0
   416de:	f8cb 3004 	str.w	r3, [fp, #4]
   416e2:	f340 80ff 	ble.w	418e4 <__ssvfscanf_r+0xa0c>
   416e6:	3101      	adds	r1, #1
   416e8:	f8cb 1000 	str.w	r1, [fp]
   416ec:	3c01      	subs	r4, #1
   416ee:	f47f ad43 	bne.w	41178 <__ssvfscanf_r+0x2a0>
   416f2:	05e8      	lsls	r0, r5, #23
   416f4:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
   416f8:	d507      	bpl.n	4170a <__ssvfscanf_r+0x832>
   416fa:	6a3b      	ldr	r3, [r7, #32]
   416fc:	429e      	cmp	r6, r3
   416fe:	f200 846b 	bhi.w	41fd8 <__ssvfscanf_r+0x1100>
   41702:	6a3b      	ldr	r3, [r7, #32]
   41704:	429e      	cmp	r6, r3
   41706:	f43f ac90 	beq.w	4102a <__ssvfscanf_r+0x152>
   4170a:	f015 0410 	ands.w	r4, r5, #16
   4170e:	f040 8264 	bne.w	41bda <__ssvfscanf_r+0xd02>
   41712:	4622      	mov	r2, r4
   41714:	6abb      	ldr	r3, [r7, #40]	; 0x28
   41716:	6a39      	ldr	r1, [r7, #32]
   41718:	7034      	strb	r4, [r6, #0]
   4171a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   4171c:	69fc      	ldr	r4, [r7, #28]
   4171e:	47a0      	blx	r4
   41720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   41722:	06a9      	lsls	r1, r5, #26
   41724:	f103 0404 	add.w	r4, r3, #4
   41728:	f100 8251 	bmi.w	41bce <__ssvfscanf_r+0xcf6>
   4172c:	072a      	lsls	r2, r5, #28
   4172e:	f100 83f5 	bmi.w	41f1c <__ssvfscanf_r+0x1044>
   41732:	076b      	lsls	r3, r5, #29
   41734:	f140 8246 	bpl.w	41bc4 <__ssvfscanf_r+0xcec>
   41738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   4173a:	681b      	ldr	r3, [r3, #0]
   4173c:	8018      	strh	r0, [r3, #0]
   4173e:	e248      	b.n	41bd2 <__ssvfscanf_r+0xcfa>
   41740:	052b      	lsls	r3, r5, #20
   41742:	d5c6      	bpl.n	416d2 <__ssvfscanf_r+0x7fa>
   41744:	f1b9 0f00 	cmp.w	r9, #0
   41748:	d103      	bne.n	41752 <__ssvfscanf_r+0x87a>
   4174a:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   4174e:	f04f 0908 	mov.w	r9, #8
   41752:	056a      	lsls	r2, r5, #21
   41754:	f140 8513 	bpl.w	4217e <__ssvfscanf_r+0x12a6>
   41758:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
   4175c:	e7b9      	b.n	416d2 <__ssvfscanf_r+0x7fa>
   4175e:	4ba1      	ldr	r3, [pc, #644]	; (419e4 <__ssvfscanf_r+0xb0c>)
   41760:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
   41764:	f1b9 0f08 	cmp.w	r9, #8
   41768:	ddc3      	ble.n	416f2 <__ssvfscanf_r+0x81a>
   4176a:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   4176e:	e7b0      	b.n	416d2 <__ssvfscanf_r+0x7fa>
   41770:	4b9c      	ldr	r3, [pc, #624]	; (419e4 <__ssvfscanf_r+0xb0c>)
   41772:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   41776:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
   4177a:	e7aa      	b.n	416d2 <__ssvfscanf_r+0x7fa>
   4177c:	f1b9 0f0a 	cmp.w	r9, #10
   41780:	dcf3      	bgt.n	4176a <__ssvfscanf_r+0x892>
   41782:	e7b6      	b.n	416f2 <__ssvfscanf_r+0x81a>
   41784:	062b      	lsls	r3, r5, #24
   41786:	d5b4      	bpl.n	416f2 <__ssvfscanf_r+0x81a>
   41788:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   4178c:	e7a1      	b.n	416d2 <__ssvfscanf_r+0x7fa>
   4178e:	63b9      	str	r1, [r7, #56]	; 0x38
   41790:	f8db 3004 	ldr.w	r3, [fp, #4]
   41794:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   41798:	f04f 0800 	mov.w	r8, #0
   4179c:	2b00      	cmp	r3, #0
   4179e:	f73f acaa 	bgt.w	410f6 <__ssvfscanf_r+0x21e>
   417a2:	4659      	mov	r1, fp
   417a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   417a6:	f004 f8e9 	bl	4597c <__ssrefill_r>
   417aa:	2800      	cmp	r0, #0
   417ac:	f43f aca3 	beq.w	410f6 <__ssvfscanf_r+0x21e>
   417b0:	e432      	b.n	41018 <__ssvfscanf_r+0x140>
   417b2:	63b9      	str	r1, [r7, #56]	; 0x38
   417b4:	f045 0501 	orr.w	r5, r5, #1
   417b8:	e7ea      	b.n	41790 <__ssvfscanf_r+0x8b8>
   417ba:	63b9      	str	r1, [r7, #56]	; 0x38
   417bc:	f04f 0804 	mov.w	r8, #4
   417c0:	e494      	b.n	410ec <__ssvfscanf_r+0x214>
   417c2:	f015 0f8f 	tst.w	r5, #143	; 0x8f
   417c6:	f47f ac30 	bne.w	4102a <__ssvfscanf_r+0x152>
   417ca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   417ce:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   417d2:	f898 2001 	ldrb.w	r2, [r8, #1]
   417d6:	4688      	mov	r8, r1
   417d8:	3c30      	subs	r4, #48	; 0x30
   417da:	f7ff bbb4 	b.w	40f46 <__ssvfscanf_r+0x6e>
   417de:	432c      	orrs	r4, r5
   417e0:	f47f ac23 	bne.w	4102a <__ssvfscanf_r+0x152>
   417e4:	f898 2001 	ldrb.w	r2, [r8, #1]
   417e8:	2510      	movs	r5, #16
   417ea:	4688      	mov	r8, r1
   417ec:	f7ff bbab 	b.w	40f46 <__ssvfscanf_r+0x6e>
   417f0:	4b7d      	ldr	r3, [pc, #500]	; (419e8 <__ssvfscanf_r+0xb10>)
   417f2:	f04f 0803 	mov.w	r8, #3
   417f6:	63b9      	str	r1, [r7, #56]	; 0x38
   417f8:	61fb      	str	r3, [r7, #28]
   417fa:	2300      	movs	r3, #0
   417fc:	62bb      	str	r3, [r7, #40]	; 0x28
   417fe:	e475      	b.n	410ec <__ssvfscanf_r+0x214>
   41800:	0728      	lsls	r0, r5, #28
   41802:	f47f ac12 	bne.w	4102a <__ssvfscanf_r+0x152>
   41806:	f898 2001 	ldrb.w	r2, [r8, #1]
   4180a:	2a68      	cmp	r2, #104	; 0x68
   4180c:	f000 840b 	beq.w	42026 <__ssvfscanf_r+0x114e>
   41810:	f045 0504 	orr.w	r5, r5, #4
   41814:	4688      	mov	r8, r1
   41816:	f7ff bb96 	b.w	40f46 <__ssvfscanf_r+0x6e>
   4181a:	f107 0058 	add.w	r0, r7, #88	; 0x58
   4181e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   41822:	f003 fd85 	bl	45330 <__sccl>
   41826:	f04f 0801 	mov.w	r8, #1
   4182a:	63b8      	str	r0, [r7, #56]	; 0x38
   4182c:	e45e      	b.n	410ec <__ssvfscanf_r+0x214>
   4182e:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   41832:	63b9      	str	r1, [r7, #56]	; 0x38
   41834:	4b6d      	ldr	r3, [pc, #436]	; (419ec <__ssvfscanf_r+0xb14>)
   41836:	f04f 0803 	mov.w	r8, #3
   4183a:	61fb      	str	r3, [r7, #28]
   4183c:	2310      	movs	r3, #16
   4183e:	62bb      	str	r3, [r7, #40]	; 0x28
   41840:	e454      	b.n	410ec <__ssvfscanf_r+0x214>
   41842:	63b9      	str	r1, [r7, #56]	; 0x38
   41844:	f045 0501 	orr.w	r5, r5, #1
   41848:	f04f 0802 	mov.w	r8, #2
   4184c:	e44e      	b.n	410ec <__ssvfscanf_r+0x214>
   4184e:	f045 0501 	orr.w	r5, r5, #1
   41852:	63b9      	str	r1, [r7, #56]	; 0x38
   41854:	4b65      	ldr	r3, [pc, #404]	; (419ec <__ssvfscanf_r+0xb14>)
   41856:	f04f 0803 	mov.w	r8, #3
   4185a:	61fb      	str	r3, [r7, #28]
   4185c:	2308      	movs	r3, #8
   4185e:	62bb      	str	r3, [r7, #40]	; 0x28
   41860:	e444      	b.n	410ec <__ssvfscanf_r+0x214>
   41862:	63b9      	str	r1, [r7, #56]	; 0x38
   41864:	f045 0501 	orr.w	r5, r5, #1
   41868:	e43a      	b.n	410e0 <__ssvfscanf_r+0x208>
   4186a:	4b60      	ldr	r3, [pc, #384]	; (419ec <__ssvfscanf_r+0xb14>)
   4186c:	f04f 0803 	mov.w	r8, #3
   41870:	63b9      	str	r1, [r7, #56]	; 0x38
   41872:	61fb      	str	r3, [r7, #28]
   41874:	230a      	movs	r3, #10
   41876:	62bb      	str	r3, [r7, #40]	; 0x28
   41878:	e438      	b.n	410ec <__ssvfscanf_r+0x214>
   4187a:	63b9      	str	r1, [r7, #56]	; 0x38
   4187c:	f04f 0802 	mov.w	r8, #2
   41880:	e434      	b.n	410ec <__ssvfscanf_r+0x214>
   41882:	63b9      	str	r1, [r7, #56]	; 0x38
   41884:	f445 7508 	orr.w	r5, r5, #544	; 0x220
   41888:	e7d4      	b.n	41834 <__ssvfscanf_r+0x95c>
   4188a:	63b9      	str	r1, [r7, #56]	; 0x38
   4188c:	e7e2      	b.n	41854 <__ssvfscanf_r+0x97c>
   4188e:	06e8      	lsls	r0, r5, #27
   41890:	63b9      	str	r1, [r7, #56]	; 0x38
   41892:	f53f ab40 	bmi.w	40f16 <__ssvfscanf_r+0x3e>
   41896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   41898:	0729      	lsls	r1, r5, #28
   4189a:	f852 3b04 	ldr.w	r3, [r2], #4
   4189e:	633a      	str	r2, [r7, #48]	; 0x30
   418a0:	f140 84c9 	bpl.w	42236 <__ssvfscanf_r+0x135e>
   418a4:	f883 a000 	strb.w	sl, [r3]
   418a8:	f7ff bb35 	b.w	40f16 <__ssvfscanf_r+0x3e>
   418ac:	f015 038f 	ands.w	r3, r5, #143	; 0x8f
   418b0:	f47f abbb 	bne.w	4102a <__ssvfscanf_r+0x152>
   418b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   418b6:	2a00      	cmp	r2, #0
   418b8:	f000 83c5 	beq.w	42046 <__ssvfscanf_r+0x116e>
   418bc:	f898 2001 	ldrb.w	r2, [r8, #1]
   418c0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   418c4:	4688      	mov	r8, r1
   418c6:	f7ff bb3e 	b.w	40f46 <__ssvfscanf_r+0x6e>
   418ca:	072b      	lsls	r3, r5, #28
   418cc:	f47f abad 	bne.w	4102a <__ssvfscanf_r+0x152>
   418d0:	f898 2001 	ldrb.w	r2, [r8, #1]
   418d4:	2a6c      	cmp	r2, #108	; 0x6c
   418d6:	f000 83ae 	beq.w	42036 <__ssvfscanf_r+0x115e>
   418da:	f045 0501 	orr.w	r5, r5, #1
   418de:	4688      	mov	r8, r1
   418e0:	f7ff bb31 	b.w	40f46 <__ssvfscanf_r+0x6e>
   418e4:	4659      	mov	r1, fp
   418e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   418e8:	f004 f848 	bl	4597c <__ssrefill_r>
   418ec:	2800      	cmp	r0, #0
   418ee:	f43f aefd 	beq.w	416ec <__ssvfscanf_r+0x814>
   418f2:	e6fe      	b.n	416f2 <__ssvfscanf_r+0x81a>
   418f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   418f6:	f002 ff2f 	bl	44758 <_localeconv_r>
   418fa:	1e63      	subs	r3, r4, #1
   418fc:	6802      	ldr	r2, [r0, #0]
   418fe:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   41902:	617a      	str	r2, [r7, #20]
   41904:	f240 826b 	bls.w	41dde <__ssvfscanf_r+0xf06>
   41908:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
   4190c:	18a3      	adds	r3, r4, r2
   4190e:	f240 145d 	movw	r4, #349	; 0x15d
   41912:	613b      	str	r3, [r7, #16]
   41914:	2300      	movs	r3, #0
   41916:	f507 71ac 	add.w	r1, r7, #344	; 0x158
   4191a:	603e      	str	r6, [r7, #0]
   4191c:	f445 65f0 	orr.w	r5, r5, #1920	; 0x780
   41920:	461a      	mov	r2, r3
   41922:	4698      	mov	r8, r3
   41924:	4689      	mov	r9, r1
   41926:	461e      	mov	r6, r3
   41928:	6239      	str	r1, [r7, #32]
   4192a:	61bb      	str	r3, [r7, #24]
   4192c:	e9c7 3302 	strd	r3, r3, [r7, #8]
   41930:	f8db 0000 	ldr.w	r0, [fp]
   41934:	7801      	ldrb	r1, [r0, #0]
   41936:	f1a1 0c2b 	sub.w	ip, r1, #43	; 0x2b
   4193a:	f1bc 0f4e 	cmp.w	ip, #78	; 0x4e
   4193e:	f200 811a 	bhi.w	41b76 <__ssvfscanf_r+0xc9e>
   41942:	e8df f01c 	tbh	[pc, ip, lsl #1]
   41946:	0080      	.short	0x0080
   41948:	00800118 	.word	0x00800118
   4194c:	01180118 	.word	0x01180118
   41950:	00550073 	.word	0x00550073
   41954:	00550055 	.word	0x00550055
   41958:	00550055 	.word	0x00550055
   4195c:	00550055 	.word	0x00550055
   41960:	00550055 	.word	0x00550055
   41964:	01180118 	.word	0x01180118
   41968:	01180118 	.word	0x01180118
   4196c:	01180118 	.word	0x01180118
   41970:	01130118 	.word	0x01130118
   41974:	01180118 	.word	0x01180118
   41978:	00fa0118 	.word	0x00fa0118
   4197c:	011800f5 	.word	0x011800f5
   41980:	00a10118 	.word	0x00a10118
   41984:	01180118 	.word	0x01180118
   41988:	01180118 	.word	0x01180118
   4198c:	0118008d 	.word	0x0118008d
   41990:	01180118 	.word	0x01180118
   41994:	01180118 	.word	0x01180118
   41998:	01180089 	.word	0x01180089
   4199c:	01180118 	.word	0x01180118
   419a0:	00850118 	.word	0x00850118
   419a4:	01180118 	.word	0x01180118
   419a8:	01180118 	.word	0x01180118
   419ac:	01180118 	.word	0x01180118
   419b0:	01130118 	.word	0x01130118
   419b4:	01180118 	.word	0x01180118
   419b8:	00fa0118 	.word	0x00fa0118
   419bc:	011800f5 	.word	0x011800f5
   419c0:	00a10118 	.word	0x00a10118
   419c4:	01180118 	.word	0x01180118
   419c8:	01180118 	.word	0x01180118
   419cc:	0118008d 	.word	0x0118008d
   419d0:	01180118 	.word	0x01180118
   419d4:	01180118 	.word	0x01180118
   419d8:	01180089 	.word	0x01180089
   419dc:	01180118 	.word	0x01180118
   419e0:	00850118 	.word	0x00850118
   419e4:	0004ae68 	.word	0x0004ae68
   419e8:	00040d01 	.word	0x00040d01
   419ec:	00040e89 	.word	0x00040e89
   419f0:	42f2      	cmn	r2, r6
   419f2:	d115      	bne.n	41a20 <__ssvfscanf_r+0xb48>
   419f4:	f425 75c0 	bic.w	r5, r5, #384	; 0x180
   419f8:	f889 1000 	strb.w	r1, [r9]
   419fc:	f109 0901 	add.w	r9, r9, #1
   41a00:	f8db 1004 	ldr.w	r1, [fp, #4]
   41a04:	3c01      	subs	r4, #1
   41a06:	f10a 0a01 	add.w	sl, sl, #1
   41a0a:	3901      	subs	r1, #1
   41a0c:	2900      	cmp	r1, #0
   41a0e:	f8cb 1004 	str.w	r1, [fp, #4]
   41a12:	f340 80be 	ble.w	41b92 <__ssvfscanf_r+0xcba>
   41a16:	3001      	adds	r0, #1
   41a18:	f8cb 0000 	str.w	r0, [fp]
   41a1c:	2c00      	cmp	r4, #0
   41a1e:	d187      	bne.n	41930 <__ssvfscanf_r+0xa58>
   41a20:	f1b8 0f00 	cmp.w	r8, #0
   41a24:	d040      	beq.n	41aa8 <__ssvfscanf_r+0xbd0>
   41a26:	f425 7580 	bic.w	r5, r5, #256	; 0x100
   41a2a:	e03d      	b.n	41aa8 <__ssvfscanf_r+0xbd0>
   41a2c:	05eb      	lsls	r3, r5, #23
   41a2e:	d5df      	bpl.n	419f0 <__ssvfscanf_r+0xb18>
   41a30:	693b      	ldr	r3, [r7, #16]
   41a32:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   41a36:	f108 0801 	add.w	r8, r8, #1
   41a3a:	2b00      	cmp	r3, #0
   41a3c:	d0e0      	beq.n	41a00 <__ssvfscanf_r+0xb28>
   41a3e:	3b01      	subs	r3, #1
   41a40:	3401      	adds	r4, #1
   41a42:	613b      	str	r3, [r7, #16]
   41a44:	e7dc      	b.n	41a00 <__ssvfscanf_r+0xb28>
   41a46:	062b      	lsls	r3, r5, #24
   41a48:	d5ea      	bpl.n	41a20 <__ssvfscanf_r+0xb48>
   41a4a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   41a4e:	e7d3      	b.n	419f8 <__ssvfscanf_r+0xb20>
   41a50:	2e07      	cmp	r6, #7
   41a52:	d1e5      	bne.n	41a20 <__ssvfscanf_r+0xb48>
   41a54:	2608      	movs	r6, #8
   41a56:	e7cf      	b.n	419f8 <__ssvfscanf_r+0xb20>
   41a58:	2e06      	cmp	r6, #6
   41a5a:	d1e1      	bne.n	41a20 <__ssvfscanf_r+0xb48>
   41a5c:	2607      	movs	r6, #7
   41a5e:	e7cb      	b.n	419f8 <__ssvfscanf_r+0xb20>
   41a60:	2a00      	cmp	r2, #0
   41a62:	f040 80a3 	bne.w	41bac <__ssvfscanf_r+0xcd4>
   41a66:	f1b8 0f00 	cmp.w	r8, #0
   41a6a:	f040 809f 	bne.w	41bac <__ssvfscanf_r+0xcd4>
   41a6e:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
   41a72:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
   41a76:	f000 833a 	beq.w	420ee <__ssvfscanf_r+0x1216>
   41a7a:	2e01      	cmp	r6, #1
   41a7c:	d001      	beq.n	41a82 <__ssvfscanf_r+0xbaa>
   41a7e:	2e04      	cmp	r6, #4
   41a80:	d1ce      	bne.n	41a20 <__ssvfscanf_r+0xb48>
   41a82:	3601      	adds	r6, #1
   41a84:	b2f6      	uxtb	r6, r6
   41a86:	e7b7      	b.n	419f8 <__ssvfscanf_r+0xb20>
   41a88:	2e00      	cmp	r6, #0
   41a8a:	f040 8094 	bne.w	41bb6 <__ssvfscanf_r+0xcde>
   41a8e:	f1b8 0f00 	cmp.w	r8, #0
   41a92:	f040 8090 	bne.w	41bb6 <__ssvfscanf_r+0xcde>
   41a96:	f405 63e0 	and.w	r3, r5, #1792	; 0x700
   41a9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   41a9e:	f000 832a 	beq.w	420f6 <__ssvfscanf_r+0x121e>
   41aa2:	683e      	ldr	r6, [r7, #0]
   41aa4:	f04f 0800 	mov.w	r8, #0
   41aa8:	3a01      	subs	r2, #1
   41aaa:	2a01      	cmp	r2, #1
   41aac:	f240 8480 	bls.w	423b0 <__ssvfscanf_r+0x14d8>
   41ab0:	1e73      	subs	r3, r6, #1
   41ab2:	2b06      	cmp	r3, #6
   41ab4:	f240 8323 	bls.w	420fe <__ssvfscanf_r+0x1226>
   41ab8:	05e8      	lsls	r0, r5, #23
   41aba:	d511      	bpl.n	41ae0 <__ssvfscanf_r+0xc08>
   41abc:	0569      	lsls	r1, r5, #21
   41abe:	f100 8490 	bmi.w	423e2 <__ssvfscanf_r+0x150a>
   41ac2:	f819 1c01 	ldrb.w	r1, [r9, #-1]
   41ac6:	f001 03df 	and.w	r3, r1, #223	; 0xdf
   41aca:	2b45      	cmp	r3, #69	; 0x45
   41acc:	f040 82a0 	bne.w	42010 <__ssvfscanf_r+0x1138>
   41ad0:	f109 39ff 	add.w	r9, r9, #4294967295
   41ad4:	f10a 3aff 	add.w	sl, sl, #4294967295
   41ad8:	465a      	mov	r2, fp
   41ada:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   41adc:	f003 ff10 	bl	45900 <_sungetc_r>
   41ae0:	f015 0210 	ands.w	r2, r5, #16
   41ae4:	f47f aa17 	bne.w	40f16 <__ssvfscanf_r+0x3e>
   41ae8:	f405 63c0 	and.w	r3, r5, #1536	; 0x600
   41aec:	f889 2000 	strb.w	r2, [r9]
   41af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   41af4:	f000 827a 	beq.w	41fec <__ssvfscanf_r+0x1114>
   41af8:	68fb      	ldr	r3, [r7, #12]
   41afa:	2b00      	cmp	r3, #0
   41afc:	f040 83b5 	bne.w	4226a <__ssvfscanf_r+0x1392>
   41b00:	2200      	movs	r2, #0
   41b02:	6a39      	ldr	r1, [r7, #32]
   41b04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   41b06:	6b3e      	ldr	r6, [r7, #48]	; 0x30
   41b08:	f7ff f850 	bl	40bac <_strtod_r>
   41b0c:	07ea      	lsls	r2, r5, #31
   41b0e:	eeb0 8a40 	vmov.f32	s16, s0
   41b12:	eef0 8a60 	vmov.f32	s17, s1
   41b16:	f106 0404 	add.w	r4, r6, #4
   41b1a:	f140 8328 	bpl.w	4216e <__ssvfscanf_r+0x1296>
   41b1e:	6833      	ldr	r3, [r6, #0]
   41b20:	ed83 0b00 	vstr	d0, [r3]
   41b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   41b26:	3301      	adds	r3, #1
   41b28:	e9c7 430c 	strd	r4, r3, [r7, #48]	; 0x30
   41b2c:	f7ff b9f3 	b.w	40f16 <__ssvfscanf_r+0x3e>
   41b30:	2e02      	cmp	r6, #2
   41b32:	f47f af75 	bne.w	41a20 <__ssvfscanf_r+0xb48>
   41b36:	2603      	movs	r6, #3
   41b38:	e75e      	b.n	419f8 <__ssvfscanf_r+0xb20>
   41b3a:	f405 6ca0 	and.w	ip, r5, #1280	; 0x500
   41b3e:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
   41b42:	d005      	beq.n	41b50 <__ssvfscanf_r+0xc78>
   41b44:	056b      	lsls	r3, r5, #21
   41b46:	f57f af6b 	bpl.w	41a20 <__ssvfscanf_r+0xb48>
   41b4a:	f1b8 0f00 	cmp.w	r8, #0
   41b4e:	d0ab      	beq.n	41aa8 <__ssvfscanf_r+0xbd0>
   41b50:	05ab      	lsls	r3, r5, #22
   41b52:	d404      	bmi.n	41b5e <__ssvfscanf_r+0xc86>
   41b54:	69bb      	ldr	r3, [r7, #24]
   41b56:	eba8 0303 	sub.w	r3, r8, r3
   41b5a:	e9c7 9302 	strd	r9, r3, [r7, #8]
   41b5e:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
   41b62:	f04f 0800 	mov.w	r8, #0
   41b66:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
   41b6a:	e745      	b.n	419f8 <__ssvfscanf_r+0xb20>
   41b6c:	2a01      	cmp	r2, #1
   41b6e:	f47f af57 	bne.w	41a20 <__ssvfscanf_r+0xb48>
   41b72:	2202      	movs	r2, #2
   41b74:	e740      	b.n	419f8 <__ssvfscanf_r+0xb20>
   41b76:	697b      	ldr	r3, [r7, #20]
   41b78:	f893 c000 	ldrb.w	ip, [r3]
   41b7c:	458c      	cmp	ip, r1
   41b7e:	f47f af4f 	bne.w	41a20 <__ssvfscanf_r+0xb48>
   41b82:	05ab      	lsls	r3, r5, #22
   41b84:	f57f af4c 	bpl.w	41a20 <__ssvfscanf_r+0xb48>
   41b88:	f425 7520 	bic.w	r5, r5, #640	; 0x280
   41b8c:	f8c7 8018 	str.w	r8, [r7, #24]
   41b90:	e732      	b.n	419f8 <__ssvfscanf_r+0xb20>
   41b92:	4659      	mov	r1, fp
   41b94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   41b96:	62fa      	str	r2, [r7, #44]	; 0x2c
   41b98:	f003 fef0 	bl	4597c <__ssrefill_r>
   41b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   41b9e:	2800      	cmp	r0, #0
   41ba0:	f47f af3e 	bne.w	41a20 <__ssvfscanf_r+0xb48>
   41ba4:	2c00      	cmp	r4, #0
   41ba6:	f47f aec3 	bne.w	41930 <__ssvfscanf_r+0xa58>
   41baa:	e739      	b.n	41a20 <__ssvfscanf_r+0xb48>
   41bac:	2a02      	cmp	r2, #2
   41bae:	f47f af64 	bne.w	41a7a <__ssvfscanf_r+0xba2>
   41bb2:	2203      	movs	r2, #3
   41bb4:	e720      	b.n	419f8 <__ssvfscanf_r+0xb20>
   41bb6:	2e03      	cmp	r6, #3
   41bb8:	f43f af63 	beq.w	41a82 <__ssvfscanf_r+0xbaa>
   41bbc:	2e05      	cmp	r6, #5
   41bbe:	f43f af60 	beq.w	41a82 <__ssvfscanf_r+0xbaa>
   41bc2:	e72d      	b.n	41a20 <__ssvfscanf_r+0xb48>
   41bc4:	f015 0201 	ands.w	r2, r5, #1
   41bc8:	f000 8384 	beq.w	422d4 <__ssvfscanf_r+0x13fc>
   41bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   41bce:	681b      	ldr	r3, [r3, #0]
   41bd0:	6018      	str	r0, [r3, #0]
   41bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   41bd4:	3301      	adds	r3, #1
   41bd6:	e9c7 430c 	strd	r4, r3, [r7, #48]	; 0x30
   41bda:	6a3b      	ldr	r3, [r7, #32]
   41bdc:	1af6      	subs	r6, r6, r3
   41bde:	44b0      	add	r8, r6
   41be0:	44c2      	add	sl, r8
   41be2:	f7ff b998 	b.w	40f16 <__ssvfscanf_r+0x3e>
   41be6:	2e00      	cmp	r6, #0
   41be8:	f040 808f 	bne.w	41d0a <__ssvfscanf_r+0xe32>
   41bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   41bee:	f015 0580 	ands.w	r5, r5, #128	; 0x80
   41bf2:	f853 6b04 	ldr.w	r6, [r3], #4
   41bf6:	633b      	str	r3, [r7, #48]	; 0x30
   41bf8:	f000 82e0 	beq.w	421bc <__ssvfscanf_r+0x12e4>
   41bfc:	2e00      	cmp	r6, #0
   41bfe:	f43f aa14 	beq.w	4102a <__ssvfscanf_r+0x152>
   41c02:	2020      	movs	r0, #32
   41c04:	f7fd fd48 	bl	3f698 <malloc>
   41c08:	4681      	mov	r9, r0
   41c0a:	2800      	cmp	r0, #0
   41c0c:	f000 83b8 	beq.w	42380 <__ssvfscanf_r+0x14a8>
   41c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   41c12:	6030      	str	r0, [r6, #0]
   41c14:	88d5      	ldrh	r5, [r2, #6]
   41c16:	8893      	ldrh	r3, [r2, #4]
   41c18:	f8d2 8000 	ldr.w	r8, [r2]
   41c1c:	429d      	cmp	r5, r3
   41c1e:	d312      	bcc.n	41c46 <__ssvfscanf_r+0xd6e>
   41c20:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   41c24:	4293      	cmp	r3, r2
   41c26:	f200 83da 	bhi.w	423de <__ssvfscanf_r+0x1506>
   41c2a:	3308      	adds	r3, #8
   41c2c:	4640      	mov	r0, r8
   41c2e:	0099      	lsls	r1, r3, #2
   41c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   41c32:	f7fe f907 	bl	3fe44 <realloc>
   41c36:	2800      	cmp	r0, #0
   41c38:	f000 83d1 	beq.w	423de <__ssvfscanf_r+0x1506>
   41c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   41c3e:	4680      	mov	r8, r0
   41c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   41c42:	6010      	str	r0, [r2, #0]
   41c44:	8093      	strh	r3, [r2, #4]
   41c46:	2201      	movs	r2, #1
   41c48:	f848 6025 	str.w	r6, [r8, r5, lsl #2]
   41c4c:	1c6b      	adds	r3, r5, #1
   41c4e:	623e      	str	r6, [r7, #32]
   41c50:	62fa      	str	r2, [r7, #44]	; 0x2c
   41c52:	464e      	mov	r6, r9
   41c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   41c56:	f04f 0820 	mov.w	r8, #32
   41c5a:	80d3      	strh	r3, [r2, #6]
   41c5c:	4635      	mov	r5, r6
   41c5e:	f7fd fd0d 	bl	3f67c <__locale_ctype_ptr>
   41c62:	f8db 1000 	ldr.w	r1, [fp]
   41c66:	f106 0901 	add.w	r9, r6, #1
   41c6a:	780b      	ldrb	r3, [r1, #0]
   41c6c:	f101 0c01 	add.w	ip, r1, #1
   41c70:	eba9 0205 	sub.w	r2, r9, r5
   41c74:	4418      	add	r0, r3
   41c76:	7843      	ldrb	r3, [r0, #1]
   41c78:	0718      	lsls	r0, r3, #28
   41c7a:	d42b      	bmi.n	41cd4 <__ssvfscanf_r+0xdfc>
   41c7c:	f8db 3004 	ldr.w	r3, [fp, #4]
   41c80:	4542      	cmp	r2, r8
   41c82:	f8cb c000 	str.w	ip, [fp]
   41c86:	f103 33ff 	add.w	r3, r3, #4294967295
   41c8a:	61ba      	str	r2, [r7, #24]
   41c8c:	f8cb 3004 	str.w	r3, [fp, #4]
   41c90:	780b      	ldrb	r3, [r1, #0]
   41c92:	7033      	strb	r3, [r6, #0]
   41c94:	d310      	bcc.n	41cb8 <__ssvfscanf_r+0xde0>
   41c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   41c98:	4628      	mov	r0, r5
   41c9a:	b16b      	cbz	r3, 41cb8 <__ssvfscanf_r+0xde0>
   41c9c:	ea4f 0848 	mov.w	r8, r8, lsl #1
   41ca0:	4641      	mov	r1, r8
   41ca2:	f7fe f8cf 	bl	3fe44 <realloc>
   41ca6:	4605      	mov	r5, r0
   41ca8:	2800      	cmp	r0, #0
   41caa:	f000 8369 	beq.w	42380 <__ssvfscanf_r+0x14a8>
   41cae:	69ba      	ldr	r2, [r7, #24]
   41cb0:	6a3b      	ldr	r3, [r7, #32]
   41cb2:	eb00 0902 	add.w	r9, r0, r2
   41cb6:	6018      	str	r0, [r3, #0]
   41cb8:	3c01      	subs	r4, #1
   41cba:	464e      	mov	r6, r9
   41cbc:	d009      	beq.n	41cd2 <__ssvfscanf_r+0xdfa>
   41cbe:	f8db 3004 	ldr.w	r3, [fp, #4]
   41cc2:	2b00      	cmp	r3, #0
   41cc4:	dccb      	bgt.n	41c5e <__ssvfscanf_r+0xd86>
   41cc6:	4659      	mov	r1, fp
   41cc8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   41cca:	f003 fe57 	bl	4597c <__ssrefill_r>
   41cce:	2800      	cmp	r0, #0
   41cd0:	d0c5      	beq.n	41c5e <__ssvfscanf_r+0xd86>
   41cd2:	464e      	mov	r6, r9
   41cd4:	1b75      	subs	r5, r6, r5
   41cd6:	2300      	movs	r3, #0
   41cd8:	1c69      	adds	r1, r5, #1
   41cda:	7033      	strb	r3, [r6, #0]
   41cdc:	4588      	cmp	r8, r1
   41cde:	d907      	bls.n	41cf0 <__ssvfscanf_r+0xe18>
   41ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   41ce2:	b12b      	cbz	r3, 41cf0 <__ssvfscanf_r+0xe18>
   41ce4:	6a3c      	ldr	r4, [r7, #32]
   41ce6:	6820      	ldr	r0, [r4, #0]
   41ce8:	f7fe f8ac 	bl	3fe44 <realloc>
   41cec:	b100      	cbz	r0, 41cf0 <__ssvfscanf_r+0xe18>
   41cee:	6020      	str	r0, [r4, #0]
   41cf0:	44aa      	add	sl, r5
   41cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   41cf4:	3301      	adds	r3, #1
   41cf6:	637b      	str	r3, [r7, #52]	; 0x34
   41cf8:	f7ff b90d 	b.w	40f16 <__ssvfscanf_r+0x3e>
   41cfc:	4659      	mov	r1, fp
   41cfe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   41d00:	f003 fe3c 	bl	4597c <__ssrefill_r>
   41d04:	2800      	cmp	r0, #0
   41d06:	f47f af6b 	bne.w	41be0 <__ssvfscanf_r+0xd08>
   41d0a:	f7fd fcb7 	bl	3f67c <__locale_ctype_ptr>
   41d0e:	f8db 3000 	ldr.w	r3, [fp]
   41d12:	781a      	ldrb	r2, [r3, #0]
   41d14:	3301      	adds	r3, #1
   41d16:	4410      	add	r0, r2
   41d18:	7842      	ldrb	r2, [r0, #1]
   41d1a:	0715      	lsls	r5, r2, #28
   41d1c:	f53f af60 	bmi.w	41be0 <__ssvfscanf_r+0xd08>
   41d20:	f8db 2004 	ldr.w	r2, [fp, #4]
   41d24:	f108 0801 	add.w	r8, r8, #1
   41d28:	f8cb 3000 	str.w	r3, [fp]
   41d2c:	3a01      	subs	r2, #1
   41d2e:	45a0      	cmp	r8, r4
   41d30:	f8cb 2004 	str.w	r2, [fp, #4]
   41d34:	f43f af54 	beq.w	41be0 <__ssvfscanf_r+0xd08>
   41d38:	2a00      	cmp	r2, #0
   41d3a:	dce6      	bgt.n	41d0a <__ssvfscanf_r+0xe32>
   41d3c:	e7de      	b.n	41cfc <__ssvfscanf_r+0xe24>
   41d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   41d40:	2a00      	cmp	r2, #0
   41d42:	f040 812a 	bne.w	41f9a <__ssvfscanf_r+0x10c2>
   41d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   41d48:	f853 6b04 	ldr.w	r6, [r3], #4
   41d4c:	633b      	str	r3, [r7, #48]	; 0x30
   41d4e:	062b      	lsls	r3, r5, #24
   41d50:	f140 8220 	bpl.w	42194 <__ssvfscanf_r+0x12bc>
   41d54:	2e00      	cmp	r6, #0
   41d56:	f43f a968 	beq.w	4102a <__ssvfscanf_r+0x152>
   41d5a:	4620      	mov	r0, r4
   41d5c:	f7fd fc9c 	bl	3f698 <malloc>
   41d60:	4603      	mov	r3, r0
   41d62:	2800      	cmp	r0, #0
   41d64:	f000 830c 	beq.w	42380 <__ssvfscanf_r+0x14a8>
   41d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   41d6a:	6030      	str	r0, [r6, #0]
   41d6c:	88d5      	ldrh	r5, [r2, #6]
   41d6e:	f8b2 9004 	ldrh.w	r9, [r2, #4]
   41d72:	f8d2 8000 	ldr.w	r8, [r2]
   41d76:	454d      	cmp	r5, r9
   41d78:	d315      	bcc.n	41da6 <__ssvfscanf_r+0xece>
   41d7a:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   41d7e:	62f8      	str	r0, [r7, #44]	; 0x2c
   41d80:	4591      	cmp	r9, r2
   41d82:	f200 832c 	bhi.w	423de <__ssvfscanf_r+0x1506>
   41d86:	f109 0908 	add.w	r9, r9, #8
   41d8a:	4640      	mov	r0, r8
   41d8c:	ea4f 0189 	mov.w	r1, r9, lsl #2
   41d90:	f7fe f858 	bl	3fe44 <realloc>
   41d94:	2800      	cmp	r0, #0
   41d96:	f000 8322 	beq.w	423de <__ssvfscanf_r+0x1506>
   41d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   41d9c:	4680      	mov	r8, r0
   41d9e:	6018      	str	r0, [r3, #0]
   41da0:	f8a3 9004 	strh.w	r9, [r3, #4]
   41da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   41da6:	1c6a      	adds	r2, r5, #1
   41da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   41daa:	f848 6025 	str.w	r6, [r8, r5, lsl #2]
   41dae:	4619      	mov	r1, r3
   41db0:	80c2      	strh	r2, [r0, #6]
   41db2:	4623      	mov	r3, r4
   41db4:	2201      	movs	r2, #1
   41db6:	f8cd b000 	str.w	fp, [sp]
   41dba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   41dbc:	f003 fdfc 	bl	459b8 <_sfread_r>
   41dc0:	4605      	mov	r5, r0
   41dc2:	2800      	cmp	r0, #0
   41dc4:	f000 833e 	beq.w	42444 <__ssvfscanf_r+0x156c>
   41dc8:	4284      	cmp	r4, r0
   41dca:	d991      	bls.n	41cf0 <__ssvfscanf_r+0xe18>
   41dcc:	4601      	mov	r1, r0
   41dce:	6830      	ldr	r0, [r6, #0]
   41dd0:	f7fe f838 	bl	3fe44 <realloc>
   41dd4:	2800      	cmp	r0, #0
   41dd6:	d08b      	beq.n	41cf0 <__ssvfscanf_r+0xe18>
   41dd8:	6030      	str	r0, [r6, #0]
   41dda:	44aa      	add	sl, r5
   41ddc:	e789      	b.n	41cf2 <__ssvfscanf_r+0xe1a>
   41dde:	2300      	movs	r3, #0
   41de0:	613b      	str	r3, [r7, #16]
   41de2:	e597      	b.n	41914 <__ssvfscanf_r+0xa3c>
   41de4:	697b      	ldr	r3, [r7, #20]
   41de6:	2b00      	cmp	r3, #0
   41de8:	f040 80a3 	bne.w	41f32 <__ssvfscanf_r+0x105a>
   41dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   41dee:	f015 0580 	ands.w	r5, r5, #128	; 0x80
   41df2:	f853 6b04 	ldr.w	r6, [r3], #4
   41df6:	633b      	str	r3, [r7, #48]	; 0x30
   41df8:	f000 8216 	beq.w	42228 <__ssvfscanf_r+0x1350>
   41dfc:	2e00      	cmp	r6, #0
   41dfe:	f43f a914 	beq.w	4102a <__ssvfscanf_r+0x152>
   41e02:	2020      	movs	r0, #32
   41e04:	f7fd fc48 	bl	3f698 <malloc>
   41e08:	4681      	mov	r9, r0
   41e0a:	2800      	cmp	r0, #0
   41e0c:	f000 82b8 	beq.w	42380 <__ssvfscanf_r+0x14a8>
   41e10:	6a79      	ldr	r1, [r7, #36]	; 0x24
   41e12:	6030      	str	r0, [r6, #0]
   41e14:	88cd      	ldrh	r5, [r1, #6]
   41e16:	888b      	ldrh	r3, [r1, #4]
   41e18:	429d      	cmp	r5, r3
   41e1a:	d313      	bcc.n	41e44 <__ssvfscanf_r+0xf6c>
   41e1c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   41e20:	f8d1 8000 	ldr.w	r8, [r1]
   41e24:	4293      	cmp	r3, r2
   41e26:	f200 82da 	bhi.w	423de <__ssvfscanf_r+0x1506>
   41e2a:	3308      	adds	r3, #8
   41e2c:	4640      	mov	r0, r8
   41e2e:	0099      	lsls	r1, r3, #2
   41e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   41e32:	f7fe f807 	bl	3fe44 <realloc>
   41e36:	2800      	cmp	r0, #0
   41e38:	f000 82d1 	beq.w	423de <__ssvfscanf_r+0x1506>
   41e3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   41e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   41e40:	6008      	str	r0, [r1, #0]
   41e42:	808b      	strh	r3, [r1, #4]
   41e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
   41e46:	1c6b      	adds	r3, r5, #1
   41e48:	62fe      	str	r6, [r7, #44]	; 0x2c
   41e4a:	680a      	ldr	r2, [r1, #0]
   41e4c:	80cb      	strh	r3, [r1, #6]
   41e4e:	f842 6025 	str.w	r6, [r2, r5, lsl #2]
   41e52:	464e      	mov	r6, r9
   41e54:	2520      	movs	r5, #32
   41e56:	46a0      	mov	r8, r4
   41e58:	f107 0258 	add.w	r2, r7, #88	; 0x58
   41e5c:	4634      	mov	r4, r6
   41e5e:	f8c7 a018 	str.w	sl, [r7, #24]
   41e62:	f8db 1000 	ldr.w	r1, [fp]
   41e66:	f106 0901 	add.w	r9, r6, #1
   41e6a:	7808      	ldrb	r0, [r1, #0]
   41e6c:	1c4b      	adds	r3, r1, #1
   41e6e:	eba9 0a04 	sub.w	sl, r9, r4
   41e72:	5c10      	ldrb	r0, [r2, r0]
   41e74:	2800      	cmp	r0, #0
   41e76:	f000 8164 	beq.w	42142 <__ssvfscanf_r+0x126a>
   41e7a:	f8db 0004 	ldr.w	r0, [fp, #4]
   41e7e:	f8cb 3000 	str.w	r3, [fp]
   41e82:	3801      	subs	r0, #1
   41e84:	f8cb 0004 	str.w	r0, [fp, #4]
   41e88:	7809      	ldrb	r1, [r1, #0]
   41e8a:	7031      	strb	r1, [r6, #0]
   41e8c:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   41e8e:	b17e      	cbz	r6, 41eb0 <__ssvfscanf_r+0xfd8>
   41e90:	45aa      	cmp	sl, r5
   41e92:	4620      	mov	r0, r4
   41e94:	d30c      	bcc.n	41eb0 <__ssvfscanf_r+0xfd8>
   41e96:	006d      	lsls	r5, r5, #1
   41e98:	623a      	str	r2, [r7, #32]
   41e9a:	4629      	mov	r1, r5
   41e9c:	f7fd ffd2 	bl	3fe44 <realloc>
   41ea0:	4604      	mov	r4, r0
   41ea2:	2800      	cmp	r0, #0
   41ea4:	f000 826c 	beq.w	42380 <__ssvfscanf_r+0x14a8>
   41ea8:	eb00 090a 	add.w	r9, r0, sl
   41eac:	6a3a      	ldr	r2, [r7, #32]
   41eae:	6030      	str	r0, [r6, #0]
   41eb0:	f1b8 0801 	subs.w	r8, r8, #1
   41eb4:	464e      	mov	r6, r9
   41eb6:	f000 8144 	beq.w	42142 <__ssvfscanf_r+0x126a>
   41eba:	f8db 1004 	ldr.w	r1, [fp, #4]
   41ebe:	2900      	cmp	r1, #0
   41ec0:	dccf      	bgt.n	41e62 <__ssvfscanf_r+0xf8a>
   41ec2:	4659      	mov	r1, fp
   41ec4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   41ec6:	623a      	str	r2, [r7, #32]
   41ec8:	f003 fd58 	bl	4597c <__ssrefill_r>
   41ecc:	6a3a      	ldr	r2, [r7, #32]
   41ece:	2800      	cmp	r0, #0
   41ed0:	d0c7      	beq.n	41e62 <__ssvfscanf_r+0xf8a>
   41ed2:	45a1      	cmp	r9, r4
   41ed4:	f8d7 a018 	ldr.w	sl, [r7, #24]
   41ed8:	46a0      	mov	r8, r4
   41eda:	f040 8135 	bne.w	42148 <__ssvfscanf_r+0x1270>
   41ede:	f7ff b89b 	b.w	41018 <__ssvfscanf_r+0x140>
   41ee2:	f04f 0900 	mov.w	r9, #0
   41ee6:	f7ff b93c 	b.w	41162 <__ssvfscanf_r+0x28a>
   41eea:	4659      	mov	r1, fp
   41eec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   41eee:	f003 fd45 	bl	4597c <__ssrefill_r>
   41ef2:	2800      	cmp	r0, #0
   41ef4:	f43f a8d3 	beq.w	4109e <__ssvfscanf_r+0x1c6>
   41ef8:	f7ff b88e 	b.w	41018 <__ssvfscanf_r+0x140>
   41efc:	4659      	mov	r1, fp
   41efe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   41f00:	f003 fd3c 	bl	4597c <__ssrefill_r>
   41f04:	2800      	cmp	r0, #0
   41f06:	f43f abbc 	beq.w	41682 <__ssvfscanf_r+0x7aa>
   41f0a:	f8c7 a004 	str.w	sl, [r7, #4]
   41f0e:	f8d7 a020 	ldr.w	sl, [r7, #32]
   41f12:	2d00      	cmp	r5, #0
   41f14:	f43f abbb 	beq.w	4168e <__ssvfscanf_r+0x7b6>
   41f18:	f7ff b87e 	b.w	41018 <__ssvfscanf_r+0x140>
   41f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   41f1e:	681b      	ldr	r3, [r3, #0]
   41f20:	7018      	strb	r0, [r3, #0]
   41f22:	e656      	b.n	41bd2 <__ssvfscanf_r+0xcfa>
   41f24:	2300      	movs	r3, #0
   41f26:	e9c7 3305 	strd	r3, r3, [r7, #20]
   41f2a:	613b      	str	r3, [r7, #16]
   41f2c:	4698      	mov	r8, r3
   41f2e:	f7ff bb47 	b.w	415c0 <__ssvfscanf_r+0x6e8>
   41f32:	f107 0258 	add.w	r2, r7, #88	; 0x58
   41f36:	f8db 1000 	ldr.w	r1, [fp]
   41f3a:	4615      	mov	r5, r2
   41f3c:	780b      	ldrb	r3, [r1, #0]
   41f3e:	3101      	adds	r1, #1
   41f40:	5ceb      	ldrb	r3, [r5, r3]
   41f42:	2b00      	cmp	r3, #0
   41f44:	f000 8134 	beq.w	421b0 <__ssvfscanf_r+0x12d8>
   41f48:	f8db 3004 	ldr.w	r3, [fp, #4]
   41f4c:	3601      	adds	r6, #1
   41f4e:	f8cb 1000 	str.w	r1, [fp]
   41f52:	3b01      	subs	r3, #1
   41f54:	42a6      	cmp	r6, r4
   41f56:	f8cb 3004 	str.w	r3, [fp, #4]
   41f5a:	f000 812c 	beq.w	421b6 <__ssvfscanf_r+0x12de>
   41f5e:	2b00      	cmp	r3, #0
   41f60:	dcec      	bgt.n	41f3c <__ssvfscanf_r+0x1064>
   41f62:	4659      	mov	r1, fp
   41f64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   41f66:	f003 fd09 	bl	4597c <__ssrefill_r>
   41f6a:	2800      	cmp	r0, #0
   41f6c:	f040 8123 	bne.w	421b6 <__ssvfscanf_r+0x12de>
   41f70:	f8db 1000 	ldr.w	r1, [fp]
   41f74:	e7e2      	b.n	41f3c <__ssvfscanf_r+0x1064>
   41f76:	2300      	movs	r3, #0
   41f78:	f107 0244 	add.w	r2, r7, #68	; 0x44
   41f7c:	61bb      	str	r3, [r7, #24]
   41f7e:	4690      	mov	r8, r2
   41f80:	4699      	mov	r9, r3
   41f82:	623b      	str	r3, [r7, #32]
   41f84:	f7ff b982 	b.w	4128c <__ssvfscanf_r+0x3b4>
   41f88:	2300      	movs	r3, #0
   41f8a:	f107 0244 	add.w	r2, r7, #68	; 0x44
   41f8e:	60fb      	str	r3, [r7, #12]
   41f90:	4690      	mov	r8, r2
   41f92:	613b      	str	r3, [r7, #16]
   41f94:	60bb      	str	r3, [r7, #8]
   41f96:	f7ff ba2a 	b.w	413ee <__ssvfscanf_r+0x516>
   41f9a:	461d      	mov	r5, r3
   41f9c:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   41fa0:	e008      	b.n	41fb4 <__ssvfscanf_r+0x10dc>
   41fa2:	f8cb 6000 	str.w	r6, [fp]
   41fa6:	441d      	add	r5, r3
   41fa8:	1ae4      	subs	r4, r4, r3
   41faa:	f003 fce7 	bl	4597c <__ssrefill_r>
   41fae:	2800      	cmp	r0, #0
   41fb0:	f040 81c5 	bne.w	4233e <__ssvfscanf_r+0x1466>
   41fb4:	f8db 3004 	ldr.w	r3, [fp, #4]
   41fb8:	4659      	mov	r1, fp
   41fba:	f8db 2000 	ldr.w	r2, [fp]
   41fbe:	4640      	mov	r0, r8
   41fc0:	429c      	cmp	r4, r3
   41fc2:	eb02 0603 	add.w	r6, r2, r3
   41fc6:	dcec      	bgt.n	41fa2 <__ssvfscanf_r+0x10ca>
   41fc8:	1b1b      	subs	r3, r3, r4
   41fca:	4422      	add	r2, r4
   41fcc:	4425      	add	r5, r4
   41fce:	e9cb 2300 	strd	r2, r3, [fp]
   41fd2:	44aa      	add	sl, r5
   41fd4:	f7fe bf9f 	b.w	40f16 <__ssvfscanf_r+0x3e>
   41fd8:	1e73      	subs	r3, r6, #1
   41fda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   41fde:	465a      	mov	r2, fp
   41fe0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   41fe2:	461e      	mov	r6, r3
   41fe4:	f003 fc8c 	bl	45900 <_sungetc_r>
   41fe8:	f7ff bb8b 	b.w	41702 <__ssvfscanf_r+0x82a>
   41fec:	69bb      	ldr	r3, [r7, #24]
   41fee:	eba8 0303 	sub.w	r3, r8, r3
   41ff2:	425a      	negs	r2, r3
   41ff4:	2b00      	cmp	r3, #0
   41ff6:	f43f ad83 	beq.w	41b00 <__ssvfscanf_r+0xc28>
   41ffa:	f207 23ab 	addw	r3, r7, #683	; 0x2ab
   41ffe:	49bf      	ldr	r1, [pc, #764]	; (422fc <__ssvfscanf_r+0x1424>)
   42000:	4599      	cmp	r9, r3
   42002:	bf28      	it	cs
   42004:	f207 29aa 	addwcs	r9, r7, #682	; 0x2aa
   42008:	4648      	mov	r0, r9
   4200a:	f003 fa1d 	bl	45448 <sprintf>
   4200e:	e577      	b.n	41b00 <__ssvfscanf_r+0xc28>
   42010:	465a      	mov	r2, fp
   42012:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   42014:	f003 fc74 	bl	45900 <_sungetc_r>
   42018:	f1aa 0a02 	sub.w	sl, sl, #2
   4201c:	f819 1c02 	ldrb.w	r1, [r9, #-2]
   42020:	f1a9 0902 	sub.w	r9, r9, #2
   42024:	e558      	b.n	41ad8 <__ssvfscanf_r+0xc00>
   42026:	f898 2002 	ldrb.w	r2, [r8, #2]
   4202a:	f045 0508 	orr.w	r5, r5, #8
   4202e:	f108 0802 	add.w	r8, r8, #2
   42032:	f7fe bf88 	b.w	40f46 <__ssvfscanf_r+0x6e>
   42036:	f898 2002 	ldrb.w	r2, [r8, #2]
   4203a:	f045 0502 	orr.w	r5, r5, #2
   4203e:	f108 0802 	add.w	r8, r8, #2
   42042:	f7fe bf80 	b.w	40f46 <__ssvfscanf_r+0x6e>
   42046:	b084      	sub	sp, #16
   42048:	aa02      	add	r2, sp, #8
   4204a:	6013      	str	r3, [r2, #0]
   4204c:	9303      	str	r3, [sp, #12]
   4204e:	627a      	str	r2, [r7, #36]	; 0x24
   42050:	e434      	b.n	418bc <__ssvfscanf_r+0x9e4>
   42052:	f110 0f02 	cmn.w	r0, #2
   42056:	d10e      	bne.n	42076 <__ssvfscanf_r+0x119e>
   42058:	4635      	mov	r5, r6
   4205a:	f7ff bb0d 	b.w	41678 <__ssvfscanf_r+0x7a0>
   4205e:	2500      	movs	r5, #0
   42060:	f7ff ba1e 	b.w	414a0 <__ssvfscanf_r+0x5c8>
   42064:	2500      	movs	r5, #0
   42066:	f7ff bb07 	b.w	41678 <__ssvfscanf_r+0x7a0>
   4206a:	682b      	ldr	r3, [r5, #0]
   4206c:	2b04      	cmp	r3, #4
   4206e:	f47f a9f3 	bne.w	41458 <__ssvfscanf_r+0x580>
   42072:	f7ff b9f4 	b.w	4145e <__ssvfscanf_r+0x586>
   42076:	6a3b      	ldr	r3, [r7, #32]
   42078:	2803      	cmp	r0, #3
   4207a:	4433      	add	r3, r6
   4207c:	623b      	str	r3, [r7, #32]
   4207e:	f47f aadc 	bne.w	4163a <__ssvfscanf_r+0x762>
   42082:	682a      	ldr	r2, [r5, #0]
   42084:	2a04      	cmp	r2, #4
   42086:	f47f aad8 	bne.w	4163a <__ssvfscanf_r+0x762>
   4208a:	f7ff bad7 	b.w	4163c <__ssvfscanf_r+0x764>
   4208e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   42090:	b193      	cbz	r3, 420b8 <__ssvfscanf_r+0x11e0>
   42092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   42094:	f207 1457 	addw	r4, r7, #343	; 0x157
   42098:	62fe      	str	r6, [r7, #44]	; 0x2c
   4209a:	1e5d      	subs	r5, r3, #1
   4209c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   420a0:	441d      	add	r5, r3
   420a2:	462e      	mov	r6, r5
   420a4:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
   420a6:	f816 1901 	ldrb.w	r1, [r6], #-1
   420aa:	465a      	mov	r2, fp
   420ac:	4628      	mov	r0, r5
   420ae:	f003 fc27 	bl	45900 <_sungetc_r>
   420b2:	42b4      	cmp	r4, r6
   420b4:	d1f7      	bne.n	420a6 <__ssvfscanf_r+0x11ce>
   420b6:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   420b8:	2e00      	cmp	r6, #0
   420ba:	f47e af2c 	bne.w	40f16 <__ssvfscanf_r+0x3e>
   420be:	eba8 0109 	sub.w	r1, r8, r9
   420c2:	6a3c      	ldr	r4, [r7, #32]
   420c4:	f8c8 6000 	str.w	r6, [r8]
   420c8:	1089      	asrs	r1, r1, #2
   420ca:	3101      	adds	r1, #1
   420cc:	2c00      	cmp	r4, #0
   420ce:	f43f aaed 	beq.w	416ac <__ssvfscanf_r+0x7d4>
   420d2:	69bb      	ldr	r3, [r7, #24]
   420d4:	428b      	cmp	r3, r1
   420d6:	f67f aae9 	bls.w	416ac <__ssvfscanf_r+0x7d4>
   420da:	0089      	lsls	r1, r1, #2
   420dc:	6820      	ldr	r0, [r4, #0]
   420de:	f7fd feb1 	bl	3fe44 <realloc>
   420e2:	2800      	cmp	r0, #0
   420e4:	f43f aae2 	beq.w	416ac <__ssvfscanf_r+0x7d4>
   420e8:	6020      	str	r0, [r4, #0]
   420ea:	f7ff badf 	b.w	416ac <__ssvfscanf_r+0x7d4>
   420ee:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
   420f2:	2201      	movs	r2, #1
   420f4:	e480      	b.n	419f8 <__ssvfscanf_r+0xb20>
   420f6:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
   420fa:	2601      	movs	r6, #1
   420fc:	e47c      	b.n	419f8 <__ssvfscanf_r+0xb20>
   420fe:	2e02      	cmp	r6, #2
   42100:	f240 8191 	bls.w	42426 <__ssvfscanf_r+0x154e>
   42104:	2e03      	cmp	r6, #3
   42106:	f43f acd7 	beq.w	41ab8 <__ssvfscanf_r+0xbe0>
   4210a:	1f34      	subs	r4, r6, #4
   4210c:	4643      	mov	r3, r8
   4210e:	46a8      	mov	r8, r5
   42110:	464d      	mov	r5, r9
   42112:	b2e4      	uxtb	r4, r4
   42114:	43e6      	mvns	r6, r4
   42116:	62fc      	str	r4, [r7, #44]	; 0x2c
   42118:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   4211a:	444e      	add	r6, r9
   4211c:	4699      	mov	r9, r3
   4211e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   42122:	465a      	mov	r2, fp
   42124:	4620      	mov	r0, r4
   42126:	f003 fbeb 	bl	45900 <_sungetc_r>
   4212a:	42ae      	cmp	r6, r5
   4212c:	d1f7      	bne.n	4211e <__ssvfscanf_r+0x1246>
   4212e:	464b      	mov	r3, r9
   42130:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   42132:	f10a 3aff 	add.w	sl, sl, #4294967295
   42136:	46a9      	mov	r9, r5
   42138:	4645      	mov	r5, r8
   4213a:	4698      	mov	r8, r3
   4213c:	ebaa 0a04 	sub.w	sl, sl, r4
   42140:	e4ba      	b.n	41ab8 <__ssvfscanf_r+0xbe0>
   42142:	f8d7 a018 	ldr.w	sl, [r7, #24]
   42146:	46a0      	mov	r8, r4
   42148:	ebb6 0808 	subs.w	r8, r6, r8
   4214c:	f43e af6d 	beq.w	4102a <__ssvfscanf_r+0x152>
   42150:	2300      	movs	r3, #0
   42152:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   42154:	f108 0101 	add.w	r1, r8, #1
   42158:	7033      	strb	r3, [r6, #0]
   4215a:	b114      	cbz	r4, 42162 <__ssvfscanf_r+0x128a>
   4215c:	428d      	cmp	r5, r1
   4215e:	f200 80a4 	bhi.w	422aa <__ssvfscanf_r+0x13d2>
   42162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   42164:	44c2      	add	sl, r8
   42166:	3301      	adds	r3, #1
   42168:	637b      	str	r3, [r7, #52]	; 0x34
   4216a:	f7fe bed4 	b.w	40f16 <__ssvfscanf_r+0x3e>
   4216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   42170:	f015 0502 	ands.w	r5, r5, #2
   42174:	681e      	ldr	r6, [r3, #0]
   42176:	d03c      	beq.n	421f2 <__ssvfscanf_r+0x131a>
   42178:	ed86 0b00 	vstr	d0, [r6]
   4217c:	e4d2      	b.n	41b24 <__ssvfscanf_r+0xc4c>
   4217e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   42180:	f425 7560 	bic.w	r5, r5, #896	; 0x380
   42184:	b113      	cbz	r3, 4218c <__ssvfscanf_r+0x12b4>
   42186:	3b01      	subs	r3, #1
   42188:	3401      	adds	r4, #1
   4218a:	62fb      	str	r3, [r7, #44]	; 0x2c
   4218c:	f108 0801 	add.w	r8, r8, #1
   42190:	f7ff baa1 	b.w	416d6 <__ssvfscanf_r+0x7fe>
   42194:	f8cd b000 	str.w	fp, [sp]
   42198:	4623      	mov	r3, r4
   4219a:	4631      	mov	r1, r6
   4219c:	2201      	movs	r2, #1
   4219e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   421a0:	f003 fc0a 	bl	459b8 <_sfread_r>
   421a4:	4605      	mov	r5, r0
   421a6:	2800      	cmp	r0, #0
   421a8:	f43e af36 	beq.w	41018 <__ssvfscanf_r+0x140>
   421ac:	44aa      	add	sl, r5
   421ae:	e5a0      	b.n	41cf2 <__ssvfscanf_r+0xe1a>
   421b0:	2e00      	cmp	r6, #0
   421b2:	f43e af3a 	beq.w	4102a <__ssvfscanf_r+0x152>
   421b6:	44b2      	add	sl, r6
   421b8:	f7fe bead 	b.w	40f16 <__ssvfscanf_r+0x3e>
   421bc:	62fd      	str	r5, [r7, #44]	; 0x2c
   421be:	46a8      	mov	r8, r5
   421c0:	623d      	str	r5, [r7, #32]
   421c2:	e54b      	b.n	41c5c <__ssvfscanf_r+0xd84>
   421c4:	f8d7 a020 	ldr.w	sl, [r7, #32]
   421c8:	607e      	str	r6, [r7, #4]
   421ca:	697b      	ldr	r3, [r7, #20]
   421cc:	2b00      	cmp	r3, #0
   421ce:	f47e aea2 	bne.w	40f16 <__ssvfscanf_r+0x3e>
   421d2:	693a      	ldr	r2, [r7, #16]
   421d4:	68bc      	ldr	r4, [r7, #8]
   421d6:	eba8 0102 	sub.w	r1, r8, r2
   421da:	f8c8 3000 	str.w	r3, [r8]
   421de:	1089      	asrs	r1, r1, #2
   421e0:	3101      	adds	r1, #1
   421e2:	2c00      	cmp	r4, #0
   421e4:	f43f aa62 	beq.w	416ac <__ssvfscanf_r+0x7d4>
   421e8:	68fb      	ldr	r3, [r7, #12]
   421ea:	428b      	cmp	r3, r1
   421ec:	f67f aa5e 	bls.w	416ac <__ssvfscanf_r+0x7d4>
   421f0:	e773      	b.n	420da <__ssvfscanf_r+0x1202>
   421f2:	ec53 2b10 	vmov	r2, r3, d0
   421f6:	ec51 0b10 	vmov	r0, r1, d0
   421fa:	f7d7 ffad 	bl	1a158 <__aeabi_dcmpun>
   421fe:	2800      	cmp	r0, #0
   42200:	f040 8105 	bne.w	4240e <__ssvfscanf_r+0x1536>
   42204:	ec51 0b18 	vmov	r0, r1, d8
   42208:	f7d7 ffdc 	bl	1a1c4 <__aeabi_d2f>
   4220c:	6030      	str	r0, [r6, #0]
   4220e:	e489      	b.n	41b24 <__ssvfscanf_r+0xc4c>
   42210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   42212:	e9c7 3305 	strd	r3, r3, [r7, #20]
   42216:	613b      	str	r3, [r7, #16]
   42218:	f7ff b9d2 	b.w	415c0 <__ssvfscanf_r+0x6e8>
   4221c:	697b      	ldr	r3, [r7, #20]
   4221e:	e9c7 3303 	strd	r3, r3, [r7, #12]
   42222:	60bb      	str	r3, [r7, #8]
   42224:	f7ff b8e3 	b.w	413ee <__ssvfscanf_r+0x516>
   42228:	62fd      	str	r5, [r7, #44]	; 0x2c
   4222a:	e614      	b.n	41e56 <__ssvfscanf_r+0xf7e>
   4222c:	61be      	str	r6, [r7, #24]
   4222e:	46b1      	mov	r9, r6
   42230:	623e      	str	r6, [r7, #32]
   42232:	f7ff b82b 	b.w	4128c <__ssvfscanf_r+0x3b4>
   42236:	076a      	lsls	r2, r5, #29
   42238:	d448      	bmi.n	422cc <__ssvfscanf_r+0x13f4>
   4223a:	07ee      	lsls	r6, r5, #31
   4223c:	f100 80a6 	bmi.w	4238c <__ssvfscanf_r+0x14b4>
   42240:	07ac      	lsls	r4, r5, #30
   42242:	f140 80a3 	bpl.w	4238c <__ssvfscanf_r+0x14b4>
   42246:	4650      	mov	r0, sl
   42248:	17c1      	asrs	r1, r0, #31
   4224a:	e9c3 0100 	strd	r0, r1, [r3]
   4224e:	f7fe be62 	b.w	40f16 <__ssvfscanf_r+0x3e>
   42252:	687b      	ldr	r3, [r7, #4]
   42254:	3302      	adds	r3, #2
   42256:	f040 80fc 	bne.w	42452 <__ssvfscanf_r+0x157a>
   4225a:	f8db 3004 	ldr.w	r3, [fp, #4]
   4225e:	2b00      	cmp	r3, #0
   42260:	f77e aecf 	ble.w	41002 <__ssvfscanf_r+0x12a>
   42264:	6afd      	ldr	r5, [r7, #44]	; 0x2c
   42266:	f7ff b812 	b.w	4128e <__ssvfscanf_r+0x3b6>
   4226a:	68bc      	ldr	r4, [r7, #8]
   4226c:	230a      	movs	r3, #10
   4226e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   42270:	4621      	mov	r1, r4
   42272:	46a1      	mov	r9, r4
   42274:	3101      	adds	r1, #1
   42276:	f7fe fd43 	bl	40d00 <_strtol_r>
   4227a:	68fb      	ldr	r3, [r7, #12]
   4227c:	1ac2      	subs	r2, r0, r3
   4227e:	e6bc      	b.n	41ffa <__ssvfscanf_r+0x1122>
   42280:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   42284:	4293      	cmp	r3, r2
   42286:	f200 80c9 	bhi.w	4241c <__ssvfscanf_r+0x1544>
   4228a:	3308      	adds	r3, #8
   4228c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   4228e:	0099      	lsls	r1, r3, #2
   42290:	6810      	ldr	r0, [r2, #0]
   42292:	62fb      	str	r3, [r7, #44]	; 0x2c
   42294:	f7fd fdd6 	bl	3fe44 <realloc>
   42298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   4229a:	2800      	cmp	r0, #0
   4229c:	f000 80d7 	beq.w	4244e <__ssvfscanf_r+0x1576>
   422a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   422a2:	6010      	str	r0, [r2, #0]
   422a4:	8093      	strh	r3, [r2, #4]
   422a6:	f7fe bfe7 	b.w	41278 <__ssvfscanf_r+0x3a0>
   422aa:	6820      	ldr	r0, [r4, #0]
   422ac:	f7fd fdca 	bl	3fe44 <realloc>
   422b0:	2800      	cmp	r0, #0
   422b2:	f43f af56 	beq.w	42162 <__ssvfscanf_r+0x128a>
   422b6:	6020      	str	r0, [r4, #0]
   422b8:	e753      	b.n	42162 <__ssvfscanf_r+0x128a>
   422ba:	6820      	ldr	r0, [r4, #0]
   422bc:	f7fd fdc2 	bl	3fe44 <realloc>
   422c0:	2800      	cmp	r0, #0
   422c2:	f43f a9ef 	beq.w	416a4 <__ssvfscanf_r+0x7cc>
   422c6:	6020      	str	r0, [r4, #0]
   422c8:	f7ff b9ec 	b.w	416a4 <__ssvfscanf_r+0x7cc>
   422cc:	f8a3 a000 	strh.w	sl, [r3]
   422d0:	f7fe be21 	b.w	40f16 <__ssvfscanf_r+0x3e>
   422d4:	07a9      	lsls	r1, r5, #30
   422d6:	f57f ac79 	bpl.w	41bcc <__ssvfscanf_r+0xcf4>
   422da:	69fb      	ldr	r3, [r7, #28]
   422dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   422de:	4619      	mov	r1, r3
   422e0:	4b07      	ldr	r3, [pc, #28]	; (42300 <__ssvfscanf_r+0x1428>)
   422e2:	4299      	cmp	r1, r3
   422e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   422e6:	6a39      	ldr	r1, [r7, #32]
   422e8:	f000 809a 	beq.w	42420 <__ssvfscanf_r+0x1548>
   422ec:	f003 f990 	bl	45610 <_strtoll_r>
   422f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   422f2:	681b      	ldr	r3, [r3, #0]
   422f4:	e9c3 0100 	strd	r0, r1, [r3]
   422f8:	e46b      	b.n	41bd2 <__ssvfscanf_r+0xcfa>
   422fa:	bf00      	nop
   422fc:	0004ae60 	.word	0x0004ae60
   42300:	00040e89 	.word	0x00040e89
   42304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   42306:	2b00      	cmp	r3, #0
   42308:	d04d      	beq.n	423a6 <__ssvfscanf_r+0x14ce>
   4230a:	f8d3 8000 	ldr.w	r8, [r3]
   4230e:	88de      	ldrh	r6, [r3, #6]
   42310:	b166      	cbz	r6, 4232c <__ssvfscanf_r+0x1454>
   42312:	eb08 0686 	add.w	r6, r8, r6, lsl #2
   42316:	4644      	mov	r4, r8
   42318:	2500      	movs	r5, #0
   4231a:	6823      	ldr	r3, [r4, #0]
   4231c:	6818      	ldr	r0, [r3, #0]
   4231e:	f7fd f9c3 	bl	3f6a8 <free>
   42322:	f854 3b04 	ldr.w	r3, [r4], #4
   42326:	42b4      	cmp	r4, r6
   42328:	601d      	str	r5, [r3, #0]
   4232a:	d1f6      	bne.n	4231a <__ssvfscanf_r+0x1442>
   4232c:	f04f 33ff 	mov.w	r3, #4294967295
   42330:	637b      	str	r3, [r7, #52]	; 0x34
   42332:	f1b8 0f00 	cmp.w	r8, #0
   42336:	f47e ae7f 	bne.w	41038 <__ssvfscanf_r+0x160>
   4233a:	f7fe be80 	b.w	4103e <__ssvfscanf_r+0x166>
   4233e:	2d00      	cmp	r5, #0
   42340:	f43e ae6a 	beq.w	41018 <__ssvfscanf_r+0x140>
   42344:	44aa      	add	sl, r5
   42346:	f7fe bde6 	b.w	40f16 <__ssvfscanf_r+0x3e>
   4234a:	2300      	movs	r3, #0
   4234c:	62fb      	str	r3, [r7, #44]	; 0x2c
   4234e:	e784      	b.n	4225a <__ssvfscanf_r+0x1382>
   42350:	607e      	str	r6, [r7, #4]
   42352:	464e      	mov	r6, r9
   42354:	f8d7 a020 	ldr.w	sl, [r7, #32]
   42358:	2e00      	cmp	r6, #0
   4235a:	f43f af36 	beq.w	421ca <__ssvfscanf_r+0x12f2>
   4235e:	f109 36ff 	add.w	r6, r9, #4294967295
   42362:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   42366:	f207 1457 	addw	r4, r7, #343	; 0x157
   4236a:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
   4236c:	441e      	add	r6, r3
   4236e:	f816 1901 	ldrb.w	r1, [r6], #-1
   42372:	465a      	mov	r2, fp
   42374:	4628      	mov	r0, r5
   42376:	f003 fac3 	bl	45900 <_sungetc_r>
   4237a:	42b4      	cmp	r4, r6
   4237c:	d1f7      	bne.n	4236e <__ssvfscanf_r+0x1496>
   4237e:	e724      	b.n	421ca <__ssvfscanf_r+0x12f2>
   42380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   42382:	b183      	cbz	r3, 423a6 <__ssvfscanf_r+0x14ce>
   42384:	f8d3 8000 	ldr.w	r8, [r3]
   42388:	88de      	ldrh	r6, [r3, #6]
   4238a:	e7c1      	b.n	42310 <__ssvfscanf_r+0x1438>
   4238c:	f8c3 a000 	str.w	sl, [r3]
   42390:	f7fe bdc1 	b.w	40f16 <__ssvfscanf_r+0x3e>
   42394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   42396:	b133      	cbz	r3, 423a6 <__ssvfscanf_r+0x14ce>
   42398:	88db      	ldrh	r3, [r3, #6]
   4239a:	461a      	mov	r2, r3
   4239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   4239e:	4616      	mov	r6, r2
   423a0:	f8d3 8000 	ldr.w	r8, [r3]
   423a4:	e7b4      	b.n	42310 <__ssvfscanf_r+0x1438>
   423a6:	f04f 33ff 	mov.w	r3, #4294967295
   423aa:	637b      	str	r3, [r7, #52]	; 0x34
   423ac:	f7fe be47 	b.w	4103e <__ssvfscanf_r+0x166>
   423b0:	6a3d      	ldr	r5, [r7, #32]
   423b2:	45a9      	cmp	r9, r5
   423b4:	f67e ae39 	bls.w	4102a <__ssvfscanf_r+0x152>
   423b8:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   423ba:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   423be:	465a      	mov	r2, fp
   423c0:	4620      	mov	r0, r4
   423c2:	f003 fa9d 	bl	45900 <_sungetc_r>
   423c6:	45a9      	cmp	r9, r5
   423c8:	d1f7      	bne.n	423ba <__ssvfscanf_r+0x14e2>
   423ca:	f7fe be2e 	b.w	4102a <__ssvfscanf_r+0x152>
   423ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   423d0:	2b00      	cmp	r3, #0
   423d2:	d0e8      	beq.n	423a6 <__ssvfscanf_r+0x14ce>
   423d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   423d6:	f8d3 8000 	ldr.w	r8, [r3]
   423da:	88de      	ldrh	r6, [r3, #6]
   423dc:	e798      	b.n	42310 <__ssvfscanf_r+0x1438>
   423de:	462e      	mov	r6, r5
   423e0:	e796      	b.n	42310 <__ssvfscanf_r+0x1438>
   423e2:	6a3d      	ldr	r5, [r7, #32]
   423e4:	45a9      	cmp	r9, r5
   423e6:	f67e ae20 	bls.w	4102a <__ssvfscanf_r+0x152>
   423ea:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   423ec:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   423f0:	465a      	mov	r2, fp
   423f2:	4620      	mov	r0, r4
   423f4:	f003 fa84 	bl	45900 <_sungetc_r>
   423f8:	45a9      	cmp	r9, r5
   423fa:	d1f7      	bne.n	423ec <__ssvfscanf_r+0x1514>
   423fc:	f7fe be15 	b.w	4102a <__ssvfscanf_r+0x152>
   42400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   42402:	2b00      	cmp	r3, #0
   42404:	f43e ae1b 	beq.w	4103e <__ssvfscanf_r+0x166>
   42408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   4240a:	f7fe be10 	b.w	4102e <__ssvfscanf_r+0x156>
   4240e:	4628      	mov	r0, r5
   42410:	f002 ffc8 	bl	453a4 <nanf>
   42414:	ed86 0a00 	vstr	s0, [r6]
   42418:	f7ff bb84 	b.w	41b24 <__ssvfscanf_r+0xc4c>
   4241c:	462a      	mov	r2, r5
   4241e:	e7bd      	b.n	4239c <__ssvfscanf_r+0x14c4>
   42420:	f003 f9d6 	bl	457d0 <_strtoull_r>
   42424:	e764      	b.n	422f0 <__ssvfscanf_r+0x1418>
   42426:	6a3b      	ldr	r3, [r7, #32]
   42428:	4599      	cmp	r9, r3
   4242a:	f67e adfe 	bls.w	4102a <__ssvfscanf_r+0x152>
   4242e:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   42432:	465a      	mov	r2, fp
   42434:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   42436:	f003 fa63 	bl	45900 <_sungetc_r>
   4243a:	6a3b      	ldr	r3, [r7, #32]
   4243c:	4599      	cmp	r9, r3
   4243e:	d1f6      	bne.n	4242e <__ssvfscanf_r+0x1556>
   42440:	f7fe bdf3 	b.w	4102a <__ssvfscanf_r+0x152>
   42444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   42446:	2b00      	cmp	r3, #0
   42448:	f47e adea 	bne.w	41020 <__ssvfscanf_r+0x148>
   4244c:	e7c2      	b.n	423d4 <__ssvfscanf_r+0x14fc>
   4244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   42450:	e7a2      	b.n	42398 <__ssvfscanf_r+0x14c0>
   42452:	f8d8 0000 	ldr.w	r0, [r8]
   42456:	f002 f96f 	bl	44738 <iswspace>
   4245a:	2800      	cmp	r0, #0
   4245c:	f47f ae17 	bne.w	4208e <__ssvfscanf_r+0x11b6>
   42460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   42462:	449a      	add	sl, r3
   42464:	687b      	ldr	r3, [r7, #4]
   42466:	2b03      	cmp	r3, #3
   42468:	f47e af56 	bne.w	41318 <__ssvfscanf_r+0x440>
   4246c:	682b      	ldr	r3, [r5, #0]
   4246e:	2b04      	cmp	r3, #4
   42470:	f47e af52 	bne.w	41318 <__ssvfscanf_r+0x440>
   42474:	f7fe bf51 	b.w	4131a <__ssvfscanf_r+0x442>
   42478:	f8d8 a000 	ldr.w	sl, [r8]
   4247c:	f1ba 3fff 	cmp.w	sl, #4294967295
   42480:	f43e afdd 	beq.w	4143e <__ssvfscanf_r+0x566>
   42484:	f7fe bfbc 	b.w	41400 <__ssvfscanf_r+0x528>

00042488 <__sprint_r.part.0>:
   42488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4248c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   4248e:	4692      	mov	sl, r2
   42490:	049c      	lsls	r4, r3, #18
   42492:	d52c      	bpl.n	424ee <__sprint_r.part.0+0x66>
   42494:	6893      	ldr	r3, [r2, #8]
   42496:	6812      	ldr	r2, [r2, #0]
   42498:	b33b      	cbz	r3, 424ea <__sprint_r.part.0+0x62>
   4249a:	460e      	mov	r6, r1
   4249c:	4607      	mov	r7, r0
   4249e:	f102 0908 	add.w	r9, r2, #8
   424a2:	e959 5b02 	ldrd	r5, fp, [r9, #-8]
   424a6:	ea5f 089b 	movs.w	r8, fp, lsr #2
   424aa:	d014      	beq.n	424d6 <__sprint_r.part.0+0x4e>
   424ac:	3d04      	subs	r5, #4
   424ae:	2400      	movs	r4, #0
   424b0:	e001      	b.n	424b6 <__sprint_r.part.0+0x2e>
   424b2:	45a0      	cmp	r8, r4
   424b4:	d00d      	beq.n	424d2 <__sprint_r.part.0+0x4a>
   424b6:	4632      	mov	r2, r6
   424b8:	f855 1f04 	ldr.w	r1, [r5, #4]!
   424bc:	4638      	mov	r0, r7
   424be:	3401      	adds	r4, #1
   424c0:	f001 fa50 	bl	43964 <_fputwc_r>
   424c4:	1c43      	adds	r3, r0, #1
   424c6:	d1f4      	bne.n	424b2 <__sprint_r.part.0+0x2a>
   424c8:	2300      	movs	r3, #0
   424ca:	e9ca 3301 	strd	r3, r3, [sl, #4]
   424ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   424d2:	f8da 3008 	ldr.w	r3, [sl, #8]
   424d6:	f02b 0b03 	bic.w	fp, fp, #3
   424da:	f109 0908 	add.w	r9, r9, #8
   424de:	eba3 030b 	sub.w	r3, r3, fp
   424e2:	f8ca 3008 	str.w	r3, [sl, #8]
   424e6:	2b00      	cmp	r3, #0
   424e8:	d1db      	bne.n	424a2 <__sprint_r.part.0+0x1a>
   424ea:	2000      	movs	r0, #0
   424ec:	e7ec      	b.n	424c8 <__sprint_r.part.0+0x40>
   424ee:	f001 fbad 	bl	43c4c <__sfvwrite_r>
   424f2:	2300      	movs	r3, #0
   424f4:	e9ca 3301 	strd	r3, r3, [sl, #4]
   424f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000424fc <_vfiprintf_r>:
   424fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42500:	b0bf      	sub	sp, #252	; 0xfc
   42502:	461c      	mov	r4, r3
   42504:	4692      	mov	sl, r2
   42506:	9102      	str	r1, [sp, #8]
   42508:	e9cd 0305 	strd	r0, r3, [sp, #20]
   4250c:	b118      	cbz	r0, 42516 <_vfiprintf_r+0x1a>
   4250e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   42510:	2b00      	cmp	r3, #0
   42512:	f000 83f0 	beq.w	42cf6 <_vfiprintf_r+0x7fa>
   42516:	9b02      	ldr	r3, [sp, #8]
   42518:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   4251c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   4251e:	b28a      	uxth	r2, r1
   42520:	07df      	lsls	r7, r3, #31
   42522:	d402      	bmi.n	4252a <_vfiprintf_r+0x2e>
   42524:	0596      	lsls	r6, r2, #22
   42526:	f140 8540 	bpl.w	42faa <_vfiprintf_r+0xaae>
   4252a:	0495      	lsls	r5, r2, #18
   4252c:	d408      	bmi.n	42540 <_vfiprintf_r+0x44>
   4252e:	9802      	ldr	r0, [sp, #8]
   42530:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   42534:	6e43      	ldr	r3, [r0, #100]	; 0x64
   42536:	b28a      	uxth	r2, r1
   42538:	8181      	strh	r1, [r0, #12]
   4253a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   4253e:	6643      	str	r3, [r0, #100]	; 0x64
   42540:	0710      	lsls	r0, r2, #28
   42542:	f140 80d5 	bpl.w	426f0 <_vfiprintf_r+0x1f4>
   42546:	9b02      	ldr	r3, [sp, #8]
   42548:	691b      	ldr	r3, [r3, #16]
   4254a:	2b00      	cmp	r3, #0
   4254c:	f000 80d0 	beq.w	426f0 <_vfiprintf_r+0x1f4>
   42550:	f002 031a 	and.w	r3, r2, #26
   42554:	2b0a      	cmp	r3, #10
   42556:	f000 83b5 	beq.w	42cc4 <_vfiprintf_r+0x7c8>
   4255a:	f10d 0b54 	add.w	fp, sp, #84	; 0x54
   4255e:	2300      	movs	r3, #0
   42560:	46d9      	mov	r9, fp
   42562:	930b      	str	r3, [sp, #44]	; 0x2c
   42564:	9314      	str	r3, [sp, #80]	; 0x50
   42566:	930c      	str	r3, [sp, #48]	; 0x30
   42568:	9304      	str	r3, [sp, #16]
   4256a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   4256e:	e9cd b312 	strd	fp, r3, [sp, #72]	; 0x48
   42572:	f89a 3000 	ldrb.w	r3, [sl]
   42576:	4654      	mov	r4, sl
   42578:	2b25      	cmp	r3, #37	; 0x25
   4257a:	d01c      	beq.n	425b6 <_vfiprintf_r+0xba>
   4257c:	b913      	cbnz	r3, 42584 <_vfiprintf_r+0x88>
   4257e:	e01a      	b.n	425b6 <_vfiprintf_r+0xba>
   42580:	2b25      	cmp	r3, #37	; 0x25
   42582:	d003      	beq.n	4258c <_vfiprintf_r+0x90>
   42584:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   42588:	2b00      	cmp	r3, #0
   4258a:	d1f9      	bne.n	42580 <_vfiprintf_r+0x84>
   4258c:	ebb4 050a 	subs.w	r5, r4, sl
   42590:	d011      	beq.n	425b6 <_vfiprintf_r+0xba>
   42592:	f8c9 a000 	str.w	sl, [r9]
   42596:	f8c9 5004 	str.w	r5, [r9, #4]
   4259a:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   4259e:	3301      	adds	r3, #1
   425a0:	442a      	add	r2, r5
   425a2:	2b07      	cmp	r3, #7
   425a4:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
   425a8:	f300 80b9 	bgt.w	4271e <_vfiprintf_r+0x222>
   425ac:	f109 0908 	add.w	r9, r9, #8
   425b0:	9b04      	ldr	r3, [sp, #16]
   425b2:	442b      	add	r3, r5
   425b4:	9304      	str	r3, [sp, #16]
   425b6:	7823      	ldrb	r3, [r4, #0]
   425b8:	2b00      	cmp	r3, #0
   425ba:	f000 8478 	beq.w	42eae <_vfiprintf_r+0x9b2>
   425be:	f04f 0300 	mov.w	r3, #0
   425c2:	2700      	movs	r7, #0
   425c4:	f104 0a01 	add.w	sl, r4, #1
   425c8:	f04f 38ff 	mov.w	r8, #4294967295
   425cc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   425d0:	463e      	mov	r6, r7
   425d2:	7863      	ldrb	r3, [r4, #1]
   425d4:	252b      	movs	r5, #43	; 0x2b
   425d6:	f10a 0a01 	add.w	sl, sl, #1
   425da:	f1a3 0220 	sub.w	r2, r3, #32
   425de:	2a5a      	cmp	r2, #90	; 0x5a
   425e0:	f200 838c 	bhi.w	42cfc <_vfiprintf_r+0x800>
   425e4:	e8df f012 	tbh	[pc, r2, lsl #1]
   425e8:	038a0320 	.word	0x038a0320
   425ec:	031b038a 	.word	0x031b038a
   425f0:	038a038a 	.word	0x038a038a
   425f4:	032b038a 	.word	0x032b038a
   425f8:	038a038a 	.word	0x038a038a
   425fc:	02fc0249 	.word	0x02fc0249
   42600:	02f7038a 	.word	0x02f7038a
   42604:	038a02dd 	.word	0x038a02dd
   42608:	010502d8 	.word	0x010502d8
   4260c:	01050105 	.word	0x01050105
   42610:	01050105 	.word	0x01050105
   42614:	01050105 	.word	0x01050105
   42618:	01050105 	.word	0x01050105
   4261c:	038a038a 	.word	0x038a038a
   42620:	038a038a 	.word	0x038a038a
   42624:	038a038a 	.word	0x038a038a
   42628:	038a038a 	.word	0x038a038a
   4262c:	0125038a 	.word	0x0125038a
   42630:	038a0301 	.word	0x038a0301
   42634:	038a038a 	.word	0x038a038a
   42638:	038a038a 	.word	0x038a038a
   4263c:	038a038a 	.word	0x038a038a
   42640:	038a038a 	.word	0x038a038a
   42644:	0071038a 	.word	0x0071038a
   42648:	038a038a 	.word	0x038a038a
   4264c:	02ba038a 	.word	0x02ba038a
   42650:	0060038a 	.word	0x0060038a
   42654:	038a038a 	.word	0x038a038a
   42658:	038a0113 	.word	0x038a0113
   4265c:	038a038a 	.word	0x038a038a
   42660:	038a038a 	.word	0x038a038a
   42664:	038a038a 	.word	0x038a038a
   42668:	038a038a 	.word	0x038a038a
   4266c:	0125038a 	.word	0x0125038a
   42670:	038a00bf 	.word	0x038a00bf
   42674:	038a038a 	.word	0x038a038a
   42678:	00bf02b2 	.word	0x00bf02b2
   4267c:	038a005b 	.word	0x038a005b
   42680:	038a02aa 	.word	0x038a02aa
   42684:	00730297 	.word	0x00730297
   42688:	005b0253 	.word	0x005b0253
   4268c:	02ba038a 	.word	0x02ba038a
   42690:	0062005d 	.word	0x0062005d
   42694:	038a038a 	.word	0x038a038a
   42698:	038a00a1 	.word	0x038a00a1
   4269c:	005d      	.short	0x005d
   4269e:	f046 0620 	orr.w	r6, r6, #32
   426a2:	f89a 3000 	ldrb.w	r3, [sl]
   426a6:	e796      	b.n	425d6 <_vfiprintf_r+0xda>
   426a8:	f046 0610 	orr.w	r6, r6, #16
   426ac:	06b5      	lsls	r5, r6, #26
   426ae:	f140 82f9 	bpl.w	42ca4 <_vfiprintf_r+0x7a8>
   426b2:	9c06      	ldr	r4, [sp, #24]
   426b4:	2301      	movs	r3, #1
   426b6:	9601      	str	r6, [sp, #4]
   426b8:	3407      	adds	r4, #7
   426ba:	f024 0207 	bic.w	r2, r4, #7
   426be:	f102 0108 	add.w	r1, r2, #8
   426c2:	e9d2 4500 	ldrd	r4, r5, [r2]
   426c6:	9106      	str	r1, [sp, #24]
   426c8:	e1f1      	b.n	42aae <_vfiprintf_r+0x5b2>
   426ca:	f046 0610 	orr.w	r6, r6, #16
   426ce:	06b5      	lsls	r5, r6, #26
   426d0:	f140 82da 	bpl.w	42c88 <_vfiprintf_r+0x78c>
   426d4:	9c06      	ldr	r4, [sp, #24]
   426d6:	3407      	adds	r4, #7
   426d8:	f024 0307 	bic.w	r3, r4, #7
   426dc:	f103 0208 	add.w	r2, r3, #8
   426e0:	e9d3 4500 	ldrd	r4, r5, [r3]
   426e4:	9206      	str	r2, [sp, #24]
   426e6:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   426ea:	9301      	str	r3, [sp, #4]
   426ec:	2300      	movs	r3, #0
   426ee:	e1de      	b.n	42aae <_vfiprintf_r+0x5b2>
   426f0:	9d02      	ldr	r5, [sp, #8]
   426f2:	9805      	ldr	r0, [sp, #20]
   426f4:	4629      	mov	r1, r5
   426f6:	f000 fe6b 	bl	433d0 <__swsetup_r>
   426fa:	2800      	cmp	r0, #0
   426fc:	f000 82bd 	beq.w	42c7a <_vfiprintf_r+0x77e>
   42700:	9a02      	ldr	r2, [sp, #8]
   42702:	6e53      	ldr	r3, [r2, #100]	; 0x64
   42704:	07d9      	lsls	r1, r3, #31
   42706:	d403      	bmi.n	42710 <_vfiprintf_r+0x214>
   42708:	8993      	ldrh	r3, [r2, #12]
   4270a:	059b      	lsls	r3, r3, #22
   4270c:	f140 84fb 	bpl.w	43106 <_vfiprintf_r+0xc0a>
   42710:	f04f 33ff 	mov.w	r3, #4294967295
   42714:	9304      	str	r3, [sp, #16]
   42716:	9804      	ldr	r0, [sp, #16]
   42718:	b03f      	add	sp, #252	; 0xfc
   4271a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4271e:	2a00      	cmp	r2, #0
   42720:	f040 8414 	bne.w	42f4c <_vfiprintf_r+0xa50>
   42724:	9213      	str	r2, [sp, #76]	; 0x4c
   42726:	46d9      	mov	r9, fp
   42728:	e742      	b.n	425b0 <_vfiprintf_r+0xb4>
   4272a:	4ab3      	ldr	r2, [pc, #716]	; (429f8 <_vfiprintf_r+0x4fc>)
   4272c:	920b      	str	r2, [sp, #44]	; 0x2c
   4272e:	06b2      	lsls	r2, r6, #26
   42730:	d571      	bpl.n	42816 <_vfiprintf_r+0x31a>
   42732:	9c06      	ldr	r4, [sp, #24]
   42734:	3407      	adds	r4, #7
   42736:	f024 0207 	bic.w	r2, r4, #7
   4273a:	f102 0108 	add.w	r1, r2, #8
   4273e:	e9d2 4500 	ldrd	r4, r5, [r2]
   42742:	9106      	str	r1, [sp, #24]
   42744:	ea54 0205 	orrs.w	r2, r4, r5
   42748:	d008      	beq.n	4275c <_vfiprintf_r+0x260>
   4274a:	07f2      	lsls	r2, r6, #31
   4274c:	d506      	bpl.n	4275c <_vfiprintf_r+0x260>
   4274e:	2230      	movs	r2, #48	; 0x30
   42750:	f046 0602 	orr.w	r6, r6, #2
   42754:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
   42758:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
   4275c:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   42760:	9301      	str	r3, [sp, #4]
   42762:	2302      	movs	r3, #2
   42764:	e1a3      	b.n	42aae <_vfiprintf_r+0x5b2>
   42766:	9601      	str	r6, [sp, #4]
   42768:	9b01      	ldr	r3, [sp, #4]
   4276a:	069d      	lsls	r5, r3, #26
   4276c:	f140 8244 	bpl.w	42bf8 <_vfiprintf_r+0x6fc>
   42770:	9c06      	ldr	r4, [sp, #24]
   42772:	3407      	adds	r4, #7
   42774:	f024 0407 	bic.w	r4, r4, #7
   42778:	e9d4 2300 	ldrd	r2, r3, [r4]
   4277c:	f104 0108 	add.w	r1, r4, #8
   42780:	461d      	mov	r5, r3
   42782:	4614      	mov	r4, r2
   42784:	9106      	str	r1, [sp, #24]
   42786:	2a00      	cmp	r2, #0
   42788:	f173 0300 	sbcs.w	r3, r3, #0
   4278c:	da06      	bge.n	4279c <_vfiprintf_r+0x2a0>
   4278e:	4264      	negs	r4, r4
   42790:	f04f 032d 	mov.w	r3, #45	; 0x2d
   42794:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   42798:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   4279c:	ab3e      	add	r3, sp, #248	; 0xf8
   4279e:	f1b8 3fff 	cmp.w	r8, #4294967295
   427a2:	9303      	str	r3, [sp, #12]
   427a4:	f000 83c5 	beq.w	42f32 <_vfiprintf_r+0xa36>
   427a8:	9a01      	ldr	r2, [sp, #4]
   427aa:	2301      	movs	r3, #1
   427ac:	f022 0680 	bic.w	r6, r2, #128	; 0x80
   427b0:	ea54 0205 	orrs.w	r2, r4, r5
   427b4:	f000 818c 	beq.w	42ad0 <_vfiprintf_r+0x5d4>
   427b8:	9601      	str	r6, [sp, #4]
   427ba:	2b01      	cmp	r3, #1
   427bc:	f000 83b9 	beq.w	42f32 <_vfiprintf_r+0xa36>
   427c0:	2b02      	cmp	r3, #2
   427c2:	f040 8389 	bne.w	42ed8 <_vfiprintf_r+0x9dc>
   427c6:	aa3e      	add	r2, sp, #248	; 0xf8
   427c8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   427ca:	0923      	lsrs	r3, r4, #4
   427cc:	f004 000f 	and.w	r0, r4, #15
   427d0:	0929      	lsrs	r1, r5, #4
   427d2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   427d6:	460d      	mov	r5, r1
   427d8:	461c      	mov	r4, r3
   427da:	5c33      	ldrb	r3, [r6, r0]
   427dc:	f802 3d01 	strb.w	r3, [r2, #-1]!
   427e0:	ea54 0305 	orrs.w	r3, r4, r5
   427e4:	d1f1      	bne.n	427ca <_vfiprintf_r+0x2ce>
   427e6:	9b03      	ldr	r3, [sp, #12]
   427e8:	9209      	str	r2, [sp, #36]	; 0x24
   427ea:	1a9b      	subs	r3, r3, r2
   427ec:	9e01      	ldr	r6, [sp, #4]
   427ee:	9303      	str	r3, [sp, #12]
   427f0:	e184      	b.n	42afc <_vfiprintf_r+0x600>
   427f2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   427f6:	2700      	movs	r7, #0
   427f8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   427fc:	f81a 3b01 	ldrb.w	r3, [sl], #1
   42800:	eb02 0747 	add.w	r7, r2, r7, lsl #1
   42804:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   42808:	2a09      	cmp	r2, #9
   4280a:	d9f5      	bls.n	427f8 <_vfiprintf_r+0x2fc>
   4280c:	e6e5      	b.n	425da <_vfiprintf_r+0xde>
   4280e:	4a7b      	ldr	r2, [pc, #492]	; (429fc <_vfiprintf_r+0x500>)
   42810:	920b      	str	r2, [sp, #44]	; 0x2c
   42812:	06b2      	lsls	r2, r6, #26
   42814:	d48d      	bmi.n	42732 <_vfiprintf_r+0x236>
   42816:	9906      	ldr	r1, [sp, #24]
   42818:	06f5      	lsls	r5, r6, #27
   4281a:	f101 0204 	add.w	r2, r1, #4
   4281e:	f100 83d0 	bmi.w	42fc2 <_vfiprintf_r+0xac6>
   42822:	0674      	lsls	r4, r6, #25
   42824:	9906      	ldr	r1, [sp, #24]
   42826:	f140 83c9 	bpl.w	42fbc <_vfiprintf_r+0xac0>
   4282a:	880c      	ldrh	r4, [r1, #0]
   4282c:	2500      	movs	r5, #0
   4282e:	9206      	str	r2, [sp, #24]
   42830:	e788      	b.n	42744 <_vfiprintf_r+0x248>
   42832:	9a06      	ldr	r2, [sp, #24]
   42834:	2101      	movs	r1, #1
   42836:	f04f 0000 	mov.w	r0, #0
   4283a:	6813      	ldr	r3, [r2, #0]
   4283c:	3204      	adds	r2, #4
   4283e:	9101      	str	r1, [sp, #4]
   42840:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
   42844:	ab25      	add	r3, sp, #148	; 0x94
   42846:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   4284a:	9206      	str	r2, [sp, #24]
   4284c:	9103      	str	r1, [sp, #12]
   4284e:	9309      	str	r3, [sp, #36]	; 0x24
   42850:	f04f 0800 	mov.w	r8, #0
   42854:	f016 0302 	ands.w	r3, r6, #2
   42858:	9308      	str	r3, [sp, #32]
   4285a:	d002      	beq.n	42862 <_vfiprintf_r+0x366>
   4285c:	9b01      	ldr	r3, [sp, #4]
   4285e:	3302      	adds	r3, #2
   42860:	9301      	str	r3, [sp, #4]
   42862:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   42866:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
   4286a:	9307      	str	r3, [sp, #28]
   4286c:	f101 0c01 	add.w	ip, r1, #1
   42870:	4660      	mov	r0, ip
   42872:	d141      	bne.n	428f8 <_vfiprintf_r+0x3fc>
   42874:	9b01      	ldr	r3, [sp, #4]
   42876:	1afc      	subs	r4, r7, r3
   42878:	2c00      	cmp	r4, #0
   4287a:	dd3d      	ble.n	428f8 <_vfiprintf_r+0x3fc>
   4287c:	2c10      	cmp	r4, #16
   4287e:	f340 8481 	ble.w	43184 <_vfiprintf_r+0xc88>
   42882:	4d5f      	ldr	r5, [pc, #380]	; (42a00 <_vfiprintf_r+0x504>)
   42884:	2310      	movs	r3, #16
   42886:	e007      	b.n	42898 <_vfiprintf_r+0x39c>
   42888:	4611      	mov	r1, r2
   4288a:	f04f 0e01 	mov.w	lr, #1
   4288e:	46d9      	mov	r9, fp
   42890:	3c10      	subs	r4, #16
   42892:	1c48      	adds	r0, r1, #1
   42894:	2c10      	cmp	r4, #16
   42896:	dd21      	ble.n	428dc <_vfiprintf_r+0x3e0>
   42898:	3210      	adds	r2, #16
   4289a:	2807      	cmp	r0, #7
   4289c:	f101 0e02 	add.w	lr, r1, #2
   428a0:	9013      	str	r0, [sp, #76]	; 0x4c
   428a2:	9214      	str	r2, [sp, #80]	; 0x50
   428a4:	4601      	mov	r1, r0
   428a6:	e9c9 5300 	strd	r5, r3, [r9]
   428aa:	f109 0908 	add.w	r9, r9, #8
   428ae:	ddef      	ble.n	42890 <_vfiprintf_r+0x394>
   428b0:	2a00      	cmp	r2, #0
   428b2:	d0e9      	beq.n	42888 <_vfiprintf_r+0x38c>
   428b4:	aa12      	add	r2, sp, #72	; 0x48
   428b6:	9902      	ldr	r1, [sp, #8]
   428b8:	9805      	ldr	r0, [sp, #20]
   428ba:	46d9      	mov	r9, fp
   428bc:	930a      	str	r3, [sp, #40]	; 0x28
   428be:	f7ff fde3 	bl	42488 <__sprint_r.part.0>
   428c2:	2800      	cmp	r0, #0
   428c4:	f040 82f9 	bne.w	42eba <_vfiprintf_r+0x9be>
   428c8:	3c10      	subs	r4, #16
   428ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   428cc:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
   428d0:	2c10      	cmp	r4, #16
   428d2:	f101 0e01 	add.w	lr, r1, #1
   428d6:	f101 0001 	add.w	r0, r1, #1
   428da:	dcdd      	bgt.n	42898 <_vfiprintf_r+0x39c>
   428dc:	4422      	add	r2, r4
   428de:	f1be 0f07 	cmp.w	lr, #7
   428e2:	e9c9 5400 	strd	r5, r4, [r9]
   428e6:	e9cd e213 	strd	lr, r2, [sp, #76]	; 0x4c
   428ea:	f300 82ab 	bgt.w	42e44 <_vfiprintf_r+0x948>
   428ee:	f109 0908 	add.w	r9, r9, #8
   428f2:	f10e 0001 	add.w	r0, lr, #1
   428f6:	4671      	mov	r1, lr
   428f8:	f89d 4043 	ldrb.w	r4, [sp, #67]	; 0x43
   428fc:	f109 0c08 	add.w	ip, r9, #8
   42900:	2c00      	cmp	r4, #0
   42902:	f000 8218 	beq.w	42d36 <_vfiprintf_r+0x83a>
   42906:	3201      	adds	r2, #1
   42908:	f10d 0443 	add.w	r4, sp, #67	; 0x43
   4290c:	2101      	movs	r1, #1
   4290e:	2807      	cmp	r0, #7
   42910:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   42914:	e9c9 4100 	strd	r4, r1, [r9]
   42918:	f340 82a4 	ble.w	42e64 <_vfiprintf_r+0x968>
   4291c:	2a00      	cmp	r2, #0
   4291e:	f040 81fc 	bne.w	42d1a <_vfiprintf_r+0x81e>
   42922:	9b08      	ldr	r3, [sp, #32]
   42924:	2b00      	cmp	r3, #0
   42926:	f040 82a3 	bne.w	42e70 <_vfiprintf_r+0x974>
   4292a:	4608      	mov	r0, r1
   4292c:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   42930:	4611      	mov	r1, r2
   42932:	46d9      	mov	r9, fp
   42934:	9b07      	ldr	r3, [sp, #28]
   42936:	2b80      	cmp	r3, #128	; 0x80
   42938:	f000 8217 	beq.w	42d6a <_vfiprintf_r+0x86e>
   4293c:	9b03      	ldr	r3, [sp, #12]
   4293e:	eba8 0403 	sub.w	r4, r8, r3
   42942:	2c00      	cmp	r4, #0
   42944:	dd3a      	ble.n	429bc <_vfiprintf_r+0x4c0>
   42946:	2c10      	cmp	r4, #16
   42948:	f340 840d 	ble.w	43166 <_vfiprintf_r+0xc6a>
   4294c:	4d2d      	ldr	r5, [pc, #180]	; (42a04 <_vfiprintf_r+0x508>)
   4294e:	f04f 0810 	mov.w	r8, #16
   42952:	e005      	b.n	42960 <_vfiprintf_r+0x464>
   42954:	2001      	movs	r0, #1
   42956:	4611      	mov	r1, r2
   42958:	46d9      	mov	r9, fp
   4295a:	3c10      	subs	r4, #16
   4295c:	2c10      	cmp	r4, #16
   4295e:	dd1f      	ble.n	429a0 <_vfiprintf_r+0x4a4>
   42960:	1c4b      	adds	r3, r1, #1
   42962:	3210      	adds	r2, #16
   42964:	f8c9 5000 	str.w	r5, [r9]
   42968:	1c88      	adds	r0, r1, #2
   4296a:	2b07      	cmp	r3, #7
   4296c:	f8c9 8004 	str.w	r8, [r9, #4]
   42970:	9214      	str	r2, [sp, #80]	; 0x50
   42972:	4619      	mov	r1, r3
   42974:	f109 0908 	add.w	r9, r9, #8
   42978:	9313      	str	r3, [sp, #76]	; 0x4c
   4297a:	ddee      	ble.n	4295a <_vfiprintf_r+0x45e>
   4297c:	2a00      	cmp	r2, #0
   4297e:	d0e9      	beq.n	42954 <_vfiprintf_r+0x458>
   42980:	aa12      	add	r2, sp, #72	; 0x48
   42982:	9902      	ldr	r1, [sp, #8]
   42984:	9805      	ldr	r0, [sp, #20]
   42986:	46d9      	mov	r9, fp
   42988:	f7ff fd7e 	bl	42488 <__sprint_r.part.0>
   4298c:	2800      	cmp	r0, #0
   4298e:	f040 8294 	bne.w	42eba <_vfiprintf_r+0x9be>
   42992:	3c10      	subs	r4, #16
   42994:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
   42998:	2c10      	cmp	r4, #16
   4299a:	f101 0001 	add.w	r0, r1, #1
   4299e:	dcdf      	bgt.n	42960 <_vfiprintf_r+0x464>
   429a0:	f109 0308 	add.w	r3, r9, #8
   429a4:	4422      	add	r2, r4
   429a6:	2807      	cmp	r0, #7
   429a8:	e9c9 5400 	strd	r5, r4, [r9]
   429ac:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   429b0:	f300 826c 	bgt.w	42e8c <_vfiprintf_r+0x990>
   429b4:	3001      	adds	r0, #1
   429b6:	f103 0c08 	add.w	ip, r3, #8
   429ba:	4699      	mov	r9, r3
   429bc:	9b03      	ldr	r3, [sp, #12]
   429be:	2807      	cmp	r0, #7
   429c0:	9909      	ldr	r1, [sp, #36]	; 0x24
   429c2:	441a      	add	r2, r3
   429c4:	e9c9 1300 	strd	r1, r3, [r9]
   429c8:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   429cc:	f340 821f 	ble.w	42e0e <_vfiprintf_r+0x912>
   429d0:	2a00      	cmp	r2, #0
   429d2:	f040 8213 	bne.w	42dfc <_vfiprintf_r+0x900>
   429d6:	0774      	lsls	r4, r6, #29
   429d8:	9213      	str	r2, [sp, #76]	; 0x4c
   429da:	d546      	bpl.n	42a6a <_vfiprintf_r+0x56e>
   429dc:	9b01      	ldr	r3, [sp, #4]
   429de:	1afc      	subs	r4, r7, r3
   429e0:	2c00      	cmp	r4, #0
   429e2:	dd42      	ble.n	42a6a <_vfiprintf_r+0x56e>
   429e4:	46dc      	mov	ip, fp
   429e6:	2c10      	cmp	r4, #16
   429e8:	9913      	ldr	r1, [sp, #76]	; 0x4c
   429ea:	f340 83cf 	ble.w	4318c <_vfiprintf_r+0xc90>
   429ee:	4d04      	ldr	r5, [pc, #16]	; (42a00 <_vfiprintf_r+0x504>)
   429f0:	2610      	movs	r6, #16
   429f2:	f8dd 8014 	ldr.w	r8, [sp, #20]
   429f6:	e00d      	b.n	42a14 <_vfiprintf_r+0x518>
   429f8:	0004ae0c 	.word	0x0004ae0c
   429fc:	0004ae20 	.word	0x0004ae20
   42a00:	0004ae8c 	.word	0x0004ae8c
   42a04:	0004ae9c 	.word	0x0004ae9c
   42a08:	2001      	movs	r0, #1
   42a0a:	4611      	mov	r1, r2
   42a0c:	46dc      	mov	ip, fp
   42a0e:	3c10      	subs	r4, #16
   42a10:	2c10      	cmp	r4, #16
   42a12:	dd1f      	ble.n	42a54 <_vfiprintf_r+0x558>
   42a14:	1c4b      	adds	r3, r1, #1
   42a16:	3210      	adds	r2, #16
   42a18:	f8cc 5000 	str.w	r5, [ip]
   42a1c:	1c88      	adds	r0, r1, #2
   42a1e:	2b07      	cmp	r3, #7
   42a20:	f8cc 6004 	str.w	r6, [ip, #4]
   42a24:	9214      	str	r2, [sp, #80]	; 0x50
   42a26:	4619      	mov	r1, r3
   42a28:	f10c 0c08 	add.w	ip, ip, #8
   42a2c:	9313      	str	r3, [sp, #76]	; 0x4c
   42a2e:	ddee      	ble.n	42a0e <_vfiprintf_r+0x512>
   42a30:	2a00      	cmp	r2, #0
   42a32:	d0e9      	beq.n	42a08 <_vfiprintf_r+0x50c>
   42a34:	aa12      	add	r2, sp, #72	; 0x48
   42a36:	9902      	ldr	r1, [sp, #8]
   42a38:	4640      	mov	r0, r8
   42a3a:	f7ff fd25 	bl	42488 <__sprint_r.part.0>
   42a3e:	46dc      	mov	ip, fp
   42a40:	2800      	cmp	r0, #0
   42a42:	f040 823a 	bne.w	42eba <_vfiprintf_r+0x9be>
   42a46:	3c10      	subs	r4, #16
   42a48:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
   42a4c:	2c10      	cmp	r4, #16
   42a4e:	f101 0001 	add.w	r0, r1, #1
   42a52:	dcdf      	bgt.n	42a14 <_vfiprintf_r+0x518>
   42a54:	4422      	add	r2, r4
   42a56:	2807      	cmp	r0, #7
   42a58:	e9cc 5400 	strd	r5, r4, [ip]
   42a5c:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   42a60:	f340 81dc 	ble.w	42e1c <_vfiprintf_r+0x920>
   42a64:	2a00      	cmp	r2, #0
   42a66:	f040 832e 	bne.w	430c6 <_vfiprintf_r+0xbca>
   42a6a:	9b04      	ldr	r3, [sp, #16]
   42a6c:	9a01      	ldr	r2, [sp, #4]
   42a6e:	4297      	cmp	r7, r2
   42a70:	bfac      	ite	ge
   42a72:	19db      	addge	r3, r3, r7
   42a74:	189b      	addlt	r3, r3, r2
   42a76:	9304      	str	r3, [sp, #16]
   42a78:	e1df      	b.n	42e3a <_vfiprintf_r+0x93e>
   42a7a:	9b06      	ldr	r3, [sp, #24]
   42a7c:	681f      	ldr	r7, [r3, #0]
   42a7e:	1d1a      	adds	r2, r3, #4
   42a80:	f89a 3000 	ldrb.w	r3, [sl]
   42a84:	2f00      	cmp	r7, #0
   42a86:	f2c0 831b 	blt.w	430c0 <_vfiprintf_r+0xbc4>
   42a8a:	9206      	str	r2, [sp, #24]
   42a8c:	e5a3      	b.n	425d6 <_vfiprintf_r+0xda>
   42a8e:	f647 0330 	movw	r3, #30768	; 0x7830
   42a92:	9a06      	ldr	r2, [sp, #24]
   42a94:	f046 0102 	orr.w	r1, r6, #2
   42a98:	2500      	movs	r5, #0
   42a9a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
   42a9e:	3204      	adds	r2, #4
   42aa0:	4bb7      	ldr	r3, [pc, #732]	; (42d80 <_vfiprintf_r+0x884>)
   42aa2:	f852 4c04 	ldr.w	r4, [r2, #-4]
   42aa6:	930b      	str	r3, [sp, #44]	; 0x2c
   42aa8:	2302      	movs	r3, #2
   42aaa:	9101      	str	r1, [sp, #4]
   42aac:	9206      	str	r2, [sp, #24]
   42aae:	f04f 0200 	mov.w	r2, #0
   42ab2:	f1b8 3fff 	cmp.w	r8, #4294967295
   42ab6:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
   42aba:	aa3e      	add	r2, sp, #248	; 0xf8
   42abc:	9203      	str	r2, [sp, #12]
   42abe:	f43f ae7c 	beq.w	427ba <_vfiprintf_r+0x2be>
   42ac2:	9a01      	ldr	r2, [sp, #4]
   42ac4:	f022 0680 	bic.w	r6, r2, #128	; 0x80
   42ac8:	ea54 0205 	orrs.w	r2, r4, r5
   42acc:	f47f ae74 	bne.w	427b8 <_vfiprintf_r+0x2bc>
   42ad0:	f118 0200 	adds.w	r2, r8, #0
   42ad4:	bf18      	it	ne
   42ad6:	2201      	movne	r2, #1
   42ad8:	2a00      	cmp	r2, #0
   42ada:	f47f ae6d 	bne.w	427b8 <_vfiprintf_r+0x2bc>
   42ade:	2b00      	cmp	r3, #0
   42ae0:	f040 81e0 	bne.w	42ea4 <_vfiprintf_r+0x9a8>
   42ae4:	9a01      	ldr	r2, [sp, #4]
   42ae6:	f012 0201 	ands.w	r2, r2, #1
   42aea:	9203      	str	r2, [sp, #12]
   42aec:	f000 821d 	beq.w	42f2a <_vfiprintf_r+0xa2e>
   42af0:	a93e      	add	r1, sp, #248	; 0xf8
   42af2:	2230      	movs	r2, #48	; 0x30
   42af4:	4698      	mov	r8, r3
   42af6:	f801 2d01 	strb.w	r2, [r1, #-1]!
   42afa:	9109      	str	r1, [sp, #36]	; 0x24
   42afc:	9a03      	ldr	r2, [sp, #12]
   42afe:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   42b02:	4542      	cmp	r2, r8
   42b04:	bfb8      	it	lt
   42b06:	4642      	movlt	r2, r8
   42b08:	9201      	str	r2, [sp, #4]
   42b0a:	2b00      	cmp	r3, #0
   42b0c:	f43f aea2 	beq.w	42854 <_vfiprintf_r+0x358>
   42b10:	3201      	adds	r2, #1
   42b12:	9201      	str	r2, [sp, #4]
   42b14:	e69e      	b.n	42854 <_vfiprintf_r+0x358>
   42b16:	9a06      	ldr	r2, [sp, #24]
   42b18:	06b1      	lsls	r1, r6, #26
   42b1a:	f852 3b04 	ldr.w	r3, [r2], #4
   42b1e:	9206      	str	r2, [sp, #24]
   42b20:	f100 8273 	bmi.w	4300a <_vfiprintf_r+0xb0e>
   42b24:	06f2      	lsls	r2, r6, #27
   42b26:	f100 8321 	bmi.w	4316c <_vfiprintf_r+0xc70>
   42b2a:	0677      	lsls	r7, r6, #25
   42b2c:	f100 834a 	bmi.w	431c4 <_vfiprintf_r+0xcc8>
   42b30:	05b6      	lsls	r6, r6, #22
   42b32:	f140 831b 	bpl.w	4316c <_vfiprintf_r+0xc70>
   42b36:	9a04      	ldr	r2, [sp, #16]
   42b38:	701a      	strb	r2, [r3, #0]
   42b3a:	e51a      	b.n	42572 <_vfiprintf_r+0x76>
   42b3c:	f89a 3000 	ldrb.w	r3, [sl]
   42b40:	2b6c      	cmp	r3, #108	; 0x6c
   42b42:	f000 82d0 	beq.w	430e6 <_vfiprintf_r+0xbea>
   42b46:	f046 0610 	orr.w	r6, r6, #16
   42b4a:	e544      	b.n	425d6 <_vfiprintf_r+0xda>
   42b4c:	f89a 3000 	ldrb.w	r3, [sl]
   42b50:	2b68      	cmp	r3, #104	; 0x68
   42b52:	f000 82d0 	beq.w	430f6 <_vfiprintf_r+0xbfa>
   42b56:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   42b5a:	e53c      	b.n	425d6 <_vfiprintf_r+0xda>
   42b5c:	9a06      	ldr	r2, [sp, #24]
   42b5e:	6813      	ldr	r3, [r2, #0]
   42b60:	1d14      	adds	r4, r2, #4
   42b62:	f04f 0200 	mov.w	r2, #0
   42b66:	9309      	str	r3, [sp, #36]	; 0x24
   42b68:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
   42b6c:	2b00      	cmp	r3, #0
   42b6e:	f000 82d1 	beq.w	43114 <_vfiprintf_r+0xc18>
   42b72:	f1b8 3fff 	cmp.w	r8, #4294967295
   42b76:	f000 82fd 	beq.w	43174 <_vfiprintf_r+0xc78>
   42b7a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   42b7c:	4642      	mov	r2, r8
   42b7e:	2100      	movs	r1, #0
   42b80:	4628      	mov	r0, r5
   42b82:	f7fd f85d 	bl	3fc40 <memchr>
   42b86:	2800      	cmp	r0, #0
   42b88:	f000 8324 	beq.w	431d4 <_vfiprintf_r+0xcd8>
   42b8c:	1b43      	subs	r3, r0, r5
   42b8e:	9406      	str	r4, [sp, #24]
   42b90:	f04f 0800 	mov.w	r8, #0
   42b94:	9303      	str	r3, [sp, #12]
   42b96:	e7b1      	b.n	42afc <_vfiprintf_r+0x600>
   42b98:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   42b9c:	f89a 3000 	ldrb.w	r3, [sl]
   42ba0:	e519      	b.n	425d6 <_vfiprintf_r+0xda>
   42ba2:	f89a 3000 	ldrb.w	r3, [sl]
   42ba6:	f10a 0101 	add.w	r1, sl, #1
   42baa:	2b2a      	cmp	r3, #42	; 0x2a
   42bac:	f000 8330 	beq.w	43210 <_vfiprintf_r+0xd14>
   42bb0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   42bb4:	468a      	mov	sl, r1
   42bb6:	f04f 0800 	mov.w	r8, #0
   42bba:	2a09      	cmp	r2, #9
   42bbc:	f63f ad0d 	bhi.w	425da <_vfiprintf_r+0xde>
   42bc0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   42bc4:	f81a 3b01 	ldrb.w	r3, [sl], #1
   42bc8:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   42bcc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   42bd0:	2a09      	cmp	r2, #9
   42bd2:	d9f5      	bls.n	42bc0 <_vfiprintf_r+0x6c4>
   42bd4:	e501      	b.n	425da <_vfiprintf_r+0xde>
   42bd6:	f89a 3000 	ldrb.w	r3, [sl]
   42bda:	f046 0604 	orr.w	r6, r6, #4
   42bde:	e4fa      	b.n	425d6 <_vfiprintf_r+0xda>
   42be0:	f88d 5043 	strb.w	r5, [sp, #67]	; 0x43
   42be4:	f89a 3000 	ldrb.w	r3, [sl]
   42be8:	e4f5      	b.n	425d6 <_vfiprintf_r+0xda>
   42bea:	f046 0310 	orr.w	r3, r6, #16
   42bee:	9301      	str	r3, [sp, #4]
   42bf0:	9b01      	ldr	r3, [sp, #4]
   42bf2:	069d      	lsls	r5, r3, #26
   42bf4:	f53f adbc 	bmi.w	42770 <_vfiprintf_r+0x274>
   42bf8:	9901      	ldr	r1, [sp, #4]
   42bfa:	9a06      	ldr	r2, [sp, #24]
   42bfc:	06cc      	lsls	r4, r1, #27
   42bfe:	f102 0304 	add.w	r3, r2, #4
   42c02:	f100 81e9 	bmi.w	42fd8 <_vfiprintf_r+0xadc>
   42c06:	9a01      	ldr	r2, [sp, #4]
   42c08:	0650      	lsls	r0, r2, #25
   42c0a:	f140 81df 	bpl.w	42fcc <_vfiprintf_r+0xad0>
   42c0e:	9a06      	ldr	r2, [sp, #24]
   42c10:	9306      	str	r3, [sp, #24]
   42c12:	f9b2 4000 	ldrsh.w	r4, [r2]
   42c16:	17e5      	asrs	r5, r4, #31
   42c18:	4622      	mov	r2, r4
   42c1a:	462b      	mov	r3, r5
   42c1c:	e5b3      	b.n	42786 <_vfiprintf_r+0x28a>
   42c1e:	f046 0601 	orr.w	r6, r6, #1
   42c22:	f89a 3000 	ldrb.w	r3, [sl]
   42c26:	e4d6      	b.n	425d6 <_vfiprintf_r+0xda>
   42c28:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   42c2c:	f89a 3000 	ldrb.w	r3, [sl]
   42c30:	2a00      	cmp	r2, #0
   42c32:	f47f acd0 	bne.w	425d6 <_vfiprintf_r+0xda>
   42c36:	2220      	movs	r2, #32
   42c38:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
   42c3c:	e4cb      	b.n	425d6 <_vfiprintf_r+0xda>
   42c3e:	9805      	ldr	r0, [sp, #20]
   42c40:	f001 fd8a 	bl	44758 <_localeconv_r>
   42c44:	6843      	ldr	r3, [r0, #4]
   42c46:	4618      	mov	r0, r3
   42c48:	930d      	str	r3, [sp, #52]	; 0x34
   42c4a:	f7fd fc9b 	bl	40584 <strlen>
   42c4e:	900e      	str	r0, [sp, #56]	; 0x38
   42c50:	4604      	mov	r4, r0
   42c52:	9805      	ldr	r0, [sp, #20]
   42c54:	f001 fd80 	bl	44758 <_localeconv_r>
   42c58:	6883      	ldr	r3, [r0, #8]
   42c5a:	930c      	str	r3, [sp, #48]	; 0x30
   42c5c:	2c00      	cmp	r4, #0
   42c5e:	f43f ad20 	beq.w	426a2 <_vfiprintf_r+0x1a6>
   42c62:	2b00      	cmp	r3, #0
   42c64:	f43f ad1d 	beq.w	426a2 <_vfiprintf_r+0x1a6>
   42c68:	781a      	ldrb	r2, [r3, #0]
   42c6a:	f89a 3000 	ldrb.w	r3, [sl]
   42c6e:	2a00      	cmp	r2, #0
   42c70:	f43f acb1 	beq.w	425d6 <_vfiprintf_r+0xda>
   42c74:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   42c78:	e4ad      	b.n	425d6 <_vfiprintf_r+0xda>
   42c7a:	89aa      	ldrh	r2, [r5, #12]
   42c7c:	f002 031a 	and.w	r3, r2, #26
   42c80:	2b0a      	cmp	r3, #10
   42c82:	f47f ac6a 	bne.w	4255a <_vfiprintf_r+0x5e>
   42c86:	e01d      	b.n	42cc4 <_vfiprintf_r+0x7c8>
   42c88:	9a06      	ldr	r2, [sp, #24]
   42c8a:	06f4      	lsls	r4, r6, #27
   42c8c:	f102 0304 	add.w	r3, r2, #4
   42c90:	f100 81b6 	bmi.w	43000 <_vfiprintf_r+0xb04>
   42c94:	0670      	lsls	r0, r6, #25
   42c96:	9a06      	ldr	r2, [sp, #24]
   42c98:	f140 81af 	bpl.w	42ffa <_vfiprintf_r+0xafe>
   42c9c:	8814      	ldrh	r4, [r2, #0]
   42c9e:	2500      	movs	r5, #0
   42ca0:	9306      	str	r3, [sp, #24]
   42ca2:	e520      	b.n	426e6 <_vfiprintf_r+0x1ea>
   42ca4:	9b06      	ldr	r3, [sp, #24]
   42ca6:	06f4      	lsls	r4, r6, #27
   42ca8:	f103 0204 	add.w	r2, r3, #4
   42cac:	f100 819f 	bmi.w	42fee <_vfiprintf_r+0xaf2>
   42cb0:	0670      	lsls	r0, r6, #25
   42cb2:	f140 8198 	bpl.w	42fe6 <_vfiprintf_r+0xaea>
   42cb6:	9b06      	ldr	r3, [sp, #24]
   42cb8:	2500      	movs	r5, #0
   42cba:	9601      	str	r6, [sp, #4]
   42cbc:	881c      	ldrh	r4, [r3, #0]
   42cbe:	2301      	movs	r3, #1
   42cc0:	9206      	str	r2, [sp, #24]
   42cc2:	e6f4      	b.n	42aae <_vfiprintf_r+0x5b2>
   42cc4:	9902      	ldr	r1, [sp, #8]
   42cc6:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   42cca:	2b00      	cmp	r3, #0
   42ccc:	f6ff ac45 	blt.w	4255a <_vfiprintf_r+0x5e>
   42cd0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   42cd2:	07df      	lsls	r7, r3, #31
   42cd4:	d404      	bmi.n	42ce0 <_vfiprintf_r+0x7e4>
   42cd6:	0596      	lsls	r6, r2, #22
   42cd8:	d402      	bmi.n	42ce0 <_vfiprintf_r+0x7e4>
   42cda:	6d88      	ldr	r0, [r1, #88]	; 0x58
   42cdc:	f001 fd50 	bl	44780 <__retarget_lock_release_recursive>
   42ce0:	4623      	mov	r3, r4
   42ce2:	4652      	mov	r2, sl
   42ce4:	9902      	ldr	r1, [sp, #8]
   42ce6:	9805      	ldr	r0, [sp, #20]
   42ce8:	f000 faa4 	bl	43234 <__sbprintf>
   42cec:	9004      	str	r0, [sp, #16]
   42cee:	9804      	ldr	r0, [sp, #16]
   42cf0:	b03f      	add	sp, #252	; 0xfc
   42cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42cf6:	f000 fda9 	bl	4384c <__sinit>
   42cfa:	e40c      	b.n	42516 <_vfiprintf_r+0x1a>
   42cfc:	2b00      	cmp	r3, #0
   42cfe:	f000 80d6 	beq.w	42eae <_vfiprintf_r+0x9b2>
   42d02:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
   42d06:	f04f 0300 	mov.w	r3, #0
   42d0a:	2201      	movs	r2, #1
   42d0c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   42d10:	ab25      	add	r3, sp, #148	; 0x94
   42d12:	9201      	str	r2, [sp, #4]
   42d14:	9309      	str	r3, [sp, #36]	; 0x24
   42d16:	9203      	str	r2, [sp, #12]
   42d18:	e59a      	b.n	42850 <_vfiprintf_r+0x354>
   42d1a:	aa12      	add	r2, sp, #72	; 0x48
   42d1c:	9902      	ldr	r1, [sp, #8]
   42d1e:	9805      	ldr	r0, [sp, #20]
   42d20:	f7ff fbb2 	bl	42488 <__sprint_r.part.0>
   42d24:	2800      	cmp	r0, #0
   42d26:	f040 80c8 	bne.w	42eba <_vfiprintf_r+0x9be>
   42d2a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   42d2c:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   42d30:	9a14      	ldr	r2, [sp, #80]	; 0x50
   42d32:	46d9      	mov	r9, fp
   42d34:	1c48      	adds	r0, r1, #1
   42d36:	9b08      	ldr	r3, [sp, #32]
   42d38:	2b00      	cmp	r3, #0
   42d3a:	f43f adfb 	beq.w	42934 <_vfiprintf_r+0x438>
   42d3e:	3202      	adds	r2, #2
   42d40:	a911      	add	r1, sp, #68	; 0x44
   42d42:	2302      	movs	r3, #2
   42d44:	2807      	cmp	r0, #7
   42d46:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   42d4a:	e9c9 1300 	strd	r1, r3, [r9]
   42d4e:	f340 8097 	ble.w	42e80 <_vfiprintf_r+0x984>
   42d52:	2a00      	cmp	r2, #0
   42d54:	f040 8104 	bne.w	42f60 <_vfiprintf_r+0xa64>
   42d58:	9b07      	ldr	r3, [sp, #28]
   42d5a:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   42d5e:	2001      	movs	r0, #1
   42d60:	4611      	mov	r1, r2
   42d62:	2b80      	cmp	r3, #128	; 0x80
   42d64:	46d9      	mov	r9, fp
   42d66:	f47f ade9 	bne.w	4293c <_vfiprintf_r+0x440>
   42d6a:	9b01      	ldr	r3, [sp, #4]
   42d6c:	1afc      	subs	r4, r7, r3
   42d6e:	2c00      	cmp	r4, #0
   42d70:	f77f ade4 	ble.w	4293c <_vfiprintf_r+0x440>
   42d74:	2c10      	cmp	r4, #16
   42d76:	f340 8229 	ble.w	431cc <_vfiprintf_r+0xcd0>
   42d7a:	4d02      	ldr	r5, [pc, #8]	; (42d84 <_vfiprintf_r+0x888>)
   42d7c:	e00b      	b.n	42d96 <_vfiprintf_r+0x89a>
   42d7e:	bf00      	nop
   42d80:	0004ae0c 	.word	0x0004ae0c
   42d84:	0004ae9c 	.word	0x0004ae9c
   42d88:	f04f 0c01 	mov.w	ip, #1
   42d8c:	4611      	mov	r1, r2
   42d8e:	46d9      	mov	r9, fp
   42d90:	3c10      	subs	r4, #16
   42d92:	2c10      	cmp	r4, #16
   42d94:	dd20      	ble.n	42dd8 <_vfiprintf_r+0x8dc>
   42d96:	1c4b      	adds	r3, r1, #1
   42d98:	3210      	adds	r2, #16
   42d9a:	2010      	movs	r0, #16
   42d9c:	f8c9 5000 	str.w	r5, [r9]
   42da0:	2b07      	cmp	r3, #7
   42da2:	f101 0c02 	add.w	ip, r1, #2
   42da6:	f8c9 0004 	str.w	r0, [r9, #4]
   42daa:	4619      	mov	r1, r3
   42dac:	9214      	str	r2, [sp, #80]	; 0x50
   42dae:	f109 0908 	add.w	r9, r9, #8
   42db2:	9313      	str	r3, [sp, #76]	; 0x4c
   42db4:	ddec      	ble.n	42d90 <_vfiprintf_r+0x894>
   42db6:	2a00      	cmp	r2, #0
   42db8:	d0e6      	beq.n	42d88 <_vfiprintf_r+0x88c>
   42dba:	aa12      	add	r2, sp, #72	; 0x48
   42dbc:	9902      	ldr	r1, [sp, #8]
   42dbe:	9805      	ldr	r0, [sp, #20]
   42dc0:	46d9      	mov	r9, fp
   42dc2:	f7ff fb61 	bl	42488 <__sprint_r.part.0>
   42dc6:	2800      	cmp	r0, #0
   42dc8:	d177      	bne.n	42eba <_vfiprintf_r+0x9be>
   42dca:	3c10      	subs	r4, #16
   42dcc:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
   42dd0:	2c10      	cmp	r4, #16
   42dd2:	f101 0c01 	add.w	ip, r1, #1
   42dd6:	dcde      	bgt.n	42d96 <_vfiprintf_r+0x89a>
   42dd8:	f109 0308 	add.w	r3, r9, #8
   42ddc:	4422      	add	r2, r4
   42dde:	f1bc 0f07 	cmp.w	ip, #7
   42de2:	e9c9 5400 	strd	r5, r4, [r9]
   42de6:	e9cd c213 	strd	ip, r2, [sp, #76]	; 0x4c
   42dea:	f300 80c7 	bgt.w	42f7c <_vfiprintf_r+0xa80>
   42dee:	f10c 0001 	add.w	r0, ip, #1
   42df2:	4661      	mov	r1, ip
   42df4:	4699      	mov	r9, r3
   42df6:	f103 0c08 	add.w	ip, r3, #8
   42dfa:	e59f      	b.n	4293c <_vfiprintf_r+0x440>
   42dfc:	aa12      	add	r2, sp, #72	; 0x48
   42dfe:	9902      	ldr	r1, [sp, #8]
   42e00:	9805      	ldr	r0, [sp, #20]
   42e02:	f7ff fb41 	bl	42488 <__sprint_r.part.0>
   42e06:	2800      	cmp	r0, #0
   42e08:	d157      	bne.n	42eba <_vfiprintf_r+0x9be>
   42e0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   42e0c:	46dc      	mov	ip, fp
   42e0e:	0770      	lsls	r0, r6, #29
   42e10:	d504      	bpl.n	42e1c <_vfiprintf_r+0x920>
   42e12:	9b01      	ldr	r3, [sp, #4]
   42e14:	1afc      	subs	r4, r7, r3
   42e16:	2c00      	cmp	r4, #0
   42e18:	f73f ade5 	bgt.w	429e6 <_vfiprintf_r+0x4ea>
   42e1c:	9b04      	ldr	r3, [sp, #16]
   42e1e:	9901      	ldr	r1, [sp, #4]
   42e20:	428f      	cmp	r7, r1
   42e22:	bfac      	ite	ge
   42e24:	19db      	addge	r3, r3, r7
   42e26:	185b      	addlt	r3, r3, r1
   42e28:	9304      	str	r3, [sp, #16]
   42e2a:	b132      	cbz	r2, 42e3a <_vfiprintf_r+0x93e>
   42e2c:	aa12      	add	r2, sp, #72	; 0x48
   42e2e:	9902      	ldr	r1, [sp, #8]
   42e30:	9805      	ldr	r0, [sp, #20]
   42e32:	f7ff fb29 	bl	42488 <__sprint_r.part.0>
   42e36:	2800      	cmp	r0, #0
   42e38:	d13f      	bne.n	42eba <_vfiprintf_r+0x9be>
   42e3a:	2300      	movs	r3, #0
   42e3c:	46d9      	mov	r9, fp
   42e3e:	9313      	str	r3, [sp, #76]	; 0x4c
   42e40:	f7ff bb97 	b.w	42572 <_vfiprintf_r+0x76>
   42e44:	2a00      	cmp	r2, #0
   42e46:	f040 8180 	bne.w	4314a <_vfiprintf_r+0xc4e>
   42e4a:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
   42e4e:	2900      	cmp	r1, #0
   42e50:	f000 80e2 	beq.w	43018 <_vfiprintf_r+0xb1c>
   42e54:	2201      	movs	r2, #1
   42e56:	f10d 0143 	add.w	r1, sp, #67	; 0x43
   42e5a:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   42e5e:	4610      	mov	r0, r2
   42e60:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
   42e64:	4601      	mov	r1, r0
   42e66:	46e1      	mov	r9, ip
   42e68:	3001      	adds	r0, #1
   42e6a:	f10c 0c08 	add.w	ip, ip, #8
   42e6e:	e762      	b.n	42d36 <_vfiprintf_r+0x83a>
   42e70:	aa11      	add	r2, sp, #68	; 0x44
   42e72:	2302      	movs	r3, #2
   42e74:	2001      	movs	r0, #1
   42e76:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   42e7a:	9215      	str	r2, [sp, #84]	; 0x54
   42e7c:	461a      	mov	r2, r3
   42e7e:	9316      	str	r3, [sp, #88]	; 0x58
   42e80:	4601      	mov	r1, r0
   42e82:	46e1      	mov	r9, ip
   42e84:	3001      	adds	r0, #1
   42e86:	f10c 0c08 	add.w	ip, ip, #8
   42e8a:	e553      	b.n	42934 <_vfiprintf_r+0x438>
   42e8c:	2a00      	cmp	r2, #0
   42e8e:	d17e      	bne.n	42f8e <_vfiprintf_r+0xa92>
   42e90:	9a03      	ldr	r2, [sp, #12]
   42e92:	2301      	movs	r3, #1
   42e94:	9909      	ldr	r1, [sp, #36]	; 0x24
   42e96:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   42e9a:	9216      	str	r2, [sp, #88]	; 0x58
   42e9c:	9115      	str	r1, [sp, #84]	; 0x54
   42e9e:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
   42ea2:	e7b4      	b.n	42e0e <_vfiprintf_r+0x912>
   42ea4:	ab3e      	add	r3, sp, #248	; 0xf8
   42ea6:	4690      	mov	r8, r2
   42ea8:	9203      	str	r2, [sp, #12]
   42eaa:	9309      	str	r3, [sp, #36]	; 0x24
   42eac:	e626      	b.n	42afc <_vfiprintf_r+0x600>
   42eae:	9b14      	ldr	r3, [sp, #80]	; 0x50
   42eb0:	2b00      	cmp	r3, #0
   42eb2:	f040 8194 	bne.w	431de <_vfiprintf_r+0xce2>
   42eb6:	2300      	movs	r3, #0
   42eb8:	9313      	str	r3, [sp, #76]	; 0x4c
   42eba:	9b02      	ldr	r3, [sp, #8]
   42ebc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   42ebe:	899b      	ldrh	r3, [r3, #12]
   42ec0:	07d1      	lsls	r1, r2, #31
   42ec2:	d402      	bmi.n	42eca <_vfiprintf_r+0x9ce>
   42ec4:	059a      	lsls	r2, r3, #22
   42ec6:	f140 8108 	bpl.w	430da <_vfiprintf_r+0xbde>
   42eca:	065b      	lsls	r3, r3, #25
   42ecc:	f53f ac20 	bmi.w	42710 <_vfiprintf_r+0x214>
   42ed0:	9804      	ldr	r0, [sp, #16]
   42ed2:	b03f      	add	sp, #252	; 0xfc
   42ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42ed8:	a93e      	add	r1, sp, #248	; 0xf8
   42eda:	e000      	b.n	42ede <_vfiprintf_r+0x9e2>
   42edc:	4611      	mov	r1, r2
   42ede:	08e2      	lsrs	r2, r4, #3
   42ee0:	f004 0307 	and.w	r3, r4, #7
   42ee4:	08e8      	lsrs	r0, r5, #3
   42ee6:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   42eea:	3330      	adds	r3, #48	; 0x30
   42eec:	4605      	mov	r5, r0
   42eee:	4614      	mov	r4, r2
   42ef0:	f801 3c01 	strb.w	r3, [r1, #-1]
   42ef4:	1e4a      	subs	r2, r1, #1
   42ef6:	ea54 0005 	orrs.w	r0, r4, r5
   42efa:	d1ef      	bne.n	42edc <_vfiprintf_r+0x9e0>
   42efc:	2b30      	cmp	r3, #48	; 0x30
   42efe:	9209      	str	r2, [sp, #36]	; 0x24
   42f00:	d00d      	beq.n	42f1e <_vfiprintf_r+0xa22>
   42f02:	9b01      	ldr	r3, [sp, #4]
   42f04:	07dd      	lsls	r5, r3, #31
   42f06:	d50a      	bpl.n	42f1e <_vfiprintf_r+0xa22>
   42f08:	3902      	subs	r1, #2
   42f0a:	9a03      	ldr	r2, [sp, #12]
   42f0c:	2330      	movs	r3, #48	; 0x30
   42f0e:	9e01      	ldr	r6, [sp, #4]
   42f10:	1a52      	subs	r2, r2, r1
   42f12:	9203      	str	r2, [sp, #12]
   42f14:	9a09      	ldr	r2, [sp, #36]	; 0x24
   42f16:	9109      	str	r1, [sp, #36]	; 0x24
   42f18:	f802 3c01 	strb.w	r3, [r2, #-1]
   42f1c:	e5ee      	b.n	42afc <_vfiprintf_r+0x600>
   42f1e:	9b03      	ldr	r3, [sp, #12]
   42f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
   42f22:	9e01      	ldr	r6, [sp, #4]
   42f24:	1a9b      	subs	r3, r3, r2
   42f26:	9303      	str	r3, [sp, #12]
   42f28:	e5e8      	b.n	42afc <_vfiprintf_r+0x600>
   42f2a:	4698      	mov	r8, r3
   42f2c:	ab3e      	add	r3, sp, #248	; 0xf8
   42f2e:	9309      	str	r3, [sp, #36]	; 0x24
   42f30:	e5e4      	b.n	42afc <_vfiprintf_r+0x600>
   42f32:	2d00      	cmp	r5, #0
   42f34:	bf08      	it	eq
   42f36:	2c0a      	cmpeq	r4, #10
   42f38:	d278      	bcs.n	4302c <_vfiprintf_r+0xb30>
   42f3a:	ab3e      	add	r3, sp, #248	; 0xf8
   42f3c:	3430      	adds	r4, #48	; 0x30
   42f3e:	2201      	movs	r2, #1
   42f40:	9e01      	ldr	r6, [sp, #4]
   42f42:	f803 4d01 	strb.w	r4, [r3, #-1]!
   42f46:	9203      	str	r2, [sp, #12]
   42f48:	9309      	str	r3, [sp, #36]	; 0x24
   42f4a:	e5d7      	b.n	42afc <_vfiprintf_r+0x600>
   42f4c:	aa12      	add	r2, sp, #72	; 0x48
   42f4e:	9902      	ldr	r1, [sp, #8]
   42f50:	9805      	ldr	r0, [sp, #20]
   42f52:	f7ff fa99 	bl	42488 <__sprint_r.part.0>
   42f56:	2800      	cmp	r0, #0
   42f58:	d1af      	bne.n	42eba <_vfiprintf_r+0x9be>
   42f5a:	46d9      	mov	r9, fp
   42f5c:	f7ff bb28 	b.w	425b0 <_vfiprintf_r+0xb4>
   42f60:	aa12      	add	r2, sp, #72	; 0x48
   42f62:	9902      	ldr	r1, [sp, #8]
   42f64:	9805      	ldr	r0, [sp, #20]
   42f66:	f7ff fa8f 	bl	42488 <__sprint_r.part.0>
   42f6a:	2800      	cmp	r0, #0
   42f6c:	d1a5      	bne.n	42eba <_vfiprintf_r+0x9be>
   42f6e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   42f70:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   42f74:	9a14      	ldr	r2, [sp, #80]	; 0x50
   42f76:	46d9      	mov	r9, fp
   42f78:	1c48      	adds	r0, r1, #1
   42f7a:	e4db      	b.n	42934 <_vfiprintf_r+0x438>
   42f7c:	2a00      	cmp	r2, #0
   42f7e:	f040 80d4 	bne.w	4312a <_vfiprintf_r+0xc2e>
   42f82:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   42f86:	2001      	movs	r0, #1
   42f88:	4611      	mov	r1, r2
   42f8a:	46d9      	mov	r9, fp
   42f8c:	e4d6      	b.n	4293c <_vfiprintf_r+0x440>
   42f8e:	aa12      	add	r2, sp, #72	; 0x48
   42f90:	9902      	ldr	r1, [sp, #8]
   42f92:	9805      	ldr	r0, [sp, #20]
   42f94:	f7ff fa78 	bl	42488 <__sprint_r.part.0>
   42f98:	2800      	cmp	r0, #0
   42f9a:	d18e      	bne.n	42eba <_vfiprintf_r+0x9be>
   42f9c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   42f9e:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   42fa2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   42fa4:	46d9      	mov	r9, fp
   42fa6:	3001      	adds	r0, #1
   42fa8:	e508      	b.n	429bc <_vfiprintf_r+0x4c0>
   42faa:	9d02      	ldr	r5, [sp, #8]
   42fac:	6da8      	ldr	r0, [r5, #88]	; 0x58
   42fae:	f001 fbe5 	bl	4477c <__retarget_lock_acquire_recursive>
   42fb2:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   42fb6:	b28a      	uxth	r2, r1
   42fb8:	f7ff bab7 	b.w	4252a <_vfiprintf_r+0x2e>
   42fbc:	05b0      	lsls	r0, r6, #22
   42fbe:	f100 80fc 	bmi.w	431ba <_vfiprintf_r+0xcbe>
   42fc2:	680c      	ldr	r4, [r1, #0]
   42fc4:	2500      	movs	r5, #0
   42fc6:	9206      	str	r2, [sp, #24]
   42fc8:	f7ff bbbc 	b.w	42744 <_vfiprintf_r+0x248>
   42fcc:	9a01      	ldr	r2, [sp, #4]
   42fce:	f412 7f00 	tst.w	r2, #512	; 0x200
   42fd2:	9a06      	ldr	r2, [sp, #24]
   42fd4:	f040 80e9 	bne.w	431aa <_vfiprintf_r+0xcae>
   42fd8:	6814      	ldr	r4, [r2, #0]
   42fda:	9306      	str	r3, [sp, #24]
   42fdc:	17e5      	asrs	r5, r4, #31
   42fde:	4622      	mov	r2, r4
   42fe0:	462b      	mov	r3, r5
   42fe2:	f7ff bbd0 	b.w	42786 <_vfiprintf_r+0x28a>
   42fe6:	05b1      	lsls	r1, r6, #22
   42fe8:	f100 80d3 	bmi.w	43192 <_vfiprintf_r+0xc96>
   42fec:	9b06      	ldr	r3, [sp, #24]
   42fee:	681c      	ldr	r4, [r3, #0]
   42ff0:	2500      	movs	r5, #0
   42ff2:	9601      	str	r6, [sp, #4]
   42ff4:	2301      	movs	r3, #1
   42ff6:	9206      	str	r2, [sp, #24]
   42ff8:	e559      	b.n	42aae <_vfiprintf_r+0x5b2>
   42ffa:	05b1      	lsls	r1, r6, #22
   42ffc:	f100 80d0 	bmi.w	431a0 <_vfiprintf_r+0xca4>
   43000:	6814      	ldr	r4, [r2, #0]
   43002:	2500      	movs	r5, #0
   43004:	9306      	str	r3, [sp, #24]
   43006:	f7ff bb6e 	b.w	426e6 <_vfiprintf_r+0x1ea>
   4300a:	9a04      	ldr	r2, [sp, #16]
   4300c:	4610      	mov	r0, r2
   4300e:	17d1      	asrs	r1, r2, #31
   43010:	e9c3 0100 	strd	r0, r1, [r3]
   43014:	f7ff baad 	b.w	42572 <_vfiprintf_r+0x76>
   43018:	9b08      	ldr	r3, [sp, #32]
   4301a:	2b00      	cmp	r3, #0
   4301c:	f47f af28 	bne.w	42e70 <_vfiprintf_r+0x974>
   43020:	4611      	mov	r1, r2
   43022:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   43026:	2001      	movs	r0, #1
   43028:	46d9      	mov	r9, fp
   4302a:	e487      	b.n	4293c <_vfiprintf_r+0x440>
   4302c:	9b01      	ldr	r3, [sp, #4]
   4302e:	2200      	movs	r2, #0
   43030:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   43034:	ae3e      	add	r6, sp, #248	; 0xf8
   43036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   4303a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   4303e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   43042:	4699      	mov	r9, r3
   43044:	e9cd 7807 	strd	r7, r8, [sp, #28]
   43048:	4617      	mov	r7, r2
   4304a:	220a      	movs	r2, #10
   4304c:	2300      	movs	r3, #0
   4304e:	4620      	mov	r0, r4
   43050:	4629      	mov	r1, r5
   43052:	f7d5 feb3 	bl	18dbc <__aeabi_uldivmod>
   43056:	3230      	adds	r2, #48	; 0x30
   43058:	3701      	adds	r7, #1
   4305a:	f106 38ff 	add.w	r8, r6, #4294967295
   4305e:	f806 2c01 	strb.w	r2, [r6, #-1]
   43062:	f1b9 0f00 	cmp.w	r9, #0
   43066:	d010      	beq.n	4308a <_vfiprintf_r+0xb8e>
   43068:	2d00      	cmp	r5, #0
   4306a:	f89a 2000 	ldrb.w	r2, [sl]
   4306e:	bf08      	it	eq
   43070:	2c0a      	cmpeq	r4, #10
   43072:	bf2c      	ite	cs
   43074:	2301      	movcs	r3, #1
   43076:	2300      	movcc	r3, #0
   43078:	2aff      	cmp	r2, #255	; 0xff
   4307a:	bf0c      	ite	eq
   4307c:	2300      	moveq	r3, #0
   4307e:	f003 0301 	andne.w	r3, r3, #1
   43082:	b113      	cbz	r3, 4308a <_vfiprintf_r+0xb8e>
   43084:	42ba      	cmp	r2, r7
   43086:	f000 80b3 	beq.w	431f0 <_vfiprintf_r+0xcf4>
   4308a:	4620      	mov	r0, r4
   4308c:	4629      	mov	r1, r5
   4308e:	2300      	movs	r3, #0
   43090:	220a      	movs	r2, #10
   43092:	f7d5 fe93 	bl	18dbc <__aeabi_uldivmod>
   43096:	4604      	mov	r4, r0
   43098:	460d      	mov	r5, r1
   4309a:	4646      	mov	r6, r8
   4309c:	ea54 0305 	orrs.w	r3, r4, r5
   430a0:	d1d3      	bne.n	4304a <_vfiprintf_r+0xb4e>
   430a2:	9b03      	ldr	r3, [sp, #12]
   430a4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   430a8:	1b9b      	subs	r3, r3, r6
   430aa:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   430ae:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   430b2:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
   430b6:	9303      	str	r3, [sp, #12]
   430b8:	9e01      	ldr	r6, [sp, #4]
   430ba:	e9dd 7807 	ldrd	r7, r8, [sp, #28]
   430be:	e51d      	b.n	42afc <_vfiprintf_r+0x600>
   430c0:	427f      	negs	r7, r7
   430c2:	9206      	str	r2, [sp, #24]
   430c4:	e589      	b.n	42bda <_vfiprintf_r+0x6de>
   430c6:	aa12      	add	r2, sp, #72	; 0x48
   430c8:	9902      	ldr	r1, [sp, #8]
   430ca:	9805      	ldr	r0, [sp, #20]
   430cc:	f7ff f9dc 	bl	42488 <__sprint_r.part.0>
   430d0:	2800      	cmp	r0, #0
   430d2:	f47f aef2 	bne.w	42eba <_vfiprintf_r+0x9be>
   430d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   430d8:	e6a0      	b.n	42e1c <_vfiprintf_r+0x920>
   430da:	9c02      	ldr	r4, [sp, #8]
   430dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   430de:	f001 fb4f 	bl	44780 <__retarget_lock_release_recursive>
   430e2:	89a3      	ldrh	r3, [r4, #12]
   430e4:	e6f1      	b.n	42eca <_vfiprintf_r+0x9ce>
   430e6:	f89a 3001 	ldrb.w	r3, [sl, #1]
   430ea:	f046 0620 	orr.w	r6, r6, #32
   430ee:	f10a 0a01 	add.w	sl, sl, #1
   430f2:	f7ff ba70 	b.w	425d6 <_vfiprintf_r+0xda>
   430f6:	f89a 3001 	ldrb.w	r3, [sl, #1]
   430fa:	f446 7600 	orr.w	r6, r6, #512	; 0x200
   430fe:	f10a 0a01 	add.w	sl, sl, #1
   43102:	f7ff ba68 	b.w	425d6 <_vfiprintf_r+0xda>
   43106:	f04f 33ff 	mov.w	r3, #4294967295
   4310a:	6d90      	ldr	r0, [r2, #88]	; 0x58
   4310c:	9304      	str	r3, [sp, #16]
   4310e:	f001 fb37 	bl	44780 <__retarget_lock_release_recursive>
   43112:	e6dd      	b.n	42ed0 <_vfiprintf_r+0x9d4>
   43114:	4643      	mov	r3, r8
   43116:	4a44      	ldr	r2, [pc, #272]	; (43228 <_vfiprintf_r+0xd2c>)
   43118:	9406      	str	r4, [sp, #24]
   4311a:	2b06      	cmp	r3, #6
   4311c:	9209      	str	r2, [sp, #36]	; 0x24
   4311e:	bf28      	it	cs
   43120:	2306      	movcs	r3, #6
   43122:	9303      	str	r3, [sp, #12]
   43124:	9301      	str	r3, [sp, #4]
   43126:	f7ff bb93 	b.w	42850 <_vfiprintf_r+0x354>
   4312a:	aa12      	add	r2, sp, #72	; 0x48
   4312c:	9902      	ldr	r1, [sp, #8]
   4312e:	9805      	ldr	r0, [sp, #20]
   43130:	f7ff f9aa 	bl	42488 <__sprint_r.part.0>
   43134:	2800      	cmp	r0, #0
   43136:	f47f aec0 	bne.w	42eba <_vfiprintf_r+0x9be>
   4313a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   4313c:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   43140:	9a14      	ldr	r2, [sp, #80]	; 0x50
   43142:	46d9      	mov	r9, fp
   43144:	1c48      	adds	r0, r1, #1
   43146:	f7ff bbf9 	b.w	4293c <_vfiprintf_r+0x440>
   4314a:	aa12      	add	r2, sp, #72	; 0x48
   4314c:	9902      	ldr	r1, [sp, #8]
   4314e:	9805      	ldr	r0, [sp, #20]
   43150:	f7ff f99a 	bl	42488 <__sprint_r.part.0>
   43154:	2800      	cmp	r0, #0
   43156:	f47f aeb0 	bne.w	42eba <_vfiprintf_r+0x9be>
   4315a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   4315c:	46d9      	mov	r9, fp
   4315e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   43160:	1c48      	adds	r0, r1, #1
   43162:	f7ff bbc9 	b.w	428f8 <_vfiprintf_r+0x3fc>
   43166:	4663      	mov	r3, ip
   43168:	4d30      	ldr	r5, [pc, #192]	; (4322c <_vfiprintf_r+0xd30>)
   4316a:	e41b      	b.n	429a4 <_vfiprintf_r+0x4a8>
   4316c:	9a04      	ldr	r2, [sp, #16]
   4316e:	601a      	str	r2, [r3, #0]
   43170:	f7ff b9ff 	b.w	42572 <_vfiprintf_r+0x76>
   43174:	9809      	ldr	r0, [sp, #36]	; 0x24
   43176:	f04f 0800 	mov.w	r8, #0
   4317a:	9406      	str	r4, [sp, #24]
   4317c:	f7fd fa02 	bl	40584 <strlen>
   43180:	9003      	str	r0, [sp, #12]
   43182:	e4bb      	b.n	42afc <_vfiprintf_r+0x600>
   43184:	46e6      	mov	lr, ip
   43186:	4d2a      	ldr	r5, [pc, #168]	; (43230 <_vfiprintf_r+0xd34>)
   43188:	f7ff bba8 	b.w	428dc <_vfiprintf_r+0x3e0>
   4318c:	1c48      	adds	r0, r1, #1
   4318e:	4d28      	ldr	r5, [pc, #160]	; (43230 <_vfiprintf_r+0xd34>)
   43190:	e460      	b.n	42a54 <_vfiprintf_r+0x558>
   43192:	9b06      	ldr	r3, [sp, #24]
   43194:	2500      	movs	r5, #0
   43196:	9601      	str	r6, [sp, #4]
   43198:	781c      	ldrb	r4, [r3, #0]
   4319a:	2301      	movs	r3, #1
   4319c:	9206      	str	r2, [sp, #24]
   4319e:	e486      	b.n	42aae <_vfiprintf_r+0x5b2>
   431a0:	7814      	ldrb	r4, [r2, #0]
   431a2:	2500      	movs	r5, #0
   431a4:	9306      	str	r3, [sp, #24]
   431a6:	f7ff ba9e 	b.w	426e6 <_vfiprintf_r+0x1ea>
   431aa:	f992 4000 	ldrsb.w	r4, [r2]
   431ae:	9306      	str	r3, [sp, #24]
   431b0:	17e5      	asrs	r5, r4, #31
   431b2:	4622      	mov	r2, r4
   431b4:	462b      	mov	r3, r5
   431b6:	f7ff bae6 	b.w	42786 <_vfiprintf_r+0x28a>
   431ba:	780c      	ldrb	r4, [r1, #0]
   431bc:	2500      	movs	r5, #0
   431be:	9206      	str	r2, [sp, #24]
   431c0:	f7ff bac0 	b.w	42744 <_vfiprintf_r+0x248>
   431c4:	9a04      	ldr	r2, [sp, #16]
   431c6:	801a      	strh	r2, [r3, #0]
   431c8:	f7ff b9d3 	b.w	42572 <_vfiprintf_r+0x76>
   431cc:	4663      	mov	r3, ip
   431ce:	4d17      	ldr	r5, [pc, #92]	; (4322c <_vfiprintf_r+0xd30>)
   431d0:	4684      	mov	ip, r0
   431d2:	e603      	b.n	42ddc <_vfiprintf_r+0x8e0>
   431d4:	f8cd 800c 	str.w	r8, [sp, #12]
   431d8:	4680      	mov	r8, r0
   431da:	9406      	str	r4, [sp, #24]
   431dc:	e48e      	b.n	42afc <_vfiprintf_r+0x600>
   431de:	9805      	ldr	r0, [sp, #20]
   431e0:	aa12      	add	r2, sp, #72	; 0x48
   431e2:	9902      	ldr	r1, [sp, #8]
   431e4:	f7ff f950 	bl	42488 <__sprint_r.part.0>
   431e8:	2800      	cmp	r0, #0
   431ea:	f43f ae64 	beq.w	42eb6 <_vfiprintf_r+0x9ba>
   431ee:	e664      	b.n	42eba <_vfiprintf_r+0x9be>
   431f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   431f2:	2700      	movs	r7, #0
   431f4:	990d      	ldr	r1, [sp, #52]	; 0x34
   431f6:	eba8 0802 	sub.w	r8, r8, r2
   431fa:	4640      	mov	r0, r8
   431fc:	f7fd fa36 	bl	4066c <strncpy>
   43200:	f89a 3001 	ldrb.w	r3, [sl, #1]
   43204:	b113      	cbz	r3, 4320c <_vfiprintf_r+0xd10>
   43206:	f10a 0a01 	add.w	sl, sl, #1
   4320a:	e73e      	b.n	4308a <_vfiprintf_r+0xb8e>
   4320c:	461f      	mov	r7, r3
   4320e:	e73c      	b.n	4308a <_vfiprintf_r+0xb8e>
   43210:	9b06      	ldr	r3, [sp, #24]
   43212:	681a      	ldr	r2, [r3, #0]
   43214:	3304      	adds	r3, #4
   43216:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
   4321a:	9306      	str	r3, [sp, #24]
   4321c:	f89a 3001 	ldrb.w	r3, [sl, #1]
   43220:	468a      	mov	sl, r1
   43222:	f7ff b9d8 	b.w	425d6 <_vfiprintf_r+0xda>
   43226:	bf00      	nop
   43228:	0004ae34 	.word	0x0004ae34
   4322c:	0004ae9c 	.word	0x0004ae9c
   43230:	0004ae8c 	.word	0x0004ae8c

00043234 <__sbprintf>:
   43234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   43238:	460c      	mov	r4, r1
   4323a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   4323e:	4699      	mov	r9, r3
   43240:	2500      	movs	r5, #0
   43242:	89e3      	ldrh	r3, [r4, #14]
   43244:	4607      	mov	r7, r0
   43246:	8989      	ldrh	r1, [r1, #12]
   43248:	ae1a      	add	r6, sp, #104	; 0x68
   4324a:	f8ad 300e 	strh.w	r3, [sp, #14]
   4324e:	4690      	mov	r8, r2
   43250:	69e3      	ldr	r3, [r4, #28]
   43252:	f021 0102 	bic.w	r1, r1, #2
   43256:	6e62      	ldr	r2, [r4, #100]	; 0x64
   43258:	a816      	add	r0, sp, #88	; 0x58
   4325a:	9506      	str	r5, [sp, #24]
   4325c:	f44f 6580 	mov.w	r5, #1024	; 0x400
   43260:	9307      	str	r3, [sp, #28]
   43262:	6a63      	ldr	r3, [r4, #36]	; 0x24
   43264:	f8ad 100c 	strh.w	r1, [sp, #12]
   43268:	9219      	str	r2, [sp, #100]	; 0x64
   4326a:	9502      	str	r5, [sp, #8]
   4326c:	9309      	str	r3, [sp, #36]	; 0x24
   4326e:	9505      	str	r5, [sp, #20]
   43270:	9600      	str	r6, [sp, #0]
   43272:	9604      	str	r6, [sp, #16]
   43274:	f001 fa7e 	bl	44774 <__retarget_lock_init_recursive>
   43278:	464b      	mov	r3, r9
   4327a:	4642      	mov	r2, r8
   4327c:	4669      	mov	r1, sp
   4327e:	4638      	mov	r0, r7
   43280:	f7ff f93c 	bl	424fc <_vfiprintf_r>
   43284:	1e05      	subs	r5, r0, #0
   43286:	db07      	blt.n	43298 <__sbprintf+0x64>
   43288:	4638      	mov	r0, r7
   4328a:	4669      	mov	r1, sp
   4328c:	f000 fa82 	bl	43794 <_fflush_r>
   43290:	2800      	cmp	r0, #0
   43292:	bf18      	it	ne
   43294:	f04f 35ff 	movne.w	r5, #4294967295
   43298:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   4329c:	065b      	lsls	r3, r3, #25
   4329e:	d503      	bpl.n	432a8 <__sbprintf+0x74>
   432a0:	89a3      	ldrh	r3, [r4, #12]
   432a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   432a6:	81a3      	strh	r3, [r4, #12]
   432a8:	9816      	ldr	r0, [sp, #88]	; 0x58
   432aa:	f001 fa65 	bl	44778 <__retarget_lock_close_recursive>
   432ae:	4628      	mov	r0, r5
   432b0:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   432b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000432b8 <_vsnprintf_r>:
   432b8:	b570      	push	{r4, r5, r6, lr}
   432ba:	1e14      	subs	r4, r2, #0
   432bc:	b09a      	sub	sp, #104	; 0x68
   432be:	4605      	mov	r5, r0
   432c0:	db2c      	blt.n	4331c <_vsnprintf_r+0x64>
   432c2:	461a      	mov	r2, r3
   432c4:	f44f 7302 	mov.w	r3, #520	; 0x208
   432c8:	9100      	str	r1, [sp, #0]
   432ca:	9104      	str	r1, [sp, #16]
   432cc:	f8ad 300c 	strh.w	r3, [sp, #12]
   432d0:	d013      	beq.n	432fa <_vsnprintf_r+0x42>
   432d2:	3c01      	subs	r4, #1
   432d4:	f64f 76ff 	movw	r6, #65535	; 0xffff
   432d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   432da:	4669      	mov	r1, sp
   432dc:	9402      	str	r4, [sp, #8]
   432de:	9405      	str	r4, [sp, #20]
   432e0:	f8ad 600e 	strh.w	r6, [sp, #14]
   432e4:	f7d8 faec 	bl	1b8c0 <_svfprintf_r>
   432e8:	1c42      	adds	r2, r0, #1
   432ea:	da01      	bge.n	432f0 <_vsnprintf_r+0x38>
   432ec:	238b      	movs	r3, #139	; 0x8b
   432ee:	602b      	str	r3, [r5, #0]
   432f0:	9b00      	ldr	r3, [sp, #0]
   432f2:	2200      	movs	r2, #0
   432f4:	701a      	strb	r2, [r3, #0]
   432f6:	b01a      	add	sp, #104	; 0x68
   432f8:	bd70      	pop	{r4, r5, r6, pc}
   432fa:	f64f 76ff 	movw	r6, #65535	; 0xffff
   432fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   43300:	4669      	mov	r1, sp
   43302:	9402      	str	r4, [sp, #8]
   43304:	9405      	str	r4, [sp, #20]
   43306:	f8ad 600e 	strh.w	r6, [sp, #14]
   4330a:	f7d8 fad9 	bl	1b8c0 <_svfprintf_r>
   4330e:	1c43      	adds	r3, r0, #1
   43310:	db01      	blt.n	43316 <_vsnprintf_r+0x5e>
   43312:	b01a      	add	sp, #104	; 0x68
   43314:	bd70      	pop	{r4, r5, r6, pc}
   43316:	238b      	movs	r3, #139	; 0x8b
   43318:	602b      	str	r3, [r5, #0]
   4331a:	e7fa      	b.n	43312 <_vsnprintf_r+0x5a>
   4331c:	238b      	movs	r3, #139	; 0x8b
   4331e:	f04f 30ff 	mov.w	r0, #4294967295
   43322:	602b      	str	r3, [r5, #0]
   43324:	e7f5      	b.n	43312 <_vsnprintf_r+0x5a>
   43326:	bf00      	nop

00043328 <vsnprintf>:
   43328:	b510      	push	{r4, lr}
   4332a:	4c06      	ldr	r4, [pc, #24]	; (43344 <vsnprintf+0x1c>)
   4332c:	b082      	sub	sp, #8
   4332e:	9300      	str	r3, [sp, #0]
   43330:	4613      	mov	r3, r2
   43332:	6824      	ldr	r4, [r4, #0]
   43334:	460a      	mov	r2, r1
   43336:	4601      	mov	r1, r0
   43338:	4620      	mov	r0, r4
   4333a:	f7ff ffbd 	bl	432b8 <_vsnprintf_r>
   4333e:	b002      	add	sp, #8
   43340:	bd10      	pop	{r4, pc}
   43342:	bf00      	nop
   43344:	20031c24 	.word	0x20031c24

00043348 <_vsprintf_r>:
   43348:	b570      	push	{r4, r5, r6, lr}
   4334a:	b09a      	sub	sp, #104	; 0x68
   4334c:	460d      	mov	r5, r1
   4334e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   43352:	4e07      	ldr	r6, [pc, #28]	; (43370 <_vsprintf_r+0x28>)
   43354:	4669      	mov	r1, sp
   43356:	9500      	str	r5, [sp, #0]
   43358:	e9cd 5404 	strd	r5, r4, [sp, #16]
   4335c:	e9cd 4602 	strd	r4, r6, [sp, #8]
   43360:	f7d8 faae 	bl	1b8c0 <_svfprintf_r>
   43364:	9b00      	ldr	r3, [sp, #0]
   43366:	2200      	movs	r2, #0
   43368:	701a      	strb	r2, [r3, #0]
   4336a:	b01a      	add	sp, #104	; 0x68
   4336c:	bd70      	pop	{r4, r5, r6, pc}
   4336e:	bf00      	nop
   43370:	ffff0208 	.word	0xffff0208

00043374 <vsprintf>:
   43374:	b410      	push	{r4}
   43376:	4c04      	ldr	r4, [pc, #16]	; (43388 <vsprintf+0x14>)
   43378:	4613      	mov	r3, r2
   4337a:	460a      	mov	r2, r1
   4337c:	4601      	mov	r1, r0
   4337e:	6820      	ldr	r0, [r4, #0]
   43380:	f85d 4b04 	ldr.w	r4, [sp], #4
   43384:	f7ff bfe0 	b.w	43348 <_vsprintf_r>
   43388:	20031c24 	.word	0x20031c24

0004338c <__ascii_wctomb>:
   4338c:	b119      	cbz	r1, 43396 <__ascii_wctomb+0xa>
   4338e:	2aff      	cmp	r2, #255	; 0xff
   43390:	d803      	bhi.n	4339a <__ascii_wctomb+0xe>
   43392:	700a      	strb	r2, [r1, #0]
   43394:	2101      	movs	r1, #1
   43396:	4608      	mov	r0, r1
   43398:	4770      	bx	lr
   4339a:	238a      	movs	r3, #138	; 0x8a
   4339c:	f04f 31ff 	mov.w	r1, #4294967295
   433a0:	6003      	str	r3, [r0, #0]
   433a2:	e7f8      	b.n	43396 <__ascii_wctomb+0xa>

000433a4 <_write_r>:
   433a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   433a6:	460e      	mov	r6, r1
   433a8:	4c08      	ldr	r4, [pc, #32]	; (433cc <_write_r+0x28>)
   433aa:	2500      	movs	r5, #0
   433ac:	4611      	mov	r1, r2
   433ae:	4607      	mov	r7, r0
   433b0:	461a      	mov	r2, r3
   433b2:	4630      	mov	r0, r6
   433b4:	6025      	str	r5, [r4, #0]
   433b6:	f003 fb71 	bl	46a9c <_write>
   433ba:	1c43      	adds	r3, r0, #1
   433bc:	d000      	beq.n	433c0 <_write_r+0x1c>
   433be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   433c0:	6823      	ldr	r3, [r4, #0]
   433c2:	2b00      	cmp	r3, #0
   433c4:	d0fb      	beq.n	433be <_write_r+0x1a>
   433c6:	603b      	str	r3, [r7, #0]
   433c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   433ca:	bf00      	nop
   433cc:	2002c4ec 	.word	0x2002c4ec

000433d0 <__swsetup_r>:
   433d0:	b538      	push	{r3, r4, r5, lr}
   433d2:	4b31      	ldr	r3, [pc, #196]	; (43498 <__swsetup_r+0xc8>)
   433d4:	4605      	mov	r5, r0
   433d6:	460c      	mov	r4, r1
   433d8:	6818      	ldr	r0, [r3, #0]
   433da:	b110      	cbz	r0, 433e2 <__swsetup_r+0x12>
   433dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   433de:	2b00      	cmp	r3, #0
   433e0:	d03a      	beq.n	43458 <__swsetup_r+0x88>
   433e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   433e6:	b293      	uxth	r3, r2
   433e8:	0718      	lsls	r0, r3, #28
   433ea:	d50c      	bpl.n	43406 <__swsetup_r+0x36>
   433ec:	6920      	ldr	r0, [r4, #16]
   433ee:	b1a8      	cbz	r0, 4341c <__swsetup_r+0x4c>
   433f0:	f013 0201 	ands.w	r2, r3, #1
   433f4:	d020      	beq.n	43438 <__swsetup_r+0x68>
   433f6:	6963      	ldr	r3, [r4, #20]
   433f8:	2200      	movs	r2, #0
   433fa:	425b      	negs	r3, r3
   433fc:	60a2      	str	r2, [r4, #8]
   433fe:	61a3      	str	r3, [r4, #24]
   43400:	b300      	cbz	r0, 43444 <__swsetup_r+0x74>
   43402:	2000      	movs	r0, #0
   43404:	bd38      	pop	{r3, r4, r5, pc}
   43406:	06d9      	lsls	r1, r3, #27
   43408:	d53d      	bpl.n	43486 <__swsetup_r+0xb6>
   4340a:	0758      	lsls	r0, r3, #29
   4340c:	d427      	bmi.n	4345e <__swsetup_r+0x8e>
   4340e:	6920      	ldr	r0, [r4, #16]
   43410:	f042 0208 	orr.w	r2, r2, #8
   43414:	b293      	uxth	r3, r2
   43416:	81a2      	strh	r2, [r4, #12]
   43418:	2800      	cmp	r0, #0
   4341a:	d1e9      	bne.n	433f0 <__swsetup_r+0x20>
   4341c:	f403 7220 	and.w	r2, r3, #640	; 0x280
   43420:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   43424:	d0e4      	beq.n	433f0 <__swsetup_r+0x20>
   43426:	4628      	mov	r0, r5
   43428:	4621      	mov	r1, r4
   4342a:	f001 f9ef 	bl	4480c <__smakebuf_r>
   4342e:	89a3      	ldrh	r3, [r4, #12]
   43430:	6920      	ldr	r0, [r4, #16]
   43432:	f013 0201 	ands.w	r2, r3, #1
   43436:	d1de      	bne.n	433f6 <__swsetup_r+0x26>
   43438:	0799      	lsls	r1, r3, #30
   4343a:	bf58      	it	pl
   4343c:	6962      	ldrpl	r2, [r4, #20]
   4343e:	60a2      	str	r2, [r4, #8]
   43440:	2800      	cmp	r0, #0
   43442:	d1de      	bne.n	43402 <__swsetup_r+0x32>
   43444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   43448:	061a      	lsls	r2, r3, #24
   4344a:	d5db      	bpl.n	43404 <__swsetup_r+0x34>
   4344c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   43450:	f04f 30ff 	mov.w	r0, #4294967295
   43454:	81a3      	strh	r3, [r4, #12]
   43456:	bd38      	pop	{r3, r4, r5, pc}
   43458:	f000 f9f8 	bl	4384c <__sinit>
   4345c:	e7c1      	b.n	433e2 <__swsetup_r+0x12>
   4345e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   43460:	b151      	cbz	r1, 43478 <__swsetup_r+0xa8>
   43462:	f104 0340 	add.w	r3, r4, #64	; 0x40
   43466:	4299      	cmp	r1, r3
   43468:	d004      	beq.n	43474 <__swsetup_r+0xa4>
   4346a:	4628      	mov	r0, r5
   4346c:	f000 fafc 	bl	43a68 <_free_r>
   43470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   43474:	2300      	movs	r3, #0
   43476:	6323      	str	r3, [r4, #48]	; 0x30
   43478:	2300      	movs	r3, #0
   4347a:	6920      	ldr	r0, [r4, #16]
   4347c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   43480:	e9c4 0300 	strd	r0, r3, [r4]
   43484:	e7c4      	b.n	43410 <__swsetup_r+0x40>
   43486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   4348a:	2309      	movs	r3, #9
   4348c:	f04f 30ff 	mov.w	r0, #4294967295
   43490:	602b      	str	r3, [r5, #0]
   43492:	81a2      	strh	r2, [r4, #12]
   43494:	bd38      	pop	{r3, r4, r5, pc}
   43496:	bf00      	nop
   43498:	20031c24 	.word	0x20031c24

0004349c <abort>:
   4349c:	b508      	push	{r3, lr}
   4349e:	2006      	movs	r0, #6
   434a0:	f001 ffb4 	bl	4540c <raise>
   434a4:	2001      	movs	r0, #1
   434a6:	f7df ffbf 	bl	23428 <_exit>
   434aa:	bf00      	nop

000434ac <__chk_fail>:
   434ac:	b500      	push	{lr}
   434ae:	4d0c      	ldr	r5, [pc, #48]	; (434e0 <__chk_fail+0x34>)
   434b0:	b08d      	sub	sp, #52	; 0x34
   434b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   434b4:	466c      	mov	r4, sp
   434b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   434b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   434ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   434bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   434c0:	c407      	stmia	r4!, {r0, r1, r2}
   434c2:	4668      	mov	r0, sp
   434c4:	8023      	strh	r3, [r4, #0]
   434c6:	f7fd f85d 	bl	40584 <strlen>
   434ca:	4669      	mov	r1, sp
   434cc:	4602      	mov	r2, r0
   434ce:	2002      	movs	r0, #2
   434d0:	f003 fae4 	bl	46a9c <_write>
   434d4:	2006      	movs	r0, #6
   434d6:	f001 ff99 	bl	4540c <raise>
   434da:	207f      	movs	r0, #127	; 0x7f
   434dc:	f7df ffa4 	bl	23428 <_exit>
   434e0:	0004aeac 	.word	0x0004aeac

000434e4 <_close_r>:
   434e4:	b538      	push	{r3, r4, r5, lr}
   434e6:	2300      	movs	r3, #0
   434e8:	4c06      	ldr	r4, [pc, #24]	; (43504 <_close_r+0x20>)
   434ea:	4605      	mov	r5, r0
   434ec:	4608      	mov	r0, r1
   434ee:	6023      	str	r3, [r4, #0]
   434f0:	f003 fad8 	bl	46aa4 <_close>
   434f4:	1c43      	adds	r3, r0, #1
   434f6:	d000      	beq.n	434fa <_close_r+0x16>
   434f8:	bd38      	pop	{r3, r4, r5, pc}
   434fa:	6823      	ldr	r3, [r4, #0]
   434fc:	2b00      	cmp	r3, #0
   434fe:	d0fb      	beq.n	434f8 <_close_r+0x14>
   43500:	602b      	str	r3, [r5, #0]
   43502:	bd38      	pop	{r3, r4, r5, pc}
   43504:	2002c4ec 	.word	0x2002c4ec

00043508 <quorem>:
   43508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4350c:	6903      	ldr	r3, [r0, #16]
   4350e:	b085      	sub	sp, #20
   43510:	690e      	ldr	r6, [r1, #16]
   43512:	9101      	str	r1, [sp, #4]
   43514:	42b3      	cmp	r3, r6
   43516:	f2c0 808f 	blt.w	43638 <quorem+0x130>
   4351a:	3e01      	subs	r6, #1
   4351c:	f101 0814 	add.w	r8, r1, #20
   43520:	f100 0914 	add.w	r9, r0, #20
   43524:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
   43528:	00b2      	lsls	r2, r6, #2
   4352a:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
   4352e:	3301      	adds	r3, #1
   43530:	9202      	str	r2, [sp, #8]
   43532:	eb08 0a02 	add.w	sl, r8, r2
   43536:	444a      	add	r2, r9
   43538:	fbb7 f7f3 	udiv	r7, r7, r3
   4353c:	9203      	str	r2, [sp, #12]
   4353e:	2f00      	cmp	r7, #0
   43540:	d03e      	beq.n	435c0 <quorem+0xb8>
   43542:	2400      	movs	r4, #0
   43544:	46c6      	mov	lr, r8
   43546:	46cc      	mov	ip, r9
   43548:	46a3      	mov	fp, r4
   4354a:	f85e 3b04 	ldr.w	r3, [lr], #4
   4354e:	f8dc 1000 	ldr.w	r1, [ip]
   43552:	b29a      	uxth	r2, r3
   43554:	45f2      	cmp	sl, lr
   43556:	ea4f 4313 	mov.w	r3, r3, lsr #16
   4355a:	fb07 4202 	mla	r2, r7, r2, r4
   4355e:	b28d      	uxth	r5, r1
   43560:	ea4f 4412 	mov.w	r4, r2, lsr #16
   43564:	b292      	uxth	r2, r2
   43566:	fb07 4403 	mla	r4, r7, r3, r4
   4356a:	ebab 0302 	sub.w	r3, fp, r2
   4356e:	fa1f fb84 	uxth.w	fp, r4
   43572:	442b      	add	r3, r5
   43574:	ea4f 4414 	mov.w	r4, r4, lsr #16
   43578:	ebcb 4b11 	rsb	fp, fp, r1, lsr #16
   4357c:	b29a      	uxth	r2, r3
   4357e:	eb0b 4b23 	add.w	fp, fp, r3, asr #16
   43582:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
   43586:	ea4f 4b2b 	mov.w	fp, fp, asr #16
   4358a:	f84c 2b04 	str.w	r2, [ip], #4
   4358e:	d2dc      	bcs.n	4354a <quorem+0x42>
   43590:	9b02      	ldr	r3, [sp, #8]
   43592:	f859 3003 	ldr.w	r3, [r9, r3]
   43596:	b99b      	cbnz	r3, 435c0 <quorem+0xb8>
   43598:	9a03      	ldr	r2, [sp, #12]
   4359a:	1f13      	subs	r3, r2, #4
   4359c:	4599      	cmp	r9, r3
   4359e:	d20e      	bcs.n	435be <quorem+0xb6>
   435a0:	f852 3c04 	ldr.w	r3, [r2, #-4]
   435a4:	b95b      	cbnz	r3, 435be <quorem+0xb6>
   435a6:	f1a2 0308 	sub.w	r3, r2, #8
   435aa:	e001      	b.n	435b0 <quorem+0xa8>
   435ac:	6812      	ldr	r2, [r2, #0]
   435ae:	b932      	cbnz	r2, 435be <quorem+0xb6>
   435b0:	4599      	cmp	r9, r3
   435b2:	461a      	mov	r2, r3
   435b4:	f106 36ff 	add.w	r6, r6, #4294967295
   435b8:	f1a3 0304 	sub.w	r3, r3, #4
   435bc:	d3f6      	bcc.n	435ac <quorem+0xa4>
   435be:	6106      	str	r6, [r0, #16]
   435c0:	9901      	ldr	r1, [sp, #4]
   435c2:	4604      	mov	r4, r0
   435c4:	f001 fc68 	bl	44e98 <__mcmp>
   435c8:	2800      	cmp	r0, #0
   435ca:	db31      	blt.n	43630 <quorem+0x128>
   435cc:	2000      	movs	r0, #0
   435ce:	3701      	adds	r7, #1
   435d0:	464d      	mov	r5, r9
   435d2:	4684      	mov	ip, r0
   435d4:	f858 3b04 	ldr.w	r3, [r8], #4
   435d8:	682a      	ldr	r2, [r5, #0]
   435da:	b298      	uxth	r0, r3
   435dc:	45c2      	cmp	sl, r8
   435de:	b291      	uxth	r1, r2
   435e0:	ebac 0000 	sub.w	r0, ip, r0
   435e4:	ea4f 4313 	mov.w	r3, r3, lsr #16
   435e8:	4408      	add	r0, r1
   435ea:	ebc3 4312 	rsb	r3, r3, r2, lsr #16
   435ee:	eb03 4220 	add.w	r2, r3, r0, asr #16
   435f2:	b283      	uxth	r3, r0
   435f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
   435f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   435fc:	f845 3b04 	str.w	r3, [r5], #4
   43600:	d2e8      	bcs.n	435d4 <quorem+0xcc>
   43602:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
   43606:	eb09 0386 	add.w	r3, r9, r6, lsl #2
   4360a:	b98a      	cbnz	r2, 43630 <quorem+0x128>
   4360c:	1f1a      	subs	r2, r3, #4
   4360e:	4591      	cmp	r9, r2
   43610:	d20d      	bcs.n	4362e <quorem+0x126>
   43612:	f853 2c04 	ldr.w	r2, [r3, #-4]
   43616:	b952      	cbnz	r2, 4362e <quorem+0x126>
   43618:	3b08      	subs	r3, #8
   4361a:	e001      	b.n	43620 <quorem+0x118>
   4361c:	6812      	ldr	r2, [r2, #0]
   4361e:	b932      	cbnz	r2, 4362e <quorem+0x126>
   43620:	4599      	cmp	r9, r3
   43622:	461a      	mov	r2, r3
   43624:	f106 36ff 	add.w	r6, r6, #4294967295
   43628:	f1a3 0304 	sub.w	r3, r3, #4
   4362c:	d3f6      	bcc.n	4361c <quorem+0x114>
   4362e:	6126      	str	r6, [r4, #16]
   43630:	4638      	mov	r0, r7
   43632:	b005      	add	sp, #20
   43634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43638:	2000      	movs	r0, #0
   4363a:	b005      	add	sp, #20
   4363c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00043640 <__sflush_r>:
   43640:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   43644:	b29a      	uxth	r2, r3
   43646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4364a:	460c      	mov	r4, r1
   4364c:	0711      	lsls	r1, r2, #28
   4364e:	4680      	mov	r8, r0
   43650:	d444      	bmi.n	436dc <__sflush_r+0x9c>
   43652:	6862      	ldr	r2, [r4, #4]
   43654:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   43658:	2a00      	cmp	r2, #0
   4365a:	81a3      	strh	r3, [r4, #12]
   4365c:	dd59      	ble.n	43712 <__sflush_r+0xd2>
   4365e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   43660:	2d00      	cmp	r5, #0
   43662:	d053      	beq.n	4370c <__sflush_r+0xcc>
   43664:	2200      	movs	r2, #0
   43666:	b29b      	uxth	r3, r3
   43668:	f8d8 6000 	ldr.w	r6, [r8]
   4366c:	69e1      	ldr	r1, [r4, #28]
   4366e:	f8c8 2000 	str.w	r2, [r8]
   43672:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   43676:	f040 8083 	bne.w	43780 <__sflush_r+0x140>
   4367a:	2301      	movs	r3, #1
   4367c:	4640      	mov	r0, r8
   4367e:	47a8      	blx	r5
   43680:	1c42      	adds	r2, r0, #1
   43682:	d04a      	beq.n	4371a <__sflush_r+0xda>
   43684:	89a3      	ldrh	r3, [r4, #12]
   43686:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   43688:	69e1      	ldr	r1, [r4, #28]
   4368a:	075b      	lsls	r3, r3, #29
   4368c:	d505      	bpl.n	4369a <__sflush_r+0x5a>
   4368e:	6862      	ldr	r2, [r4, #4]
   43690:	6b23      	ldr	r3, [r4, #48]	; 0x30
   43692:	1a80      	subs	r0, r0, r2
   43694:	b10b      	cbz	r3, 4369a <__sflush_r+0x5a>
   43696:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   43698:	1ac0      	subs	r0, r0, r3
   4369a:	4602      	mov	r2, r0
   4369c:	2300      	movs	r3, #0
   4369e:	4640      	mov	r0, r8
   436a0:	47a8      	blx	r5
   436a2:	1c47      	adds	r7, r0, #1
   436a4:	d045      	beq.n	43732 <__sflush_r+0xf2>
   436a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   436aa:	2100      	movs	r1, #0
   436ac:	6922      	ldr	r2, [r4, #16]
   436ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   436b2:	81a3      	strh	r3, [r4, #12]
   436b4:	04db      	lsls	r3, r3, #19
   436b6:	e9c4 2100 	strd	r2, r1, [r4]
   436ba:	d500      	bpl.n	436be <__sflush_r+0x7e>
   436bc:	6520      	str	r0, [r4, #80]	; 0x50
   436be:	6b21      	ldr	r1, [r4, #48]	; 0x30
   436c0:	f8c8 6000 	str.w	r6, [r8]
   436c4:	b311      	cbz	r1, 4370c <__sflush_r+0xcc>
   436c6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   436ca:	4299      	cmp	r1, r3
   436cc:	d002      	beq.n	436d4 <__sflush_r+0x94>
   436ce:	4640      	mov	r0, r8
   436d0:	f000 f9ca 	bl	43a68 <_free_r>
   436d4:	2000      	movs	r0, #0
   436d6:	6320      	str	r0, [r4, #48]	; 0x30
   436d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   436dc:	6926      	ldr	r6, [r4, #16]
   436de:	b1ae      	cbz	r6, 4370c <__sflush_r+0xcc>
   436e0:	0792      	lsls	r2, r2, #30
   436e2:	6825      	ldr	r5, [r4, #0]
   436e4:	6026      	str	r6, [r4, #0]
   436e6:	bf0c      	ite	eq
   436e8:	6963      	ldreq	r3, [r4, #20]
   436ea:	2300      	movne	r3, #0
   436ec:	1bad      	subs	r5, r5, r6
   436ee:	60a3      	str	r3, [r4, #8]
   436f0:	e00a      	b.n	43708 <__sflush_r+0xc8>
   436f2:	462b      	mov	r3, r5
   436f4:	4632      	mov	r2, r6
   436f6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   436f8:	4640      	mov	r0, r8
   436fa:	69e1      	ldr	r1, [r4, #28]
   436fc:	47b8      	blx	r7
   436fe:	2800      	cmp	r0, #0
   43700:	eba5 0500 	sub.w	r5, r5, r0
   43704:	4406      	add	r6, r0
   43706:	dd2b      	ble.n	43760 <__sflush_r+0x120>
   43708:	2d00      	cmp	r5, #0
   4370a:	dcf2      	bgt.n	436f2 <__sflush_r+0xb2>
   4370c:	2000      	movs	r0, #0
   4370e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   43712:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   43714:	2a00      	cmp	r2, #0
   43716:	dca2      	bgt.n	4365e <__sflush_r+0x1e>
   43718:	e7f8      	b.n	4370c <__sflush_r+0xcc>
   4371a:	f8d8 3000 	ldr.w	r3, [r8]
   4371e:	2b00      	cmp	r3, #0
   43720:	d0b0      	beq.n	43684 <__sflush_r+0x44>
   43722:	2b1d      	cmp	r3, #29
   43724:	d001      	beq.n	4372a <__sflush_r+0xea>
   43726:	2b16      	cmp	r3, #22
   43728:	d12c      	bne.n	43784 <__sflush_r+0x144>
   4372a:	f8c8 6000 	str.w	r6, [r8]
   4372e:	2000      	movs	r0, #0
   43730:	e7ed      	b.n	4370e <__sflush_r+0xce>
   43732:	f8d8 1000 	ldr.w	r1, [r8]
   43736:	291d      	cmp	r1, #29
   43738:	d81a      	bhi.n	43770 <__sflush_r+0x130>
   4373a:	4b15      	ldr	r3, [pc, #84]	; (43790 <__sflush_r+0x150>)
   4373c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   43740:	40cb      	lsrs	r3, r1
   43742:	43db      	mvns	r3, r3
   43744:	f013 0301 	ands.w	r3, r3, #1
   43748:	d114      	bne.n	43774 <__sflush_r+0x134>
   4374a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   4374e:	6925      	ldr	r5, [r4, #16]
   43750:	6063      	str	r3, [r4, #4]
   43752:	6025      	str	r5, [r4, #0]
   43754:	04d5      	lsls	r5, r2, #19
   43756:	81a2      	strh	r2, [r4, #12]
   43758:	d5b1      	bpl.n	436be <__sflush_r+0x7e>
   4375a:	2900      	cmp	r1, #0
   4375c:	d1af      	bne.n	436be <__sflush_r+0x7e>
   4375e:	e7ad      	b.n	436bc <__sflush_r+0x7c>
   43760:	89a3      	ldrh	r3, [r4, #12]
   43762:	f04f 30ff 	mov.w	r0, #4294967295
   43766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   4376a:	81a3      	strh	r3, [r4, #12]
   4376c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   43770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   43774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   43778:	f04f 30ff 	mov.w	r0, #4294967295
   4377c:	81a2      	strh	r2, [r4, #12]
   4377e:	e7c6      	b.n	4370e <__sflush_r+0xce>
   43780:	6d20      	ldr	r0, [r4, #80]	; 0x50
   43782:	e782      	b.n	4368a <__sflush_r+0x4a>
   43784:	89a3      	ldrh	r3, [r4, #12]
   43786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   4378a:	81a3      	strh	r3, [r4, #12]
   4378c:	e7bf      	b.n	4370e <__sflush_r+0xce>
   4378e:	bf00      	nop
   43790:	20400001 	.word	0x20400001

00043794 <_fflush_r>:
   43794:	b538      	push	{r3, r4, r5, lr}
   43796:	460d      	mov	r5, r1
   43798:	4604      	mov	r4, r0
   4379a:	b108      	cbz	r0, 437a0 <_fflush_r+0xc>
   4379c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   4379e:	b1a3      	cbz	r3, 437ca <_fflush_r+0x36>
   437a0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   437a4:	b1b8      	cbz	r0, 437d6 <_fflush_r+0x42>
   437a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   437a8:	07db      	lsls	r3, r3, #31
   437aa:	d401      	bmi.n	437b0 <_fflush_r+0x1c>
   437ac:	0581      	lsls	r1, r0, #22
   437ae:	d51a      	bpl.n	437e6 <_fflush_r+0x52>
   437b0:	4620      	mov	r0, r4
   437b2:	4629      	mov	r1, r5
   437b4:	f7ff ff44 	bl	43640 <__sflush_r>
   437b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   437ba:	4604      	mov	r4, r0
   437bc:	07da      	lsls	r2, r3, #31
   437be:	d402      	bmi.n	437c6 <_fflush_r+0x32>
   437c0:	89ab      	ldrh	r3, [r5, #12]
   437c2:	059b      	lsls	r3, r3, #22
   437c4:	d50a      	bpl.n	437dc <_fflush_r+0x48>
   437c6:	4620      	mov	r0, r4
   437c8:	bd38      	pop	{r3, r4, r5, pc}
   437ca:	f000 f83f 	bl	4384c <__sinit>
   437ce:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   437d2:	2800      	cmp	r0, #0
   437d4:	d1e7      	bne.n	437a6 <_fflush_r+0x12>
   437d6:	4604      	mov	r4, r0
   437d8:	4620      	mov	r0, r4
   437da:	bd38      	pop	{r3, r4, r5, pc}
   437dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   437de:	f000 ffcf 	bl	44780 <__retarget_lock_release_recursive>
   437e2:	4620      	mov	r0, r4
   437e4:	bd38      	pop	{r3, r4, r5, pc}
   437e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   437e8:	f000 ffc8 	bl	4477c <__retarget_lock_acquire_recursive>
   437ec:	e7e0      	b.n	437b0 <_fflush_r+0x1c>
   437ee:	bf00      	nop

000437f0 <std>:
   437f0:	b538      	push	{r3, r4, r5, lr}
   437f2:	4604      	mov	r4, r0
   437f4:	2300      	movs	r3, #0
   437f6:	8181      	strh	r1, [r0, #12]
   437f8:	305c      	adds	r0, #92	; 0x5c
   437fa:	81e2      	strh	r2, [r4, #14]
   437fc:	4619      	mov	r1, r3
   437fe:	6023      	str	r3, [r4, #0]
   43800:	2208      	movs	r2, #8
   43802:	6663      	str	r3, [r4, #100]	; 0x64
   43804:	61a3      	str	r3, [r4, #24]
   43806:	4d0a      	ldr	r5, [pc, #40]	; (43830 <std+0x40>)
   43808:	e9c4 3301 	strd	r3, r3, [r4, #4]
   4380c:	e9c4 3304 	strd	r3, r3, [r4, #16]
   43810:	f7fc fa9c 	bl	3fd4c <memset>
   43814:	4b07      	ldr	r3, [pc, #28]	; (43834 <std+0x44>)
   43816:	4908      	ldr	r1, [pc, #32]	; (43838 <std+0x48>)
   43818:	f104 0058 	add.w	r0, r4, #88	; 0x58
   4381c:	4a07      	ldr	r2, [pc, #28]	; (4383c <std+0x4c>)
   4381e:	62e3      	str	r3, [r4, #44]	; 0x2c
   43820:	e9c4 4507 	strd	r4, r5, [r4, #28]
   43824:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   43828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   4382c:	f000 bfa2 	b.w	44774 <__retarget_lock_init_recursive>
   43830:	0004030d 	.word	0x0004030d
   43834:	00040395 	.word	0x00040395
   43838:	00040335 	.word	0x00040335
   4383c:	00040371 	.word	0x00040371

00043840 <_cleanup_r>:
   43840:	4901      	ldr	r1, [pc, #4]	; (43848 <_cleanup_r+0x8>)
   43842:	f000 bb8f 	b.w	43f64 <_fwalk_reent>
   43846:	bf00      	nop
   43848:	00045c19 	.word	0x00045c19

0004384c <__sinit>:
   4384c:	b510      	push	{r4, lr}
   4384e:	4604      	mov	r4, r0
   43850:	4814      	ldr	r0, [pc, #80]	; (438a4 <__sinit+0x58>)
   43852:	f000 ff93 	bl	4477c <__retarget_lock_acquire_recursive>
   43856:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   43858:	b9fa      	cbnz	r2, 4389a <__sinit+0x4e>
   4385a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   4385e:	4812      	ldr	r0, [pc, #72]	; (438a8 <__sinit+0x5c>)
   43860:	2103      	movs	r1, #3
   43862:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   43866:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   4386a:	63e0      	str	r0, [r4, #60]	; 0x3c
   4386c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   43870:	2104      	movs	r1, #4
   43872:	6860      	ldr	r0, [r4, #4]
   43874:	f7ff ffbc 	bl	437f0 <std>
   43878:	68a0      	ldr	r0, [r4, #8]
   4387a:	2201      	movs	r2, #1
   4387c:	2109      	movs	r1, #9
   4387e:	f7ff ffb7 	bl	437f0 <std>
   43882:	68e0      	ldr	r0, [r4, #12]
   43884:	2202      	movs	r2, #2
   43886:	2112      	movs	r1, #18
   43888:	f7ff ffb2 	bl	437f0 <std>
   4388c:	2301      	movs	r3, #1
   4388e:	4805      	ldr	r0, [pc, #20]	; (438a4 <__sinit+0x58>)
   43890:	63a3      	str	r3, [r4, #56]	; 0x38
   43892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   43896:	f000 bf73 	b.w	44780 <__retarget_lock_release_recursive>
   4389a:	4802      	ldr	r0, [pc, #8]	; (438a4 <__sinit+0x58>)
   4389c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   438a0:	f000 bf6e 	b.w	44780 <__retarget_lock_release_recursive>
   438a4:	2002c4d4 	.word	0x2002c4d4
   438a8:	00043841 	.word	0x00043841

000438ac <__sfp_lock_acquire>:
   438ac:	4801      	ldr	r0, [pc, #4]	; (438b4 <__sfp_lock_acquire+0x8>)
   438ae:	f000 bf65 	b.w	4477c <__retarget_lock_acquire_recursive>
   438b2:	bf00      	nop
   438b4:	2002c4e8 	.word	0x2002c4e8

000438b8 <__sfp_lock_release>:
   438b8:	4801      	ldr	r0, [pc, #4]	; (438c0 <__sfp_lock_release+0x8>)
   438ba:	f000 bf61 	b.w	44780 <__retarget_lock_release_recursive>
   438be:	bf00      	nop
   438c0:	2002c4e8 	.word	0x2002c4e8

000438c4 <__fputwc>:
   438c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   438c8:	b082      	sub	sp, #8
   438ca:	4681      	mov	r9, r0
   438cc:	4688      	mov	r8, r1
   438ce:	4614      	mov	r4, r2
   438d0:	f7fb fec2 	bl	3f658 <__locale_mb_cur_max>
   438d4:	2801      	cmp	r0, #1
   438d6:	d103      	bne.n	438e0 <__fputwc+0x1c>
   438d8:	f108 33ff 	add.w	r3, r8, #4294967295
   438dc:	2bfe      	cmp	r3, #254	; 0xfe
   438de:	d92f      	bls.n	43940 <__fputwc+0x7c>
   438e0:	4642      	mov	r2, r8
   438e2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   438e6:	a901      	add	r1, sp, #4
   438e8:	4648      	mov	r0, r9
   438ea:	f002 f935 	bl	45b58 <_wcrtomb_r>
   438ee:	1c42      	adds	r2, r0, #1
   438f0:	4606      	mov	r6, r0
   438f2:	d02f      	beq.n	43954 <__fputwc+0x90>
   438f4:	b350      	cbz	r0, 4394c <__fputwc+0x88>
   438f6:	f89d c004 	ldrb.w	ip, [sp, #4]
   438fa:	2500      	movs	r5, #0
   438fc:	f10d 0a04 	add.w	sl, sp, #4
   43900:	e009      	b.n	43916 <__fputwc+0x52>
   43902:	6823      	ldr	r3, [r4, #0]
   43904:	1c5a      	adds	r2, r3, #1
   43906:	6022      	str	r2, [r4, #0]
   43908:	f883 c000 	strb.w	ip, [r3]
   4390c:	3501      	adds	r5, #1
   4390e:	42b5      	cmp	r5, r6
   43910:	d21c      	bcs.n	4394c <__fputwc+0x88>
   43912:	f815 c00a 	ldrb.w	ip, [r5, sl]
   43916:	68a3      	ldr	r3, [r4, #8]
   43918:	3b01      	subs	r3, #1
   4391a:	2b00      	cmp	r3, #0
   4391c:	60a3      	str	r3, [r4, #8]
   4391e:	daf0      	bge.n	43902 <__fputwc+0x3e>
   43920:	69a7      	ldr	r7, [r4, #24]
   43922:	4661      	mov	r1, ip
   43924:	4622      	mov	r2, r4
   43926:	4648      	mov	r0, r9
   43928:	42bb      	cmp	r3, r7
   4392a:	db02      	blt.n	43932 <__fputwc+0x6e>
   4392c:	f1bc 0f0a 	cmp.w	ip, #10
   43930:	d1e7      	bne.n	43902 <__fputwc+0x3e>
   43932:	f002 f8b9 	bl	45aa8 <__swbuf_r>
   43936:	1c43      	adds	r3, r0, #1
   43938:	d1e8      	bne.n	4390c <__fputwc+0x48>
   4393a:	b002      	add	sp, #8
   4393c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   43940:	fa5f fc88 	uxtb.w	ip, r8
   43944:	4606      	mov	r6, r0
   43946:	f88d c004 	strb.w	ip, [sp, #4]
   4394a:	e7d6      	b.n	438fa <__fputwc+0x36>
   4394c:	4640      	mov	r0, r8
   4394e:	b002      	add	sp, #8
   43950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   43954:	89a3      	ldrh	r3, [r4, #12]
   43956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   4395a:	81a3      	strh	r3, [r4, #12]
   4395c:	b002      	add	sp, #8
   4395e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   43962:	bf00      	nop

00043964 <_fputwc_r>:
   43964:	b530      	push	{r4, r5, lr}
   43966:	4605      	mov	r5, r0
   43968:	6e50      	ldr	r0, [r2, #100]	; 0x64
   4396a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   4396e:	4614      	mov	r4, r2
   43970:	07c0      	lsls	r0, r0, #31
   43972:	b083      	sub	sp, #12
   43974:	b29a      	uxth	r2, r3
   43976:	d401      	bmi.n	4397c <_fputwc_r+0x18>
   43978:	0590      	lsls	r0, r2, #22
   4397a:	d51c      	bpl.n	439b6 <_fputwc_r+0x52>
   4397c:	0490      	lsls	r0, r2, #18
   4397e:	d406      	bmi.n	4398e <_fputwc_r+0x2a>
   43980:	6e62      	ldr	r2, [r4, #100]	; 0x64
   43982:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   43986:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   4398a:	81a3      	strh	r3, [r4, #12]
   4398c:	6662      	str	r2, [r4, #100]	; 0x64
   4398e:	4628      	mov	r0, r5
   43990:	4622      	mov	r2, r4
   43992:	f7ff ff97 	bl	438c4 <__fputwc>
   43996:	6e63      	ldr	r3, [r4, #100]	; 0x64
   43998:	4605      	mov	r5, r0
   4399a:	07da      	lsls	r2, r3, #31
   4399c:	d402      	bmi.n	439a4 <_fputwc_r+0x40>
   4399e:	89a3      	ldrh	r3, [r4, #12]
   439a0:	059b      	lsls	r3, r3, #22
   439a2:	d502      	bpl.n	439aa <_fputwc_r+0x46>
   439a4:	4628      	mov	r0, r5
   439a6:	b003      	add	sp, #12
   439a8:	bd30      	pop	{r4, r5, pc}
   439aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
   439ac:	f000 fee8 	bl	44780 <__retarget_lock_release_recursive>
   439b0:	4628      	mov	r0, r5
   439b2:	b003      	add	sp, #12
   439b4:	bd30      	pop	{r4, r5, pc}
   439b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   439b8:	9101      	str	r1, [sp, #4]
   439ba:	f000 fedf 	bl	4477c <__retarget_lock_acquire_recursive>
   439be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   439c2:	9901      	ldr	r1, [sp, #4]
   439c4:	b29a      	uxth	r2, r3
   439c6:	e7d9      	b.n	4397c <_fputwc_r+0x18>

000439c8 <_malloc_trim_r>:
   439c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   439ca:	4f23      	ldr	r7, [pc, #140]	; (43a58 <_malloc_trim_r+0x90>)
   439cc:	460d      	mov	r5, r1
   439ce:	4606      	mov	r6, r0
   439d0:	f7fc fa06 	bl	3fde0 <__malloc_lock>
   439d4:	68b9      	ldr	r1, [r7, #8]
   439d6:	f640 73ef 	movw	r3, #4079	; 0xfef
   439da:	4a20      	ldr	r2, [pc, #128]	; (43a5c <_malloc_trim_r+0x94>)
   439dc:	684c      	ldr	r4, [r1, #4]
   439de:	1b5b      	subs	r3, r3, r5
   439e0:	f024 0403 	bic.w	r4, r4, #3
   439e4:	4423      	add	r3, r4
   439e6:	401a      	ands	r2, r3
   439e8:	f5a2 5580 	sub.w	r5, r2, #4096	; 0x1000
   439ec:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   439f0:	db07      	blt.n	43a02 <_malloc_trim_r+0x3a>
   439f2:	2100      	movs	r1, #0
   439f4:	4630      	mov	r0, r6
   439f6:	f7fc fbe3 	bl	401c0 <_sbrk_r>
   439fa:	68bb      	ldr	r3, [r7, #8]
   439fc:	4423      	add	r3, r4
   439fe:	4298      	cmp	r0, r3
   43a00:	d004      	beq.n	43a0c <_malloc_trim_r+0x44>
   43a02:	4630      	mov	r0, r6
   43a04:	f7fc f9f2 	bl	3fdec <__malloc_unlock>
   43a08:	2000      	movs	r0, #0
   43a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   43a0c:	4269      	negs	r1, r5
   43a0e:	4630      	mov	r0, r6
   43a10:	f7fc fbd6 	bl	401c0 <_sbrk_r>
   43a14:	3001      	adds	r0, #1
   43a16:	d00d      	beq.n	43a34 <_malloc_trim_r+0x6c>
   43a18:	4b11      	ldr	r3, [pc, #68]	; (43a60 <_malloc_trim_r+0x98>)
   43a1a:	1b64      	subs	r4, r4, r5
   43a1c:	68b9      	ldr	r1, [r7, #8]
   43a1e:	4630      	mov	r0, r6
   43a20:	681a      	ldr	r2, [r3, #0]
   43a22:	f044 0401 	orr.w	r4, r4, #1
   43a26:	1b52      	subs	r2, r2, r5
   43a28:	604c      	str	r4, [r1, #4]
   43a2a:	601a      	str	r2, [r3, #0]
   43a2c:	f7fc f9de 	bl	3fdec <__malloc_unlock>
   43a30:	2001      	movs	r0, #1
   43a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   43a34:	2100      	movs	r1, #0
   43a36:	4630      	mov	r0, r6
   43a38:	f7fc fbc2 	bl	401c0 <_sbrk_r>
   43a3c:	68ba      	ldr	r2, [r7, #8]
   43a3e:	1a83      	subs	r3, r0, r2
   43a40:	2b0f      	cmp	r3, #15
   43a42:	ddde      	ble.n	43a02 <_malloc_trim_r+0x3a>
   43a44:	4c07      	ldr	r4, [pc, #28]	; (43a64 <_malloc_trim_r+0x9c>)
   43a46:	f043 0301 	orr.w	r3, r3, #1
   43a4a:	4905      	ldr	r1, [pc, #20]	; (43a60 <_malloc_trim_r+0x98>)
   43a4c:	6824      	ldr	r4, [r4, #0]
   43a4e:	6053      	str	r3, [r2, #4]
   43a50:	1b00      	subs	r0, r0, r4
   43a52:	6008      	str	r0, [r1, #0]
   43a54:	e7d5      	b.n	43a02 <_malloc_trim_r+0x3a>
   43a56:	bf00      	nop
   43a58:	20031d94 	.word	0x20031d94
   43a5c:	fffff000 	.word	0xfffff000
   43a60:	2002a3fc 	.word	0x2002a3fc
   43a64:	2003219c 	.word	0x2003219c

00043a68 <_free_r>:
   43a68:	2900      	cmp	r1, #0
   43a6a:	d052      	beq.n	43b12 <_free_r+0xaa>
   43a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   43a6e:	460d      	mov	r5, r1
   43a70:	4606      	mov	r6, r0
   43a72:	f7fc f9b5 	bl	3fde0 <__malloc_lock>
   43a76:	4f71      	ldr	r7, [pc, #452]	; (43c3c <_free_r+0x1d4>)
   43a78:	f855 cc04 	ldr.w	ip, [r5, #-4]
   43a7c:	f1a5 0108 	sub.w	r1, r5, #8
   43a80:	68b8      	ldr	r0, [r7, #8]
   43a82:	f02c 0301 	bic.w	r3, ip, #1
   43a86:	18ca      	adds	r2, r1, r3
   43a88:	6854      	ldr	r4, [r2, #4]
   43a8a:	4290      	cmp	r0, r2
   43a8c:	f024 0403 	bic.w	r4, r4, #3
   43a90:	d052      	beq.n	43b38 <_free_r+0xd0>
   43a92:	f01c 0f01 	tst.w	ip, #1
   43a96:	6054      	str	r4, [r2, #4]
   43a98:	eb02 0004 	add.w	r0, r2, r4
   43a9c:	d13a      	bne.n	43b14 <_free_r+0xac>
   43a9e:	f855 5c08 	ldr.w	r5, [r5, #-8]
   43aa2:	f107 0c08 	add.w	ip, r7, #8
   43aa6:	6840      	ldr	r0, [r0, #4]
   43aa8:	1b49      	subs	r1, r1, r5
   43aaa:	442b      	add	r3, r5
   43aac:	f000 0001 	and.w	r0, r0, #1
   43ab0:	688d      	ldr	r5, [r1, #8]
   43ab2:	4565      	cmp	r5, ip
   43ab4:	d075      	beq.n	43ba2 <_free_r+0x13a>
   43ab6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   43aba:	f8c5 c00c 	str.w	ip, [r5, #12]
   43abe:	f8cc 5008 	str.w	r5, [ip, #8]
   43ac2:	b360      	cbz	r0, 43b1e <_free_r+0xb6>
   43ac4:	f043 0201 	orr.w	r2, r3, #1
   43ac8:	604a      	str	r2, [r1, #4]
   43aca:	50cb      	str	r3, [r1, r3]
   43acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   43ad0:	d350      	bcc.n	43b74 <_free_r+0x10c>
   43ad2:	0a5a      	lsrs	r2, r3, #9
   43ad4:	2a04      	cmp	r2, #4
   43ad6:	d870      	bhi.n	43bba <_free_r+0x152>
   43ad8:	099a      	lsrs	r2, r3, #6
   43ada:	f102 0439 	add.w	r4, r2, #57	; 0x39
   43ade:	f102 0038 	add.w	r0, r2, #56	; 0x38
   43ae2:	00e2      	lsls	r2, r4, #3
   43ae4:	18bc      	adds	r4, r7, r2
   43ae6:	58ba      	ldr	r2, [r7, r2]
   43ae8:	3c08      	subs	r4, #8
   43aea:	4294      	cmp	r4, r2
   43aec:	d078      	beq.n	43be0 <_free_r+0x178>
   43aee:	6850      	ldr	r0, [r2, #4]
   43af0:	f020 0003 	bic.w	r0, r0, #3
   43af4:	4298      	cmp	r0, r3
   43af6:	d971      	bls.n	43bdc <_free_r+0x174>
   43af8:	6892      	ldr	r2, [r2, #8]
   43afa:	4294      	cmp	r4, r2
   43afc:	d1f7      	bne.n	43aee <_free_r+0x86>
   43afe:	68e3      	ldr	r3, [r4, #12]
   43b00:	4630      	mov	r0, r6
   43b02:	e9c1 4302 	strd	r4, r3, [r1, #8]
   43b06:	6099      	str	r1, [r3, #8]
   43b08:	60e1      	str	r1, [r4, #12]
   43b0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   43b0e:	f7fc b96d 	b.w	3fdec <__malloc_unlock>
   43b12:	4770      	bx	lr
   43b14:	6840      	ldr	r0, [r0, #4]
   43b16:	f000 0001 	and.w	r0, r0, #1
   43b1a:	2800      	cmp	r0, #0
   43b1c:	d1d2      	bne.n	43ac4 <_free_r+0x5c>
   43b1e:	6890      	ldr	r0, [r2, #8]
   43b20:	4423      	add	r3, r4
   43b22:	4d47      	ldr	r5, [pc, #284]	; (43c40 <_free_r+0x1d8>)
   43b24:	f043 0401 	orr.w	r4, r3, #1
   43b28:	42a8      	cmp	r0, r5
   43b2a:	d062      	beq.n	43bf2 <_free_r+0x18a>
   43b2c:	68d2      	ldr	r2, [r2, #12]
   43b2e:	60c2      	str	r2, [r0, #12]
   43b30:	6090      	str	r0, [r2, #8]
   43b32:	604c      	str	r4, [r1, #4]
   43b34:	50cb      	str	r3, [r1, r3]
   43b36:	e7c9      	b.n	43acc <_free_r+0x64>
   43b38:	f01c 0f01 	tst.w	ip, #1
   43b3c:	4423      	add	r3, r4
   43b3e:	d107      	bne.n	43b50 <_free_r+0xe8>
   43b40:	f855 2c08 	ldr.w	r2, [r5, #-8]
   43b44:	1a89      	subs	r1, r1, r2
   43b46:	4413      	add	r3, r2
   43b48:	e9d1 0202 	ldrd	r0, r2, [r1, #8]
   43b4c:	60c2      	str	r2, [r0, #12]
   43b4e:	6090      	str	r0, [r2, #8]
   43b50:	4a3c      	ldr	r2, [pc, #240]	; (43c44 <_free_r+0x1dc>)
   43b52:	f043 0001 	orr.w	r0, r3, #1
   43b56:	6812      	ldr	r2, [r2, #0]
   43b58:	6048      	str	r0, [r1, #4]
   43b5a:	429a      	cmp	r2, r3
   43b5c:	60b9      	str	r1, [r7, #8]
   43b5e:	d804      	bhi.n	43b6a <_free_r+0x102>
   43b60:	4b39      	ldr	r3, [pc, #228]	; (43c48 <_free_r+0x1e0>)
   43b62:	4630      	mov	r0, r6
   43b64:	6819      	ldr	r1, [r3, #0]
   43b66:	f7ff ff2f 	bl	439c8 <_malloc_trim_r>
   43b6a:	4630      	mov	r0, r6
   43b6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   43b70:	f7fc b93c 	b.w	3fdec <__malloc_unlock>
   43b74:	08db      	lsrs	r3, r3, #3
   43b76:	2201      	movs	r2, #1
   43b78:	687c      	ldr	r4, [r7, #4]
   43b7a:	1098      	asrs	r0, r3, #2
   43b7c:	4413      	add	r3, r2
   43b7e:	4082      	lsls	r2, r0
   43b80:	eb07 00c3 	add.w	r0, r7, r3, lsl #3
   43b84:	4322      	orrs	r2, r4
   43b86:	3808      	subs	r0, #8
   43b88:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
   43b8c:	607a      	str	r2, [r7, #4]
   43b8e:	e9c1 4002 	strd	r4, r0, [r1, #8]
   43b92:	f847 1033 	str.w	r1, [r7, r3, lsl #3]
   43b96:	4630      	mov	r0, r6
   43b98:	60e1      	str	r1, [r4, #12]
   43b9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   43b9e:	f7fc b925 	b.w	3fdec <__malloc_unlock>
   43ba2:	2800      	cmp	r0, #0
   43ba4:	d145      	bne.n	43c32 <_free_r+0x1ca>
   43ba6:	4423      	add	r3, r4
   43ba8:	e9d2 0202 	ldrd	r0, r2, [r2, #8]
   43bac:	f043 0401 	orr.w	r4, r3, #1
   43bb0:	60c2      	str	r2, [r0, #12]
   43bb2:	6090      	str	r0, [r2, #8]
   43bb4:	604c      	str	r4, [r1, #4]
   43bb6:	50cb      	str	r3, [r1, r3]
   43bb8:	e7d7      	b.n	43b6a <_free_r+0x102>
   43bba:	2a14      	cmp	r2, #20
   43bbc:	d908      	bls.n	43bd0 <_free_r+0x168>
   43bbe:	2a54      	cmp	r2, #84	; 0x54
   43bc0:	d81e      	bhi.n	43c00 <_free_r+0x198>
   43bc2:	0b1a      	lsrs	r2, r3, #12
   43bc4:	f102 046f 	add.w	r4, r2, #111	; 0x6f
   43bc8:	f102 006e 	add.w	r0, r2, #110	; 0x6e
   43bcc:	00e2      	lsls	r2, r4, #3
   43bce:	e789      	b.n	43ae4 <_free_r+0x7c>
   43bd0:	f102 045c 	add.w	r4, r2, #92	; 0x5c
   43bd4:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   43bd8:	00e2      	lsls	r2, r4, #3
   43bda:	e783      	b.n	43ae4 <_free_r+0x7c>
   43bdc:	4614      	mov	r4, r2
   43bde:	e78e      	b.n	43afe <_free_r+0x96>
   43be0:	1082      	asrs	r2, r0, #2
   43be2:	2001      	movs	r0, #1
   43be4:	687d      	ldr	r5, [r7, #4]
   43be6:	4623      	mov	r3, r4
   43be8:	fa00 f202 	lsl.w	r2, r0, r2
   43bec:	432a      	orrs	r2, r5
   43bee:	607a      	str	r2, [r7, #4]
   43bf0:	e786      	b.n	43b00 <_free_r+0x98>
   43bf2:	e9c7 1104 	strd	r1, r1, [r7, #16]
   43bf6:	e9c1 0002 	strd	r0, r0, [r1, #8]
   43bfa:	604c      	str	r4, [r1, #4]
   43bfc:	50cb      	str	r3, [r1, r3]
   43bfe:	e7b4      	b.n	43b6a <_free_r+0x102>
   43c00:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   43c04:	d806      	bhi.n	43c14 <_free_r+0x1ac>
   43c06:	0bda      	lsrs	r2, r3, #15
   43c08:	f102 0478 	add.w	r4, r2, #120	; 0x78
   43c0c:	f102 0077 	add.w	r0, r2, #119	; 0x77
   43c10:	00e2      	lsls	r2, r4, #3
   43c12:	e767      	b.n	43ae4 <_free_r+0x7c>
   43c14:	f240 5054 	movw	r0, #1364	; 0x554
   43c18:	4282      	cmp	r2, r0
   43c1a:	d806      	bhi.n	43c2a <_free_r+0x1c2>
   43c1c:	0c9a      	lsrs	r2, r3, #18
   43c1e:	f102 047d 	add.w	r4, r2, #125	; 0x7d
   43c22:	f102 007c 	add.w	r0, r2, #124	; 0x7c
   43c26:	00e2      	lsls	r2, r4, #3
   43c28:	e75c      	b.n	43ae4 <_free_r+0x7c>
   43c2a:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
   43c2e:	207e      	movs	r0, #126	; 0x7e
   43c30:	e758      	b.n	43ae4 <_free_r+0x7c>
   43c32:	f043 0001 	orr.w	r0, r3, #1
   43c36:	6048      	str	r0, [r1, #4]
   43c38:	6013      	str	r3, [r2, #0]
   43c3a:	e796      	b.n	43b6a <_free_r+0x102>
   43c3c:	20031d94 	.word	0x20031d94
   43c40:	20031d9c 	.word	0x20031d9c
   43c44:	200321a0 	.word	0x200321a0
   43c48:	2002a42c 	.word	0x2002a42c

00043c4c <__sfvwrite_r>:
   43c4c:	6893      	ldr	r3, [r2, #8]
   43c4e:	2b00      	cmp	r3, #0
   43c50:	f000 80f0 	beq.w	43e34 <__sfvwrite_r+0x1e8>
   43c54:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
   43c58:	fa1f fc8c 	uxth.w	ip, ip
   43c5c:	f01c 0f08 	tst.w	ip, #8
   43c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43c64:	460c      	mov	r4, r1
   43c66:	b083      	sub	sp, #12
   43c68:	4681      	mov	r9, r0
   43c6a:	4690      	mov	r8, r2
   43c6c:	d035      	beq.n	43cda <__sfvwrite_r+0x8e>
   43c6e:	690b      	ldr	r3, [r1, #16]
   43c70:	b39b      	cbz	r3, 43cda <__sfvwrite_r+0x8e>
   43c72:	f01c 0302 	ands.w	r3, ip, #2
   43c76:	f8d8 7000 	ldr.w	r7, [r8]
   43c7a:	d03e      	beq.n	43cfa <__sfvwrite_r+0xae>
   43c7c:	2600      	movs	r6, #0
   43c7e:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
   43c82:	f8d4 c01c 	ldr.w	ip, [r4, #28]
   43c86:	4635      	mov	r5, r6
   43c88:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 43f60 <__sfvwrite_r+0x314>
   43c8c:	4555      	cmp	r5, sl
   43c8e:	462b      	mov	r3, r5
   43c90:	4632      	mov	r2, r6
   43c92:	4661      	mov	r1, ip
   43c94:	bf28      	it	cs
   43c96:	4653      	movcs	r3, sl
   43c98:	4648      	mov	r0, r9
   43c9a:	b1d5      	cbz	r5, 43cd2 <__sfvwrite_r+0x86>
   43c9c:	47d8      	blx	fp
   43c9e:	2800      	cmp	r0, #0
   43ca0:	f340 80d0 	ble.w	43e44 <__sfvwrite_r+0x1f8>
   43ca4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   43ca8:	4406      	add	r6, r0
   43caa:	1a2d      	subs	r5, r5, r0
   43cac:	1a18      	subs	r0, r3, r0
   43cae:	f8c8 0008 	str.w	r0, [r8, #8]
   43cb2:	2800      	cmp	r0, #0
   43cb4:	f000 80ba 	beq.w	43e2c <__sfvwrite_r+0x1e0>
   43cb8:	f8d4 c01c 	ldr.w	ip, [r4, #28]
   43cbc:	4555      	cmp	r5, sl
   43cbe:	462b      	mov	r3, r5
   43cc0:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
   43cc4:	bf28      	it	cs
   43cc6:	4653      	movcs	r3, sl
   43cc8:	4632      	mov	r2, r6
   43cca:	4661      	mov	r1, ip
   43ccc:	4648      	mov	r0, r9
   43cce:	2d00      	cmp	r5, #0
   43cd0:	d1e4      	bne.n	43c9c <__sfvwrite_r+0x50>
   43cd2:	e9d7 6500 	ldrd	r6, r5, [r7]
   43cd6:	3708      	adds	r7, #8
   43cd8:	e7d8      	b.n	43c8c <__sfvwrite_r+0x40>
   43cda:	4621      	mov	r1, r4
   43cdc:	4648      	mov	r0, r9
   43cde:	f7ff fb77 	bl	433d0 <__swsetup_r>
   43ce2:	2800      	cmp	r0, #0
   43ce4:	f040 8137 	bne.w	43f56 <__sfvwrite_r+0x30a>
   43ce8:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   43cec:	f8d8 7000 	ldr.w	r7, [r8]
   43cf0:	fa1f fc8c 	uxth.w	ip, ip
   43cf4:	f01c 0302 	ands.w	r3, ip, #2
   43cf8:	d1c0      	bne.n	43c7c <__sfvwrite_r+0x30>
   43cfa:	f01c 0a01 	ands.w	sl, ip, #1
   43cfe:	d166      	bne.n	43dce <__sfvwrite_r+0x182>
   43d00:	f8d4 b008 	ldr.w	fp, [r4, #8]
   43d04:	4656      	mov	r6, sl
   43d06:	6820      	ldr	r0, [r4, #0]
   43d08:	2e00      	cmp	r6, #0
   43d0a:	d05c      	beq.n	43dc6 <__sfvwrite_r+0x17a>
   43d0c:	f41c 7f00 	tst.w	ip, #512	; 0x200
   43d10:	f000 80a2 	beq.w	43e58 <__sfvwrite_r+0x20c>
   43d14:	45b3      	cmp	fp, r6
   43d16:	465b      	mov	r3, fp
   43d18:	f200 80e2 	bhi.w	43ee0 <__sfvwrite_r+0x294>
   43d1c:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   43d20:	d031      	beq.n	43d86 <__sfvwrite_r+0x13a>
   43d22:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   43d26:	eb15 0545 	adds.w	r5, r5, r5, lsl #1
   43d2a:	eba0 0b01 	sub.w	fp, r0, r1
   43d2e:	f106 0001 	add.w	r0, r6, #1
   43d32:	bf48      	it	mi
   43d34:	3501      	addmi	r5, #1
   43d36:	4458      	add	r0, fp
   43d38:	106d      	asrs	r5, r5, #1
   43d3a:	42a8      	cmp	r0, r5
   43d3c:	462a      	mov	r2, r5
   43d3e:	d901      	bls.n	43d44 <__sfvwrite_r+0xf8>
   43d40:	4605      	mov	r5, r0
   43d42:	4602      	mov	r2, r0
   43d44:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   43d48:	f000 80db 	beq.w	43f02 <__sfvwrite_r+0x2b6>
   43d4c:	4611      	mov	r1, r2
   43d4e:	4648      	mov	r0, r9
   43d50:	f7fb fcb2 	bl	3f6b8 <_malloc_r>
   43d54:	2800      	cmp	r0, #0
   43d56:	f000 80f8 	beq.w	43f4a <__sfvwrite_r+0x2fe>
   43d5a:	465a      	mov	r2, fp
   43d5c:	6921      	ldr	r1, [r4, #16]
   43d5e:	9001      	str	r0, [sp, #4]
   43d60:	f7d6 f8a6 	bl	19eb0 <memcpy>
   43d64:	89a2      	ldrh	r2, [r4, #12]
   43d66:	9b01      	ldr	r3, [sp, #4]
   43d68:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   43d6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   43d70:	81a2      	strh	r2, [r4, #12]
   43d72:	eb03 000b 	add.w	r0, r3, fp
   43d76:	eba5 020b 	sub.w	r2, r5, fp
   43d7a:	6123      	str	r3, [r4, #16]
   43d7c:	46b3      	mov	fp, r6
   43d7e:	4633      	mov	r3, r6
   43d80:	6020      	str	r0, [r4, #0]
   43d82:	60a2      	str	r2, [r4, #8]
   43d84:	6165      	str	r5, [r4, #20]
   43d86:	461a      	mov	r2, r3
   43d88:	4651      	mov	r1, sl
   43d8a:	9301      	str	r3, [sp, #4]
   43d8c:	f000 fdb6 	bl	448fc <memmove>
   43d90:	68a1      	ldr	r1, [r4, #8]
   43d92:	4635      	mov	r5, r6
   43d94:	6822      	ldr	r2, [r4, #0]
   43d96:	2600      	movs	r6, #0
   43d98:	9b01      	ldr	r3, [sp, #4]
   43d9a:	eba1 010b 	sub.w	r1, r1, fp
   43d9e:	4413      	add	r3, r2
   43da0:	60a1      	str	r1, [r4, #8]
   43da2:	6023      	str	r3, [r4, #0]
   43da4:	f8d8 0008 	ldr.w	r0, [r8, #8]
   43da8:	44aa      	add	sl, r5
   43daa:	1b40      	subs	r0, r0, r5
   43dac:	f8c8 0008 	str.w	r0, [r8, #8]
   43db0:	2800      	cmp	r0, #0
   43db2:	d03b      	beq.n	43e2c <__sfvwrite_r+0x1e0>
   43db4:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   43db8:	f8d4 b008 	ldr.w	fp, [r4, #8]
   43dbc:	fa1f fc8c 	uxth.w	ip, ip
   43dc0:	6820      	ldr	r0, [r4, #0]
   43dc2:	2e00      	cmp	r6, #0
   43dc4:	d1a2      	bne.n	43d0c <__sfvwrite_r+0xc0>
   43dc6:	e9d7 a600 	ldrd	sl, r6, [r7]
   43dca:	3708      	adds	r7, #8
   43dcc:	e79c      	b.n	43d08 <__sfvwrite_r+0xbc>
   43dce:	469a      	mov	sl, r3
   43dd0:	4618      	mov	r0, r3
   43dd2:	461e      	mov	r6, r3
   43dd4:	463b      	mov	r3, r7
   43dd6:	4657      	mov	r7, sl
   43dd8:	469b      	mov	fp, r3
   43dda:	2e00      	cmp	r6, #0
   43ddc:	d06c      	beq.n	43eb8 <__sfvwrite_r+0x26c>
   43dde:	2800      	cmp	r0, #0
   43de0:	d074      	beq.n	43ecc <__sfvwrite_r+0x280>
   43de2:	45b2      	cmp	sl, r6
   43de4:	6820      	ldr	r0, [r4, #0]
   43de6:	6921      	ldr	r1, [r4, #16]
   43de8:	4653      	mov	r3, sl
   43dea:	6962      	ldr	r2, [r4, #20]
   43dec:	bf28      	it	cs
   43dee:	4633      	movcs	r3, r6
   43df0:	68a5      	ldr	r5, [r4, #8]
   43df2:	4288      	cmp	r0, r1
   43df4:	4415      	add	r5, r2
   43df6:	d901      	bls.n	43dfc <__sfvwrite_r+0x1b0>
   43df8:	42ab      	cmp	r3, r5
   43dfa:	dc74      	bgt.n	43ee6 <__sfvwrite_r+0x29a>
   43dfc:	429a      	cmp	r2, r3
   43dfe:	f300 8096 	bgt.w	43f2e <__sfvwrite_r+0x2e2>
   43e02:	4613      	mov	r3, r2
   43e04:	6a65      	ldr	r5, [r4, #36]	; 0x24
   43e06:	463a      	mov	r2, r7
   43e08:	69e1      	ldr	r1, [r4, #28]
   43e0a:	4648      	mov	r0, r9
   43e0c:	47a8      	blx	r5
   43e0e:	1e05      	subs	r5, r0, #0
   43e10:	dd18      	ble.n	43e44 <__sfvwrite_r+0x1f8>
   43e12:	ebba 0a05 	subs.w	sl, sl, r5
   43e16:	d00f      	beq.n	43e38 <__sfvwrite_r+0x1ec>
   43e18:	2001      	movs	r0, #1
   43e1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   43e1e:	442f      	add	r7, r5
   43e20:	1b76      	subs	r6, r6, r5
   43e22:	1b5d      	subs	r5, r3, r5
   43e24:	f8c8 5008 	str.w	r5, [r8, #8]
   43e28:	2d00      	cmp	r5, #0
   43e2a:	d1d6      	bne.n	43dda <__sfvwrite_r+0x18e>
   43e2c:	2000      	movs	r0, #0
   43e2e:	b003      	add	sp, #12
   43e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43e34:	2000      	movs	r0, #0
   43e36:	4770      	bx	lr
   43e38:	4621      	mov	r1, r4
   43e3a:	4648      	mov	r0, r9
   43e3c:	f7ff fcaa 	bl	43794 <_fflush_r>
   43e40:	2800      	cmp	r0, #0
   43e42:	d0ea      	beq.n	43e1a <__sfvwrite_r+0x1ce>
   43e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   43e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   43e4c:	f04f 30ff 	mov.w	r0, #4294967295
   43e50:	81a3      	strh	r3, [r4, #12]
   43e52:	b003      	add	sp, #12
   43e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43e58:	6923      	ldr	r3, [r4, #16]
   43e5a:	4283      	cmp	r3, r0
   43e5c:	d315      	bcc.n	43e8a <__sfvwrite_r+0x23e>
   43e5e:	6963      	ldr	r3, [r4, #20]
   43e60:	42b3      	cmp	r3, r6
   43e62:	d812      	bhi.n	43e8a <__sfvwrite_r+0x23e>
   43e64:	4a3d      	ldr	r2, [pc, #244]	; (43f5c <__sfvwrite_r+0x310>)
   43e66:	4648      	mov	r0, r9
   43e68:	6a65      	ldr	r5, [r4, #36]	; 0x24
   43e6a:	4296      	cmp	r6, r2
   43e6c:	69e1      	ldr	r1, [r4, #28]
   43e6e:	4652      	mov	r2, sl
   43e70:	bf94      	ite	ls
   43e72:	46b4      	movls	ip, r6
   43e74:	f06f 4c00 	mvnhi.w	ip, #2147483648	; 0x80000000
   43e78:	fb9c fcf3 	sdiv	ip, ip, r3
   43e7c:	fb03 f30c 	mul.w	r3, r3, ip
   43e80:	47a8      	blx	r5
   43e82:	1e05      	subs	r5, r0, #0
   43e84:	ddde      	ble.n	43e44 <__sfvwrite_r+0x1f8>
   43e86:	1b76      	subs	r6, r6, r5
   43e88:	e78c      	b.n	43da4 <__sfvwrite_r+0x158>
   43e8a:	45b3      	cmp	fp, r6
   43e8c:	465d      	mov	r5, fp
   43e8e:	4651      	mov	r1, sl
   43e90:	bf28      	it	cs
   43e92:	4635      	movcs	r5, r6
   43e94:	462a      	mov	r2, r5
   43e96:	f000 fd31 	bl	448fc <memmove>
   43e9a:	68a3      	ldr	r3, [r4, #8]
   43e9c:	6822      	ldr	r2, [r4, #0]
   43e9e:	1b5b      	subs	r3, r3, r5
   43ea0:	442a      	add	r2, r5
   43ea2:	60a3      	str	r3, [r4, #8]
   43ea4:	6022      	str	r2, [r4, #0]
   43ea6:	2b00      	cmp	r3, #0
   43ea8:	d1ed      	bne.n	43e86 <__sfvwrite_r+0x23a>
   43eaa:	4621      	mov	r1, r4
   43eac:	4648      	mov	r0, r9
   43eae:	f7ff fc71 	bl	43794 <_fflush_r>
   43eb2:	2800      	cmp	r0, #0
   43eb4:	d0e7      	beq.n	43e86 <__sfvwrite_r+0x23a>
   43eb6:	e7c5      	b.n	43e44 <__sfvwrite_r+0x1f8>
   43eb8:	f10b 0308 	add.w	r3, fp, #8
   43ebc:	f853 6c04 	ldr.w	r6, [r3, #-4]
   43ec0:	469b      	mov	fp, r3
   43ec2:	f853 7c08 	ldr.w	r7, [r3, #-8]
   43ec6:	3308      	adds	r3, #8
   43ec8:	2e00      	cmp	r6, #0
   43eca:	d0f7      	beq.n	43ebc <__sfvwrite_r+0x270>
   43ecc:	4632      	mov	r2, r6
   43ece:	210a      	movs	r1, #10
   43ed0:	4638      	mov	r0, r7
   43ed2:	f7fb feb5 	bl	3fc40 <memchr>
   43ed6:	b338      	cbz	r0, 43f28 <__sfvwrite_r+0x2dc>
   43ed8:	3001      	adds	r0, #1
   43eda:	eba0 0a07 	sub.w	sl, r0, r7
   43ede:	e780      	b.n	43de2 <__sfvwrite_r+0x196>
   43ee0:	46b3      	mov	fp, r6
   43ee2:	4633      	mov	r3, r6
   43ee4:	e74f      	b.n	43d86 <__sfvwrite_r+0x13a>
   43ee6:	4639      	mov	r1, r7
   43ee8:	462a      	mov	r2, r5
   43eea:	f000 fd07 	bl	448fc <memmove>
   43eee:	6823      	ldr	r3, [r4, #0]
   43ef0:	4621      	mov	r1, r4
   43ef2:	4648      	mov	r0, r9
   43ef4:	442b      	add	r3, r5
   43ef6:	6023      	str	r3, [r4, #0]
   43ef8:	f7ff fc4c 	bl	43794 <_fflush_r>
   43efc:	2800      	cmp	r0, #0
   43efe:	d088      	beq.n	43e12 <__sfvwrite_r+0x1c6>
   43f00:	e7a0      	b.n	43e44 <__sfvwrite_r+0x1f8>
   43f02:	4648      	mov	r0, r9
   43f04:	f7fb ffa6 	bl	3fe54 <_realloc_r>
   43f08:	4603      	mov	r3, r0
   43f0a:	2800      	cmp	r0, #0
   43f0c:	f47f af31 	bne.w	43d72 <__sfvwrite_r+0x126>
   43f10:	6921      	ldr	r1, [r4, #16]
   43f12:	4648      	mov	r0, r9
   43f14:	f7ff fda8 	bl	43a68 <_free_r>
   43f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   43f1c:	220c      	movs	r2, #12
   43f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   43f22:	f8c9 2000 	str.w	r2, [r9]
   43f26:	e78f      	b.n	43e48 <__sfvwrite_r+0x1fc>
   43f28:	f106 0a01 	add.w	sl, r6, #1
   43f2c:	e759      	b.n	43de2 <__sfvwrite_r+0x196>
   43f2e:	461a      	mov	r2, r3
   43f30:	4639      	mov	r1, r7
   43f32:	9301      	str	r3, [sp, #4]
   43f34:	461d      	mov	r5, r3
   43f36:	f000 fce1 	bl	448fc <memmove>
   43f3a:	68a1      	ldr	r1, [r4, #8]
   43f3c:	6822      	ldr	r2, [r4, #0]
   43f3e:	9b01      	ldr	r3, [sp, #4]
   43f40:	1ac9      	subs	r1, r1, r3
   43f42:	4413      	add	r3, r2
   43f44:	60a1      	str	r1, [r4, #8]
   43f46:	6023      	str	r3, [r4, #0]
   43f48:	e763      	b.n	43e12 <__sfvwrite_r+0x1c6>
   43f4a:	220c      	movs	r2, #12
   43f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   43f50:	f8c9 2000 	str.w	r2, [r9]
   43f54:	e778      	b.n	43e48 <__sfvwrite_r+0x1fc>
   43f56:	f04f 30ff 	mov.w	r0, #4294967295
   43f5a:	e768      	b.n	43e2e <__sfvwrite_r+0x1e2>
   43f5c:	7ffffffe 	.word	0x7ffffffe
   43f60:	7ffffc00 	.word	0x7ffffc00

00043f64 <_fwalk_reent>:
   43f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   43f68:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   43f6c:	d01e      	beq.n	43fac <_fwalk_reent+0x48>
   43f6e:	4688      	mov	r8, r1
   43f70:	4606      	mov	r6, r0
   43f72:	f04f 0900 	mov.w	r9, #0
   43f76:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
   43f7a:	3d01      	subs	r5, #1
   43f7c:	d410      	bmi.n	43fa0 <_fwalk_reent+0x3c>
   43f7e:	89a3      	ldrh	r3, [r4, #12]
   43f80:	3d01      	subs	r5, #1
   43f82:	4621      	mov	r1, r4
   43f84:	4630      	mov	r0, r6
   43f86:	2b01      	cmp	r3, #1
   43f88:	d906      	bls.n	43f98 <_fwalk_reent+0x34>
   43f8a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   43f8e:	3301      	adds	r3, #1
   43f90:	d002      	beq.n	43f98 <_fwalk_reent+0x34>
   43f92:	47c0      	blx	r8
   43f94:	ea49 0900 	orr.w	r9, r9, r0
   43f98:	1c6b      	adds	r3, r5, #1
   43f9a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   43f9e:	d1ee      	bne.n	43f7e <_fwalk_reent+0x1a>
   43fa0:	683f      	ldr	r7, [r7, #0]
   43fa2:	2f00      	cmp	r7, #0
   43fa4:	d1e7      	bne.n	43f76 <_fwalk_reent+0x12>
   43fa6:	4648      	mov	r0, r9
   43fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   43fac:	46b9      	mov	r9, r7
   43fae:	4648      	mov	r0, r9
   43fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00043fb4 <rshift>:
   43fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   43fb8:	114b      	asrs	r3, r1, #5
   43fba:	6904      	ldr	r4, [r0, #16]
   43fbc:	429c      	cmp	r4, r3
   43fbe:	dd2e      	ble.n	4401e <rshift+0x6a>
   43fc0:	f100 0c14 	add.w	ip, r0, #20
   43fc4:	f011 011f 	ands.w	r1, r1, #31
   43fc8:	4667      	mov	r7, ip
   43fca:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
   43fce:	eb0c 0583 	add.w	r5, ip, r3, lsl #2
   43fd2:	d02a      	beq.n	4402a <rshift+0x76>
   43fd4:	1d2e      	adds	r6, r5, #4
   43fd6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
   43fda:	f1c1 0820 	rsb	r8, r1, #32
   43fde:	42b4      	cmp	r4, r6
   43fe0:	fa22 f201 	lsr.w	r2, r2, r1
   43fe4:	d913      	bls.n	4400e <rshift+0x5a>
   43fe6:	f100 0e10 	add.w	lr, r0, #16
   43fea:	6833      	ldr	r3, [r6, #0]
   43fec:	fa03 f308 	lsl.w	r3, r3, r8
   43ff0:	4313      	orrs	r3, r2
   43ff2:	f84e 3f04 	str.w	r3, [lr, #4]!
   43ff6:	f856 2b04 	ldr.w	r2, [r6], #4
   43ffa:	42a6      	cmp	r6, r4
   43ffc:	fa22 f201 	lsr.w	r2, r2, r1
   44000:	d3f3      	bcc.n	43fea <rshift+0x36>
   44002:	1b63      	subs	r3, r4, r5
   44004:	3b05      	subs	r3, #5
   44006:	f023 0303 	bic.w	r3, r3, #3
   4400a:	3304      	adds	r3, #4
   4400c:	449c      	add	ip, r3
   4400e:	f8cc 2000 	str.w	r2, [ip]
   44012:	b312      	cbz	r2, 4405a <rshift+0xa6>
   44014:	f10c 0304 	add.w	r3, ip, #4
   44018:	1bda      	subs	r2, r3, r7
   4401a:	1092      	asrs	r2, r2, #2
   4401c:	e018      	b.n	44050 <rshift+0x9c>
   4401e:	2300      	movs	r3, #0
   44020:	6103      	str	r3, [r0, #16]
   44022:	2300      	movs	r3, #0
   44024:	6143      	str	r3, [r0, #20]
   44026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   4402a:	42ac      	cmp	r4, r5
   4402c:	d9f7      	bls.n	4401e <rshift+0x6a>
   4402e:	f100 0210 	add.w	r2, r0, #16
   44032:	462b      	mov	r3, r5
   44034:	f853 1b04 	ldr.w	r1, [r3], #4
   44038:	429c      	cmp	r4, r3
   4403a:	f842 1f04 	str.w	r1, [r2, #4]!
   4403e:	d8f9      	bhi.n	44034 <rshift+0x80>
   44040:	43ea      	mvns	r2, r5
   44042:	4422      	add	r2, r4
   44044:	f022 0203 	bic.w	r2, r2, #3
   44048:	3204      	adds	r2, #4
   4404a:	eb0c 0302 	add.w	r3, ip, r2
   4404e:	1092      	asrs	r2, r2, #2
   44050:	42bb      	cmp	r3, r7
   44052:	6102      	str	r2, [r0, #16]
   44054:	d0e5      	beq.n	44022 <rshift+0x6e>
   44056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   4405a:	4663      	mov	r3, ip
   4405c:	1bda      	subs	r2, r3, r7
   4405e:	1092      	asrs	r2, r2, #2
   44060:	e7f6      	b.n	44050 <rshift+0x9c>
   44062:	bf00      	nop

00044064 <__gethex>:
   44064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44068:	b08d      	sub	sp, #52	; 0x34
   4406a:	4689      	mov	r9, r1
   4406c:	9007      	str	r0, [sp, #28]
   4406e:	9818      	ldr	r0, [sp, #96]	; 0x60
   44070:	9204      	str	r2, [sp, #16]
   44072:	930a      	str	r3, [sp, #40]	; 0x28
   44074:	f000 fb6e 	bl	44754 <__localeconv_l>
   44078:	6803      	ldr	r3, [r0, #0]
   4407a:	4618      	mov	r0, r3
   4407c:	461c      	mov	r4, r3
   4407e:	9305      	str	r3, [sp, #20]
   44080:	f7fc fa80 	bl	40584 <strlen>
   44084:	f8d9 3000 	ldr.w	r3, [r9]
   44088:	1821      	adds	r1, r4, r0
   4408a:	9003      	str	r0, [sp, #12]
   4408c:	789a      	ldrb	r2, [r3, #2]
   4408e:	f811 1c01 	ldrb.w	r1, [r1, #-1]
   44092:	2a30      	cmp	r2, #48	; 0x30
   44094:	9101      	str	r1, [sp, #4]
   44096:	f040 8188 	bne.w	443aa <__gethex+0x346>
   4409a:	3303      	adds	r3, #3
   4409c:	f04f 0800 	mov.w	r8, #0
   440a0:	461c      	mov	r4, r3
   440a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   440a6:	f108 0801 	add.w	r8, r8, #1
   440aa:	2a30      	cmp	r2, #48	; 0x30
   440ac:	d0f8      	beq.n	440a0 <__gethex+0x3c>
   440ae:	4eae      	ldr	r6, [pc, #696]	; (44368 <__gethex+0x304>)
   440b0:	5cb3      	ldrb	r3, [r6, r2]
   440b2:	2b00      	cmp	r3, #0
   440b4:	f000 80d5 	beq.w	44262 <__gethex+0x1fe>
   440b8:	7823      	ldrb	r3, [r4, #0]
   440ba:	f04f 0a00 	mov.w	sl, #0
   440be:	5cf3      	ldrb	r3, [r6, r3]
   440c0:	4655      	mov	r5, sl
   440c2:	4627      	mov	r7, r4
   440c4:	b123      	cbz	r3, 440d0 <__gethex+0x6c>
   440c6:	f817 3f01 	ldrb.w	r3, [r7, #1]!
   440ca:	5cf3      	ldrb	r3, [r6, r3]
   440cc:	2b00      	cmp	r3, #0
   440ce:	d1fa      	bne.n	440c6 <__gethex+0x62>
   440d0:	9a03      	ldr	r2, [sp, #12]
   440d2:	4638      	mov	r0, r7
   440d4:	9905      	ldr	r1, [sp, #20]
   440d6:	f7fc fa83 	bl	405e0 <strncmp>
   440da:	2800      	cmp	r0, #0
   440dc:	f000 8090 	beq.w	44200 <__gethex+0x19c>
   440e0:	783b      	ldrb	r3, [r7, #0]
   440e2:	2d00      	cmp	r5, #0
   440e4:	f040 8090 	bne.w	44208 <__gethex+0x1a4>
   440e8:	2b50      	cmp	r3, #80	; 0x50
   440ea:	9502      	str	r5, [sp, #8]
   440ec:	463d      	mov	r5, r7
   440ee:	f000 8093 	beq.w	44218 <__gethex+0x1b4>
   440f2:	2b70      	cmp	r3, #112	; 0x70
   440f4:	f000 8090 	beq.w	44218 <__gethex+0x1b4>
   440f8:	f8c9 7000 	str.w	r7, [r9]
   440fc:	f1ba 0f00 	cmp.w	sl, #0
   44100:	f040 809d 	bne.w	4423e <__gethex+0x1da>
   44104:	1b2b      	subs	r3, r5, r4
   44106:	4651      	mov	r1, sl
   44108:	3b01      	subs	r3, #1
   4410a:	2b07      	cmp	r3, #7
   4410c:	dd03      	ble.n	44116 <__gethex+0xb2>
   4410e:	105b      	asrs	r3, r3, #1
   44110:	3101      	adds	r1, #1
   44112:	2b07      	cmp	r3, #7
   44114:	dcfb      	bgt.n	4410e <__gethex+0xaa>
   44116:	9807      	ldr	r0, [sp, #28]
   44118:	f000 fc52 	bl	449c0 <_Balloc>
   4411c:	4603      	mov	r3, r0
   4411e:	42ac      	cmp	r4, r5
   44120:	9006      	str	r0, [sp, #24]
   44122:	f103 0314 	add.w	r3, r3, #20
   44126:	9308      	str	r3, [sp, #32]
   44128:	f080 81af 	bcs.w	4448a <__gethex+0x426>
   4412c:	469b      	mov	fp, r3
   4412e:	9b03      	ldr	r3, [sp, #12]
   44130:	2700      	movs	r7, #0
   44132:	f1c3 0301 	rsb	r3, r3, #1
   44136:	46b8      	mov	r8, r7
   44138:	9309      	str	r3, [sp, #36]	; 0x24
   4413a:	e010      	b.n	4415e <__gethex+0xfa>
   4413c:	2f20      	cmp	r7, #32
   4413e:	f000 8087 	beq.w	44250 <__gethex+0x1ec>
   44142:	463a      	mov	r2, r7
   44144:	3704      	adds	r7, #4
   44146:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   4414a:	4655      	mov	r5, sl
   4414c:	5cf3      	ldrb	r3, [r6, r3]
   4414e:	42a5      	cmp	r5, r4
   44150:	f003 030f 	and.w	r3, r3, #15
   44154:	fa03 f302 	lsl.w	r3, r3, r2
   44158:	ea48 0803 	orr.w	r8, r8, r3
   4415c:	d918      	bls.n	44190 <__gethex+0x12c>
   4415e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   44162:	f105 3aff 	add.w	sl, r5, #4294967295
   44166:	9a01      	ldr	r2, [sp, #4]
   44168:	f10b 0904 	add.w	r9, fp, #4
   4416c:	4293      	cmp	r3, r2
   4416e:	d1e5      	bne.n	4413c <__gethex+0xd8>
   44170:	9b09      	ldr	r3, [sp, #36]	; 0x24
   44172:	4453      	add	r3, sl
   44174:	42a3      	cmp	r3, r4
   44176:	d3e1      	bcc.n	4413c <__gethex+0xd8>
   44178:	4618      	mov	r0, r3
   4417a:	9a03      	ldr	r2, [sp, #12]
   4417c:	9905      	ldr	r1, [sp, #20]
   4417e:	930b      	str	r3, [sp, #44]	; 0x2c
   44180:	f7fc fa2e 	bl	405e0 <strncmp>
   44184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   44186:	2800      	cmp	r0, #0
   44188:	d1d8      	bne.n	4413c <__gethex+0xd8>
   4418a:	461d      	mov	r5, r3
   4418c:	42a5      	cmp	r5, r4
   4418e:	d8e6      	bhi.n	4415e <__gethex+0xfa>
   44190:	9b08      	ldr	r3, [sp, #32]
   44192:	4640      	mov	r0, r8
   44194:	9a06      	ldr	r2, [sp, #24]
   44196:	eba9 0903 	sub.w	r9, r9, r3
   4419a:	f8cb 8000 	str.w	r8, [fp]
   4419e:	ea4f 03a9 	mov.w	r3, r9, asr #2
   441a2:	6113      	str	r3, [r2, #16]
   441a4:	015c      	lsls	r4, r3, #5
   441a6:	f000 fcc7 	bl	44b38 <__hi0bits>
   441aa:	9b04      	ldr	r3, [sp, #16]
   441ac:	1a24      	subs	r4, r4, r0
   441ae:	681d      	ldr	r5, [r3, #0]
   441b0:	42ac      	cmp	r4, r5
   441b2:	f300 80db 	bgt.w	4436c <__gethex+0x308>
   441b6:	f2c0 810f 	blt.w	443d8 <__gethex+0x374>
   441ba:	2600      	movs	r6, #0
   441bc:	9b04      	ldr	r3, [sp, #16]
   441be:	9a02      	ldr	r2, [sp, #8]
   441c0:	689b      	ldr	r3, [r3, #8]
   441c2:	4293      	cmp	r3, r2
   441c4:	f2c0 8132 	blt.w	4442c <__gethex+0x3c8>
   441c8:	9804      	ldr	r0, [sp, #16]
   441ca:	9a02      	ldr	r2, [sp, #8]
   441cc:	6843      	ldr	r3, [r0, #4]
   441ce:	4293      	cmp	r3, r2
   441d0:	dd5a      	ble.n	44288 <__gethex+0x224>
   441d2:	1a9c      	subs	r4, r3, r2
   441d4:	42a5      	cmp	r5, r4
   441d6:	f300 80a5 	bgt.w	44324 <__gethex+0x2c0>
   441da:	68c2      	ldr	r2, [r0, #12]
   441dc:	2a02      	cmp	r2, #2
   441de:	f000 818b 	beq.w	444f8 <__gethex+0x494>
   441e2:	2a03      	cmp	r2, #3
   441e4:	f000 8183 	beq.w	444ee <__gethex+0x48a>
   441e8:	2a01      	cmp	r2, #1
   441ea:	f000 815e 	beq.w	444aa <__gethex+0x446>
   441ee:	2450      	movs	r4, #80	; 0x50
   441f0:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
   441f4:	f000 fc0a 	bl	44a0c <_Bfree>
   441f8:	2300      	movs	r3, #0
   441fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
   441fc:	6013      	str	r3, [r2, #0]
   441fe:	e023      	b.n	44248 <__gethex+0x1e4>
   44200:	2d00      	cmp	r5, #0
   44202:	f000 80db 	beq.w	443bc <__gethex+0x358>
   44206:	783b      	ldrb	r3, [r7, #0]
   44208:	1bed      	subs	r5, r5, r7
   4420a:	2b50      	cmp	r3, #80	; 0x50
   4420c:	ea4f 0285 	mov.w	r2, r5, lsl #2
   44210:	463d      	mov	r5, r7
   44212:	9202      	str	r2, [sp, #8]
   44214:	f47f af6d 	bne.w	440f2 <__gethex+0x8e>
   44218:	786b      	ldrb	r3, [r5, #1]
   4421a:	2b2b      	cmp	r3, #43	; 0x2b
   4421c:	f000 80a2 	beq.w	44364 <__gethex+0x300>
   44220:	2b2d      	cmp	r3, #45	; 0x2d
   44222:	d04c      	beq.n	442be <__gethex+0x25a>
   44224:	5cf3      	ldrb	r3, [r6, r3]
   44226:	1c6f      	adds	r7, r5, #1
   44228:	2100      	movs	r1, #0
   4422a:	1e5a      	subs	r2, r3, #1
   4422c:	2a18      	cmp	r2, #24
   4422e:	d94d      	bls.n	442cc <__gethex+0x268>
   44230:	462f      	mov	r7, r5
   44232:	f8c9 7000 	str.w	r7, [r9]
   44236:	f1ba 0f00 	cmp.w	sl, #0
   4423a:	f43f af63 	beq.w	44104 <__gethex+0xa0>
   4423e:	f1b8 0f00 	cmp.w	r8, #0
   44242:	bf0c      	ite	eq
   44244:	2406      	moveq	r4, #6
   44246:	2400      	movne	r4, #0
   44248:	4620      	mov	r0, r4
   4424a:	b00d      	add	sp, #52	; 0x34
   4424c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44250:	465b      	mov	r3, fp
   44252:	2200      	movs	r2, #0
   44254:	46cb      	mov	fp, r9
   44256:	2704      	movs	r7, #4
   44258:	f843 8b08 	str.w	r8, [r3], #8
   4425c:	4690      	mov	r8, r2
   4425e:	4699      	mov	r9, r3
   44260:	e771      	b.n	44146 <__gethex+0xe2>
   44262:	9d03      	ldr	r5, [sp, #12]
   44264:	4620      	mov	r0, r4
   44266:	9905      	ldr	r1, [sp, #20]
   44268:	462a      	mov	r2, r5
   4426a:	f7fc f9b9 	bl	405e0 <strncmp>
   4426e:	2800      	cmp	r0, #0
   44270:	d044      	beq.n	442fc <__gethex+0x298>
   44272:	7822      	ldrb	r2, [r4, #0]
   44274:	4625      	mov	r5, r4
   44276:	2a50      	cmp	r2, #80	; 0x50
   44278:	f000 809b 	beq.w	443b2 <__gethex+0x34e>
   4427c:	2a70      	cmp	r2, #112	; 0x70
   4427e:	f000 8098 	beq.w	443b2 <__gethex+0x34e>
   44282:	f8c9 5000 	str.w	r5, [r9]
   44286:	e7da      	b.n	4423e <__gethex+0x1da>
   44288:	2401      	movs	r4, #1
   4428a:	b166      	cbz	r6, 442a6 <__gethex+0x242>
   4428c:	9b04      	ldr	r3, [sp, #16]
   4428e:	68db      	ldr	r3, [r3, #12]
   44290:	2b02      	cmp	r3, #2
   44292:	f000 80d4 	beq.w	4443e <__gethex+0x3da>
   44296:	2b03      	cmp	r3, #3
   44298:	f000 80d5 	beq.w	44446 <__gethex+0x3e2>
   4429c:	2b01      	cmp	r3, #1
   4429e:	f000 811d 	beq.w	444dc <__gethex+0x478>
   442a2:	f044 0410 	orr.w	r4, r4, #16
   442a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   442a8:	4620      	mov	r0, r4
   442aa:	461a      	mov	r2, r3
   442ac:	9b06      	ldr	r3, [sp, #24]
   442ae:	6013      	str	r3, [r2, #0]
   442b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   442b2:	461a      	mov	r2, r3
   442b4:	9b02      	ldr	r3, [sp, #8]
   442b6:	6013      	str	r3, [r2, #0]
   442b8:	b00d      	add	sp, #52	; 0x34
   442ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   442be:	2101      	movs	r1, #1
   442c0:	78ab      	ldrb	r3, [r5, #2]
   442c2:	1caf      	adds	r7, r5, #2
   442c4:	5cf3      	ldrb	r3, [r6, r3]
   442c6:	1e5a      	subs	r2, r3, #1
   442c8:	2a18      	cmp	r2, #24
   442ca:	d8b1      	bhi.n	44230 <__gethex+0x1cc>
   442cc:	787a      	ldrb	r2, [r7, #1]
   442ce:	3b10      	subs	r3, #16
   442d0:	3701      	adds	r7, #1
   442d2:	5cb2      	ldrb	r2, [r6, r2]
   442d4:	1e50      	subs	r0, r2, #1
   442d6:	2818      	cmp	r0, #24
   442d8:	d80a      	bhi.n	442f0 <__gethex+0x28c>
   442da:	f817 0f01 	ldrb.w	r0, [r7, #1]!
   442de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   442e2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   442e6:	5c32      	ldrb	r2, [r6, r0]
   442e8:	1e50      	subs	r0, r2, #1
   442ea:	3b10      	subs	r3, #16
   442ec:	2818      	cmp	r0, #24
   442ee:	d9f4      	bls.n	442da <__gethex+0x276>
   442f0:	b101      	cbz	r1, 442f4 <__gethex+0x290>
   442f2:	425b      	negs	r3, r3
   442f4:	9a02      	ldr	r2, [sp, #8]
   442f6:	441a      	add	r2, r3
   442f8:	9202      	str	r2, [sp, #8]
   442fa:	e6fd      	b.n	440f8 <__gethex+0x94>
   442fc:	5d62      	ldrb	r2, [r4, r5]
   442fe:	1965      	adds	r5, r4, r5
   44300:	5cb3      	ldrb	r3, [r6, r2]
   44302:	2b00      	cmp	r3, #0
   44304:	d0b7      	beq.n	44276 <__gethex+0x212>
   44306:	2a30      	cmp	r2, #48	; 0x30
   44308:	462c      	mov	r4, r5
   4430a:	d104      	bne.n	44316 <__gethex+0x2b2>
   4430c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   44310:	2b30      	cmp	r3, #48	; 0x30
   44312:	d0fb      	beq.n	4430c <__gethex+0x2a8>
   44314:	5cf3      	ldrb	r3, [r6, r3]
   44316:	fab3 fa83 	clz	sl, r3
   4431a:	f04f 0801 	mov.w	r8, #1
   4431e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
   44322:	e6ce      	b.n	440c2 <__gethex+0x5e>
   44324:	1e67      	subs	r7, r4, #1
   44326:	2e00      	cmp	r6, #0
   44328:	f040 80b7 	bne.w	4449a <__gethex+0x436>
   4432c:	2f00      	cmp	r7, #0
   4432e:	f040 80b6 	bne.w	4449e <__gethex+0x43a>
   44332:	2301      	movs	r3, #1
   44334:	9908      	ldr	r1, [sp, #32]
   44336:	117a      	asrs	r2, r7, #5
   44338:	f007 071f 	and.w	r7, r7, #31
   4433c:	9806      	ldr	r0, [sp, #24]
   4433e:	1b2d      	subs	r5, r5, r4
   44340:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   44344:	fa03 f707 	lsl.w	r7, r3, r7
   44348:	4621      	mov	r1, r4
   4434a:	2402      	movs	r4, #2
   4434c:	4217      	tst	r7, r2
   4434e:	bf18      	it	ne
   44350:	f046 0602 	orrne.w	r6, r6, #2
   44354:	f7ff fe2e 	bl	43fb4 <rshift>
   44358:	9b04      	ldr	r3, [sp, #16]
   4435a:	685b      	ldr	r3, [r3, #4]
   4435c:	9302      	str	r3, [sp, #8]
   4435e:	2e00      	cmp	r6, #0
   44360:	d0a1      	beq.n	442a6 <__gethex+0x242>
   44362:	e793      	b.n	4428c <__gethex+0x228>
   44364:	2100      	movs	r1, #0
   44366:	e7ab      	b.n	442c0 <__gethex+0x25c>
   44368:	0004aff0 	.word	0x0004aff0
   4436c:	1b64      	subs	r4, r4, r5
   4436e:	9806      	ldr	r0, [sp, #24]
   44370:	4621      	mov	r1, r4
   44372:	f000 ff69 	bl	45248 <__any_on>
   44376:	4606      	mov	r6, r0
   44378:	b178      	cbz	r0, 4439a <__gethex+0x336>
   4437a:	1e62      	subs	r2, r4, #1
   4437c:	2601      	movs	r6, #1
   4437e:	9808      	ldr	r0, [sp, #32]
   44380:	1151      	asrs	r1, r2, #5
   44382:	f002 031f 	and.w	r3, r2, #31
   44386:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   4438a:	fa06 f303 	lsl.w	r3, r6, r3
   4438e:	420b      	tst	r3, r1
   44390:	d003      	beq.n	4439a <__gethex+0x336>
   44392:	42b2      	cmp	r2, r6
   44394:	f300 80b4 	bgt.w	44500 <__gethex+0x49c>
   44398:	2602      	movs	r6, #2
   4439a:	9b02      	ldr	r3, [sp, #8]
   4439c:	4621      	mov	r1, r4
   4439e:	9806      	ldr	r0, [sp, #24]
   443a0:	4423      	add	r3, r4
   443a2:	9302      	str	r3, [sp, #8]
   443a4:	f7ff fe06 	bl	43fb4 <rshift>
   443a8:	e708      	b.n	441bc <__gethex+0x158>
   443aa:	1c9c      	adds	r4, r3, #2
   443ac:	f04f 0800 	mov.w	r8, #0
   443b0:	e67d      	b.n	440ae <__gethex+0x4a>
   443b2:	2300      	movs	r3, #0
   443b4:	f04f 0a01 	mov.w	sl, #1
   443b8:	9302      	str	r3, [sp, #8]
   443ba:	e72d      	b.n	44218 <__gethex+0x1b4>
   443bc:	9a03      	ldr	r2, [sp, #12]
   443be:	5cbb      	ldrb	r3, [r7, r2]
   443c0:	18bd      	adds	r5, r7, r2
   443c2:	5cf2      	ldrb	r2, [r6, r3]
   443c4:	462f      	mov	r7, r5
   443c6:	2a00      	cmp	r2, #0
   443c8:	f43f af1e 	beq.w	44208 <__gethex+0x1a4>
   443cc:	f817 3f01 	ldrb.w	r3, [r7, #1]!
   443d0:	5cf2      	ldrb	r2, [r6, r3]
   443d2:	2a00      	cmp	r2, #0
   443d4:	d1fa      	bne.n	443cc <__gethex+0x368>
   443d6:	e717      	b.n	44208 <__gethex+0x1a4>
   443d8:	9b02      	ldr	r3, [sp, #8]
   443da:	1b2a      	subs	r2, r5, r4
   443dc:	2600      	movs	r6, #0
   443de:	1a9b      	subs	r3, r3, r2
   443e0:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
   443e4:	9302      	str	r3, [sp, #8]
   443e6:	f000 fcfb 	bl	44de0 <__lshift>
   443ea:	4603      	mov	r3, r0
   443ec:	9006      	str	r0, [sp, #24]
   443ee:	3314      	adds	r3, #20
   443f0:	9308      	str	r3, [sp, #32]
   443f2:	e6e3      	b.n	441bc <__gethex+0x158>
   443f4:	9b06      	ldr	r3, [sp, #24]
   443f6:	689b      	ldr	r3, [r3, #8]
   443f8:	429e      	cmp	r6, r3
   443fa:	f280 8091 	bge.w	44520 <__gethex+0x4bc>
   443fe:	4633      	mov	r3, r6
   44400:	9806      	ldr	r0, [sp, #24]
   44402:	1c5a      	adds	r2, r3, #1
   44404:	2101      	movs	r1, #1
   44406:	2c02      	cmp	r4, #2
   44408:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   4440c:	6102      	str	r2, [r0, #16]
   4440e:	6159      	str	r1, [r3, #20]
   44410:	d07f      	beq.n	44512 <__gethex+0x4ae>
   44412:	4296      	cmp	r6, r2
   44414:	da34      	bge.n	44480 <__gethex+0x41c>
   44416:	9c02      	ldr	r4, [sp, #8]
   44418:	2101      	movs	r1, #1
   4441a:	9806      	ldr	r0, [sp, #24]
   4441c:	440c      	add	r4, r1
   4441e:	9402      	str	r4, [sp, #8]
   44420:	f7ff fdc8 	bl	43fb4 <rshift>
   44424:	9b04      	ldr	r3, [sp, #16]
   44426:	689b      	ldr	r3, [r3, #8]
   44428:	42a3      	cmp	r3, r4
   4442a:	da2c      	bge.n	44486 <__gethex+0x422>
   4442c:	24a3      	movs	r4, #163	; 0xa3
   4442e:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
   44432:	f000 faeb 	bl	44a0c <_Bfree>
   44436:	2300      	movs	r3, #0
   44438:	9a16      	ldr	r2, [sp, #88]	; 0x58
   4443a:	6013      	str	r3, [r2, #0]
   4443c:	e704      	b.n	44248 <__gethex+0x1e4>
   4443e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   44440:	f1c3 0301 	rsb	r3, r3, #1
   44444:	9317      	str	r3, [sp, #92]	; 0x5c
   44446:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   44448:	2b00      	cmp	r3, #0
   4444a:	f43f af2a 	beq.w	442a2 <__gethex+0x23e>
   4444e:	9b06      	ldr	r3, [sp, #24]
   44450:	2000      	movs	r0, #0
   44452:	f8dd c020 	ldr.w	ip, [sp, #32]
   44456:	691e      	ldr	r6, [r3, #16]
   44458:	4663      	mov	r3, ip
   4445a:	00b7      	lsls	r7, r6, #2
   4445c:	eb0c 0107 	add.w	r1, ip, r7
   44460:	e003      	b.n	4446a <__gethex+0x406>
   44462:	4299      	cmp	r1, r3
   44464:	f843 0c04 	str.w	r0, [r3, #-4]
   44468:	d9c4      	bls.n	443f4 <__gethex+0x390>
   4446a:	469e      	mov	lr, r3
   4446c:	f853 2b04 	ldr.w	r2, [r3], #4
   44470:	f1b2 3fff 	cmp.w	r2, #4294967295
   44474:	d0f5      	beq.n	44462 <__gethex+0x3fe>
   44476:	3201      	adds	r2, #1
   44478:	2c02      	cmp	r4, #2
   4447a:	f8ce 2000 	str.w	r2, [lr]
   4447e:	d048      	beq.n	44512 <__gethex+0x4ae>
   44480:	f015 051f 	ands.w	r5, r5, #31
   44484:	d169      	bne.n	4455a <__gethex+0x4f6>
   44486:	2421      	movs	r4, #33	; 0x21
   44488:	e70d      	b.n	442a6 <__gethex+0x242>
   4448a:	9b06      	ldr	r3, [sp, #24]
   4448c:	f04f 0800 	mov.w	r8, #0
   44490:	f8dd b020 	ldr.w	fp, [sp, #32]
   44494:	f103 0918 	add.w	r9, r3, #24
   44498:	e67a      	b.n	44190 <__gethex+0x12c>
   4449a:	2601      	movs	r6, #1
   4449c:	e749      	b.n	44332 <__gethex+0x2ce>
   4449e:	4639      	mov	r1, r7
   444a0:	9806      	ldr	r0, [sp, #24]
   444a2:	f000 fed1 	bl	45248 <__any_on>
   444a6:	4606      	mov	r6, r0
   444a8:	e743      	b.n	44332 <__gethex+0x2ce>
   444aa:	42a5      	cmp	r5, r4
   444ac:	f47f ae9f 	bne.w	441ee <__gethex+0x18a>
   444b0:	2d01      	cmp	r5, #1
   444b2:	dd08      	ble.n	444c6 <__gethex+0x462>
   444b4:	1e69      	subs	r1, r5, #1
   444b6:	9806      	ldr	r0, [sp, #24]
   444b8:	f000 fec6 	bl	45248 <__any_on>
   444bc:	2800      	cmp	r0, #0
   444be:	f43f ae96 	beq.w	441ee <__gethex+0x18a>
   444c2:	9b04      	ldr	r3, [sp, #16]
   444c4:	685b      	ldr	r3, [r3, #4]
   444c6:	990a      	ldr	r1, [sp, #40]	; 0x28
   444c8:	2201      	movs	r2, #1
   444ca:	2462      	movs	r4, #98	; 0x62
   444cc:	600b      	str	r3, [r1, #0]
   444ce:	9b06      	ldr	r3, [sp, #24]
   444d0:	9908      	ldr	r1, [sp, #32]
   444d2:	611a      	str	r2, [r3, #16]
   444d4:	600a      	str	r2, [r1, #0]
   444d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   444d8:	6013      	str	r3, [r2, #0]
   444da:	e6b5      	b.n	44248 <__gethex+0x1e4>
   444dc:	07b2      	lsls	r2, r6, #30
   444de:	f57f aee0 	bpl.w	442a2 <__gethex+0x23e>
   444e2:	9b08      	ldr	r3, [sp, #32]
   444e4:	681b      	ldr	r3, [r3, #0]
   444e6:	431e      	orrs	r6, r3
   444e8:	07f3      	lsls	r3, r6, #31
   444ea:	d4b0      	bmi.n	4444e <__gethex+0x3ea>
   444ec:	e6d9      	b.n	442a2 <__gethex+0x23e>
   444ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   444f0:	2a00      	cmp	r2, #0
   444f2:	f43f ae7c 	beq.w	441ee <__gethex+0x18a>
   444f6:	e7e6      	b.n	444c6 <__gethex+0x462>
   444f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   444fa:	2a00      	cmp	r2, #0
   444fc:	d0e3      	beq.n	444c6 <__gethex+0x462>
   444fe:	e676      	b.n	441ee <__gethex+0x18a>
   44500:	1ea1      	subs	r1, r4, #2
   44502:	9806      	ldr	r0, [sp, #24]
   44504:	f000 fea0 	bl	45248 <__any_on>
   44508:	2800      	cmp	r0, #0
   4450a:	f43f af45 	beq.w	44398 <__gethex+0x334>
   4450e:	2603      	movs	r6, #3
   44510:	e743      	b.n	4439a <__gethex+0x336>
   44512:	9b04      	ldr	r3, [sp, #16]
   44514:	681b      	ldr	r3, [r3, #0]
   44516:	3b01      	subs	r3, #1
   44518:	42ab      	cmp	r3, r5
   4451a:	d028      	beq.n	4456e <__gethex+0x50a>
   4451c:	2422      	movs	r4, #34	; 0x22
   4451e:	e6c2      	b.n	442a6 <__gethex+0x242>
   44520:	9b06      	ldr	r3, [sp, #24]
   44522:	f8dd 901c 	ldr.w	r9, [sp, #28]
   44526:	6859      	ldr	r1, [r3, #4]
   44528:	4648      	mov	r0, r9
   4452a:	3101      	adds	r1, #1
   4452c:	f000 fa48 	bl	449c0 <_Balloc>
   44530:	9a06      	ldr	r2, [sp, #24]
   44532:	4680      	mov	r8, r0
   44534:	300c      	adds	r0, #12
   44536:	6913      	ldr	r3, [r2, #16]
   44538:	f102 010c 	add.w	r1, r2, #12
   4453c:	3302      	adds	r3, #2
   4453e:	009a      	lsls	r2, r3, #2
   44540:	f7d5 fcb6 	bl	19eb0 <memcpy>
   44544:	9906      	ldr	r1, [sp, #24]
   44546:	4648      	mov	r0, r9
   44548:	f000 fa60 	bl	44a0c <_Bfree>
   4454c:	f8cd 8018 	str.w	r8, [sp, #24]
   44550:	f108 0c14 	add.w	ip, r8, #20
   44554:	f8d8 3010 	ldr.w	r3, [r8, #16]
   44558:	e752      	b.n	44400 <__gethex+0x39c>
   4455a:	4467      	add	r7, ip
   4455c:	f1c5 0520 	rsb	r5, r5, #32
   44560:	f857 0c04 	ldr.w	r0, [r7, #-4]
   44564:	f000 fae8 	bl	44b38 <__hi0bits>
   44568:	42a8      	cmp	r0, r5
   4456a:	da8c      	bge.n	44486 <__gethex+0x422>
   4456c:	e753      	b.n	44416 <__gethex+0x3b2>
   4456e:	116a      	asrs	r2, r5, #5
   44570:	2301      	movs	r3, #1
   44572:	f005 051f 	and.w	r5, r5, #31
   44576:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
   4457a:	40ab      	lsls	r3, r5
   4457c:	4213      	tst	r3, r2
   4457e:	bf14      	ite	ne
   44580:	2421      	movne	r4, #33	; 0x21
   44582:	2422      	moveq	r4, #34	; 0x22
   44584:	e68f      	b.n	442a6 <__gethex+0x242>
   44586:	bf00      	nop

00044588 <__match>:
   44588:	b430      	push	{r4, r5}
   4458a:	6804      	ldr	r4, [r0, #0]
   4458c:	3401      	adds	r4, #1
   4458e:	e008      	b.n	445a2 <__match+0x1a>
   44590:	f814 3b01 	ldrb.w	r3, [r4], #1
   44594:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
   44598:	2d19      	cmp	r5, #25
   4459a:	bf98      	it	ls
   4459c:	3320      	addls	r3, #32
   4459e:	4293      	cmp	r3, r2
   445a0:	d107      	bne.n	445b2 <__match+0x2a>
   445a2:	f811 2b01 	ldrb.w	r2, [r1], #1
   445a6:	2a00      	cmp	r2, #0
   445a8:	d1f2      	bne.n	44590 <__match+0x8>
   445aa:	6004      	str	r4, [r0, #0]
   445ac:	2001      	movs	r0, #1
   445ae:	bc30      	pop	{r4, r5}
   445b0:	4770      	bx	lr
   445b2:	2000      	movs	r0, #0
   445b4:	bc30      	pop	{r4, r5}
   445b6:	4770      	bx	lr

000445b8 <__hexnan>:
   445b8:	680b      	ldr	r3, [r1, #0]
   445ba:	1159      	asrs	r1, r3, #5
   445bc:	f013 031f 	ands.w	r3, r3, #31
   445c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   445c4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   445c8:	b085      	sub	sp, #20
   445ca:	9002      	str	r0, [sp, #8]
   445cc:	9101      	str	r1, [sp, #4]
   445ce:	9303      	str	r3, [sp, #12]
   445d0:	d001      	beq.n	445d6 <__hexnan+0x1e>
   445d2:	3104      	adds	r1, #4
   445d4:	9101      	str	r1, [sp, #4]
   445d6:	9b02      	ldr	r3, [sp, #8]
   445d8:	2100      	movs	r1, #0
   445da:	9801      	ldr	r0, [sp, #4]
   445dc:	681b      	ldr	r3, [r3, #0]
   445de:	460d      	mov	r5, r1
   445e0:	f1a0 0804 	sub.w	r8, r0, #4
   445e4:	f840 1c04 	str.w	r1, [r0, #-4]
   445e8:	785c      	ldrb	r4, [r3, #1]
   445ea:	468a      	mov	sl, r1
   445ec:	46c6      	mov	lr, r8
   445ee:	4640      	mov	r0, r8
   445f0:	468c      	mov	ip, r1
   445f2:	f8df 9140 	ldr.w	r9, [pc, #320]	; 44734 <__hexnan+0x17c>
   445f6:	1c5e      	adds	r6, r3, #1
   445f8:	b364      	cbz	r4, 44654 <__hexnan+0x9c>
   445fa:	f819 1004 	ldrb.w	r1, [r9, r4]
   445fe:	2900      	cmp	r1, #0
   44600:	d15f      	bne.n	446c2 <__hexnan+0x10a>
   44602:	2c20      	cmp	r4, #32
   44604:	d874      	bhi.n	446f0 <__hexnan+0x138>
   44606:	45d4      	cmp	ip, sl
   44608:	dd1f      	ble.n	4464a <__hexnan+0x92>
   4460a:	4570      	cmp	r0, lr
   4460c:	d213      	bcs.n	44636 <__hexnan+0x7e>
   4460e:	2d07      	cmp	r5, #7
   44610:	dc11      	bgt.n	44636 <__hexnan+0x7e>
   44612:	f1c5 0508 	rsb	r5, r5, #8
   44616:	6804      	ldr	r4, [r0, #0]
   44618:	4603      	mov	r3, r0
   4461a:	00ad      	lsls	r5, r5, #2
   4461c:	f1c5 0b20 	rsb	fp, r5, #32
   44620:	685f      	ldr	r7, [r3, #4]
   44622:	fa07 f10b 	lsl.w	r1, r7, fp
   44626:	4321      	orrs	r1, r4
   44628:	fa27 f405 	lsr.w	r4, r7, r5
   4462c:	6019      	str	r1, [r3, #0]
   4462e:	f843 4f04 	str.w	r4, [r3, #4]!
   44632:	459e      	cmp	lr, r3
   44634:	d8f4      	bhi.n	44620 <__hexnan+0x68>
   44636:	4290      	cmp	r0, r2
   44638:	d957      	bls.n	446ea <__hexnan+0x132>
   4463a:	2300      	movs	r3, #0
   4463c:	f1a0 0e04 	sub.w	lr, r0, #4
   44640:	46e2      	mov	sl, ip
   44642:	f840 3c04 	str.w	r3, [r0, #-4]
   44646:	461d      	mov	r5, r3
   44648:	4670      	mov	r0, lr
   4464a:	4633      	mov	r3, r6
   4464c:	785c      	ldrb	r4, [r3, #1]
   4464e:	1c5e      	adds	r6, r3, #1
   44650:	2c00      	cmp	r4, #0
   44652:	d1d2      	bne.n	445fa <__hexnan+0x42>
   44654:	f1bc 0f00 	cmp.w	ip, #0
   44658:	d04c      	beq.n	446f4 <__hexnan+0x13c>
   4465a:	4570      	cmp	r0, lr
   4465c:	d213      	bcs.n	44686 <__hexnan+0xce>
   4465e:	2d07      	cmp	r5, #7
   44660:	dc11      	bgt.n	44686 <__hexnan+0xce>
   44662:	f1c5 0508 	rsb	r5, r5, #8
   44666:	6804      	ldr	r4, [r0, #0]
   44668:	4603      	mov	r3, r0
   4466a:	00ad      	lsls	r5, r5, #2
   4466c:	f1c5 0720 	rsb	r7, r5, #32
   44670:	685e      	ldr	r6, [r3, #4]
   44672:	fa06 f107 	lsl.w	r1, r6, r7
   44676:	4321      	orrs	r1, r4
   44678:	fa26 f405 	lsr.w	r4, r6, r5
   4467c:	6019      	str	r1, [r3, #0]
   4467e:	f843 4f04 	str.w	r4, [r3, #4]!
   44682:	459e      	cmp	lr, r3
   44684:	d8f4      	bhi.n	44670 <__hexnan+0xb8>
   44686:	4290      	cmp	r0, r2
   44688:	d93c      	bls.n	44704 <__hexnan+0x14c>
   4468a:	4613      	mov	r3, r2
   4468c:	f850 1b04 	ldr.w	r1, [r0], #4
   44690:	4580      	cmp	r8, r0
   44692:	f843 1b04 	str.w	r1, [r3], #4
   44696:	d2f9      	bcs.n	4468c <__hexnan+0xd4>
   44698:	2100      	movs	r1, #0
   4469a:	f843 1b04 	str.w	r1, [r3], #4
   4469e:	4598      	cmp	r8, r3
   446a0:	d2fb      	bcs.n	4469a <__hexnan+0xe2>
   446a2:	9b01      	ldr	r3, [sp, #4]
   446a4:	f853 1c04 	ldr.w	r1, [r3, #-4]
   446a8:	b119      	cbz	r1, 446b2 <__hexnan+0xfa>
   446aa:	e027      	b.n	446fc <__hexnan+0x144>
   446ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   446b0:	bb23      	cbnz	r3, 446fc <__hexnan+0x144>
   446b2:	4542      	cmp	r2, r8
   446b4:	d1fa      	bne.n	446ac <__hexnan+0xf4>
   446b6:	2301      	movs	r3, #1
   446b8:	2005      	movs	r0, #5
   446ba:	6013      	str	r3, [r2, #0]
   446bc:	b005      	add	sp, #20
   446be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   446c2:	3501      	adds	r5, #1
   446c4:	f10c 0c01 	add.w	ip, ip, #1
   446c8:	2d08      	cmp	r5, #8
   446ca:	dc07      	bgt.n	446dc <__hexnan+0x124>
   446cc:	6803      	ldr	r3, [r0, #0]
   446ce:	011b      	lsls	r3, r3, #4
   446d0:	f001 010f 	and.w	r1, r1, #15
   446d4:	4319      	orrs	r1, r3
   446d6:	4633      	mov	r3, r6
   446d8:	6001      	str	r1, [r0, #0]
   446da:	e7b7      	b.n	4464c <__hexnan+0x94>
   446dc:	4290      	cmp	r0, r2
   446de:	d9b4      	bls.n	4464a <__hexnan+0x92>
   446e0:	2300      	movs	r3, #0
   446e2:	3804      	subs	r0, #4
   446e4:	2501      	movs	r5, #1
   446e6:	6003      	str	r3, [r0, #0]
   446e8:	e7f2      	b.n	446d0 <__hexnan+0x118>
   446ea:	2508      	movs	r5, #8
   446ec:	4633      	mov	r3, r6
   446ee:	e7ad      	b.n	4464c <__hexnan+0x94>
   446f0:	2c29      	cmp	r4, #41	; 0x29
   446f2:	d017      	beq.n	44724 <__hexnan+0x16c>
   446f4:	2004      	movs	r0, #4
   446f6:	b005      	add	sp, #20
   446f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   446fc:	2005      	movs	r0, #5
   446fe:	b005      	add	sp, #20
   44700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44704:	9c01      	ldr	r4, [sp, #4]
   44706:	9b03      	ldr	r3, [sp, #12]
   44708:	f854 1c04 	ldr.w	r1, [r4, #-4]
   4470c:	2b00      	cmp	r3, #0
   4470e:	d0cb      	beq.n	446a8 <__hexnan+0xf0>
   44710:	f1c3 0320 	rsb	r3, r3, #32
   44714:	f04f 30ff 	mov.w	r0, #4294967295
   44718:	fa20 f303 	lsr.w	r3, r0, r3
   4471c:	4019      	ands	r1, r3
   4471e:	f844 1c04 	str.w	r1, [r4, #-4]
   44722:	e7c1      	b.n	446a8 <__hexnan+0xf0>
   44724:	3302      	adds	r3, #2
   44726:	9902      	ldr	r1, [sp, #8]
   44728:	600b      	str	r3, [r1, #0]
   4472a:	f1bc 0f00 	cmp.w	ip, #0
   4472e:	d194      	bne.n	4465a <__hexnan+0xa2>
   44730:	e7e0      	b.n	446f4 <__hexnan+0x13c>
   44732:	bf00      	nop
   44734:	0004aff0 	.word	0x0004aff0

00044738 <iswspace>:
   44738:	28ff      	cmp	r0, #255	; 0xff
   4473a:	d901      	bls.n	44740 <iswspace+0x8>
   4473c:	2000      	movs	r0, #0
   4473e:	4770      	bx	lr
   44740:	b510      	push	{r4, lr}
   44742:	4604      	mov	r4, r0
   44744:	f7fa ff9a 	bl	3f67c <__locale_ctype_ptr>
   44748:	4420      	add	r0, r4
   4474a:	7840      	ldrb	r0, [r0, #1]
   4474c:	f000 0008 	and.w	r0, r0, #8
   44750:	bd10      	pop	{r4, pc}
   44752:	bf00      	nop

00044754 <__localeconv_l>:
   44754:	30f0      	adds	r0, #240	; 0xf0
   44756:	4770      	bx	lr

00044758 <_localeconv_r>:
   44758:	4a04      	ldr	r2, [pc, #16]	; (4476c <_localeconv_r+0x14>)
   4475a:	4b05      	ldr	r3, [pc, #20]	; (44770 <_localeconv_r+0x18>)
   4475c:	6812      	ldr	r2, [r2, #0]
   4475e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   44760:	2800      	cmp	r0, #0
   44762:	bf08      	it	eq
   44764:	4618      	moveq	r0, r3
   44766:	30f0      	adds	r0, #240	; 0xf0
   44768:	4770      	bx	lr
   4476a:	bf00      	nop
   4476c:	20031c24 	.word	0x20031c24
   44770:	20031c28 	.word	0x20031c28

00044774 <__retarget_lock_init_recursive>:
   44774:	4770      	bx	lr
   44776:	bf00      	nop

00044778 <__retarget_lock_close_recursive>:
   44778:	4770      	bx	lr
   4477a:	bf00      	nop

0004477c <__retarget_lock_acquire_recursive>:
   4477c:	4770      	bx	lr
   4477e:	bf00      	nop

00044780 <__retarget_lock_release_recursive>:
   44780:	4770      	bx	lr
   44782:	bf00      	nop

00044784 <_lseek_r>:
   44784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44786:	460e      	mov	r6, r1
   44788:	4c08      	ldr	r4, [pc, #32]	; (447ac <_lseek_r+0x28>)
   4478a:	2500      	movs	r5, #0
   4478c:	4611      	mov	r1, r2
   4478e:	4607      	mov	r7, r0
   44790:	461a      	mov	r2, r3
   44792:	4630      	mov	r0, r6
   44794:	6025      	str	r5, [r4, #0]
   44796:	f002 f988 	bl	46aaa <_lseek>
   4479a:	1c43      	adds	r3, r0, #1
   4479c:	d000      	beq.n	447a0 <_lseek_r+0x1c>
   4479e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   447a0:	6823      	ldr	r3, [r4, #0]
   447a2:	2b00      	cmp	r3, #0
   447a4:	d0fb      	beq.n	4479e <_lseek_r+0x1a>
   447a6:	603b      	str	r3, [r7, #0]
   447a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   447aa:	bf00      	nop
   447ac:	2002c4ec 	.word	0x2002c4ec

000447b0 <__swhatbuf_r>:
   447b0:	b570      	push	{r4, r5, r6, lr}
   447b2:	460c      	mov	r4, r1
   447b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   447b8:	b096      	sub	sp, #88	; 0x58
   447ba:	4615      	mov	r5, r2
   447bc:	2900      	cmp	r1, #0
   447be:	461e      	mov	r6, r3
   447c0:	da0f      	bge.n	447e2 <__swhatbuf_r+0x32>
   447c2:	89a2      	ldrh	r2, [r4, #12]
   447c4:	2300      	movs	r3, #0
   447c6:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   447ca:	6033      	str	r3, [r6, #0]
   447cc:	d104      	bne.n	447d8 <__swhatbuf_r+0x28>
   447ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
   447d2:	602b      	str	r3, [r5, #0]
   447d4:	b016      	add	sp, #88	; 0x58
   447d6:	bd70      	pop	{r4, r5, r6, pc}
   447d8:	2240      	movs	r2, #64	; 0x40
   447da:	4618      	mov	r0, r3
   447dc:	602a      	str	r2, [r5, #0]
   447de:	b016      	add	sp, #88	; 0x58
   447e0:	bd70      	pop	{r4, r5, r6, pc}
   447e2:	466a      	mov	r2, sp
   447e4:	f001 fa80 	bl	45ce8 <_fstat_r>
   447e8:	2800      	cmp	r0, #0
   447ea:	dbea      	blt.n	447c2 <__swhatbuf_r+0x12>
   447ec:	9b01      	ldr	r3, [sp, #4]
   447ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
   447f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   447f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   447fa:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   447fe:	fab3 f383 	clz	r3, r3
   44802:	095b      	lsrs	r3, r3, #5
   44804:	6033      	str	r3, [r6, #0]
   44806:	602a      	str	r2, [r5, #0]
   44808:	b016      	add	sp, #88	; 0x58
   4480a:	bd70      	pop	{r4, r5, r6, pc}

0004480c <__smakebuf_r>:
   4480c:	898a      	ldrh	r2, [r1, #12]
   4480e:	460b      	mov	r3, r1
   44810:	0792      	lsls	r2, r2, #30
   44812:	d506      	bpl.n	44822 <__smakebuf_r+0x16>
   44814:	f101 0243 	add.w	r2, r1, #67	; 0x43
   44818:	2101      	movs	r1, #1
   4481a:	601a      	str	r2, [r3, #0]
   4481c:	e9c3 2104 	strd	r2, r1, [r3, #16]
   44820:	4770      	bx	lr
   44822:	b570      	push	{r4, r5, r6, lr}
   44824:	b082      	sub	sp, #8
   44826:	4605      	mov	r5, r0
   44828:	460c      	mov	r4, r1
   4482a:	ab01      	add	r3, sp, #4
   4482c:	466a      	mov	r2, sp
   4482e:	f7ff ffbf 	bl	447b0 <__swhatbuf_r>
   44832:	9900      	ldr	r1, [sp, #0]
   44834:	4606      	mov	r6, r0
   44836:	4628      	mov	r0, r5
   44838:	f7fa ff3e 	bl	3f6b8 <_malloc_r>
   4483c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   44840:	b1d8      	cbz	r0, 4487a <__smakebuf_r+0x6e>
   44842:	4a16      	ldr	r2, [pc, #88]	; (4489c <__smakebuf_r+0x90>)
   44844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   44848:	9900      	ldr	r1, [sp, #0]
   4484a:	63ea      	str	r2, [r5, #60]	; 0x3c
   4484c:	9a01      	ldr	r2, [sp, #4]
   4484e:	81a3      	strh	r3, [r4, #12]
   44850:	6020      	str	r0, [r4, #0]
   44852:	e9c4 0104 	strd	r0, r1, [r4, #16]
   44856:	b91a      	cbnz	r2, 44860 <__smakebuf_r+0x54>
   44858:	4333      	orrs	r3, r6
   4485a:	81a3      	strh	r3, [r4, #12]
   4485c:	b002      	add	sp, #8
   4485e:	bd70      	pop	{r4, r5, r6, pc}
   44860:	4628      	mov	r0, r5
   44862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   44866:	f001 fa53 	bl	45d10 <_isatty_r>
   4486a:	b1a0      	cbz	r0, 44896 <__smakebuf_r+0x8a>
   4486c:	89a3      	ldrh	r3, [r4, #12]
   4486e:	f023 0303 	bic.w	r3, r3, #3
   44872:	f043 0301 	orr.w	r3, r3, #1
   44876:	b21b      	sxth	r3, r3
   44878:	e7ee      	b.n	44858 <__smakebuf_r+0x4c>
   4487a:	059a      	lsls	r2, r3, #22
   4487c:	d4ee      	bmi.n	4485c <__smakebuf_r+0x50>
   4487e:	f023 0303 	bic.w	r3, r3, #3
   44882:	f104 0243 	add.w	r2, r4, #67	; 0x43
   44886:	2101      	movs	r1, #1
   44888:	f043 0302 	orr.w	r3, r3, #2
   4488c:	6022      	str	r2, [r4, #0]
   4488e:	6122      	str	r2, [r4, #16]
   44890:	81a3      	strh	r3, [r4, #12]
   44892:	6161      	str	r1, [r4, #20]
   44894:	e7e2      	b.n	4485c <__smakebuf_r+0x50>
   44896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   4489a:	e7dd      	b.n	44858 <__smakebuf_r+0x4c>
   4489c:	00043841 	.word	0x00043841

000448a0 <_mbrtowc_r>:
   448a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   448a2:	4c13      	ldr	r4, [pc, #76]	; (448f0 <_mbrtowc_r+0x50>)
   448a4:	b083      	sub	sp, #12
   448a6:	4607      	mov	r7, r0
   448a8:	6824      	ldr	r4, [r4, #0]
   448aa:	9d08      	ldr	r5, [sp, #32]
   448ac:	6b64      	ldr	r4, [r4, #52]	; 0x34
   448ae:	b15a      	cbz	r2, 448c8 <_mbrtowc_r+0x28>
   448b0:	4e10      	ldr	r6, [pc, #64]	; (448f4 <_mbrtowc_r+0x54>)
   448b2:	9500      	str	r5, [sp, #0]
   448b4:	2c00      	cmp	r4, #0
   448b6:	bf08      	it	eq
   448b8:	4634      	moveq	r4, r6
   448ba:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
   448be:	47a0      	blx	r4
   448c0:	1c43      	adds	r3, r0, #1
   448c2:	d00f      	beq.n	448e4 <_mbrtowc_r+0x44>
   448c4:	b003      	add	sp, #12
   448c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   448c8:	4616      	mov	r6, r2
   448ca:	4a0a      	ldr	r2, [pc, #40]	; (448f4 <_mbrtowc_r+0x54>)
   448cc:	9500      	str	r5, [sp, #0]
   448ce:	2301      	movs	r3, #1
   448d0:	2c00      	cmp	r4, #0
   448d2:	bf08      	it	eq
   448d4:	4614      	moveq	r4, r2
   448d6:	4631      	mov	r1, r6
   448d8:	4a07      	ldr	r2, [pc, #28]	; (448f8 <_mbrtowc_r+0x58>)
   448da:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
   448de:	47a0      	blx	r4
   448e0:	1c43      	adds	r3, r0, #1
   448e2:	d1ef      	bne.n	448c4 <_mbrtowc_r+0x24>
   448e4:	2200      	movs	r2, #0
   448e6:	238a      	movs	r3, #138	; 0x8a
   448e8:	602a      	str	r2, [r5, #0]
   448ea:	603b      	str	r3, [r7, #0]
   448ec:	b003      	add	sp, #12
   448ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   448f0:	20031c24 	.word	0x20031c24
   448f4:	20031c28 	.word	0x20031c28
   448f8:	0004a0d8 	.word	0x0004a0d8

000448fc <memmove>:
   448fc:	4288      	cmp	r0, r1
   448fe:	b4f0      	push	{r4, r5, r6, r7}
   44900:	d90d      	bls.n	4491e <memmove+0x22>
   44902:	188b      	adds	r3, r1, r2
   44904:	4283      	cmp	r3, r0
   44906:	d90a      	bls.n	4491e <memmove+0x22>
   44908:	1884      	adds	r4, r0, r2
   4490a:	b132      	cbz	r2, 4491a <memmove+0x1e>
   4490c:	4622      	mov	r2, r4
   4490e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   44912:	4299      	cmp	r1, r3
   44914:	f802 4d01 	strb.w	r4, [r2, #-1]!
   44918:	d1f9      	bne.n	4490e <memmove+0x12>
   4491a:	bcf0      	pop	{r4, r5, r6, r7}
   4491c:	4770      	bx	lr
   4491e:	2a0f      	cmp	r2, #15
   44920:	d948      	bls.n	449b4 <memmove+0xb8>
   44922:	ea40 0301 	orr.w	r3, r0, r1
   44926:	079b      	lsls	r3, r3, #30
   44928:	d146      	bne.n	449b8 <memmove+0xbc>
   4492a:	f1a2 0310 	sub.w	r3, r2, #16
   4492e:	f101 0720 	add.w	r7, r1, #32
   44932:	f101 0410 	add.w	r4, r1, #16
   44936:	f100 0510 	add.w	r5, r0, #16
   4493a:	091b      	lsrs	r3, r3, #4
   4493c:	eb07 1703 	add.w	r7, r7, r3, lsl #4
   44940:	f854 6c10 	ldr.w	r6, [r4, #-16]
   44944:	3410      	adds	r4, #16
   44946:	3510      	adds	r5, #16
   44948:	f845 6c20 	str.w	r6, [r5, #-32]
   4494c:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   44950:	f845 6c1c 	str.w	r6, [r5, #-28]
   44954:	f854 6c18 	ldr.w	r6, [r4, #-24]
   44958:	f845 6c18 	str.w	r6, [r5, #-24]
   4495c:	f854 6c14 	ldr.w	r6, [r4, #-20]
   44960:	42bc      	cmp	r4, r7
   44962:	f845 6c14 	str.w	r6, [r5, #-20]
   44966:	d1eb      	bne.n	44940 <memmove+0x44>
   44968:	3301      	adds	r3, #1
   4496a:	f002 050f 	and.w	r5, r2, #15
   4496e:	011b      	lsls	r3, r3, #4
   44970:	2d03      	cmp	r5, #3
   44972:	4419      	add	r1, r3
   44974:	4403      	add	r3, r0
   44976:	d921      	bls.n	449bc <memmove+0xc0>
   44978:	1f1f      	subs	r7, r3, #4
   4497a:	460e      	mov	r6, r1
   4497c:	462c      	mov	r4, r5
   4497e:	3c04      	subs	r4, #4
   44980:	f856 cb04 	ldr.w	ip, [r6], #4
   44984:	2c03      	cmp	r4, #3
   44986:	f847 cf04 	str.w	ip, [r7, #4]!
   4498a:	d8f8      	bhi.n	4497e <memmove+0x82>
   4498c:	1f2c      	subs	r4, r5, #4
   4498e:	f002 0203 	and.w	r2, r2, #3
   44992:	f024 0403 	bic.w	r4, r4, #3
   44996:	3404      	adds	r4, #4
   44998:	4423      	add	r3, r4
   4499a:	4421      	add	r1, r4
   4499c:	2a00      	cmp	r2, #0
   4499e:	d0bc      	beq.n	4491a <memmove+0x1e>
   449a0:	3b01      	subs	r3, #1
   449a2:	440a      	add	r2, r1
   449a4:	f811 4b01 	ldrb.w	r4, [r1], #1
   449a8:	4291      	cmp	r1, r2
   449aa:	f803 4f01 	strb.w	r4, [r3, #1]!
   449ae:	d1f9      	bne.n	449a4 <memmove+0xa8>
   449b0:	bcf0      	pop	{r4, r5, r6, r7}
   449b2:	4770      	bx	lr
   449b4:	4603      	mov	r3, r0
   449b6:	e7f1      	b.n	4499c <memmove+0xa0>
   449b8:	4603      	mov	r3, r0
   449ba:	e7f1      	b.n	449a0 <memmove+0xa4>
   449bc:	462a      	mov	r2, r5
   449be:	e7ed      	b.n	4499c <memmove+0xa0>

000449c0 <_Balloc>:
   449c0:	b538      	push	{r3, r4, r5, lr}
   449c2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   449c4:	4605      	mov	r5, r0
   449c6:	460c      	mov	r4, r1
   449c8:	b14b      	cbz	r3, 449de <_Balloc+0x1e>
   449ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   449ce:	b180      	cbz	r0, 449f2 <_Balloc+0x32>
   449d0:	6802      	ldr	r2, [r0, #0]
   449d2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   449d6:	2300      	movs	r3, #0
   449d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   449dc:	bd38      	pop	{r3, r4, r5, pc}
   449de:	2221      	movs	r2, #33	; 0x21
   449e0:	2104      	movs	r1, #4
   449e2:	f001 f8e3 	bl	45bac <_calloc_r>
   449e6:	4603      	mov	r3, r0
   449e8:	64e8      	str	r0, [r5, #76]	; 0x4c
   449ea:	2800      	cmp	r0, #0
   449ec:	d1ed      	bne.n	449ca <_Balloc+0xa>
   449ee:	2000      	movs	r0, #0
   449f0:	bd38      	pop	{r3, r4, r5, pc}
   449f2:	2101      	movs	r1, #1
   449f4:	4628      	mov	r0, r5
   449f6:	fa01 f504 	lsl.w	r5, r1, r4
   449fa:	1d6a      	adds	r2, r5, #5
   449fc:	0092      	lsls	r2, r2, #2
   449fe:	f001 f8d5 	bl	45bac <_calloc_r>
   44a02:	2800      	cmp	r0, #0
   44a04:	d0f3      	beq.n	449ee <_Balloc+0x2e>
   44a06:	e9c0 4501 	strd	r4, r5, [r0, #4]
   44a0a:	e7e4      	b.n	449d6 <_Balloc+0x16>

00044a0c <_Bfree>:
   44a0c:	b131      	cbz	r1, 44a1c <_Bfree+0x10>
   44a0e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   44a10:	684a      	ldr	r2, [r1, #4]
   44a12:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   44a16:	6008      	str	r0, [r1, #0]
   44a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   44a1c:	4770      	bx	lr
   44a1e:	bf00      	nop

00044a20 <__multadd>:
   44a20:	b5f0      	push	{r4, r5, r6, r7, lr}
   44a22:	f101 0c14 	add.w	ip, r1, #20
   44a26:	b083      	sub	sp, #12
   44a28:	460c      	mov	r4, r1
   44a2a:	4605      	mov	r5, r0
   44a2c:	690e      	ldr	r6, [r1, #16]
   44a2e:	2700      	movs	r7, #0
   44a30:	f8dc 0000 	ldr.w	r0, [ip]
   44a34:	3701      	adds	r7, #1
   44a36:	b281      	uxth	r1, r0
   44a38:	42be      	cmp	r6, r7
   44a3a:	ea4f 4010 	mov.w	r0, r0, lsr #16
   44a3e:	fb02 3301 	mla	r3, r2, r1, r3
   44a42:	ea4f 4113 	mov.w	r1, r3, lsr #16
   44a46:	b29b      	uxth	r3, r3
   44a48:	fb02 1000 	mla	r0, r2, r0, r1
   44a4c:	eb03 4100 	add.w	r1, r3, r0, lsl #16
   44a50:	ea4f 4310 	mov.w	r3, r0, lsr #16
   44a54:	f84c 1b04 	str.w	r1, [ip], #4
   44a58:	dcea      	bgt.n	44a30 <__multadd+0x10>
   44a5a:	b13b      	cbz	r3, 44a6c <__multadd+0x4c>
   44a5c:	68a2      	ldr	r2, [r4, #8]
   44a5e:	42b2      	cmp	r2, r6
   44a60:	dd07      	ble.n	44a72 <__multadd+0x52>
   44a62:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   44a66:	3601      	adds	r6, #1
   44a68:	6153      	str	r3, [r2, #20]
   44a6a:	6126      	str	r6, [r4, #16]
   44a6c:	4620      	mov	r0, r4
   44a6e:	b003      	add	sp, #12
   44a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   44a72:	6861      	ldr	r1, [r4, #4]
   44a74:	4628      	mov	r0, r5
   44a76:	9301      	str	r3, [sp, #4]
   44a78:	3101      	adds	r1, #1
   44a7a:	f7ff ffa1 	bl	449c0 <_Balloc>
   44a7e:	6922      	ldr	r2, [r4, #16]
   44a80:	f104 010c 	add.w	r1, r4, #12
   44a84:	4607      	mov	r7, r0
   44a86:	3202      	adds	r2, #2
   44a88:	300c      	adds	r0, #12
   44a8a:	0092      	lsls	r2, r2, #2
   44a8c:	f7d5 fa10 	bl	19eb0 <memcpy>
   44a90:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   44a92:	6861      	ldr	r1, [r4, #4]
   44a94:	9b01      	ldr	r3, [sp, #4]
   44a96:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   44a9a:	6020      	str	r0, [r4, #0]
   44a9c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   44aa0:	463c      	mov	r4, r7
   44aa2:	e7de      	b.n	44a62 <__multadd+0x42>

00044aa4 <__s2b>:
   44aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   44aa8:	461e      	mov	r6, r3
   44aaa:	4d22      	ldr	r5, [pc, #136]	; (44b34 <__s2b+0x90>)
   44aac:	3308      	adds	r3, #8
   44aae:	460c      	mov	r4, r1
   44ab0:	4690      	mov	r8, r2
   44ab2:	4607      	mov	r7, r0
   44ab4:	fb85 1203 	smull	r1, r2, r5, r3
   44ab8:	17db      	asrs	r3, r3, #31
   44aba:	ebc3 0262 	rsb	r2, r3, r2, asr #1
   44abe:	2a01      	cmp	r2, #1
   44ac0:	dd35      	ble.n	44b2e <__s2b+0x8a>
   44ac2:	2301      	movs	r3, #1
   44ac4:	2100      	movs	r1, #0
   44ac6:	005b      	lsls	r3, r3, #1
   44ac8:	3101      	adds	r1, #1
   44aca:	429a      	cmp	r2, r3
   44acc:	dcfb      	bgt.n	44ac6 <__s2b+0x22>
   44ace:	4638      	mov	r0, r7
   44ad0:	f7ff ff76 	bl	449c0 <_Balloc>
   44ad4:	2301      	movs	r3, #1
   44ad6:	9a08      	ldr	r2, [sp, #32]
   44ad8:	f1b8 0f09 	cmp.w	r8, #9
   44adc:	e9c0 3204 	strd	r3, r2, [r0, #16]
   44ae0:	dd21      	ble.n	44b26 <__s2b+0x82>
   44ae2:	f104 0909 	add.w	r9, r4, #9
   44ae6:	4444      	add	r4, r8
   44ae8:	464d      	mov	r5, r9
   44aea:	f815 3b01 	ldrb.w	r3, [r5], #1
   44aee:	4601      	mov	r1, r0
   44af0:	220a      	movs	r2, #10
   44af2:	4638      	mov	r0, r7
   44af4:	3b30      	subs	r3, #48	; 0x30
   44af6:	f7ff ff93 	bl	44a20 <__multadd>
   44afa:	42ac      	cmp	r4, r5
   44afc:	d1f5      	bne.n	44aea <__s2b+0x46>
   44afe:	eb09 0408 	add.w	r4, r9, r8
   44b02:	3c08      	subs	r4, #8
   44b04:	4546      	cmp	r6, r8
   44b06:	dd0c      	ble.n	44b22 <__s2b+0x7e>
   44b08:	eba6 0608 	sub.w	r6, r6, r8
   44b0c:	4426      	add	r6, r4
   44b0e:	f814 3b01 	ldrb.w	r3, [r4], #1
   44b12:	4601      	mov	r1, r0
   44b14:	220a      	movs	r2, #10
   44b16:	4638      	mov	r0, r7
   44b18:	3b30      	subs	r3, #48	; 0x30
   44b1a:	f7ff ff81 	bl	44a20 <__multadd>
   44b1e:	42a6      	cmp	r6, r4
   44b20:	d1f5      	bne.n	44b0e <__s2b+0x6a>
   44b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   44b26:	340a      	adds	r4, #10
   44b28:	f04f 0809 	mov.w	r8, #9
   44b2c:	e7ea      	b.n	44b04 <__s2b+0x60>
   44b2e:	2100      	movs	r1, #0
   44b30:	e7cd      	b.n	44ace <__s2b+0x2a>
   44b32:	bf00      	nop
   44b34:	38e38e39 	.word	0x38e38e39

00044b38 <__hi0bits>:
   44b38:	4a0f      	ldr	r2, [pc, #60]	; (44b78 <__hi0bits+0x40>)
   44b3a:	4603      	mov	r3, r0
   44b3c:	4002      	ands	r2, r0
   44b3e:	b9c2      	cbnz	r2, 44b72 <__hi0bits+0x3a>
   44b40:	0403      	lsls	r3, r0, #16
   44b42:	2010      	movs	r0, #16
   44b44:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   44b48:	d101      	bne.n	44b4e <__hi0bits+0x16>
   44b4a:	3008      	adds	r0, #8
   44b4c:	021b      	lsls	r3, r3, #8
   44b4e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   44b52:	d101      	bne.n	44b58 <__hi0bits+0x20>
   44b54:	3004      	adds	r0, #4
   44b56:	011b      	lsls	r3, r3, #4
   44b58:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   44b5c:	d101      	bne.n	44b62 <__hi0bits+0x2a>
   44b5e:	3002      	adds	r0, #2
   44b60:	009b      	lsls	r3, r3, #2
   44b62:	2b00      	cmp	r3, #0
   44b64:	db04      	blt.n	44b70 <__hi0bits+0x38>
   44b66:	005b      	lsls	r3, r3, #1
   44b68:	d501      	bpl.n	44b6e <__hi0bits+0x36>
   44b6a:	3001      	adds	r0, #1
   44b6c:	4770      	bx	lr
   44b6e:	2020      	movs	r0, #32
   44b70:	4770      	bx	lr
   44b72:	2000      	movs	r0, #0
   44b74:	e7e6      	b.n	44b44 <__hi0bits+0xc>
   44b76:	bf00      	nop
   44b78:	ffff0000 	.word	0xffff0000

00044b7c <__lo0bits>:
   44b7c:	6803      	ldr	r3, [r0, #0]
   44b7e:	4601      	mov	r1, r0
   44b80:	f013 0207 	ands.w	r2, r3, #7
   44b84:	d007      	beq.n	44b96 <__lo0bits+0x1a>
   44b86:	07da      	lsls	r2, r3, #31
   44b88:	d41f      	bmi.n	44bca <__lo0bits+0x4e>
   44b8a:	0798      	lsls	r0, r3, #30
   44b8c:	d51f      	bpl.n	44bce <__lo0bits+0x52>
   44b8e:	085b      	lsrs	r3, r3, #1
   44b90:	2001      	movs	r0, #1
   44b92:	600b      	str	r3, [r1, #0]
   44b94:	4770      	bx	lr
   44b96:	b298      	uxth	r0, r3
   44b98:	b1a0      	cbz	r0, 44bc4 <__lo0bits+0x48>
   44b9a:	4610      	mov	r0, r2
   44b9c:	f013 0fff 	tst.w	r3, #255	; 0xff
   44ba0:	d101      	bne.n	44ba6 <__lo0bits+0x2a>
   44ba2:	3008      	adds	r0, #8
   44ba4:	0a1b      	lsrs	r3, r3, #8
   44ba6:	071a      	lsls	r2, r3, #28
   44ba8:	d101      	bne.n	44bae <__lo0bits+0x32>
   44baa:	3004      	adds	r0, #4
   44bac:	091b      	lsrs	r3, r3, #4
   44bae:	079a      	lsls	r2, r3, #30
   44bb0:	d101      	bne.n	44bb6 <__lo0bits+0x3a>
   44bb2:	3002      	adds	r0, #2
   44bb4:	089b      	lsrs	r3, r3, #2
   44bb6:	07da      	lsls	r2, r3, #31
   44bb8:	d402      	bmi.n	44bc0 <__lo0bits+0x44>
   44bba:	085b      	lsrs	r3, r3, #1
   44bbc:	d00b      	beq.n	44bd6 <__lo0bits+0x5a>
   44bbe:	3001      	adds	r0, #1
   44bc0:	600b      	str	r3, [r1, #0]
   44bc2:	4770      	bx	lr
   44bc4:	0c1b      	lsrs	r3, r3, #16
   44bc6:	2010      	movs	r0, #16
   44bc8:	e7e8      	b.n	44b9c <__lo0bits+0x20>
   44bca:	2000      	movs	r0, #0
   44bcc:	4770      	bx	lr
   44bce:	089b      	lsrs	r3, r3, #2
   44bd0:	2002      	movs	r0, #2
   44bd2:	600b      	str	r3, [r1, #0]
   44bd4:	4770      	bx	lr
   44bd6:	2020      	movs	r0, #32
   44bd8:	4770      	bx	lr
   44bda:	bf00      	nop

00044bdc <__i2b>:
   44bdc:	b510      	push	{r4, lr}
   44bde:	460c      	mov	r4, r1
   44be0:	2101      	movs	r1, #1
   44be2:	f7ff feed 	bl	449c0 <_Balloc>
   44be6:	2201      	movs	r2, #1
   44be8:	e9c0 2404 	strd	r2, r4, [r0, #16]
   44bec:	bd10      	pop	{r4, pc}
   44bee:	bf00      	nop

00044bf0 <__multiply>:
   44bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44bf4:	690d      	ldr	r5, [r1, #16]
   44bf6:	b085      	sub	sp, #20
   44bf8:	6914      	ldr	r4, [r2, #16]
   44bfa:	460e      	mov	r6, r1
   44bfc:	4691      	mov	r9, r2
   44bfe:	42a5      	cmp	r5, r4
   44c00:	da04      	bge.n	44c0c <__multiply+0x1c>
   44c02:	462a      	mov	r2, r5
   44c04:	464e      	mov	r6, r9
   44c06:	4625      	mov	r5, r4
   44c08:	4689      	mov	r9, r1
   44c0a:	4614      	mov	r4, r2
   44c0c:	eb05 0804 	add.w	r8, r5, r4
   44c10:	e9d6 1301 	ldrd	r1, r3, [r6, #4]
   44c14:	4543      	cmp	r3, r8
   44c16:	bfb8      	it	lt
   44c18:	3101      	addlt	r1, #1
   44c1a:	f7ff fed1 	bl	449c0 <_Balloc>
   44c1e:	f100 0b14 	add.w	fp, r0, #20
   44c22:	9001      	str	r0, [sp, #4]
   44c24:	eb0b 0a88 	add.w	sl, fp, r8, lsl #2
   44c28:	45d3      	cmp	fp, sl
   44c2a:	d205      	bcs.n	44c38 <__multiply+0x48>
   44c2c:	465b      	mov	r3, fp
   44c2e:	2200      	movs	r2, #0
   44c30:	f843 2b04 	str.w	r2, [r3], #4
   44c34:	459a      	cmp	sl, r3
   44c36:	d8fb      	bhi.n	44c30 <__multiply+0x40>
   44c38:	f109 0314 	add.w	r3, r9, #20
   44c3c:	f106 0214 	add.w	r2, r6, #20
   44c40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   44c44:	eb02 0e85 	add.w	lr, r2, r5, lsl #2
   44c48:	42a3      	cmp	r3, r4
   44c4a:	d264      	bcs.n	44d16 <__multiply+0x126>
   44c4c:	eba4 0409 	sub.w	r4, r4, r9
   44c50:	f109 0910 	add.w	r9, r9, #16
   44c54:	3c15      	subs	r4, #21
   44c56:	f024 0403 	bic.w	r4, r4, #3
   44c5a:	4423      	add	r3, r4
   44c5c:	e9cd a802 	strd	sl, r8, [sp, #8]
   44c60:	4690      	mov	r8, r2
   44c62:	469a      	mov	sl, r3
   44c64:	e005      	b.n	44c72 <__multiply+0x82>
   44c66:	0c00      	lsrs	r0, r0, #16
   44c68:	d12e      	bne.n	44cc8 <__multiply+0xd8>
   44c6a:	45ca      	cmp	sl, r9
   44c6c:	f10b 0b04 	add.w	fp, fp, #4
   44c70:	d04f      	beq.n	44d12 <__multiply+0x122>
   44c72:	f859 0f04 	ldr.w	r0, [r9, #4]!
   44c76:	fa1f fc80 	uxth.w	ip, r0
   44c7a:	f1bc 0f00 	cmp.w	ip, #0
   44c7e:	d0f2      	beq.n	44c66 <__multiply+0x76>
   44c80:	4647      	mov	r7, r8
   44c82:	465e      	mov	r6, fp
   44c84:	2100      	movs	r1, #0
   44c86:	e000      	b.n	44c8a <__multiply+0x9a>
   44c88:	4606      	mov	r6, r0
   44c8a:	f857 3b04 	ldr.w	r3, [r7], #4
   44c8e:	4630      	mov	r0, r6
   44c90:	6834      	ldr	r4, [r6, #0]
   44c92:	b29a      	uxth	r2, r3
   44c94:	45be      	cmp	lr, r7
   44c96:	b2a5      	uxth	r5, r4
   44c98:	ea4f 4313 	mov.w	r3, r3, lsr #16
   44c9c:	fb0c 5202 	mla	r2, ip, r2, r5
   44ca0:	ea4f 4414 	mov.w	r4, r4, lsr #16
   44ca4:	440a      	add	r2, r1
   44ca6:	fb0c 4103 	mla	r1, ip, r3, r4
   44caa:	b293      	uxth	r3, r2
   44cac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   44cb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   44cb4:	ea4f 4111 	mov.w	r1, r1, lsr #16
   44cb8:	f840 3b04 	str.w	r3, [r0], #4
   44cbc:	d8e4      	bhi.n	44c88 <__multiply+0x98>
   44cbe:	6071      	str	r1, [r6, #4]
   44cc0:	f8d9 0000 	ldr.w	r0, [r9]
   44cc4:	0c00      	lsrs	r0, r0, #16
   44cc6:	d0d0      	beq.n	44c6a <__multiply+0x7a>
   44cc8:	f8db 3000 	ldr.w	r3, [fp]
   44ccc:	4644      	mov	r4, r8
   44cce:	465e      	mov	r6, fp
   44cd0:	2700      	movs	r7, #0
   44cd2:	461a      	mov	r2, r3
   44cd4:	e000      	b.n	44cd8 <__multiply+0xe8>
   44cd6:	460e      	mov	r6, r1
   44cd8:	0c15      	lsrs	r5, r2, #16
   44cda:	8822      	ldrh	r2, [r4, #0]
   44cdc:	b29b      	uxth	r3, r3
   44cde:	4631      	mov	r1, r6
   44ce0:	fb00 5202 	mla	r2, r0, r2, r5
   44ce4:	4417      	add	r7, r2
   44ce6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   44cea:	f841 3b04 	str.w	r3, [r1], #4
   44cee:	f854 3b04 	ldr.w	r3, [r4], #4
   44cf2:	6872      	ldr	r2, [r6, #4]
   44cf4:	0c1b      	lsrs	r3, r3, #16
   44cf6:	45a6      	cmp	lr, r4
   44cf8:	b295      	uxth	r5, r2
   44cfa:	fb00 5303 	mla	r3, r0, r3, r5
   44cfe:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   44d02:	ea4f 4713 	mov.w	r7, r3, lsr #16
   44d06:	d8e6      	bhi.n	44cd6 <__multiply+0xe6>
   44d08:	45ca      	cmp	sl, r9
   44d0a:	6073      	str	r3, [r6, #4]
   44d0c:	f10b 0b04 	add.w	fp, fp, #4
   44d10:	d1af      	bne.n	44c72 <__multiply+0x82>
   44d12:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   44d16:	f1b8 0f00 	cmp.w	r8, #0
   44d1a:	dd0b      	ble.n	44d34 <__multiply+0x144>
   44d1c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   44d20:	f1aa 0a04 	sub.w	sl, sl, #4
   44d24:	b11b      	cbz	r3, 44d2e <__multiply+0x13e>
   44d26:	e005      	b.n	44d34 <__multiply+0x144>
   44d28:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   44d2c:	b913      	cbnz	r3, 44d34 <__multiply+0x144>
   44d2e:	f1b8 0801 	subs.w	r8, r8, #1
   44d32:	d1f9      	bne.n	44d28 <__multiply+0x138>
   44d34:	9801      	ldr	r0, [sp, #4]
   44d36:	f8c0 8010 	str.w	r8, [r0, #16]
   44d3a:	b005      	add	sp, #20
   44d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00044d40 <__pow5mult>:
   44d40:	f012 0303 	ands.w	r3, r2, #3
   44d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44d48:	4614      	mov	r4, r2
   44d4a:	4607      	mov	r7, r0
   44d4c:	d12e      	bne.n	44dac <__pow5mult+0x6c>
   44d4e:	460d      	mov	r5, r1
   44d50:	10a4      	asrs	r4, r4, #2
   44d52:	d01c      	beq.n	44d8e <__pow5mult+0x4e>
   44d54:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   44d56:	b396      	cbz	r6, 44dbe <__pow5mult+0x7e>
   44d58:	07e3      	lsls	r3, r4, #31
   44d5a:	f04f 0800 	mov.w	r8, #0
   44d5e:	d406      	bmi.n	44d6e <__pow5mult+0x2e>
   44d60:	1064      	asrs	r4, r4, #1
   44d62:	d014      	beq.n	44d8e <__pow5mult+0x4e>
   44d64:	6830      	ldr	r0, [r6, #0]
   44d66:	b1a8      	cbz	r0, 44d94 <__pow5mult+0x54>
   44d68:	4606      	mov	r6, r0
   44d6a:	07e3      	lsls	r3, r4, #31
   44d6c:	d5f8      	bpl.n	44d60 <__pow5mult+0x20>
   44d6e:	4632      	mov	r2, r6
   44d70:	4629      	mov	r1, r5
   44d72:	4638      	mov	r0, r7
   44d74:	f7ff ff3c 	bl	44bf0 <__multiply>
   44d78:	b1b5      	cbz	r5, 44da8 <__pow5mult+0x68>
   44d7a:	686a      	ldr	r2, [r5, #4]
   44d7c:	1064      	asrs	r4, r4, #1
   44d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   44d80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   44d84:	6029      	str	r1, [r5, #0]
   44d86:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   44d8a:	4605      	mov	r5, r0
   44d8c:	d1ea      	bne.n	44d64 <__pow5mult+0x24>
   44d8e:	4628      	mov	r0, r5
   44d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   44d94:	4632      	mov	r2, r6
   44d96:	4631      	mov	r1, r6
   44d98:	4638      	mov	r0, r7
   44d9a:	f7ff ff29 	bl	44bf0 <__multiply>
   44d9e:	6030      	str	r0, [r6, #0]
   44da0:	f8c0 8000 	str.w	r8, [r0]
   44da4:	4606      	mov	r6, r0
   44da6:	e7e0      	b.n	44d6a <__pow5mult+0x2a>
   44da8:	4605      	mov	r5, r0
   44daa:	e7d9      	b.n	44d60 <__pow5mult+0x20>
   44dac:	1e5a      	subs	r2, r3, #1
   44dae:	4d0b      	ldr	r5, [pc, #44]	; (44ddc <__pow5mult+0x9c>)
   44db0:	2300      	movs	r3, #0
   44db2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   44db6:	f7ff fe33 	bl	44a20 <__multadd>
   44dba:	4605      	mov	r5, r0
   44dbc:	e7c8      	b.n	44d50 <__pow5mult+0x10>
   44dbe:	2101      	movs	r1, #1
   44dc0:	4638      	mov	r0, r7
   44dc2:	f7ff fdfd 	bl	449c0 <_Balloc>
   44dc6:	f240 2171 	movw	r1, #625	; 0x271
   44dca:	2201      	movs	r2, #1
   44dcc:	2300      	movs	r3, #0
   44dce:	4606      	mov	r6, r0
   44dd0:	e9c0 2104 	strd	r2, r1, [r0, #16]
   44dd4:	64b8      	str	r0, [r7, #72]	; 0x48
   44dd6:	6003      	str	r3, [r0, #0]
   44dd8:	e7be      	b.n	44d58 <__pow5mult+0x18>
   44dda:	bf00      	nop
   44ddc:	0004b0f0 	.word	0x0004b0f0

00044de0 <__lshift>:
   44de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   44de4:	690f      	ldr	r7, [r1, #16]
   44de6:	ea4f 1962 	mov.w	r9, r2, asr #5
   44dea:	688b      	ldr	r3, [r1, #8]
   44dec:	460d      	mov	r5, r1
   44dee:	444f      	add	r7, r9
   44df0:	4690      	mov	r8, r2
   44df2:	4606      	mov	r6, r0
   44df4:	6849      	ldr	r1, [r1, #4]
   44df6:	1c7c      	adds	r4, r7, #1
   44df8:	429c      	cmp	r4, r3
   44dfa:	dd03      	ble.n	44e04 <__lshift+0x24>
   44dfc:	005b      	lsls	r3, r3, #1
   44dfe:	3101      	adds	r1, #1
   44e00:	429c      	cmp	r4, r3
   44e02:	dcfb      	bgt.n	44dfc <__lshift+0x1c>
   44e04:	4630      	mov	r0, r6
   44e06:	f7ff fddb 	bl	449c0 <_Balloc>
   44e0a:	f1b9 0f00 	cmp.w	r9, #0
   44e0e:	4684      	mov	ip, r0
   44e10:	f100 0314 	add.w	r3, r0, #20
   44e14:	dd3d      	ble.n	44e92 <__lshift+0xb2>
   44e16:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   44e1a:	2200      	movs	r2, #0
   44e1c:	f843 2b04 	str.w	r2, [r3], #4
   44e20:	428b      	cmp	r3, r1
   44e22:	d1fb      	bne.n	44e1c <__lshift+0x3c>
   44e24:	f105 0314 	add.w	r3, r5, #20
   44e28:	6928      	ldr	r0, [r5, #16]
   44e2a:	f018 081f 	ands.w	r8, r8, #31
   44e2e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
   44e32:	d026      	beq.n	44e82 <__lshift+0xa2>
   44e34:	f1c8 0220 	rsb	r2, r8, #32
   44e38:	f04f 0a00 	mov.w	sl, #0
   44e3c:	e000      	b.n	44e40 <__lshift+0x60>
   44e3e:	4649      	mov	r1, r9
   44e40:	6818      	ldr	r0, [r3, #0]
   44e42:	4689      	mov	r9, r1
   44e44:	fa00 f008 	lsl.w	r0, r0, r8
   44e48:	ea40 000a 	orr.w	r0, r0, sl
   44e4c:	f849 0b04 	str.w	r0, [r9], #4
   44e50:	f853 0b04 	ldr.w	r0, [r3], #4
   44e54:	4573      	cmp	r3, lr
   44e56:	fa20 fa02 	lsr.w	sl, r0, r2
   44e5a:	d3f0      	bcc.n	44e3e <__lshift+0x5e>
   44e5c:	f8c1 a004 	str.w	sl, [r1, #4]
   44e60:	f1ba 0f00 	cmp.w	sl, #0
   44e64:	d000      	beq.n	44e68 <__lshift+0x88>
   44e66:	1cbc      	adds	r4, r7, #2
   44e68:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   44e6a:	3c01      	subs	r4, #1
   44e6c:	686a      	ldr	r2, [r5, #4]
   44e6e:	4660      	mov	r0, ip
   44e70:	f8cc 4010 	str.w	r4, [ip, #16]
   44e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   44e78:	6029      	str	r1, [r5, #0]
   44e7a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   44e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   44e82:	3904      	subs	r1, #4
   44e84:	f853 2b04 	ldr.w	r2, [r3], #4
   44e88:	459e      	cmp	lr, r3
   44e8a:	f841 2f04 	str.w	r2, [r1, #4]!
   44e8e:	d8f9      	bhi.n	44e84 <__lshift+0xa4>
   44e90:	e7ea      	b.n	44e68 <__lshift+0x88>
   44e92:	4619      	mov	r1, r3
   44e94:	e7c6      	b.n	44e24 <__lshift+0x44>
   44e96:	bf00      	nop

00044e98 <__mcmp>:
   44e98:	b430      	push	{r4, r5}
   44e9a:	690a      	ldr	r2, [r1, #16]
   44e9c:	4605      	mov	r5, r0
   44e9e:	6900      	ldr	r0, [r0, #16]
   44ea0:	1a80      	subs	r0, r0, r2
   44ea2:	d10f      	bne.n	44ec4 <__mcmp+0x2c>
   44ea4:	0092      	lsls	r2, r2, #2
   44ea6:	3514      	adds	r5, #20
   44ea8:	3114      	adds	r1, #20
   44eaa:	18ab      	adds	r3, r5, r2
   44eac:	4411      	add	r1, r2
   44eae:	e001      	b.n	44eb4 <__mcmp+0x1c>
   44eb0:	429d      	cmp	r5, r3
   44eb2:	d207      	bcs.n	44ec4 <__mcmp+0x2c>
   44eb4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   44eb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   44ebc:	4294      	cmp	r4, r2
   44ebe:	d0f7      	beq.n	44eb0 <__mcmp+0x18>
   44ec0:	d302      	bcc.n	44ec8 <__mcmp+0x30>
   44ec2:	2001      	movs	r0, #1
   44ec4:	bc30      	pop	{r4, r5}
   44ec6:	4770      	bx	lr
   44ec8:	f04f 30ff 	mov.w	r0, #4294967295
   44ecc:	e7fa      	b.n	44ec4 <__mcmp+0x2c>
   44ece:	bf00      	nop

00044ed0 <__mdiff>:
   44ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   44ed4:	690c      	ldr	r4, [r1, #16]
   44ed6:	460f      	mov	r7, r1
   44ed8:	6913      	ldr	r3, [r2, #16]
   44eda:	4616      	mov	r6, r2
   44edc:	f101 0514 	add.w	r5, r1, #20
   44ee0:	f102 0814 	add.w	r8, r2, #20
   44ee4:	1ae4      	subs	r4, r4, r3
   44ee6:	2c00      	cmp	r4, #0
   44ee8:	d114      	bne.n	44f14 <__mdiff+0x44>
   44eea:	009b      	lsls	r3, r3, #2
   44eec:	18ea      	adds	r2, r5, r3
   44eee:	4443      	add	r3, r8
   44ef0:	e001      	b.n	44ef6 <__mdiff+0x26>
   44ef2:	42aa      	cmp	r2, r5
   44ef4:	d962      	bls.n	44fbc <__mdiff+0xec>
   44ef6:	f852 cd04 	ldr.w	ip, [r2, #-4]!
   44efa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   44efe:	458c      	cmp	ip, r1
   44f00:	d0f7      	beq.n	44ef2 <__mdiff+0x22>
   44f02:	d209      	bcs.n	44f18 <__mdiff+0x48>
   44f04:	462a      	mov	r2, r5
   44f06:	463b      	mov	r3, r7
   44f08:	4645      	mov	r5, r8
   44f0a:	4637      	mov	r7, r6
   44f0c:	4690      	mov	r8, r2
   44f0e:	461e      	mov	r6, r3
   44f10:	2401      	movs	r4, #1
   44f12:	e001      	b.n	44f18 <__mdiff+0x48>
   44f14:	dbf6      	blt.n	44f04 <__mdiff+0x34>
   44f16:	2400      	movs	r4, #0
   44f18:	6879      	ldr	r1, [r7, #4]
   44f1a:	f7ff fd51 	bl	449c0 <_Balloc>
   44f1e:	f8d7 e010 	ldr.w	lr, [r7, #16]
   44f22:	6933      	ldr	r3, [r6, #16]
   44f24:	4647      	mov	r7, r8
   44f26:	462e      	mov	r6, r5
   44f28:	eb05 0c8e 	add.w	ip, r5, lr, lsl #2
   44f2c:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   44f30:	f100 0514 	add.w	r5, r0, #20
   44f34:	2200      	movs	r2, #0
   44f36:	60c4      	str	r4, [r0, #12]
   44f38:	f856 3b04 	ldr.w	r3, [r6], #4
   44f3c:	f857 1b04 	ldr.w	r1, [r7], #4
   44f40:	b29c      	uxth	r4, r3
   44f42:	fa1f f981 	uxth.w	r9, r1
   44f46:	45b8      	cmp	r8, r7
   44f48:	4422      	add	r2, r4
   44f4a:	ea4f 4111 	mov.w	r1, r1, lsr #16
   44f4e:	eba2 0409 	sub.w	r4, r2, r9
   44f52:	ebc1 4213 	rsb	r2, r1, r3, lsr #16
   44f56:	b2a3      	uxth	r3, r4
   44f58:	eb02 4224 	add.w	r2, r2, r4, asr #16
   44f5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   44f60:	ea4f 4222 	mov.w	r2, r2, asr #16
   44f64:	f845 3b04 	str.w	r3, [r5], #4
   44f68:	d8e6      	bhi.n	44f38 <__mdiff+0x68>
   44f6a:	45b4      	cmp	ip, r6
   44f6c:	d91a      	bls.n	44fa4 <__mdiff+0xd4>
   44f6e:	462f      	mov	r7, r5
   44f70:	4634      	mov	r4, r6
   44f72:	f854 8b04 	ldr.w	r8, [r4], #4
   44f76:	fa1f f388 	uxth.w	r3, r8
   44f7a:	45a4      	cmp	ip, r4
   44f7c:	441a      	add	r2, r3
   44f7e:	ea4f 4122 	mov.w	r1, r2, asr #16
   44f82:	b293      	uxth	r3, r2
   44f84:	eb01 4218 	add.w	r2, r1, r8, lsr #16
   44f88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   44f8c:	ea4f 4222 	mov.w	r2, r2, asr #16
   44f90:	f847 3b04 	str.w	r3, [r7], #4
   44f94:	d8ed      	bhi.n	44f72 <__mdiff+0xa2>
   44f96:	43f6      	mvns	r6, r6
   44f98:	44b4      	add	ip, r6
   44f9a:	f02c 0c03 	bic.w	ip, ip, #3
   44f9e:	f10c 0c04 	add.w	ip, ip, #4
   44fa2:	4465      	add	r5, ip
   44fa4:	3d04      	subs	r5, #4
   44fa6:	b92b      	cbnz	r3, 44fb4 <__mdiff+0xe4>
   44fa8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   44fac:	f10e 3eff 	add.w	lr, lr, #4294967295
   44fb0:	2b00      	cmp	r3, #0
   44fb2:	d0f9      	beq.n	44fa8 <__mdiff+0xd8>
   44fb4:	f8c0 e010 	str.w	lr, [r0, #16]
   44fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   44fbc:	2100      	movs	r1, #0
   44fbe:	f7ff fcff 	bl	449c0 <_Balloc>
   44fc2:	2201      	movs	r2, #1
   44fc4:	2300      	movs	r3, #0
   44fc6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   44fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   44fce:	bf00      	nop

00044fd0 <__ulp>:
   44fd0:	4b14      	ldr	r3, [pc, #80]	; (45024 <__ulp+0x54>)
   44fd2:	ee10 2a90 	vmov	r2, s1
   44fd6:	401a      	ands	r2, r3
   44fd8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   44fdc:	2b00      	cmp	r3, #0
   44fde:	dd04      	ble.n	44fea <__ulp+0x1a>
   44fe0:	2000      	movs	r0, #0
   44fe2:	4619      	mov	r1, r3
   44fe4:	ec41 0b10 	vmov	d0, r0, r1
   44fe8:	4770      	bx	lr
   44fea:	425b      	negs	r3, r3
   44fec:	151b      	asrs	r3, r3, #20
   44fee:	2b13      	cmp	r3, #19
   44ff0:	dd0f      	ble.n	45012 <__ulp+0x42>
   44ff2:	3b14      	subs	r3, #20
   44ff4:	2100      	movs	r1, #0
   44ff6:	2b1e      	cmp	r3, #30
   44ff8:	dc08      	bgt.n	4500c <__ulp+0x3c>
   44ffa:	f1c3 031f 	rsb	r3, r3, #31
   44ffe:	2201      	movs	r2, #1
   45000:	fa02 f303 	lsl.w	r3, r2, r3
   45004:	4618      	mov	r0, r3
   45006:	ec41 0b10 	vmov	d0, r0, r1
   4500a:	4770      	bx	lr
   4500c:	2301      	movs	r3, #1
   4500e:	4618      	mov	r0, r3
   45010:	e7f9      	b.n	45006 <__ulp+0x36>
   45012:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   45016:	2000      	movs	r0, #0
   45018:	fa42 f103 	asr.w	r1, r2, r3
   4501c:	ec41 0b10 	vmov	d0, r0, r1
   45020:	4770      	bx	lr
   45022:	bf00      	nop
   45024:	7ff00000 	.word	0x7ff00000

00045028 <__b2d>:
   45028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4502a:	6904      	ldr	r4, [r0, #16]
   4502c:	f100 0614 	add.w	r6, r0, #20
   45030:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   45034:	f854 7c04 	ldr.w	r7, [r4, #-4]
   45038:	1f25      	subs	r5, r4, #4
   4503a:	4638      	mov	r0, r7
   4503c:	f7ff fd7c 	bl	44b38 <__hi0bits>
   45040:	f1c0 0320 	rsb	r3, r0, #32
   45044:	280a      	cmp	r0, #10
   45046:	600b      	str	r3, [r1, #0]
   45048:	dc15      	bgt.n	45076 <__b2d+0x4e>
   4504a:	f1c0 0c0b 	rsb	ip, r0, #11
   4504e:	42ae      	cmp	r6, r5
   45050:	fa27 f10c 	lsr.w	r1, r7, ip
   45054:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   45058:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   4505c:	d232      	bcs.n	450c4 <__b2d+0x9c>
   4505e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   45062:	fa21 f10c 	lsr.w	r1, r1, ip
   45066:	3015      	adds	r0, #21
   45068:	fa07 f000 	lsl.w	r0, r7, r0
   4506c:	ea40 0201 	orr.w	r2, r0, r1
   45070:	ec43 2b10 	vmov	d0, r2, r3
   45074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   45076:	42ae      	cmp	r6, r5
   45078:	f1a0 000b 	sub.w	r0, r0, #11
   4507c:	d21a      	bcs.n	450b4 <__b2d+0x8c>
   4507e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   45082:	b1c8      	cbz	r0, 450b8 <__b2d+0x90>
   45084:	fa07 f500 	lsl.w	r5, r7, r0
   45088:	4f14      	ldr	r7, [pc, #80]	; (450dc <__b2d+0xb4>)
   4508a:	f1c0 0c20 	rsb	ip, r0, #32
   4508e:	432f      	orrs	r7, r5
   45090:	f1a4 0508 	sub.w	r5, r4, #8
   45094:	fa21 fe0c 	lsr.w	lr, r1, ip
   45098:	4081      	lsls	r1, r0
   4509a:	42ae      	cmp	r6, r5
   4509c:	ea47 030e 	orr.w	r3, r7, lr
   450a0:	d204      	bcs.n	450ac <__b2d+0x84>
   450a2:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   450a6:	fa20 f00c 	lsr.w	r0, r0, ip
   450aa:	4301      	orrs	r1, r0
   450ac:	460a      	mov	r2, r1
   450ae:	ec43 2b10 	vmov	d0, r2, r3
   450b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   450b4:	b940      	cbnz	r0, 450c8 <__b2d+0xa0>
   450b6:	4601      	mov	r1, r0
   450b8:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   450bc:	460a      	mov	r2, r1
   450be:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   450c2:	e7f4      	b.n	450ae <__b2d+0x86>
   450c4:	2100      	movs	r1, #0
   450c6:	e7ce      	b.n	45066 <__b2d+0x3e>
   450c8:	fa07 f000 	lsl.w	r0, r7, r0
   450cc:	2100      	movs	r1, #0
   450ce:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   450d2:	460a      	mov	r2, r1
   450d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   450d8:	e7e9      	b.n	450ae <__b2d+0x86>
   450da:	bf00      	nop
   450dc:	3ff00000 	.word	0x3ff00000

000450e0 <__d2b>:
   450e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   450e4:	ec55 4b10 	vmov	r4, r5, d0
   450e8:	f3c5 580a 	ubfx	r8, r5, #20, #11
   450ec:	b083      	sub	sp, #12
   450ee:	460f      	mov	r7, r1
   450f0:	2101      	movs	r1, #1
   450f2:	4616      	mov	r6, r2
   450f4:	f7ff fc64 	bl	449c0 <_Balloc>
   450f8:	f3c5 0313 	ubfx	r3, r5, #0, #20
   450fc:	4681      	mov	r9, r0
   450fe:	f1b8 0f00 	cmp.w	r8, #0
   45102:	d001      	beq.n	45108 <__d2b+0x28>
   45104:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   45108:	2c00      	cmp	r4, #0
   4510a:	9301      	str	r3, [sp, #4]
   4510c:	d024      	beq.n	45158 <__d2b+0x78>
   4510e:	a802      	add	r0, sp, #8
   45110:	f840 4d08 	str.w	r4, [r0, #-8]!
   45114:	f7ff fd32 	bl	44b7c <__lo0bits>
   45118:	2800      	cmp	r0, #0
   4511a:	d134      	bne.n	45186 <__d2b+0xa6>
   4511c:	e9dd 2300 	ldrd	r2, r3, [sp]
   45120:	f8c9 2014 	str.w	r2, [r9, #20]
   45124:	2b00      	cmp	r3, #0
   45126:	f8c9 3018 	str.w	r3, [r9, #24]
   4512a:	bf0c      	ite	eq
   4512c:	2101      	moveq	r1, #1
   4512e:	2102      	movne	r1, #2
   45130:	f8c9 1010 	str.w	r1, [r9, #16]
   45134:	f1b8 0f00 	cmp.w	r8, #0
   45138:	d11a      	bne.n	45170 <__d2b+0x90>
   4513a:	eb09 0381 	add.w	r3, r9, r1, lsl #2
   4513e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   45142:	6038      	str	r0, [r7, #0]
   45144:	6918      	ldr	r0, [r3, #16]
   45146:	f7ff fcf7 	bl	44b38 <__hi0bits>
   4514a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   4514e:	6030      	str	r0, [r6, #0]
   45150:	4648      	mov	r0, r9
   45152:	b003      	add	sp, #12
   45154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   45158:	a801      	add	r0, sp, #4
   4515a:	f7ff fd0f 	bl	44b7c <__lo0bits>
   4515e:	2301      	movs	r3, #1
   45160:	9a01      	ldr	r2, [sp, #4]
   45162:	3020      	adds	r0, #32
   45164:	4619      	mov	r1, r3
   45166:	e9c9 3204 	strd	r3, r2, [r9, #16]
   4516a:	f1b8 0f00 	cmp.w	r8, #0
   4516e:	d0e4      	beq.n	4513a <__d2b+0x5a>
   45170:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
   45174:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
   45178:	4440      	add	r0, r8
   4517a:	6038      	str	r0, [r7, #0]
   4517c:	4648      	mov	r0, r9
   4517e:	6033      	str	r3, [r6, #0]
   45180:	b003      	add	sp, #12
   45182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   45186:	9b01      	ldr	r3, [sp, #4]
   45188:	f1c0 0220 	rsb	r2, r0, #32
   4518c:	9900      	ldr	r1, [sp, #0]
   4518e:	fa03 f202 	lsl.w	r2, r3, r2
   45192:	40c3      	lsrs	r3, r0
   45194:	430a      	orrs	r2, r1
   45196:	9301      	str	r3, [sp, #4]
   45198:	f8c9 2014 	str.w	r2, [r9, #20]
   4519c:	e7c2      	b.n	45124 <__d2b+0x44>
   4519e:	bf00      	nop

000451a0 <__ratio>:
   451a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   451a4:	b082      	sub	sp, #8
   451a6:	468a      	mov	sl, r1
   451a8:	4680      	mov	r8, r0
   451aa:	4669      	mov	r1, sp
   451ac:	f7ff ff3c 	bl	45028 <__b2d>
   451b0:	4650      	mov	r0, sl
   451b2:	a901      	add	r1, sp, #4
   451b4:	ec55 4b10 	vmov	r4, r5, d0
   451b8:	f7ff ff36 	bl	45028 <__b2d>
   451bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
   451c0:	f8da 0010 	ldr.w	r0, [sl, #16]
   451c4:	e9dd 1300 	ldrd	r1, r3, [sp]
   451c8:	1a12      	subs	r2, r2, r0
   451ca:	1acb      	subs	r3, r1, r3
   451cc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   451d0:	2b00      	cmp	r3, #0
   451d2:	ec57 6b10 	vmov	r6, r7, d0
   451d6:	dd0d      	ble.n	451f4 <__ratio+0x54>
   451d8:	eb05 5903 	add.w	r9, r5, r3, lsl #20
   451dc:	464d      	mov	r5, r9
   451de:	4632      	mov	r2, r6
   451e0:	463b      	mov	r3, r7
   451e2:	4620      	mov	r0, r4
   451e4:	4629      	mov	r1, r5
   451e6:	f7d3 fc01 	bl	189ec <__aeabi_ddiv>
   451ea:	ec41 0b10 	vmov	d0, r0, r1
   451ee:	b002      	add	sp, #8
   451f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   451f4:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   451f8:	eb07 5103 	add.w	r1, r7, r3, lsl #20
   451fc:	460f      	mov	r7, r1
   451fe:	e7ee      	b.n	451de <__ratio+0x3e>

00045200 <__copybits>:
   45200:	3901      	subs	r1, #1
   45202:	f102 0314 	add.w	r3, r2, #20
   45206:	b470      	push	{r4, r5, r6}
   45208:	114c      	asrs	r4, r1, #5
   4520a:	6911      	ldr	r1, [r2, #16]
   4520c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   45210:	3401      	adds	r4, #1
   45212:	428b      	cmp	r3, r1
   45214:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   45218:	d20c      	bcs.n	45234 <__copybits+0x34>
   4521a:	1f05      	subs	r5, r0, #4
   4521c:	f853 6b04 	ldr.w	r6, [r3], #4
   45220:	4299      	cmp	r1, r3
   45222:	f845 6f04 	str.w	r6, [r5, #4]!
   45226:	d8f9      	bhi.n	4521c <__copybits+0x1c>
   45228:	1a8b      	subs	r3, r1, r2
   4522a:	3b15      	subs	r3, #21
   4522c:	f023 0303 	bic.w	r3, r3, #3
   45230:	3304      	adds	r3, #4
   45232:	4418      	add	r0, r3
   45234:	4284      	cmp	r4, r0
   45236:	d904      	bls.n	45242 <__copybits+0x42>
   45238:	2300      	movs	r3, #0
   4523a:	f840 3b04 	str.w	r3, [r0], #4
   4523e:	4284      	cmp	r4, r0
   45240:	d8fb      	bhi.n	4523a <__copybits+0x3a>
   45242:	bc70      	pop	{r4, r5, r6}
   45244:	4770      	bx	lr
   45246:	bf00      	nop

00045248 <__any_on>:
   45248:	b410      	push	{r4}
   4524a:	6903      	ldr	r3, [r0, #16]
   4524c:	114c      	asrs	r4, r1, #5
   4524e:	f100 0214 	add.w	r2, r0, #20
   45252:	42a3      	cmp	r3, r4
   45254:	da10      	bge.n	45278 <__any_on+0x30>
   45256:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   4525a:	429a      	cmp	r2, r3
   4525c:	d21e      	bcs.n	4529c <__any_on+0x54>
   4525e:	f853 0c04 	ldr.w	r0, [r3, #-4]
   45262:	3b04      	subs	r3, #4
   45264:	b118      	cbz	r0, 4526e <__any_on+0x26>
   45266:	e015      	b.n	45294 <__any_on+0x4c>
   45268:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   4526c:	b991      	cbnz	r1, 45294 <__any_on+0x4c>
   4526e:	429a      	cmp	r2, r3
   45270:	d3fa      	bcc.n	45268 <__any_on+0x20>
   45272:	f85d 4b04 	ldr.w	r4, [sp], #4
   45276:	4770      	bx	lr
   45278:	eb02 0384 	add.w	r3, r2, r4, lsl #2
   4527c:	dded      	ble.n	4525a <__any_on+0x12>
   4527e:	f011 011f 	ands.w	r1, r1, #31
   45282:	d0ea      	beq.n	4525a <__any_on+0x12>
   45284:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
   45288:	fa24 f001 	lsr.w	r0, r4, r1
   4528c:	fa00 f101 	lsl.w	r1, r0, r1
   45290:	428c      	cmp	r4, r1
   45292:	d0e2      	beq.n	4525a <__any_on+0x12>
   45294:	2001      	movs	r0, #1
   45296:	f85d 4b04 	ldr.w	r4, [sp], #4
   4529a:	4770      	bx	lr
   4529c:	2000      	movs	r0, #0
   4529e:	e7e8      	b.n	45272 <__any_on+0x2a>

000452a0 <_read_r>:
   452a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   452a2:	460e      	mov	r6, r1
   452a4:	4c08      	ldr	r4, [pc, #32]	; (452c8 <_read_r+0x28>)
   452a6:	2500      	movs	r5, #0
   452a8:	4611      	mov	r1, r2
   452aa:	4607      	mov	r7, r0
   452ac:	461a      	mov	r2, r3
   452ae:	4630      	mov	r0, r6
   452b0:	6025      	str	r5, [r4, #0]
   452b2:	f001 fbef 	bl	46a94 <_read>
   452b6:	1c43      	adds	r3, r0, #1
   452b8:	d000      	beq.n	452bc <_read_r+0x1c>
   452ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   452bc:	6823      	ldr	r3, [r4, #0]
   452be:	2b00      	cmp	r3, #0
   452c0:	d0fb      	beq.n	452ba <_read_r+0x1a>
   452c2:	603b      	str	r3, [r7, #0]
   452c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   452c6:	bf00      	nop
   452c8:	2002c4ec 	.word	0x2002c4ec

000452cc <frexp>:
   452cc:	b570      	push	{r4, r5, r6, lr}
   452ce:	ec55 4b10 	vmov	r4, r5, d0
   452d2:	4606      	mov	r6, r0
   452d4:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   452d8:	4812      	ldr	r0, [pc, #72]	; (45324 <frexp+0x58>)
   452da:	2200      	movs	r2, #0
   452dc:	4283      	cmp	r3, r0
   452de:	6032      	str	r2, [r6, #0]
   452e0:	dc1d      	bgt.n	4531e <frexp+0x52>
   452e2:	ee10 0a10 	vmov	r0, s0
   452e6:	4318      	orrs	r0, r3
   452e8:	d019      	beq.n	4531e <frexp+0x52>
   452ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   452ee:	4629      	mov	r1, r5
   452f0:	da0a      	bge.n	45308 <frexp+0x3c>
   452f2:	2200      	movs	r2, #0
   452f4:	4b0c      	ldr	r3, [pc, #48]	; (45328 <frexp+0x5c>)
   452f6:	ee10 0a10 	vmov	r0, s0
   452fa:	f7d3 fa4d 	bl	18798 <__aeabi_dmul>
   452fe:	f06f 0235 	mvn.w	r2, #53	; 0x35
   45302:	4604      	mov	r4, r0
   45304:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   45308:	4808      	ldr	r0, [pc, #32]	; (4532c <frexp+0x60>)
   4530a:	151b      	asrs	r3, r3, #20
   4530c:	4008      	ands	r0, r1
   4530e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   45312:	f040 557f 	orr.w	r5, r0, #1069547520	; 0x3fc00000
   45316:	4413      	add	r3, r2
   45318:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   4531c:	6033      	str	r3, [r6, #0]
   4531e:	ec45 4b10 	vmov	d0, r4, r5
   45322:	bd70      	pop	{r4, r5, r6, pc}
   45324:	7fefffff 	.word	0x7fefffff
   45328:	43500000 	.word	0x43500000
   4532c:	800fffff 	.word	0x800fffff

00045330 <__sccl>:
   45330:	b470      	push	{r4, r5, r6}
   45332:	780c      	ldrb	r4, [r1, #0]
   45334:	4606      	mov	r6, r0
   45336:	2c5e      	cmp	r4, #94	; 0x5e
   45338:	d01e      	beq.n	45378 <__sccl+0x48>
   4533a:	2200      	movs	r2, #0
   4533c:	1c48      	adds	r0, r1, #1
   4533e:	4615      	mov	r5, r2
   45340:	1e73      	subs	r3, r6, #1
   45342:	f106 01ff 	add.w	r1, r6, #255	; 0xff
   45346:	f803 2f01 	strb.w	r2, [r3, #1]!
   4534a:	428b      	cmp	r3, r1
   4534c:	d1fb      	bne.n	45346 <__sccl+0x16>
   4534e:	b184      	cbz	r4, 45372 <__sccl+0x42>
   45350:	f085 0301 	eor.w	r3, r5, #1
   45354:	1c41      	adds	r1, r0, #1
   45356:	5533      	strb	r3, [r6, r4]
   45358:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   4535c:	2a2d      	cmp	r2, #45	; 0x2d
   4535e:	d010      	beq.n	45382 <__sccl+0x52>
   45360:	2a5d      	cmp	r2, #93	; 0x5d
   45362:	d003      	beq.n	4536c <__sccl+0x3c>
   45364:	b11a      	cbz	r2, 4536e <__sccl+0x3e>
   45366:	4614      	mov	r4, r2
   45368:	4608      	mov	r0, r1
   4536a:	e7f3      	b.n	45354 <__sccl+0x24>
   4536c:	4608      	mov	r0, r1
   4536e:	bc70      	pop	{r4, r5, r6}
   45370:	4770      	bx	lr
   45372:	3801      	subs	r0, #1
   45374:	bc70      	pop	{r4, r5, r6}
   45376:	4770      	bx	lr
   45378:	2201      	movs	r2, #1
   4537a:	1c88      	adds	r0, r1, #2
   4537c:	784c      	ldrb	r4, [r1, #1]
   4537e:	4615      	mov	r5, r2
   45380:	e7de      	b.n	45340 <__sccl+0x10>
   45382:	7845      	ldrb	r5, [r0, #1]
   45384:	2d5d      	cmp	r5, #93	; 0x5d
   45386:	d00a      	beq.n	4539e <__sccl+0x6e>
   45388:	42ac      	cmp	r4, r5
   4538a:	dc08      	bgt.n	4539e <__sccl+0x6e>
   4538c:	3002      	adds	r0, #2
   4538e:	1932      	adds	r2, r6, r4
   45390:	3401      	adds	r4, #1
   45392:	f802 3f01 	strb.w	r3, [r2, #1]!
   45396:	42a5      	cmp	r5, r4
   45398:	dcfa      	bgt.n	45390 <__sccl+0x60>
   4539a:	3102      	adds	r1, #2
   4539c:	e7dc      	b.n	45358 <__sccl+0x28>
   4539e:	242d      	movs	r4, #45	; 0x2d
   453a0:	4608      	mov	r0, r1
   453a2:	e7d7      	b.n	45354 <__sccl+0x24>

000453a4 <nanf>:
   453a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 453ac <nanf+0x8>
   453a8:	4770      	bx	lr
   453aa:	bf00      	nop
   453ac:	7fc00000 	.word	0x7fc00000

000453b0 <_raise_r>:
   453b0:	291f      	cmp	r1, #31
   453b2:	b538      	push	{r3, r4, r5, lr}
   453b4:	d824      	bhi.n	45400 <_raise_r+0x50>
   453b6:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
   453ba:	4605      	mov	r5, r0
   453bc:	460c      	mov	r4, r1
   453be:	b173      	cbz	r3, 453de <_raise_r+0x2e>
   453c0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   453c4:	b15a      	cbz	r2, 453de <_raise_r+0x2e>
   453c6:	2a01      	cmp	r2, #1
   453c8:	d013      	beq.n	453f2 <_raise_r+0x42>
   453ca:	1c51      	adds	r1, r2, #1
   453cc:	d014      	beq.n	453f8 <_raise_r+0x48>
   453ce:	2500      	movs	r5, #0
   453d0:	4620      	mov	r0, r4
   453d2:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
   453d6:	4790      	blx	r2
   453d8:	462b      	mov	r3, r5
   453da:	4618      	mov	r0, r3
   453dc:	bd38      	pop	{r3, r4, r5, pc}
   453de:	4628      	mov	r0, r5
   453e0:	f000 f830 	bl	45444 <_getpid_r>
   453e4:	4622      	mov	r2, r4
   453e6:	4601      	mov	r1, r0
   453e8:	4628      	mov	r0, r5
   453ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   453ee:	f000 b815 	b.w	4541c <_kill_r>
   453f2:	2300      	movs	r3, #0
   453f4:	4618      	mov	r0, r3
   453f6:	bd38      	pop	{r3, r4, r5, pc}
   453f8:	2216      	movs	r2, #22
   453fa:	2301      	movs	r3, #1
   453fc:	6002      	str	r2, [r0, #0]
   453fe:	e7ec      	b.n	453da <_raise_r+0x2a>
   45400:	2216      	movs	r2, #22
   45402:	f04f 33ff 	mov.w	r3, #4294967295
   45406:	6002      	str	r2, [r0, #0]
   45408:	e7e7      	b.n	453da <_raise_r+0x2a>
   4540a:	bf00      	nop

0004540c <raise>:
   4540c:	4b02      	ldr	r3, [pc, #8]	; (45418 <raise+0xc>)
   4540e:	4601      	mov	r1, r0
   45410:	6818      	ldr	r0, [r3, #0]
   45412:	f7ff bfcd 	b.w	453b0 <_raise_r>
   45416:	bf00      	nop
   45418:	20031c24 	.word	0x20031c24

0004541c <_kill_r>:
   4541c:	b570      	push	{r4, r5, r6, lr}
   4541e:	460d      	mov	r5, r1
   45420:	2300      	movs	r3, #0
   45422:	4c07      	ldr	r4, [pc, #28]	; (45440 <_kill_r+0x24>)
   45424:	4606      	mov	r6, r0
   45426:	4611      	mov	r1, r2
   45428:	4628      	mov	r0, r5
   4542a:	6023      	str	r3, [r4, #0]
   4542c:	f001 fb41 	bl	46ab2 <_kill>
   45430:	1c43      	adds	r3, r0, #1
   45432:	d000      	beq.n	45436 <_kill_r+0x1a>
   45434:	bd70      	pop	{r4, r5, r6, pc}
   45436:	6823      	ldr	r3, [r4, #0]
   45438:	2b00      	cmp	r3, #0
   4543a:	d0fb      	beq.n	45434 <_kill_r+0x18>
   4543c:	6033      	str	r3, [r6, #0]
   4543e:	bd70      	pop	{r4, r5, r6, pc}
   45440:	2002c4ec 	.word	0x2002c4ec

00045444 <_getpid_r>:
   45444:	f001 bb37 	b.w	46ab6 <_getpid>

00045448 <sprintf>:
   45448:	b40e      	push	{r1, r2, r3}
   4544a:	b570      	push	{r4, r5, r6, lr}
   4544c:	b09d      	sub	sp, #116	; 0x74
   4544e:	4e0d      	ldr	r6, [pc, #52]	; (45484 <sprintf+0x3c>)
   45450:	4603      	mov	r3, r0
   45452:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   45456:	ac21      	add	r4, sp, #132	; 0x84
   45458:	6830      	ldr	r0, [r6, #0]
   4545a:	4e0b      	ldr	r6, [pc, #44]	; (45488 <sprintf+0x40>)
   4545c:	a902      	add	r1, sp, #8
   4545e:	f854 2b04 	ldr.w	r2, [r4], #4
   45462:	9302      	str	r3, [sp, #8]
   45464:	9306      	str	r3, [sp, #24]
   45466:	4623      	mov	r3, r4
   45468:	9401      	str	r4, [sp, #4]
   4546a:	9507      	str	r5, [sp, #28]
   4546c:	e9cd 5604 	strd	r5, r6, [sp, #16]
   45470:	f7d6 fa26 	bl	1b8c0 <_svfprintf_r>
   45474:	9b02      	ldr	r3, [sp, #8]
   45476:	2200      	movs	r2, #0
   45478:	701a      	strb	r2, [r3, #0]
   4547a:	b01d      	add	sp, #116	; 0x74
   4547c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   45480:	b003      	add	sp, #12
   45482:	4770      	bx	lr
   45484:	20031c24 	.word	0x20031c24
   45488:	ffff0208 	.word	0xffff0208

0004548c <_strtoll_l.isra.0>:
   4548c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45490:	b089      	sub	sp, #36	; 0x24
   45492:	461f      	mov	r7, r3
   45494:	4688      	mov	r8, r1
   45496:	9203      	str	r2, [sp, #12]
   45498:	e9cd 1006 	strd	r1, r0, [sp, #24]
   4549c:	e000      	b.n	454a0 <_strtoll_l.isra.0+0x14>
   4549e:	46a8      	mov	r8, r5
   454a0:	4645      	mov	r5, r8
   454a2:	9812      	ldr	r0, [sp, #72]	; 0x48
   454a4:	f815 4b01 	ldrb.w	r4, [r5], #1
   454a8:	f7fa f8e4 	bl	3f674 <__locale_ctype_ptr_l>
   454ac:	4420      	add	r0, r4
   454ae:	7846      	ldrb	r6, [r0, #1]
   454b0:	f016 0608 	ands.w	r6, r6, #8
   454b4:	d1f3      	bne.n	4549e <_strtoll_l.isra.0+0x12>
   454b6:	2c2d      	cmp	r4, #45	; 0x2d
   454b8:	f000 8088 	beq.w	455cc <_strtoll_l.isra.0+0x140>
   454bc:	2c2b      	cmp	r4, #43	; 0x2b
   454be:	d056      	beq.n	4556e <_strtoll_l.isra.0+0xe2>
   454c0:	f037 0310 	bics.w	r3, r7, #16
   454c4:	d15a      	bne.n	4557c <_strtoll_l.isra.0+0xf0>
   454c6:	2c30      	cmp	r4, #48	; 0x30
   454c8:	f000 8086 	beq.w	455d8 <_strtoll_l.isra.0+0x14c>
   454cc:	2f00      	cmp	r7, #0
   454ce:	d155      	bne.n	4557c <_strtoll_l.isra.0+0xf0>
   454d0:	f04f 0a0a 	mov.w	sl, #10
   454d4:	f04f 0b00 	mov.w	fp, #0
   454d8:	270a      	movs	r7, #10
   454da:	2e00      	cmp	r6, #0
   454dc:	d053      	beq.n	45586 <_strtoll_l.isra.0+0xfa>
   454de:	2000      	movs	r0, #0
   454e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   454e4:	e9cd 0304 	strd	r0, r3, [sp, #16]
   454e8:	4652      	mov	r2, sl
   454ea:	465b      	mov	r3, fp
   454ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   454f0:	f7d3 fc64 	bl	18dbc <__aeabi_uldivmod>
   454f4:	2300      	movs	r3, #0
   454f6:	4680      	mov	r8, r0
   454f8:	4689      	mov	r9, r1
   454fa:	2000      	movs	r0, #0
   454fc:	2100      	movs	r1, #0
   454fe:	46a4      	mov	ip, r4
   45500:	46b6      	mov	lr, r6
   45502:	e9cd ab00 	strd	sl, fp, [sp]
   45506:	e010      	b.n	4552a <_strtoll_l.isra.0+0x9e>
   45508:	f1ac 0437 	sub.w	r4, ip, #55	; 0x37
   4550c:	42a7      	cmp	r7, r4
   4550e:	dd1c      	ble.n	4554a <_strtoll_l.isra.0+0xbe>
   45510:	2b00      	cmp	r3, #0
   45512:	db06      	blt.n	45522 <_strtoll_l.isra.0+0x96>
   45514:	4589      	cmp	r9, r1
   45516:	bf08      	it	eq
   45518:	4580      	cmpeq	r8, r0
   4551a:	d302      	bcc.n	45522 <_strtoll_l.isra.0+0x96>
   4551c:	d13a      	bne.n	45594 <_strtoll_l.isra.0+0x108>
   4551e:	42a2      	cmp	r2, r4
   45520:	da38      	bge.n	45594 <_strtoll_l.isra.0+0x108>
   45522:	f04f 33ff 	mov.w	r3, #4294967295
   45526:	f815 cb01 	ldrb.w	ip, [r5], #1
   4552a:	f1ac 0430 	sub.w	r4, ip, #48	; 0x30
   4552e:	2c09      	cmp	r4, #9
   45530:	d9ec      	bls.n	4550c <_strtoll_l.isra.0+0x80>
   45532:	f1ac 0441 	sub.w	r4, ip, #65	; 0x41
   45536:	2c19      	cmp	r4, #25
   45538:	d9e6      	bls.n	45508 <_strtoll_l.isra.0+0x7c>
   4553a:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
   4553e:	2c19      	cmp	r4, #25
   45540:	d803      	bhi.n	4554a <_strtoll_l.isra.0+0xbe>
   45542:	f1ac 0457 	sub.w	r4, ip, #87	; 0x57
   45546:	42a7      	cmp	r7, r4
   45548:	dce2      	bgt.n	45510 <_strtoll_l.isra.0+0x84>
   4554a:	1c5a      	adds	r2, r3, #1
   4554c:	4676      	mov	r6, lr
   4554e:	d033      	beq.n	455b8 <_strtoll_l.isra.0+0x12c>
   45550:	b116      	cbz	r6, 45558 <_strtoll_l.isra.0+0xcc>
   45552:	4240      	negs	r0, r0
   45554:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   45558:	9a03      	ldr	r2, [sp, #12]
   4555a:	b12a      	cbz	r2, 45568 <_strtoll_l.isra.0+0xdc>
   4555c:	2b00      	cmp	r3, #0
   4555e:	d148      	bne.n	455f2 <_strtoll_l.isra.0+0x166>
   45560:	9b03      	ldr	r3, [sp, #12]
   45562:	461a      	mov	r2, r3
   45564:	9b06      	ldr	r3, [sp, #24]
   45566:	6013      	str	r3, [r2, #0]
   45568:	b009      	add	sp, #36	; 0x24
   4556a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4556e:	f037 0310 	bics.w	r3, r7, #16
   45572:	f108 0502 	add.w	r5, r8, #2
   45576:	f898 4001 	ldrb.w	r4, [r8, #1]
   4557a:	d0a4      	beq.n	454c6 <_strtoll_l.isra.0+0x3a>
   4557c:	46ba      	mov	sl, r7
   4557e:	ea4f 7be7 	mov.w	fp, r7, asr #31
   45582:	2e00      	cmp	r6, #0
   45584:	d1ab      	bne.n	454de <_strtoll_l.isra.0+0x52>
   45586:	f04f 31ff 	mov.w	r1, #4294967295
   4558a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   4558e:	e9cd 1304 	strd	r1, r3, [sp, #16]
   45592:	e7a9      	b.n	454e8 <_strtoll_l.isra.0+0x5c>
   45594:	9e01      	ldr	r6, [sp, #4]
   45596:	4682      	mov	sl, r0
   45598:	2301      	movs	r3, #1
   4559a:	fb00 fc06 	mul.w	ip, r0, r6
   4559e:	9800      	ldr	r0, [sp, #0]
   455a0:	fb00 cc01 	mla	ip, r0, r1, ip
   455a4:	fbaa 0100 	umull	r0, r1, sl, r0
   455a8:	4461      	add	r1, ip
   455aa:	eb10 0a04 	adds.w	sl, r0, r4
   455ae:	eb41 7be4 	adc.w	fp, r1, r4, asr #31
   455b2:	4650      	mov	r0, sl
   455b4:	4659      	mov	r1, fp
   455b6:	e7b6      	b.n	45526 <_strtoll_l.isra.0+0x9a>
   455b8:	2322      	movs	r3, #34	; 0x22
   455ba:	9a07      	ldr	r2, [sp, #28]
   455bc:	6013      	str	r3, [r2, #0]
   455be:	9b03      	ldr	r3, [sp, #12]
   455c0:	b1d3      	cbz	r3, 455f8 <_strtoll_l.isra.0+0x16c>
   455c2:	1e6b      	subs	r3, r5, #1
   455c4:	9804      	ldr	r0, [sp, #16]
   455c6:	9905      	ldr	r1, [sp, #20]
   455c8:	9306      	str	r3, [sp, #24]
   455ca:	e7c9      	b.n	45560 <_strtoll_l.isra.0+0xd4>
   455cc:	f108 0502 	add.w	r5, r8, #2
   455d0:	f898 4001 	ldrb.w	r4, [r8, #1]
   455d4:	2601      	movs	r6, #1
   455d6:	e773      	b.n	454c0 <_strtoll_l.isra.0+0x34>
   455d8:	782b      	ldrb	r3, [r5, #0]
   455da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   455de:	2b58      	cmp	r3, #88	; 0x58
   455e0:	d10d      	bne.n	455fe <_strtoll_l.isra.0+0x172>
   455e2:	786c      	ldrb	r4, [r5, #1]
   455e4:	f04f 0a10 	mov.w	sl, #16
   455e8:	f04f 0b00 	mov.w	fp, #0
   455ec:	3502      	adds	r5, #2
   455ee:	2710      	movs	r7, #16
   455f0:	e773      	b.n	454da <_strtoll_l.isra.0+0x4e>
   455f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   455f6:	e7e4      	b.n	455c2 <_strtoll_l.isra.0+0x136>
   455f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   455fc:	e7b4      	b.n	45568 <_strtoll_l.isra.0+0xdc>
   455fe:	2f00      	cmp	r7, #0
   45600:	d1bc      	bne.n	4557c <_strtoll_l.isra.0+0xf0>
   45602:	f04f 0a08 	mov.w	sl, #8
   45606:	f04f 0b00 	mov.w	fp, #0
   4560a:	2708      	movs	r7, #8
   4560c:	e765      	b.n	454da <_strtoll_l.isra.0+0x4e>
   4560e:	bf00      	nop

00045610 <_strtoll_r>:
   45610:	b530      	push	{r4, r5, lr}
   45612:	4c06      	ldr	r4, [pc, #24]	; (4562c <_strtoll_r+0x1c>)
   45614:	b083      	sub	sp, #12
   45616:	4d06      	ldr	r5, [pc, #24]	; (45630 <_strtoll_r+0x20>)
   45618:	6824      	ldr	r4, [r4, #0]
   4561a:	6b64      	ldr	r4, [r4, #52]	; 0x34
   4561c:	2c00      	cmp	r4, #0
   4561e:	bf08      	it	eq
   45620:	462c      	moveq	r4, r5
   45622:	9400      	str	r4, [sp, #0]
   45624:	f7ff ff32 	bl	4548c <_strtoll_l.isra.0>
   45628:	b003      	add	sp, #12
   4562a:	bd30      	pop	{r4, r5, pc}
   4562c:	20031c24 	.word	0x20031c24
   45630:	20031c28 	.word	0x20031c28

00045634 <_strtoull_l.isra.0>:
   45634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45638:	b087      	sub	sp, #28
   4563a:	4689      	mov	r9, r1
   4563c:	4698      	mov	r8, r3
   4563e:	460e      	mov	r6, r1
   45640:	9005      	str	r0, [sp, #20]
   45642:	9203      	str	r2, [sp, #12]
   45644:	e000      	b.n	45648 <_strtoull_l.isra.0+0x14>
   45646:	462e      	mov	r6, r5
   45648:	4635      	mov	r5, r6
   4564a:	9810      	ldr	r0, [sp, #64]	; 0x40
   4564c:	f815 4b01 	ldrb.w	r4, [r5], #1
   45650:	f7fa f810 	bl	3f674 <__locale_ctype_ptr_l>
   45654:	4420      	add	r0, r4
   45656:	f890 b001 	ldrb.w	fp, [r0, #1]
   4565a:	f01b 0b08 	ands.w	fp, fp, #8
   4565e:	d1f2      	bne.n	45646 <_strtoull_l.isra.0+0x12>
   45660:	2c2d      	cmp	r4, #45	; 0x2d
   45662:	f000 808e 	beq.w	45782 <_strtoull_l.isra.0+0x14e>
   45666:	2c2b      	cmp	r4, #43	; 0x2b
   45668:	f8cd b010 	str.w	fp, [sp, #16]
   4566c:	bf04      	itt	eq
   4566e:	1cb5      	addeq	r5, r6, #2
   45670:	7874      	ldrbeq	r4, [r6, #1]
   45672:	f038 0310 	bics.w	r3, r8, #16
   45676:	d114      	bne.n	456a2 <_strtoull_l.isra.0+0x6e>
   45678:	2c30      	cmp	r4, #48	; 0x30
   4567a:	f000 8087 	beq.w	4578c <_strtoull_l.isra.0+0x158>
   4567e:	f1b8 0f00 	cmp.w	r8, #0
   45682:	d10e      	bne.n	456a2 <_strtoull_l.isra.0+0x6e>
   45684:	2205      	movs	r2, #5
   45686:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
   4568a:	4f50      	ldr	r7, [pc, #320]	; (457cc <_strtoull_l.isra.0+0x198>)
   4568c:	f04f 0a0a 	mov.w	sl, #10
   45690:	f04f 0b00 	mov.w	fp, #0
   45694:	f04f 080a 	mov.w	r8, #10
   45698:	e018      	b.n	456cc <_strtoull_l.isra.0+0x98>
   4569a:	f1b8 0f00 	cmp.w	r8, #0
   4569e:	f000 8088 	beq.w	457b2 <_strtoull_l.isra.0+0x17e>
   456a2:	ea4f 7be8 	mov.w	fp, r8, asr #31
   456a6:	4642      	mov	r2, r8
   456a8:	f04f 30ff 	mov.w	r0, #4294967295
   456ac:	f04f 31ff 	mov.w	r1, #4294967295
   456b0:	465b      	mov	r3, fp
   456b2:	46c2      	mov	sl, r8
   456b4:	f7d3 fb82 	bl	18dbc <__aeabi_uldivmod>
   456b8:	4642      	mov	r2, r8
   456ba:	4606      	mov	r6, r0
   456bc:	460f      	mov	r7, r1
   456be:	465b      	mov	r3, fp
   456c0:	f04f 30ff 	mov.w	r0, #4294967295
   456c4:	f04f 31ff 	mov.w	r1, #4294967295
   456c8:	f7d3 fb78 	bl	18dbc <__aeabi_uldivmod>
   456cc:	2300      	movs	r3, #0
   456ce:	2000      	movs	r0, #0
   456d0:	2100      	movs	r1, #0
   456d2:	46a4      	mov	ip, r4
   456d4:	4696      	mov	lr, r2
   456d6:	e9cd ab00 	strd	sl, fp, [sp]
   456da:	e013      	b.n	45704 <_strtoull_l.isra.0+0xd0>
   456dc:	f1ac 0437 	sub.w	r4, ip, #55	; 0x37
   456e0:	45a0      	cmp	r8, r4
   456e2:	dd1f      	ble.n	45724 <_strtoull_l.isra.0+0xf0>
   456e4:	2b00      	cmp	r3, #0
   456e6:	db09      	blt.n	456fc <_strtoull_l.isra.0+0xc8>
   456e8:	428f      	cmp	r7, r1
   456ea:	bf08      	it	eq
   456ec:	4286      	cmpeq	r6, r0
   456ee:	d305      	bcc.n	456fc <_strtoull_l.isra.0+0xc8>
   456f0:	42b9      	cmp	r1, r7
   456f2:	bf08      	it	eq
   456f4:	42b0      	cmpeq	r0, r6
   456f6:	d125      	bne.n	45744 <_strtoull_l.isra.0+0x110>
   456f8:	4574      	cmp	r4, lr
   456fa:	dd23      	ble.n	45744 <_strtoull_l.isra.0+0x110>
   456fc:	f04f 33ff 	mov.w	r3, #4294967295
   45700:	f815 cb01 	ldrb.w	ip, [r5], #1
   45704:	f1ac 0430 	sub.w	r4, ip, #48	; 0x30
   45708:	2c09      	cmp	r4, #9
   4570a:	d9e9      	bls.n	456e0 <_strtoull_l.isra.0+0xac>
   4570c:	f1ac 0441 	sub.w	r4, ip, #65	; 0x41
   45710:	2c19      	cmp	r4, #25
   45712:	d9e3      	bls.n	456dc <_strtoull_l.isra.0+0xa8>
   45714:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
   45718:	2c19      	cmp	r4, #25
   4571a:	d803      	bhi.n	45724 <_strtoull_l.isra.0+0xf0>
   4571c:	f1ac 0457 	sub.w	r4, ip, #87	; 0x57
   45720:	45a0      	cmp	r8, r4
   45722:	dcdf      	bgt.n	456e4 <_strtoull_l.isra.0+0xb0>
   45724:	2b00      	cmp	r3, #0
   45726:	db1f      	blt.n	45768 <_strtoull_l.isra.0+0x134>
   45728:	9a04      	ldr	r2, [sp, #16]
   4572a:	b112      	cbz	r2, 45732 <_strtoull_l.isra.0+0xfe>
   4572c:	4240      	negs	r0, r0
   4572e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   45732:	9a03      	ldr	r2, [sp, #12]
   45734:	b11a      	cbz	r2, 4573e <_strtoull_l.isra.0+0x10a>
   45736:	bb0b      	cbnz	r3, 4577c <_strtoull_l.isra.0+0x148>
   45738:	9b03      	ldr	r3, [sp, #12]
   4573a:	f8c3 9000 	str.w	r9, [r3]
   4573e:	b007      	add	sp, #28
   45740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45744:	9a01      	ldr	r2, [sp, #4]
   45746:	4682      	mov	sl, r0
   45748:	2301      	movs	r3, #1
   4574a:	fb00 fc02 	mul.w	ip, r0, r2
   4574e:	9800      	ldr	r0, [sp, #0]
   45750:	fb00 cc01 	mla	ip, r0, r1, ip
   45754:	fbaa 0100 	umull	r0, r1, sl, r0
   45758:	4461      	add	r1, ip
   4575a:	eb10 0a04 	adds.w	sl, r0, r4
   4575e:	eb41 7be4 	adc.w	fp, r1, r4, asr #31
   45762:	4650      	mov	r0, sl
   45764:	4659      	mov	r1, fp
   45766:	e7cb      	b.n	45700 <_strtoull_l.isra.0+0xcc>
   45768:	2322      	movs	r3, #34	; 0x22
   4576a:	9a05      	ldr	r2, [sp, #20]
   4576c:	f04f 30ff 	mov.w	r0, #4294967295
   45770:	f04f 31ff 	mov.w	r1, #4294967295
   45774:	6013      	str	r3, [r2, #0]
   45776:	9b03      	ldr	r3, [sp, #12]
   45778:	2b00      	cmp	r3, #0
   4577a:	d0e0      	beq.n	4573e <_strtoull_l.isra.0+0x10a>
   4577c:	f105 39ff 	add.w	r9, r5, #4294967295
   45780:	e7da      	b.n	45738 <_strtoull_l.isra.0+0x104>
   45782:	2301      	movs	r3, #1
   45784:	1cb5      	adds	r5, r6, #2
   45786:	7874      	ldrb	r4, [r6, #1]
   45788:	9304      	str	r3, [sp, #16]
   4578a:	e772      	b.n	45672 <_strtoull_l.isra.0+0x3e>
   4578c:	782b      	ldrb	r3, [r5, #0]
   4578e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   45792:	2b58      	cmp	r3, #88	; 0x58
   45794:	d181      	bne.n	4569a <_strtoull_l.isra.0+0x66>
   45796:	786c      	ldrb	r4, [r5, #1]
   45798:	220f      	movs	r2, #15
   4579a:	3502      	adds	r5, #2
   4579c:	f04f 36ff 	mov.w	r6, #4294967295
   457a0:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   457a4:	f04f 0a10 	mov.w	sl, #16
   457a8:	f04f 0b00 	mov.w	fp, #0
   457ac:	f04f 0810 	mov.w	r8, #16
   457b0:	e78c      	b.n	456cc <_strtoull_l.isra.0+0x98>
   457b2:	2207      	movs	r2, #7
   457b4:	f04f 36ff 	mov.w	r6, #4294967295
   457b8:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
   457bc:	f04f 0a08 	mov.w	sl, #8
   457c0:	f04f 0b00 	mov.w	fp, #0
   457c4:	f04f 0808 	mov.w	r8, #8
   457c8:	e780      	b.n	456cc <_strtoull_l.isra.0+0x98>
   457ca:	bf00      	nop
   457cc:	19999999 	.word	0x19999999

000457d0 <_strtoull_r>:
   457d0:	b530      	push	{r4, r5, lr}
   457d2:	4c06      	ldr	r4, [pc, #24]	; (457ec <_strtoull_r+0x1c>)
   457d4:	b083      	sub	sp, #12
   457d6:	4d06      	ldr	r5, [pc, #24]	; (457f0 <_strtoull_r+0x20>)
   457d8:	6824      	ldr	r4, [r4, #0]
   457da:	6b64      	ldr	r4, [r4, #52]	; 0x34
   457dc:	2c00      	cmp	r4, #0
   457de:	bf08      	it	eq
   457e0:	462c      	moveq	r4, r5
   457e2:	9400      	str	r4, [sp, #0]
   457e4:	f7ff ff26 	bl	45634 <_strtoull_l.isra.0>
   457e8:	b003      	add	sp, #12
   457ea:	bd30      	pop	{r4, r5, pc}
   457ec:	20031c24 	.word	0x20031c24
   457f0:	20031c28 	.word	0x20031c28

000457f4 <__ssprint_r>:
   457f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   457f8:	6893      	ldr	r3, [r2, #8]
   457fa:	b083      	sub	sp, #12
   457fc:	4692      	mov	sl, r2
   457fe:	9001      	str	r0, [sp, #4]
   45800:	2b00      	cmp	r3, #0
   45802:	d072      	beq.n	458ea <__ssprint_r+0xf6>
   45804:	6817      	ldr	r7, [r2, #0]
   45806:	460c      	mov	r4, r1
   45808:	6808      	ldr	r0, [r1, #0]
   4580a:	3708      	adds	r7, #8
   4580c:	688d      	ldr	r5, [r1, #8]
   4580e:	e047      	b.n	458a0 <__ssprint_r+0xac>
   45810:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   45814:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   45818:	d031      	beq.n	4587e <__ssprint_r+0x8a>
   4581a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   4581e:	eb12 0242 	adds.w	r2, r2, r2, lsl #1
   45822:	eba0 0501 	sub.w	r5, r0, r1
   45826:	f106 0001 	add.w	r0, r6, #1
   4582a:	bf48      	it	mi
   4582c:	3201      	addmi	r2, #1
   4582e:	4428      	add	r0, r5
   45830:	ea4f 0962 	mov.w	r9, r2, asr #1
   45834:	4548      	cmp	r0, r9
   45836:	464a      	mov	r2, r9
   45838:	d901      	bls.n	4583e <__ssprint_r+0x4a>
   4583a:	4681      	mov	r9, r0
   4583c:	4602      	mov	r2, r0
   4583e:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   45842:	d039      	beq.n	458b8 <__ssprint_r+0xc4>
   45844:	4611      	mov	r1, r2
   45846:	9801      	ldr	r0, [sp, #4]
   45848:	f7f9 ff36 	bl	3f6b8 <_malloc_r>
   4584c:	4680      	mov	r8, r0
   4584e:	2800      	cmp	r0, #0
   45850:	d051      	beq.n	458f6 <__ssprint_r+0x102>
   45852:	462a      	mov	r2, r5
   45854:	6921      	ldr	r1, [r4, #16]
   45856:	f7d4 fb2b 	bl	19eb0 <memcpy>
   4585a:	89a2      	ldrh	r2, [r4, #12]
   4585c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   45860:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   45864:	81a2      	strh	r2, [r4, #12]
   45866:	eb08 0005 	add.w	r0, r8, r5
   4586a:	eba9 0205 	sub.w	r2, r9, r5
   4586e:	f8c4 8010 	str.w	r8, [r4, #16]
   45872:	4635      	mov	r5, r6
   45874:	46b0      	mov	r8, r6
   45876:	6020      	str	r0, [r4, #0]
   45878:	60a2      	str	r2, [r4, #8]
   4587a:	f8c4 9014 	str.w	r9, [r4, #20]
   4587e:	4642      	mov	r2, r8
   45880:	4659      	mov	r1, fp
   45882:	f7ff f83b 	bl	448fc <memmove>
   45886:	f8da 3008 	ldr.w	r3, [sl, #8]
   4588a:	68a2      	ldr	r2, [r4, #8]
   4588c:	6820      	ldr	r0, [r4, #0]
   4588e:	1b9e      	subs	r6, r3, r6
   45890:	1b55      	subs	r5, r2, r5
   45892:	4440      	add	r0, r8
   45894:	60a5      	str	r5, [r4, #8]
   45896:	6020      	str	r0, [r4, #0]
   45898:	f8ca 6008 	str.w	r6, [sl, #8]
   4589c:	b32e      	cbz	r6, 458ea <__ssprint_r+0xf6>
   4589e:	3708      	adds	r7, #8
   458a0:	f857 6c04 	ldr.w	r6, [r7, #-4]
   458a4:	46a8      	mov	r8, r5
   458a6:	f857 bc08 	ldr.w	fp, [r7, #-8]
   458aa:	2e00      	cmp	r6, #0
   458ac:	d0f7      	beq.n	4589e <__ssprint_r+0xaa>
   458ae:	42ae      	cmp	r6, r5
   458b0:	d2ae      	bcs.n	45810 <__ssprint_r+0x1c>
   458b2:	4635      	mov	r5, r6
   458b4:	46b0      	mov	r8, r6
   458b6:	e7e2      	b.n	4587e <__ssprint_r+0x8a>
   458b8:	9801      	ldr	r0, [sp, #4]
   458ba:	f7fa facb 	bl	3fe54 <_realloc_r>
   458be:	4680      	mov	r8, r0
   458c0:	2800      	cmp	r0, #0
   458c2:	d1d0      	bne.n	45866 <__ssprint_r+0x72>
   458c4:	9d01      	ldr	r5, [sp, #4]
   458c6:	6921      	ldr	r1, [r4, #16]
   458c8:	4628      	mov	r0, r5
   458ca:	f7fe f8cd 	bl	43a68 <_free_r>
   458ce:	230c      	movs	r3, #12
   458d0:	602b      	str	r3, [r5, #0]
   458d2:	89a3      	ldrh	r3, [r4, #12]
   458d4:	2200      	movs	r2, #0
   458d6:	f04f 30ff 	mov.w	r0, #4294967295
   458da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   458de:	81a3      	strh	r3, [r4, #12]
   458e0:	e9ca 2201 	strd	r2, r2, [sl, #4]
   458e4:	b003      	add	sp, #12
   458e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   458ea:	2000      	movs	r0, #0
   458ec:	f8ca 0004 	str.w	r0, [sl, #4]
   458f0:	b003      	add	sp, #12
   458f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   458f6:	230c      	movs	r3, #12
   458f8:	9a01      	ldr	r2, [sp, #4]
   458fa:	6013      	str	r3, [r2, #0]
   458fc:	e7e9      	b.n	458d2 <__ssprint_r+0xde>
   458fe:	bf00      	nop

00045900 <_sungetc_r>:
   45900:	1c4b      	adds	r3, r1, #1
   45902:	b570      	push	{r4, r5, r6, lr}
   45904:	d01a      	beq.n	4593c <_sungetc_r+0x3c>
   45906:	8993      	ldrh	r3, [r2, #12]
   45908:	b2cd      	uxtb	r5, r1
   4590a:	6b14      	ldr	r4, [r2, #48]	; 0x30
   4590c:	f023 0320 	bic.w	r3, r3, #32
   45910:	6851      	ldr	r1, [r2, #4]
   45912:	8193      	strh	r3, [r2, #12]
   45914:	b1ac      	cbz	r4, 45942 <_sungetc_r+0x42>
   45916:	6b53      	ldr	r3, [r2, #52]	; 0x34
   45918:	4614      	mov	r4, r2
   4591a:	428b      	cmp	r3, r1
   4591c:	dd09      	ble.n	45932 <_sungetc_r+0x32>
   4591e:	6823      	ldr	r3, [r4, #0]
   45920:	1e5a      	subs	r2, r3, #1
   45922:	6022      	str	r2, [r4, #0]
   45924:	f803 5c01 	strb.w	r5, [r3, #-1]
   45928:	6863      	ldr	r3, [r4, #4]
   4592a:	3301      	adds	r3, #1
   4592c:	6063      	str	r3, [r4, #4]
   4592e:	4628      	mov	r0, r5
   45930:	bd70      	pop	{r4, r5, r6, pc}
   45932:	4611      	mov	r1, r2
   45934:	f000 f87c 	bl	45a30 <__submore>
   45938:	2800      	cmp	r0, #0
   4593a:	d0f0      	beq.n	4591e <_sungetc_r+0x1e>
   4593c:	f04f 35ff 	mov.w	r5, #4294967295
   45940:	e7f5      	b.n	4592e <_sungetc_r+0x2e>
   45942:	6913      	ldr	r3, [r2, #16]
   45944:	6810      	ldr	r0, [r2, #0]
   45946:	b12b      	cbz	r3, 45954 <_sungetc_r+0x54>
   45948:	4283      	cmp	r3, r0
   4594a:	d203      	bcs.n	45954 <_sungetc_r+0x54>
   4594c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   45950:	42ab      	cmp	r3, r5
   45952:	d00e      	beq.n	45972 <_sungetc_r+0x72>
   45954:	63d1      	str	r1, [r2, #60]	; 0x3c
   45956:	4613      	mov	r3, r2
   45958:	f102 0640 	add.w	r6, r2, #64	; 0x40
   4595c:	2403      	movs	r4, #3
   4595e:	2101      	movs	r1, #1
   45960:	6390      	str	r0, [r2, #56]	; 0x38
   45962:	4628      	mov	r0, r5
   45964:	e9c2 640c 	strd	r6, r4, [r2, #48]	; 0x30
   45968:	f803 5f42 	strb.w	r5, [r3, #66]!
   4596c:	e9c2 3100 	strd	r3, r1, [r2]
   45970:	bd70      	pop	{r4, r5, r6, pc}
   45972:	3801      	subs	r0, #1
   45974:	3101      	adds	r1, #1
   45976:	e9c2 0100 	strd	r0, r1, [r2]
   4597a:	e7d8      	b.n	4592e <_sungetc_r+0x2e>

0004597c <__ssrefill_r>:
   4597c:	b510      	push	{r4, lr}
   4597e:	460c      	mov	r4, r1
   45980:	6b09      	ldr	r1, [r1, #48]	; 0x30
   45982:	b169      	cbz	r1, 459a0 <__ssrefill_r+0x24>
   45984:	f104 0340 	add.w	r3, r4, #64	; 0x40
   45988:	4299      	cmp	r1, r3
   4598a:	d001      	beq.n	45990 <__ssrefill_r+0x14>
   4598c:	f7fe f86c 	bl	43a68 <_free_r>
   45990:	2000      	movs	r0, #0
   45992:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   45994:	6320      	str	r0, [r4, #48]	; 0x30
   45996:	6063      	str	r3, [r4, #4]
   45998:	b113      	cbz	r3, 459a0 <__ssrefill_r+0x24>
   4599a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   4599c:	6023      	str	r3, [r4, #0]
   4599e:	bd10      	pop	{r4, pc}
   459a0:	89a3      	ldrh	r3, [r4, #12]
   459a2:	2100      	movs	r1, #0
   459a4:	6922      	ldr	r2, [r4, #16]
   459a6:	f04f 30ff 	mov.w	r0, #4294967295
   459aa:	f043 0320 	orr.w	r3, r3, #32
   459ae:	e9c4 2100 	strd	r2, r1, [r4]
   459b2:	81a3      	strh	r3, [r4, #12]
   459b4:	bd10      	pop	{r4, pc}
   459b6:	bf00      	nop

000459b8 <_sfread_r>:
   459b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   459bc:	fb02 f703 	mul.w	r7, r2, r3
   459c0:	b083      	sub	sp, #12
   459c2:	469a      	mov	sl, r3
   459c4:	9201      	str	r2, [sp, #4]
   459c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   459c8:	b32f      	cbz	r7, 45a16 <_sfread_r+0x5e>
   459ca:	4680      	mov	r8, r0
   459cc:	460e      	mov	r6, r1
   459ce:	463d      	mov	r5, r7
   459d0:	f04f 0900 	mov.w	r9, #0
   459d4:	e00e      	b.n	459f4 <_sfread_r+0x3c>
   459d6:	f7d4 fa6b 	bl	19eb0 <memcpy>
   459da:	6822      	ldr	r2, [r4, #0]
   459dc:	f8c4 9004 	str.w	r9, [r4, #4]
   459e0:	4621      	mov	r1, r4
   459e2:	445a      	add	r2, fp
   459e4:	4640      	mov	r0, r8
   459e6:	445e      	add	r6, fp
   459e8:	eba5 050b 	sub.w	r5, r5, fp
   459ec:	6022      	str	r2, [r4, #0]
   459ee:	f7ff ffc5 	bl	4597c <__ssrefill_r>
   459f2:	b9a0      	cbnz	r0, 45a1e <_sfread_r+0x66>
   459f4:	4630      	mov	r0, r6
   459f6:	e9d4 cb00 	ldrd	ip, fp, [r4]
   459fa:	45ab      	cmp	fp, r5
   459fc:	465a      	mov	r2, fp
   459fe:	4661      	mov	r1, ip
   45a00:	d3e9      	bcc.n	459d6 <_sfread_r+0x1e>
   45a02:	462a      	mov	r2, r5
   45a04:	4657      	mov	r7, sl
   45a06:	f7d4 fa53 	bl	19eb0 <memcpy>
   45a0a:	e9d4 3200 	ldrd	r3, r2, [r4]
   45a0e:	1b52      	subs	r2, r2, r5
   45a10:	441d      	add	r5, r3
   45a12:	e9c4 5200 	strd	r5, r2, [r4]
   45a16:	4638      	mov	r0, r7
   45a18:	b003      	add	sp, #12
   45a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45a1e:	1b7f      	subs	r7, r7, r5
   45a20:	9b01      	ldr	r3, [sp, #4]
   45a22:	fbb7 f7f3 	udiv	r7, r7, r3
   45a26:	4638      	mov	r0, r7
   45a28:	b003      	add	sp, #12
   45a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45a2e:	bf00      	nop

00045a30 <__submore>:
   45a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   45a34:	460c      	mov	r4, r1
   45a36:	6b09      	ldr	r1, [r1, #48]	; 0x30
   45a38:	f104 0340 	add.w	r3, r4, #64	; 0x40
   45a3c:	4299      	cmp	r1, r3
   45a3e:	d014      	beq.n	45a6a <__submore+0x3a>
   45a40:	6b66      	ldr	r6, [r4, #52]	; 0x34
   45a42:	0077      	lsls	r7, r6, #1
   45a44:	463a      	mov	r2, r7
   45a46:	f7fa fa05 	bl	3fe54 <_realloc_r>
   45a4a:	4605      	mov	r5, r0
   45a4c:	b348      	cbz	r0, 45aa2 <__submore+0x72>
   45a4e:	eb00 0806 	add.w	r8, r0, r6
   45a52:	4601      	mov	r1, r0
   45a54:	4632      	mov	r2, r6
   45a56:	4640      	mov	r0, r8
   45a58:	f7d4 fa2a 	bl	19eb0 <memcpy>
   45a5c:	2000      	movs	r0, #0
   45a5e:	f8c4 8000 	str.w	r8, [r4]
   45a62:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   45a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   45a6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   45a6e:	f7f9 fe23 	bl	3f6b8 <_malloc_r>
   45a72:	4603      	mov	r3, r0
   45a74:	b1a8      	cbz	r0, 45aa2 <__submore+0x72>
   45a76:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   45a7a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   45a7e:	6323      	str	r3, [r4, #48]	; 0x30
   45a80:	f203 32fd 	addw	r2, r3, #1021	; 0x3fd
   45a84:	6360      	str	r0, [r4, #52]	; 0x34
   45a86:	2000      	movs	r0, #0
   45a88:	f883 13ff 	strb.w	r1, [r3, #1023]	; 0x3ff
   45a8c:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
   45a90:	f883 13fe 	strb.w	r1, [r3, #1022]	; 0x3fe
   45a94:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   45a98:	f883 13fd 	strb.w	r1, [r3, #1021]	; 0x3fd
   45a9c:	6022      	str	r2, [r4, #0]
   45a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   45aa2:	f04f 30ff 	mov.w	r0, #4294967295
   45aa6:	e7de      	b.n	45a66 <__submore+0x36>

00045aa8 <__swbuf_r>:
   45aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45aaa:	460d      	mov	r5, r1
   45aac:	4614      	mov	r4, r2
   45aae:	4606      	mov	r6, r0
   45ab0:	b110      	cbz	r0, 45ab8 <__swbuf_r+0x10>
   45ab2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   45ab4:	2b00      	cmp	r3, #0
   45ab6:	d043      	beq.n	45b40 <__swbuf_r+0x98>
   45ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   45abc:	69a3      	ldr	r3, [r4, #24]
   45abe:	b291      	uxth	r1, r2
   45ac0:	60a3      	str	r3, [r4, #8]
   45ac2:	0708      	lsls	r0, r1, #28
   45ac4:	d51b      	bpl.n	45afe <__swbuf_r+0x56>
   45ac6:	6923      	ldr	r3, [r4, #16]
   45ac8:	b1cb      	cbz	r3, 45afe <__swbuf_r+0x56>
   45aca:	b2ed      	uxtb	r5, r5
   45acc:	0489      	lsls	r1, r1, #18
   45ace:	462f      	mov	r7, r5
   45ad0:	d522      	bpl.n	45b18 <__swbuf_r+0x70>
   45ad2:	6822      	ldr	r2, [r4, #0]
   45ad4:	6961      	ldr	r1, [r4, #20]
   45ad6:	1ad3      	subs	r3, r2, r3
   45ad8:	4299      	cmp	r1, r3
   45ada:	dd29      	ble.n	45b30 <__swbuf_r+0x88>
   45adc:	3301      	adds	r3, #1
   45ade:	68a1      	ldr	r1, [r4, #8]
   45ae0:	1c50      	adds	r0, r2, #1
   45ae2:	3901      	subs	r1, #1
   45ae4:	6020      	str	r0, [r4, #0]
   45ae6:	60a1      	str	r1, [r4, #8]
   45ae8:	7015      	strb	r5, [r2, #0]
   45aea:	6962      	ldr	r2, [r4, #20]
   45aec:	429a      	cmp	r2, r3
   45aee:	d02a      	beq.n	45b46 <__swbuf_r+0x9e>
   45af0:	2d0a      	cmp	r5, #10
   45af2:	d102      	bne.n	45afa <__swbuf_r+0x52>
   45af4:	7b23      	ldrb	r3, [r4, #12]
   45af6:	07db      	lsls	r3, r3, #31
   45af8:	d425      	bmi.n	45b46 <__swbuf_r+0x9e>
   45afa:	4638      	mov	r0, r7
   45afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   45afe:	4621      	mov	r1, r4
   45b00:	4630      	mov	r0, r6
   45b02:	f7fd fc65 	bl	433d0 <__swsetup_r>
   45b06:	bb20      	cbnz	r0, 45b52 <__swbuf_r+0xaa>
   45b08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   45b0c:	b2ed      	uxtb	r5, r5
   45b0e:	6923      	ldr	r3, [r4, #16]
   45b10:	b291      	uxth	r1, r2
   45b12:	462f      	mov	r7, r5
   45b14:	0489      	lsls	r1, r1, #18
   45b16:	d4dc      	bmi.n	45ad2 <__swbuf_r+0x2a>
   45b18:	6e61      	ldr	r1, [r4, #100]	; 0x64
   45b1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   45b1e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   45b22:	81a2      	strh	r2, [r4, #12]
   45b24:	6822      	ldr	r2, [r4, #0]
   45b26:	6661      	str	r1, [r4, #100]	; 0x64
   45b28:	1ad3      	subs	r3, r2, r3
   45b2a:	6961      	ldr	r1, [r4, #20]
   45b2c:	4299      	cmp	r1, r3
   45b2e:	dcd5      	bgt.n	45adc <__swbuf_r+0x34>
   45b30:	4621      	mov	r1, r4
   45b32:	4630      	mov	r0, r6
   45b34:	f7fd fe2e 	bl	43794 <_fflush_r>
   45b38:	b958      	cbnz	r0, 45b52 <__swbuf_r+0xaa>
   45b3a:	6822      	ldr	r2, [r4, #0]
   45b3c:	2301      	movs	r3, #1
   45b3e:	e7ce      	b.n	45ade <__swbuf_r+0x36>
   45b40:	f7fd fe84 	bl	4384c <__sinit>
   45b44:	e7b8      	b.n	45ab8 <__swbuf_r+0x10>
   45b46:	4621      	mov	r1, r4
   45b48:	4630      	mov	r0, r6
   45b4a:	f7fd fe23 	bl	43794 <_fflush_r>
   45b4e:	2800      	cmp	r0, #0
   45b50:	d0d3      	beq.n	45afa <__swbuf_r+0x52>
   45b52:	f04f 37ff 	mov.w	r7, #4294967295
   45b56:	e7d0      	b.n	45afa <__swbuf_r+0x52>

00045b58 <_wcrtomb_r>:
   45b58:	b5f0      	push	{r4, r5, r6, r7, lr}
   45b5a:	4c12      	ldr	r4, [pc, #72]	; (45ba4 <_wcrtomb_r+0x4c>)
   45b5c:	b085      	sub	sp, #20
   45b5e:	4606      	mov	r6, r0
   45b60:	461f      	mov	r7, r3
   45b62:	6824      	ldr	r4, [r4, #0]
   45b64:	6b64      	ldr	r4, [r4, #52]	; 0x34
   45b66:	b151      	cbz	r1, 45b7e <_wcrtomb_r+0x26>
   45b68:	4d0f      	ldr	r5, [pc, #60]	; (45ba8 <_wcrtomb_r+0x50>)
   45b6a:	2c00      	cmp	r4, #0
   45b6c:	bf08      	it	eq
   45b6e:	462c      	moveq	r4, r5
   45b70:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   45b74:	47a0      	blx	r4
   45b76:	1c43      	adds	r3, r0, #1
   45b78:	d00d      	beq.n	45b96 <_wcrtomb_r+0x3e>
   45b7a:	b005      	add	sp, #20
   45b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   45b7e:	f8df c028 	ldr.w	ip, [pc, #40]	; 45ba8 <_wcrtomb_r+0x50>
   45b82:	460a      	mov	r2, r1
   45b84:	a901      	add	r1, sp, #4
   45b86:	2c00      	cmp	r4, #0
   45b88:	bf08      	it	eq
   45b8a:	4664      	moveq	r4, ip
   45b8c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   45b90:	47a0      	blx	r4
   45b92:	1c43      	adds	r3, r0, #1
   45b94:	d1f1      	bne.n	45b7a <_wcrtomb_r+0x22>
   45b96:	2200      	movs	r2, #0
   45b98:	238a      	movs	r3, #138	; 0x8a
   45b9a:	603a      	str	r2, [r7, #0]
   45b9c:	6033      	str	r3, [r6, #0]
   45b9e:	b005      	add	sp, #20
   45ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   45ba2:	bf00      	nop
   45ba4:	20031c24 	.word	0x20031c24
   45ba8:	20031c28 	.word	0x20031c28

00045bac <_calloc_r>:
   45bac:	b510      	push	{r4, lr}
   45bae:	fb02 f101 	mul.w	r1, r2, r1
   45bb2:	f7f9 fd81 	bl	3f6b8 <_malloc_r>
   45bb6:	4604      	mov	r4, r0
   45bb8:	b1c8      	cbz	r0, 45bee <_calloc_r+0x42>
   45bba:	f850 2c04 	ldr.w	r2, [r0, #-4]
   45bbe:	f022 0203 	bic.w	r2, r2, #3
   45bc2:	3a04      	subs	r2, #4
   45bc4:	2a24      	cmp	r2, #36	; 0x24
   45bc6:	d81b      	bhi.n	45c00 <_calloc_r+0x54>
   45bc8:	2a13      	cmp	r2, #19
   45bca:	d912      	bls.n	45bf2 <_calloc_r+0x46>
   45bcc:	2300      	movs	r3, #0
   45bce:	2a1b      	cmp	r2, #27
   45bd0:	e9c0 3300 	strd	r3, r3, [r0]
   45bd4:	d919      	bls.n	45c0a <_calloc_r+0x5e>
   45bd6:	2a24      	cmp	r2, #36	; 0x24
   45bd8:	e9c0 3302 	strd	r3, r3, [r0, #8]
   45bdc:	d118      	bne.n	45c10 <_calloc_r+0x64>
   45bde:	6103      	str	r3, [r0, #16]
   45be0:	f100 0218 	add.w	r2, r0, #24
   45be4:	6143      	str	r3, [r0, #20]
   45be6:	2300      	movs	r3, #0
   45be8:	e9c2 3300 	strd	r3, r3, [r2]
   45bec:	6093      	str	r3, [r2, #8]
   45bee:	4620      	mov	r0, r4
   45bf0:	bd10      	pop	{r4, pc}
   45bf2:	4602      	mov	r2, r0
   45bf4:	2300      	movs	r3, #0
   45bf6:	4620      	mov	r0, r4
   45bf8:	e9c2 3300 	strd	r3, r3, [r2]
   45bfc:	6093      	str	r3, [r2, #8]
   45bfe:	bd10      	pop	{r4, pc}
   45c00:	2100      	movs	r1, #0
   45c02:	f7fa f8a3 	bl	3fd4c <memset>
   45c06:	4620      	mov	r0, r4
   45c08:	bd10      	pop	{r4, pc}
   45c0a:	f100 0208 	add.w	r2, r0, #8
   45c0e:	e7f1      	b.n	45bf4 <_calloc_r+0x48>
   45c10:	f100 0210 	add.w	r2, r0, #16
   45c14:	e7ee      	b.n	45bf4 <_calloc_r+0x48>
   45c16:	bf00      	nop

00045c18 <_fclose_r>:
   45c18:	b570      	push	{r4, r5, r6, lr}
   45c1a:	2900      	cmp	r1, #0
   45c1c:	d048      	beq.n	45cb0 <_fclose_r+0x98>
   45c1e:	4605      	mov	r5, r0
   45c20:	460c      	mov	r4, r1
   45c22:	b110      	cbz	r0, 45c2a <_fclose_r+0x12>
   45c24:	6b83      	ldr	r3, [r0, #56]	; 0x38
   45c26:	2b00      	cmp	r3, #0
   45c28:	d048      	beq.n	45cbc <_fclose_r+0xa4>
   45c2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   45c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   45c30:	07d0      	lsls	r0, r2, #31
   45c32:	d440      	bmi.n	45cb6 <_fclose_r+0x9e>
   45c34:	0599      	lsls	r1, r3, #22
   45c36:	d530      	bpl.n	45c9a <_fclose_r+0x82>
   45c38:	4621      	mov	r1, r4
   45c3a:	4628      	mov	r0, r5
   45c3c:	f7fd fd00 	bl	43640 <__sflush_r>
   45c40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   45c42:	4606      	mov	r6, r0
   45c44:	b133      	cbz	r3, 45c54 <_fclose_r+0x3c>
   45c46:	69e1      	ldr	r1, [r4, #28]
   45c48:	4628      	mov	r0, r5
   45c4a:	4798      	blx	r3
   45c4c:	2800      	cmp	r0, #0
   45c4e:	bfb8      	it	lt
   45c50:	f04f 36ff 	movlt.w	r6, #4294967295
   45c54:	89a3      	ldrh	r3, [r4, #12]
   45c56:	061a      	lsls	r2, r3, #24
   45c58:	d43c      	bmi.n	45cd4 <_fclose_r+0xbc>
   45c5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   45c5c:	b141      	cbz	r1, 45c70 <_fclose_r+0x58>
   45c5e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   45c62:	4299      	cmp	r1, r3
   45c64:	d002      	beq.n	45c6c <_fclose_r+0x54>
   45c66:	4628      	mov	r0, r5
   45c68:	f7fd fefe 	bl	43a68 <_free_r>
   45c6c:	2300      	movs	r3, #0
   45c6e:	6323      	str	r3, [r4, #48]	; 0x30
   45c70:	6c61      	ldr	r1, [r4, #68]	; 0x44
   45c72:	b121      	cbz	r1, 45c7e <_fclose_r+0x66>
   45c74:	4628      	mov	r0, r5
   45c76:	f7fd fef7 	bl	43a68 <_free_r>
   45c7a:	2300      	movs	r3, #0
   45c7c:	6463      	str	r3, [r4, #68]	; 0x44
   45c7e:	f7fd fe15 	bl	438ac <__sfp_lock_acquire>
   45c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
   45c84:	2200      	movs	r2, #0
   45c86:	07db      	lsls	r3, r3, #31
   45c88:	81a2      	strh	r2, [r4, #12]
   45c8a:	d51f      	bpl.n	45ccc <_fclose_r+0xb4>
   45c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   45c8e:	f7fe fd73 	bl	44778 <__retarget_lock_close_recursive>
   45c92:	f7fd fe11 	bl	438b8 <__sfp_lock_release>
   45c96:	4630      	mov	r0, r6
   45c98:	bd70      	pop	{r4, r5, r6, pc}
   45c9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   45c9c:	f7fe fd6e 	bl	4477c <__retarget_lock_acquire_recursive>
   45ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   45ca4:	2b00      	cmp	r3, #0
   45ca6:	d1c7      	bne.n	45c38 <_fclose_r+0x20>
   45ca8:	6e66      	ldr	r6, [r4, #100]	; 0x64
   45caa:	f016 0601 	ands.w	r6, r6, #1
   45cae:	d016      	beq.n	45cde <_fclose_r+0xc6>
   45cb0:	2600      	movs	r6, #0
   45cb2:	4630      	mov	r0, r6
   45cb4:	bd70      	pop	{r4, r5, r6, pc}
   45cb6:	2b00      	cmp	r3, #0
   45cb8:	d0fa      	beq.n	45cb0 <_fclose_r+0x98>
   45cba:	e7bd      	b.n	45c38 <_fclose_r+0x20>
   45cbc:	f7fd fdc6 	bl	4384c <__sinit>
   45cc0:	6e62      	ldr	r2, [r4, #100]	; 0x64
   45cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   45cc6:	07d0      	lsls	r0, r2, #31
   45cc8:	d4f5      	bmi.n	45cb6 <_fclose_r+0x9e>
   45cca:	e7b3      	b.n	45c34 <_fclose_r+0x1c>
   45ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   45cce:	f7fe fd57 	bl	44780 <__retarget_lock_release_recursive>
   45cd2:	e7db      	b.n	45c8c <_fclose_r+0x74>
   45cd4:	6921      	ldr	r1, [r4, #16]
   45cd6:	4628      	mov	r0, r5
   45cd8:	f7fd fec6 	bl	43a68 <_free_r>
   45cdc:	e7bd      	b.n	45c5a <_fclose_r+0x42>
   45cde:	6da0      	ldr	r0, [r4, #88]	; 0x58
   45ce0:	f7fe fd4e 	bl	44780 <__retarget_lock_release_recursive>
   45ce4:	4630      	mov	r0, r6
   45ce6:	bd70      	pop	{r4, r5, r6, pc}

00045ce8 <_fstat_r>:
   45ce8:	b570      	push	{r4, r5, r6, lr}
   45cea:	460d      	mov	r5, r1
   45cec:	2300      	movs	r3, #0
   45cee:	4c07      	ldr	r4, [pc, #28]	; (45d0c <_fstat_r+0x24>)
   45cf0:	4606      	mov	r6, r0
   45cf2:	4611      	mov	r1, r2
   45cf4:	4628      	mov	r0, r5
   45cf6:	6023      	str	r3, [r4, #0]
   45cf8:	f000 fedf 	bl	46aba <_fstat>
   45cfc:	1c43      	adds	r3, r0, #1
   45cfe:	d000      	beq.n	45d02 <_fstat_r+0x1a>
   45d00:	bd70      	pop	{r4, r5, r6, pc}
   45d02:	6823      	ldr	r3, [r4, #0]
   45d04:	2b00      	cmp	r3, #0
   45d06:	d0fb      	beq.n	45d00 <_fstat_r+0x18>
   45d08:	6033      	str	r3, [r6, #0]
   45d0a:	bd70      	pop	{r4, r5, r6, pc}
   45d0c:	2002c4ec 	.word	0x2002c4ec

00045d10 <_isatty_r>:
   45d10:	b538      	push	{r3, r4, r5, lr}
   45d12:	2300      	movs	r3, #0
   45d14:	4c06      	ldr	r4, [pc, #24]	; (45d30 <_isatty_r+0x20>)
   45d16:	4605      	mov	r5, r0
   45d18:	4608      	mov	r0, r1
   45d1a:	6023      	str	r3, [r4, #0]
   45d1c:	f000 fec7 	bl	46aae <_isatty>
   45d20:	1c43      	adds	r3, r0, #1
   45d22:	d000      	beq.n	45d26 <_isatty_r+0x16>
   45d24:	bd38      	pop	{r3, r4, r5, pc}
   45d26:	6823      	ldr	r3, [r4, #0]
   45d28:	2b00      	cmp	r3, #0
   45d2a:	d0fb      	beq.n	45d24 <_isatty_r+0x14>
   45d2c:	602b      	str	r3, [r5, #0]
   45d2e:	bd38      	pop	{r3, r4, r5, pc}
   45d30:	2002c4ec 	.word	0x2002c4ec

00045d34 <fabs>:
   45d34:	ec51 0b10 	vmov	r0, r1, d0
   45d38:	ee10 2a10 	vmov	r2, s0
   45d3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   45d40:	ec43 2b10 	vmov	d0, r2, r3
   45d44:	4770      	bx	lr
   45d46:	bf00      	nop

00045d48 <copysign>:
   45d48:	ee11 0a90 	vmov	r0, s3
   45d4c:	ec53 2b10 	vmov	r2, r3, d0
   45d50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   45d54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   45d58:	ea41 0300 	orr.w	r3, r1, r0
   45d5c:	ec43 2b10 	vmov	d0, r2, r3
   45d60:	4770      	bx	lr
   45d62:	bf00      	nop

00045d64 <cloud_connect>:
	if (backend == NULL
   45d64:	b120      	cbz	r0, 45d70 <cloud_connect+0xc>
	    || backend->api == NULL
   45d66:	6803      	ldr	r3, [r0, #0]
   45d68:	b113      	cbz	r3, 45d70 <cloud_connect+0xc>
	    || backend->api->connect == NULL) {
   45d6a:	689b      	ldr	r3, [r3, #8]
   45d6c:	b103      	cbz	r3, 45d70 <cloud_connect+0xc>
	return backend->api->connect(backend);
   45d6e:	4718      	bx	r3
}
   45d70:	f06f 0085 	mvn.w	r0, #133	; 0x85
   45d74:	4770      	bx	lr

00045d76 <cloud_send>:
	if (backend == NULL
   45d76:	b120      	cbz	r0, 45d82 <cloud_send+0xc>
	    || backend->api == NULL
   45d78:	6803      	ldr	r3, [r0, #0]
   45d7a:	b113      	cbz	r3, 45d82 <cloud_send+0xc>
	    || backend->api->send == NULL) {
   45d7c:	691b      	ldr	r3, [r3, #16]
   45d7e:	b103      	cbz	r3, 45d82 <cloud_send+0xc>
	return backend->api->send(backend, msg);
   45d80:	4718      	bx	r3
}
   45d82:	f06f 0085 	mvn.w	r0, #133	; 0x85
   45d86:	4770      	bx	lr

00045d88 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   45d88:	e8d0 0faf 	lda	r0, [r0]
}
   45d8c:	4770      	bx	lr

00045d8e <cloud_reboot_handler>:
	error_handler(ERROR_CLOUD, -ETIMEDOUT);
   45d8e:	f06f 0173 	mvn.w	r1, #115	; 0x73
   45d92:	2000      	movs	r0, #0
   45d94:	f7d9 bc46 	b.w	1f624 <error_handler>

00045d98 <cloud_error_handler>:
	error_handler(ERROR_CLOUD, err);
   45d98:	4601      	mov	r1, r0
   45d9a:	2000      	movs	r0, #0
   45d9c:	f7d9 bc42 	b.w	1f624 <error_handler>

00045da0 <cloud_cmd_handler>:
	if (cmd->recipient == CLOUD_RCPT_MODEM_INFO) {
   45da0:	7843      	ldrb	r3, [r0, #1]
   45da2:	2b03      	cmp	r3, #3
   45da4:	d105      	bne.n	45db2 <cloud_cmd_handler+0x12>
		if (cmd->type == CLOUD_CMD_READ) {
   45da6:	78c3      	ldrb	r3, [r0, #3]
   45da8:	2b04      	cmp	r3, #4
   45daa:	d118      	bne.n	45dde <cloud_cmd_handler+0x3e>
			device_status_send(NULL);
   45dac:	2000      	movs	r0, #0
   45dae:	f7d9 bcb1 	b.w	1f714 <device_status_send>
	} else if (cmd->recipient == CLOUD_RCPT_UI) {
   45db2:	2b02      	cmp	r3, #2
   45db4:	d113      	bne.n	45dde <cloud_cmd_handler+0x3e>
		if (cmd->type == CLOUD_CMD_LED_RED) {
   45db6:	78c3      	ldrb	r3, [r0, #3]
   45db8:	2b07      	cmp	r3, #7
   45dba:	d104      	bne.n	45dc6 <cloud_cmd_handler+0x26>
			ui_led_set_color(127, 0, 0);
   45dbc:	2200      	movs	r2, #0
   45dbe:	207f      	movs	r0, #127	; 0x7f
   45dc0:	4611      	mov	r1, r2
			ui_led_set_color(0, 0, 127);
   45dc2:	f000 b815 	b.w	45df0 <ui_led_set_color>
		} else if (cmd->type == CLOUD_CMD_LED_GREEN) {
   45dc6:	2b08      	cmp	r3, #8
   45dc8:	d103      	bne.n	45dd2 <cloud_cmd_handler+0x32>
			ui_led_set_color(0, 127, 0);
   45dca:	2200      	movs	r2, #0
   45dcc:	217f      	movs	r1, #127	; 0x7f
   45dce:	4610      	mov	r0, r2
   45dd0:	e7f7      	b.n	45dc2 <cloud_cmd_handler+0x22>
		} else if (cmd->type == CLOUD_CMD_LED_BLUE) {
   45dd2:	2b09      	cmp	r3, #9
   45dd4:	d103      	bne.n	45dde <cloud_cmd_handler+0x3e>
			ui_led_set_color(0, 0, 127);
   45dd6:	2100      	movs	r1, #0
   45dd8:	227f      	movs	r2, #127	; 0x7f
   45dda:	4608      	mov	r0, r1
   45ddc:	e7f1      	b.n	45dc2 <cloud_cmd_handler+0x22>
}
   45dde:	4770      	bx	lr

00045de0 <bsd_recoverable_error_handler>:
{
   45de0:	b508      	push	{r3, lr}
   45de2:	f7db fa91 	bl	21308 <z_impl_log_panic>
}
   45de6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_reboot(0);
   45dea:	2000      	movs	r0, #0
   45dec:	f7db bee0 	b.w	21bb0 <sys_reboot>

00045df0 <ui_led_set_color>:
}
   45df0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   45df4:	4770      	bx	lr

00045df6 <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   45df6:	b108      	cbz	r0, 45dfc <json_object_decode+0x6>
   45df8:	f001 be4c 	b.w	47a94 <cJSON_GetObjectItem>
}
   45dfc:	4770      	bx	lr

00045dfe <add_array_obj>:
{
   45dfe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   45e02:	4681      	mov	r9, r0
   45e04:	4688      	mov	r8, r1
   45e06:	4617      	mov	r7, r2
	if ((obj == NULL) || (item_name == NULL)) {
   45e08:	461e      	mov	r6, r3
   45e0a:	b32b      	cbz	r3, 45e58 <add_array_obj+0x5a>
	obj_to_add = cJSON_CreateArray();
   45e0c:	f7df f892 	bl	24f34 <cJSON_CreateArray>
	if (obj_to_add == NULL) {
   45e10:	4604      	mov	r4, r0
   45e12:	b1d0      	cbz	r0, 45e4a <add_array_obj+0x4c>
	for (u32_t cnt = 0; cnt < item_cnt; ++cnt) {
   45e14:	2500      	movs	r5, #0
   45e16:	4545      	cmp	r5, r8
   45e18:	d10d      	bne.n	45e36 <add_array_obj+0x38>
	if (cJSON_GetArraySize(obj_to_add) == 0) {
   45e1a:	4620      	mov	r0, r4
   45e1c:	f001 fe32 	bl	47a84 <cJSON_GetArraySize>
   45e20:	b908      	cbnz	r0, 45e26 <add_array_obj+0x28>
		obj_to_add->type = cJSON_NULL;
   45e22:	2304      	movs	r3, #4
   45e24:	60e3      	str	r3, [r4, #12]
	cJSON_AddItemToObject(obj, item_name, obj_to_add);
   45e26:	4630      	mov	r0, r6
   45e28:	4622      	mov	r2, r4
   45e2a:	4639      	mov	r1, r7
   45e2c:	f001 fe37 	bl	47a9e <cJSON_AddItemToObject>
	return 0;
   45e30:	2000      	movs	r0, #0
}
   45e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (items[cnt] != NULL) {
   45e36:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
   45e3a:	b158      	cbz	r0, 45e54 <add_array_obj+0x56>
			str = cJSON_CreateString(items[cnt]);
   45e3c:	f7df f862 	bl	24f04 <cJSON_CreateString>
			if (str == NULL) {
   45e40:	4601      	mov	r1, r0
				cJSON_Delete(obj_to_add);
   45e42:	4620      	mov	r0, r4
			if (str == NULL) {
   45e44:	b921      	cbnz	r1, 45e50 <add_array_obj+0x52>
				cJSON_Delete(obj_to_add);
   45e46:	f7de ffbb 	bl	24dc0 <cJSON_Delete>
		return -ENOMEM;
   45e4a:	f06f 000b 	mvn.w	r0, #11
   45e4e:	e7f0      	b.n	45e32 <add_array_obj+0x34>
			cJSON_AddItemToArray(obj_to_add, str);
   45e50:	f001 fe23 	bl	47a9a <cJSON_AddItemToArray>
	for (u32_t cnt = 0; cnt < item_cnt; ++cnt) {
   45e54:	3501      	adds	r5, #1
   45e56:	e7de      	b.n	45e16 <add_array_obj+0x18>
		return -EINVAL;
   45e58:	f06f 0015 	mvn.w	r0, #21
   45e5c:	e7e9      	b.n	45e32 <add_array_obj+0x34>

00045e5e <atomic_set>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   45e5e:	e8d0 3fef 	ldaex	r3, [r0]
   45e62:	e8c0 1fe2 	stlex	r2, r1, [r0]
   45e66:	2a00      	cmp	r2, #0
   45e68:	d1f9      	bne.n	45e5e <atomic_set>
}
   45e6a:	4618      	mov	r0, r3
   45e6c:	4770      	bx	lr

00045e6e <env_sensors_get_air_quality>:

int env_sensors_get_air_quality(env_sensor_data_t *sensor_data)
{
	return -1;
}
   45e6e:	f04f 30ff 	mov.w	r0, #4294967295
   45e72:	4770      	bx	lr

00045e74 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   45e74:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   45e78:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   45e7c:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   45e7e:	bf08      	it	eq
   45e80:	f06f 0015 	mvneq.w	r0, #21
   45e84:	4770      	bx	lr

00045e86 <get_bit_ptr>:
{
   45e86:	b570      	push	{r4, r5, r6, lr}
   45e88:	250c      	movs	r5, #12
   45e8a:	434d      	muls	r5, r1
   45e8c:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   45e8e:	f990 000b 	ldrsb.w	r0, [r0, #11]
   45e92:	1974      	adds	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   45e94:	4288      	cmp	r0, r1
   45e96:	bfa8      	it	ge
   45e98:	4621      	movge	r1, r4
	*word = &bitarray[bn / 32];
   45e9a:	f04f 0420 	mov.w	r4, #32
   45e9e:	fb92 f4f4 	sdiv	r4, r2, r4
		p->levels[level].bits : p->levels[level].bits_p;
   45ea2:	bfb8      	it	lt
   45ea4:	5971      	ldrlt	r1, [r6, r5]
}
   45ea6:	f002 001f 	and.w	r0, r2, #31
	*word = &bitarray[bn / 32];
   45eaa:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   45eae:	6019      	str	r1, [r3, #0]
}
   45eb0:	bd70      	pop	{r4, r5, r6, pc}

00045eb2 <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   45eb2:	f04f 0320 	mov.w	r3, #32
   45eb6:	f3ef 8011 	mrs	r0, BASEPRI
   45eba:	f383 8811 	msr	BASEPRI, r3
   45ebe:	f3bf 8f6f 	isb	sy
}
   45ec2:	4770      	bx	lr

00045ec4 <pool_irq_unlock.isra.4>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   45ec4:	07c3      	lsls	r3, r0, #31
   45ec6:	d503      	bpl.n	45ed0 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   45ec8:	f381 8811 	msr	BASEPRI, r1
   45ecc:	f3bf 8f6f 	isb	sy
}
   45ed0:	4770      	bx	lr

00045ed2 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   45ed2:	23ff      	movs	r3, #255	; 0xff
{
   45ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   45ed8:	6845      	ldr	r5, [r0, #4]
	for (i = 0; i < p->n_levels; i++) {
   45eda:	2200      	movs	r2, #0
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   45edc:	4629      	mov	r1, r5
		sys_dlist_init(&p->levels[i].free_list);
   45ede:	f04f 0a0c 	mov.w	sl, #12
			bits += (nblocks + 31)/32;
   45ee2:	f04f 0b20 	mov.w	fp, #32
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   45ee6:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   45ee8:	6804      	ldr	r4, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   45eea:	fb05 fc07 	mul.w	ip, r5, r7
	p->max_inline_level = -1;
   45eee:	72c3      	strb	r3, [r0, #11]
	for (i = 0; i < p->n_levels; i++) {
   45ef0:	7a83      	ldrb	r3, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   45ef2:	4464      	add	r4, ip
	for (i = 0; i < p->n_levels; i++) {
   45ef4:	9301      	str	r3, [sp, #4]
   45ef6:	9b01      	ldr	r3, [sp, #4]
   45ef8:	4293      	cmp	r3, r2
   45efa:	dc08      	bgt.n	45f0e <z_sys_mem_pool_base_init+0x3c>
   45efc:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   45efe:	4619      	mov	r1, r3
   45f00:	428f      	cmp	r7, r1
   45f02:	eb05 0c03 	add.w	ip, r5, r3
   45f06:	dc21      	bgt.n	45f4c <z_sys_mem_pool_base_init+0x7a>
}
   45f08:	b003      	add	sp, #12
   45f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   45f0e:	fbbc f3f1 	udiv	r3, ip, r1
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   45f12:	2b20      	cmp	r3, #32
			bits += (nblocks + 31)/32;
   45f14:	bf84      	itt	hi
   45f16:	331f      	addhi	r3, #31
   45f18:	fb93 f3fb 	sdivhi	r3, r3, fp
		sys_dlist_init(&p->levels[i].free_list);
   45f1c:	fb0a fe02 	mul.w	lr, sl, r2
   45f20:	f8d0 800c 	ldr.w	r8, [r0, #12]
		sz = WB_DN(sz / 4);
   45f24:	ea4f 0191 	mov.w	r1, r1, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
   45f28:	eb08 060e 	add.w	r6, r8, lr
   45f2c:	f106 0904 	add.w	r9, r6, #4
	list->tail = (sys_dnode_t *)list;
   45f30:	e9c6 9901 	strd	r9, r9, [r6, #4]
		sz = WB_DN(sz / 4);
   45f34:	f021 0103 	bic.w	r1, r1, #3
			p->max_inline_level = i;
   45f38:	bf94      	ite	ls
   45f3a:	72c2      	strbls	r2, [r0, #11]
			p->levels[i].bits_p = bits;
   45f3c:	f848 400e 	strhi.w	r4, [r8, lr]
	for (i = 0; i < p->n_levels; i++) {
   45f40:	f102 0201 	add.w	r2, r2, #1
			bits += (nblocks + 31)/32;
   45f44:	bf88      	it	hi
   45f46:	eb04 0483 	addhi.w	r4, r4, r3, lsl #2
   45f4a:	e7d4      	b.n	45ef6 <z_sys_mem_pool_base_init+0x24>
		sys_dlist_append(&p->levels[0].free_list, block);
   45f4c:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   45f4e:	6806      	ldr	r6, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   45f50:	f102 0e04 	add.w	lr, r2, #4
	return (u8_t *)p->buf + lsz * block;
   45f54:	18f4      	adds	r4, r6, r3
	node->next = list;
   45f56:	f846 e003 	str.w	lr, [r6, r3]
	node->prev = list->tail;
   45f5a:	6893      	ldr	r3, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   45f5c:	3101      	adds	r1, #1
   45f5e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   45f60:	6893      	ldr	r3, [r2, #8]
   45f62:	601c      	str	r4, [r3, #0]
	list->tail = node;
   45f64:	6094      	str	r4, [r2, #8]
   45f66:	4663      	mov	r3, ip
   45f68:	e7ca      	b.n	45f00 <z_sys_mem_pool_base_init+0x2e>

00045f6a <z_sys_mem_pool_block_alloc>:
{
   45f6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45f6e:	b089      	sub	sp, #36	; 0x24
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   45f70:	7a84      	ldrb	r4, [r0, #10]
{
   45f72:	af00      	add	r7, sp, #0
   45f74:	e9c7 3202 	strd	r3, r2, [r7, #8]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   45f78:	00a3      	lsls	r3, r4, #2
   45f7a:	330a      	adds	r3, #10
   45f7c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   45f80:	ebad 0d03 	sub.w	sp, sp, r3
   45f84:	46ea      	mov	sl, sp
	lsizes[0] = p->max_sz;
   45f86:	4653      	mov	r3, sl
   45f88:	6842      	ldr	r2, [r0, #4]
{
   45f8a:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   45f8c:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   45f90:	2200      	movs	r2, #0
   45f92:	4294      	cmp	r4, r2
   45f94:	f102 39ff 	add.w	r9, r2, #4294967295
   45f98:	dd09      	ble.n	45fae <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   45f9a:	b122      	cbz	r2, 45fa6 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   45f9c:	6818      	ldr	r0, [r3, #0]
   45f9e:	0880      	lsrs	r0, r0, #2
   45fa0:	f020 0003 	bic.w	r0, r0, #3
   45fa4:	6058      	str	r0, [r3, #4]
		if (lsizes[i] < size) {
   45fa6:	f853 0f04 	ldr.w	r0, [r3, #4]!
   45faa:	4288      	cmp	r0, r1
   45fac:	d208      	bcs.n	45fc0 <z_sys_mem_pool_block_alloc+0x56>
	if (alloc_l < 0) {
   45fae:	f1b9 3fff 	cmp.w	r9, #4294967295
   45fb2:	d107      	bne.n	45fc4 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   45fb4:	2300      	movs	r3, #0
   45fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
   45fb8:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   45fba:	f06f 000b 	mvn.w	r0, #11
   45fbe:	e047      	b.n	46050 <z_sys_mem_pool_block_alloc+0xe6>
	for (i = 0; i < p->n_levels; i++) {
   45fc0:	3201      	adds	r2, #1
   45fc2:	e7e6      	b.n	45f92 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   45fc4:	7c28      	ldrb	r0, [r5, #16]
   45fc6:	f010 0001 	ands.w	r0, r0, #1
   45fca:	d001      	beq.n	45fd0 <z_sys_mem_pool_block_alloc+0x66>
   45fcc:	f7ff ff71 	bl	45eb2 <pool_irq_lock.isra.2.part.3>
   45fd0:	230c      	movs	r3, #12
	block = sys_dlist_get(&p->levels[l].free_list);
   45fd2:	46c8      	mov	r8, r9
   45fd4:	fb03 f309 	mul.w	r3, r3, r9
   45fd8:	1d1a      	adds	r2, r3, #4
   45fda:	68eb      	ldr	r3, [r5, #12]
	key = pool_irq_lock(p);
   45fdc:	6178      	str	r0, [r7, #20]
   45fde:	4413      	add	r3, r2
	return list->head == list;
   45fe0:	681c      	ldr	r4, [r3, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   45fe2:	42a3      	cmp	r3, r4
   45fe4:	d070      	beq.n	460c8 <z_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
   45fe6:	e9d4 2300 	ldrd	r2, r3, [r4]
   45fea:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   45fec:	6822      	ldr	r2, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
   45fee:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
   45ff2:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   45ff4:	2300      	movs	r3, #0
	node->prev = NULL;
   45ff6:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   45ffa:	682b      	ldr	r3, [r5, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   45ffc:	f107 0b1c 	add.w	fp, r7, #28
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   46000:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   46002:	fb92 f2f1 	sdiv	r2, r2, r1
   46006:	465b      	mov	r3, fp
   46008:	4641      	mov	r1, r8
   4600a:	4628      	mov	r0, r5
   4600c:	f7ff ff3b 	bl	45e86 <get_bit_ptr>
	*word |= (1<<bit);
   46010:	2201      	movs	r2, #1
   46012:	69f9      	ldr	r1, [r7, #28]
   46014:	fa02 f000 	lsl.w	r0, r2, r0
   46018:	680b      	ldr	r3, [r1, #0]
   4601a:	eb0a 0688 	add.w	r6, sl, r8, lsl #2
   4601e:	4303      	orrs	r3, r0
   46020:	600b      	str	r3, [r1, #0]
   46022:	607a      	str	r2, [r7, #4]
			for (from_l = i; from_l < alloc_l; from_l++) {
   46024:	45c8      	cmp	r8, r9
   46026:	db17      	blt.n	46058 <z_sys_mem_pool_block_alloc+0xee>
	pool_irq_unlock(p, key);
   46028:	6979      	ldr	r1, [r7, #20]
   4602a:	7c28      	ldrb	r0, [r5, #16]
   4602c:	f7ff ff4a 	bl	45ec4 <pool_irq_unlock.isra.4>
	*data_p = data;
   46030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   46032:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   46034:	2c00      	cmp	r4, #0
   46036:	d0c0      	beq.n	45fba <z_sys_mem_pool_block_alloc+0x50>
	*level_p = alloc_l;
   46038:	68fb      	ldr	r3, [r7, #12]
	return 0;
   4603a:	2000      	movs	r0, #0
	*level_p = alloc_l;
   4603c:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   46040:	682b      	ldr	r3, [r5, #0]
   46042:	1ae4      	subs	r4, r4, r3
   46044:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   46048:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   4604c:	68bb      	ldr	r3, [r7, #8]
   4604e:	601c      	str	r4, [r3, #0]
}
   46050:	3724      	adds	r7, #36	; 0x24
   46052:	46bd      	mov	sp, r7
   46054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   46058:	682b      	ldr	r3, [r5, #0]
	bn = block_num(p, block, lsizes[l]);
   4605a:	6832      	ldr	r2, [r6, #0]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   4605c:	1ae3      	subs	r3, r4, r3
   4605e:	fb93 f2f2 	sdiv	r2, r3, r2
	set_alloc_bit(p, l + 1, 4*bn);
   46062:	f108 0801 	add.w	r8, r8, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   46066:	465b      	mov	r3, fp
   46068:	0092      	lsls	r2, r2, #2
   4606a:	4641      	mov	r1, r8
   4606c:	4628      	mov	r0, r5
   4606e:	f7ff ff0a 	bl	45e86 <get_bit_ptr>
	*word |= (1<<bit);
   46072:	69fa      	ldr	r2, [r7, #28]
   46074:	687b      	ldr	r3, [r7, #4]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   46076:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   46078:	fa03 f000 	lsl.w	r0, r3, r0
   4607c:	6813      	ldr	r3, [r2, #0]
   4607e:	4303      	orrs	r3, r0
   46080:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   46082:	230c      	movs	r3, #12
   46084:	2203      	movs	r2, #3
   46086:	fb03 1108 	mla	r1, r3, r8, r1
		int lsz = lsizes[l + 1];
   4608a:	f856 0f04 	ldr.w	r0, [r6, #4]!
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   4608e:	f101 0e04 	add.w	lr, r1, #4
   46092:	1823      	adds	r3, r4, r0
   46094:	613a      	str	r2, [r7, #16]
	node->prev = list->tail;
   46096:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   46098:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   4609c:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   4609e:	688a      	ldr	r2, [r1, #8]
   460a0:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   460a2:	693a      	ldr	r2, [r7, #16]
	list->tail = node;
   460a4:	608b      	str	r3, [r1, #8]
   460a6:	3a01      	subs	r2, #1
   460a8:	4403      	add	r3, r0
   460aa:	613a      	str	r2, [r7, #16]
   460ac:	d1f3      	bne.n	46096 <z_sys_mem_pool_block_alloc+0x12c>
				pool_irq_unlock(p, key);
   460ae:	6979      	ldr	r1, [r7, #20]
   460b0:	7c28      	ldrb	r0, [r5, #16]
   460b2:	f7ff ff07 	bl	45ec4 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   460b6:	7c2b      	ldrb	r3, [r5, #16]
   460b8:	07db      	lsls	r3, r3, #31
   460ba:	d503      	bpl.n	460c4 <z_sys_mem_pool_block_alloc+0x15a>
   460bc:	f7ff fef9 	bl	45eb2 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   460c0:	6178      	str	r0, [r7, #20]
   460c2:	e7af      	b.n	46024 <z_sys_mem_pool_block_alloc+0xba>
		return 0;
   460c4:	6938      	ldr	r0, [r7, #16]
   460c6:	e7fb      	b.n	460c0 <z_sys_mem_pool_block_alloc+0x156>
	for (i = alloc_l; i >= 0; i--) {
   460c8:	f108 38ff 	add.w	r8, r8, #4294967295
   460cc:	f1b8 3fff 	cmp.w	r8, #4294967295
   460d0:	f1a4 030c 	sub.w	r3, r4, #12
   460d4:	d184      	bne.n	45fe0 <z_sys_mem_pool_block_alloc+0x76>
   460d6:	2400      	movs	r4, #0
   460d8:	e7a6      	b.n	46028 <z_sys_mem_pool_block_alloc+0xbe>

000460da <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   460da:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   460dc:	f7f7 fd3e 	bl	3db5c <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   460e0:	2000      	movs	r0, #0
   460e2:	bd08      	pop	{r3, pc}

000460e4 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, s32_t timeout)
{
   460e4:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   460e6:	f7f7 fd81 	bl	3dbec <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   460ea:	f110 0f0b 	cmn.w	r0, #11
   460ee:	d005      	beq.n	460fc <sys_sem_take+0x18>
   460f0:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   460f4:	bf08      	it	eq
   460f6:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   460fa:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   460fc:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   46100:	e7fb      	b.n	460fa <sys_sem_take+0x16>

00046102 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   46102:	4604      	mov	r4, r0
   46104:	b508      	push	{r3, lr}
   46106:	4608      	mov	r0, r1
   46108:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   4610a:	461a      	mov	r2, r3
   4610c:	47a0      	blx	r4
	return z_impl_k_current_get();
   4610e:	f7f7 fce9 	bl	3dae4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   46112:	f7dc feb7 	bl	22e84 <z_impl_k_thread_abort>

00046116 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   46116:	b510      	push	{r4, lr}
   46118:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   4611a:	f04f 31ff 	mov.w	r1, #4294967295
   4611e:	4620      	mov	r0, r4
   46120:	f7f6 fbb2 	bl	3c888 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   46124:	4603      	mov	r3, r0
   46126:	2800      	cmp	r0, #0
   46128:	d0f7      	beq.n	4611a <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   4612a:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4612c:	3308      	adds	r3, #8
   4612e:	e8d3 1fef 	ldaex	r1, [r3]
   46132:	f021 0c01 	bic.w	ip, r1, #1
   46136:	e8c3 cfee 	stlex	lr, ip, [r3]
   4613a:	f1be 0f00 	cmp.w	lr, #0
   4613e:	d1f6      	bne.n	4612e <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   46140:	07cb      	lsls	r3, r1, #31
   46142:	d500      	bpl.n	46146 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   46144:	4790      	blx	r2
	z_impl_k_yield();
   46146:	f7f7 fb79 	bl	3d83c <z_impl_k_yield>
   4614a:	e7e6      	b.n	4611a <z_work_q_main+0x4>

0004614c <next>:
	if (lexer->pos >= lexer->end) {
   4614c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   46150:	429a      	cmp	r2, r3
	return *lexer->pos++;
   46152:	bf35      	itete	cc
   46154:	1c53      	addcc	r3, r2, #1
		lexer->pos = lexer->end + 1;
   46156:	3301      	addcs	r3, #1
	return *lexer->pos++;
   46158:	6083      	strcc	r3, [r0, #8]
		lexer->pos = lexer->end + 1;
   4615a:	6083      	strcs	r3, [r0, #8]
		return '\0';
   4615c:	bf2c      	ite	cs
   4615e:	2000      	movcs	r0, #0
	return *lexer->pos++;
   46160:	7810      	ldrbcc	r0, [r2, #0]
}
   46162:	4770      	bx	lr

00046164 <accept_run>:
{
   46164:	b510      	push	{r4, lr}
   46166:	4604      	mov	r4, r0
   46168:	3901      	subs	r1, #1
	for (; *run; run++) {
   4616a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   4616e:	b900      	cbnz	r0, 46172 <accept_run+0xe>
}
   46170:	bd10      	pop	{r4, pc}
		if (next(lexer) != *run) {
   46172:	4620      	mov	r0, r4
   46174:	f7ff ffea 	bl	4614c <next>
   46178:	780b      	ldrb	r3, [r1, #0]
   4617a:	4298      	cmp	r0, r3
   4617c:	d0f5      	beq.n	4616a <accept_run+0x6>
			return -EINVAL;
   4617e:	f06f 0015 	mvn.w	r0, #21
   46182:	e7f5      	b.n	46170 <accept_run+0xc>

00046184 <element_token>:
	switch (token) {
   46184:	285b      	cmp	r0, #91	; 0x5b
   46186:	d00d      	beq.n	461a4 <element_token+0x20>
   46188:	d806      	bhi.n	46198 <element_token+0x14>
   4618a:	2822      	cmp	r0, #34	; 0x22
   4618c:	d00a      	beq.n	461a4 <element_token+0x20>
   4618e:	2830      	cmp	r0, #48	; 0x30
   46190:	d008      	beq.n	461a4 <element_token+0x20>
		return -EINVAL;
   46192:	f06f 0015 	mvn.w	r0, #21
   46196:	4770      	bx	lr
	switch (token) {
   46198:	2874      	cmp	r0, #116	; 0x74
   4619a:	d003      	beq.n	461a4 <element_token+0x20>
   4619c:	287b      	cmp	r0, #123	; 0x7b
   4619e:	d001      	beq.n	461a4 <element_token+0x20>
   461a0:	2866      	cmp	r0, #102	; 0x66
   461a2:	e7f5      	b.n	46190 <element_token+0xc>
		return 0;
   461a4:	2000      	movs	r0, #0
}
   461a6:	4770      	bx	lr

000461a8 <get_elem_size>:
{
   461a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   461ac:	4604      	mov	r4, r0
   461ae:	2701      	movs	r7, #1
	switch (descr->type) {
   461b0:	7963      	ldrb	r3, [r4, #5]
   461b2:	085b      	lsrs	r3, r3, #1
   461b4:	2b5b      	cmp	r3, #91	; 0x5b
   461b6:	d02d      	beq.n	46214 <get_elem_size+0x6c>
   461b8:	d806      	bhi.n	461c8 <get_elem_size+0x20>
   461ba:	2b22      	cmp	r3, #34	; 0x22
   461bc:	d00c      	beq.n	461d8 <get_elem_size+0x30>
   461be:	2b30      	cmp	r3, #48	; 0x30
   461c0:	d00a      	beq.n	461d8 <get_elem_size+0x30>
		return -EINVAL;
   461c2:	f06f 0515 	mvn.w	r5, #21
   461c6:	e008      	b.n	461da <get_elem_size+0x32>
	switch (descr->type) {
   461c8:	2b74      	cmp	r3, #116	; 0x74
   461ca:	d003      	beq.n	461d4 <get_elem_size+0x2c>
   461cc:	2b7b      	cmp	r3, #123	; 0x7b
   461ce:	d008      	beq.n	461e2 <get_elem_size+0x3a>
   461d0:	2b66      	cmp	r3, #102	; 0x66
   461d2:	d1f6      	bne.n	461c2 <get_elem_size+0x1a>
		return sizeof(bool);
   461d4:	2501      	movs	r5, #1
   461d6:	e000      	b.n	461da <get_elem_size+0x32>
		return sizeof(s32_t);
   461d8:	2504      	movs	r5, #4
}
   461da:	fb07 f005 	mul.w	r0, r7, r5
   461de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   461e2:	2600      	movs	r6, #0
			total += ROUND_UP(s, 1 << descr->align_shift);
   461e4:	f04f 0901 	mov.w	r9, #1
		ptrdiff_t total = 0;
   461e8:	4635      	mov	r5, r6
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   461ea:	f8d4 800c 	ldr.w	r8, [r4, #12]
   461ee:	45b0      	cmp	r8, r6
   461f0:	d0f3      	beq.n	461da <get_elem_size+0x32>
			ptrdiff_t s = get_elem_size(&descr->object.sub_descr[i]);
   461f2:	68a0      	ldr	r0, [r4, #8]
   461f4:	eb00 1006 	add.w	r0, r0, r6, lsl #4
   461f8:	f7ff ffd6 	bl	461a8 <get_elem_size>
			total += ROUND_UP(s, 1 << descr->align_shift);
   461fc:	7923      	ldrb	r3, [r4, #4]
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   461fe:	3601      	adds	r6, #1
			total += ROUND_UP(s, 1 << descr->align_shift);
   46200:	f003 0303 	and.w	r3, r3, #3
   46204:	fa09 f303 	lsl.w	r3, r9, r3
   46208:	1e5a      	subs	r2, r3, #1
   4620a:	4410      	add	r0, r2
   4620c:	425b      	negs	r3, r3
   4620e:	4003      	ands	r3, r0
   46210:	441d      	add	r5, r3
   46212:	e7ec      	b.n	461ee <get_elem_size+0x46>
		return descr->array.n_elements * get_elem_size(descr->array.element_descr);
   46214:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
   46218:	435f      	muls	r7, r3
   4621a:	e7c9      	b.n	461b0 <get_elem_size+0x8>

0004621c <lexer_next>:
{
   4621c:	b538      	push	{r3, r4, r5, lr}
   4621e:	4604      	mov	r4, r0
   46220:	460d      	mov	r5, r1
	while (lexer->state) {
   46222:	6823      	ldr	r3, [r4, #0]
   46224:	7c20      	ldrb	r0, [r4, #16]
   46226:	b933      	cbnz	r3, 46236 <lexer_next+0x1a>
	if (lexer->token.type == empty_token) {
   46228:	b1a0      	cbz	r0, 46254 <lexer_next+0x38>
	*token = lexer->token;
   4622a:	f104 0210 	add.w	r2, r4, #16
   4622e:	ca07      	ldmia	r2, {r0, r1, r2}
   46230:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   46234:	e00c      	b.n	46250 <lexer_next+0x34>
	if (lexer->token.type == empty_token) {
   46236:	285f      	cmp	r0, #95	; 0x5f
   46238:	d103      	bne.n	46242 <lexer_next+0x26>
		lexer->state = lexer->state(lexer);
   4623a:	4620      	mov	r0, r4
   4623c:	4798      	blx	r3
   4623e:	6020      	str	r0, [r4, #0]
   46240:	e7ef      	b.n	46222 <lexer_next+0x6>
	*token = lexer->token;
   46242:	f104 0310 	add.w	r3, r4, #16
   46246:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
	lexer->token.type = empty_token;
   4624a:	235f      	movs	r3, #95	; 0x5f
	*token = lexer->token;
   4624c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	lexer->token.type = empty_token;
   46250:	2001      	movs	r0, #1
   46252:	7423      	strb	r3, [r4, #16]
}
   46254:	bd38      	pop	{r3, r4, r5, pc}

00046256 <obj_parse>:
{
   46256:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4625a:	4607      	mov	r7, r0
   4625c:	468a      	mov	sl, r1
   4625e:	469b      	mov	fp, r3
	s32_t decoded_fields = 0;
   46260:	2400      	movs	r4, #0
{
   46262:	b08d      	sub	sp, #52	; 0x34
   46264:	9202      	str	r2, [sp, #8]
	if (!lexer_next(&json->lexer, &token)) {
   46266:	ad04      	add	r5, sp, #16
	if (!lexer_next(&json->lexer, &kv->value)) {
   46268:	f10d 0824 	add.w	r8, sp, #36	; 0x24
	if (!lexer_next(&json->lexer, &token)) {
   4626c:	4629      	mov	r1, r5
   4626e:	4638      	mov	r0, r7
   46270:	f7ff ffd4 	bl	4621c <lexer_next>
   46274:	b938      	cbnz	r0, 46286 <obj_parse+0x30>
	return -EINVAL;
   46276:	f06f 0415 	mvn.w	r4, #21
}
   4627a:	4620      	mov	r0, r4
   4627c:	b00d      	add	sp, #52	; 0x34
   4627e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < descr_len; i++) {
   46282:	3601      	adds	r6, #1
   46284:	e02e      	b.n	462e4 <obj_parse+0x8e>
	switch (token.type) {
   46286:	f89d 3010 	ldrb.w	r3, [sp, #16]
   4628a:	2b2c      	cmp	r3, #44	; 0x2c
   4628c:	d055      	beq.n	4633a <obj_parse+0xe4>
   4628e:	2b7d      	cmp	r3, #125	; 0x7d
   46290:	d01c      	beq.n	462cc <obj_parse+0x76>
		if (token.type != JSON_TOK_STRING) {
   46292:	2b22      	cmp	r3, #34	; 0x22
   46294:	d1ef      	bne.n	46276 <obj_parse+0x20>
		kv->key = token.start;
   46296:	9a05      	ldr	r2, [sp, #20]
		kv->key_len = (size_t)(token.end - token.start);
   46298:	9b06      	ldr	r3, [sp, #24]
	if (!lexer_next(&json->lexer, &token)) {
   4629a:	4629      	mov	r1, r5
		kv->key_len = (size_t)(token.end - token.start);
   4629c:	1a9b      	subs	r3, r3, r2
	if (!lexer_next(&json->lexer, &token)) {
   4629e:	4638      	mov	r0, r7
		kv->key = token.start;
   462a0:	9207      	str	r2, [sp, #28]
		kv->key_len = (size_t)(token.end - token.start);
   462a2:	9308      	str	r3, [sp, #32]
	if (!lexer_next(&json->lexer, &token)) {
   462a4:	f7ff ffba 	bl	4621c <lexer_next>
   462a8:	2800      	cmp	r0, #0
   462aa:	d0e4      	beq.n	46276 <obj_parse+0x20>
	if (token.type != JSON_TOK_COLON) {
   462ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
   462b0:	2b3a      	cmp	r3, #58	; 0x3a
   462b2:	d1e0      	bne.n	46276 <obj_parse+0x20>
	if (!lexer_next(&json->lexer, &kv->value)) {
   462b4:	4641      	mov	r1, r8
   462b6:	4638      	mov	r0, r7
   462b8:	f7ff ffb0 	bl	4621c <lexer_next>
   462bc:	2800      	cmp	r0, #0
   462be:	d0da      	beq.n	46276 <obj_parse+0x20>
	return element_token(kv->value.type);
   462c0:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   462c4:	f7ff ff5e 	bl	46184 <element_token>
	while (!obj_next(obj, &kv)) {
   462c8:	b138      	cbz	r0, 462da <obj_parse+0x84>
   462ca:	e7d4      	b.n	46276 <obj_parse+0x20>
		kv->key = NULL;
   462cc:	2300      	movs	r3, #0
		kv->value = token;
   462ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   462d2:	e888 0007 	stmia.w	r8, {r0, r1, r2}
		kv->key_len = 0;
   462d6:	e9cd 3307 	strd	r3, r3, [sp, #28]
		if (kv.value.type == JSON_TOK_OBJECT_END) {
   462da:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   462de:	2b7d      	cmp	r3, #125	; 0x7d
   462e0:	d0cb      	beq.n	4627a <obj_parse+0x24>
		for (i = 0; i < descr_len; i++) {
   462e2:	2600      	movs	r6, #0
   462e4:	9b02      	ldr	r3, [sp, #8]
   462e6:	429e      	cmp	r6, r3
   462e8:	d0c0      	beq.n	4626c <obj_parse+0x16>
			if (decoded_fields & (1 << i)) {
   462ea:	fa44 f306 	asr.w	r3, r4, r6
   462ee:	07db      	lsls	r3, r3, #31
   462f0:	d4c7      	bmi.n	46282 <obj_parse+0x2c>
   462f2:	0131      	lsls	r1, r6, #4
   462f4:	eb0a 0901 	add.w	r9, sl, r1
			if (kv.key_len != descr[i].field_name_len) {
   462f8:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   462fc:	9a08      	ldr	r2, [sp, #32]
   462fe:	f3c3 0386 	ubfx	r3, r3, #2, #7
   46302:	429a      	cmp	r2, r3
   46304:	d1bd      	bne.n	46282 <obj_parse+0x2c>
			void *decode_field = (char *)val + descr[i].offset;
   46306:	f8b9 3006 	ldrh.w	r3, [r9, #6]
			if (memcmp(kv.key, descr[i].field_name,
   4630a:	f85a 1001 	ldr.w	r1, [sl, r1]
   4630e:	9807      	ldr	r0, [sp, #28]
			void *decode_field = (char *)val + descr[i].offset;
   46310:	9303      	str	r3, [sp, #12]
			if (memcmp(kv.key, descr[i].field_name,
   46312:	f7f9 fcd9 	bl	3fcc8 <memcmp>
   46316:	2800      	cmp	r0, #0
   46318:	d1b3      	bne.n	46282 <obj_parse+0x2c>
			ret = decode_value(obj, &descr[i], &kv.value,
   4631a:	9b03      	ldr	r3, [sp, #12]
   4631c:	f8cd b000 	str.w	fp, [sp]
   46320:	445b      	add	r3, fp
   46322:	4642      	mov	r2, r8
   46324:	4649      	mov	r1, r9
   46326:	4638      	mov	r0, r7
   46328:	f7da fdf2 	bl	20f10 <decode_value>
			if (ret < 0) {
   4632c:	2800      	cmp	r0, #0
   4632e:	db0d      	blt.n	4634c <obj_parse+0xf6>
			decoded_fields |= 1<<i;
   46330:	2301      	movs	r3, #1
   46332:	fa03 f606 	lsl.w	r6, r3, r6
   46336:	4334      	orrs	r4, r6
			break;
   46338:	e798      	b.n	4626c <obj_parse+0x16>
		if (!lexer_next(&json->lexer, &token)) {
   4633a:	4629      	mov	r1, r5
   4633c:	4638      	mov	r0, r7
   4633e:	f7ff ff6d 	bl	4621c <lexer_next>
   46342:	2800      	cmp	r0, #0
   46344:	d097      	beq.n	46276 <obj_parse+0x20>
		if (token.type != JSON_TOK_STRING) {
   46346:	f89d 3010 	ldrb.w	r3, [sp, #16]
   4634a:	e7a2      	b.n	46292 <obj_parse+0x3c>
   4634c:	4604      	mov	r4, r0
   4634e:	e794      	b.n	4627a <obj_parse+0x24>

00046350 <z_arch_printk_char_out>:
}
   46350:	2000      	movs	r0, #0
   46352:	4770      	bx	lr

00046354 <print_err>:
{
   46354:	b570      	push	{r4, r5, r6, lr}
   46356:	460d      	mov	r5, r1
   46358:	4604      	mov	r4, r0
	out('E', ctx);
   4635a:	2045      	movs	r0, #69	; 0x45
   4635c:	47a0      	blx	r4
	out('R', ctx);
   4635e:	4629      	mov	r1, r5
   46360:	2052      	movs	r0, #82	; 0x52
   46362:	47a0      	blx	r4
	out('R', ctx);
   46364:	4629      	mov	r1, r5
   46366:	4623      	mov	r3, r4
}
   46368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   4636c:	2052      	movs	r0, #82	; 0x52
   4636e:	4718      	bx	r3

00046370 <z_vprintk>:
{
   46370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   46374:	2700      	movs	r7, #0
{
   46376:	4605      	mov	r5, r0
   46378:	460e      	mov	r6, r1
   4637a:	4692      	mov	sl, r2
   4637c:	461c      	mov	r4, r3
	int min_width = -1;
   4637e:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
   46382:	46b8      	mov	r8, r7
	int might_format = 0; /* 1 if encountered a '%' */
   46384:	46bb      	mov	fp, r7
{
   46386:	b089      	sub	sp, #36	; 0x24
	while (*fmt) {
   46388:	f89a 0000 	ldrb.w	r0, [sl]
   4638c:	b910      	cbnz	r0, 46394 <z_vprintk+0x24>
}
   4638e:	b009      	add	sp, #36	; 0x24
   46390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   46394:	f1bb 0f00 	cmp.w	fp, #0
   46398:	d107      	bne.n	463aa <z_vprintk+0x3a>
			if (*fmt != '%') {
   4639a:	2825      	cmp	r0, #37	; 0x25
   4639c:	f000 814e 	beq.w	4663c <z_vprintk+0x2cc>
				out((int)*fmt, ctx);
   463a0:	4631      	mov	r1, r6
   463a2:	47a8      	blx	r5
		++fmt;
   463a4:	f10a 0a01 	add.w	sl, sl, #1
   463a8:	e7ee      	b.n	46388 <z_vprintk+0x18>
			switch (*fmt) {
   463aa:	2864      	cmp	r0, #100	; 0x64
   463ac:	d068      	beq.n	46480 <z_vprintk+0x110>
   463ae:	d81a      	bhi.n	463e6 <z_vprintk+0x76>
   463b0:	2839      	cmp	r0, #57	; 0x39
   463b2:	d80b      	bhi.n	463cc <z_vprintk+0x5c>
   463b4:	2831      	cmp	r0, #49	; 0x31
   463b6:	d25a      	bcs.n	4646e <z_vprintk+0xfe>
   463b8:	282d      	cmp	r0, #45	; 0x2d
   463ba:	f000 8146 	beq.w	4664a <z_vprintk+0x2da>
   463be:	2830      	cmp	r0, #48	; 0x30
   463c0:	d046      	beq.n	46450 <z_vprintk+0xe0>
   463c2:	2825      	cmp	r0, #37	; 0x25
   463c4:	d108      	bne.n	463d8 <z_vprintk+0x68>
				out((int)'%', ctx);
   463c6:	4631      	mov	r1, r6
				out((int)*fmt, ctx);
   463c8:	47a8      	blx	r5
   463ca:	e07a      	b.n	464c2 <z_vprintk+0x152>
			switch (*fmt) {
   463cc:	2858      	cmp	r0, #88	; 0x58
   463ce:	f000 80b4 	beq.w	4653a <z_vprintk+0x1ca>
   463d2:	2863      	cmp	r0, #99	; 0x63
   463d4:	f000 812c 	beq.w	46630 <z_vprintk+0x2c0>
				out((int)'%', ctx);
   463d8:	4631      	mov	r1, r6
   463da:	2025      	movs	r0, #37	; 0x25
   463dc:	47a8      	blx	r5
				out((int)*fmt, ctx);
   463de:	4631      	mov	r1, r6
   463e0:	f89a 0000 	ldrb.w	r0, [sl]
   463e4:	e7f0      	b.n	463c8 <z_vprintk+0x58>
			switch (*fmt) {
   463e6:	2870      	cmp	r0, #112	; 0x70
   463e8:	f000 809d 	beq.w	46526 <z_vprintk+0x1b6>
   463ec:	d80d      	bhi.n	4640a <z_vprintk+0x9a>
   463ee:	2869      	cmp	r0, #105	; 0x69
   463f0:	d046      	beq.n	46480 <z_vprintk+0x110>
   463f2:	286c      	cmp	r0, #108	; 0x6c
   463f4:	d103      	bne.n	463fe <z_vprintk+0x8e>
				} else if (*fmt == 'l' && length_mod == 'l') {
   463f6:	2f6c      	cmp	r7, #108	; 0x6c
   463f8:	d126      	bne.n	46448 <z_vprintk+0xd8>
					length_mod = 'L';
   463fa:	274c      	movs	r7, #76	; 0x4c
   463fc:	e7d2      	b.n	463a4 <z_vprintk+0x34>
			switch (*fmt) {
   463fe:	2868      	cmp	r0, #104	; 0x68
   46400:	d1ea      	bne.n	463d8 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   46402:	2f68      	cmp	r7, #104	; 0x68
   46404:	d120      	bne.n	46448 <z_vprintk+0xd8>
					length_mod = 'H';
   46406:	2748      	movs	r7, #72	; 0x48
   46408:	e7cc      	b.n	463a4 <z_vprintk+0x34>
			switch (*fmt) {
   4640a:	2875      	cmp	r0, #117	; 0x75
   4640c:	d070      	beq.n	464f0 <z_vprintk+0x180>
   4640e:	d817      	bhi.n	46440 <z_vprintk+0xd0>
   46410:	2873      	cmp	r0, #115	; 0x73
   46412:	d1e1      	bne.n	463d8 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   46414:	6822      	ldr	r2, [r4, #0]
   46416:	f104 0b04 	add.w	fp, r4, #4
   4641a:	4611      	mov	r1, r2
				while (*s) {
   4641c:	460c      	mov	r4, r1
   4641e:	f814 0b01 	ldrb.w	r0, [r4], #1
   46422:	2800      	cmp	r0, #0
   46424:	f040 80f9 	bne.w	4661a <z_vprintk+0x2aa>
				if (padding == PAD_SPACE_AFTER) {
   46428:	f1b8 0f03 	cmp.w	r8, #3
   4642c:	f040 8113 	bne.w	46656 <z_vprintk+0x2e6>
					int remaining = min_width - (s - start);
   46430:	1a8c      	subs	r4, r1, r2
   46432:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
   46436:	2c00      	cmp	r4, #0
   46438:	f300 80f5 	bgt.w	46626 <z_vprintk+0x2b6>
				int c = va_arg(ap, int);
   4643c:	465c      	mov	r4, fp
   4643e:	e040      	b.n	464c2 <z_vprintk+0x152>
			switch (*fmt) {
   46440:	2878      	cmp	r0, #120	; 0x78
   46442:	d07a      	beq.n	4653a <z_vprintk+0x1ca>
   46444:	287a      	cmp	r0, #122	; 0x7a
   46446:	d1c7      	bne.n	463d8 <z_vprintk+0x68>
				} else if (length_mod == 0) {
   46448:	2f00      	cmp	r7, #0
   4644a:	d1c5      	bne.n	463d8 <z_vprintk+0x68>
   4644c:	4607      	mov	r7, r0
   4644e:	e7a9      	b.n	463a4 <z_vprintk+0x34>
				if (min_width < 0 && padding == PAD_NONE) {
   46450:	f1b9 0f00 	cmp.w	r9, #0
   46454:	da0e      	bge.n	46474 <z_vprintk+0x104>
   46456:	f1b8 0f00 	cmp.w	r8, #0
   4645a:	f000 80f9 	beq.w	46650 <z_vprintk+0x2e0>
					min_width = *fmt - '0';
   4645e:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   46462:	f1b8 0f00 	cmp.w	r8, #0
   46466:	bf08      	it	eq
   46468:	f04f 0802 	moveq.w	r8, #2
   4646c:	e79a      	b.n	463a4 <z_vprintk+0x34>
				if (min_width < 0) {
   4646e:	f1b9 0f00 	cmp.w	r9, #0
   46472:	dbf4      	blt.n	4645e <z_vprintk+0xee>
					min_width = 10 * min_width + *fmt - '0';
   46474:	220a      	movs	r2, #10
   46476:	fb02 0909 	mla	r9, r2, r9, r0
   4647a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   4647e:	e7f0      	b.n	46462 <z_vprintk+0xf2>
				if (length_mod == 'z') {
   46480:	2f7a      	cmp	r7, #122	; 0x7a
   46482:	d103      	bne.n	4648c <z_vprintk+0x11c>
					d = va_arg(ap, int);
   46484:	f8d4 b000 	ldr.w	fp, [r4]
   46488:	3404      	adds	r4, #4
   4648a:	e01e      	b.n	464ca <z_vprintk+0x15a>
				} else if (length_mod == 'l') {
   4648c:	2f6c      	cmp	r7, #108	; 0x6c
   4648e:	d0f9      	beq.n	46484 <z_vprintk+0x114>
				} else if (length_mod == 'L') {
   46490:	2f4c      	cmp	r7, #76	; 0x4c
   46492:	d1f7      	bne.n	46484 <z_vprintk+0x114>
					if (lld > __LONG_MAX__ ||
   46494:	f04f 0c00 	mov.w	ip, #0
   46498:	f04f 3bff 	mov.w	fp, #4294967295
					long long lld = va_arg(ap, long long);
   4649c:	3407      	adds	r4, #7
   4649e:	f024 0307 	bic.w	r3, r4, #7
   464a2:	f103 0408 	add.w	r4, r3, #8
   464a6:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > __LONG_MAX__ ||
   464aa:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
   464ae:	f143 0100 	adc.w	r1, r3, #0
   464b2:	458c      	cmp	ip, r1
   464b4:	bf08      	it	eq
   464b6:	4583      	cmpeq	fp, r0
   464b8:	d206      	bcs.n	464c8 <z_vprintk+0x158>
						print_err(out, ctx);
   464ba:	4631      	mov	r1, r6
   464bc:	4628      	mov	r0, r5
   464be:	f7ff ff49 	bl	46354 <print_err>
			might_format = 0;
   464c2:	f04f 0b00 	mov.w	fp, #0
				break;
   464c6:	e76d      	b.n	463a4 <z_vprintk+0x34>
					d = lld;
   464c8:	4693      	mov	fp, r2
				if (d < 0) {
   464ca:	f1bb 0f00 	cmp.w	fp, #0
   464ce:	da06      	bge.n	464de <z_vprintk+0x16e>
					out((int)'-', ctx);
   464d0:	4631      	mov	r1, r6
   464d2:	202d      	movs	r0, #45	; 0x2d
   464d4:	47a8      	blx	r5
					d = -d;
   464d6:	f1cb 0b00 	rsb	fp, fp, #0
					min_width--;
   464da:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   464de:	4643      	mov	r3, r8
   464e0:	465a      	mov	r2, fp
   464e2:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   464e6:	4631      	mov	r1, r6
   464e8:	4628      	mov	r0, r5
   464ea:	f7da fdf1 	bl	210d0 <_printk_dec_ulong>
   464ee:	e7e8      	b.n	464c2 <z_vprintk+0x152>
				if (length_mod == 'z') {
   464f0:	2f7a      	cmp	r7, #122	; 0x7a
   464f2:	d102      	bne.n	464fa <z_vprintk+0x18a>
					u = va_arg(ap, unsigned int);
   464f4:	6822      	ldr	r2, [r4, #0]
   464f6:	3404      	adds	r4, #4
   464f8:	e011      	b.n	4651e <z_vprintk+0x1ae>
				} else if (length_mod == 'l') {
   464fa:	2f6c      	cmp	r7, #108	; 0x6c
   464fc:	d0fa      	beq.n	464f4 <z_vprintk+0x184>
				} else if (length_mod == 'L') {
   464fe:	2f4c      	cmp	r7, #76	; 0x4c
   46500:	d1f8      	bne.n	464f4 <z_vprintk+0x184>
					if (llu > ~0UL) {
   46502:	2100      	movs	r1, #0
   46504:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   46508:	3407      	adds	r4, #7
   4650a:	f024 0307 	bic.w	r3, r4, #7
   4650e:	f103 0408 	add.w	r4, r3, #8
   46512:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > ~0UL) {
   46516:	4299      	cmp	r1, r3
   46518:	bf08      	it	eq
   4651a:	4290      	cmpeq	r0, r2
   4651c:	d3cd      	bcc.n	464ba <z_vprintk+0x14a>
				_printk_dec_ulong(out, ctx, u, padding,
   4651e:	f8cd 9000 	str.w	r9, [sp]
   46522:	4643      	mov	r3, r8
   46524:	e7df      	b.n	464e6 <z_vprintk+0x176>
				  out('0', ctx);
   46526:	4631      	mov	r1, r6
   46528:	2030      	movs	r0, #48	; 0x30
   4652a:	47a8      	blx	r5
				  out('x', ctx);
   4652c:	4631      	mov	r1, r6
   4652e:	2078      	movs	r0, #120	; 0x78
   46530:	47a8      	blx	r5
				  min_width = 8;
   46532:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
   46536:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
   4653a:	f89a 2000 	ldrb.w	r2, [sl]
   4653e:	2a70      	cmp	r2, #112	; 0x70
   46540:	d105      	bne.n	4654e <z_vprintk+0x1de>
					x = va_arg(ap, unsigned int);
   46542:	6823      	ldr	r3, [r4, #0]
   46544:	3404      	adds	r4, #4
   46546:	9304      	str	r3, [sp, #16]
   46548:	2300      	movs	r3, #0
   4654a:	9302      	str	r3, [sp, #8]
   4654c:	e00c      	b.n	46568 <z_vprintk+0x1f8>
				} else if (length_mod == 'l') {
   4654e:	2f6c      	cmp	r7, #108	; 0x6c
   46550:	d0f7      	beq.n	46542 <z_vprintk+0x1d2>
				} else if (length_mod == 'L') {
   46552:	2f4c      	cmp	r7, #76	; 0x4c
   46554:	d1f5      	bne.n	46542 <z_vprintk+0x1d2>
					x = va_arg(ap, unsigned long long);
   46556:	3407      	adds	r4, #7
   46558:	f024 0207 	bic.w	r2, r4, #7
   4655c:	6813      	ldr	r3, [r2, #0]
   4655e:	f102 0408 	add.w	r4, r2, #8
   46562:	9304      	str	r3, [sp, #16]
   46564:	6853      	ldr	r3, [r2, #4]
   46566:	9302      	str	r3, [sp, #8]
	int digits = 0;
   46568:	2200      	movs	r2, #0
	int remaining = 16; /* 16 digits max */
   4656a:	2310      	movs	r3, #16
	int digits = 0;
   4656c:	9203      	str	r2, [sp, #12]
	int found_largest_digit = 0;
   4656e:	9205      	str	r2, [sp, #20]
	int shift = sizeof(num) * 8;
   46570:	2240      	movs	r2, #64	; 0x40
		shift -= 4;
   46572:	3a04      	subs	r2, #4
		nibble = (num >> shift) & 0xf;
   46574:	9902      	ldr	r1, [sp, #8]
   46576:	9804      	ldr	r0, [sp, #16]
   46578:	f1c2 0c20 	rsb	ip, r2, #32
   4657c:	f1a2 0e20 	sub.w	lr, r2, #32
   46580:	40d0      	lsrs	r0, r2
   46582:	fa01 fc0c 	lsl.w	ip, r1, ip
   46586:	ea40 000c 	orr.w	r0, r0, ip
   4658a:	fa21 fe0e 	lsr.w	lr, r1, lr
   4658e:	ea40 000e 	orr.w	r0, r0, lr
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   46592:	f010 000f 	ands.w	r0, r0, #15
   46596:	d108      	bne.n	465aa <z_vprintk+0x23a>
   46598:	9905      	ldr	r1, [sp, #20]
   4659a:	b901      	cbnz	r1, 4659e <z_vprintk+0x22e>
   4659c:	bb42      	cbnz	r2, 465f0 <z_vprintk+0x280>
			nibble += nibble > 9 ? 87 : 48;
   4659e:	f04f 0c30 	mov.w	ip, #48	; 0x30
   465a2:	e008      	b.n	465b6 <z_vprintk+0x246>
			found_largest_digit = 1;
   465a4:	f8cd b014 	str.w	fp, [sp, #20]
   465a8:	e7e3      	b.n	46572 <z_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
   465aa:	2809      	cmp	r0, #9
   465ac:	bf8c      	ite	hi
   465ae:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   465b2:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
   465b6:	4631      	mov	r1, r6
   465b8:	4460      	add	r0, ip
   465ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
   465be:	47a8      	blx	r5
			digits++;
   465c0:	9b03      	ldr	r3, [sp, #12]
   465c2:	3301      	adds	r3, #1
   465c4:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   465c6:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   465ca:	2a00      	cmp	r2, #0
   465cc:	d1ea      	bne.n	465a4 <z_vprintk+0x234>
	if (padding == PAD_SPACE_AFTER) {
   465ce:	f1b8 0f03 	cmp.w	r8, #3
   465d2:	f47f af76 	bne.w	464c2 <z_vprintk+0x152>
		remaining = min_width * 2 - digits;
   465d6:	9b03      	ldr	r3, [sp, #12]
   465d8:	ebc3 0b49 	rsb	fp, r3, r9, lsl #1
		while (remaining-- > 0) {
   465dc:	f1bb 0f00 	cmp.w	fp, #0
   465e0:	f77f af6f 	ble.w	464c2 <z_vprintk+0x152>
			out(' ', ctx);
   465e4:	4631      	mov	r1, r6
   465e6:	2020      	movs	r0, #32
   465e8:	47a8      	blx	r5
   465ea:	f10b 3bff 	add.w	fp, fp, #4294967295
   465ee:	e7f5      	b.n	465dc <z_vprintk+0x26c>
		if (remaining-- <= min_width) {
   465f0:	1e59      	subs	r1, r3, #1
   465f2:	4599      	cmp	r9, r3
   465f4:	9106      	str	r1, [sp, #24]
   465f6:	db07      	blt.n	46608 <z_vprintk+0x298>
			if (padding == PAD_ZERO_BEFORE) {
   465f8:	f1b8 0f01 	cmp.w	r8, #1
   465fc:	d106      	bne.n	4660c <z_vprintk+0x29c>
				out('0', ctx);
   465fe:	4631      	mov	r1, r6
   46600:	2030      	movs	r0, #48	; 0x30
   46602:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
   46604:	47a8      	blx	r5
   46606:	9a07      	ldr	r2, [sp, #28]
					x = va_arg(ap, unsigned int);
   46608:	9b06      	ldr	r3, [sp, #24]
   4660a:	e7b2      	b.n	46572 <z_vprintk+0x202>
			} else if (padding == PAD_SPACE_BEFORE) {
   4660c:	f1b8 0f02 	cmp.w	r8, #2
   46610:	d1fa      	bne.n	46608 <z_vprintk+0x298>
   46612:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
   46614:	4631      	mov	r1, r6
   46616:	2020      	movs	r0, #32
   46618:	e7f4      	b.n	46604 <z_vprintk+0x294>
					out((int)(*s++), ctx);
   4661a:	4631      	mov	r1, r6
   4661c:	9202      	str	r2, [sp, #8]
   4661e:	47a8      	blx	r5
   46620:	4621      	mov	r1, r4
   46622:	9a02      	ldr	r2, [sp, #8]
   46624:	e6fa      	b.n	4641c <z_vprintk+0xac>
						out(' ', ctx);
   46626:	4631      	mov	r1, r6
   46628:	2020      	movs	r0, #32
   4662a:	47a8      	blx	r5
   4662c:	3c01      	subs	r4, #1
   4662e:	e702      	b.n	46436 <z_vprintk+0xc6>
				out(c, ctx);
   46630:	4631      	mov	r1, r6
   46632:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
   46634:	f104 0b04 	add.w	fp, r4, #4
				out(c, ctx);
   46638:	47a8      	blx	r5
   4663a:	e6ff      	b.n	4643c <z_vprintk+0xcc>
				length_mod = 0;
   4663c:	465f      	mov	r7, fp
				padding = PAD_NONE;
   4663e:	46d8      	mov	r8, fp
				min_width = -1;
   46640:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
   46644:	f04f 0b01 	mov.w	fp, #1
   46648:	e6ac      	b.n	463a4 <z_vprintk+0x34>
				padding = PAD_SPACE_AFTER;
   4664a:	f04f 0803 	mov.w	r8, #3
   4664e:	e6a9      	b.n	463a4 <z_vprintk+0x34>
					padding = PAD_ZERO_BEFORE;
   46650:	f04f 0801 	mov.w	r8, #1
   46654:	e6a6      	b.n	463a4 <z_vprintk+0x34>
				char *s = va_arg(ap, char *);
   46656:	465c      	mov	r4, fp
			might_format = 0;
   46658:	4683      	mov	fp, r0
   4665a:	e6a3      	b.n	463a4 <z_vprintk+0x34>

0004665c <printk>:
{
   4665c:	b40f      	push	{r0, r1, r2, r3}
   4665e:	b507      	push	{r0, r1, r2, lr}
   46660:	a904      	add	r1, sp, #16
   46662:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   46666:	9101      	str	r1, [sp, #4]
		log_printk(fmt, ap);
   46668:	f000 f815 	bl	46696 <log_printk>
}
   4666c:	b003      	add	sp, #12
   4666e:	f85d eb04 	ldr.w	lr, [sp], #4
   46672:	b004      	add	sp, #16
   46674:	4770      	bx	lr

00046676 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   46676:	4040      	eors	r0, r0
   46678:	f380 8811 	msr	BASEPRI, r0
   4667c:	f04f 0004 	mov.w	r0, #4
   46680:	df02      	svc	2

00046682 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   46682:	4770      	bx	lr

00046684 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   46684:	f7f4 bf94 	b.w	3b5b0 <SystemInit>

00046688 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   46688:	6843      	ldr	r3, [r0, #4]
}
   4668a:	7958      	ldrb	r0, [r3, #5]
   4668c:	4770      	bx	lr

0004668e <k_cycle_get_32_wrapper>:
   4668e:	f7db bcf5 	b.w	2207c <z_timer_cycle_get_32>

00046692 <dummy_timestamp>:
   46692:	2000      	movs	r0, #0
   46694:	4770      	bx	lr

00046696 <log_printk>:
			log_generic(src_level_union.structure, fmt, ap);
   46696:	460a      	mov	r2, r1
   46698:	4601      	mov	r1, r0
   4669a:	f04f 0000 	mov.w	r0, #0
   4669e:	f7da bd87 	b.w	211b0 <log_generic>

000466a2 <log_string_sync>:
{
   466a2:	b40e      	push	{r1, r2, r3}
   466a4:	b503      	push	{r0, r1, lr}
   466a6:	aa03      	add	r2, sp, #12
   466a8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   466ac:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap);
   466ae:	f7da fd7f 	bl	211b0 <log_generic>
}
   466b2:	b002      	add	sp, #8
   466b4:	f85d eb04 	ldr.w	lr, [sp], #4
   466b8:	b003      	add	sp, #12
   466ba:	4770      	bx	lr

000466bc <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
   466bc:	b508      	push	{r3, lr}
				K_THREAD_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   466be:	f7da fded 	bl	2129c <log_init>
	}

	return 0;
}
   466c2:	2000      	movs	r0, #0
   466c4:	bd08      	pop	{r3, pc}

000466c6 <log_strdup>:
}
   466c6:	4770      	bx	lr

000466c8 <buffer_write>:
{
   466c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   466ca:	4606      	mov	r6, r0
   466cc:	460d      	mov	r5, r1
   466ce:	4614      	mov	r4, r2
   466d0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   466d2:	4621      	mov	r1, r4
   466d4:	4628      	mov	r0, r5
   466d6:	463a      	mov	r2, r7
   466d8:	47b0      	blx	r6
	} while (len != 0);
   466da:	1a24      	subs	r4, r4, r0
		buf += processed;
   466dc:	4405      	add	r5, r0
	} while (len != 0);
   466de:	d1f8      	bne.n	466d2 <buffer_write+0xa>
}
   466e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000466e2 <log_output_flush>:
		     log_output->control_block->offset,
   466e2:	6842      	ldr	r2, [r0, #4]
{
   466e4:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   466e6:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   466ea:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   466ec:	6881      	ldr	r1, [r0, #8]
   466ee:	6800      	ldr	r0, [r0, #0]
   466f0:	f7ff ffea 	bl	466c8 <buffer_write>
	log_output->control_block->offset = 0;
   466f4:	2200      	movs	r2, #0
   466f6:	6863      	ldr	r3, [r4, #4]
   466f8:	601a      	str	r2, [r3, #0]
}
   466fa:	bd10      	pop	{r4, pc}

000466fc <char_out>:
{
   466fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   466fe:	460d      	mov	r5, r1
   46700:	4616      	mov	r6, r2
   46702:	4604      	mov	r4, r0
   46704:	1847      	adds	r7, r0, r1
	for (size_t i = 0; i < length; i++) {
   46706:	42bc      	cmp	r4, r7
   46708:	d101      	bne.n	4670e <char_out+0x12>
}
   4670a:	4628      	mov	r0, r5
   4670c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   4670e:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   46712:	6873      	ldr	r3, [r6, #4]
   46714:	4630      	mov	r0, r6
   46716:	685b      	ldr	r3, [r3, #4]
   46718:	4798      	blx	r3
   4671a:	e7f4      	b.n	46706 <char_out+0xa>

0004671c <boot_flag_read.constprop.6>:
static int boot_flag_read(int flag, u8_t bank_id)
   4671c:	b507      	push	{r0, r1, r2, lr}
	rc = flash_area_open(bank_id, &fa);
   4671e:	2002      	movs	r0, #2
   46720:	a901      	add	r1, sp, #4
   46722:	f7db fa31 	bl	21b88 <flash_area_open>
	if (rc) {
   46726:	b950      	cbnz	r0, 4673e <boot_flag_read.constprop.6+0x22>
	rc = boot_flag_offs(flag, fa, &offs);
   46728:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   4672a:	2301      	movs	r3, #1
		*offs = IMAGE_OK_OFFS(fa);
   4672c:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   4672e:	f10d 0203 	add.w	r2, sp, #3
   46732:	3918      	subs	r1, #24
   46734:	f000 f889 	bl	4684a <flash_area_read>
	if (rc != 0) {
   46738:	b908      	cbnz	r0, 4673e <boot_flag_read.constprop.6+0x22>
	return flag_val;
   4673a:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
   4673e:	b003      	add	sp, #12
   46740:	f85d fb04 	ldr.w	pc, [sp], #4

00046744 <boot_flag_write.constprop.7>:
static int boot_flag_write(int flag, u8_t bank_id)
   46744:	b513      	push	{r0, r1, r4, lr}
	rc = flash_area_open(bank_id, &fa);
   46746:	a901      	add	r1, sp, #4
   46748:	f7db fa1e 	bl	21b88 <flash_area_open>
	if (rc) {
   4674c:	4604      	mov	r4, r0
   4674e:	b948      	cbnz	r0, 46764 <boot_flag_write.constprop.7+0x20>
	rc = boot_flag_offs(flag, fa, &offs);
   46750:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   46752:	2201      	movs	r2, #1
		*offs = IMAGE_OK_OFFS(fa);
   46754:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   46756:	3918      	subs	r1, #24
   46758:	f7db f840 	bl	217dc <boot_write_trailer_byte>
   4675c:	4604      	mov	r4, r0
	flash_area_close(fa);
   4675e:	9801      	ldr	r0, [sp, #4]
   46760:	f000 f872 	bl	46848 <flash_area_close>
}
   46764:	4620      	mov	r0, r4
   46766:	b002      	add	sp, #8
   46768:	bd10      	pop	{r4, pc}

0004676a <boot_write_img_confirmed>:
{
	return boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   4676a:	b513      	push	{r0, r1, r4, lr}
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   4676c:	f7ff ffd6 	bl	4671c <boot_flag_read.constprop.6>
	rc = flash_area_open(bank_id, &fa);
   46770:	a901      	add	r1, sp, #4
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   46772:	4604      	mov	r4, r0
	rc = flash_area_open(bank_id, &fa);
   46774:	2002      	movs	r0, #2
   46776:	f7db fa07 	bl	21b88 <flash_area_open>
	if (rc) {
   4677a:	2800      	cmp	r0, #0
	return flash_area_erased_val(fa);
   4677c:	bf14      	ite	ne
   4677e:	f06f 0315 	mvnne.w	r3, #21
   46782:	23ff      	moveq	r3, #255	; 0xff
	int rc;

	if (boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) !=
   46784:	42a3      	cmp	r3, r4
   46786:	d104      	bne.n	46792 <boot_write_img_confirmed+0x28>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   46788:	2002      	movs	r0, #2
   4678a:	f7ff ffdb 	bl	46744 <boot_flag_write.constprop.7>
	}

	rc = boot_image_ok_write(FLASH_AREA_IMAGE_PRIMARY);

	return rc;
}
   4678e:	b002      	add	sp, #8
   46790:	bd10      	pop	{r4, pc}
		return 0;
   46792:	2000      	movs	r0, #0
   46794:	e7fb      	b.n	4678e <boot_write_img_confirmed+0x24>

00046796 <flash_img_buffered_write>:

int flash_img_buffered_write(struct flash_img_context *ctx, u8_t *data,
			     size_t len, bool flush)
{
   46796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4679a:	4604      	mov	r4, r0
   4679c:	4688      	mov	r8, r1
   4679e:	4615      	mov	r5, r2
   467a0:	461f      	mov	r7, r3
	int processed = 0;
   467a2:	2600      	movs	r6, #0
	while ((len - processed) >=
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
		       buf_empty_bytes);

		ctx->buf_bytes = CONFIG_IMG_BLOCK_BUF_SIZE;
   467a4:	f44f 7900 	mov.w	r9, #512	; 0x200
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
   467a8:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
	while ((len - processed) >=
   467ac:	1baa      	subs	r2, r5, r6
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
   467ae:	f5c0 7a00 	rsb	sl, r0, #512	; 0x200
	while ((len - processed) >=
   467b2:	4552      	cmp	r2, sl
   467b4:	d220      	bcs.n	467f8 <flash_img_buffered_write+0x62>

		processed += buf_empty_bytes;
	}

	/* place rest of the data into ctx->buf */
	if (processed < len) {
   467b6:	42ae      	cmp	r6, r5
   467b8:	d20a      	bcs.n	467d0 <flash_img_buffered_write+0x3a>
   467ba:	eb08 0106 	add.w	r1, r8, r6
   467be:	4420      	add	r0, r4
   467c0:	f7d3 fb76 	bl	19eb0 <memcpy>
		memcpy(ctx->buf + ctx->buf_bytes,
		       data + processed, len - processed);
		ctx->buf_bytes += len - processed;
   467c4:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
   467c8:	441d      	add	r5, r3
   467ca:	1bad      	subs	r5, r5, r6
   467cc:	f8a4 5208 	strh.w	r5, [r4, #520]	; 0x208
	}

	if (!flush) {
   467d0:	b33f      	cbz	r7, 46822 <flash_img_buffered_write+0x8c>
		return rc;
	}

	if (ctx->buf_bytes > 0) {
   467d2:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
   467d6:	b9f3      	cbnz	r3, 46816 <flash_img_buffered_write+0x80>
		}
	}
#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	/* erase the image trailer area if it was not erased */
	flash_progressive_erase(ctx,
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
   467d8:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	flash_progressive_erase(ctx,
   467dc:	4620      	mov	r0, r4
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
   467de:	6899      	ldr	r1, [r3, #8]
	flash_progressive_erase(ctx,
   467e0:	3920      	subs	r1, #32
   467e2:	f7db f855 	bl	21890 <flash_progressive_erase>
#endif

	flash_area_close(ctx->flash_area);
   467e6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
   467ea:	f000 f82d 	bl	46848 <flash_area_close>
	ctx->flash_area = NULL;
   467ee:	2000      	movs	r0, #0
   467f0:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200

	return rc;
}
   467f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   467f8:	4652      	mov	r2, sl
   467fa:	eb08 0106 	add.w	r1, r8, r6
   467fe:	4420      	add	r0, r4
   46800:	f7d3 fb56 	bl	19eb0 <memcpy>
		ctx->buf_bytes = CONFIG_IMG_BLOCK_BUF_SIZE;
   46804:	f8a4 9208 	strh.w	r9, [r4, #520]	; 0x208
		rc = flash_sync(ctx);
   46808:	4620      	mov	r0, r4
   4680a:	f7db f8a3 	bl	21954 <flash_sync>
		if (rc) {
   4680e:	2800      	cmp	r0, #0
   46810:	d1f0      	bne.n	467f4 <flash_img_buffered_write+0x5e>
		processed += buf_empty_bytes;
   46812:	4456      	add	r6, sl
   46814:	e7c8      	b.n	467a8 <flash_img_buffered_write+0x12>
		rc = flash_sync(ctx);
   46816:	4620      	mov	r0, r4
   46818:	f7db f89c 	bl	21954 <flash_sync>
		if (rc) {
   4681c:	2800      	cmp	r0, #0
   4681e:	d0db      	beq.n	467d8 <flash_img_buffered_write+0x42>
   46820:	e7e8      	b.n	467f4 <flash_img_buffered_write+0x5e>
   46822:	4638      	mov	r0, r7
   46824:	e7e6      	b.n	467f4 <flash_img_buffered_write+0x5e>

00046826 <flash_img_init>:
	return ctx->bytes_written;
}

int flash_img_init(struct flash_img_context *ctx)
{
	ctx->bytes_written = 0;
   46826:	2300      	movs	r3, #0
   46828:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
	ctx->buf_bytes = 0U;
   4682c:	f8a0 3208 	strh.w	r3, [r0, #520]	; 0x208
#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	ctx->off_last = -1;
   46830:	f04f 33ff 	mov.w	r3, #4294967295
#endif
	return flash_area_open(FLASH_AREA_IMAGE_SECONDARY,
   46834:	f500 7100 	add.w	r1, r0, #512	; 0x200
	ctx->off_last = -1;
   46838:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
	return flash_area_open(FLASH_AREA_IMAGE_SECONDARY,
   4683c:	2006      	movs	r0, #6
   4683e:	f7db b9a3 	b.w	21b88 <flash_area_open>

00046842 <z_impl_flash_write_protection_set>:
static inline int z_impl_flash_write_protection_set(struct device *dev,
						   bool enable)
{
	const struct flash_driver_api *api = dev->driver_api;

	return api->write_protection(dev, enable);
   46842:	6843      	ldr	r3, [r0, #4]
   46844:	68db      	ldr	r3, [r3, #12]
   46846:	4718      	bx	r3

00046848 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   46848:	4770      	bx	lr

0004684a <flash_area_read>:
}
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   4684a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4684e:	461e      	mov	r6, r3
	struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   46850:	6883      	ldr	r3, [r0, #8]
{
   46852:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   46854:	428b      	cmp	r3, r1
{
   46856:	460c      	mov	r4, r1
   46858:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   4685a:	d30f      	bcc.n	4687c <flash_area_read+0x32>
   4685c:	1872      	adds	r2, r6, r1
   4685e:	4293      	cmp	r3, r2
   46860:	d30c      	bcc.n	4687c <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   46862:	68c0      	ldr	r0, [r0, #12]
   46864:	f7f5 f8ca 	bl	3b9fc <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   46868:	6869      	ldr	r1, [r5, #4]
   4686a:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   4686c:	6843      	ldr	r3, [r0, #4]
   4686e:	463a      	mov	r2, r7
   46870:	681c      	ldr	r4, [r3, #0]
   46872:	4633      	mov	r3, r6
   46874:	46a4      	mov	ip, r4
}
   46876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   4687a:	4760      	bx	ip
   4687c:	f06f 0015 	mvn.w	r0, #21
   46880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00046884 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   46884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   46888:	4698      	mov	r8, r3
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   4688a:	6883      	ldr	r3, [r0, #8]
{
   4688c:	4607      	mov	r7, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   4688e:	428b      	cmp	r3, r1
{
   46890:	460d      	mov	r5, r1
   46892:	4691      	mov	r9, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   46894:	d31c      	bcc.n	468d0 <flash_area_write+0x4c>
   46896:	eb08 0201 	add.w	r2, r8, r1
   4689a:	4293      	cmp	r3, r2
   4689c:	d318      	bcc.n	468d0 <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   4689e:	68c0      	ldr	r0, [r0, #12]
   468a0:	f7f5 f8ac 	bl	3b9fc <z_impl_device_get_binding>
   468a4:	4606      	mov	r6, r0
	return z_impl_flash_write_protection_set(dev, enable);
   468a6:	2100      	movs	r1, #0
   468a8:	f7ff ffcb 	bl	46842 <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   468ac:	4604      	mov	r4, r0
   468ae:	b960      	cbnz	r0, 468ca <flash_area_write+0x46>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   468b0:	6879      	ldr	r1, [r7, #4]
   468b2:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
   468b4:	6873      	ldr	r3, [r6, #4]
   468b6:	464a      	mov	r2, r9
   468b8:	685c      	ldr	r4, [r3, #4]
   468ba:	4630      	mov	r0, r6
   468bc:	4643      	mov	r3, r8
   468be:	47a0      	blx	r4
   468c0:	4604      	mov	r4, r0
   468c2:	2101      	movs	r1, #1
   468c4:	4630      	mov	r0, r6
   468c6:	f7ff ffbc 	bl	46842 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   468ca:	4620      	mov	r0, r4
   468cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   468d0:	f06f 0415 	mvn.w	r4, #21
   468d4:	e7f9      	b.n	468ca <flash_area_write+0x46>

000468d6 <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   468d6:	6883      	ldr	r3, [r0, #8]
{
   468d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   468dc:	428b      	cmp	r3, r1
{
   468de:	4607      	mov	r7, r0
   468e0:	460d      	mov	r5, r1
   468e2:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   468e4:	d31a      	bcc.n	4691c <flash_area_erase+0x46>
   468e6:	440a      	add	r2, r1
   468e8:	4293      	cmp	r3, r2
   468ea:	d317      	bcc.n	4691c <flash_area_erase+0x46>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   468ec:	68c0      	ldr	r0, [r0, #12]
   468ee:	f7f5 f885 	bl	3b9fc <z_impl_device_get_binding>
   468f2:	4606      	mov	r6, r0
   468f4:	2100      	movs	r1, #0
   468f6:	f7ff ffa4 	bl	46842 <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   468fa:	4604      	mov	r4, r0
   468fc:	b958      	cbnz	r0, 46916 <flash_area_erase+0x40>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   468fe:	6879      	ldr	r1, [r7, #4]
   46900:	4429      	add	r1, r5
	return api->erase(dev, offset, size);
   46902:	6873      	ldr	r3, [r6, #4]
   46904:	4642      	mov	r2, r8
   46906:	689b      	ldr	r3, [r3, #8]
   46908:	4630      	mov	r0, r6
   4690a:	4798      	blx	r3
   4690c:	4604      	mov	r4, r0
   4690e:	2101      	movs	r1, #1
   46910:	4630      	mov	r0, r6
   46912:	f7ff ff96 	bl	46842 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   46916:	4620      	mov	r0, r4
   46918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   4691c:	f06f 0415 	mvn.w	r4, #21
   46920:	e7f9      	b.n	46916 <flash_area_erase+0x40>

00046922 <flash_area_align>:

u8_t flash_area_align(const struct flash_area *fa)
{
   46922:	b508      	push	{r3, lr}
	struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   46924:	68c0      	ldr	r0, [r0, #12]
   46926:	f7f5 f869 	bl	3b9fc <z_impl_device_get_binding>

static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api = dev->driver_api;

	return api->write_block_size;
   4692a:	6843      	ldr	r3, [r0, #4]

	return flash_get_write_block_size(dev);
}
   4692c:	7d18      	ldrb	r0, [r3, #20]
   4692e:	bd08      	pop	{r3, pc}

00046930 <flash_area_get_device>:
	return 1;
}

struct device *flash_area_get_device(const struct flash_area *fa)
{
	return device_get_binding(fa->fa_dev_name);
   46930:	68c0      	ldr	r0, [r0, #12]
   46932:	f7f5 b863 	b.w	3b9fc <z_impl_device_get_binding>

00046936 <z_impl_uart_poll_out>:
   46936:	6843      	ldr	r3, [r0, #4]
   46938:	685b      	ldr	r3, [r3, #4]
   4693a:	4718      	bx	r3

0004693c <debug_hook_out_nop>:
}
   4693c:	2000      	movs	r0, #0
   4693e:	4770      	bx	lr

00046940 <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   46940:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   46942:	7a5a      	ldrb	r2, [r3, #9]
   46944:	b932      	cbnz	r2, 46954 <get_status+0x14>
	if (data->ref > 0) {
   46946:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   4694a:	2800      	cmp	r0, #0
   4694c:	bfcc      	ite	gt
   4694e:	2000      	movgt	r0, #0
   46950:	2001      	movle	r0, #1
   46952:	4770      	bx	lr
   46954:	2002      	movs	r0, #2
}
   46956:	4770      	bx	lr

00046958 <clock_stop>:
	const struct nrf_clock_control_config *config =
   46958:	6802      	ldr	r2, [r0, #0]
{
   4695a:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   4695c:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   4695e:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   46960:	f04f 0320 	mov.w	r3, #32
   46964:	f3ef 8511 	mrs	r5, BASEPRI
   46968:	f383 8811 	msr	BASEPRI, r3
   4696c:	f3bf 8f6f 	isb	sy
	data->ref--;
   46970:	7a23      	ldrb	r3, [r4, #8]
   46972:	3b01      	subs	r3, #1
   46974:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   46976:	2b00      	cmp	r3, #0
	data->ref--;
   46978:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   4697a:	d11c      	bne.n	469b6 <clock_stop+0x5e>
	list->tail = NULL;
   4697c:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   46980:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   46982:	b9a3      	cbnz	r3, 469ae <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   46984:	2201      	movs	r2, #1
   46986:	7af3      	ldrb	r3, [r6, #11]
   46988:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4698c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   46990:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   46992:	2200      	movs	r2, #0
   46994:	8933      	ldrh	r3, [r6, #8]
   46996:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4699a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   4699e:	601a      	str	r2, [r3, #0]
		data->started = false;
   469a0:	2000      	movs	r0, #0
   469a2:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   469a4:	f385 8811 	msr	BASEPRI, r5
   469a8:	f3bf 8f6f 	isb	sy
}
   469ac:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   469ae:	4798      	blx	r3
   469b0:	2800      	cmp	r0, #0
   469b2:	d1e7      	bne.n	46984 <clock_stop+0x2c>
   469b4:	e7f4      	b.n	469a0 <clock_stop+0x48>
   469b6:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   469ba:	bfbc      	itt	lt
   469bc:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   469be:	f06f 0077 	mvnlt.w	r0, #119	; 0x77
   469c2:	e7ef      	b.n	469a4 <clock_stop+0x4c>

000469c4 <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   469c4:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   469c6:	2000      	movs	r0, #0
	list->tail = NULL;
   469c8:	e9c3 0000 	strd	r0, r0, [r3]
}
   469cc:	4770      	bx	lr

000469ce <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   469ce:	2200      	movs	r2, #0
   469d0:	f7db b952 	b.w	21c78 <clock_async_start>

000469d4 <clkstarted_handle>:
{
   469d4:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   469d6:	6884      	ldr	r4, [r0, #8]
{
   469d8:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   469da:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   469dc:	b12b      	cbz	r3, 469ea <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   469de:	6861      	ldr	r1, [r4, #4]
	return node->next;
   469e0:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   469e2:	428b      	cmp	r3, r1
	list->head = node;
   469e4:	6022      	str	r2, [r4, #0]
	list->tail = node;
   469e6:	bf08      	it	eq
   469e8:	6062      	streq	r2, [r4, #4]
	data->started = true;
   469ea:	2201      	movs	r2, #1
   469ec:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   469ee:	b903      	cbnz	r3, 469f2 <clkstarted_handle+0x1e>
}
   469f0:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   469f2:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   469f6:	4628      	mov	r0, r5
   469f8:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   469fa:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   469fc:	2b00      	cmp	r3, #0
   469fe:	d0f7      	beq.n	469f0 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   46a00:	6861      	ldr	r1, [r4, #4]
	return node->next;
   46a02:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   46a04:	428b      	cmp	r3, r1
	list->head = node;
   46a06:	6022      	str	r2, [r4, #0]
	list->tail = node;
   46a08:	bf08      	it	eq
   46a0a:	6062      	streq	r2, [r4, #4]
   46a0c:	e7ef      	b.n	469ee <clkstarted_handle+0x1a>

00046a0e <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   46a0e:	4770      	bx	lr

00046a10 <sys_clock_disable>:
   46a10:	4770      	bx	lr

00046a12 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   46a12:	f7db bc3b 	b.w	2228c <_DoInit>

00046a16 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   46a16:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   46a18:	f7ff fffb 	bl	46a12 <SEGGER_RTT_Init>

	return 0;
}
   46a1c:	2000      	movs	r0, #0
   46a1e:	bd08      	pop	{r3, pc}

00046a20 <z_irq_spurious>:
	z_arm_reserved();
   46a20:	f7db bd44 	b.w	224ac <z_arm_bus_fault>

00046a24 <z_arch_isr_direct_header>:
#endif

void z_arch_isr_direct_header(void)
{
	sys_trace_isr_enter();
}
   46a24:	4770      	bx	lr

00046a26 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   46a26:	6d83      	ldr	r3, [r0, #88]	; 0x58
   46a28:	f383 880b 	msr	PSPLIM, r3
}
   46a2c:	4770      	bx	lr

00046a2e <z_do_kernel_oops>:

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   46a2e:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   46a30:	6800      	ldr	r0, [r0, #0]
   46a32:	f7db be5b 	b.w	226ec <z_arm_fatal_error>

00046a36 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   46a36:	b508      	push	{r3, lr}
	handler();
   46a38:	f7db fd4a 	bl	224d0 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   46a3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   46a40:	f7db bca8 	b.w	22394 <z_arm_exc_exit>

00046a44 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   46a44:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   46a46:	2100      	movs	r1, #0
   46a48:	a801      	add	r0, sp, #4
   46a4a:	f7dc fc7d 	bl	23348 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   46a4e:	b003      	add	sp, #12
   46a50:	f85d fb04 	ldr.w	pc, [sp], #4

00046a54 <mpu_configure_region>:
{
   46a54:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   46a56:	684b      	ldr	r3, [r1, #4]
{
   46a58:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   46a5a:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   46a5c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   46a60:	890d      	ldrh	r5, [r1, #8]
   46a62:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   46a64:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   46a66:	f024 041f 	bic.w	r4, r4, #31
   46a6a:	3b01      	subs	r3, #1
	p_attr->rbar = attr->rbar &
   46a6c:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   46a70:	4423      	add	r3, r4
	p_attr->mair_idx = attr->mair_idx;
   46a72:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   46a76:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   46a7a:	4669      	mov	r1, sp
	p_attr->mair_idx = attr->mair_idx;
   46a7c:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   46a80:	9303      	str	r3, [sp, #12]
   46a82:	f7dc fa7f 	bl	22f84 <region_allocate_and_init>
}
   46a86:	b005      	add	sp, #20
   46a88:	bd30      	pop	{r4, r5, pc}

00046a8a <_stdout_hook_default>:
}
   46a8a:	f04f 30ff 	mov.w	r0, #4294967295
   46a8e:	4770      	bx	lr

00046a90 <_stdin_hook_default>:
}
   46a90:	2000      	movs	r0, #0
   46a92:	4770      	bx	lr

00046a94 <_read>:
{
   46a94:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   46a96:	4611      	mov	r1, r2
   46a98:	f7dc bc96 	b.w	233c8 <z_impl_zephyr_read_stdin>

00046a9c <_write>:
{
   46a9c:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   46a9e:	4611      	mov	r1, r2
   46aa0:	f7dc bca6 	b.w	233f0 <z_impl_zephyr_write_stdout>

00046aa4 <_close>:
   46aa4:	f04f 30ff 	mov.w	r0, #4294967295
   46aa8:	4770      	bx	lr

00046aaa <_lseek>:
}
   46aaa:	2000      	movs	r0, #0
   46aac:	4770      	bx	lr

00046aae <_isatty>:
}
   46aae:	2001      	movs	r0, #1
   46ab0:	4770      	bx	lr

00046ab2 <_kill>:
}
   46ab2:	2000      	movs	r0, #0
   46ab4:	4770      	bx	lr

00046ab6 <_getpid>:
}
   46ab6:	2000      	movs	r0, #0
   46ab8:	4770      	bx	lr

00046aba <_fstat>:
	st->st_mode = S_IFCHR;
   46aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   46abe:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   46ac0:	604b      	str	r3, [r1, #4]
}
   46ac2:	4770      	bx	lr

00046ac4 <__errno>:
	if (z_syscall_trap()) {
		return (int *) z_arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   46ac4:	f7f4 bfc0 	b.w	3ba48 <z_impl_z_errno>

00046ac8 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   46ac8:	b508      	push	{r3, lr}
	net_if_init();
   46aca:	f7dc fd4b 	bl	23564 <net_if_init>
	net_if_post_init();
   46ace:	f7dc fd61 	bl	23594 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   46ad2:	2000      	movs	r0, #0
   46ad4:	bd08      	pop	{r3, pc}

00046ad6 <l2_flags_get>:
	return iface->if_dev->l2;
   46ad6:	6803      	ldr	r3, [r0, #0]
   46ad8:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   46ada:	b113      	cbz	r3, 46ae2 <l2_flags_get+0xc>
   46adc:	68db      	ldr	r3, [r3, #12]
   46ade:	b103      	cbz	r3, 46ae2 <l2_flags_get+0xc>
		flags = net_if_l2(iface)->get_flags(iface);
   46ae0:	4718      	bx	r3
}
   46ae2:	2000      	movs	r0, #0
   46ae4:	4770      	bx	lr

00046ae6 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, u16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   46ae6:	e9d0 2300 	ldrd	r2, r3, [r0]
   46aea:	1a9b      	subs	r3, r3, r2
   46aec:	2b01      	cmp	r3, #1
{
   46aee:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   46af0:	d90c      	bls.n	46b0c <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   46af2:	4614      	mov	r4, r2
   46af4:	1c53      	adds	r3, r2, #1
   46af6:	6003      	str	r3, [r0, #0]
   46af8:	f814 3b02 	ldrb.w	r3, [r4], #2
   46afc:	021b      	lsls	r3, r3, #8
   46afe:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   46b00:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   46b02:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   46b04:	7852      	ldrb	r2, [r2, #1]
   46b06:	4313      	orrs	r3, r2
   46b08:	800b      	strh	r3, [r1, #0]
}
   46b0a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   46b0c:	f06f 0015 	mvn.w	r0, #21
   46b10:	e7fb      	b.n	46b0a <unpack_uint16+0x24>

00046b12 <packet_length_decode>:
int packet_length_decode(struct buf_ctx *buf, u32_t *length)
{
	u8_t shift = 0U;
	u8_t bytes = 0U;

	*length = 0U;
   46b12:	2300      	movs	r3, #0
{
   46b14:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
			return -EINVAL;
		}

		if (buf->cur >= buf->end) {
   46b16:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   46b18:	600b      	str	r3, [r1, #0]
		if (buf->cur >= buf->end) {
   46b1a:	6804      	ldr	r4, [r0, #0]
   46b1c:	42bc      	cmp	r4, r7
   46b1e:	d215      	bcs.n	46b4c <packet_length_decode+0x3a>
			return -EAGAIN;
		}

		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   46b20:	4625      	mov	r5, r4
   46b22:	f815 2b01 	ldrb.w	r2, [r5], #1
   46b26:	680e      	ldr	r6, [r1, #0]
   46b28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
								<< shift;
   46b2c:	409a      	lsls	r2, r3
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   46b2e:	4432      	add	r2, r6
   46b30:	600a      	str	r2, [r1, #0]
		shift += MQTT_LENGTH_SHIFT;
		bytes++;
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   46b32:	6005      	str	r5, [r0, #0]
   46b34:	f994 2000 	ldrsb.w	r2, [r4]
   46b38:	2a00      	cmp	r2, #0
   46b3a:	db01      	blt.n	46b40 <packet_length_decode+0x2e>

	MQTT_TRC("length:0x%08x", *length);

	return 0;
   46b3c:	2000      	movs	r0, #0
}
   46b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   46b40:	3307      	adds	r3, #7
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
   46b42:	2b23      	cmp	r3, #35	; 0x23
   46b44:	d1e9      	bne.n	46b1a <packet_length_decode+0x8>
			return -EINVAL;
   46b46:	f06f 0015 	mvn.w	r0, #21
   46b4a:	e7f8      	b.n	46b3e <packet_length_decode+0x2c>
			return -EAGAIN;
   46b4c:	f06f 000a 	mvn.w	r0, #10
   46b50:	e7f5      	b.n	46b3e <packet_length_decode+0x2c>

00046b52 <fixed_header_decode>:

int fixed_header_decode(struct buf_ctx *buf, u8_t *type_and_flags,
			u32_t *length)
{
   46b52:	b430      	push	{r4, r5}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   46b54:	e9d0 3500 	ldrd	r3, r5, [r0]
   46b58:	429d      	cmp	r5, r3
   46b5a:	d007      	beq.n	46b6c <fixed_header_decode+0x1a>
	*val = *(buf->cur++);
   46b5c:	1c5d      	adds	r5, r3, #1
   46b5e:	6005      	str	r5, [r0, #0]
   46b60:	781b      	ldrb	r3, [r3, #0]
   46b62:	700b      	strb	r3, [r1, #0]
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   46b64:	bc30      	pop	{r4, r5}
	return packet_length_decode(buf, length);
   46b66:	4611      	mov	r1, r2
   46b68:	f7ff bfd3 	b.w	46b12 <packet_length_decode>
}
   46b6c:	f06f 0015 	mvn.w	r0, #21
   46b70:	bc30      	pop	{r4, r5}
   46b72:	4770      	bx	lr

00046b74 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   46b74:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   46b76:	e9d1 3400 	ldrd	r3, r4, [r1]
   46b7a:	42a3      	cmp	r3, r4
   46b7c:	d102      	bne.n	46b84 <connect_ack_decode+0x10>
		return -EINVAL;
   46b7e:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   46b82:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   46b84:	1c5d      	adds	r5, r3, #1
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   46b86:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   46b88:	600d      	str	r5, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   46b8a:	d0f8      	beq.n	46b7e <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   46b8c:	461d      	mov	r5, r3
   46b8e:	f815 4b02 	ldrb.w	r4, [r5], #2
   46b92:	600d      	str	r5, [r1, #0]
   46b94:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   46b96:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   46b9a:	7051      	strb	r1, [r2, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   46b9c:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   46b9e:	bf04      	itt	eq
   46ba0:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   46ba4:	7013      	strbeq	r3, [r2, #0]
	return 0;
   46ba6:	2000      	movs	r0, #0
   46ba8:	e7eb      	b.n	46b82 <connect_ack_decode+0xe>

00046baa <publish_decode>:

int publish_decode(u8_t flags, u32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   46baa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   46bae:	461c      	mov	r4, r3
	int err_code;
	u32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   46bb0:	7d9b      	ldrb	r3, [r3, #22]
{
   46bb2:	4688      	mov	r8, r1
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   46bb4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   46bb8:	f360 0341 	bfi	r3, r0, #1, #1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   46bbc:	f3c0 0041 	ubfx	r0, r0, #1, #2
   46bc0:	7220      	strb	r0, [r4, #8]
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   46bc2:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   46bc4:	f10d 0106 	add.w	r1, sp, #6
   46bc8:	4610      	mov	r0, r2
{
   46bca:	4616      	mov	r6, r2
	err_code = unpack_uint16(buf, &utf8_strlen);
   46bcc:	f7ff ff8b 	bl	46ae6 <unpack_uint16>
	if (err_code != 0) {
   46bd0:	4607      	mov	r7, r0
   46bd2:	b940      	cbnz	r0, 46be6 <publish_decode+0x3c>
	if ((buf->end - buf->cur) < utf8_strlen) {
   46bd4:	6833      	ldr	r3, [r6, #0]
   46bd6:	6872      	ldr	r2, [r6, #4]
   46bd8:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   46bdc:	1ad2      	subs	r2, r2, r3
   46bde:	42aa      	cmp	r2, r5
   46be0:	da05      	bge.n	46bee <publish_decode+0x44>
		return -EINVAL;
   46be2:	f06f 0715 	mvn.w	r7, #21

	param->message.payload.data = NULL;
	param->message.payload.len = var_length - var_header_length;

	return 0;
}
   46be6:	4638      	mov	r0, r7
   46be8:	b002      	add	sp, #8
   46bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	str->size = utf8_strlen;
   46bee:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   46bf0:	b15d      	cbz	r5, 46c0a <publish_decode+0x60>
		str->utf8 = buf->cur;
   46bf2:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   46bf4:	442b      	add	r3, r5
   46bf6:	6033      	str	r3, [r6, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   46bf8:	7a23      	ldrb	r3, [r4, #8]
   46bfa:	b943      	cbnz	r3, 46c0e <publish_decode+0x64>
	var_header_length = param->message.topic.topic.size + sizeof(u16_t);
   46bfc:	3502      	adds	r5, #2
	param->message.payload.data = NULL;
   46bfe:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   46c00:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   46c04:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   46c06:	6125      	str	r5, [r4, #16]
	return 0;
   46c08:	e7ed      	b.n	46be6 <publish_decode+0x3c>
		str->utf8 = NULL;
   46c0a:	6025      	str	r5, [r4, #0]
   46c0c:	e7f4      	b.n	46bf8 <publish_decode+0x4e>
		err_code = unpack_uint16(buf, &param->message_id);
   46c0e:	f104 0114 	add.w	r1, r4, #20
   46c12:	4630      	mov	r0, r6
   46c14:	f7ff ff67 	bl	46ae6 <unpack_uint16>
		if (err_code != 0) {
   46c18:	b908      	cbnz	r0, 46c1e <publish_decode+0x74>
		var_header_length += sizeof(u16_t);
   46c1a:	3504      	adds	r5, #4
   46c1c:	e7ef      	b.n	46bfe <publish_decode+0x54>
   46c1e:	4607      	mov	r7, r0
   46c20:	e7e1      	b.n	46be6 <publish_decode+0x3c>

00046c22 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   46c22:	f7ff bf60 	b.w	46ae6 <unpack_uint16>

00046c26 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   46c26:	f7ff bf5e 	b.w	46ae6 <unpack_uint16>

00046c2a <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   46c2a:	f7ff bf5c 	b.w	46ae6 <unpack_uint16>

00046c2e <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   46c2e:	f7ff bf5a 	b.w	46ae6 <unpack_uint16>

00046c32 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   46c32:	b538      	push	{r3, r4, r5, lr}
   46c34:	4605      	mov	r5, r0
   46c36:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   46c38:	f7ff ff55 	bl	46ae6 <unpack_uint16>
	if (err_code != 0) {
   46c3c:	b930      	cbnz	r0, 46c4c <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   46c3e:	e9d5 2300 	ldrd	r2, r3, [r5]
   46c42:	1a99      	subs	r1, r3, r2
	str->len = length;
   46c44:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   46c46:	b111      	cbz	r1, 46c4e <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   46c48:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   46c4a:	602b      	str	r3, [r5, #0]
}
   46c4c:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   46c4e:	6060      	str	r0, [r4, #4]
   46c50:	e7fc      	b.n	46c4c <subscribe_ack_decode+0x1a>

00046c52 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   46c52:	f7ff bf48 	b.w	46ae6 <unpack_uint16>

00046c56 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   46c56:	e9d1 3200 	ldrd	r3, r2, [r1]
   46c5a:	1ad2      	subs	r2, r2, r3
   46c5c:	2a01      	cmp	r2, #1
   46c5e:	d909      	bls.n	46c74 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   46c60:	1c5a      	adds	r2, r3, #1
   46c62:	600a      	str	r2, [r1, #0]
   46c64:	0a02      	lsrs	r2, r0, #8
   46c66:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   46c68:	680b      	ldr	r3, [r1, #0]
   46c6a:	1c5a      	adds	r2, r3, #1
   46c6c:	600a      	str	r2, [r1, #0]
   46c6e:	7018      	strb	r0, [r3, #0]
	return 0;
   46c70:	2000      	movs	r0, #0
   46c72:	4770      	bx	lr
		return -ENOMEM;
   46c74:	f06f 000b 	mvn.w	r0, #11
}
   46c78:	4770      	bx	lr

00046c7a <pack_utf8_str>:
{
   46c7a:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   46c7c:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   46c80:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   46c82:	6840      	ldr	r0, [r0, #4]
   46c84:	1a9b      	subs	r3, r3, r2
   46c86:	1c82      	adds	r2, r0, #2
   46c88:	4293      	cmp	r3, r2
{
   46c8a:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   46c8c:	d30d      	bcc.n	46caa <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   46c8e:	b280      	uxth	r0, r0
   46c90:	f7ff ffe1 	bl	46c56 <pack_uint16>
   46c94:	e9d5 1200 	ldrd	r1, r2, [r5]
   46c98:	6820      	ldr	r0, [r4, #0]
   46c9a:	f7d3 f909 	bl	19eb0 <memcpy>
	return 0;
   46c9e:	2000      	movs	r0, #0
	buf->cur += str->size;
   46ca0:	6823      	ldr	r3, [r4, #0]
   46ca2:	686a      	ldr	r2, [r5, #4]
   46ca4:	4413      	add	r3, r2
   46ca6:	6023      	str	r3, [r4, #0]
}
   46ca8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   46caa:	f06f 000b 	mvn.w	r0, #11
   46cae:	e7fb      	b.n	46ca8 <pack_utf8_str+0x2e>

00046cb0 <mqtt_encode_fixed_header>:
{
   46cb0:	b570      	push	{r4, r5, r6, lr}
	u32_t length = buf->cur - start;
   46cb2:	6815      	ldr	r5, [r2, #0]
   46cb4:	1a6d      	subs	r5, r5, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   46cb6:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
   46cba:	d227      	bcs.n	46d0c <mqtt_encode_fixed_header+0x5c>
   46cbc:	462c      	mov	r4, r5
   46cbe:	2600      	movs	r6, #0
	} while (length > 0);
   46cc0:	09e4      	lsrs	r4, r4, #7
   46cc2:	b2f3      	uxtb	r3, r6
   46cc4:	f106 0601 	add.w	r6, r6, #1
   46cc8:	d1fa      	bne.n	46cc0 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(u8_t);
   46cca:	3302      	adds	r3, #2
	buf->cur = start - fixed_header_length;
   46ccc:	b2db      	uxtb	r3, r3
   46cce:	425b      	negs	r3, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   46cd0:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   46cd2:	18cc      	adds	r4, r1, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   46cd4:	42a6      	cmp	r6, r4
	buf->cur = start - fixed_header_length;
   46cd6:	6014      	str	r4, [r2, #0]
	*(buf->cur++) = val;
   46cd8:	bf1e      	ittt	ne
   46cda:	3401      	addne	r4, #1
   46cdc:	6014      	strne	r4, [r2, #0]
   46cde:	54c8      	strbne	r0, [r1, r3]
   46ce0:	4628      	mov	r0, r5
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   46ce2:	6811      	ldr	r1, [r2, #0]
   46ce4:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   46ce8:	700c      	strb	r4, [r1, #0]
			if (length > 0) {
   46cea:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   46cec:	bf1f      	itttt	ne
   46cee:	6814      	ldrne	r4, [r2, #0]
   46cf0:	7821      	ldrbne	r1, [r4, #0]
   46cf2:	f061 017f 	ornne	r1, r1, #127	; 0x7f
   46cf6:	7021      	strbne	r1, [r4, #0]
			buf->cur++;
   46cf8:	6811      	ldr	r1, [r2, #0]
   46cfa:	3101      	adds	r1, #1
   46cfc:	6011      	str	r1, [r2, #0]
	} while (length > 0);
   46cfe:	2800      	cmp	r0, #0
   46d00:	d1ef      	bne.n	46ce2 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   46d02:	440b      	add	r3, r1
	buf->end = buf->cur + length + fixed_header_length;
   46d04:	4429      	add	r1, r5
	buf->cur = buf->cur - fixed_header_length;
   46d06:	6013      	str	r3, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   46d08:	6051      	str	r1, [r2, #4]
}
   46d0a:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   46d0c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   46d10:	e7fb      	b.n	46d0a <mqtt_encode_fixed_header+0x5a>

00046d12 <mqtt_message_id_only_enc>:
{
   46d12:	b570      	push	{r4, r5, r6, lr}
   46d14:	4606      	mov	r6, r0
   46d16:	4615      	mov	r5, r2
	if (message_id == 0U) {
   46d18:	4608      	mov	r0, r1
   46d1a:	b169      	cbz	r1, 46d38 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   46d1c:	6814      	ldr	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   46d1e:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   46d20:	3405      	adds	r4, #5
   46d22:	6014      	str	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   46d24:	f7ff ff97 	bl	46c56 <pack_uint16>
	if (err_code != 0) {
   46d28:	b940      	cbnz	r0, 46d3c <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   46d2a:	462a      	mov	r2, r5
   46d2c:	4621      	mov	r1, r4
   46d2e:	4630      	mov	r0, r6
}
   46d30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   46d34:	f7ff bfbc 	b.w	46cb0 <mqtt_encode_fixed_header>
		return -EINVAL;
   46d38:	f06f 0015 	mvn.w	r0, #21
}
   46d3c:	bd70      	pop	{r4, r5, r6, pc}

00046d3e <publish_encode>:
{
   46d3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   46d42:	7d86      	ldrb	r6, [r0, #22]
   46d44:	f890 8008 	ldrb.w	r8, [r0, #8]
   46d48:	f006 0901 	and.w	r9, r6, #1
{
   46d4c:	4605      	mov	r5, r0
   46d4e:	460c      	mov	r4, r1
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   46d50:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   46d54:	f1b8 0f00 	cmp.w	r8, #0
   46d58:	d001      	beq.n	46d5e <publish_encode+0x20>
   46d5a:	8a83      	ldrh	r3, [r0, #20]
   46d5c:	b34b      	cbz	r3, 46db2 <publish_encode+0x74>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   46d5e:	6827      	ldr	r7, [r4, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   46d60:	4621      	mov	r1, r4
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   46d62:	3705      	adds	r7, #5
   46d64:	6027      	str	r7, [r4, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   46d66:	4628      	mov	r0, r5
   46d68:	f7ff ff87 	bl	46c7a <pack_utf8_str>
	if (err_code != 0) {
   46d6c:	b998      	cbnz	r0, 46d96 <publish_encode+0x58>
	if (param->message.topic.qos) {
   46d6e:	7a2b      	ldrb	r3, [r5, #8]
   46d70:	b99b      	cbnz	r3, 46d9a <publish_encode+0x5c>
	buf->cur += param->message.payload.len;
   46d72:	692a      	ldr	r2, [r5, #16]
   46d74:	6823      	ldr	r3, [r4, #0]
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   46d76:	f046 0030 	orr.w	r0, r6, #48	; 0x30
	buf->cur += param->message.payload.len;
   46d7a:	4413      	add	r3, r2
   46d7c:	6023      	str	r3, [r4, #0]
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   46d7e:	ea4f 0348 	mov.w	r3, r8, lsl #1
   46d82:	ea40 00c9 	orr.w	r0, r0, r9, lsl #3
   46d86:	f003 0306 	and.w	r3, r3, #6
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   46d8a:	4622      	mov	r2, r4
   46d8c:	4639      	mov	r1, r7
   46d8e:	4318      	orrs	r0, r3
   46d90:	f7ff ff8e 	bl	46cb0 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   46d94:	b140      	cbz	r0, 46da8 <publish_encode+0x6a>
}
   46d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   46d9a:	4621      	mov	r1, r4
   46d9c:	8aa8      	ldrh	r0, [r5, #20]
   46d9e:	f7ff ff5a 	bl	46c56 <pack_uint16>
		if (err_code != 0) {
   46da2:	2800      	cmp	r0, #0
   46da4:	d0e5      	beq.n	46d72 <publish_encode+0x34>
   46da6:	e7f6      	b.n	46d96 <publish_encode+0x58>
	buf->end -= param->message.payload.len;
   46da8:	6863      	ldr	r3, [r4, #4]
   46daa:	692a      	ldr	r2, [r5, #16]
   46dac:	1a9b      	subs	r3, r3, r2
   46dae:	6063      	str	r3, [r4, #4]
	return 0;
   46db0:	e7f1      	b.n	46d96 <publish_encode+0x58>
		return -EINVAL;
   46db2:	f06f 0015 	mvn.w	r0, #21
   46db6:	e7ee      	b.n	46d96 <publish_encode+0x58>

00046db8 <publish_ack_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   46db8:	460a      	mov	r2, r1
   46dba:	8801      	ldrh	r1, [r0, #0]
   46dbc:	2040      	movs	r0, #64	; 0x40
   46dbe:	f7ff bfa8 	b.w	46d12 <mqtt_message_id_only_enc>

00046dc2 <subscribe_encode>:
{
   46dc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   46dc6:	4607      	mov	r7, r0
	if (param->message_id == 0U) {
   46dc8:	88c0      	ldrh	r0, [r0, #6]
{
   46dca:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   46dcc:	b330      	cbz	r0, 46e1c <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   46dce:	680e      	ldr	r6, [r1, #0]
   46dd0:	3605      	adds	r6, #5
   46dd2:	600e      	str	r6, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   46dd4:	f7ff ff3f 	bl	46c56 <pack_uint16>
	if (err_code != 0) {
   46dd8:	4604      	mov	r4, r0
   46dda:	bb08      	cbnz	r0, 46e20 <subscribe_encode+0x5e>
   46ddc:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < param->list_count; i++) {
   46de0:	88bb      	ldrh	r3, [r7, #4]
   46de2:	42a3      	cmp	r3, r4
   46de4:	dc06      	bgt.n	46df4 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   46de6:	462a      	mov	r2, r5
   46de8:	4631      	mov	r1, r6
}
   46dea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   46dee:	2082      	movs	r0, #130	; 0x82
   46df0:	f7ff bf5e 	b.w	46cb0 <mqtt_encode_fixed_header>
   46df4:	fb09 f804 	mul.w	r8, r9, r4
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   46df8:	6838      	ldr	r0, [r7, #0]
   46dfa:	4629      	mov	r1, r5
   46dfc:	4440      	add	r0, r8
   46dfe:	f7ff ff3c 	bl	46c7a <pack_utf8_str>
		if (err_code != 0) {
   46e02:	b980      	cbnz	r0, 46e26 <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   46e04:	683b      	ldr	r3, [r7, #0]
   46e06:	4443      	add	r3, r8
   46e08:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   46e0a:	e9d5 3100 	ldrd	r3, r1, [r5]
   46e0e:	4299      	cmp	r1, r3
   46e10:	d00b      	beq.n	46e2a <subscribe_encode+0x68>
	*(buf->cur++) = val;
   46e12:	1c59      	adds	r1, r3, #1
   46e14:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   46e16:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   46e18:	701a      	strb	r2, [r3, #0]
   46e1a:	e7e1      	b.n	46de0 <subscribe_encode+0x1e>
		return -EINVAL;
   46e1c:	f06f 0415 	mvn.w	r4, #21
}
   46e20:	4620      	mov	r0, r4
   46e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   46e26:	4604      	mov	r4, r0
   46e28:	e7fa      	b.n	46e20 <subscribe_encode+0x5e>
		return -ENOMEM;
   46e2a:	f06f 040b 	mvn.w	r4, #11
   46e2e:	e7f7      	b.n	46e20 <subscribe_encode+0x5e>

00046e30 <unsubscribe_encode>:
{
   46e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   46e34:	680d      	ldr	r5, [r1, #0]
{
   46e36:	4607      	mov	r7, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   46e38:	3505      	adds	r5, #5
   46e3a:	600d      	str	r5, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   46e3c:	88c0      	ldrh	r0, [r0, #6]
{
   46e3e:	460e      	mov	r6, r1
	err_code = pack_uint16(param->message_id, buf);
   46e40:	f7ff ff09 	bl	46c56 <pack_uint16>
	if (err_code != 0) {
   46e44:	4604      	mov	r4, r0
   46e46:	b9a8      	cbnz	r0, 46e74 <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   46e48:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   46e4c:	88bb      	ldrh	r3, [r7, #4]
   46e4e:	42a3      	cmp	r3, r4
   46e50:	dc06      	bgt.n	46e60 <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   46e52:	4632      	mov	r2, r6
   46e54:	4629      	mov	r1, r5
}
   46e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   46e5a:	20a2      	movs	r0, #162	; 0xa2
   46e5c:	f7ff bf28 	b.w	46cb0 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   46e60:	6838      	ldr	r0, [r7, #0]
   46e62:	4631      	mov	r1, r6
   46e64:	fb08 0004 	mla	r0, r8, r4, r0
   46e68:	f7ff ff07 	bl	46c7a <pack_utf8_str>
		if (err_code != 0) {
   46e6c:	b908      	cbnz	r0, 46e72 <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   46e6e:	3401      	adds	r4, #1
   46e70:	e7ec      	b.n	46e4c <unsubscribe_encode+0x1c>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   46e72:	4604      	mov	r4, r0
}
   46e74:	4620      	mov	r0, r4
   46e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00046e7a <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, u32_t length)
{
   46e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   46e7c:	460d      	mov	r5, r1
	int len;

	/* Calculate how much data we need to read from the transport,
	 * given the already buffered data.
	 */
	remaining = length - (buf->end - buf->cur);
   46e7e:	e9d1 4100 	ldrd	r4, r1, [r1]
   46e82:	1b0c      	subs	r4, r1, r4
   46e84:	1b14      	subs	r4, r2, r4
	if (remaining <= 0) {
   46e86:	2c00      	cmp	r4, #0
{
   46e88:	4606      	mov	r6, r0
	if (remaining <= 0) {
   46e8a:	dc01      	bgt.n	46e90 <mqtt_read_message_chunk+0x16>
		return 0;
   46e8c:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   46e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (buf->end + remaining > client->rx_buf + client->rx_buf_size) {
   46e90:	190a      	adds	r2, r1, r4
   46e92:	e9d0 3719 	ldrd	r3, r7, [r0, #100]	; 0x64
   46e96:	443b      	add	r3, r7
   46e98:	429a      	cmp	r2, r3
   46e9a:	d811      	bhi.n	46ec0 <mqtt_read_message_chunk+0x46>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   46e9c:	2300      	movs	r3, #0
   46e9e:	4622      	mov	r2, r4
   46ea0:	f7dc fd68 	bl	23974 <mqtt_transport_read>
	if (len < 0) {
   46ea4:	2800      	cmp	r0, #0
   46ea6:	dbf2      	blt.n	46e8e <mqtt_read_message_chunk+0x14>
	if (len == 0) {
   46ea8:	d00d      	beq.n	46ec6 <mqtt_read_message_chunk+0x4c>
	client->internal.rx_buf_datalen += len;
   46eaa:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   46eac:	4284      	cmp	r4, r0
	client->internal.rx_buf_datalen += len;
   46eae:	4403      	add	r3, r0
   46eb0:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   46eb2:	686b      	ldr	r3, [r5, #4]
   46eb4:	4403      	add	r3, r0
   46eb6:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   46eb8:	dde8      	ble.n	46e8c <mqtt_read_message_chunk+0x12>
		return -EAGAIN;
   46eba:	f06f 000a 	mvn.w	r0, #10
   46ebe:	e7e6      	b.n	46e8e <mqtt_read_message_chunk+0x14>
		return -ENOMEM;
   46ec0:	f06f 000b 	mvn.w	r0, #11
   46ec4:	e7e3      	b.n	46e8e <mqtt_read_message_chunk+0x14>
		return -ENOTCONN;
   46ec6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   46eca:	e7e0      	b.n	46e8e <mqtt_read_message_chunk+0x14>

00046ecc <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   46ecc:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	u8_t type_and_flags;
	u32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   46ece:	6e43      	ldr	r3, [r0, #100]	; 0x64
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   46ed0:	69c2      	ldr	r2, [r0, #28]
{
   46ed2:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   46ed4:	9302      	str	r3, [sp, #8]
{
   46ed6:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   46ed8:	4413      	add	r3, r2
	u8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   46eda:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   46edc:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   46ede:	a902      	add	r1, sp, #8
   46ee0:	4628      	mov	r0, r5
   46ee2:	f7ff ffca 	bl	46e7a <mqtt_read_message_chunk>
		if (err_code < 0) {
   46ee6:	1e04      	subs	r4, r0, #0
   46ee8:	db2b      	blt.n	46f42 <mqtt_handle_rx+0x76>
		buf->cur = client->rx_buf;
   46eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   46eec:	aa01      	add	r2, sp, #4
   46eee:	f10d 0103 	add.w	r1, sp, #3
   46ef2:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   46ef4:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   46ef6:	f7ff fe2c 	bl	46b52 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   46efa:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   46efe:	4604      	mov	r4, r0
		chunk_size = 1U;
   46f00:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   46f04:	d0eb      	beq.n	46ede <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   46f06:	2800      	cmp	r0, #0
   46f08:	db1f      	blt.n	46f4a <mqtt_handle_rx+0x7e>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   46f0a:	f89d 6003 	ldrb.w	r6, [sp, #3]
   46f0e:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   46f12:	2b30      	cmp	r3, #48	; 0x30
   46f14:	d11c      	bne.n	46f50 <mqtt_handle_rx+0x84>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(u16_t));
   46f16:	2202      	movs	r2, #2
   46f18:	a902      	add	r1, sp, #8
   46f1a:	4628      	mov	r0, r5
   46f1c:	f7ff ffad 	bl	46e7a <mqtt_read_message_chunk>
	if (err_code < 0) {
   46f20:	1e04      	subs	r4, r0, #0
   46f22:	db0e      	blt.n	46f42 <mqtt_handle_rx+0x76>
   46f24:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   46f26:	f016 0f06 	tst.w	r6, #6
   46f2a:	881a      	ldrh	r2, [r3, #0]
   46f2c:	ba52      	rev16	r2, r2
   46f2e:	b292      	uxth	r2, r2
	variable_header_length += sizeof(u16_t);
   46f30:	bf0c      	ite	eq
   46f32:	3202      	addeq	r2, #2
		variable_header_length += sizeof(u16_t);
   46f34:	3204      	addne	r2, #4
		err_code = mqtt_read_publish_var_header(client, type_and_flags,
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   46f36:	a902      	add	r1, sp, #8
   46f38:	4628      	mov	r0, r5
   46f3a:	f7ff ff9e 	bl	46e7a <mqtt_read_message_chunk>
	}

	if (err_code < 0) {
   46f3e:	1e04      	subs	r4, r0, #0
   46f40:	da08      	bge.n	46f54 <mqtt_handle_rx+0x88>
		return (err_code == -EAGAIN) ? 0 : err_code;
   46f42:	f114 0f0b 	cmn.w	r4, #11
   46f46:	d100      	bne.n	46f4a <mqtt_handle_rx+0x7e>
   46f48:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   46f4a:	4620      	mov	r0, r4
   46f4c:	b00c      	add	sp, #48	; 0x30
   46f4e:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   46f50:	9a01      	ldr	r2, [sp, #4]
   46f52:	e7f0      	b.n	46f36 <mqtt_handle_rx+0x6a>
	evt.result = 0;
   46f54:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   46f56:	f89d 0003 	ldrb.w	r0, [sp, #3]
   46f5a:	9901      	ldr	r1, [sp, #4]
	switch (type_and_flags & 0xF0) {
   46f5c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   46f60:	2b50      	cmp	r3, #80	; 0x50
	evt.result = 0;
   46f62:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   46f64:	d04a      	beq.n	46ffc <mqtt_handle_rx+0x130>
   46f66:	d81e      	bhi.n	46fa6 <mqtt_handle_rx+0xda>
   46f68:	2b30      	cmp	r3, #48	; 0x30
   46f6a:	d031      	beq.n	46fd0 <mqtt_handle_rx+0x104>
   46f6c:	2b40      	cmp	r3, #64	; 0x40
   46f6e:	d03b      	beq.n	46fe8 <mqtt_handle_rx+0x11c>
   46f70:	2b20      	cmp	r3, #32
   46f72:	d11d      	bne.n	46fb0 <mqtt_handle_rx+0xe4>
		evt.type = MQTT_EVT_CONNACK;
   46f74:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   46f78:	a902      	add	r1, sp, #8
   46f7a:	aa05      	add	r2, sp, #20
   46f7c:	4628      	mov	r0, r5
   46f7e:	f7ff fdf9 	bl	46b74 <connect_ack_decode>
		if (err_code == 0) {
   46f82:	4604      	mov	r4, r0
   46f84:	2800      	cmp	r0, #0
   46f86:	d137      	bne.n	46ff8 <mqtt_handle_rx+0x12c>
			if (evt.param.connack.return_code ==
   46f88:	f89d 2015 	ldrb.w	r2, [sp, #21]
   46f8c:	b91a      	cbnz	r2, 46f96 <mqtt_handle_rx+0xca>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   46f8e:	69ab      	ldr	r3, [r5, #24]
   46f90:	f043 0304 	orr.w	r3, r3, #4
   46f94:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   46f96:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   46f98:	a904      	add	r1, sp, #16
   46f9a:	4628      	mov	r0, r5
   46f9c:	f000 f869 	bl	47072 <event_notify>
	if (err_code < 0) {
   46fa0:	2c00      	cmp	r4, #0
   46fa2:	da05      	bge.n	46fb0 <mqtt_handle_rx+0xe4>
   46fa4:	e7d1      	b.n	46f4a <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   46fa6:	2b70      	cmp	r3, #112	; 0x70
   46fa8:	d038      	beq.n	4701c <mqtt_handle_rx+0x150>
   46faa:	d804      	bhi.n	46fb6 <mqtt_handle_rx+0xea>
   46fac:	2b60      	cmp	r3, #96	; 0x60
   46fae:	d02d      	beq.n	4700c <mqtt_handle_rx+0x140>
	client->internal.rx_buf_datalen = 0U;
   46fb0:	2400      	movs	r4, #0
   46fb2:	61ec      	str	r4, [r5, #28]
	return 0;
   46fb4:	e7c9      	b.n	46f4a <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   46fb6:	2b90      	cmp	r3, #144	; 0x90
   46fb8:	d038      	beq.n	4702c <mqtt_handle_rx+0x160>
   46fba:	2bb0      	cmp	r3, #176	; 0xb0
   46fbc:	d1f8      	bne.n	46fb0 <mqtt_handle_rx+0xe4>
		evt.type = MQTT_EVT_UNSUBACK;
   46fbe:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   46fc0:	a905      	add	r1, sp, #20
   46fc2:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   46fc6:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   46fca:	f7ff fe42 	bl	46c52 <unsubscribe_ack_decode>
   46fce:	e012      	b.n	46ff6 <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_PUBLISH;
   46fd0:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   46fd2:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   46fd4:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   46fd8:	ab05      	add	r3, sp, #20
   46fda:	f7ff fde6 	bl	46baa <publish_decode>
		client->internal.remaining_payload =
   46fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   46fe0:	4604      	mov	r4, r0
		evt.result = err_code;
   46fe2:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   46fe4:	622b      	str	r3, [r5, #32]
   46fe6:	e7d7      	b.n	46f98 <mqtt_handle_rx+0xcc>
		evt.type = MQTT_EVT_PUBACK;
   46fe8:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   46fea:	a905      	add	r1, sp, #20
   46fec:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   46fee:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   46ff2:	f7ff fe16 	bl	46c22 <publish_ack_decode>
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   46ff6:	4604      	mov	r4, r0
		evt.result = err_code;
   46ff8:	940b      	str	r4, [sp, #44]	; 0x2c
   46ffa:	e7cd      	b.n	46f98 <mqtt_handle_rx+0xcc>
		evt.type = MQTT_EVT_PUBREC;
   46ffc:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   46ffe:	a905      	add	r1, sp, #20
   47000:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   47002:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   47006:	f7ff fe0e 	bl	46c26 <publish_receive_decode>
   4700a:	e7f4      	b.n	46ff6 <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_PUBREL;
   4700c:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   4700e:	a905      	add	r1, sp, #20
   47010:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   47012:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   47016:	f7ff fe08 	bl	46c2a <publish_release_decode>
   4701a:	e7ec      	b.n	46ff6 <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_PUBCOMP;
   4701c:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   4701e:	a905      	add	r1, sp, #20
   47020:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   47022:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   47026:	f7ff fe02 	bl	46c2e <publish_complete_decode>
   4702a:	e7e4      	b.n	46ff6 <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_SUBACK;
   4702c:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   4702e:	a905      	add	r1, sp, #20
   47030:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   47032:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   47036:	f7ff fdfc 	bl	46c32 <subscribe_ack_decode>
   4703a:	e7dc      	b.n	46ff6 <mqtt_handle_rx+0x12a>

0004703c <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   4703c:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   4703e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   47040:	f7dc fb64 	bl	2370c <close>
	if (ret < 0) {
   47044:	2800      	cmp	r0, #0
   47046:	da04      	bge.n	47052 <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   47048:	f7ff fd3c 	bl	46ac4 <__errno>
   4704c:	6800      	ldr	r0, [r0, #0]
   4704e:	4240      	negs	r0, r0
	}

	return 0;
}
   47050:	bd08      	pop	{r3, pc}
	return 0;
   47052:	2000      	movs	r0, #0
   47054:	e7fc      	b.n	47050 <mqtt_client_tcp_disconnect+0x14>

00047056 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   47056:	b538      	push	{r3, r4, r5, lr}
   47058:	4604      	mov	r4, r0
   4705a:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   4705c:	6f02      	ldr	r2, [r0, #112]	; 0x70
   4705e:	2100      	movs	r1, #0
   47060:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   47062:	f7f8 fe73 	bl	3fd4c <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   47066:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	buf->end = client->tx_buf + client->tx_buf_size;
   47068:	6f22      	ldr	r2, [r4, #112]	; 0x70
	buf->cur = client->tx_buf;
   4706a:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   4706c:	4413      	add	r3, r2
   4706e:	606b      	str	r3, [r5, #4]
}
   47070:	bd38      	pop	{r3, r4, r5, pc}

00047072 <event_notify>:
	/* Reset internal state. */
	client_reset(client);
}

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   47072:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   47074:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   47076:	4604      	mov	r4, r0
   47078:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   4707a:	b153      	cbz	r3, 47092 <event_notify+0x20>
		mqtt_mutex_unlock(client);
   4707c:	f7dc fc90 	bl	239a0 <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   47080:	4620      	mov	r0, r4
   47082:	6e23      	ldr	r3, [r4, #96]	; 0x60
   47084:	4629      	mov	r1, r5
   47086:	4798      	blx	r3

		mqtt_mutex_lock(client);
   47088:	4620      	mov	r0, r4
	}
}
   4708a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   4708e:	f7dc bcb3 	b.w	239f8 <mqtt_mutex_lock>
}
   47092:	bd38      	pop	{r3, r4, r5, pc}

00047094 <client_disconnect>:

static void client_disconnect(struct mqtt_client *client, int result)
{
   47094:	b530      	push	{r4, r5, lr}
   47096:	4604      	mov	r4, r0
   47098:	b089      	sub	sp, #36	; 0x24
   4709a:	460d      	mov	r5, r1
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   4709c:	f7dc fc76 	bl	2398c <mqtt_transport_disconnect>
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED) ||
   470a0:	69a3      	ldr	r3, [r4, #24]
	event_notify(client, &evt);
   470a2:	4669      	mov	r1, sp
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED) ||
   470a4:	f013 030c 	ands.w	r3, r3, #12
		evt.type = MQTT_EVT_DISCONNECT;
   470a8:	bf12      	itee	ne
   470aa:	2301      	movne	r3, #1
		evt.type = MQTT_EVT_CONNACK;
   470ac:	f88d 3000 	strbeq.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   470b0:	f06f 036e 	mvneq.w	r3, #110	; 0x6e
	event_notify(client, &evt);
   470b4:	4620      	mov	r0, r4
		evt.type = MQTT_EVT_DISCONNECT;
   470b6:	bf16      	itet	ne
   470b8:	f88d 3000 	strbne.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   470bc:	9307      	streq	r3, [sp, #28]
		evt.result = result;
   470be:	9507      	strne	r5, [sp, #28]
	event_notify(client, &evt);
   470c0:	f7ff ffd7 	bl	47072 <event_notify>
	MQTT_STATE_INIT(client);
   470c4:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   470c6:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   470ca:	e9c4 3307 	strd	r3, r3, [r4, #28]
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	disconnect_event_notify(client, result);
}
   470ce:	b009      	add	sp, #36	; 0x24
   470d0:	bd30      	pop	{r4, r5, pc}

000470d2 <client_write>:
	return err_code;
}

static int client_write(struct mqtt_client *client, const u8_t *data,
			u32_t datalen)
{
   470d2:	b538      	push	{r3, r4, r5, lr}
   470d4:	4605      	mov	r5, r0
	int err_code;

	MQTT_TRC("[%p]: Transport writing %d bytes.", client, datalen);

	err_code = mqtt_transport_write(client, data, datalen);
   470d6:	f7dc fc41 	bl	2395c <mqtt_transport_write>
	if (err_code < 0) {
   470da:	1e04      	subs	r4, r0, #0
   470dc:	da05      	bge.n	470ea <client_write+0x18>
		MQTT_TRC("TCP write failed, errno = %d, "
			 "closing connection", errno);
		client_disconnect(client, err_code);
   470de:	4621      	mov	r1, r4
   470e0:	4628      	mov	r0, r5
   470e2:	f7ff ffd7 	bl	47094 <client_disconnect>

	MQTT_TRC("[%p]: Transport write complete.", client);
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();

	return 0;
}
   470e6:	4620      	mov	r0, r4
   470e8:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_get();
   470ea:	f001 fd7f 	bl	48bec <z_impl_k_uptime_get>
	return 0;
   470ee:	2400      	movs	r4, #0
	return (u32_t)k_uptime_get();
   470f0:	6168      	str	r0, [r5, #20]
   470f2:	e7f8      	b.n	470e6 <client_write+0x14>

000470f4 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   470f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   470f8:	460f      	mov	r7, r1
   470fa:	4690      	mov	r8, r2
   470fc:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   470fe:	4605      	mov	r5, r0
   47100:	b320      	cbz	r0, 4714c <read_publish_payload+0x58>

	mqtt_mutex_lock(client);
   47102:	f7dc fc79 	bl	239f8 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   47106:	6a2c      	ldr	r4, [r5, #32]
   47108:	b1b4      	cbz	r4, 47138 <read_publish_payload+0x44>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   4710a:	4544      	cmp	r4, r8
   4710c:	4622      	mov	r2, r4
   4710e:	4633      	mov	r3, r6
   47110:	bf28      	it	cs
   47112:	4642      	movcs	r2, r8
   47114:	4639      	mov	r1, r7
   47116:	4628      	mov	r0, r5
   47118:	f7dc fc2c 	bl	23974 <mqtt_transport_read>
   4711c:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   4711e:	b916      	cbnz	r6, 47126 <read_publish_payload+0x32>
   47120:	f110 0f0b 	cmn.w	r0, #11
   47124:	d008      	beq.n	47138 <read_publish_payload+0x44>
		goto exit;
	}

	if (ret <= 0) {
   47126:	2c00      	cmp	r4, #0
   47128:	dc0c      	bgt.n	47144 <read_publish_payload+0x50>
		if (ret == 0) {
			ret = -ENOTCONN;
   4712a:	bf08      	it	eq
   4712c:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret);
   47130:	4628      	mov	r0, r5
   47132:	4621      	mov	r1, r4
   47134:	f7ff ffae 	bl	47094 <client_disconnect>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   47138:	4628      	mov	r0, r5
   4713a:	f7dc fc31 	bl	239a0 <mqtt_mutex_unlock>

	return ret;
}
   4713e:	4620      	mov	r0, r4
   47140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	client->internal.remaining_payload -= ret;
   47144:	6a2b      	ldr	r3, [r5, #32]
   47146:	1b1b      	subs	r3, r3, r4
   47148:	622b      	str	r3, [r5, #32]
   4714a:	e7f5      	b.n	47138 <read_publish_payload+0x44>
	NULL_PARAM_CHECK(client);
   4714c:	f06f 0415 	mvn.w	r4, #21
   47150:	e7f5      	b.n	4713e <read_publish_payload+0x4a>

00047152 <mqtt_client_init>:
{
   47152:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   47154:	4604      	mov	r4, r0
   47156:	b1a8      	cbz	r0, 47184 <mqtt_client_init+0x32>
   47158:	2278      	movs	r2, #120	; 0x78
   4715a:	2100      	movs	r1, #0
   4715c:	f7f8 fdf6 	bl	3fd4c <memset>
	MQTT_STATE_INIT(client);
   47160:	2300      	movs	r3, #0
   47162:	61a3      	str	r3, [r4, #24]
	z_impl_k_mutex_init(mutex);
   47164:	4620      	mov	r0, r4
   47166:	f001 fc48 	bl	489fa <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   4716a:	2304      	movs	r3, #4
   4716c:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	client->clean_session = 1U;
   47170:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   47174:	f043 0302 	orr.w	r3, r3, #2
   47178:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	client->keepalive = MQTT_KEEPALIVE;
   4717c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   47180:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
}
   47184:	bd10      	pop	{r4, pc}

00047186 <mqtt_connect>:
{
   47186:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   47188:	4604      	mov	r4, r0
   4718a:	2800      	cmp	r0, #0
   4718c:	d03a      	beq.n	47204 <mqtt_connect+0x7e>
	NULL_PARAM_CHECK(client->client_id.utf8);
   4718e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   47190:	2b00      	cmp	r3, #0
   47192:	d037      	beq.n	47204 <mqtt_connect+0x7e>
	mqtt_mutex_lock(client);
   47194:	f7dc fc30 	bl	239f8 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   47198:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   4719a:	b383      	cbz	r3, 471fe <mqtt_connect+0x78>
   4719c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   4719e:	b373      	cbz	r3, 471fe <mqtt_connect+0x78>
	err_code = mqtt_transport_connect(client);
   471a0:	4620      	mov	r0, r4
   471a2:	f7dc fbd3 	bl	2394c <mqtt_transport_connect>
	if (err_code < 0) {
   471a6:	1e05      	subs	r5, r0, #0
   471a8:	db23      	blt.n	471f2 <mqtt_connect+0x6c>
	tx_buf_init(client, &packet);
   471aa:	4669      	mov	r1, sp
   471ac:	4620      	mov	r0, r4
   471ae:	f7ff ff52 	bl	47056 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   471b2:	69a3      	ldr	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   471b4:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   471b6:	f043 0302 	orr.w	r3, r3, #2
   471ba:	61a3      	str	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   471bc:	4620      	mov	r0, r4
   471be:	f7dc fa01 	bl	235c4 <connect_request_encode>
	if (err_code < 0) {
   471c2:	1e05      	subs	r5, r0, #0
   471c4:	db11      	blt.n	471ea <mqtt_connect+0x64>
	err_code = mqtt_transport_write(client, packet.cur,
   471c6:	e9dd 1200 	ldrd	r1, r2, [sp]
   471ca:	4620      	mov	r0, r4
   471cc:	1a52      	subs	r2, r2, r1
   471ce:	f7dc fbc5 	bl	2395c <mqtt_transport_write>
	if (err_code < 0) {
   471d2:	1e05      	subs	r5, r0, #0
   471d4:	db09      	blt.n	471ea <mqtt_connect+0x64>
	return z_impl_k_uptime_get();
   471d6:	f001 fd09 	bl	48bec <z_impl_k_uptime_get>
	return 0;
   471da:	2500      	movs	r5, #0
   471dc:	6160      	str	r0, [r4, #20]
	mqtt_mutex_unlock(client);
   471de:	4620      	mov	r0, r4
   471e0:	f7dc fbde 	bl	239a0 <mqtt_mutex_unlock>
}
   471e4:	4628      	mov	r0, r5
   471e6:	b003      	add	sp, #12
   471e8:	bd30      	pop	{r4, r5, pc}
	client_disconnect(client, err_code);
   471ea:	4629      	mov	r1, r5
   471ec:	4620      	mov	r0, r4
   471ee:	f7ff ff51 	bl	47094 <client_disconnect>
	MQTT_STATE_INIT(client);
   471f2:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   471f4:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   471f8:	e9c4 3307 	strd	r3, r3, [r4, #28]
   471fc:	e7ef      	b.n	471de <mqtt_connect+0x58>
		err_code = -ENOMEM;
   471fe:	f06f 050b 	mvn.w	r5, #11
   47202:	e7f6      	b.n	471f2 <mqtt_connect+0x6c>
	NULL_PARAM_CHECK(client);
   47204:	f06f 0515 	mvn.w	r5, #21
   47208:	e7ec      	b.n	471e4 <mqtt_connect+0x5e>

0004720a <mqtt_publish>:
{
   4720a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4720c:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   4720e:	4605      	mov	r5, r0
   47210:	b330      	cbz	r0, 47260 <mqtt_publish+0x56>
	NULL_PARAM_CHECK(param);
   47212:	b329      	cbz	r1, 47260 <mqtt_publish+0x56>
	mqtt_mutex_lock(client);
   47214:	f7dc fbf0 	bl	239f8 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   47218:	4669      	mov	r1, sp
   4721a:	4628      	mov	r0, r5
   4721c:	f7ff ff1b 	bl	47056 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   47220:	69ab      	ldr	r3, [r5, #24]
   47222:	075b      	lsls	r3, r3, #29
   47224:	d519      	bpl.n	4725a <mqtt_publish+0x50>
	err_code = publish_encode(param, &packet);
   47226:	4669      	mov	r1, sp
   47228:	4630      	mov	r0, r6
   4722a:	f7ff fd88 	bl	46d3e <publish_encode>
	if (err_code < 0) {
   4722e:	1e04      	subs	r4, r0, #0
   47230:	db0d      	blt.n	4724e <mqtt_publish+0x44>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   47232:	e9dd 1200 	ldrd	r1, r2, [sp]
   47236:	4628      	mov	r0, r5
   47238:	1a52      	subs	r2, r2, r1
   4723a:	f7ff ff4a 	bl	470d2 <client_write>
	if (err_code < 0) {
   4723e:	1e04      	subs	r4, r0, #0
   47240:	db05      	blt.n	4724e <mqtt_publish+0x44>
	err_code = client_write(client, param->message.payload.data,
   47242:	e9d6 1203 	ldrd	r1, r2, [r6, #12]
   47246:	4628      	mov	r0, r5
   47248:	f7ff ff43 	bl	470d2 <client_write>
   4724c:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   4724e:	4628      	mov	r0, r5
   47250:	f7dc fba6 	bl	239a0 <mqtt_mutex_unlock>
}
   47254:	4620      	mov	r0, r4
   47256:	b002      	add	sp, #8
   47258:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTCONN;
   4725a:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   4725e:	e7f6      	b.n	4724e <mqtt_publish+0x44>
	NULL_PARAM_CHECK(client);
   47260:	f06f 0415 	mvn.w	r4, #21
   47264:	e7f6      	b.n	47254 <mqtt_publish+0x4a>

00047266 <mqtt_publish_qos1_ack>:
{
   47266:	b537      	push	{r0, r1, r2, r4, r5, lr}
   47268:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   4726a:	4605      	mov	r5, r0
   4726c:	b1f8      	cbz	r0, 472ae <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   4726e:	b1f1      	cbz	r1, 472ae <mqtt_publish_qos1_ack+0x48>
	mqtt_mutex_lock(client);
   47270:	f7dc fbc2 	bl	239f8 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   47274:	4669      	mov	r1, sp
   47276:	4628      	mov	r0, r5
   47278:	f7ff feed 	bl	47056 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   4727c:	69ab      	ldr	r3, [r5, #24]
   4727e:	075b      	lsls	r3, r3, #29
   47280:	d512      	bpl.n	472a8 <mqtt_publish_qos1_ack+0x42>
	err_code = publish_ack_encode(param, &packet);
   47282:	4620      	mov	r0, r4
   47284:	4669      	mov	r1, sp
   47286:	f7ff fd97 	bl	46db8 <publish_ack_encode>
	if (err_code < 0) {
   4728a:	1e04      	subs	r4, r0, #0
   4728c:	db06      	blt.n	4729c <mqtt_publish_qos1_ack+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   4728e:	e9dd 1200 	ldrd	r1, r2, [sp]
   47292:	4628      	mov	r0, r5
   47294:	1a52      	subs	r2, r2, r1
   47296:	f7ff ff1c 	bl	470d2 <client_write>
   4729a:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   4729c:	4628      	mov	r0, r5
   4729e:	f7dc fb7f 	bl	239a0 <mqtt_mutex_unlock>
}
   472a2:	4620      	mov	r0, r4
   472a4:	b003      	add	sp, #12
   472a6:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   472a8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   472ac:	e7f6      	b.n	4729c <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   472ae:	f06f 0415 	mvn.w	r4, #21
   472b2:	e7f6      	b.n	472a2 <mqtt_publish_qos1_ack+0x3c>

000472b4 <mqtt_disconnect>:
{
   472b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   472b6:	4604      	mov	r4, r0
   472b8:	b300      	cbz	r0, 472fc <mqtt_disconnect+0x48>
	mqtt_mutex_lock(client);
   472ba:	f7dc fb9d 	bl	239f8 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   472be:	4669      	mov	r1, sp
   472c0:	4620      	mov	r0, r4
   472c2:	f7ff fec8 	bl	47056 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   472c6:	69a3      	ldr	r3, [r4, #24]
   472c8:	075b      	lsls	r3, r3, #29
   472ca:	d514      	bpl.n	472f6 <mqtt_disconnect+0x42>
	err_code = disconnect_encode(&packet);
   472cc:	4668      	mov	r0, sp
   472ce:	f7dc f9f9 	bl	236c4 <disconnect_encode>
	if (err_code < 0) {
   472d2:	1e05      	subs	r5, r0, #0
   472d4:	db09      	blt.n	472ea <mqtt_disconnect+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   472d6:	e9dd 1200 	ldrd	r1, r2, [sp]
   472da:	4620      	mov	r0, r4
   472dc:	1a52      	subs	r2, r2, r1
   472de:	f7ff fef8 	bl	470d2 <client_write>
	if (err_code < 0) {
   472e2:	1e05      	subs	r5, r0, #0
   472e4:	db01      	blt.n	472ea <mqtt_disconnect+0x36>
	MQTT_SET_STATE_EXCLUSIVE(client, MQTT_STATE_DISCONNECTING);
   472e6:	2308      	movs	r3, #8
   472e8:	61a3      	str	r3, [r4, #24]
	mqtt_mutex_unlock(client);
   472ea:	4620      	mov	r0, r4
   472ec:	f7dc fb58 	bl	239a0 <mqtt_mutex_unlock>
}
   472f0:	4628      	mov	r0, r5
   472f2:	b003      	add	sp, #12
   472f4:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   472f6:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   472fa:	e7f6      	b.n	472ea <mqtt_disconnect+0x36>
	NULL_PARAM_CHECK(client);
   472fc:	f06f 0515 	mvn.w	r5, #21
   47300:	e7f6      	b.n	472f0 <mqtt_disconnect+0x3c>

00047302 <mqtt_subscribe>:
{
   47302:	b537      	push	{r0, r1, r2, r4, r5, lr}
   47304:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   47306:	4605      	mov	r5, r0
   47308:	b1f8      	cbz	r0, 4734a <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   4730a:	b1f1      	cbz	r1, 4734a <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   4730c:	f7dc fb74 	bl	239f8 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   47310:	4669      	mov	r1, sp
   47312:	4628      	mov	r0, r5
   47314:	f7ff fe9f 	bl	47056 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   47318:	69ab      	ldr	r3, [r5, #24]
   4731a:	075b      	lsls	r3, r3, #29
   4731c:	d512      	bpl.n	47344 <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   4731e:	4620      	mov	r0, r4
   47320:	4669      	mov	r1, sp
   47322:	f7ff fd4e 	bl	46dc2 <subscribe_encode>
	if (err_code < 0) {
   47326:	1e04      	subs	r4, r0, #0
   47328:	db06      	blt.n	47338 <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   4732a:	e9dd 1200 	ldrd	r1, r2, [sp]
   4732e:	4628      	mov	r0, r5
   47330:	1a52      	subs	r2, r2, r1
   47332:	f7ff fece 	bl	470d2 <client_write>
   47336:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   47338:	4628      	mov	r0, r5
   4733a:	f7dc fb31 	bl	239a0 <mqtt_mutex_unlock>
}
   4733e:	4620      	mov	r0, r4
   47340:	b003      	add	sp, #12
   47342:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   47344:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   47348:	e7f6      	b.n	47338 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   4734a:	f06f 0415 	mvn.w	r4, #21
   4734e:	e7f6      	b.n	4733e <mqtt_subscribe+0x3c>

00047350 <mqtt_unsubscribe>:
{
   47350:	b537      	push	{r0, r1, r2, r4, r5, lr}
   47352:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   47354:	4605      	mov	r5, r0
   47356:	b1f8      	cbz	r0, 47398 <mqtt_unsubscribe+0x48>
	NULL_PARAM_CHECK(param);
   47358:	b1f1      	cbz	r1, 47398 <mqtt_unsubscribe+0x48>
	mqtt_mutex_lock(client);
   4735a:	f7dc fb4d 	bl	239f8 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   4735e:	4669      	mov	r1, sp
   47360:	4628      	mov	r0, r5
   47362:	f7ff fe78 	bl	47056 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   47366:	69ab      	ldr	r3, [r5, #24]
   47368:	075b      	lsls	r3, r3, #29
   4736a:	d512      	bpl.n	47392 <mqtt_unsubscribe+0x42>
	err_code = unsubscribe_encode(param, &packet);
   4736c:	4620      	mov	r0, r4
   4736e:	4669      	mov	r1, sp
   47370:	f7ff fd5e 	bl	46e30 <unsubscribe_encode>
	if (err_code < 0) {
   47374:	1e04      	subs	r4, r0, #0
   47376:	db06      	blt.n	47386 <mqtt_unsubscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   47378:	e9dd 1200 	ldrd	r1, r2, [sp]
   4737c:	4628      	mov	r0, r5
   4737e:	1a52      	subs	r2, r2, r1
   47380:	f7ff fea7 	bl	470d2 <client_write>
   47384:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   47386:	4628      	mov	r0, r5
   47388:	f7dc fb0a 	bl	239a0 <mqtt_mutex_unlock>
}
   4738c:	4620      	mov	r0, r4
   4738e:	b003      	add	sp, #12
   47390:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   47392:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   47396:	e7f6      	b.n	47386 <mqtt_unsubscribe+0x36>
	NULL_PARAM_CHECK(client);
   47398:	f06f 0415 	mvn.w	r4, #21
   4739c:	e7f6      	b.n	4738c <mqtt_unsubscribe+0x3c>

0004739e <mqtt_ping>:
{
   4739e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   473a0:	4605      	mov	r5, r0
   473a2:	b1e8      	cbz	r0, 473e0 <mqtt_ping+0x42>
	mqtt_mutex_lock(client);
   473a4:	f7dc fb28 	bl	239f8 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   473a8:	4669      	mov	r1, sp
   473aa:	4628      	mov	r0, r5
   473ac:	f7ff fe53 	bl	47056 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   473b0:	69ab      	ldr	r3, [r5, #24]
   473b2:	075b      	lsls	r3, r3, #29
   473b4:	d511      	bpl.n	473da <mqtt_ping+0x3c>
	err_code = ping_request_encode(&packet);
   473b6:	4668      	mov	r0, sp
   473b8:	f7dc f996 	bl	236e8 <ping_request_encode>
	if (err_code < 0) {
   473bc:	1e04      	subs	r4, r0, #0
   473be:	db06      	blt.n	473ce <mqtt_ping+0x30>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   473c0:	e9dd 1200 	ldrd	r1, r2, [sp]
   473c4:	4628      	mov	r0, r5
   473c6:	1a52      	subs	r2, r2, r1
   473c8:	f7ff fe83 	bl	470d2 <client_write>
   473cc:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   473ce:	4628      	mov	r0, r5
   473d0:	f7dc fae6 	bl	239a0 <mqtt_mutex_unlock>
}
   473d4:	4620      	mov	r0, r4
   473d6:	b003      	add	sp, #12
   473d8:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   473da:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   473de:	e7f6      	b.n	473ce <mqtt_ping+0x30>
	NULL_PARAM_CHECK(client);
   473e0:	f06f 0415 	mvn.w	r4, #21
   473e4:	e7f6      	b.n	473d4 <mqtt_ping+0x36>

000473e6 <mqtt_live>:
{
   473e6:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   473e8:	4604      	mov	r4, r0
   473ea:	b308      	cbz	r0, 47430 <mqtt_live+0x4a>
	mqtt_mutex_lock(client);
   473ec:	f7dc fb04 	bl	239f8 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_DISCONNECTING)) {
   473f0:	69a5      	ldr	r5, [r4, #24]
   473f2:	f015 0508 	ands.w	r5, r5, #8
   473f6:	d008      	beq.n	4740a <mqtt_live+0x24>
		client_disconnect(client, 0);
   473f8:	2100      	movs	r1, #0
   473fa:	4620      	mov	r0, r4
   473fc:	f7ff fe4a 	bl	47094 <client_disconnect>
	mqtt_mutex_unlock(client);
   47400:	4620      	mov	r0, r4
   47402:	f7dc facd 	bl	239a0 <mqtt_mutex_unlock>
	return 0;
   47406:	2000      	movs	r0, #0
}
   47408:	bd70      	pop	{r4, r5, r6, pc}
		elapsed_time = mqtt_elapsed_time_in_ms_get(
   4740a:	6966      	ldr	r6, [r4, #20]
   4740c:	f001 fbee 	bl	48bec <z_impl_k_uptime_get>
		if ((client->keepalive > 0) &&
   47410:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
 */
static inline u32_t mqtt_elapsed_time_in_ms_get(u32_t last_activity)
{
	s32_t diff = k_uptime_get_32() - last_activity;

	if (diff < 0) {
   47414:	1b80      	subs	r0, r0, r6
   47416:	bf58      	it	pl
   47418:	4605      	movpl	r5, r0
   4741a:	2a00      	cmp	r2, #0
   4741c:	d0f0      	beq.n	47400 <mqtt_live+0x1a>
		    (elapsed_time >= (client->keepalive * 1000))) {
   4741e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   47422:	4353      	muls	r3, r2
		if ((client->keepalive > 0) &&
   47424:	42ab      	cmp	r3, r5
   47426:	d8eb      	bhi.n	47400 <mqtt_live+0x1a>
			(void)mqtt_ping(client);
   47428:	4620      	mov	r0, r4
   4742a:	f7ff ffb8 	bl	4739e <mqtt_ping>
   4742e:	e7e7      	b.n	47400 <mqtt_live+0x1a>
	NULL_PARAM_CHECK(client);
   47430:	f06f 0015 	mvn.w	r0, #21
   47434:	e7e8      	b.n	47408 <mqtt_live+0x22>

00047436 <mqtt_input>:
{
   47436:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   47438:	4605      	mov	r5, r0
   4743a:	b310      	cbz	r0, 47482 <mqtt_input+0x4c>
	mqtt_mutex_lock(client);
   4743c:	f7dc fadc 	bl	239f8 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_DISCONNECTING)) {
   47440:	69ab      	ldr	r3, [r5, #24]
   47442:	071a      	lsls	r2, r3, #28
   47444:	d509      	bpl.n	4745a <mqtt_input+0x24>
		client_disconnect(client, 0);
   47446:	2100      	movs	r1, #0
   47448:	4628      	mov	r0, r5
   4744a:	f7ff fe23 	bl	47094 <client_disconnect>
	int err_code = 0;
   4744e:	2400      	movs	r4, #0
	mqtt_mutex_unlock(client);
   47450:	4628      	mov	r0, r5
   47452:	f7dc faa5 	bl	239a0 <mqtt_mutex_unlock>
}
   47456:	4620      	mov	r0, r4
   47458:	bd38      	pop	{r3, r4, r5, pc}
	} else if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   4745a:	079b      	lsls	r3, r3, #30
   4745c:	d50b      	bpl.n	47476 <mqtt_input+0x40>
	if (client->internal.remaining_payload > 0) {
   4745e:	6a2b      	ldr	r3, [r5, #32]
   47460:	b963      	cbnz	r3, 4747c <mqtt_input+0x46>
	err_code = mqtt_handle_rx(client);
   47462:	4628      	mov	r0, r5
   47464:	f7ff fd32 	bl	46ecc <mqtt_handle_rx>
	if (err_code < 0) {
   47468:	1e04      	subs	r4, r0, #0
   4746a:	daf1      	bge.n	47450 <mqtt_input+0x1a>
		client_disconnect(client, err_code);
   4746c:	4621      	mov	r1, r4
   4746e:	4628      	mov	r0, r5
   47470:	f7ff fe10 	bl	47094 <client_disconnect>
   47474:	e7ec      	b.n	47450 <mqtt_input+0x1a>
		err_code = -EACCES;
   47476:	f06f 040c 	mvn.w	r4, #12
   4747a:	e7e9      	b.n	47450 <mqtt_input+0x1a>
		return -EBUSY;
   4747c:	f06f 040f 	mvn.w	r4, #15
   47480:	e7e6      	b.n	47450 <mqtt_input+0x1a>
	NULL_PARAM_CHECK(client);
   47482:	f06f 0415 	mvn.w	r4, #21
   47486:	e7e6      	b.n	47456 <mqtt_input+0x20>

00047488 <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   47488:	2301      	movs	r3, #1
   4748a:	f7ff be33 	b.w	470f4 <read_publish_payload>

0004748e <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, u8_t *buffer,
				 size_t length)
{
   4748e:	b570      	push	{r4, r5, r6, lr}
   47490:	4606      	mov	r6, r0
   47492:	460c      	mov	r4, r1
	u8_t *end = buffer + length;
   47494:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   47496:	42ac      	cmp	r4, r5
   47498:	d301      	bcc.n	4749e <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   4749a:	2000      	movs	r0, #0
}
   4749c:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   4749e:	1b2a      	subs	r2, r5, r4
   474a0:	4621      	mov	r1, r4
   474a2:	4630      	mov	r0, r6
   474a4:	f7ff fff0 	bl	47488 <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   474a8:	2800      	cmp	r0, #0
   474aa:	dbf7      	blt.n	4749c <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   474ac:	d001      	beq.n	474b2 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   474ae:	4404      	add	r4, r0
   474b0:	e7f1      	b.n	47496 <mqtt_readall_publish_payload+0x8>
			return -EIO;
   474b2:	f06f 0004 	mvn.w	r0, #4
   474b6:	e7f1      	b.n	4749c <mqtt_readall_publish_payload+0xe>

000474b8 <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   474b8:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = close(client->transport.tls.sock);
   474ba:	6a80      	ldr	r0, [r0, #40]	; 0x28
   474bc:	f7dc fabc 	bl	23a38 <close>
	if (ret < 0) {
   474c0:	2800      	cmp	r0, #0
   474c2:	da04      	bge.n	474ce <mqtt_client_tls_disconnect+0x16>
		return -errno;
   474c4:	f7ff fafe 	bl	46ac4 <__errno>
   474c8:	6800      	ldr	r0, [r0, #0]
   474ca:	4240      	negs	r0, r0
	}

	return 0;
}
   474cc:	bd08      	pop	{r3, pc}
	return 0;
   474ce:	2000      	movs	r0, #0
   474d0:	e7fc      	b.n	474cc <mqtt_client_tls_disconnect+0x14>

000474d2 <gpio_nrfx_write>:
{
   474d2:	b510      	push	{r4, lr}
	return port->config->config_info;
   474d4:	6804      	ldr	r4, [r0, #0]
   474d6:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   474d8:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   474da:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   474dc:	6824      	ldr	r4, [r4, #0]
   474de:	69c0      	ldr	r0, [r0, #28]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   474e0:	d103      	bne.n	474ea <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   474e2:	4058      	eors	r0, r3
    p_reg->OUT = value;
   474e4:	6060      	str	r0, [r4, #4]
}
   474e6:	2000      	movs	r0, #0
   474e8:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   474ea:	3300      	adds	r3, #0
   474ec:	f04f 0101 	mov.w	r1, #1
   474f0:	bf18      	it	ne
   474f2:	2301      	movne	r3, #1
   474f4:	40d0      	lsrs	r0, r2
   474f6:	f000 0001 	and.w	r0, r0, #1
   474fa:	4091      	lsls	r1, r2
   474fc:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   474fe:	bf14      	ite	ne
   47500:	60a1      	strne	r1, [r4, #8]
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   47502:	60e1      	streq	r1, [r4, #12]
   47504:	e7ef      	b.n	474e6 <gpio_nrfx_write+0x14>

00047506 <gpio_nrfx_read>:
{
   47506:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   47508:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   4750a:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4750c:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   4750e:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   47510:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   47512:	2901      	cmp	r1, #1
    return p_reg->DIR;
   47514:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   47516:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   47518:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   4751a:	ea80 0004 	eor.w	r0, r0, r4
   4751e:	ea84 0405 	eor.w	r4, r4, r5
   47522:	ea04 0406 	and.w	r4, r4, r6
   47526:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   4752a:	bf1c      	itt	ne
   4752c:	40d0      	lsrne	r0, r2
   4752e:	f000 0001 	andne.w	r0, r0, #1
   47532:	6018      	str	r0, [r3, #0]
}
   47534:	2000      	movs	r0, #0
   47536:	bd70      	pop	{r4, r5, r6, pc}

00047538 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   47538:	2901      	cmp	r1, #1
{
   4753a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   4753e:	bf18      	it	ne
   47540:	b2d4      	uxtbne	r4, r2
{
   47542:	4606      	mov	r6, r0
		to_pin   = pin;
   47544:	bf12      	itee	ne
   47546:	4625      	movne	r5, r4
		to_pin   = 31U;
   47548:	251f      	moveq	r5, #31
		from_pin = 0U;
   4754a:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   4754c:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   47550:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   47552:	42ac      	cmp	r4, r5
   47554:	d902      	bls.n	4755c <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   47556:	2000      	movs	r0, #0
}
   47558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   4755c:	68fb      	ldr	r3, [r7, #12]
   4755e:	fa08 f204 	lsl.w	r2, r8, r4
   47562:	ea23 0302 	bic.w	r3, r3, r2
   47566:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   47568:	4621      	mov	r1, r4
   4756a:	4630      	mov	r0, r6
   4756c:	f7dc fc6e 	bl	23e4c <gpiote_pin_int_cfg>
		if (res != 0) {
   47570:	2800      	cmp	r0, #0
   47572:	d1f1      	bne.n	47558 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   47574:	3401      	adds	r4, #1
   47576:	b2e4      	uxtb	r4, r4
   47578:	e7eb      	b.n	47552 <gpio_nrfx_pin_disable_callback+0x1a>

0004757a <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   4757a:	2901      	cmp	r1, #1
{
   4757c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   47580:	bf18      	it	ne
   47582:	b2d4      	uxtbne	r4, r2
{
   47584:	4606      	mov	r6, r0
		to_pin   = pin;
   47586:	bf12      	itee	ne
   47588:	4625      	movne	r5, r4
		to_pin   = 31U;
   4758a:	251f      	moveq	r5, #31
		from_pin = 0U;
   4758c:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   4758e:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   47592:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   47594:	42ac      	cmp	r4, r5
   47596:	d902      	bls.n	4759e <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   47598:	2000      	movs	r0, #0
}
   4759a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   4759e:	68fb      	ldr	r3, [r7, #12]
   475a0:	fa08 f204 	lsl.w	r2, r8, r4
   475a4:	4313      	orrs	r3, r2
   475a6:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   475a8:	4621      	mov	r1, r4
   475aa:	4630      	mov	r0, r6
   475ac:	f7dc fc4e 	bl	23e4c <gpiote_pin_int_cfg>
		if (res != 0) {
   475b0:	2800      	cmp	r0, #0
   475b2:	d1f2      	bne.n	4759a <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   475b4:	3401      	adds	r4, #1
   475b6:	b2e4      	uxtb	r4, r4
   475b8:	e7ec      	b.n	47594 <gpio_nrfx_pin_enable_callback+0x1a>

000475ba <is_regular_addr_valid>:
{
   475ba:	b538      	push	{r3, r4, r5, lr}
   475bc:	4604      	mov	r4, r0
   475be:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   475c0:	f001 f9e3 	bl	4898a <nrfx_nvmc_flash_size_get>
	if (addr >= DT_FLASH_BASE_ADDRESS + flash_size ||
   475c4:	4284      	cmp	r4, r0
   475c6:	d209      	bcs.n	475dc <is_regular_addr_valid+0x22>
   475c8:	2c00      	cmp	r4, #0
   475ca:	db07      	blt.n	475dc <is_regular_addr_valid+0x22>
	    addr < DT_FLASH_BASE_ADDRESS ||
   475cc:	42a8      	cmp	r0, r5
   475ce:	d305      	bcc.n	475dc <is_regular_addr_valid+0x22>
	    (addr - DT_FLASH_BASE_ADDRESS) + len > flash_size) {
   475d0:	442c      	add	r4, r5
	    len > flash_size ||
   475d2:	4284      	cmp	r4, r0
   475d4:	bf8c      	ite	hi
   475d6:	2000      	movhi	r0, #0
   475d8:	2001      	movls	r0, #1
}
   475da:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   475dc:	2000      	movs	r0, #0
   475de:	e7fc      	b.n	475da <is_regular_addr_valid+0x20>

000475e0 <flash_nrf_read>:
{
   475e0:	b570      	push	{r4, r5, r6, lr}
   475e2:	460d      	mov	r5, r1
	return is_regular_addr_valid(addr, len) ||
   475e4:	4619      	mov	r1, r3
   475e6:	4628      	mov	r0, r5
{
   475e8:	4616      	mov	r6, r2
   475ea:	461c      	mov	r4, r3
	return is_regular_addr_valid(addr, len) ||
   475ec:	f7ff ffe5 	bl	475ba <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   475f0:	b170      	cbz	r0, 47610 <flash_nrf_read+0x30>
	if (!len) {
   475f2:	b184      	cbz	r4, 47616 <flash_nrf_read+0x36>
	if (addr < PM_APP_ADDRESS) {
   475f4:	f5b5 3fc1 	cmp.w	r5, #98816	; 0x18200
		return spm_request_read(data, addr, len);
   475f8:	4622      	mov	r2, r4
   475fa:	4629      	mov	r1, r5
   475fc:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   475fe:	da03      	bge.n	47608 <flash_nrf_read+0x28>
}
   47600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   47604:	f7d0 bcec 	b.w	17fe0 <spm_request_read>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   47608:	f7d2 fc52 	bl	19eb0 <memcpy>
   4760c:	2000      	movs	r0, #0
}
   4760e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   47610:	f06f 0015 	mvn.w	r0, #21
   47614:	e7fb      	b.n	4760e <flash_nrf_read+0x2e>
		return 0;
   47616:	4620      	mov	r0, r4
   47618:	e7f9      	b.n	4760e <flash_nrf_read+0x2e>

0004761a <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   4761a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4761e:	461d      	mov	r5, r3
	off_t group_offs = 0;
	u32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   47620:	6843      	ldr	r3, [r0, #4]
{
   47622:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   47624:	691b      	ldr	r3, [r3, #16]
   47626:	4669      	mov	r1, sp
{
   47628:	4616      	mov	r6, r2
	api->page_layout(dev, &layout, &layout_size);
   4762a:	aa01      	add	r2, sp, #4
   4762c:	4798      	blx	r3
   4762e:	e9dd 2100 	ldrd	r2, r1, [sp]

	while (layout_size--) {
   47632:	2300      	movs	r3, #0
	off_t end = 0;
   47634:	4618      	mov	r0, r3
	off_t group_offs = 0;
   47636:	469e      	mov	lr, r3
	size_t page_count = 0;
   47638:	469c      	mov	ip, r3
   4763a:	f101 38ff 	add.w	r8, r1, #4294967295
	while (layout_size--) {
   4763e:	f1b8 3fff 	cmp.w	r8, #4294967295
   47642:	d102      	bne.n	4764a <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   47644:	f06f 0015 	mvn.w	r0, #21
   47648:	e018      	b.n	4767c <flash_get_page_info+0x62>
   4764a:	6817      	ldr	r7, [r2, #0]
		if (use_addr) {
   4764c:	b1ce      	cbz	r6, 47682 <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   4764e:	6851      	ldr	r1, [r2, #4]
   47650:	fb01 0007 	mla	r0, r1, r7, r0
		if (offs < end) {
   47654:	42a0      	cmp	r0, r4
   47656:	f108 38ff 	add.w	r8, r8, #4294967295
   4765a:	dd17      	ble.n	4768c <flash_get_page_info+0x72>
   4765c:	b103      	cbz	r3, 47660 <flash_get_page_info+0x46>
   4765e:	9200      	str	r2, [sp, #0]
			info->size = layout->pages_size;
   47660:	9b00      	ldr	r3, [sp, #0]
   47662:	685b      	ldr	r3, [r3, #4]
   47664:	606b      	str	r3, [r5, #4]
			if (use_addr) {
   47666:	b176      	cbz	r6, 47686 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   47668:	eba4 040e 	sub.w	r4, r4, lr
   4766c:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   47670:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   47672:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   47676:	4464      	add	r4, ip
			info->start_offset = group_offs +
   47678:	602b      	str	r3, [r5, #0]
			info->index = page_count + num_in_group;
   4767a:	60ac      	str	r4, [r5, #8]
}
   4767c:	b002      	add	sp, #8
   4767e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   47682:	4438      	add	r0, r7
   47684:	e7e6      	b.n	47654 <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   47686:	eba4 040c 	sub.w	r4, r4, ip
   4768a:	e7f1      	b.n	47670 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   4768c:	6853      	ldr	r3, [r2, #4]
		page_count += layout->pages_count;
   4768e:	44bc      	add	ip, r7
		group_offs += layout->pages_count * layout->pages_size;
   47690:	fb03 ee07 	mla	lr, r3, r7, lr
		layout++;
   47694:	3208      	adds	r2, #8
   47696:	2301      	movs	r3, #1
   47698:	e7d1      	b.n	4763e <flash_get_page_info+0x24>

0004769a <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(struct device *dev, off_t offs,
				      struct flash_pages_info *info)
{
	return flash_get_page_info(dev, offs, true, info);
   4769a:	4613      	mov	r3, r2
   4769c:	2201      	movs	r2, #1
   4769e:	f7ff bfbc 	b.w	4761a <flash_get_page_info>

000476a2 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   476a2:	6883      	ldr	r3, [r0, #8]
   476a4:	689b      	ldr	r3, [r3, #8]
   476a6:	7b9a      	ldrb	r2, [r3, #14]
   476a8:	b172      	cbz	r2, 476c8 <uarte_nrfx_isr_int+0x26>
	return dev->config->config_info;
   476aa:	6802      	ldr	r2, [r0, #0]
	return config->uarte_regs;
   476ac:	6892      	ldr	r2, [r2, #8]
   476ae:	6812      	ldr	r2, [r2, #0]
   476b0:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (data->int_driven->disable_tx_irq &&
   476b4:	b141      	cbz	r1, 476c8 <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   476b6:	f44f 7180 	mov.w	r1, #256	; 0x100
   476ba:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   476be:	2101      	movs	r1, #1
   476c0:	60d1      	str	r1, [r2, #12]
		data->int_driven->disable_tx_irq = false;
   476c2:	2200      	movs	r2, #0
   476c4:	739a      	strb	r2, [r3, #14]
		return;
   476c6:	4770      	bx	lr
	if (data->int_driven->cb) {
   476c8:	681a      	ldr	r2, [r3, #0]
   476ca:	b10a      	cbz	r2, 476d0 <uarte_nrfx_isr_int+0x2e>
		data->int_driven->cb(data->int_driven->cb_data);
   476cc:	6858      	ldr	r0, [r3, #4]
   476ce:	4710      	bx	r2
}
   476d0:	4770      	bx	lr

000476d2 <uarte_nrfx_config_get>:
{
   476d2:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   476d4:	6882      	ldr	r2, [r0, #8]
   476d6:	e892 0003 	ldmia.w	r2, {r0, r1}
   476da:	e883 0003 	stmia.w	r3, {r0, r1}
}
   476de:	2000      	movs	r0, #0
   476e0:	4770      	bx	lr

000476e2 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   476e2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   476e4:	689b      	ldr	r3, [r3, #8]
   476e6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   476e8:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   476ec:	b118      	cbz	r0, 476f6 <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   476ee:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   476f2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   476f6:	4770      	bx	lr

000476f8 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   476f8:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   476fa:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   476fc:	689b      	ldr	r3, [r3, #8]
   476fe:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   47700:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   47704:	b138      	cbz	r0, 47716 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   47706:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   47708:	2000      	movs	r0, #0
   4770a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4770c:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4770e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   47712:	601a      	str	r2, [r3, #0]
	return 0;
   47714:	4770      	bx	lr
		return -1;
   47716:	f04f 30ff 	mov.w	r0, #4294967295
}
   4771a:	4770      	bx	lr

0004771c <uarte_nrfx_poll_out>:
{
   4771c:	b082      	sub	sp, #8
   4771e:	aa02      	add	r2, sp, #8
   47720:	f802 1d01 	strb.w	r1, [r2, #-1]!
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   47724:	2100      	movs	r1, #0
	return dev->config->config_info;
   47726:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   47728:	689b      	ldr	r3, [r3, #8]
   4772a:	681b      	ldr	r3, [r3, #0]
   4772c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   47730:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   47734:	2201      	movs	r2, #1
   47736:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4773a:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4773c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   47740:	2900      	cmp	r1, #0
   47742:	d0fb      	beq.n	4773c <uarte_nrfx_poll_out+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   47744:	60da      	str	r2, [r3, #12]
}
   47746:	b002      	add	sp, #8
   47748:	4770      	bx	lr

0004774a <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   4774a:	6803      	ldr	r3, [r0, #0]
{
   4774c:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   4774e:	689b      	ldr	r3, [r3, #8]
   47750:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   47752:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   47756:	b1bb      	cbz	r3, 47788 <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   47758:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   4775a:	68ab      	ldr	r3, [r5, #8]
   4775c:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4775e:	2300      	movs	r3, #0
   47760:	4290      	cmp	r0, r2
   47762:	bfa8      	it	ge
   47764:	4610      	movge	r0, r2
   47766:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   4776a:	68aa      	ldr	r2, [r5, #8]
	for (int i = 0; i < len; i++) {
   4776c:	4283      	cmp	r3, r0
   4776e:	6892      	ldr	r2, [r2, #8]
   47770:	db06      	blt.n	47780 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   47772:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   47774:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   47778:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4777c:	60a3      	str	r3, [r4, #8]
}
   4777e:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   47780:	5cce      	ldrb	r6, [r1, r3]
   47782:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   47784:	3301      	adds	r3, #1
   47786:	e7f0      	b.n	4776a <uarte_nrfx_fifo_fill+0x20>
		return 0;
   47788:	4618      	mov	r0, r3
   4778a:	e7f8      	b.n	4777e <uarte_nrfx_fifo_fill+0x34>

0004778c <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   4778c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   4778e:	689b      	ldr	r3, [r3, #8]
   47790:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   47792:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   47796:	b143      	cbz	r3, 477aa <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   47798:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4779a:	2000      	movs	r0, #0
   4779c:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   477a0:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   477a2:	7b1b      	ldrb	r3, [r3, #12]
   477a4:	700b      	strb	r3, [r1, #0]
   477a6:	6010      	str	r0, [r2, #0]
   477a8:	4770      	bx	lr
	int num_rx = 0;
   477aa:	4618      	mov	r0, r3
}
   477ac:	4770      	bx	lr

000477ae <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   477ae:	2100      	movs	r1, #0
	return dev->config->config_info;
   477b0:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   477b2:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   477b4:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   477b6:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   477b8:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   477ba:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   477bc:	f44f 7280 	mov.w	r2, #256	; 0x100
   477c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   477c4:	4770      	bx	lr

000477c6 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   477c6:	2201      	movs	r2, #1
   477c8:	6883      	ldr	r3, [r0, #8]
   477ca:	689b      	ldr	r3, [r3, #8]
   477cc:	739a      	strb	r2, [r3, #14]
}
   477ce:	4770      	bx	lr

000477d0 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   477d0:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   477d2:	689b      	ldr	r3, [r3, #8]
   477d4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   477d6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   477da:	b118      	cbz	r0, 477e4 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return (bool)(p_reg->INTENSET & mask);
   477dc:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   477e0:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   477e4:	4770      	bx	lr

000477e6 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   477e6:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   477e8:	689b      	ldr	r3, [r3, #8]
   477ea:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   477ec:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   477f0:	3000      	adds	r0, #0
   477f2:	bf18      	it	ne
   477f4:	2001      	movne	r0, #1
   477f6:	4770      	bx	lr

000477f8 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   477f8:	2210      	movs	r2, #16
	return dev->config->config_info;
   477fa:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   477fc:	689b      	ldr	r3, [r3, #8]
   477fe:	681b      	ldr	r3, [r3, #0]
   47800:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   47804:	4770      	bx	lr

00047806 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   47806:	2210      	movs	r2, #16
	return dev->config->config_info;
   47808:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   4780a:	689b      	ldr	r3, [r3, #8]
   4780c:	681b      	ldr	r3, [r3, #0]
   4780e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   47812:	4770      	bx	lr

00047814 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   47814:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   47818:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   4781a:	689b      	ldr	r3, [r3, #8]
   4781c:	681b      	ldr	r3, [r3, #0]
   4781e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   47822:	4770      	bx	lr

00047824 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   47824:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   47828:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   4782a:	689b      	ldr	r3, [r3, #8]
   4782c:	681b      	ldr	r3, [r3, #0]
   4782e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   47832:	4770      	bx	lr

00047834 <uarte_nrfx_irq_update>:
}
   47834:	2001      	movs	r0, #1
   47836:	4770      	bx	lr

00047838 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   47838:	6883      	ldr	r3, [r0, #8]
   4783a:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   4783c:	e9c3 1200 	strd	r1, r2, [r3]
}
   47840:	4770      	bx	lr

00047842 <uarte_nrfx_irq_is_pending>:
{
   47842:	b508      	push	{r3, lr}
	return dev->config->config_info;
   47844:	6803      	ldr	r3, [r0, #0]
{
   47846:	4602      	mov	r2, r0
	return config->uarte_regs;
   47848:	689b      	ldr	r3, [r3, #8]
   4784a:	6819      	ldr	r1, [r3, #0]
    return (bool)(p_reg->INTENSET & mask);
   4784c:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   47850:	05db      	lsls	r3, r3, #23
   47852:	d405      	bmi.n	47860 <uarte_nrfx_irq_is_pending+0x1e>
   47854:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   47858:	f010 0010 	ands.w	r0, r0, #16
   4785c:	d106      	bne.n	4786c <uarte_nrfx_irq_is_pending+0x2a>
}
   4785e:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   47860:	f7ff ffb6 	bl	477d0 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   47864:	2800      	cmp	r0, #0
   47866:	d0f5      	beq.n	47854 <uarte_nrfx_irq_is_pending+0x12>
		||
   47868:	2001      	movs	r0, #1
   4786a:	e7f8      	b.n	4785e <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   4786c:	4610      	mov	r0, r2
   4786e:	f7ff ffba 	bl	477e6 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   47872:	3000      	adds	r0, #0
   47874:	bf18      	it	ne
   47876:	2001      	movne	r0, #1
   47878:	e7f1      	b.n	4785e <uarte_nrfx_irq_is_pending+0x1c>

0004787a <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   4787a:	2000      	movs	r0, #0
   4787c:	4770      	bx	lr

0004787e <parse_hex4>:
    for (i = 0; i < 4; i++)
   4787e:	2200      	movs	r2, #0
    unsigned int h = 0;
   47880:	4613      	mov	r3, r2
{
   47882:	b510      	push	{r4, lr}
        if ((input[i] >= '0') && (input[i] <= '9'))
   47884:	5c81      	ldrb	r1, [r0, r2]
   47886:	f1a1 0430 	sub.w	r4, r1, #48	; 0x30
   4788a:	2c09      	cmp	r4, #9
   4788c:	d80a      	bhi.n	478a4 <parse_hex4+0x26>
   4788e:	3b30      	subs	r3, #48	; 0x30
        if (i < 3)
   47890:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   47892:	440b      	add	r3, r1
    for (i = 0; i < 4; i++)
   47894:	f102 0201 	add.w	r2, r2, #1
            h = h << 4;
   47898:	bf18      	it	ne
   4789a:	011b      	lslne	r3, r3, #4
    for (i = 0; i < 4; i++)
   4789c:	2a04      	cmp	r2, #4
   4789e:	d1f1      	bne.n	47884 <parse_hex4+0x6>
}
   478a0:	4618      	mov	r0, r3
   478a2:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   478a4:	f1a1 0441 	sub.w	r4, r1, #65	; 0x41
   478a8:	2c05      	cmp	r4, #5
   478aa:	d801      	bhi.n	478b0 <parse_hex4+0x32>
   478ac:	3b37      	subs	r3, #55	; 0x37
   478ae:	e7ef      	b.n	47890 <parse_hex4+0x12>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   478b0:	f1a1 0461 	sub.w	r4, r1, #97	; 0x61
   478b4:	2c05      	cmp	r4, #5
   478b6:	d801      	bhi.n	478bc <parse_hex4+0x3e>
   478b8:	3b57      	subs	r3, #87	; 0x57
   478ba:	e7e9      	b.n	47890 <parse_hex4+0x12>
            return 0;
   478bc:	2300      	movs	r3, #0
   478be:	e7ef      	b.n	478a0 <parse_hex4+0x22>

000478c0 <buffer_skip_whitespace>:
{
   478c0:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   478c2:	b140      	cbz	r0, 478d6 <buffer_skip_whitespace+0x16>
   478c4:	6801      	ldr	r1, [r0, #0]
   478c6:	b171      	cbz	r1, 478e6 <buffer_skip_whitespace+0x26>
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   478c8:	6842      	ldr	r2, [r0, #4]
   478ca:	6883      	ldr	r3, [r0, #8]
   478cc:	4293      	cmp	r3, r2
   478ce:	d206      	bcs.n	478de <buffer_skip_whitespace+0x1e>
   478d0:	5ccc      	ldrb	r4, [r1, r3]
   478d2:	2c20      	cmp	r4, #32
   478d4:	d900      	bls.n	478d8 <buffer_skip_whitespace+0x18>
}
   478d6:	bd10      	pop	{r4, pc}
       buffer->offset++;
   478d8:	3301      	adds	r3, #1
   478da:	6083      	str	r3, [r0, #8]
   478dc:	e7f5      	b.n	478ca <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
   478de:	d1fa      	bne.n	478d6 <buffer_skip_whitespace+0x16>
        buffer->offset--;
   478e0:	3a01      	subs	r2, #1
   478e2:	6082      	str	r2, [r0, #8]
   478e4:	e7f7      	b.n	478d6 <buffer_skip_whitespace+0x16>
        return NULL;
   478e6:	4608      	mov	r0, r1
   478e8:	e7f5      	b.n	478d6 <buffer_skip_whitespace+0x16>

000478ea <update_offset>:
{
   478ea:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   478ec:	4604      	mov	r4, r0
   478ee:	b140      	cbz	r0, 47902 <update_offset+0x18>
   478f0:	6803      	ldr	r3, [r0, #0]
   478f2:	b133      	cbz	r3, 47902 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   478f4:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   478f6:	4418      	add	r0, r3
   478f8:	f7f8 fe44 	bl	40584 <strlen>
   478fc:	68a3      	ldr	r3, [r4, #8]
   478fe:	4418      	add	r0, r3
   47900:	60a0      	str	r0, [r4, #8]
}
   47902:	bd10      	pop	{r4, pc}

00047904 <get_object_item>:
{
   47904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   47908:	460f      	mov	r7, r1
    if ((object == NULL) || (name == NULL))
   4790a:	b918      	cbnz	r0, 47914 <get_object_item+0x10>
        return NULL;
   4790c:	2400      	movs	r4, #0
}
   4790e:	4620      	mov	r0, r4
   47910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((object == NULL) || (name == NULL))
   47914:	2900      	cmp	r1, #0
   47916:	d0f9      	beq.n	4790c <get_object_item+0x8>
    current_element = object->child;
   47918:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   4791a:	2a00      	cmp	r2, #0
   4791c:	d13e      	bne.n	4799c <get_object_item+0x98>
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   4791e:	2c00      	cmp	r4, #0
   47920:	d0f4      	beq.n	4790c <get_object_item+0x8>
   47922:	6a26      	ldr	r6, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   47924:	b3be      	cbz	r6, 47996 <get_object_item+0x92>
    if (string1 == string2)
   47926:	42be      	cmp	r6, r7
   47928:	d041      	beq.n	479ae <get_object_item+0xaa>
   4792a:	f107 3aff 	add.w	sl, r7, #4294967295
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   4792e:	f81a 8f01 	ldrb.w	r8, [sl, #1]!
   47932:	f7f7 fea3 	bl	3f67c <__locale_ctype_ptr>
   47936:	4440      	add	r0, r8
   47938:	7843      	ldrb	r3, [r0, #1]
   4793a:	46b1      	mov	r9, r6
   4793c:	f003 0303 	and.w	r3, r3, #3
   47940:	2b01      	cmp	r3, #1
   47942:	f816 5b01 	ldrb.w	r5, [r6], #1
   47946:	bf08      	it	eq
   47948:	f108 0820 	addeq.w	r8, r8, #32
   4794c:	f7f7 fe96 	bl	3f67c <__locale_ctype_ptr>
   47950:	462b      	mov	r3, r5
   47952:	4428      	add	r0, r5
   47954:	7842      	ldrb	r2, [r0, #1]
   47956:	f89a 5000 	ldrb.w	r5, [sl]
   4795a:	f002 0203 	and.w	r2, r2, #3
   4795e:	2a01      	cmp	r2, #1
   47960:	bf08      	it	eq
   47962:	3320      	addeq	r3, #32
   47964:	4598      	cmp	r8, r3
   47966:	d026      	beq.n	479b6 <get_object_item+0xb2>
    return tolower(*string1) - tolower(*string2);
   47968:	f7f7 fe88 	bl	3f67c <__locale_ctype_ptr>
   4796c:	4428      	add	r0, r5
   4796e:	7843      	ldrb	r3, [r0, #1]
   47970:	f899 6000 	ldrb.w	r6, [r9]
   47974:	f003 0303 	and.w	r3, r3, #3
   47978:	2b01      	cmp	r3, #1
   4797a:	bf08      	it	eq
   4797c:	3520      	addeq	r5, #32
   4797e:	f7f7 fe7d 	bl	3f67c <__locale_ctype_ptr>
   47982:	4633      	mov	r3, r6
   47984:	4430      	add	r0, r6
   47986:	7842      	ldrb	r2, [r0, #1]
   47988:	f002 0203 	and.w	r2, r2, #3
   4798c:	2a01      	cmp	r2, #1
   4798e:	bf08      	it	eq
   47990:	3320      	addeq	r3, #32
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   47992:	429d      	cmp	r5, r3
   47994:	d00b      	beq.n	479ae <get_object_item+0xaa>
            current_element = current_element->next;
   47996:	6824      	ldr	r4, [r4, #0]
   47998:	e7c1      	b.n	4791e <get_object_item+0x1a>
            current_element = current_element->next;
   4799a:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   4799c:	2c00      	cmp	r4, #0
   4799e:	d0b5      	beq.n	4790c <get_object_item+0x8>
   479a0:	6a21      	ldr	r1, [r4, #32]
   479a2:	b121      	cbz	r1, 479ae <get_object_item+0xaa>
   479a4:	4638      	mov	r0, r7
   479a6:	f7d2 faf9 	bl	19f9c <strcmp>
   479aa:	2800      	cmp	r0, #0
   479ac:	d1f5      	bne.n	4799a <get_object_item+0x96>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   479ae:	6a23      	ldr	r3, [r4, #32]
   479b0:	2b00      	cmp	r3, #0
   479b2:	d1ac      	bne.n	4790e <get_object_item+0xa>
   479b4:	e7aa      	b.n	4790c <get_object_item+0x8>
        if (*string1 == '\0')
   479b6:	2d00      	cmp	r5, #0
   479b8:	d1b9      	bne.n	4792e <get_object_item+0x2a>
   479ba:	e7f8      	b.n	479ae <get_object_item+0xaa>

000479bc <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   479bc:	b161      	cbz	r1, 479d8 <add_item_to_array+0x1c>
   479be:	b160      	cbz	r0, 479da <add_item_to_array+0x1e>
    child = array->child;
   479c0:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   479c2:	b91b      	cbnz	r3, 479cc <add_item_to_array+0x10>
        array->child = item;
   479c4:	6081      	str	r1, [r0, #8]
    item->prev = prev;
   479c6:	2001      	movs	r0, #1
   479c8:	4770      	bx	lr
        while (child->next)
   479ca:	4613      	mov	r3, r2
   479cc:	681a      	ldr	r2, [r3, #0]
   479ce:	2a00      	cmp	r2, #0
   479d0:	d1fb      	bne.n	479ca <add_item_to_array+0xe>
    prev->next = item;
   479d2:	6019      	str	r1, [r3, #0]
    item->prev = prev;
   479d4:	604b      	str	r3, [r1, #4]
   479d6:	e7f6      	b.n	479c6 <add_item_to_array+0xa>
        return false;
   479d8:	4608      	mov	r0, r1
}
   479da:	4770      	bx	lr

000479dc <cJSON_New_Item.isra.1>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   479dc:	b510      	push	{r4, lr}
   479de:	4603      	mov	r3, r0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   479e0:	2028      	movs	r0, #40	; 0x28
   479e2:	4798      	blx	r3
    if (node)
   479e4:	4604      	mov	r4, r0
   479e6:	b118      	cbz	r0, 479f0 <cJSON_New_Item.isra.1+0x14>
__ssp_bos_icheck3(memset, void *, int)
   479e8:	2228      	movs	r2, #40	; 0x28
   479ea:	2100      	movs	r1, #0
   479ec:	f7f8 f9ae 	bl	3fd4c <memset>
}
   479f0:	4620      	mov	r0, r4
   479f2:	bd10      	pop	{r4, pc}

000479f4 <ensure>:
{
   479f4:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   479f6:	4604      	mov	r4, r0
   479f8:	b1b8      	cbz	r0, 47a2a <ensure+0x36>
   479fa:	6805      	ldr	r5, [r0, #0]
   479fc:	b165      	cbz	r5, 47a18 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   479fe:	6843      	ldr	r3, [r0, #4]
   47a00:	b113      	cbz	r3, 47a08 <ensure+0x14>
   47a02:	6882      	ldr	r2, [r0, #8]
   47a04:	4293      	cmp	r3, r2
   47a06:	d910      	bls.n	47a2a <ensure+0x36>
    if (needed > INT_MAX)
   47a08:	2900      	cmp	r1, #0
   47a0a:	db0e      	blt.n	47a2a <ensure+0x36>
    needed += p->offset + 1;
   47a0c:	68a2      	ldr	r2, [r4, #8]
   47a0e:	1c4e      	adds	r6, r1, #1
   47a10:	4416      	add	r6, r2
    if (needed <= p->length)
   47a12:	42b3      	cmp	r3, r6
   47a14:	d302      	bcc.n	47a1c <ensure+0x28>
        return p->buffer + p->offset;
   47a16:	4415      	add	r5, r2
}
   47a18:	4628      	mov	r0, r5
   47a1a:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   47a1c:	6923      	ldr	r3, [r4, #16]
   47a1e:	b923      	cbnz	r3, 47a2a <ensure+0x36>
    if (needed > (INT_MAX / 2))
   47a20:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
   47a24:	d303      	bcc.n	47a2e <ensure+0x3a>
        if (needed <= INT_MAX)
   47a26:	2e00      	cmp	r6, #0
   47a28:	da0f      	bge.n	47a4a <ensure+0x56>
        return NULL;
   47a2a:	2500      	movs	r5, #0
   47a2c:	e7f4      	b.n	47a18 <ensure+0x24>
        newsize = needed * 2;
   47a2e:	0076      	lsls	r6, r6, #1
    if (p->hooks.reallocate != NULL)
   47a30:	6a23      	ldr	r3, [r4, #32]
   47a32:	b16b      	cbz	r3, 47a50 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   47a34:	4628      	mov	r0, r5
   47a36:	4631      	mov	r1, r6
   47a38:	4798      	blx	r3
        if (newbuffer == NULL)
   47a3a:	4605      	mov	r5, r0
   47a3c:	b9b0      	cbnz	r0, 47a6c <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   47a3e:	69e3      	ldr	r3, [r4, #28]
   47a40:	6820      	ldr	r0, [r4, #0]
   47a42:	4798      	blx	r3
            p->buffer = NULL;
   47a44:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   47a48:	e7e6      	b.n	47a18 <ensure+0x24>
            newsize = INT_MAX;
   47a4a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   47a4e:	e7ef      	b.n	47a30 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   47a50:	69a3      	ldr	r3, [r4, #24]
   47a52:	4630      	mov	r0, r6
   47a54:	4798      	blx	r3
        if (!newbuffer)
   47a56:	4605      	mov	r5, r0
   47a58:	2800      	cmp	r0, #0
   47a5a:	d0f0      	beq.n	47a3e <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   47a5c:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   47a5e:	6821      	ldr	r1, [r4, #0]
   47a60:	3201      	adds	r2, #1
   47a62:	f7d2 fa25 	bl	19eb0 <memcpy>
        p->hooks.deallocate(p->buffer);
   47a66:	69e3      	ldr	r3, [r4, #28]
   47a68:	6820      	ldr	r0, [r4, #0]
   47a6a:	4798      	blx	r3
    return newbuffer + p->offset;
   47a6c:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   47a6e:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   47a72:	441d      	add	r5, r3
   47a74:	e7d0      	b.n	47a18 <ensure+0x24>

00047a76 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   47a76:	2200      	movs	r2, #0
   47a78:	4611      	mov	r1, r2
   47a7a:	f7dd b9c3 	b.w	24e04 <cJSON_ParseWithOpts>

00047a7e <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   47a7e:	2100      	movs	r1, #0
   47a80:	f7dd b8f2 	b.w	24c68 <print.constprop.14>

00047a84 <cJSON_GetArraySize>:
    if (array == NULL)
   47a84:	b110      	cbz	r0, 47a8c <cJSON_GetArraySize+0x8>
    child = array->child;
   47a86:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   47a88:	2000      	movs	r0, #0
    while(child != NULL)
   47a8a:	b903      	cbnz	r3, 47a8e <cJSON_GetArraySize+0xa>
}
   47a8c:	4770      	bx	lr
        size++;
   47a8e:	3001      	adds	r0, #1
        child = child->next;
   47a90:	681b      	ldr	r3, [r3, #0]
   47a92:	e7fa      	b.n	47a8a <cJSON_GetArraySize+0x6>

00047a94 <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   47a94:	2200      	movs	r2, #0
   47a96:	f7ff bf35 	b.w	47904 <get_object_item>

00047a9a <cJSON_AddItemToArray>:
    add_item_to_array(array, item);
   47a9a:	f7ff bf8f 	b.w	479bc <add_item_to_array>

00047a9e <cJSON_AddItemToObject>:
    add_item_to_object(object, string, item, &global_hooks, false);
   47a9e:	2300      	movs	r3, #0
   47aa0:	f7dd b944 	b.w	24d2c <add_item_to_object.constprop.12>

00047aa4 <cJSON_CreateIntArray>:

/* Create Arrays: */
CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count)
{
   47aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    size_t i = 0;
    cJSON *n = NULL;
    cJSON *p = NULL;
    cJSON *a = NULL;

    if ((count < 0) || (numbers == NULL))
   47aa8:	f1b1 0900 	subs.w	r9, r1, #0
{
   47aac:	4680      	mov	r8, r0
    if ((count < 0) || (numbers == NULL))
   47aae:	da03      	bge.n	47ab8 <cJSON_CreateIntArray+0x14>
    {
        return NULL;
   47ab0:	2400      	movs	r4, #0
        }
        p = n;
    }

    return a;
}
   47ab2:	4620      	mov	r0, r4
   47ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((count < 0) || (numbers == NULL))
   47ab8:	2800      	cmp	r0, #0
   47aba:	d0f9      	beq.n	47ab0 <cJSON_CreateIntArray+0xc>
    a = cJSON_CreateArray();
   47abc:	f7dd fa3a 	bl	24f34 <cJSON_CreateArray>
    cJSON *p = NULL;
   47ac0:	2700      	movs	r7, #0
    a = cJSON_CreateArray();
   47ac2:	4604      	mov	r4, r0
    for(i = 0; a && (i < (size_t)count); i++)
   47ac4:	463e      	mov	r6, r7
   47ac6:	2c00      	cmp	r4, #0
   47ac8:	d0f2      	beq.n	47ab0 <cJSON_CreateIntArray+0xc>
   47aca:	45b1      	cmp	r9, r6
   47acc:	d9f1      	bls.n	47ab2 <cJSON_CreateIntArray+0xe>
        n = cJSON_CreateNumber(numbers[i]);
   47ace:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
   47ad2:	f7d0 fdf7 	bl	186c4 <__aeabi_i2d>
   47ad6:	ec41 0b10 	vmov	d0, r0, r1
   47ada:	f7d2 fe39 	bl	1a750 <cJSON_CreateNumber>
        if (!n)
   47ade:	4605      	mov	r5, r0
   47ae0:	b918      	cbnz	r0, 47aea <cJSON_CreateIntArray+0x46>
            cJSON_Delete(a);
   47ae2:	4620      	mov	r0, r4
   47ae4:	f7dd f96c 	bl	24dc0 <cJSON_Delete>
   47ae8:	e7e2      	b.n	47ab0 <cJSON_CreateIntArray+0xc>
        if(!i)
   47aea:	b91e      	cbnz	r6, 47af4 <cJSON_CreateIntArray+0x50>
            a->child = n;
   47aec:	60a0      	str	r0, [r4, #8]
    for(i = 0; a && (i < (size_t)count); i++)
   47aee:	3601      	adds	r6, #1
   47af0:	462f      	mov	r7, r5
   47af2:	e7e8      	b.n	47ac6 <cJSON_CreateIntArray+0x22>
    prev->next = item;
   47af4:	6038      	str	r0, [r7, #0]
    item->prev = prev;
   47af6:	6047      	str	r7, [r0, #4]
   47af8:	e7f9      	b.n	47aee <cJSON_CreateIntArray+0x4a>

00047afa <free_fn_hook>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   47afa:	f000 bf64 	b.w	489c6 <k_free>

00047afe <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   47afe:	f7f4 bb1d 	b.w	3c13c <k_malloc>

00047b02 <bsdlib_shutdown>:

int bsdlib_shutdown(void)
{
   47b02:	b508      	push	{r3, lr}
	bsd_shutdown();
   47b04:	f7e6 f9d2 	bl	2deac <bsd_shutdown>

	return 0;
}
   47b08:	2000      	movs	r0, #0
   47b0a:	bd08      	pop	{r3, pc}

00047b0c <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   47b0c:	4668      	mov	r0, sp
   47b0e:	f020 0107 	bic.w	r1, r0, #7
   47b12:	468d      	mov	sp, r1
   47b14:	b501      	push	{r0, lr}
   47b16:	f7fe ff85 	bl	46a24 <z_arch_isr_direct_header>
	bsd_os_trace_irq_handler();
   47b1a:	f7e8 f835 	bl	2fb88 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   47b1e:	f7da fd57 	bl	225d0 <_arch_isr_direct_pm>
   47b22:	f7da fc37 	bl	22394 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   47b26:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   47b2a:	4685      	mov	sp, r0
   47b2c:	4770      	bx	lr

00047b2e <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   47b2e:	4668      	mov	r0, sp
   47b30:	f020 0107 	bic.w	r1, r0, #7
   47b34:	468d      	mov	sp, r1
   47b36:	b501      	push	{r0, lr}
   47b38:	f7fe ff74 	bl	46a24 <z_arch_isr_direct_header>
	IPC_IRQHandler();
   47b3c:	f7e6 fb16 	bl	2e16c <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   47b40:	f7da fd46 	bl	225d0 <_arch_isr_direct_pm>
   47b44:	f7da fc26 	bl	22394 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   47b48:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   47b4c:	4685      	mov	sp, r0
   47b4e:	4770      	bx	lr

00047b50 <trace_task_create>:
{
   47b50:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   47b52:	201d      	movs	r0, #29
   47b54:	2200      	movs	r2, #0
   47b56:	2106      	movs	r1, #6
   47b58:	f7da fd08 	bl	2256c <z_arm_irq_priority_set>
}
   47b5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   47b60:	201d      	movs	r0, #29
   47b62:	f7da bcf3 	b.w	2254c <z_arch_irq_enable>

00047b66 <read_task_create>:
{
   47b66:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   47b68:	201c      	movs	r0, #28
   47b6a:	2200      	movs	r2, #0
   47b6c:	2106      	movs	r1, #6
   47b6e:	f7da fcfd 	bl	2256c <z_arm_irq_priority_set>
}
   47b72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   47b76:	201c      	movs	r0, #28
   47b78:	f7da bce8 	b.w	2254c <z_arch_irq_enable>

00047b7c <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   47b7c:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   47b80:	bf18      	it	ne
   47b82:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   47b84:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   47b86:	bf48      	it	mi
   47b88:	f043 0308 	orrmi.w	r3, r3, #8
}
   47b8c:	4618      	mov	r0, r3
   47b8e:	4770      	bx	lr

00047b90 <z_to_nrf_family>:
	switch (z_family) {
   47b90:	2803      	cmp	r0, #3
   47b92:	d00f      	beq.n	47bb4 <z_to_nrf_family+0x24>
   47b94:	d806      	bhi.n	47ba4 <z_to_nrf_family+0x14>
   47b96:	2801      	cmp	r0, #1
   47b98:	d00e      	beq.n	47bb8 <z_to_nrf_family+0x28>
   47b9a:	2802      	cmp	r0, #2
   47b9c:	d008      	beq.n	47bb0 <z_to_nrf_family+0x20>
		return -EAFNOSUPPORT;
   47b9e:	f06f 0069 	mvn.w	r0, #105	; 0x69
   47ba2:	4770      	bx	lr
	switch (z_family) {
   47ba4:	2866      	cmp	r0, #102	; 0x66
   47ba6:	d008      	beq.n	47bba <z_to_nrf_family+0x2a>
   47ba8:	2867      	cmp	r0, #103	; 0x67
   47baa:	d1f8      	bne.n	47b9e <z_to_nrf_family+0xe>
		return NRF_AF_LOCAL;
   47bac:	2001      	movs	r0, #1
   47bae:	4770      	bx	lr
		return NRF_AF_INET6;
   47bb0:	200a      	movs	r0, #10
   47bb2:	4770      	bx	lr
		return NRF_AF_PACKET;
   47bb4:	2005      	movs	r0, #5
   47bb6:	4770      	bx	lr
		return NRF_AF_INET;
   47bb8:	2002      	movs	r0, #2
}
   47bba:	4770      	bx	lr

00047bbc <z_to_nrf_protocol>:
	switch (proto) {
   47bbc:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   47bc0:	d01d      	beq.n	47bfe <z_to_nrf_protocol+0x42>
   47bc2:	dc05      	bgt.n	47bd0 <z_to_nrf_protocol+0x14>
   47bc4:	2806      	cmp	r0, #6
   47bc6:	d020      	beq.n	47c0a <z_to_nrf_protocol+0x4e>
   47bc8:	2811      	cmp	r0, #17
   47bca:	d016      	beq.n	47bfa <z_to_nrf_protocol+0x3e>
   47bcc:	b948      	cbnz	r0, 47be2 <z_to_nrf_protocol+0x26>
   47bce:	4770      	bx	lr
   47bd0:	f240 2301 	movw	r3, #513	; 0x201
   47bd4:	4298      	cmp	r0, r3
   47bd6:	d00f      	beq.n	47bf8 <z_to_nrf_protocol+0x3c>
   47bd8:	dc06      	bgt.n	47be8 <z_to_nrf_protocol+0x2c>
   47bda:	f240 1311 	movw	r3, #273	; 0x111
   47bde:	4298      	cmp	r0, r3
   47be0:	d010      	beq.n	47c04 <z_to_nrf_protocol+0x48>
		return -EPROTONOSUPPORT;
   47be2:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   47be6:	4770      	bx	lr
	switch (proto) {
   47be8:	f240 2302 	movw	r3, #514	; 0x202
   47bec:	4298      	cmp	r0, r3
   47bee:	d003      	beq.n	47bf8 <z_to_nrf_protocol+0x3c>
   47bf0:	f240 2303 	movw	r3, #515	; 0x203
   47bf4:	4298      	cmp	r0, r3
   47bf6:	d1f4      	bne.n	47be2 <z_to_nrf_protocol+0x26>
}
   47bf8:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   47bfa:	2002      	movs	r0, #2
   47bfc:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   47bfe:	f44f 7082 	mov.w	r0, #260	; 0x104
   47c02:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   47c04:	f44f 7087 	mov.w	r0, #270	; 0x10e
   47c08:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   47c0a:	2001      	movs	r0, #1
   47c0c:	e7f4      	b.n	47bf8 <z_to_nrf_protocol+0x3c>

00047c0e <nrf91_bsdlib_socket_offload_init>:
}
   47c0e:	2000      	movs	r0, #0
   47c10:	4770      	bx	lr

00047c12 <nrf91_socket_offload_freeaddrinfo>:
{
   47c12:	b538      	push	{r3, r4, r5, lr}
   47c14:	4604      	mov	r4, r0
	while (next != NULL) {
   47c16:	b904      	cbnz	r4, 47c1a <nrf91_socket_offload_freeaddrinfo+0x8>
}
   47c18:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   47c1a:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   47c1c:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   47c1e:	f000 fed2 	bl	489c6 <k_free>
		k_free(this);
   47c22:	4620      	mov	r0, r4
   47c24:	f000 fecf 	bl	489c6 <k_free>
		next = next->ai_next;
   47c28:	462c      	mov	r4, r5
   47c2a:	e7f4      	b.n	47c16 <nrf91_socket_offload_freeaddrinfo+0x4>

00047c2c <z_to_nrf_addrinfo_hints>:
{
   47c2c:	b538      	push	{r3, r4, r5, lr}
   47c2e:	460c      	mov	r4, r1
   47c30:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   47c32:	221c      	movs	r2, #28
   47c34:	2100      	movs	r1, #0
   47c36:	1d20      	adds	r0, r4, #4
   47c38:	f7f8 f888 	bl	3fd4c <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   47c3c:	2300      	movs	r3, #0
   47c3e:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   47c40:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   47c42:	2b03      	cmp	r3, #3
   47c44:	d003      	beq.n	47c4e <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   47c46:	2b04      	cmp	r3, #4
   47c48:	bf08      	it	eq
   47c4a:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   47c4e:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   47c50:	88a8      	ldrh	r0, [r5, #4]
   47c52:	f7ff ff9d 	bl	47b90 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   47c56:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   47c5a:	d00b      	beq.n	47c74 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   47c5c:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   47c5e:	68e8      	ldr	r0, [r5, #12]
   47c60:	f7ff ffac 	bl	47bbc <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   47c64:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   47c68:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   47c6a:	d003      	beq.n	47c74 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   47c6c:	69a8      	ldr	r0, [r5, #24]
   47c6e:	b108      	cbz	r0, 47c74 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   47c70:	61a0      	str	r0, [r4, #24]
	return 0;
   47c72:	2000      	movs	r0, #0
}
   47c74:	bd38      	pop	{r3, r4, r5, pc}

00047c76 <nrf91_socket_offload_send>:
{
   47c76:	b570      	push	{r4, r5, r6, lr}
   47c78:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   47c7a:	4618      	mov	r0, r3
{
   47c7c:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   47c7e:	f7ff ff7d 	bl	47b7c <z_to_nrf_flags>
   47c82:	462a      	mov	r2, r5
   47c84:	4603      	mov	r3, r0
   47c86:	4620      	mov	r0, r4
}
   47c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   47c8c:	f7e5 bff4 	b.w	2dc78 <nrf_send>

00047c90 <nrf91_socket_offload_recv>:
{
   47c90:	b570      	push	{r4, r5, r6, lr}
   47c92:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   47c94:	4618      	mov	r0, r3
{
   47c96:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   47c98:	f7ff ff70 	bl	47b7c <z_to_nrf_flags>
   47c9c:	462a      	mov	r2, r5
   47c9e:	4603      	mov	r3, r0
   47ca0:	4620      	mov	r0, r4
}
   47ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   47ca6:	f7e6 b833 	b.w	2dd10 <nrf_recv>

00047caa <nrf91_socket_offload_getsockopt>:
{
   47caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   47cae:	461c      	mov	r4, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   47cb0:	2300      	movs	r3, #0
{
   47cb2:	b086      	sub	sp, #24
   47cb4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   47cb8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   47cbc:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   47cc0:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   47cc4:	4607      	mov	r7, r0
   47cc6:	460d      	mov	r5, r1
   47cc8:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   47cca:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   47ccc:	d00d      	beq.n	47cea <nrf91_socket_offload_getsockopt+0x40>
   47cce:	dc08      	bgt.n	47ce2 <nrf91_socket_offload_getsockopt+0x38>
   47cd0:	2901      	cmp	r1, #1
   47cd2:	d00a      	beq.n	47cea <nrf91_socket_offload_getsockopt+0x40>
	errno = ENOPROTOOPT;
   47cd4:	f7fe fef6 	bl	46ac4 <__errno>
   47cd8:	236d      	movs	r3, #109	; 0x6d
	return retval;
   47cda:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   47cde:	6003      	str	r3, [r0, #0]
	return retval;
   47ce0:	e029      	b.n	47d36 <nrf91_socket_offload_getsockopt+0x8c>
	switch (z_in_level) {
   47ce2:	f2a1 2302 	subw	r3, r1, #514	; 0x202
   47ce6:	2b01      	cmp	r3, #1
   47ce8:	d8f4      	bhi.n	47cd4 <nrf91_socket_offload_getsockopt+0x2a>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   47cea:	aa02      	add	r2, sp, #8
   47cec:	4631      	mov	r1, r6
   47cee:	4628      	mov	r0, r5
   47cf0:	f7dd fb86 	bl	25400 <z_to_nrf_optname>
   47cf4:	2800      	cmp	r0, #0
   47cf6:	dbed      	blt.n	47cd4 <nrf91_socket_offload_getsockopt+0x2a>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   47cf8:	2d01      	cmp	r5, #1
   47cfa:	d120      	bne.n	47d3e <nrf91_socket_offload_getsockopt+0x94>
   47cfc:	2e14      	cmp	r6, #20
   47cfe:	d11e      	bne.n	47d3e <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   47d00:	2308      	movs	r3, #8
   47d02:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   47d04:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   47d06:	aa03      	add	r2, sp, #12
   47d08:	9200      	str	r2, [sp, #0]
   47d0a:	4638      	mov	r0, r7
   47d0c:	9a02      	ldr	r2, [sp, #8]
   47d0e:	4629      	mov	r1, r5
   47d10:	f7e6 f894 	bl	2de3c <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   47d14:	4607      	mov	r7, r0
   47d16:	b970      	cbnz	r0, 47d36 <nrf91_socket_offload_getsockopt+0x8c>
   47d18:	b16c      	cbz	r4, 47d36 <nrf91_socket_offload_getsockopt+0x8c>
		*optlen = nrf_optlen;
   47d1a:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   47d1c:	2d01      	cmp	r5, #1
		*optlen = nrf_optlen;
   47d1e:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   47d22:	d108      	bne.n	47d36 <nrf91_socket_offload_getsockopt+0x8c>
			if (optname == SO_ERROR) {
   47d24:	2e04      	cmp	r6, #4
   47d26:	d10c      	bne.n	47d42 <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   47d28:	6820      	ldr	r0, [r4, #0]
   47d2a:	f7dd fa15 	bl	25158 <bsd_os_errno_set>
				*(int *)optval = errno;
   47d2e:	f7fe fec9 	bl	46ac4 <__errno>
   47d32:	6803      	ldr	r3, [r0, #0]
   47d34:	6023      	str	r3, [r4, #0]
}
   47d36:	4638      	mov	r0, r7
   47d38:	b006      	add	sp, #24
   47d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   47d3e:	4623      	mov	r3, r4
   47d40:	e7e1      	b.n	47d06 <nrf91_socket_offload_getsockopt+0x5c>
			} else if (optname == SO_RCVTIMEO) {
   47d42:	2e14      	cmp	r6, #20
   47d44:	d1f7      	bne.n	47d36 <nrf91_socket_offload_getsockopt+0x8c>
				((struct timeval *)optval)->tv_sec =
   47d46:	9b04      	ldr	r3, [sp, #16]
   47d48:	6023      	str	r3, [r4, #0]
				((struct timeval *)optval)->tv_usec =
   47d4a:	9b05      	ldr	r3, [sp, #20]
   47d4c:	6063      	str	r3, [r4, #4]
				*optlen = sizeof(struct timeval);
   47d4e:	2308      	movs	r3, #8
   47d50:	f8c8 3000 	str.w	r3, [r8]
   47d54:	e7ef      	b.n	47d36 <nrf91_socket_offload_getsockopt+0x8c>

00047d56 <nrf91_socket_offload_poll>:
{
   47d56:	b5f0      	push	{r4, r5, r6, r7, lr}
   47d58:	b091      	sub	sp, #68	; 0x44
   47d5a:	4605      	mov	r5, r0
   47d5c:	460c      	mov	r4, r1
   47d5e:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   47d60:	2100      	movs	r1, #0
   47d62:	2240      	movs	r2, #64	; 0x40
   47d64:	4668      	mov	r0, sp
   47d66:	f7f7 fff1 	bl	3fd4c <memset>
	for (int i = 0; i < nfds; i++) {
   47d6a:	2204      	movs	r2, #4
   47d6c:	2100      	movs	r1, #0
   47d6e:	42a1      	cmp	r1, r4
   47d70:	db0c      	blt.n	47d8c <nrf91_socket_offload_poll+0x36>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   47d72:	4632      	mov	r2, r6
   47d74:	4621      	mov	r1, r4
   47d76:	4668      	mov	r0, sp
   47d78:	f7e6 f880 	bl	2de7c <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   47d7c:	2200      	movs	r2, #0
   47d7e:	462b      	mov	r3, r5
		fds[i].revents = 0;
   47d80:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   47d82:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   47d84:	42a2      	cmp	r2, r4
   47d86:	db1b      	blt.n	47dc0 <nrf91_socket_offload_poll+0x6a>
}
   47d88:	b011      	add	sp, #68	; 0x44
   47d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   47d8c:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   47d90:	5aa8      	ldrh	r0, [r5, r2]
		tmp[i].handle = fds[i].fd;
   47d92:	f84d 3031 	str.w	r3, [sp, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   47d96:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   47d98:	bf48      	it	mi
   47d9a:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
	for (int i = 0; i < nfds; i++) {
   47d9e:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   47da2:	bf44      	itt	mi
   47da4:	f043 0301 	orrmi.w	r3, r3, #1
   47da8:	f82d 3002 	strhmi.w	r3, [sp, r2]
		if (fds[i].events & POLLOUT) {
   47dac:	0747      	lsls	r7, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   47dae:	bf42      	ittt	mi
   47db0:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
   47db4:	f043 0302 	orrmi.w	r3, r3, #2
   47db8:	f82d 3002 	strhmi.w	r3, [sp, r2]
   47dbc:	3208      	adds	r2, #8
   47dbe:	e7d6      	b.n	47d6e <nrf91_socket_offload_poll+0x18>
		if (tmp[i].returned & NRF_POLLIN) {
   47dc0:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   47dc4:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   47dc6:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   47dc8:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   47dca:	bf48      	it	mi
   47dcc:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   47dce:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   47dd0:	bf48      	it	mi
   47dd2:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   47dd4:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   47dd8:	bf44      	itt	mi
   47dda:	f045 0504 	orrmi.w	r5, r5, #4
   47dde:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   47de0:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   47de2:	bf48      	it	mi
   47de4:	88dd      	ldrhmi	r5, [r3, #6]
   47de6:	f103 0308 	add.w	r3, r3, #8
   47dea:	bf44      	itt	mi
   47dec:	f045 0508 	orrmi.w	r5, r5, #8
   47df0:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   47df4:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   47df6:	bf42      	ittt	mi
   47df8:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   47dfc:	f045 0520 	orrmi.w	r5, r5, #32
   47e00:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   47e04:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   47e06:	bf42      	ittt	mi
   47e08:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   47e0c:	f041 0110 	orrmi.w	r1, r1, #16
   47e10:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   47e14:	e7b6      	b.n	47d84 <nrf91_socket_offload_poll+0x2e>

00047e16 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   47e16:	f7e5 bfbd 	b.w	2dd94 <nrf_listen>

00047e1a <nrf91_socket_offload_close>:
	return nrf_close(sd);
   47e1a:	f7e5 bf03 	b.w	2dc24 <nrf_close>

00047e1e <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   47e1e:	2903      	cmp	r1, #3
{
   47e20:	b508      	push	{r3, lr}
	switch (cmd) {
   47e22:	d00b      	beq.n	47e3c <nrf91_socket_offload_fcntl+0x1e>
   47e24:	2904      	cmp	r1, #4
   47e26:	d111      	bne.n	47e4c <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   47e28:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   47e2a:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   47e2e:	d10d      	bne.n	47e4c <nrf91_socket_offload_fcntl+0x2e>
}
   47e30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   47e34:	1392      	asrs	r2, r2, #14
   47e36:	2101      	movs	r1, #1
   47e38:	f7e6 b822 	b.w	2de80 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   47e3c:	2200      	movs	r2, #0
   47e3e:	2102      	movs	r1, #2
   47e40:	f7e6 f81e 	bl	2de80 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   47e44:	0380      	lsls	r0, r0, #14
   47e46:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   47e4a:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   47e4c:	f7fe fe3a 	bl	46ac4 <__errno>
   47e50:	2316      	movs	r3, #22
   47e52:	6003      	str	r3, [r0, #0]
	return retval;
   47e54:	f04f 30ff 	mov.w	r0, #4294967295
   47e58:	e7f7      	b.n	47e4a <nrf91_socket_offload_fcntl+0x2c>

00047e5a <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   47e5a:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   47e5c:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   47e5e:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   47e60:	4603      	mov	r3, r0
{
   47e62:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   47e64:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   47e68:	f101 0210 	add.w	r2, r1, #16
   47e6c:	f102 0410 	add.w	r4, r2, #16
   47e70:	f852 5b04 	ldr.w	r5, [r2], #4
   47e74:	42a2      	cmp	r2, r4
   47e76:	f843 5b04 	str.w	r5, [r3], #4
   47e7a:	d1f9      	bne.n	47e70 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   47e7c:	6a0b      	ldr	r3, [r1, #32]
   47e7e:	7503      	strb	r3, [r0, #20]
}
   47e80:	bd30      	pop	{r4, r5, pc}

00047e82 <nrf91_socket_offload_getaddrinfo>:
{
   47e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   47e86:	4614      	mov	r4, r2
   47e88:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   47e8a:	2100      	movs	r1, #0
{
   47e8c:	b092      	sub	sp, #72	; 0x48
   47e8e:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   47e90:	2220      	movs	r2, #32
   47e92:	a802      	add	r0, sp, #8
{
   47e94:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   47e96:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   47e98:	f7f7 ff58 	bl	3fd4c <memset>
	if (hints != NULL) {
   47e9c:	b19c      	cbz	r4, 47ec6 <nrf91_socket_offload_getaddrinfo+0x44>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   47e9e:	a902      	add	r1, sp, #8
   47ea0:	4620      	mov	r0, r4
   47ea2:	f7ff fec3 	bl	47c2c <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   47ea6:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   47eaa:	f000 80b0 	beq.w	4800e <nrf91_socket_offload_getaddrinfo+0x18c>
		} else if (error == -EAFNOSUPPORT) {
   47eae:	306a      	adds	r0, #106	; 0x6a
   47eb0:	f000 80b0 	beq.w	48014 <nrf91_socket_offload_getaddrinfo+0x192>
		if (hints->ai_next != NULL) {
   47eb4:	69e0      	ldr	r0, [r4, #28]
   47eb6:	b120      	cbz	r0, 47ec2 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   47eb8:	ac0a      	add	r4, sp, #40	; 0x28
   47eba:	4621      	mov	r1, r4
   47ebc:	f7ff feb6 	bl	47c2c <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   47ec0:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   47ec2:	aa02      	add	r2, sp, #8
   47ec4:	e000      	b.n	47ec8 <nrf91_socket_offload_getaddrinfo+0x46>
	struct nrf_addrinfo *nrf_hints_ptr = NULL;
   47ec6:	4622      	mov	r2, r4
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   47ec8:	4631      	mov	r1, r6
   47eca:	4628      	mov	r0, r5
   47ecc:	ab01      	add	r3, sp, #4
   47ece:	f7e5 ffd1 	bl	2de74 <nrf_getaddrinfo>
	*res = NULL;
   47ed2:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   47ed4:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   47ed6:	f8c8 7000 	str.w	r7, [r8]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   47eda:	4605      	mov	r5, r0
   47edc:	2800      	cmp	r0, #0
   47ede:	d04c      	beq.n	47f7a <nrf91_socket_offload_getaddrinfo+0xf8>
		nrf91_socket_offload_freeaddrinfo(*res);
   47ee0:	f8d8 0000 	ldr.w	r0, [r8]
   47ee4:	f7ff fe95 	bl	47c12 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   47ee8:	2300      	movs	r3, #0
   47eea:	f8c8 3000 	str.w	r3, [r8]
   47eee:	e046      	b.n	47f7e <nrf91_socket_offload_getaddrinfo+0xfc>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   47ef0:	2020      	movs	r0, #32
   47ef2:	f7f4 f923 	bl	3c13c <k_malloc>
		if (next_z_res == NULL) {
   47ef6:	4604      	mov	r4, r0
   47ef8:	2800      	cmp	r0, #0
   47efa:	f000 8083 	beq.w	48004 <nrf91_socket_offload_getaddrinfo+0x182>
	family = nrf_to_z_family(nrf_in->ai_family);
   47efe:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   47f00:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   47f02:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   47f04:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   47f08:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   47f0a:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   47f0c:	d03e      	beq.n	47f8c <nrf91_socket_offload_getaddrinfo+0x10a>
   47f0e:	dc09      	bgt.n	47f24 <nrf91_socket_offload_getaddrinfo+0xa2>
   47f10:	2a01      	cmp	r2, #1
   47f12:	d00d      	beq.n	47f30 <nrf91_socket_offload_getaddrinfo+0xae>
   47f14:	2a02      	cmp	r2, #2
   47f16:	d03d      	beq.n	47f94 <nrf91_socket_offload_getaddrinfo+0x112>
			k_free(next_z_res);
   47f18:	4620      	mov	r0, r4
   47f1a:	f000 fd54 	bl	489c6 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   47f1e:	f06f 0508 	mvn.w	r5, #8
   47f22:	e7dd      	b.n	47ee0 <nrf91_socket_offload_getaddrinfo+0x5e>
	switch (nrf_family) {
   47f24:	2a0a      	cmp	r2, #10
   47f26:	d033      	beq.n	47f90 <nrf91_socket_offload_getaddrinfo+0x10e>
   47f28:	2a66      	cmp	r2, #102	; 0x66
   47f2a:	d1f5      	bne.n	47f18 <nrf91_socket_offload_getaddrinfo+0x96>
		return AF_LTE;
   47f2c:	4613      	mov	r3, r2
   47f2e:	e000      	b.n	47f32 <nrf91_socket_offload_getaddrinfo+0xb0>
		return AF_LOCAL;
   47f30:	2367      	movs	r3, #103	; 0x67
	z_out->ai_family = family;
   47f32:	6063      	str	r3, [r4, #4]
	switch (proto) {
   47f34:	68f3      	ldr	r3, [r6, #12]
   47f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   47f3a:	d04c      	beq.n	47fd6 <nrf91_socket_offload_getaddrinfo+0x154>
   47f3c:	dc2c      	bgt.n	47f98 <nrf91_socket_offload_getaddrinfo+0x116>
   47f3e:	2b01      	cmp	r3, #1
   47f40:	d04e      	beq.n	47fe0 <nrf91_socket_offload_getaddrinfo+0x15e>
   47f42:	2b02      	cmp	r3, #2
   47f44:	d04a      	beq.n	47fdc <nrf91_socket_offload_getaddrinfo+0x15a>
   47f46:	2b00      	cmp	r3, #0
   47f48:	d12e      	bne.n	47fa8 <nrf91_socket_offload_getaddrinfo+0x126>
	if (nrf_in->ai_family == NRF_AF_INET) {
   47f4a:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   47f4c:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   47f4e:	d149      	bne.n	47fe4 <nrf91_socket_offload_getaddrinfo+0x162>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   47f50:	2008      	movs	r0, #8
   47f52:	f7f4 f8f3 	bl	3c13c <k_malloc>
   47f56:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   47f58:	2800      	cmp	r0, #0
   47f5a:	d050      	beq.n	47ffe <nrf91_socket_offload_getaddrinfo+0x17c>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   47f5c:	2308      	movs	r3, #8
   47f5e:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   47f60:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   47f62:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   47f64:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   47f66:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   47f68:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   47f6a:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   47f6c:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   47f6e:	2f00      	cmp	r7, #0
   47f70:	d14b      	bne.n	4800a <nrf91_socket_offload_getaddrinfo+0x188>
			*res = next_z_res;
   47f72:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   47f76:	4627      	mov	r7, r4
   47f78:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   47f7a:	2e00      	cmp	r6, #0
   47f7c:	d1b8      	bne.n	47ef0 <nrf91_socket_offload_getaddrinfo+0x6e>
	nrf_freeaddrinfo(nrf_res);
   47f7e:	9801      	ldr	r0, [sp, #4]
   47f80:	f7e5 ff7a 	bl	2de78 <nrf_freeaddrinfo>
}
   47f84:	4628      	mov	r0, r5
   47f86:	b012      	add	sp, #72	; 0x48
   47f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return AF_PACKET;
   47f8c:	2303      	movs	r3, #3
   47f8e:	e7d0      	b.n	47f32 <nrf91_socket_offload_getaddrinfo+0xb0>
		return AF_INET6;
   47f90:	2302      	movs	r3, #2
   47f92:	e7ce      	b.n	47f32 <nrf91_socket_offload_getaddrinfo+0xb0>
		return AF_INET;
   47f94:	2301      	movs	r3, #1
   47f96:	e7cc      	b.n	47f32 <nrf91_socket_offload_getaddrinfo+0xb0>
	switch (proto) {
   47f98:	f240 2101 	movw	r1, #513	; 0x201
   47f9c:	428b      	cmp	r3, r1
   47f9e:	d0d4      	beq.n	47f4a <nrf91_socket_offload_getaddrinfo+0xc8>
   47fa0:	dc0d      	bgt.n	47fbe <nrf91_socket_offload_getaddrinfo+0x13c>
   47fa2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   47fa6:	d013      	beq.n	47fd0 <nrf91_socket_offload_getaddrinfo+0x14e>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   47fa8:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   47fac:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   47fae:	2300      	movs	r3, #0
   47fb0:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   47fb2:	4620      	mov	r0, r4
   47fb4:	f000 fd07 	bl	489c6 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   47fb8:	f06f 0506 	mvn.w	r5, #6
   47fbc:	e790      	b.n	47ee0 <nrf91_socket_offload_getaddrinfo+0x5e>
	switch (proto) {
   47fbe:	f240 2102 	movw	r1, #514	; 0x202
   47fc2:	428b      	cmp	r3, r1
   47fc4:	d0c1      	beq.n	47f4a <nrf91_socket_offload_getaddrinfo+0xc8>
   47fc6:	f240 2103 	movw	r1, #515	; 0x203
   47fca:	428b      	cmp	r3, r1
   47fcc:	d0bd      	beq.n	47f4a <nrf91_socket_offload_getaddrinfo+0xc8>
   47fce:	e7eb      	b.n	47fa8 <nrf91_socket_offload_getaddrinfo+0x126>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   47fd0:	f240 1311 	movw	r3, #273	; 0x111
   47fd4:	e7b9      	b.n	47f4a <nrf91_socket_offload_getaddrinfo+0xc8>
   47fd6:	f44f 7381 	mov.w	r3, #258	; 0x102
   47fda:	e7b6      	b.n	47f4a <nrf91_socket_offload_getaddrinfo+0xc8>
   47fdc:	2311      	movs	r3, #17
   47fde:	e7b4      	b.n	47f4a <nrf91_socket_offload_getaddrinfo+0xc8>
   47fe0:	2306      	movs	r3, #6
   47fe2:	e7b2      	b.n	47f4a <nrf91_socket_offload_getaddrinfo+0xc8>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   47fe4:	2a0a      	cmp	r2, #10
   47fe6:	d1e4      	bne.n	47fb2 <nrf91_socket_offload_getaddrinfo+0x130>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   47fe8:	2018      	movs	r0, #24
   47fea:	f7f4 f8a7 	bl	3c13c <k_malloc>
   47fee:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   47ff0:	b128      	cbz	r0, 47ffe <nrf91_socket_offload_getaddrinfo+0x17c>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   47ff2:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   47ff4:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   47ff6:	6123      	str	r3, [r4, #16]
		nrf_to_z_ipv6(z_out->ai_addr,
   47ff8:	f7ff ff2f 	bl	47e5a <nrf_to_z_ipv6>
   47ffc:	e7b7      	b.n	47f6e <nrf91_socket_offload_getaddrinfo+0xec>
			k_free(next_z_res);
   47ffe:	4620      	mov	r0, r4
   48000:	f000 fce1 	bl	489c6 <k_free>
			retval = DNS_EAI_MEMORY;
   48004:	f06f 0509 	mvn.w	r5, #9
   48008:	e76a      	b.n	47ee0 <nrf91_socket_offload_getaddrinfo+0x5e>
			latest_z_res->ai_next = next_z_res;
   4800a:	61fc      	str	r4, [r7, #28]
   4800c:	e7b3      	b.n	47f76 <nrf91_socket_offload_getaddrinfo+0xf4>
			return DNS_EAI_SOCKTYPE;
   4800e:	f06f 0506 	mvn.w	r5, #6
   48012:	e7b7      	b.n	47f84 <nrf91_socket_offload_getaddrinfo+0x102>
			return DNS_EAI_ADDRFAMILY;
   48014:	f06f 0508 	mvn.w	r5, #8
   48018:	e7b4      	b.n	47f84 <nrf91_socket_offload_getaddrinfo+0x102>

0004801a <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   4801a:	2224      	movs	r2, #36	; 0x24
{
   4801c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   4801e:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   48020:	8842      	ldrh	r2, [r0, #2]
{
   48022:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   48024:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   48026:	220a      	movs	r2, #10
{
   48028:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   4802a:	604a      	str	r2, [r1, #4]
   4802c:	f101 0610 	add.w	r6, r1, #16
   48030:	1d02      	adds	r2, r0, #4
   48032:	f100 0714 	add.w	r7, r0, #20
   48036:	4635      	mov	r5, r6
   48038:	6810      	ldr	r0, [r2, #0]
   4803a:	6851      	ldr	r1, [r2, #4]
   4803c:	3208      	adds	r2, #8
   4803e:	c503      	stmia	r5!, {r0, r1}
   48040:	42ba      	cmp	r2, r7
   48042:	462e      	mov	r6, r5
   48044:	d1f7      	bne.n	48036 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   48046:	7d22      	ldrb	r2, [r4, #20]
   48048:	621a      	str	r2, [r3, #32]
}
   4804a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004804c <nrf91_socket_offload_sendto>:
{
   4804c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   48050:	b08d      	sub	sp, #52	; 0x34
   48052:	9c14      	ldr	r4, [sp, #80]	; 0x50
   48054:	4605      	mov	r5, r0
   48056:	460e      	mov	r6, r1
   48058:	4617      	mov	r7, r2
   4805a:	4698      	mov	r8, r3
	if (to == NULL) {
   4805c:	b96c      	cbnz	r4, 4807a <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   4805e:	4618      	mov	r0, r3
   48060:	f7ff fd8c 	bl	47b7c <z_to_nrf_flags>
   48064:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   48068:	4603      	mov	r3, r0
   4806a:	463a      	mov	r2, r7
   4806c:	4631      	mov	r1, r6
   4806e:	4628      	mov	r0, r5
   48070:	f7e5 fde6 	bl	2dc40 <nrf_sendto>
}
   48074:	b00d      	add	sp, #52	; 0x34
   48076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   4807a:	8823      	ldrh	r3, [r4, #0]
   4807c:	2b01      	cmp	r3, #1
   4807e:	d110      	bne.n	480a2 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   48080:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   48082:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   48084:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   48088:	2302      	movs	r3, #2
   4808a:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   4808c:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   4808e:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   48090:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   48092:	f88d 100c 	strb.w	r1, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   48096:	f7ff fd71 	bl	47b7c <z_to_nrf_flags>
   4809a:	ab03      	add	r3, sp, #12
   4809c:	9101      	str	r1, [sp, #4]
   4809e:	9300      	str	r3, [sp, #0]
   480a0:	e7e2      	b.n	48068 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   480a2:	2b02      	cmp	r3, #2
   480a4:	d10c      	bne.n	480c0 <nrf91_socket_offload_sendto+0x74>
		z_to_nrf_ipv6(to, &ipv6);
   480a6:	f10d 090c 	add.w	r9, sp, #12
   480aa:	4649      	mov	r1, r9
   480ac:	4620      	mov	r0, r4
   480ae:	f7ff ffb4 	bl	4801a <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   480b2:	4640      	mov	r0, r8
   480b4:	f7ff fd62 	bl	47b7c <z_to_nrf_flags>
   480b8:	2324      	movs	r3, #36	; 0x24
   480ba:	e9cd 9300 	strd	r9, r3, [sp]
   480be:	e7d3      	b.n	48068 <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   480c0:	f7fe fd00 	bl	46ac4 <__errno>
   480c4:	2386      	movs	r3, #134	; 0x86
   480c6:	6003      	str	r3, [r0, #0]
	return retval;
   480c8:	f04f 30ff 	mov.w	r0, #4294967295
   480cc:	e7d2      	b.n	48074 <nrf91_socket_offload_sendto+0x28>

000480ce <nrf91_socket_offload_recvfrom>:
{
   480ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   480d2:	4680      	mov	r8, r0
   480d4:	b08d      	sub	sp, #52	; 0x34
   480d6:	4618      	mov	r0, r3
   480d8:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   480dc:	4691      	mov	r9, r2
   480de:	f7ff fd4d 	bl	47b7c <z_to_nrf_flags>
   480e2:	4603      	mov	r3, r0
	if (from == NULL) {
   480e4:	b954      	cbnz	r4, 480fc <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   480e6:	e9cd 4400 	strd	r4, r4, [sp]
   480ea:	464a      	mov	r2, r9
   480ec:	4640      	mov	r0, r8
   480ee:	f7e5 fdf3 	bl	2dcd8 <nrf_recvfrom>
   480f2:	4605      	mov	r5, r0
}
   480f4:	4628      	mov	r0, r5
   480f6:	b00d      	add	sp, #52	; 0x34
   480f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   480fc:	2224      	movs	r2, #36	; 0x24
   480fe:	ad0c      	add	r5, sp, #48	; 0x30
   48100:	f845 2d28 	str.w	r2, [r5, #-40]!
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   48104:	af03      	add	r7, sp, #12
   48106:	9501      	str	r5, [sp, #4]
   48108:	9700      	str	r7, [sp, #0]
   4810a:	464a      	mov	r2, r9
   4810c:	4640      	mov	r0, r8
   4810e:	f7e5 fde3 	bl	2dcd8 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   48112:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   48114:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   48116:	2b02      	cmp	r3, #2
   48118:	d109      	bne.n	4812e <nrf91_socket_offload_recvfrom+0x60>
	ptr->sin_port = nrf_in->sin_port;
   4811a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   4811e:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   48120:	2301      	movs	r3, #1
   48122:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   48124:	9b06      	ldr	r3, [sp, #24]
   48126:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   48128:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   4812a:	6033      	str	r3, [r6, #0]
	return retval;
   4812c:	e7e2      	b.n	480f4 <nrf91_socket_offload_recvfrom+0x26>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   4812e:	2b0a      	cmp	r3, #10
   48130:	d1e0      	bne.n	480f4 <nrf91_socket_offload_recvfrom+0x26>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   48132:	4639      	mov	r1, r7
   48134:	4620      	mov	r0, r4
   48136:	f7ff fe90 	bl	47e5a <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   4813a:	2318      	movs	r3, #24
   4813c:	e7f5      	b.n	4812a <nrf91_socket_offload_recvfrom+0x5c>

0004813e <nrf91_socket_offload_connect>:
{
   4813e:	b530      	push	{r4, r5, lr}
	if (addr->sa_family == AF_INET) {
   48140:	880c      	ldrh	r4, [r1, #0]
{
   48142:	b08b      	sub	sp, #44	; 0x2c
	if (addr->sa_family == AF_INET) {
   48144:	2c01      	cmp	r4, #1
{
   48146:	4605      	mov	r5, r0
   48148:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   4814a:	d10e      	bne.n	4816a <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   4814c:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   4814e:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   48150:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   48154:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   48156:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   48158:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   4815a:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   4815e:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   48160:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   48162:	f7e5 fe05 	bl	2dd70 <nrf_connect>
}
   48166:	b00b      	add	sp, #44	; 0x2c
   48168:	bd30      	pop	{r4, r5, pc}
	} else if (addr->sa_family == AF_INET6) {
   4816a:	2c02      	cmp	r4, #2
   4816c:	d107      	bne.n	4817e <nrf91_socket_offload_connect+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   4816e:	a901      	add	r1, sp, #4
   48170:	4618      	mov	r0, r3
   48172:	f7ff ff52 	bl	4801a <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   48176:	2224      	movs	r2, #36	; 0x24
   48178:	a901      	add	r1, sp, #4
   4817a:	4628      	mov	r0, r5
   4817c:	e7f1      	b.n	48162 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   4817e:	f7e5 fdf7 	bl	2dd70 <nrf_connect>
		if (retval < 0) {
   48182:	2800      	cmp	r0, #0
   48184:	daef      	bge.n	48166 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   48186:	f7fe fc9d 	bl	46ac4 <__errno>
   4818a:	2386      	movs	r3, #134	; 0x86
   4818c:	6003      	str	r3, [r0, #0]
   4818e:	f04f 30ff 	mov.w	r0, #4294967295
   48192:	e7e8      	b.n	48166 <nrf91_socket_offload_connect+0x28>

00048194 <nrf91_socket_offload_accept>:
{
   48194:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   48196:	2708      	movs	r7, #8
{
   48198:	b085      	sub	sp, #20
   4819a:	4616      	mov	r6, r2
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   4819c:	aa04      	add	r2, sp, #16
{
   4819e:	460c      	mov	r4, r1
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   481a0:	f842 7d0c 	str.w	r7, [r2, #-12]!
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   481a4:	eb0d 0107 	add.w	r1, sp, r7
   481a8:	f7e5 fe04 	bl	2ddb4 <nrf_accept>
	if (retval < 0) {
   481ac:	1e05      	subs	r5, r0, #0
   481ae:	db1a      	blt.n	481e6 <nrf91_socket_offload_accept+0x52>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   481b0:	9b03      	ldr	r3, [sp, #12]
   481b2:	2b02      	cmp	r3, #2
   481b4:	d10a      	bne.n	481cc <nrf91_socket_offload_accept+0x38>
	ptr->sin_port = nrf_in->sin_port;
   481b6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   481ba:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   481bc:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   481be:	2301      	movs	r3, #1
   481c0:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   481c2:	9b05      	ldr	r3, [sp, #20]
   481c4:	6063      	str	r3, [r4, #4]
}
   481c6:	4628      	mov	r0, r5
   481c8:	b005      	add	sp, #20
   481ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   481cc:	2b0a      	cmp	r3, #10
   481ce:	d106      	bne.n	481de <nrf91_socket_offload_accept+0x4a>
		*addrlen = sizeof(struct sockaddr_in6);
   481d0:	2318      	movs	r3, #24
		nrf_to_z_ipv6(addr, (const struct nrf_sockaddr_in6 *)&nrf_addr);
   481d2:	a902      	add	r1, sp, #8
		*addrlen = sizeof(struct sockaddr_in6);
   481d4:	6033      	str	r3, [r6, #0]
		nrf_to_z_ipv6(addr, (const struct nrf_sockaddr_in6 *)&nrf_addr);
   481d6:	4620      	mov	r0, r4
   481d8:	f7ff fe3f 	bl	47e5a <nrf_to_z_ipv6>
   481dc:	e7f3      	b.n	481c6 <nrf91_socket_offload_accept+0x32>
	errno = ENOTSUP;
   481de:	f7fe fc71 	bl	46ac4 <__errno>
   481e2:	2386      	movs	r3, #134	; 0x86
   481e4:	6003      	str	r3, [r0, #0]
		return -1;
   481e6:	f04f 35ff 	mov.w	r5, #4294967295
   481ea:	e7ec      	b.n	481c6 <nrf91_socket_offload_accept+0x32>

000481ec <nrf91_socket_offload_socket>:
{
   481ec:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   481ee:	b280      	uxth	r0, r0
   481f0:	f7ff fcce 	bl	47b90 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   481f4:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   481f8:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   481fa:	d106      	bne.n	4820a <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   481fc:	f7fe fc62 	bl	46ac4 <__errno>
   48200:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   48202:	6003      	str	r3, [r0, #0]
}
   48204:	f04f 30ff 	mov.w	r0, #4294967295
   48208:	bd10      	pop	{r4, pc}
	switch (socktype) {
   4820a:	2903      	cmp	r1, #3
   4820c:	d003      	beq.n	48216 <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   4820e:	2904      	cmp	r1, #4
   48210:	bf08      	it	eq
   48212:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   48216:	4610      	mov	r0, r2
   48218:	f7ff fcd0 	bl	47bbc <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   4821c:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   48220:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   48222:	d103      	bne.n	4822c <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   48224:	f7fe fc4e 	bl	46ac4 <__errno>
   48228:	237b      	movs	r3, #123	; 0x7b
   4822a:	e7ea      	b.n	48202 <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   4822c:	4620      	mov	r0, r4
}
   4822e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   48232:	f7e5 bce5 	b.w	2dc00 <nrf_socket>

00048236 <nrf91_socket_offload_setsockopt>:
{
   48236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   4823a:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   4823e:	b086      	sub	sp, #24
   48240:	4680      	mov	r8, r0
   48242:	460c      	mov	r4, r1
   48244:	4617      	mov	r7, r2
   48246:	461d      	mov	r5, r3
   48248:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   4824a:	d00d      	beq.n	48268 <nrf91_socket_offload_setsockopt+0x32>
   4824c:	dc08      	bgt.n	48260 <nrf91_socket_offload_setsockopt+0x2a>
   4824e:	2901      	cmp	r1, #1
   48250:	d00a      	beq.n	48268 <nrf91_socket_offload_setsockopt+0x32>
	errno = ENOPROTOOPT;
   48252:	f7fe fc37 	bl	46ac4 <__errno>
   48256:	236d      	movs	r3, #109	; 0x6d
   48258:	6003      	str	r3, [r0, #0]
   4825a:	f04f 30ff 	mov.w	r0, #4294967295
   4825e:	e01b      	b.n	48298 <nrf91_socket_offload_setsockopt+0x62>
	switch (z_in_level) {
   48260:	f2a1 2302 	subw	r3, r1, #514	; 0x202
   48264:	2b01      	cmp	r3, #1
   48266:	d8f4      	bhi.n	48252 <nrf91_socket_offload_setsockopt+0x1c>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   48268:	aa03      	add	r2, sp, #12
   4826a:	4639      	mov	r1, r7
   4826c:	4620      	mov	r0, r4
   4826e:	f7dd f8c7 	bl	25400 <z_to_nrf_optname>
   48272:	2800      	cmp	r0, #0
   48274:	dbed      	blt.n	48252 <nrf91_socket_offload_setsockopt+0x1c>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   48276:	2c01      	cmp	r4, #1
   48278:	d107      	bne.n	4828a <nrf91_socket_offload_setsockopt+0x54>
   4827a:	2f14      	cmp	r7, #20
   4827c:	d105      	bne.n	4828a <nrf91_socket_offload_setsockopt+0x54>
		nrf_optlen = sizeof(struct nrf_timeval);
   4827e:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   48280:	682b      	ldr	r3, [r5, #0]
   48282:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   48284:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   48286:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   48288:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   4828a:	9600      	str	r6, [sp, #0]
   4828c:	462b      	mov	r3, r5
   4828e:	9a03      	ldr	r2, [sp, #12]
   48290:	4621      	mov	r1, r4
   48292:	4640      	mov	r0, r8
   48294:	f7e5 fdb6 	bl	2de04 <nrf_setsockopt>
}
   48298:	b006      	add	sp, #24
   4829a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004829e <nrf91_socket_offload_bind>:
{
   4829e:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   482a0:	880a      	ldrh	r2, [r1, #0]
{
   482a2:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   482a4:	2a01      	cmp	r2, #1
{
   482a6:	4604      	mov	r4, r0
   482a8:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   482aa:	d10e      	bne.n	482ca <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   482ac:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   482ae:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   482b0:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   482b4:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   482b6:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   482b8:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   482ba:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   482be:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   482c0:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   482c2:	f7e5 fd8d 	bl	2dde0 <nrf_bind>
}
   482c6:	b00a      	add	sp, #40	; 0x28
   482c8:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   482ca:	2a02      	cmp	r2, #2
   482cc:	d107      	bne.n	482de <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   482ce:	a901      	add	r1, sp, #4
   482d0:	4618      	mov	r0, r3
   482d2:	f7ff fea2 	bl	4801a <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   482d6:	2224      	movs	r2, #36	; 0x24
   482d8:	a901      	add	r1, sp, #4
   482da:	4620      	mov	r0, r4
   482dc:	e7f1      	b.n	482c2 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   482de:	f7fe fbf1 	bl	46ac4 <__errno>
   482e2:	2386      	movs	r3, #134	; 0x86
   482e4:	6003      	str	r3, [r0, #0]
   482e6:	f04f 30ff 	mov.w	r0, #4294967295
   482ea:	e7ec      	b.n	482c6 <nrf91_socket_offload_bind+0x28>

000482ec <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   482ec:	ea40 0301 	orr.w	r3, r0, r1
   482f0:	f033 030f 	bics.w	r3, r3, #15
   482f4:	d101      	bne.n	482fa <dk_set_leds_state+0xe>
   482f6:	f7dd b8f7 	b.w	254e8 <dk_set_leds_state.part.0>
}
   482fa:	f06f 0015 	mvn.w	r0, #21
   482fe:	4770      	bx	lr

00048300 <dk_set_leds>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
   48300:	210f      	movs	r1, #15
   48302:	f7ff bff3 	b.w	482ec <dk_set_leds_state>

00048306 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   48306:	6843      	ldr	r3, [r0, #4]
   48308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   4830a:	b103      	cbz	r3, 4830e <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   4830c:	4718      	bx	r3
}
   4830e:	4770      	bx	lr

00048310 <response_handler>:
	write_uart_string(response);
   48310:	4608      	mov	r0, r1
   48312:	f7dd bcbd 	b.w	25c90 <write_uart_string>

00048316 <at_params_list_init>:
{
   48316:	b538      	push	{r3, r4, r5, lr}
   48318:	460d      	mov	r5, r1
	if (list == NULL) {
   4831a:	4604      	mov	r4, r0
   4831c:	b140      	cbz	r0, 48330 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   4831e:	210c      	movs	r1, #12
   48320:	4628      	mov	r0, r5
   48322:	f000 fb55 	bl	489d0 <k_calloc>
   48326:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   48328:	b128      	cbz	r0, 48336 <at_params_list_init+0x20>
	return 0;
   4832a:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   4832c:	6025      	str	r5, [r4, #0]
}
   4832e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   48330:	f06f 0015 	mvn.w	r0, #21
   48334:	e7fb      	b.n	4832e <at_params_list_init+0x18>
		return -ENOMEM;
   48336:	f06f 000b 	mvn.w	r0, #11
   4833a:	e7f8      	b.n	4832e <at_params_list_init+0x18>

0004833c <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   4833c:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   4833e:	4604      	mov	r4, r0
   48340:	b148      	cbz	r0, 48356 <at_params_list_free+0x1a>
   48342:	6843      	ldr	r3, [r0, #4]
   48344:	b13b      	cbz	r3, 48356 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   48346:	2500      	movs	r5, #0
	at_params_list_clear(list);
   48348:	f7de f868 	bl	2641c <at_params_list_clear>
	list->param_count = 0;
   4834c:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   4834e:	6860      	ldr	r0, [r4, #4]
   48350:	f000 fb39 	bl	489c6 <k_free>
	list->params = NULL;
   48354:	6065      	str	r5, [r4, #4]
}
   48356:	bd38      	pop	{r3, r4, r5, pc}

00048358 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   48358:	b538      	push	{r3, r4, r5, lr}
   4835a:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   4835c:	b910      	cbnz	r0, 48364 <at_params_short_put+0xc>
		return -EINVAL;
   4835e:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
}
   48362:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   48364:	6843      	ldr	r3, [r0, #4]
   48366:	2b00      	cmp	r3, #0
   48368:	d0f9      	beq.n	4835e <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   4836a:	f7dd ffeb 	bl	26344 <at_params_get>
	if (param == NULL) {
   4836e:	4604      	mov	r4, r0
   48370:	2800      	cmp	r0, #0
   48372:	d0f4      	beq.n	4835e <at_params_short_put+0x6>
	at_param_clear(param);
   48374:	f7de f830 	bl	263d8 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   48378:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   4837a:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   4837c:	7023      	strb	r3, [r4, #0]
	return 0;
   4837e:	2000      	movs	r0, #0
   48380:	e7ef      	b.n	48362 <at_params_short_put+0xa>

00048382 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   48382:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   48384:	b910      	cbnz	r0, 4838c <at_params_empty_put+0xa>
		return -EINVAL;
   48386:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   4838a:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   4838c:	6843      	ldr	r3, [r0, #4]
   4838e:	2b00      	cmp	r3, #0
   48390:	d0f9      	beq.n	48386 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   48392:	f7dd ffd7 	bl	26344 <at_params_get>
	if (param == NULL) {
   48396:	4604      	mov	r4, r0
   48398:	2800      	cmp	r0, #0
   4839a:	d0f4      	beq.n	48386 <at_params_empty_put+0x4>
	at_param_clear(param);
   4839c:	f7de f81c 	bl	263d8 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   483a0:	2305      	movs	r3, #5
	param->value.int_val = 0;
   483a2:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   483a4:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   483a6:	60a0      	str	r0, [r4, #8]
	return 0;
   483a8:	e7ef      	b.n	4838a <at_params_empty_put+0x8>

000483aa <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   483aa:	b538      	push	{r3, r4, r5, lr}
   483ac:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   483ae:	b910      	cbnz	r0, 483b6 <at_params_int_put+0xc>
		return -EINVAL;
   483b0:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   483b4:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   483b6:	6843      	ldr	r3, [r0, #4]
   483b8:	2b00      	cmp	r3, #0
   483ba:	d0f9      	beq.n	483b0 <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   483bc:	f7dd ffc2 	bl	26344 <at_params_get>
	if (param == NULL) {
   483c0:	4604      	mov	r4, r0
   483c2:	2800      	cmp	r0, #0
   483c4:	d0f4      	beq.n	483b0 <at_params_int_put+0x6>
	at_param_clear(param);
   483c6:	f7de f807 	bl	263d8 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   483ca:	2302      	movs	r3, #2
	param->value.int_val = value;
   483cc:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   483ce:	7023      	strb	r3, [r4, #0]
	return 0;
   483d0:	2000      	movs	r0, #0
   483d2:	e7ef      	b.n	483b4 <at_params_int_put+0xa>

000483d4 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   483d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   483d6:	4616      	mov	r6, r2
   483d8:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   483da:	b910      	cbnz	r0, 483e2 <at_params_string_put+0xe>
		return -EINVAL;
   483dc:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   483e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   483e2:	6843      	ldr	r3, [r0, #4]
   483e4:	2b00      	cmp	r3, #0
   483e6:	d0f9      	beq.n	483dc <at_params_string_put+0x8>
   483e8:	2a00      	cmp	r2, #0
   483ea:	d0f7      	beq.n	483dc <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   483ec:	f7dd ffaa 	bl	26344 <at_params_get>
	if (param == NULL) {
   483f0:	4604      	mov	r4, r0
   483f2:	2800      	cmp	r0, #0
   483f4:	d0f2      	beq.n	483dc <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   483f6:	1c68      	adds	r0, r5, #1
   483f8:	f7f3 fea0 	bl	3c13c <k_malloc>
	if (param_value == NULL) {
   483fc:	4607      	mov	r7, r0
   483fe:	b160      	cbz	r0, 4841a <at_params_string_put+0x46>
   48400:	462a      	mov	r2, r5
   48402:	4631      	mov	r1, r6
   48404:	f7d1 fd54 	bl	19eb0 <memcpy>
	at_param_clear(param);
   48408:	4620      	mov	r0, r4
   4840a:	f7dd ffe5 	bl	263d8 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   4840e:	2303      	movs	r3, #3
	param->size = str_len;
   48410:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   48412:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   48414:	60a7      	str	r7, [r4, #8]
	return 0;
   48416:	2000      	movs	r0, #0
   48418:	e7e2      	b.n	483e0 <at_params_string_put+0xc>
		return -ENOMEM;
   4841a:	f06f 000b 	mvn.w	r0, #11
   4841e:	e7df      	b.n	483e0 <at_params_string_put+0xc>

00048420 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			 const u32_t *array, size_t array_len)
{
   48420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48422:	4616      	mov	r6, r2
   48424:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   48426:	b910      	cbnz	r0, 4842e <at_params_array_put+0xe>
		return -EINVAL;
   48428:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   4842c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   4842e:	6843      	ldr	r3, [r0, #4]
   48430:	2b00      	cmp	r3, #0
   48432:	d0f9      	beq.n	48428 <at_params_array_put+0x8>
   48434:	2a00      	cmp	r2, #0
   48436:	d0f7      	beq.n	48428 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   48438:	f7dd ff84 	bl	26344 <at_params_get>
	if (param == NULL) {
   4843c:	4604      	mov	r4, r0
   4843e:	2800      	cmp	r0, #0
   48440:	d0f2      	beq.n	48428 <at_params_array_put+0x8>
	u32_t *param_value = (u32_t *)k_malloc(array_len);
   48442:	4628      	mov	r0, r5
   48444:	f7f3 fe7a 	bl	3c13c <k_malloc>
	if (param_value == NULL) {
   48448:	4607      	mov	r7, r0
   4844a:	b160      	cbz	r0, 48466 <at_params_array_put+0x46>
   4844c:	462a      	mov	r2, r5
   4844e:	4631      	mov	r1, r6
   48450:	f7d1 fd2e 	bl	19eb0 <memcpy>
	at_param_clear(param);
   48454:	4620      	mov	r0, r4
   48456:	f7dd ffbf 	bl	263d8 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   4845a:	2304      	movs	r3, #4
	param->size = array_len;
   4845c:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   4845e:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   48460:	60a7      	str	r7, [r4, #8]
	return 0;
   48462:	2000      	movs	r0, #0
   48464:	e7e2      	b.n	4842c <at_params_array_put+0xc>
		return -ENOMEM;
   48466:	f06f 000b 	mvn.w	r0, #11
   4846a:	e7df      	b.n	4842c <at_params_array_put+0xc>

0004846c <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   4846c:	b510      	push	{r4, lr}
   4846e:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   48470:	b910      	cbnz	r0, 48478 <at_params_short_get+0xc>
		return -EINVAL;
   48472:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
	return 0;
}
   48476:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   48478:	6843      	ldr	r3, [r0, #4]
   4847a:	2b00      	cmp	r3, #0
   4847c:	d0f9      	beq.n	48472 <at_params_short_get+0x6>
   4847e:	2a00      	cmp	r2, #0
   48480:	d0f7      	beq.n	48472 <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   48482:	f7dd ff5f 	bl	26344 <at_params_get>
	if (param == NULL) {
   48486:	2800      	cmp	r0, #0
   48488:	d0f3      	beq.n	48472 <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   4848a:	7803      	ldrb	r3, [r0, #0]
   4848c:	2b01      	cmp	r3, #1
   4848e:	d1f0      	bne.n	48472 <at_params_short_get+0x6>
	*value = (u16_t)param->value.int_val;
   48490:	6883      	ldr	r3, [r0, #8]
	return 0;
   48492:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   48494:	8023      	strh	r3, [r4, #0]
	return 0;
   48496:	e7ee      	b.n	48476 <at_params_short_get+0xa>

00048498 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   48498:	b510      	push	{r4, lr}
   4849a:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   4849c:	b910      	cbnz	r0, 484a4 <at_params_int_get+0xc>
		return -EINVAL;
   4849e:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   484a2:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   484a4:	6843      	ldr	r3, [r0, #4]
   484a6:	2b00      	cmp	r3, #0
   484a8:	d0f9      	beq.n	4849e <at_params_int_get+0x6>
   484aa:	2a00      	cmp	r2, #0
   484ac:	d0f7      	beq.n	4849e <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   484ae:	f7dd ff49 	bl	26344 <at_params_get>
	if (param == NULL) {
   484b2:	2800      	cmp	r0, #0
   484b4:	d0f3      	beq.n	4849e <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   484b6:	7803      	ldrb	r3, [r0, #0]
   484b8:	3b01      	subs	r3, #1
   484ba:	2b01      	cmp	r3, #1
   484bc:	d8ef      	bhi.n	4849e <at_params_int_get+0x6>
	*value = param->value.int_val;
   484be:	6883      	ldr	r3, [r0, #8]
	return 0;
   484c0:	2000      	movs	r0, #0
	*value = param->value.int_val;
   484c2:	6023      	str	r3, [r4, #0]
	return 0;
   484c4:	e7ed      	b.n	484a2 <at_params_int_get+0xa>

000484c6 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   484c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   484c8:	4616      	mov	r6, r2
   484ca:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   484cc:	b910      	cbnz	r0, 484d4 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   484ce:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   484d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   484d4:	6843      	ldr	r3, [r0, #4]
   484d6:	2b00      	cmp	r3, #0
   484d8:	d0f9      	beq.n	484ce <at_params_string_get+0x8>
   484da:	2a00      	cmp	r2, #0
   484dc:	d0f7      	beq.n	484ce <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   484de:	2c00      	cmp	r4, #0
   484e0:	d0f5      	beq.n	484ce <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   484e2:	f7dd ff2f 	bl	26344 <at_params_get>
	if (param == NULL) {
   484e6:	4607      	mov	r7, r0
   484e8:	2800      	cmp	r0, #0
   484ea:	d0f0      	beq.n	484ce <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   484ec:	7803      	ldrb	r3, [r0, #0]
   484ee:	2b03      	cmp	r3, #3
   484f0:	d1ed      	bne.n	484ce <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   484f2:	f7dd ff49 	bl	26388 <at_param_size>
	if (*len < param_len) {
   484f6:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   484f8:	4605      	mov	r5, r0
	if (*len < param_len) {
   484fa:	4283      	cmp	r3, r0
   484fc:	d307      	bcc.n	4850e <at_params_string_get+0x48>
   484fe:	4602      	mov	r2, r0
   48500:	68b9      	ldr	r1, [r7, #8]
   48502:	4630      	mov	r0, r6
   48504:	f7d1 fcd4 	bl	19eb0 <memcpy>
	*len = param_len;
   48508:	6025      	str	r5, [r4, #0]
	return 0;
   4850a:	2000      	movs	r0, #0
   4850c:	e7e1      	b.n	484d2 <at_params_string_get+0xc>
		return -ENOMEM;
   4850e:	f06f 000b 	mvn.w	r0, #11
   48512:	e7de      	b.n	484d2 <at_params_string_get+0xc>

00048514 <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   48514:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   48516:	4605      	mov	r5, r0
   48518:	b180      	cbz	r0, 4853c <at_params_valid_count_get+0x28>
   4851a:	6843      	ldr	r3, [r0, #4]
   4851c:	b173      	cbz	r3, 4853c <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   4851e:	2100      	movs	r1, #0
   48520:	f7dd ff10 	bl	26344 <at_params_get>
	size_t valid_i = 0;
   48524:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   48526:	b108      	cbz	r0, 4852c <at_params_valid_count_get+0x18>
   48528:	7803      	ldrb	r3, [r0, #0]
   4852a:	b90b      	cbnz	r3, 48530 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   4852c:	4620      	mov	r0, r4
   4852e:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   48530:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   48532:	4621      	mov	r1, r4
   48534:	4628      	mov	r0, r5
   48536:	f7dd ff05 	bl	26344 <at_params_get>
   4853a:	e7f4      	b.n	48526 <at_params_valid_count_get+0x12>
		return -EINVAL;
   4853c:	f06f 0415 	mvn.w	r4, #21
   48540:	e7f4      	b.n	4852c <at_params_valid_count_get+0x18>

00048542 <json_add_str>:
{
   48542:	b538      	push	{r3, r4, r5, lr}
   48544:	460d      	mov	r5, r1
	if (parent == NULL || str == NULL || item == NULL) {
   48546:	4604      	mov	r4, r0
   48548:	b158      	cbz	r0, 48562 <json_add_str+0x20>
   4854a:	b152      	cbz	r2, 48562 <json_add_str+0x20>
	json_str = cJSON_CreateString(item);
   4854c:	4610      	mov	r0, r2
   4854e:	f7dc fcd9 	bl	24f04 <cJSON_CreateString>
	if (json_str == NULL) {
   48552:	4602      	mov	r2, r0
   48554:	b140      	cbz	r0, 48568 <json_add_str+0x26>
	cJSON_AddItemToObject(parent, str, item);
   48556:	4620      	mov	r0, r4
   48558:	4629      	mov	r1, r5
   4855a:	f7ff faa0 	bl	47a9e <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   4855e:	2000      	movs	r0, #0
}
   48560:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   48562:	f06f 0015 	mvn.w	r0, #21
   48566:	e7fb      	b.n	48560 <json_add_str+0x1e>
		return -ENOMEM;
   48568:	f06f 000b 	mvn.w	r0, #11
   4856c:	e7f8      	b.n	48560 <json_add_str+0x1e>

0004856e <json_add_data>:
{
   4856e:	b5f0      	push	{r4, r5, r6, r7, lr}
   48570:	4605      	mov	r5, r0
   48572:	b09b      	sub	sp, #108	; 0x6c
	if (param == NULL || json_obj == NULL) {
   48574:	460e      	mov	r6, r1
   48576:	b919      	cbnz	r1, 48580 <json_add_data+0x12>
		return -EINVAL;
   48578:	f06f 0015 	mvn.w	r0, #21
}
   4857c:	b01b      	add	sp, #108	; 0x6c
   4857e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(data_name, 0, MODEM_INFO_MAX_RESPONSE_SIZE);
   48580:	2264      	movs	r2, #100	; 0x64
   48582:	2100      	movs	r1, #0
   48584:	a801      	add	r0, sp, #4
   48586:	f7f7 fbe1 	bl	3fd4c <memset>
	ret = modem_info_name_get(param->type,
   4858a:	a901      	add	r1, sp, #4
   4858c:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   48590:	f7dd ffec 	bl	2656c <modem_info_name_get>
	if (ret < 0) {
   48594:	1e04      	subs	r4, r0, #0
   48596:	dbef      	blt.n	48578 <json_add_data+0xa>
	data_type = modem_info_type_get(param->type);
   48598:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   4859c:	f7dd ffdc 	bl	26558 <modem_info_type_get>
	if (data_type == AT_PARAM_TYPE_STRING &&
   485a0:	2803      	cmp	r0, #3
   485a2:	d113      	bne.n	485cc <json_add_data+0x5e>
   485a4:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
   485a8:	2b03      	cmp	r3, #3
   485aa:	d00f      	beq.n	485cc <json_add_data+0x5e>
		total_len += strlen(param->value_string);
   485ac:	3502      	adds	r5, #2
   485ae:	4628      	mov	r0, r5
   485b0:	f7f7 ffe8 	bl	40584 <strlen>
		ret += json_add_str(json_obj, data_name, param->value_string);
   485b4:	462a      	mov	r2, r5
		total_len += strlen(param->value_string);
   485b6:	4607      	mov	r7, r0
		ret += json_add_str(json_obj, data_name, param->value_string);
   485b8:	a901      	add	r1, sp, #4
   485ba:	4630      	mov	r0, r6
   485bc:	f7ff ffc1 	bl	48542 <json_add_str>
   485c0:	4420      	add	r0, r4
	return total_len;
   485c2:	ea10 0020 	ands.w	r0, r0, r0, asr #32
   485c6:	bf38      	it	cc
   485c8:	4638      	movcc	r0, r7
   485ca:	e7d7      	b.n	4857c <json_add_data+0xe>
		ret += json_add_num(json_obj, data_name, param->value);
   485cc:	8828      	ldrh	r0, [r5, #0]
   485ce:	f7d0 f869 	bl	186a4 <__aeabi_ui2d>
	json_num = cJSON_CreateNumber(num);
   485d2:	ec41 0b10 	vmov	d0, r0, r1
   485d6:	f7d2 f8bb 	bl	1a750 <cJSON_CreateNumber>
	if (json_num == NULL) {
   485da:	4602      	mov	r2, r0
   485dc:	b138      	cbz	r0, 485ee <json_add_data+0x80>
	cJSON_AddItemToObject(parent, str, item);
   485de:	4630      	mov	r0, r6
   485e0:	a901      	add	r1, sp, #4
   485e2:	f7ff fa5c 	bl	47a9e <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   485e6:	2000      	movs	r0, #0
		ret += json_add_num(json_obj, data_name, param->value);
   485e8:	4420      	add	r0, r4
		total_len += sizeof(u16_t);
   485ea:	2702      	movs	r7, #2
   485ec:	e7e9      	b.n	485c2 <json_add_data+0x54>
		return -ENOMEM;
   485ee:	f06f 000b 	mvn.w	r0, #11
   485f2:	e7f9      	b.n	485e8 <json_add_data+0x7a>

000485f4 <sim_data_add>:
{
   485f4:	b570      	push	{r4, r5, r6, lr}
   485f6:	460d      	mov	r5, r1
	if (sim == NULL || json_obj == NULL) {
   485f8:	4606      	mov	r6, r0
   485fa:	b180      	cbz	r0, 4861e <sim_data_add+0x2a>
   485fc:	b179      	cbz	r1, 4861e <sim_data_add+0x2a>
	total_len = json_add_data(&sim->uicc, json_obj);
   485fe:	f7ff ffb6 	bl	4856e <json_add_data>
	total_len += json_add_data(&sim->iccid, json_obj);
   48602:	4629      	mov	r1, r5
	total_len = json_add_data(&sim->uicc, json_obj);
   48604:	4604      	mov	r4, r0
	total_len += json_add_data(&sim->iccid, json_obj);
   48606:	f106 0070 	add.w	r0, r6, #112	; 0x70
   4860a:	f7ff ffb0 	bl	4856e <json_add_data>
	total_len += json_add_data(&sim->imsi, json_obj);
   4860e:	4629      	mov	r1, r5
	total_len += json_add_data(&sim->iccid, json_obj);
   48610:	4404      	add	r4, r0
	total_len += json_add_data(&sim->imsi, json_obj);
   48612:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   48616:	f7ff ffaa 	bl	4856e <json_add_data>
   4861a:	4420      	add	r0, r4
}
   4861c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   4861e:	f06f 0015 	mvn.w	r0, #21
   48622:	e7fb      	b.n	4861c <sim_data_add+0x28>

00048624 <cloud_notify_event>:
 */
static inline void cloud_notify_event(struct cloud_backend *backend,
			struct cloud_event *evt,
			void *user_data)
{
	if (backend->config->handler) {
   48624:	6843      	ldr	r3, [r0, #4]
   48626:	685b      	ldr	r3, [r3, #4]
   48628:	b103      	cbz	r3, 4862c <cloud_notify_event+0x8>
		backend->config->handler(backend, evt, user_data);
   4862a:	4718      	bx	r3
	}
}
   4862c:	4770      	bx	lr

0004862e <user_data_set>:
}

static int user_data_set(const struct cloud_backend *const backend,
			 void *user_data)
{
	backend->config->user_data = user_data;
   4862e:	6843      	ldr	r3, [r0, #4]

	return 0;
}
   48630:	2000      	movs	r0, #0
	backend->config->user_data = user_data;
   48632:	60d9      	str	r1, [r3, #12]
}
   48634:	4770      	bx	lr

00048636 <ping>:
{
   48636:	b508      	push	{r3, lr}
	nct_process();
   48638:	f7e0 fb92 	bl	28d60 <nct_process>
}
   4863c:	2000      	movs	r0, #0
   4863e:	bd08      	pop	{r3, pc}

00048640 <input>:
   48640:	b508      	push	{r3, lr}
   48642:	f7e0 fb8d 	bl	28d60 <nct_process>
   48646:	2000      	movs	r0, #0
   48648:	bd08      	pop	{r3, pc}

0004864a <connect>:
{
   4864a:	b538      	push	{r3, r4, r5, lr}
   4864c:	4605      	mov	r5, r0
	err = nrf_cloud_connect(NULL);
   4864e:	2000      	movs	r0, #0
   48650:	f7de fcc4 	bl	26fdc <nrf_cloud_connect>
	backend->config->socket = nct_socket_get();
   48654:	686d      	ldr	r5, [r5, #4]
	err = nrf_cloud_connect(NULL);
   48656:	4604      	mov	r4, r0
	backend->config->socket = nct_socket_get();
   48658:	f7e0 fb8e 	bl	28d78 <nct_socket_get>
   4865c:	60a8      	str	r0, [r5, #8]
}
   4865e:	4620      	mov	r0, r4
   48660:	bd38      	pop	{r3, r4, r5, pc}

00048662 <disconnect>:
	return nrf_cloud_disconnect();
   48662:	f7de bcc7 	b.w	26ff4 <nrf_cloud_disconnect>

00048666 <json_add_num>:
{
   48666:	b538      	push	{r3, r4, r5, lr}
	json_num = cJSON_CreateNumber(num);
   48668:	ec43 2b10 	vmov	d0, r2, r3
{
   4866c:	4604      	mov	r4, r0
   4866e:	460d      	mov	r5, r1
	json_num = cJSON_CreateNumber(num);
   48670:	f7d2 f86e 	bl	1a750 <cJSON_CreateNumber>
	if (json_num == NULL) {
   48674:	4602      	mov	r2, r0
   48676:	b128      	cbz	r0, 48684 <json_add_num+0x1e>
	cJSON_AddItemToObject(parent, str, item);
   48678:	4620      	mov	r0, r4
   4867a:	4629      	mov	r1, r5
   4867c:	f7ff fa0f 	bl	47a9e <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   48680:	2000      	movs	r0, #0
}
   48682:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   48684:	f06f 000b 	mvn.w	r0, #11
   48688:	e7fb      	b.n	48682 <json_add_num+0x1c>

0004868a <json_add_str>:
{
   4868a:	b538      	push	{r3, r4, r5, lr}
   4868c:	4604      	mov	r4, r0
	json_str = cJSON_CreateString(item);
   4868e:	4610      	mov	r0, r2
{
   48690:	460d      	mov	r5, r1
	json_str = cJSON_CreateString(item);
   48692:	f7dc fc37 	bl	24f04 <cJSON_CreateString>
	if (json_str == NULL) {
   48696:	4602      	mov	r2, r0
   48698:	b128      	cbz	r0, 486a6 <json_add_str+0x1c>
	cJSON_AddItemToObject(parent, str, item);
   4869a:	4620      	mov	r0, r4
   4869c:	4629      	mov	r1, r5
   4869e:	f7ff f9fe 	bl	47a9e <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   486a2:	2000      	movs	r0, #0
}
   486a4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   486a6:	f06f 000b 	mvn.w	r0, #11
   486aa:	e7fb      	b.n	486a4 <json_add_str+0x1a>

000486ac <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   486ac:	b108      	cbz	r0, 486b2 <json_object_decode+0x6>
   486ae:	f7ff b9f1 	b.w	47a94 <cJSON_GetObjectItem>
}
   486b2:	4770      	bx	lr

000486b4 <compare>:
{
   486b4:	b538      	push	{r3, r4, r5, lr}
   486b6:	4605      	mov	r5, r0
	return !strncmp(s1, s2, strlen(s2));
   486b8:	4608      	mov	r0, r1
{
   486ba:	460c      	mov	r4, r1
	return !strncmp(s1, s2, strlen(s2));
   486bc:	f7f7 ff62 	bl	40584 <strlen>
   486c0:	4621      	mov	r1, r4
   486c2:	4602      	mov	r2, r0
   486c4:	4628      	mov	r0, r5
   486c6:	f7f7 ff8b 	bl	405e0 <strncmp>
}
   486ca:	fab0 f080 	clz	r0, r0
   486ce:	0940      	lsrs	r0, r0, #5
   486d0:	bd38      	pop	{r3, r4, r5, pc}

000486d2 <json_add_null>:
{
   486d2:	b538      	push	{r3, r4, r5, lr}
   486d4:	4604      	mov	r4, r0
   486d6:	460d      	mov	r5, r1
	json_null = cJSON_CreateNull();
   486d8:	f7dc fc08 	bl	24eec <cJSON_CreateNull>
	if (json_null == NULL) {
   486dc:	4602      	mov	r2, r0
   486de:	b128      	cbz	r0, 486ec <json_add_null+0x1a>
	cJSON_AddItemToObject(parent, str, item);
   486e0:	4620      	mov	r0, r4
   486e2:	4629      	mov	r1, r5
   486e4:	f7ff f9db 	bl	47a9e <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_null);
   486e8:	2000      	movs	r0, #0
}
   486ea:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   486ec:	f06f 000b 	mvn.w	r0, #11
   486f0:	e7fb      	b.n	486ea <json_add_null+0x18>

000486f2 <json_decode_and_alloc>:
{
   486f2:	b538      	push	{r3, r4, r5, lr}
   486f4:	460d      	mov	r5, r1
	if (obj == NULL || (obj->type != cJSON_String)) {
   486f6:	4604      	mov	r4, r0
   486f8:	b110      	cbz	r0, 48700 <json_decode_and_alloc+0xe>
   486fa:	68c3      	ldr	r3, [r0, #12]
   486fc:	2b10      	cmp	r3, #16
   486fe:	d004      	beq.n	4870a <json_decode_and_alloc+0x18>
		data->ptr = NULL;
   48700:	2300      	movs	r3, #0
		return -ENOENT;
   48702:	f06f 0001 	mvn.w	r0, #1
		data->ptr = NULL;
   48706:	606b      	str	r3, [r5, #4]
}
   48708:	bd38      	pop	{r3, r4, r5, pc}
	data->len = strlen(obj->valuestring);
   4870a:	6900      	ldr	r0, [r0, #16]
   4870c:	f7f7 ff3a 	bl	40584 <strlen>
   48710:	6028      	str	r0, [r5, #0]
	data->ptr = nrf_cloud_malloc(data->len + 1);
   48712:	3001      	adds	r0, #1
   48714:	f7f3 fd12 	bl	3c13c <k_malloc>
   48718:	6068      	str	r0, [r5, #4]
	if (data->ptr == NULL) {
   4871a:	b130      	cbz	r0, 4872a <json_decode_and_alloc+0x38>
	strncpy((char *)data->ptr, obj->valuestring, data->len + 1);
   4871c:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   4871e:	6921      	ldr	r1, [r4, #16]
   48720:	3201      	adds	r2, #1
   48722:	f7f7 ffa3 	bl	4066c <strncpy>
	return 0;
   48726:	2000      	movs	r0, #0
   48728:	e7ee      	b.n	48708 <json_decode_and_alloc+0x16>
		return -ENOMEM;
   4872a:	f06f 000b 	mvn.w	r0, #11
   4872e:	e7eb      	b.n	48708 <json_decode_and_alloc+0x16>

00048730 <nrf_codec_init>:
{
   48730:	b508      	push	{r3, lr}
	cJSON_Init();
   48732:	f7dc fc17 	bl	24f64 <cJSON_Init>
}
   48736:	2000      	movs	r0, #0
   48738:	bd08      	pop	{r3, pc}

0004873a <cc_disconnection_handler>:
}

static int cc_disconnection_handler(const struct nct_evt *nct_evt)
{
	return 0; /* Nothing to do */
}
   4873a:	2000      	movs	r0, #0
   4873c:	4770      	bx	lr

0004873e <disconnection_handler>:
{
   4873e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct nrf_cloud_evt evt = {
   48740:	2214      	movs	r2, #20
   48742:	2100      	movs	r1, #0
   48744:	a801      	add	r0, sp, #4
   48746:	f7f7 fb01 	bl	3fd4c <memset>
   4874a:	2308      	movs	r3, #8
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   4874c:	a901      	add	r1, sp, #4
   4874e:	2001      	movs	r0, #1
	const struct nrf_cloud_evt evt = {
   48750:	f88d 3004 	strb.w	r3, [sp, #4]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   48754:	f7de fbe2 	bl	26f1c <nfsm_set_current_state_and_notify>
}
   48758:	2000      	movs	r0, #0
   4875a:	b007      	add	sp, #28
   4875c:	f85d fb04 	ldr.w	pc, [sp], #4

00048760 <dc_rx_data_handler>:
	}
	return 0;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
   48760:	b510      	push	{r4, lr}
   48762:	b086      	sub	sp, #24
   48764:	4604      	mov	r4, r0
	struct nrf_cloud_evt cloud_evt = {
   48766:	2214      	movs	r2, #20
   48768:	2100      	movs	r1, #0
   4876a:	a801      	add	r0, sp, #4
   4876c:	f7f7 faee 	bl	3fd4c <memset>
   48770:	2306      	movs	r3, #6
   48772:	6862      	ldr	r2, [r4, #4]
   48774:	f88d 3004 	strb.w	r3, [sp, #4]
   48778:	ab03      	add	r3, sp, #12
   4877a:	e892 0003 	ldmia.w	r2, {r0, r1}
   4877e:	e883 0003 	stmia.w	r3, {r0, r1}
		.type = NRF_CLOUD_EVT_RX_DATA,
		.param.data = nct_evt->param.dc->data,
	};

	/* All data is forwared to the app */
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   48782:	f7de fbc5 	bl	26f10 <nfsm_get_current_state>
   48786:	a901      	add	r1, sp, #4
   48788:	f7de fbc8 	bl	26f1c <nfsm_set_current_state_and_notify>

	return 0;
}
   4878c:	2000      	movs	r0, #0
   4878e:	b006      	add	sp, #24
   48790:	bd10      	pop	{r4, pc}

00048792 <dc_connection_handler>:
{
   48792:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (nct_evt->status == 0) {
   48794:	6801      	ldr	r1, [r0, #0]
   48796:	b959      	cbnz	r1, 487b0 <dc_connection_handler+0x1e>
		struct nrf_cloud_evt evt = {
   48798:	2214      	movs	r2, #20
   4879a:	a801      	add	r0, sp, #4
   4879c:	f7f7 fad6 	bl	3fd4c <memset>
   487a0:	2304      	movs	r3, #4
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   487a2:	200e      	movs	r0, #14
   487a4:	eb0d 0103 	add.w	r1, sp, r3
		struct nrf_cloud_evt evt = {
   487a8:	f88d 3004 	strb.w	r3, [sp, #4]
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   487ac:	f7de fbb6 	bl	26f1c <nfsm_set_current_state_and_notify>
}
   487b0:	2000      	movs	r0, #0
   487b2:	b007      	add	sp, #28
   487b4:	f85d fb04 	ldr.w	pc, [sp], #4

000487b8 <cc_tx_cnf_in_state_requested_handler>:
{
   487b8:	b508      	push	{r3, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   487ba:	f241 632e 	movw	r3, #5678	; 0x162e
   487be:	6842      	ldr	r2, [r0, #4]
   487c0:	429a      	cmp	r2, r3
   487c2:	d103      	bne.n	487cc <cc_tx_cnf_in_state_requested_handler+0x14>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   487c4:	2100      	movs	r1, #0
   487c6:	2005      	movs	r0, #5
   487c8:	f7de fba8 	bl	26f1c <nfsm_set_current_state_and_notify>
}
   487cc:	2000      	movs	r0, #0
   487ce:	bd08      	pop	{r3, pc}

000487d0 <cc_tx_cnf_handler>:
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   487d0:	f241 622e 	movw	r2, #5678	; 0x162e
   487d4:	6843      	ldr	r3, [r0, #4]
{
   487d6:	b510      	push	{r4, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   487d8:	4293      	cmp	r3, r2
   487da:	d105      	bne.n	487e8 <cc_tx_cnf_handler+0x18>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   487dc:	2100      	movs	r1, #0
   487de:	2005      	movs	r0, #5
   487e0:	f7de fb9c 	bl	26f1c <nfsm_set_current_state_and_notify>
	return 0;
   487e4:	2400      	movs	r4, #0
   487e6:	e00b      	b.n	48800 <cc_tx_cnf_handler+0x30>
	if (nct_evt->param.data_id == PAIRING_STATUS_REPORT_ID) {
   487e8:	f641 62d2 	movw	r2, #7890	; 0x1ed2
   487ec:	4293      	cmp	r3, r2
   487ee:	d1f9      	bne.n	487e4 <cc_tx_cnf_handler+0x14>
		err = nct_dc_connect();
   487f0:	f7e0 fa32 	bl	28c58 <nct_dc_connect>
		if (err) {
   487f4:	4604      	mov	r4, r0
   487f6:	b918      	cbnz	r0, 48800 <cc_tx_cnf_handler+0x30>
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTING, NULL);
   487f8:	4601      	mov	r1, r0
   487fa:	200d      	movs	r0, #13
   487fc:	f7de fb8e 	bl	26f1c <nfsm_set_current_state_and_notify>
}
   48800:	4620      	mov	r0, r4
   48802:	bd10      	pop	{r4, pc}

00048804 <connection_handler>:
{
   48804:	b510      	push	{r4, lr}
	if (nct_evt->status != 0) {
   48806:	6803      	ldr	r3, [r0, #0]
{
   48808:	b086      	sub	sp, #24
	if (nct_evt->status != 0) {
   4880a:	b153      	cbz	r3, 48822 <connection_handler+0x1e>
		evt.type = NRF_CLOUD_EVT_ERROR;
   4880c:	23ff      	movs	r3, #255	; 0xff
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   4880e:	a901      	add	r1, sp, #4
   48810:	2002      	movs	r0, #2
		evt.type = NRF_CLOUD_EVT_ERROR;
   48812:	f88d 3004 	strb.w	r3, [sp, #4]
		return 0;
   48816:	2400      	movs	r4, #0
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   48818:	f7de fb80 	bl	26f1c <nfsm_set_current_state_and_notify>
}
   4881c:	4620      	mov	r0, r4
   4881e:	b006      	add	sp, #24
   48820:	bd10      	pop	{r4, pc}
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   48822:	2301      	movs	r3, #1
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   48824:	a901      	add	r1, sp, #4
   48826:	2002      	movs	r0, #2
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   48828:	f88d 3004 	strb.w	r3, [sp, #4]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   4882c:	f7de fb76 	bl	26f1c <nfsm_set_current_state_and_notify>
	err = nct_cc_connect();
   48830:	f7e0 f8f6 	bl	28a20 <nct_cc_connect>
	if (err) {
   48834:	4604      	mov	r4, r0
   48836:	2800      	cmp	r0, #0
   48838:	d1f0      	bne.n	4881c <connection_handler+0x18>
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   4883a:	4601      	mov	r1, r0
   4883c:	2003      	movs	r0, #3
   4883e:	f7de fb6d 	bl	26f1c <nfsm_set_current_state_and_notify>
   48842:	e7eb      	b.n	4881c <connection_handler+0x18>

00048844 <dc_disconnection_handler>:
   48844:	2000      	movs	r0, #0
   48846:	4770      	bx	lr

00048848 <dc_tx_cnf_handler>:
   48848:	2000      	movs	r0, #0
   4884a:	4770      	bx	lr

0004884c <nfsm_init>:
}
   4884c:	2000      	movs	r0, #0
   4884e:	4770      	bx	lr

00048850 <nct_dc_send>:
	return dc_send(dc_data, MQTT_QOS_1_AT_LEAST_ONCE);
   48850:	2101      	movs	r1, #1
   48852:	f7df bc75 	b.w	28140 <dc_send>

00048856 <nct_dc_stream>:
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
   48856:	2100      	movs	r1, #0
   48858:	f7df bc72 	b.w	28140 <dc_send>

0004885c <error_evt_send.isra.1>:
static int error_evt_send(const struct download_client *dl, int error)
   4885c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   4885e:	2300      	movs	r3, #0
   48860:	9301      	str	r3, [sp, #4]
   48862:	9303      	str	r3, [sp, #12]
   48864:	2301      	movs	r3, #1
		.error = -error
   48866:	4249      	negs	r1, r1
	const struct download_client_evt evt = {
   48868:	f88d 3004 	strb.w	r3, [sp, #4]
   4886c:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   4886e:	6803      	ldr	r3, [r0, #0]
   48870:	a801      	add	r0, sp, #4
   48872:	4798      	blx	r3
}
   48874:	b005      	add	sp, #20
   48876:	f85d fb04 	ldr.w	pc, [sp], #4

0004887a <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   4887a:	b130      	cbz	r0, 4888a <download_client_file_size_get+0x10>
   4887c:	b129      	cbz	r1, 4888a <download_client_file_size_get+0x10>
		return -EINVAL;
	}

	*size = client->file_size;
   4887e:	f241 0308 	movw	r3, #4104	; 0x1008
   48882:	58c3      	ldr	r3, [r0, r3]

	return 0;
   48884:	2000      	movs	r0, #0
	*size = client->file_size;
   48886:	600b      	str	r3, [r1, #0]
	return 0;
   48888:	4770      	bx	lr
		return -EINVAL;
   4888a:	f06f 0015 	mvn.w	r0, #21
}
   4888e:	4770      	bx	lr

00048890 <aws_jobs_cmp>:

bool aws_jobs_cmp(const char *sub, const char *pub, size_t pub_len,
		 const u8_t *suffix)
{
   48890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   48894:	460c      	mov	r4, r1
   48896:	4690      	mov	r8, r2
   48898:	461d      	mov	r5, r3
	int ret;

	if (sub == NULL || pub == NULL || suffix == NULL ||
   4889a:	4606      	mov	r6, r0
   4889c:	b328      	cbz	r0, 488ea <aws_jobs_cmp+0x5a>
   4889e:	b331      	cbz	r1, 488ee <aws_jobs_cmp+0x5e>
   488a0:	b33b      	cbz	r3, 488f2 <aws_jobs_cmp+0x62>
   488a2:	7803      	ldrb	r3, [r0, #0]
   488a4:	b33b      	cbz	r3, 488f6 <aws_jobs_cmp+0x66>
	    sub[0] == '\0' || pub[0] == '\0') {
   488a6:	780b      	ldrb	r3, [r1, #0]
   488a8:	b32b      	cbz	r3, 488f6 <aws_jobs_cmp+0x66>
		return false;
	}

	size_t sub_len = strlen(sub);
   488aa:	f7f7 fe6b 	bl	40584 <strlen>
   488ae:	4607      	mov	r7, r0
	size_t suff_len = strlen(suffix);
   488b0:	4628      	mov	r0, r5
   488b2:	f7f7 fe67 	bl	40584 <strlen>

	if (sub[sub_len - 1] == '#') {
   488b6:	19f3      	adds	r3, r6, r7
   488b8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
	size_t suff_len = strlen(suffix);
   488bc:	4681      	mov	r9, r0
	if (sub[sub_len - 1] == '#') {
   488be:	2b23      	cmp	r3, #35	; 0x23
		/* Strip trailing '/#' */
		sub_len -= 2;
   488c0:	bf08      	it	eq
   488c2:	3f02      	subeq	r7, #2
	}

	ret = strncmp(sub, pub, sub_len);
   488c4:	463a      	mov	r2, r7
   488c6:	4621      	mov	r1, r4
   488c8:	4630      	mov	r0, r6
   488ca:	f7f7 fe89 	bl	405e0 <strncmp>
	if (ret == 0 && suff_len > 0) {
   488ce:	b948      	cbnz	r0, 488e4 <aws_jobs_cmp+0x54>
   488d0:	f1b9 0f00 	cmp.w	r9, #0
   488d4:	d006      	beq.n	488e4 <aws_jobs_cmp+0x54>
		/* Everything up until suffix is correct, check suffix */
		return strncmp(&pub[pub_len - suff_len], suffix, suff_len) == 0;
   488d6:	eba8 0009 	sub.w	r0, r8, r9
   488da:	464a      	mov	r2, r9
   488dc:	4629      	mov	r1, r5
   488de:	4420      	add	r0, r4
   488e0:	f7f7 fe7e 	bl	405e0 <strncmp>
	} else {
		return ret == 0;
   488e4:	fab0 f080 	clz	r0, r0
   488e8:	0940      	lsrs	r0, r0, #5
	}
}
   488ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return false;
   488ee:	4608      	mov	r0, r1
   488f0:	e7fb      	b.n	488ea <aws_jobs_cmp+0x5a>
   488f2:	4618      	mov	r0, r3
   488f4:	e7f9      	b.n	488ea <aws_jobs_cmp+0x5a>
   488f6:	4618      	mov	r0, r3
   488f8:	e7f7      	b.n	488ea <aws_jobs_cmp+0x5a>

000488fa <strncpy_nullterm>:
{
   488fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   488fc:	4604      	mov	r4, r0
	size_t len = strlen(src) + 1;
   488fe:	4608      	mov	r0, r1
{
   48900:	4615      	mov	r5, r2
   48902:	460f      	mov	r7, r1
	size_t len = strlen(src) + 1;
   48904:	f7f7 fe3e 	bl	40584 <strlen>
   48908:	1c46      	adds	r6, r0, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4890a:	42ae      	cmp	r6, r5
   4890c:	4632      	mov	r2, r6
   4890e:	4620      	mov	r0, r4
   48910:	bf28      	it	cs
   48912:	462a      	movcs	r2, r5
   48914:	4639      	mov	r1, r7
   48916:	f7d1 facb 	bl	19eb0 <memcpy>
	if (len > maxlen) {
   4891a:	42ae      	cmp	r6, r5
		dst[maxlen - 1] = '\0';
   4891c:	bf82      	ittt	hi
   4891e:	2300      	movhi	r3, #0
   48920:	1964      	addhi	r4, r4, r5
   48922:	f804 3c01 	strbhi.w	r3, [r4, #-1]
}
   48926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00048928 <response_is_valid>:
{
   48928:	b570      	push	{r4, r5, r6, lr}
   4892a:	4606      	mov	r6, r0
	if ((response_len < strlen(check)) ||
   4892c:	4610      	mov	r0, r2
{
   4892e:	460d      	mov	r5, r1
   48930:	4614      	mov	r4, r2
	if ((response_len < strlen(check)) ||
   48932:	f7f7 fe27 	bl	40584 <strlen>
   48936:	42a8      	cmp	r0, r5
   48938:	d808      	bhi.n	4894c <response_is_valid+0x24>
	    (memcmp(response, check, response_len) != 0)) {
   4893a:	462a      	mov	r2, r5
   4893c:	4621      	mov	r1, r4
   4893e:	4630      	mov	r0, r6
   48940:	f7f7 f9c2 	bl	3fcc8 <memcmp>
	if ((response_len < strlen(check)) ||
   48944:	fab0 f080 	clz	r0, r0
   48948:	0940      	lsrs	r0, r0, #5
}
   4894a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   4894c:	2000      	movs	r0, #0
   4894e:	e7fc      	b.n	4894a <response_is_valid+0x22>

00048950 <lte_lc_init_and_connect>:
{
   48950:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   48952:	f7e2 fecd 	bl	2b6f0 <w_lte_lc_init>
	if (ret) {
   48956:	b918      	cbnz	r0, 48960 <lte_lc_init_and_connect+0x10>
}
   48958:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect();
   4895c:	f7e3 b83c 	b.w	2b9d8 <w_lte_lc_connect>
}
   48960:	bd08      	pop	{r3, pc}

00048962 <sensor_sim_attr_set>:
}
   48962:	2000      	movs	r0, #0
   48964:	4770      	bx	lr

00048966 <sensor_sim_thread>:
{
   48966:	b570      	push	{r4, r5, r6, lr}
   48968:	4604      	mov	r4, r0
	struct sensor_sim_data *drv_data = dev->driver_data;
   4896a:	6885      	ldr	r5, [r0, #8]
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   4896c:	f105 0634 	add.w	r6, r5, #52	; 0x34
	return z_impl_k_sleep(ms);
   48970:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   48974:	f000 f8a9 	bl	48aca <z_impl_k_sleep>
		if (drv_data->drdy_handler != NULL) {
   48978:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   4897a:	2b00      	cmp	r3, #0
   4897c:	d0f8      	beq.n	48970 <sensor_sim_thread+0xa>
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   4897e:	4631      	mov	r1, r6
   48980:	4620      	mov	r0, r4
   48982:	4798      	blx	r3
   48984:	e7f4      	b.n	48970 <sensor_sim_thread+0xa>

00048986 <sample_fetch>:
}
   48986:	2000      	movs	r0, #0
   48988:	4770      	bx	lr

0004898a <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   4898a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   4898e:	4770      	bx	lr

00048990 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   48990:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   48994:	4770      	bx	lr

00048996 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   48996:	f44f 7080 	mov.w	r0, #256	; 0x100
   4899a:	4770      	bx	lr

0004899c <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   4899c:	f7fe b837 	b.w	46a0e <z_clock_idle_exit>

000489a0 <k_mem_pool_malloc>:
{
   489a0:	b507      	push	{r0, r1, r2, lr}
   489a2:	2204      	movs	r2, #4
   489a4:	188a      	adds	r2, r1, r2
   489a6:	d204      	bcs.n	489b2 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   489a8:	2300      	movs	r3, #0
   489aa:	4669      	mov	r1, sp
   489ac:	f7f3 fafa 	bl	3bfa4 <k_mem_pool_alloc>
   489b0:	b118      	cbz	r0, 489ba <k_mem_pool_malloc+0x1a>
		return NULL;
   489b2:	2000      	movs	r0, #0
}
   489b4:	b003      	add	sp, #12
   489b6:	f85d fb04 	ldr.w	pc, [sp], #4
   489ba:	e9dd 3200 	ldrd	r3, r2, [sp]
   489be:	601a      	str	r2, [r3, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   489c0:	9800      	ldr	r0, [sp, #0]
   489c2:	3004      	adds	r0, #4
   489c4:	e7f6      	b.n	489b4 <k_mem_pool_malloc+0x14>

000489c6 <k_free>:
	if (ptr != NULL) {
   489c6:	b110      	cbz	r0, 489ce <k_free+0x8>
		k_mem_pool_free_id(ptr);
   489c8:	3804      	subs	r0, #4
   489ca:	f7f3 bb5b 	b.w	3c084 <k_mem_pool_free_id>
}
   489ce:	4770      	bx	lr

000489d0 <k_calloc>:
{
   489d0:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   489d2:	fb01 f400 	mul.w	r4, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   489d6:	b118      	cbz	r0, 489e0 <k_calloc+0x10>
   489d8:	fbb4 f0f0 	udiv	r0, r4, r0
   489dc:	4281      	cmp	r1, r0
   489de:	d10a      	bne.n	489f6 <k_calloc+0x26>
	ret = k_malloc(bounds);
   489e0:	4620      	mov	r0, r4
   489e2:	f7f3 fbab 	bl	3c13c <k_malloc>
	if (ret != NULL) {
   489e6:	4605      	mov	r5, r0
   489e8:	b118      	cbz	r0, 489f2 <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   489ea:	4622      	mov	r2, r4
   489ec:	2100      	movs	r1, #0
   489ee:	f7f7 f9ad 	bl	3fd4c <memset>
}
   489f2:	4628      	mov	r0, r5
   489f4:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   489f6:	2500      	movs	r5, #0
   489f8:	e7fb      	b.n	489f2 <k_calloc+0x22>

000489fa <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   489fa:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   489fc:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   48a00:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   48a04:	4770      	bx	lr

00048a06 <z_queue_node_peek>:
{
   48a06:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   48a08:	4604      	mov	r4, r0
   48a0a:	b130      	cbz	r0, 48a1a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   48a0c:	6802      	ldr	r2, [r0, #0]
   48a0e:	0793      	lsls	r3, r2, #30
   48a10:	d003      	beq.n	48a1a <z_queue_node_peek+0x14>
		ret = anode->data;
   48a12:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   48a14:	b109      	cbz	r1, 48a1a <z_queue_node_peek+0x14>
			k_free(anode);
   48a16:	f7ff ffd6 	bl	489c6 <k_free>
}
   48a1a:	4620      	mov	r0, r4
   48a1c:	bd10      	pop	{r4, pc}

00048a1e <z_impl_k_queue_init>:
	list->head = NULL;
   48a1e:	2300      	movs	r3, #0
	list->tail = NULL;
   48a20:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   48a24:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   48a26:	f100 030c 	add.w	r3, r0, #12
   48a2a:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
   48a2e:	4770      	bx	lr

00048a30 <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   48a30:	460a      	mov	r2, r1
   48a32:	2300      	movs	r3, #0
   48a34:	6841      	ldr	r1, [r0, #4]
   48a36:	f7f3 bea1 	b.w	3c77c <queue_insert>

00048a3a <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   48a3a:	7b43      	ldrb	r3, [r0, #13]
   48a3c:	06db      	lsls	r3, r3, #27
   48a3e:	bf03      	ittte	eq
   48a40:	6980      	ldreq	r0, [r0, #24]
   48a42:	fab0 f080 	clzeq	r0, r0
   48a46:	0940      	lsreq	r0, r0, #5
   48a48:	2000      	movne	r0, #0
}
   48a4a:	4770      	bx	lr

00048a4c <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   48a4c:	f990 000e 	ldrsb.w	r0, [r0, #14]
   48a50:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   48a54:	4298      	cmp	r0, r3
   48a56:	bfac      	ite	ge
   48a58:	2000      	movge	r0, #0
   48a5a:	2001      	movlt	r0, #1
   48a5c:	4770      	bx	lr

00048a5e <z_reschedule_irqlock>:
{
   48a5e:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   48a60:	4602      	mov	r2, r0
   48a62:	b938      	cbnz	r0, 48a74 <z_reschedule_irqlock+0x16>
   48a64:	f7f3 fffe 	bl	3ca64 <resched.part.15>
	if (resched(key)) {
   48a68:	b120      	cbz	r0, 48a74 <z_reschedule_irqlock+0x16>
}
   48a6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   48a6e:	4610      	mov	r0, r2
   48a70:	f7d9 bd52 	b.w	22518 <z_arch_swap>
   48a74:	f382 8811 	msr	BASEPRI, r2
   48a78:	f3bf 8f6f 	isb	sy
   48a7c:	bd08      	pop	{r3, pc}

00048a7e <z_reschedule_unlocked>:
	__asm__ volatile(
   48a7e:	f04f 0320 	mov.w	r3, #32
   48a82:	f3ef 8011 	mrs	r0, BASEPRI
   48a86:	f383 8811 	msr	BASEPRI, r3
   48a8a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   48a8e:	f7ff bfe6 	b.w	48a5e <z_reschedule_irqlock>

00048a92 <z_priq_dumb_best>:
	return list->head == list;
   48a92:	6803      	ldr	r3, [r0, #0]
}
   48a94:	4298      	cmp	r0, r3
   48a96:	bf14      	ite	ne
   48a98:	4618      	movne	r0, r3
   48a9a:	2000      	moveq	r0, #0
   48a9c:	4770      	bx	lr

00048a9e <z_unpend_all>:
{
   48a9e:	b570      	push	{r4, r5, r6, lr}
   48aa0:	4606      	mov	r6, r0
	int need_sched = 0;
   48aa2:	2500      	movs	r5, #0
   48aa4:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48aa6:	42a6      	cmp	r6, r4
   48aa8:	d000      	beq.n	48aac <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   48aaa:	b90c      	cbnz	r4, 48ab0 <z_unpend_all+0x12>
}
   48aac:	4628      	mov	r0, r5
   48aae:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   48ab0:	4620      	mov	r0, r4
   48ab2:	f7f4 f9af 	bl	3ce14 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   48ab6:	4620      	mov	r0, r4
   48ab8:	f7ff ffbf 	bl	48a3a <z_is_thread_ready>
		need_sched = 1;
   48abc:	2501      	movs	r5, #1
   48abe:	2800      	cmp	r0, #0
   48ac0:	d0f0      	beq.n	48aa4 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   48ac2:	4620      	mov	r0, r4
   48ac4:	f7f4 fab2 	bl	3d02c <z_add_thread_to_ready_q>
   48ac8:	e7ec      	b.n	48aa4 <z_unpend_all+0x6>

00048aca <z_impl_k_sleep>:
{
   48aca:	b538      	push	{r3, r4, r5, lr}
   48acc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   48ad0:	f240 34e7 	movw	r4, #999	; 0x3e7
   48ad4:	2500      	movs	r5, #0
   48ad6:	fbc1 4500 	smlal	r4, r5, r1, r0
   48ada:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   48ade:	2300      	movs	r3, #0
   48ae0:	4620      	mov	r0, r4
   48ae2:	4629      	mov	r1, r5
   48ae4:	f7d0 f91a 	bl	18d1c <__aeabi_ldivmod>
	ticks = z_tick_sleep(ticks);
   48ae8:	f7f4 ff5a 	bl	3d9a0 <z_tick_sleep>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
   48aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   48af0:	fb80 2302 	smull	r2, r3, r0, r2
   48af4:	0bd0      	lsrs	r0, r2, #15
}
   48af6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   48afa:	bd38      	pop	{r3, r4, r5, pc}

00048afc <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   48afc:	7b43      	ldrb	r3, [r0, #13]
   48afe:	06db      	lsls	r3, r3, #27
   48b00:	bf03      	ittte	eq
   48b02:	6980      	ldreq	r0, [r0, #24]
   48b04:	fab0 f080 	clzeq	r0, r0
   48b08:	0940      	lsreq	r0, r0, #5
   48b0a:	2000      	movne	r0, #0
}
   48b0c:	4770      	bx	lr

00048b0e <z_impl_k_busy_wait>:
	z_arch_busy_wait(usec_to_wait);
   48b0e:	f7d8 bb45 	b.w	2119c <z_arch_busy_wait>

00048b12 <z_impl_k_thread_name_set>:
}
   48b12:	f06f 0057 	mvn.w	r0, #87	; 0x57
   48b16:	4770      	bx	lr

00048b18 <k_thread_name_get>:
}
   48b18:	2000      	movs	r0, #0
   48b1a:	4770      	bx	lr

00048b1c <z_thread_single_suspend>:
{
   48b1c:	b510      	push	{r4, lr}
   48b1e:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
   48b20:	f7ff ffec 	bl	48afc <z_is_thread_ready>
   48b24:	b110      	cbz	r0, 48b2c <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
   48b26:	4620      	mov	r0, r4
   48b28:	f7f4 fc2a 	bl	3d380 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   48b2c:	7b63      	ldrb	r3, [r4, #13]
   48b2e:	f043 0310 	orr.w	r3, r3, #16
   48b32:	7363      	strb	r3, [r4, #13]
}
   48b34:	bd10      	pop	{r4, pc}

00048b36 <z_thread_single_resume>:
{
   48b36:	b508      	push	{r3, lr}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   48b38:	7b43      	ldrb	r3, [r0, #13]
   48b3a:	4602      	mov	r2, r0
   48b3c:	f023 0310 	bic.w	r3, r3, #16
   48b40:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   48b42:	f7ff ffdb 	bl	48afc <z_is_thread_ready>
   48b46:	b120      	cbz	r0, 48b52 <z_thread_single_resume+0x1c>
}
   48b48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_add_thread_to_ready_q(thread);
   48b4c:	4610      	mov	r0, r2
   48b4e:	f7f4 ba6d 	b.w	3d02c <z_add_thread_to_ready_q>
   48b52:	bd08      	pop	{r3, pc}

00048b54 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   48b54:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   48b56:	b510      	push	{r4, lr}
   48b58:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   48b5a:	b103      	cbz	r3, 48b5e <z_thread_single_abort+0xa>
		thread->fn_abort();
   48b5c:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   48b5e:	4620      	mov	r0, r4
   48b60:	f7ff ffcc 	bl	48afc <z_is_thread_ready>
   48b64:	b138      	cbz	r0, 48b76 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   48b66:	4620      	mov	r0, r4
   48b68:	f7f4 fc0a 	bl	3d380 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   48b6c:	7b63      	ldrb	r3, [r4, #13]
   48b6e:	f043 0308 	orr.w	r3, r3, #8
   48b72:	7363      	strb	r3, [r4, #13]
}
   48b74:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   48b76:	7b63      	ldrb	r3, [r4, #13]
   48b78:	079b      	lsls	r3, r3, #30
   48b7a:	d502      	bpl.n	48b82 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   48b7c:	4620      	mov	r0, r4
   48b7e:	f7f4 f80f 	bl	3cba0 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   48b82:	69a3      	ldr	r3, [r4, #24]
   48b84:	2b00      	cmp	r3, #0
   48b86:	d0f1      	beq.n	48b6c <z_thread_single_abort+0x18>
	return z_abort_timeout(&thread->base.timeout);
   48b88:	f104 0018 	add.w	r0, r4, #24
   48b8c:	f7f5 fd10 	bl	3e5b0 <z_abort_timeout>
   48b90:	e7ec      	b.n	48b6c <z_thread_single_abort+0x18>

00048b92 <z_init_thread_base>:
	thread_base->user_options = (u8_t)options;
   48b92:	7303      	strb	r3, [r0, #12]
	thread_base->sched_locked = 0U;
   48b94:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   48b96:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   48b98:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   48b9a:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   48b9c:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
   48ba0:	4770      	bx	lr

00048ba2 <k_work_submit_to_queue>:
{
   48ba2:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   48ba4:	f101 0308 	add.w	r3, r1, #8
   48ba8:	e8d3 2fef 	ldaex	r2, [r3]
   48bac:	f042 0c01 	orr.w	ip, r2, #1
   48bb0:	e8c3 cfee 	stlex	lr, ip, [r3]
   48bb4:	f1be 0f00 	cmp.w	lr, #0
   48bb8:	d1f6      	bne.n	48ba8 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   48bba:	07d3      	lsls	r3, r2, #31
   48bbc:	d403      	bmi.n	48bc6 <k_work_submit_to_queue+0x24>
}
   48bbe:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   48bc2:	f7ff bf35 	b.w	48a30 <k_queue_append>
}
   48bc6:	f85d fb04 	ldr.w	pc, [sp], #4

00048bca <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   48bca:	f1a0 010c 	sub.w	r1, r0, #12
   48bce:	6900      	ldr	r0, [r0, #16]
   48bd0:	f7ff bfe7 	b.w	48ba2 <k_work_submit_to_queue>

00048bd4 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   48bd4:	2300      	movs	r3, #0
   48bd6:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   48bda:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   48bde:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   48be0:	61c3      	str	r3, [r0, #28]
}
   48be2:	4770      	bx	lr

00048be4 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   48be4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   48be6:	f7f5 fe71 	bl	3e8cc <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   48bea:	bd08      	pop	{r3, pc}

00048bec <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   48bec:	b510      	push	{r4, lr}
	return __ticks_to_ms(z_tick_get());
   48bee:	f7f5 fe6d 	bl	3e8cc <z_tick_get>
   48bf2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   48bf6:	fba0 2304 	umull	r2, r3, r0, r4
   48bfa:	fb04 3301 	mla	r3, r4, r1, r3
   48bfe:	0bd0      	lsrs	r0, r2, #15
}
   48c00:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   48c04:	0bd9      	lsrs	r1, r3, #15
   48c06:	bd10      	pop	{r4, pc}

00048c08 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   48c08:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   48c0a:	6884      	ldr	r4, [r0, #8]
{
   48c0c:	4605      	mov	r5, r0
   48c0e:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   48c10:	b19c      	cbz	r4, 48c3a <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   48c12:	68a3      	ldr	r3, [r4, #8]
   48c14:	b95b      	cbnz	r3, 48c2e <signal_poll_event+0x26>
	int retcode = 0;
   48c16:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   48c18:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   48c1a:	2300      	movs	r3, #0
   48c1c:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   48c1e:	68eb      	ldr	r3, [r5, #12]
   48c20:	f3c3 3204 	ubfx	r2, r3, #12, #5
   48c24:	4316      	orrs	r6, r2
   48c26:	f366 3310 	bfi	r3, r6, #12, #5
   48c2a:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   48c2c:	e004      	b.n	48c38 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   48c2e:	4798      	blx	r3
		poller->is_polling = false;
   48c30:	2300      	movs	r3, #0
		if (retcode < 0) {
   48c32:	2800      	cmp	r0, #0
		poller->is_polling = false;
   48c34:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   48c36:	daf0      	bge.n	48c1a <signal_poll_event+0x12>
}
   48c38:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   48c3a:	4620      	mov	r0, r4
   48c3c:	e7ed      	b.n	48c1a <signal_poll_event+0x12>

00048c3e <add_event>:
{
   48c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48c40:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   48c42:	e9d0 2300 	ldrd	r2, r3, [r0]
   48c46:	4290      	cmp	r0, r2
   48c48:	4604      	mov	r4, r0
   48c4a:	460d      	mov	r5, r1
   48c4c:	d106      	bne.n	48c5c <add_event+0x1e>
	node->prev = list->tail;
   48c4e:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   48c50:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   48c52:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   48c54:	6863      	ldr	r3, [r4, #4]
   48c56:	601d      	str	r5, [r3, #0]
	list->tail = node;
   48c58:	6065      	str	r5, [r4, #4]
   48c5a:	e019      	b.n	48c90 <add_event+0x52>
	if ((pending == NULL) ||
   48c5c:	2b00      	cmp	r3, #0
   48c5e:	d0f6      	beq.n	48c4e <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   48c60:	689b      	ldr	r3, [r3, #8]
   48c62:	6879      	ldr	r1, [r7, #4]
   48c64:	6858      	ldr	r0, [r3, #4]
   48c66:	f7ff fef1 	bl	48a4c <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   48c6a:	2800      	cmp	r0, #0
   48c6c:	d1ef      	bne.n	48c4e <add_event+0x10>
	return list->head == list;
   48c6e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48c70:	42b4      	cmp	r4, r6
   48c72:	d0ec      	beq.n	48c4e <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   48c74:	2e00      	cmp	r6, #0
   48c76:	d0ea      	beq.n	48c4e <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   48c78:	68b3      	ldr	r3, [r6, #8]
   48c7a:	6878      	ldr	r0, [r7, #4]
   48c7c:	6859      	ldr	r1, [r3, #4]
   48c7e:	f7ff fee5 	bl	48a4c <z_is_t1_higher_prio_than_t2>
   48c82:	b130      	cbz	r0, 48c92 <add_event+0x54>
	node->prev = successor->prev;
   48c84:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   48c86:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   48c8a:	6873      	ldr	r3, [r6, #4]
   48c8c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   48c8e:	6075      	str	r5, [r6, #4]
}
   48c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   48c92:	6863      	ldr	r3, [r4, #4]
   48c94:	429e      	cmp	r6, r3
   48c96:	d0da      	beq.n	48c4e <add_event+0x10>
   48c98:	6836      	ldr	r6, [r6, #0]
   48c9a:	e7eb      	b.n	48c74 <add_event+0x36>

00048c9c <z_handle_obj_poll_events>:
	return list->head == list;
   48c9c:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   48c9e:	4298      	cmp	r0, r3
   48ca0:	d00a      	beq.n	48cb8 <z_handle_obj_poll_events+0x1c>
	node->prev->next = node->next;
   48ca2:	e9d3 0200 	ldrd	r0, r2, [r3]
   48ca6:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   48ca8:	6818      	ldr	r0, [r3, #0]
   48caa:	6042      	str	r2, [r0, #4]
	node->next = NULL;
   48cac:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   48cae:	4618      	mov	r0, r3
	node->prev = NULL;
   48cb0:	e9c3 2200 	strd	r2, r2, [r3]
   48cb4:	f7ff bfa8 	b.w	48c08 <signal_poll_event>
	}
}
   48cb8:	4770      	bx	lr

00048cba <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   48cba:	4770      	bx	lr

00048cbc <sulp>:
   48cbc:	b570      	push	{r4, r5, r6, lr}
   48cbe:	4604      	mov	r4, r0
   48cc0:	460d      	mov	r5, r1
   48cc2:	4616      	mov	r6, r2
   48cc4:	ec45 4b10 	vmov	d0, r4, r5
   48cc8:	f7fc f982 	bl	44fd0 <__ulp>
   48ccc:	ec51 0b10 	vmov	r0, r1, d0
   48cd0:	b17e      	cbz	r6, 48cf2 <sulp+0x36>
   48cd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
   48cd6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   48cda:	2b00      	cmp	r3, #0
   48cdc:	dd09      	ble.n	48cf2 <sulp+0x36>
   48cde:	051b      	lsls	r3, r3, #20
   48ce0:	2400      	movs	r4, #0
   48ce2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   48ce6:	4622      	mov	r2, r4
   48ce8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   48cec:	462b      	mov	r3, r5
   48cee:	f7cf fd53 	bl	18798 <__aeabi_dmul>
   48cf2:	bd70      	pop	{r4, r5, r6, pc}
