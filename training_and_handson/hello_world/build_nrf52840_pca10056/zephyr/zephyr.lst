
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000ab8 	.word	0x20000ab8
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke2(*(u32_t *)&mutex, *(u32_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00000b65 	.word	0x00000b65
   8:	00002aef 	.word	0x00002aef
		if (fdtable[fd].obj == NULL) {
   c:	000009b1 	.word	0x000009b1
  10:	000009b1 	.word	0x000009b1
  14:	000009b1 	.word	0x000009b1
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	000009b1 	.word	0x000009b1
	if (z_syscall_trap()) {
		return (int *) z_arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	000009b1 	.word	0x000009b1
	errno = ENFILE;
  20:	000009b1 	.word	0x000009b1
	return -1;
  24:	000009b1 	.word	0x000009b1
		z_arch_syscall_invoke1(*(u32_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
  28:	000009b1 	.word	0x000009b1
  2c:	00000979 	.word	0x00000979
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	000009b1 	.word	0x000009b1
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	000009b1 	.word	0x000009b1
  38:	00000925 	.word	0x00000925
  3c:	00002ad9 	.word	0x00002ad9

00000040 <_irq_vector_table>:
  40:	000009e1 000009e1 000009e1 000009e1     ................
  50:	000009e1 000009e1 000009e1 000009e1     ................
  60:	000009e1 000009e1 000009e1 000009e1     ................
  70:	000009e1 000009e1 000009e1 000009e1     ................
  80:	000009e1 000009e1 000009e1 000009e1     ................
  90:	000009e1 000009e1 000009e1 000009e1     ................
  a0:	000009e1 000009e1 000009e1 000009e1     ................
  b0:	000009e1 000009e1 000009e1 000009e1     ................
  c0:	000009e1 000009e1 000009e1 000009e1     ................
  d0:	000009e1 000009e1 000009e1 000009e1     ................
  e0:	000009e1 000009e1 000009e1 000009e1     ................
  f0:	000009e1 000009e1 000009e1 000009e1     ................

Disassembly of section _TEXT_SECTION_NAME_2:

00000100 <__aeabi_ldivmod>:
     100:	b97b      	cbnz	r3, 122 <__aeabi_ldivmod+0x22>
     102:	b972      	cbnz	r2, 122 <__aeabi_ldivmod+0x22>
     104:	2900      	cmp	r1, #0
     106:	bfbe      	ittt	lt
     108:	2000      	movlt	r0, #0
     10a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     10e:	e006      	blt.n	11e <__aeabi_ldivmod+0x1e>
     110:	bf08      	it	eq
     112:	2800      	cmpeq	r0, #0
     114:	bf1c      	itt	ne
     116:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     11a:	f04f 30ff 	movne.w	r0, #4294967295
     11e:	f000 b9a5 	b.w	46c <__aeabi_idiv0>
     122:	f1ad 0c08 	sub.w	ip, sp, #8
     126:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     12a:	2900      	cmp	r1, #0
     12c:	db09      	blt.n	142 <CONFIG_IDLE_STACK_SIZE+0x2>
     12e:	2b00      	cmp	r3, #0
     130:	db1a      	blt.n	168 <CONFIG_IDLE_STACK_SIZE+0x28>
     132:	f000 f835 	bl	1a0 <__udivmoddi4>
     136:	f8dd e004 	ldr.w	lr, [sp, #4]
     13a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     13e:	b004      	add	sp, #16
     140:	4770      	bx	lr
     142:	4240      	negs	r0, r0
     144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     148:	2b00      	cmp	r3, #0
     14a:	db1b      	blt.n	184 <CONFIG_IDLE_STACK_SIZE+0x44>
     14c:	f000 f828 	bl	1a0 <__udivmoddi4>
     150:	f8dd e004 	ldr.w	lr, [sp, #4]
     154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     158:	b004      	add	sp, #16
     15a:	4240      	negs	r0, r0
     15c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     160:	4252      	negs	r2, r2
     162:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     166:	4770      	bx	lr
     168:	4252      	negs	r2, r2
     16a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     16e:	f000 f817 	bl	1a0 <__udivmoddi4>
     172:	f8dd e004 	ldr.w	lr, [sp, #4]
     176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     17a:	b004      	add	sp, #16
     17c:	4240      	negs	r0, r0
     17e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     182:	4770      	bx	lr
     184:	4252      	negs	r2, r2
     186:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     18a:	f000 f809 	bl	1a0 <__udivmoddi4>
     18e:	f8dd e004 	ldr.w	lr, [sp, #4]
     192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     196:	b004      	add	sp, #16
     198:	4252      	negs	r2, r2
     19a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     19e:	4770      	bx	lr

000001a0 <__udivmoddi4>:
     1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1a4:	9e08      	ldr	r6, [sp, #32]
     1a6:	4604      	mov	r4, r0
     1a8:	4688      	mov	r8, r1
     1aa:	2b00      	cmp	r3, #0
     1ac:	d14b      	bne.n	246 <__udivmoddi4+0xa6>
     1ae:	428a      	cmp	r2, r1
     1b0:	4615      	mov	r5, r2
     1b2:	d967      	bls.n	284 <__udivmoddi4+0xe4>
     1b4:	fab2 f282 	clz	r2, r2
     1b8:	b14a      	cbz	r2, 1ce <__udivmoddi4+0x2e>
     1ba:	f1c2 0720 	rsb	r7, r2, #32
     1be:	fa01 f302 	lsl.w	r3, r1, r2
     1c2:	fa20 f707 	lsr.w	r7, r0, r7
     1c6:	4095      	lsls	r5, r2
     1c8:	ea47 0803 	orr.w	r8, r7, r3
     1cc:	4094      	lsls	r4, r2
     1ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1d2:	0c23      	lsrs	r3, r4, #16
     1d4:	fbb8 f7fe 	udiv	r7, r8, lr
     1d8:	fa1f fc85 	uxth.w	ip, r5
     1dc:	fb0e 8817 	mls	r8, lr, r7, r8
     1e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     1e4:	fb07 f10c 	mul.w	r1, r7, ip
     1e8:	4299      	cmp	r1, r3
     1ea:	d909      	bls.n	200 <__udivmoddi4+0x60>
     1ec:	18eb      	adds	r3, r5, r3
     1ee:	f107 30ff 	add.w	r0, r7, #4294967295
     1f2:	f080 811b 	bcs.w	42c <CONFIG_FLASH_SIZE+0x2c>
     1f6:	4299      	cmp	r1, r3
     1f8:	f240 8118 	bls.w	42c <CONFIG_FLASH_SIZE+0x2c>
     1fc:	3f02      	subs	r7, #2
     1fe:	442b      	add	r3, r5
     200:	1a5b      	subs	r3, r3, r1
     202:	b2a4      	uxth	r4, r4
     204:	fbb3 f0fe 	udiv	r0, r3, lr
     208:	fb0e 3310 	mls	r3, lr, r0, r3
     20c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     210:	fb00 fc0c 	mul.w	ip, r0, ip
     214:	45a4      	cmp	ip, r4
     216:	d909      	bls.n	22c <__udivmoddi4+0x8c>
     218:	192c      	adds	r4, r5, r4
     21a:	f100 33ff 	add.w	r3, r0, #4294967295
     21e:	f080 8107 	bcs.w	430 <CONFIG_FLASH_SIZE+0x30>
     222:	45a4      	cmp	ip, r4
     224:	f240 8104 	bls.w	430 <CONFIG_FLASH_SIZE+0x30>
     228:	3802      	subs	r0, #2
     22a:	442c      	add	r4, r5
     22c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
     230:	eba4 040c 	sub.w	r4, r4, ip
     234:	2700      	movs	r7, #0
     236:	b11e      	cbz	r6, 240 <__udivmoddi4+0xa0>
     238:	40d4      	lsrs	r4, r2
     23a:	2300      	movs	r3, #0
     23c:	e9c6 4300 	strd	r4, r3, [r6]
     240:	4639      	mov	r1, r7
     242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     246:	428b      	cmp	r3, r1
     248:	d909      	bls.n	25e <__udivmoddi4+0xbe>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80eb 	beq.w	426 <CONFIG_FLASH_SIZE+0x26>
     250:	2700      	movs	r7, #0
     252:	e9c6 0100 	strd	r0, r1, [r6]
     256:	4638      	mov	r0, r7
     258:	4639      	mov	r1, r7
     25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25e:	fab3 f783 	clz	r7, r3
     262:	2f00      	cmp	r7, #0
     264:	d147      	bne.n	2f6 <__udivmoddi4+0x156>
     266:	428b      	cmp	r3, r1
     268:	d302      	bcc.n	270 <__udivmoddi4+0xd0>
     26a:	4282      	cmp	r2, r0
     26c:	f200 80fa 	bhi.w	464 <CONFIG_FLASH_SIZE+0x64>
     270:	1a84      	subs	r4, r0, r2
     272:	eb61 0303 	sbc.w	r3, r1, r3
     276:	2001      	movs	r0, #1
     278:	4698      	mov	r8, r3
     27a:	2e00      	cmp	r6, #0
     27c:	d0e0      	beq.n	240 <__udivmoddi4+0xa0>
     27e:	e9c6 4800 	strd	r4, r8, [r6]
     282:	e7dd      	b.n	240 <__udivmoddi4+0xa0>
     284:	b902      	cbnz	r2, 288 <__udivmoddi4+0xe8>
     286:	deff      	udf	#255	; 0xff
     288:	fab2 f282 	clz	r2, r2
     28c:	2a00      	cmp	r2, #0
     28e:	f040 808f 	bne.w	3b0 <__udivmoddi4+0x210>
     292:	1b49      	subs	r1, r1, r5
     294:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     298:	fa1f f885 	uxth.w	r8, r5
     29c:	2701      	movs	r7, #1
     29e:	fbb1 fcfe 	udiv	ip, r1, lr
     2a2:	0c23      	lsrs	r3, r4, #16
     2a4:	fb0e 111c 	mls	r1, lr, ip, r1
     2a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2ac:	fb08 f10c 	mul.w	r1, r8, ip
     2b0:	4299      	cmp	r1, r3
     2b2:	d907      	bls.n	2c4 <__udivmoddi4+0x124>
     2b4:	18eb      	adds	r3, r5, r3
     2b6:	f10c 30ff 	add.w	r0, ip, #4294967295
     2ba:	d202      	bcs.n	2c2 <__udivmoddi4+0x122>
     2bc:	4299      	cmp	r1, r3
     2be:	f200 80cd 	bhi.w	45c <CONFIG_FLASH_SIZE+0x5c>
     2c2:	4684      	mov	ip, r0
     2c4:	1a59      	subs	r1, r3, r1
     2c6:	b2a3      	uxth	r3, r4
     2c8:	fbb1 f0fe 	udiv	r0, r1, lr
     2cc:	fb0e 1410 	mls	r4, lr, r0, r1
     2d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
     2d4:	fb08 f800 	mul.w	r8, r8, r0
     2d8:	45a0      	cmp	r8, r4
     2da:	d907      	bls.n	2ec <__udivmoddi4+0x14c>
     2dc:	192c      	adds	r4, r5, r4
     2de:	f100 33ff 	add.w	r3, r0, #4294967295
     2e2:	d202      	bcs.n	2ea <__udivmoddi4+0x14a>
     2e4:	45a0      	cmp	r8, r4
     2e6:	f200 80b6 	bhi.w	456 <CONFIG_FLASH_SIZE+0x56>
     2ea:	4618      	mov	r0, r3
     2ec:	eba4 0408 	sub.w	r4, r4, r8
     2f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     2f4:	e79f      	b.n	236 <__udivmoddi4+0x96>
     2f6:	f1c7 0c20 	rsb	ip, r7, #32
     2fa:	40bb      	lsls	r3, r7
     2fc:	fa22 fe0c 	lsr.w	lr, r2, ip
     300:	ea4e 0e03 	orr.w	lr, lr, r3
     304:	fa01 f407 	lsl.w	r4, r1, r7
     308:	fa20 f50c 	lsr.w	r5, r0, ip
     30c:	fa21 f30c 	lsr.w	r3, r1, ip
     310:	ea4f 481e 	mov.w	r8, lr, lsr #16
     314:	4325      	orrs	r5, r4
     316:	fbb3 f9f8 	udiv	r9, r3, r8
     31a:	0c2c      	lsrs	r4, r5, #16
     31c:	fb08 3319 	mls	r3, r8, r9, r3
     320:	fa1f fa8e 	uxth.w	sl, lr
     324:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
     328:	fb09 f40a 	mul.w	r4, r9, sl
     32c:	429c      	cmp	r4, r3
     32e:	fa02 f207 	lsl.w	r2, r2, r7
     332:	fa00 f107 	lsl.w	r1, r0, r7
     336:	d90b      	bls.n	350 <__udivmoddi4+0x1b0>
     338:	eb1e 0303 	adds.w	r3, lr, r3
     33c:	f109 30ff 	add.w	r0, r9, #4294967295
     340:	f080 8087 	bcs.w	452 <CONFIG_FLASH_SIZE+0x52>
     344:	429c      	cmp	r4, r3
     346:	f240 8084 	bls.w	452 <CONFIG_FLASH_SIZE+0x52>
     34a:	f1a9 0902 	sub.w	r9, r9, #2
     34e:	4473      	add	r3, lr
     350:	1b1b      	subs	r3, r3, r4
     352:	b2ad      	uxth	r5, r5
     354:	fbb3 f0f8 	udiv	r0, r3, r8
     358:	fb08 3310 	mls	r3, r8, r0, r3
     35c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
     360:	fb00 fa0a 	mul.w	sl, r0, sl
     364:	45a2      	cmp	sl, r4
     366:	d908      	bls.n	37a <__udivmoddi4+0x1da>
     368:	eb1e 0404 	adds.w	r4, lr, r4
     36c:	f100 33ff 	add.w	r3, r0, #4294967295
     370:	d26b      	bcs.n	44a <CONFIG_FLASH_SIZE+0x4a>
     372:	45a2      	cmp	sl, r4
     374:	d969      	bls.n	44a <CONFIG_FLASH_SIZE+0x4a>
     376:	3802      	subs	r0, #2
     378:	4474      	add	r4, lr
     37a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37e:	fba0 8902 	umull	r8, r9, r0, r2
     382:	eba4 040a 	sub.w	r4, r4, sl
     386:	454c      	cmp	r4, r9
     388:	46c2      	mov	sl, r8
     38a:	464b      	mov	r3, r9
     38c:	d354      	bcc.n	438 <CONFIG_FLASH_SIZE+0x38>
     38e:	d051      	beq.n	434 <CONFIG_FLASH_SIZE+0x34>
     390:	2e00      	cmp	r6, #0
     392:	d069      	beq.n	468 <CONFIG_FLASH_SIZE+0x68>
     394:	ebb1 050a 	subs.w	r5, r1, sl
     398:	eb64 0403 	sbc.w	r4, r4, r3
     39c:	fa04 fc0c 	lsl.w	ip, r4, ip
     3a0:	40fd      	lsrs	r5, r7
     3a2:	40fc      	lsrs	r4, r7
     3a4:	ea4c 0505 	orr.w	r5, ip, r5
     3a8:	e9c6 5400 	strd	r5, r4, [r6]
     3ac:	2700      	movs	r7, #0
     3ae:	e747      	b.n	240 <__udivmoddi4+0xa0>
     3b0:	f1c2 0320 	rsb	r3, r2, #32
     3b4:	fa20 f703 	lsr.w	r7, r0, r3
     3b8:	4095      	lsls	r5, r2
     3ba:	fa01 f002 	lsl.w	r0, r1, r2
     3be:	fa21 f303 	lsr.w	r3, r1, r3
     3c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     3c6:	4338      	orrs	r0, r7
     3c8:	0c01      	lsrs	r1, r0, #16
     3ca:	fbb3 f7fe 	udiv	r7, r3, lr
     3ce:	fa1f f885 	uxth.w	r8, r5
     3d2:	fb0e 3317 	mls	r3, lr, r7, r3
     3d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3da:	fb07 f308 	mul.w	r3, r7, r8
     3de:	428b      	cmp	r3, r1
     3e0:	fa04 f402 	lsl.w	r4, r4, r2
     3e4:	d907      	bls.n	3f6 <__udivmoddi4+0x256>
     3e6:	1869      	adds	r1, r5, r1
     3e8:	f107 3cff 	add.w	ip, r7, #4294967295
     3ec:	d22f      	bcs.n	44e <CONFIG_FLASH_SIZE+0x4e>
     3ee:	428b      	cmp	r3, r1
     3f0:	d92d      	bls.n	44e <CONFIG_FLASH_SIZE+0x4e>
     3f2:	3f02      	subs	r7, #2
     3f4:	4429      	add	r1, r5
     3f6:	1acb      	subs	r3, r1, r3
     3f8:	b281      	uxth	r1, r0
     3fa:	fbb3 f0fe 	udiv	r0, r3, lr
     3fe:	fb0e 3310 	mls	r3, lr, r0, r3
     402:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     406:	fb00 f308 	mul.w	r3, r0, r8
     40a:	428b      	cmp	r3, r1
     40c:	d907      	bls.n	41e <CONFIG_FLASH_SIZE+0x1e>
     40e:	1869      	adds	r1, r5, r1
     410:	f100 3cff 	add.w	ip, r0, #4294967295
     414:	d217      	bcs.n	446 <CONFIG_FLASH_SIZE+0x46>
     416:	428b      	cmp	r3, r1
     418:	d915      	bls.n	446 <CONFIG_FLASH_SIZE+0x46>
     41a:	3802      	subs	r0, #2
     41c:	4429      	add	r1, r5
     41e:	1ac9      	subs	r1, r1, r3
     420:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     424:	e73b      	b.n	29e <__udivmoddi4+0xfe>
     426:	4637      	mov	r7, r6
     428:	4630      	mov	r0, r6
     42a:	e709      	b.n	240 <__udivmoddi4+0xa0>
     42c:	4607      	mov	r7, r0
     42e:	e6e7      	b.n	200 <__udivmoddi4+0x60>
     430:	4618      	mov	r0, r3
     432:	e6fb      	b.n	22c <__udivmoddi4+0x8c>
     434:	4541      	cmp	r1, r8
     436:	d2ab      	bcs.n	390 <__udivmoddi4+0x1f0>
     438:	ebb8 0a02 	subs.w	sl, r8, r2
     43c:	eb69 020e 	sbc.w	r2, r9, lr
     440:	3801      	subs	r0, #1
     442:	4613      	mov	r3, r2
     444:	e7a4      	b.n	390 <__udivmoddi4+0x1f0>
     446:	4660      	mov	r0, ip
     448:	e7e9      	b.n	41e <CONFIG_FLASH_SIZE+0x1e>
     44a:	4618      	mov	r0, r3
     44c:	e795      	b.n	37a <__udivmoddi4+0x1da>
     44e:	4667      	mov	r7, ip
     450:	e7d1      	b.n	3f6 <__udivmoddi4+0x256>
     452:	4681      	mov	r9, r0
     454:	e77c      	b.n	350 <__udivmoddi4+0x1b0>
     456:	3802      	subs	r0, #2
     458:	442c      	add	r4, r5
     45a:	e747      	b.n	2ec <__udivmoddi4+0x14c>
     45c:	f1ac 0c02 	sub.w	ip, ip, #2
     460:	442b      	add	r3, r5
     462:	e72f      	b.n	2c4 <__udivmoddi4+0x124>
     464:	4638      	mov	r0, r7
     466:	e708      	b.n	27a <__udivmoddi4+0xda>
     468:	4637      	mov	r7, r6
     46a:	e6e9      	b.n	240 <__udivmoddi4+0xa0>

0000046c <__aeabi_idiv0>:
     46c:	4770      	bx	lr
     46e:	bf00      	nop

00000470 <main>:
#define MODULE_LOG_LEVEL 4
LOG_MODULE_REGISTER(our_sample, MODULE_LOG_LEVEL);

void main(void)
{
	printk("Hello World! %s\n", CONFIG_BOARD);
     470:	4901      	ldr	r1, [pc, #4]	; (478 <main+0x8>)
     472:	4802      	ldr	r0, [pc, #8]	; (47c <main+0xc>)
     474:	f002 ba5b 	b.w	292e <printk>
     478:	0000340c 	.word	0x0000340c
     47c:	0000341e 	.word	0x0000341e

00000480 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     480:	680b      	ldr	r3, [r1, #0]
     482:	3301      	adds	r3, #1
     484:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     486:	4b01      	ldr	r3, [pc, #4]	; (48c <char_out+0xc>)
     488:	681b      	ldr	r3, [r3, #0]
     48a:	4718      	bx	r3
     48c:	200013f8 	.word	0x200013f8

00000490 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     494:	b085      	sub	sp, #20
     496:	469b      	mov	fp, r3
     498:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     49a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 524 <_printk_dec_ulong+0x94>
     49e:	2c01      	cmp	r4, #1
     4a0:	bfb8      	it	lt
     4a2:	2401      	movlt	r4, #1
     4a4:	2b01      	cmp	r3, #1
     4a6:	bf0c      	ite	eq
     4a8:	2330      	moveq	r3, #48	; 0x30
     4aa:	2320      	movne	r3, #32
     4ac:	4616      	mov	r6, r2
     4ae:	4682      	mov	sl, r0
     4b0:	4688      	mov	r8, r1
     4b2:	9302      	str	r3, [sp, #8]
     4b4:	2501      	movs	r5, #1
     4b6:	270a      	movs	r7, #10
     4b8:	2200      	movs	r2, #0
     4ba:	fbb6 f3f9 	udiv	r3, r6, r9
     4be:	9301      	str	r3, [sp, #4]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     4c0:	b90a      	cbnz	r2, 4c6 <_printk_dec_ulong+0x36>
     4c2:	45b1      	cmp	r9, r6
     4c4:	d81d      	bhi.n	502 <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     4c6:	9b01      	ldr	r3, [sp, #4]
     4c8:	4641      	mov	r1, r8
     4ca:	f103 0030 	add.w	r0, r3, #48	; 0x30
     4ce:	47d0      	blx	sl
			digits++;
     4d0:	3501      	adds	r5, #1
			found_largest_digit = 1;
     4d2:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     4d4:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     4d6:	3f01      	subs	r7, #1
	while (pos >= 10) {
     4d8:	2f01      	cmp	r7, #1
		remainder %= pos;
     4da:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
     4de:	f04f 030a 	mov.w	r3, #10
     4e2:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     4e6:	d1e8      	bne.n	4ba <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
     4e8:	4641      	mov	r1, r8
     4ea:	f106 0030 	add.w	r0, r6, #48	; 0x30
     4ee:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
     4f0:	f1bb 0f03 	cmp.w	fp, #3
     4f4:	d102      	bne.n	4fc <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
     4f6:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
     4f8:	2c00      	cmp	r4, #0
     4fa:	dc0e      	bgt.n	51a <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
     4fc:	b005      	add	sp, #20
     4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     502:	42bc      	cmp	r4, r7
     504:	dbe6      	blt.n	4d4 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     506:	f1bb 0f02 	cmp.w	fp, #2
     50a:	d8e3      	bhi.n	4d4 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     50c:	4641      	mov	r1, r8
     50e:	9802      	ldr	r0, [sp, #8]
     510:	9203      	str	r2, [sp, #12]
			digits++;
     512:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     514:	47d0      	blx	sl
			digits++;
     516:	9a03      	ldr	r2, [sp, #12]
     518:	e7dc      	b.n	4d4 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     51a:	4641      	mov	r1, r8
     51c:	2020      	movs	r0, #32
     51e:	47d0      	blx	sl
     520:	3c01      	subs	r4, #1
     522:	e7e9      	b.n	4f8 <_printk_dec_ulong+0x68>
     524:	3b9aca00 	.word	0x3b9aca00

00000528 <__printk_hook_install>:
	_char_out = fn;
     528:	4b01      	ldr	r3, [pc, #4]	; (530 <__printk_hook_install+0x8>)
     52a:	6018      	str	r0, [r3, #0]
}
     52c:	4770      	bx	lr
     52e:	bf00      	nop
     530:	200013f8 	.word	0x200013f8

00000534 <vprintk>:
{
     534:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     536:	ac02      	add	r4, sp, #8
     538:	2300      	movs	r3, #0
     53a:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
     53e:	4602      	mov	r2, r0
     540:	460b      	mov	r3, r1
     542:	4803      	ldr	r0, [pc, #12]	; (550 <vprintk+0x1c>)
     544:	4621      	mov	r1, r4
     546:	f002 f87c 	bl	2642 <z_vprintk>
}
     54a:	b002      	add	sp, #8
     54c:	bd10      	pop	{r4, pc}
     54e:	bf00      	nop
     550:	00000481 	.word	0x00000481

00000554 <nordicsemi_nrf52_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     554:	f04f 0320 	mov.w	r3, #32
     558:	f3ef 8211 	mrs	r2, BASEPRI
     55c:	f383 8811 	msr	BASEPRI, r3
     560:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     564:	4906      	ldr	r1, [pc, #24]	; (580 <nordicsemi_nrf52_init+0x2c>)
     566:	2301      	movs	r3, #1
     568:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
     56c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     570:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     574:	f382 8811 	msr	BASEPRI, r2
     578:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     57c:	2000      	movs	r0, #0
     57e:	4770      	bx	lr
     580:	4001e000 	.word	0x4001e000

00000584 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     584:	280a      	cmp	r0, #10
{
     586:	b538      	push	{r3, r4, r5, lr}
     588:	4604      	mov	r4, r0
     58a:	4d07      	ldr	r5, [pc, #28]	; (5a8 <console_out+0x24>)
	if ('\n' == c) {
     58c:	d104      	bne.n	598 <console_out+0x14>
     58e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
     590:	6843      	ldr	r3, [r0, #4]
     592:	210d      	movs	r1, #13
     594:	685b      	ldr	r3, [r3, #4]
     596:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
     598:	6828      	ldr	r0, [r5, #0]
     59a:	6843      	ldr	r3, [r0, #4]
     59c:	b2e1      	uxtb	r1, r4
     59e:	685b      	ldr	r3, [r3, #4]
     5a0:	4798      	blx	r3

	return c;
}
     5a2:	4620      	mov	r0, r4
     5a4:	bd38      	pop	{r3, r4, r5, pc}
     5a6:	bf00      	nop
     5a8:	20000008 	.word	0x20000008

000005ac <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
     5ac:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
     5ae:	4c04      	ldr	r4, [pc, #16]	; (5c0 <uart_console_hook_install+0x14>)
     5b0:	4620      	mov	r0, r4
     5b2:	f000 fc8f 	bl	ed4 <__stdout_hook_install>
	__printk_hook_install(console_out);
     5b6:	4620      	mov	r0, r4
}
     5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
     5bc:	f7ff bfb4 	b.w	528 <__printk_hook_install>
     5c0:	00000585 	.word	0x00000585

000005c4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     5c4:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) z_arch_syscall_invoke1(*(u32_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     5c6:	4804      	ldr	r0, [pc, #16]	; (5d8 <uart_console_init+0x14>)
     5c8:	f001 f878 	bl	16bc <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     5cc:	4b03      	ldr	r3, [pc, #12]	; (5dc <uart_console_init+0x18>)
     5ce:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
     5d0:	f7ff ffec 	bl	5ac <uart_console_hook_install>

	return 0;
}
     5d4:	2000      	movs	r0, #0
     5d6:	bd08      	pop	{r3, pc}
     5d8:	0000343e 	.word	0x0000343e
     5dc:	20000008 	.word	0x20000008

000005e0 <nrf_power_clock_isr>:
#endif
}

__STATIC_INLINE bool nrf_clock_event_check(nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
     5e0:	4b15      	ldr	r3, [pc, #84]	; (638 <nrf_power_clock_isr+0x58>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     5e2:	b507      	push	{r0, r1, r2, lr}
     5e4:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
     5e6:	b182      	cbz	r2, 60a <nrf_power_clock_isr+0x2a>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
     5e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     5ec:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
     5f0:	07d1      	lsls	r1, r2, #31
     5f2:	d50a      	bpl.n	60a <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
     5f4:	2200      	movs	r2, #0
     5f6:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + (uint32_t)event));
     5f8:	681b      	ldr	r3, [r3, #0]
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
     5fa:	4810      	ldr	r0, [pc, #64]	; (63c <nrf_power_clock_isr+0x5c>)
     5fc:	9300      	str	r3, [sp, #0]
    (void)dummy;
     5fe:	9b00      	ldr	r3, [sp, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
     600:	6883      	ldr	r3, [r0, #8]
     602:	7a5b      	ldrb	r3, [r3, #9]
     604:	b90b      	cbnz	r3, 60a <nrf_power_clock_isr+0x2a>
			clkstarted_handle(hfclk_dev);
     606:	f002 fa4a 	bl	2a9e <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
     60a:	4b0d      	ldr	r3, [pc, #52]	; (640 <nrf_power_clock_isr+0x60>)
     60c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
     60e:	b182      	cbz	r2, 632 <nrf_power_clock_isr+0x52>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
     610:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     614:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
     618:	0792      	lsls	r2, r2, #30
     61a:	d50a      	bpl.n	632 <nrf_power_clock_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
     61c:	2200      	movs	r2, #0
     61e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + (uint32_t)event));
     620:	681b      	ldr	r3, [r3, #0]
     622:	9301      	str	r3, [sp, #4]
    (void)dummy;
     624:	9b01      	ldr	r3, [sp, #4]

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
     626:	4807      	ldr	r0, [pc, #28]	; (644 <nrf_power_clock_isr+0x64>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     628:	b003      	add	sp, #12
     62a:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(lfclk_dev);
     62e:	f002 ba36 	b.w	2a9e <clkstarted_handle>
}
     632:	b003      	add	sp, #12
     634:	f85d fb04 	ldr.w	pc, [sp], #4
     638:	40000100 	.word	0x40000100
     63c:	200014a4 	.word	0x200014a4
     640:	40000104 	.word	0x40000104
     644:	200014b0 	.word	0x200014b0

00000648 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
     648:	4b0d      	ldr	r3, [pc, #52]	; (680 <rtc1_nrf_isr+0x38>)
     64a:	2200      	movs	r2, #0
     64c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
     650:	f04f 0220 	mov.w	r2, #32
     654:	f3ef 8111 	mrs	r1, BASEPRI
     658:	f382 8811 	msr	BASEPRI, r2
     65c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     660:	4a08      	ldr	r2, [pc, #32]	; (684 <rtc1_nrf_isr+0x3c>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
     662:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
     666:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     668:	1ac0      	subs	r0, r0, r3
     66a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     66e:	4403      	add	r3, r0
     670:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
     672:	f381 8811 	msr	BASEPRI, r1
     676:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     67a:	f001 bd9d 	b.w	21b8 <z_clock_announce>
     67e:	bf00      	nop
     680:	40011000 	.word	0x40011000
     684:	20000024 	.word	0x20000024

00000688 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
     688:	b573      	push	{r0, r1, r4, r5, r6, lr}
     68a:	481c      	ldr	r0, [pc, #112]	; (6fc <z_clock_driver_init+0x74>)
     68c:	f001 f816 	bl	16bc <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
     690:	b380      	cbz	r0, 6f4 <z_clock_driver_init+0x6c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     692:	6843      	ldr	r3, [r0, #4]
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     694:	4d1a      	ldr	r5, [pc, #104]	; (700 <z_clock_driver_init+0x78>)
     696:	681b      	ldr	r3, [r3, #0]
     698:	2100      	movs	r1, #0
     69a:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
     69c:	2601      	movs	r6, #1
    p_reg->PRESCALER = val;
     69e:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
     6a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
     6a4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
     6a8:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
     6ac:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     6b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     6b4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     6b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     6bc:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     6be:	681b      	ldr	r3, [r3, #0]
     6c0:	9301      	str	r3, [sp, #4]
    (void)dummy;
     6c2:	9b01      	ldr	r3, [sp, #4]
     6c4:	4b0f      	ldr	r3, [pc, #60]	; (704 <z_clock_driver_init+0x7c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     6c6:	4631      	mov	r1, r6
     6c8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     6cc:	2011      	movs	r0, #17
     6ce:	4622      	mov	r2, r4
     6d0:	f000 f9d0 	bl	a74 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
     6d4:	2011      	movs	r0, #17
     6d6:	f000 f9bd 	bl	a54 <z_arch_irq_enable>
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     6da:	4b0b      	ldr	r3, [pc, #44]	; (708 <z_clock_driver_init+0x80>)
     6dc:	601e      	str	r6, [r3, #0]
     6de:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
     6e0:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
     6e4:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     6e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     6ea:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
     6ee:	4620      	mov	r0, r4
}
     6f0:	b002      	add	sp, #8
     6f2:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
     6f4:	f04f 30ff 	mov.w	r0, #4294967295
     6f8:	e7fa      	b.n	6f0 <z_clock_driver_init+0x68>
     6fa:	bf00      	nop
     6fc:	00003445 	.word	0x00003445
     700:	40011000 	.word	0x40011000
     704:	e000e100 	.word	0xe000e100
     708:	40011008 	.word	0x40011008

0000070c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
     70c:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
     70e:	4e21      	ldr	r6, [pc, #132]	; (794 <z_clock_set_timeout+0x88>)
     710:	f1b0 3fff 	cmp.w	r0, #4294967295
     714:	bf08      	it	eq
     716:	4630      	moveq	r0, r6
	__asm__ volatile(
     718:	f04f 0320 	mov.w	r3, #32
     71c:	f3ef 8411 	mrs	r4, BASEPRI
     720:	f383 8811 	msr	BASEPRI, r3
     724:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     728:	491b      	ldr	r1, [pc, #108]	; (798 <z_clock_set_timeout+0x8c>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
     72a:	4b1c      	ldr	r3, [pc, #112]	; (79c <z_clock_set_timeout+0x90>)
     72c:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
     730:	681d      	ldr	r5, [r3, #0]
	return (a - b) & COUNTER_MAX;
     732:	1b53      	subs	r3, r2, r5
     734:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
     738:	3501      	adds	r5, #1
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     73a:	3801      	subs	r0, #1
	cyc += last_count;
     73c:	442b      	add	r3, r5
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
     73e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += last_count;
     742:	42b0      	cmp	r0, r6
     744:	bfd4      	ite	le
     746:	1818      	addle	r0, r3, r0
     748:	1998      	addgt	r0, r3, r6
	return (a - b) & COUNTER_MAX;
     74a:	1a82      	subs	r2, r0, r2
     74c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     750:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
     754:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
     756:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
     75a:	d904      	bls.n	766 <z_clock_set_timeout+0x5a>
	__asm__ volatile(
     75c:	f384 8811 	msr	BASEPRI, r4
     760:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
     764:	bd70      	pop	{r4, r5, r6, pc}
     return p_reg->COUNTER;
     766:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
     76a:	4a0d      	ldr	r2, [pc, #52]	; (7a0 <z_clock_set_timeout+0x94>)
	return (a - b) & COUNTER_MAX;
     76c:	1ac3      	subs	r3, r0, r3
     76e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
     772:	1e5d      	subs	r5, r3, #1
     774:	4295      	cmp	r5, r2
     776:	d905      	bls.n	784 <z_clock_set_timeout+0x78>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     778:	4b0a      	ldr	r3, [pc, #40]	; (7a4 <z_clock_set_timeout+0x98>)
     77a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     77e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     782:	e7eb      	b.n	75c <z_clock_set_timeout+0x50>
		} else if (dt == 1) {
     784:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
     786:	bf02      	ittt	eq
     788:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     78a:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     78e:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
     792:	e7e3      	b.n	75c <z_clock_set_timeout+0x50>
     794:	00fffffe 	.word	0x00fffffe
     798:	40011000 	.word	0x40011000
     79c:	20000024 	.word	0x20000024
     7a0:	007ffffe 	.word	0x007ffffe
     7a4:	e000e100 	.word	0xe000e100

000007a8 <z_clock_elapsed>:
	__asm__ volatile(
     7a8:	f04f 0220 	mov.w	r2, #32
     7ac:	f3ef 8311 	mrs	r3, BASEPRI
     7b0:	f382 8811 	msr	BASEPRI, r2
     7b4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     7b8:	4a06      	ldr	r2, [pc, #24]	; (7d4 <z_clock_elapsed+0x2c>)
     7ba:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     7be:	4a06      	ldr	r2, [pc, #24]	; (7d8 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     7c0:	6812      	ldr	r2, [r2, #0]
     7c2:	1a80      	subs	r0, r0, r2
     7c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     7c8:	f383 8811 	msr	BASEPRI, r3
     7cc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     7d0:	4770      	bx	lr
     7d2:	bf00      	nop
     7d4:	40011000 	.word	0x40011000
     7d8:	20000024 	.word	0x20000024

000007dc <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
     7dc:	4801      	ldr	r0, [pc, #4]	; (7e4 <nrf_cc310_platform_abort_init+0x8>)
     7de:	f001 bd87 	b.w	22f0 <nrf_cc310_platform_set_abort>
     7e2:	bf00      	nop
     7e4:	00003308 	.word	0x00003308

000007e8 <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
     7e8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
     7ea:	b130      	cbz	r0, 7fa <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     7ec:	6843      	ldr	r3, [r0, #4]
     7ee:	b13b      	cbz	r3, 800 <CONFIG_ISR_STACK_SIZE>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
     7f0:	6800      	ldr	r0, [r0, #0]
     7f2:	f001 f94f 	bl	1a94 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
     7f6:	2000      	movs	r0, #0
}
     7f8:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
     7fa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     7fe:	e7fb      	b.n	7f8 <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     800:	4800      	ldr	r0, [pc, #0]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     802:	e7f9      	b.n	7f8 <mutex_unlock+0x10>
     804:	ffff8fea 	.word	0xffff8fea

00000808 <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
     808:	b508      	push	{r3, lr}
    if(mutex == NULL) {
     80a:	b158      	cbz	r0, 824 <mutex_lock+0x1c>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     80c:	6843      	ldr	r3, [r0, #4]
     80e:	b163      	cbz	r3, 82a <mutex_lock+0x22>
    p_mutex = (struct k_mutex *)mutex->mutex;
     810:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
     812:	f04f 31ff 	mov.w	r1, #4294967295
     816:	f001 f8cb 	bl	19b0 <z_impl_k_mutex_lock>
    if (ret == 0) {
     81a:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
     81c:	4804      	ldr	r0, [pc, #16]	; (830 <mutex_lock+0x28>)
     81e:	bf08      	it	eq
     820:	2000      	moveq	r0, #0
}
     822:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
     824:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     828:	e7fb      	b.n	822 <mutex_lock+0x1a>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     82a:	4802      	ldr	r0, [pc, #8]	; (834 <mutex_lock+0x2c>)
     82c:	e7f9      	b.n	822 <mutex_lock+0x1a>
     82e:	bf00      	nop
     830:	ffff8fe9 	.word	0xffff8fe9
     834:	ffff8fea 	.word	0xffff8fea

00000838 <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
     838:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
     83a:	4604      	mov	r4, r0
     83c:	b918      	cbnz	r0, 846 <mutex_free+0xe>
        platform_abort_apis.abort_fn(
     83e:	4b0b      	ldr	r3, [pc, #44]	; (86c <mutex_free+0x34>)
     840:	480b      	ldr	r0, [pc, #44]	; (870 <mutex_free+0x38>)
     842:	685b      	ldr	r3, [r3, #4]
     844:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     846:	6865      	ldr	r5, [r4, #4]
     848:	b155      	cbz	r5, 860 <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
     84a:	f015 0502 	ands.w	r5, r5, #2
     84e:	6820      	ldr	r0, [r4, #0]
     850:	d107      	bne.n	862 <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
     852:	4601      	mov	r1, r0
     854:	4807      	ldr	r0, [pc, #28]	; (874 <mutex_free+0x3c>)
     856:	f001 f87d 	bl	1954 <k_mem_slab_free>
        mutex->mutex = NULL;
     85a:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
     85c:	2300      	movs	r3, #0
     85e:	6063      	str	r3, [r4, #4]
}
     860:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     862:	2214      	movs	r2, #20
     864:	2100      	movs	r1, #0
     866:	f002 f98b 	bl	2b80 <memset>
     86a:	e7f7      	b.n	85c <mutex_free+0x24>
     86c:	20001434 	.word	0x20001434
     870:	00003463 	.word	0x00003463
     874:	20000028 	.word	0x20000028

00000878 <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
     878:	b510      	push	{r4, lr}
    if (mutex == NULL) {
     87a:	4604      	mov	r4, r0
     87c:	b918      	cbnz	r0, 886 <mutex_init+0xe>
        platform_abort_apis.abort_fn(
     87e:	4b13      	ldr	r3, [pc, #76]	; (8cc <mutex_init+0x54>)
     880:	4813      	ldr	r0, [pc, #76]	; (8d0 <mutex_init+0x58>)
     882:	685b      	ldr	r3, [r3, #4]
     884:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
     886:	6863      	ldr	r3, [r4, #4]
     888:	b9bb      	cbnz	r3, 8ba <mutex_init+0x42>
     88a:	6823      	ldr	r3, [r4, #0]
     88c:	b9ab      	cbnz	r3, 8ba <mutex_init+0x42>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
     88e:	f04f 32ff 	mov.w	r2, #4294967295
     892:	4621      	mov	r1, r4
     894:	480f      	ldr	r0, [pc, #60]	; (8d4 <mutex_init+0x5c>)
     896:	f001 f82f 	bl	18f8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
     89a:	b908      	cbnz	r0, 8a0 <mutex_init+0x28>
     89c:	6823      	ldr	r3, [r4, #0]
     89e:	b91b      	cbnz	r3, 8a8 <mutex_init+0x30>
            platform_abort_apis.abort_fn(
     8a0:	4b0a      	ldr	r3, [pc, #40]	; (8cc <mutex_init+0x54>)
     8a2:	480d      	ldr	r0, [pc, #52]	; (8d8 <mutex_init+0x60>)
     8a4:	685b      	ldr	r3, [r3, #4]
     8a6:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     8a8:	2214      	movs	r2, #20
     8aa:	2100      	movs	r1, #0
     8ac:	6820      	ldr	r0, [r4, #0]
     8ae:	f002 f967 	bl	2b80 <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
     8b2:	6863      	ldr	r3, [r4, #4]
     8b4:	f043 0302 	orr.w	r3, r3, #2
     8b8:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
     8ba:	6820      	ldr	r0, [r4, #0]
	z_impl_k_mutex_init(mutex);
     8bc:	f002 facc 	bl	2e58 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
     8c0:	6863      	ldr	r3, [r4, #4]
     8c2:	f043 0301 	orr.w	r3, r3, #1
     8c6:	6063      	str	r3, [r4, #4]
}
     8c8:	bd10      	pop	{r4, pc}
     8ca:	bf00      	nop
     8cc:	20001434 	.word	0x20001434
     8d0:	00003463 	.word	0x00003463
     8d4:	20000028 	.word	0x20000028
     8d8:	00003489 	.word	0x00003489

000008dc <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
     8dc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
     8de:	4906      	ldr	r1, [pc, #24]	; (8f8 <nrf_cc310_platform_mutex_init+0x1c>)
     8e0:	4806      	ldr	r0, [pc, #24]	; (8fc <nrf_cc310_platform_mutex_init+0x20>)
     8e2:	2340      	movs	r3, #64	; 0x40
     8e4:	2214      	movs	r2, #20
     8e6:	f002 faa5 	bl	2e34 <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
     8ea:	4905      	ldr	r1, [pc, #20]	; (900 <nrf_cc310_platform_mutex_init+0x24>)
     8ec:	4805      	ldr	r0, [pc, #20]	; (904 <nrf_cc310_platform_mutex_init+0x28>)
}
     8ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
     8f2:	f001 bd39 	b.w	2368 <nrf_cc310_platform_set_mutexes>
     8f6:	bf00      	nop
     8f8:	20000044 	.word	0x20000044
     8fc:	20000028 	.word	0x20000028
     900:	00003320 	.word	0x00003320
     904:	00003310 	.word	0x00003310

00000908 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     908:	4804      	ldr	r0, [pc, #16]	; (91c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     90a:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
     90c:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
     90e:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     910:	d003      	beq.n	91a <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     912:	4903      	ldr	r1, [pc, #12]	; (920 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     918:	600a      	str	r2, [r1, #0]

0000091a <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
     91a:	4770      	bx	lr
    ldr r0, =_kernel
     91c:	2000065c 	.word	0x2000065c
    ldr r1, =_SCS_ICSR
     920:	e000ed04 	.word	0xe000ed04

00000924 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     924:	4912      	ldr	r1, [pc, #72]	; (970 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     926:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     928:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
     92c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
     92e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     932:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     936:	2020      	movs	r0, #32
    msr BASEPRI, r0
     938:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
     93c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
     940:	4f0c      	ldr	r7, [pc, #48]	; (974 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     942:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
     946:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
     948:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
     94a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
     94c:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
     94e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     950:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     952:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
     956:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
     958:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
     95a:	f002 f8cf 	bl	2afc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
     95e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     962:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     966:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
     96a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
     96e:	4770      	bx	lr
    ldr r1, =_kernel
     970:	2000065c 	.word	0x2000065c
    ldr v4, =_SCS_ICSR
     974:	e000ed04 	.word	0xe000ed04

00000978 <z_arm_svc>:
 */
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
    tst lr, #0x4    /* did we come from thread mode ? */
     978:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     97c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     97e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     982:	f3ef 8009 	mrsne	r0, PSP


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     986:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
    ldrb r1, [r1, #-2]
     988:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    tst r2, #0x1
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
     98c:	2902      	cmp	r1, #2
    beq _oops
     98e:	d0ff      	beq.n	990 <_oops>

00000990 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
     990:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
     992:	f002 f8a8 	bl	2ae6 <z_do_kernel_oops>
    pop {r0, pc}
     996:	bd01      	pop	{r0, pc}

00000998 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
     998:	4901      	ldr	r1, [pc, #4]	; (9a0 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     99a:	2210      	movs	r2, #16
	str r2, [r1]
     99c:	600a      	str	r2, [r1, #0]
#endif
	bx lr
     99e:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     9a0:	e000ed10 	.word	0xe000ed10

000009a4 <z_arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     9a4:	4040      	eors	r0, r0
	msr BASEPRI, r0
     9a6:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     9aa:	bf30      	wfi

	bx lr
     9ac:	4770      	bx	lr
     9ae:	bf00      	nop

000009b0 <z_arm_bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
     9b0:	4040      	eors	r0, r0
	msr BASEPRI, r0
     9b2:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
     9b6:	f8df c01c 	ldr.w	ip, [pc, #28]	; 9d4 <z_arm_bus_fault+0x24>
	ldr ip, [ip]
     9ba:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
     9be:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
     9c2:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
     9c4:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
     9c8:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
     9cc:	b501      	push	{r0, lr}
	bl z_arm_fault
     9ce:	f000 f92d 	bl	c2c <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
     9d2:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
     9d4:	e000ed04 	.word	0xe000ed04

000009d8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
     9d8:	bf30      	wfi
    b z_SysNmiOnReset
     9da:	f7ff bffd 	b.w	9d8 <z_SysNmiOnReset>
     9de:	bf00      	nop

000009e0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
     9e0:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     9e2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     9e4:	4a0b      	ldr	r2, [pc, #44]	; (a14 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     9e6:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
     9e8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     9ea:	bf1e      	ittt	ne
	movne	r1, #0
     9ec:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     9ee:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
     9f0:	f002 fa1e 	blne	2e30 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     9f4:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
     9f6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     9fa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     9fe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     a02:	4905      	ldr	r1, [pc, #20]	; (a18 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     a04:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     a06:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
     a08:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
     a0a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
     a0e:	4903      	ldr	r1, [pc, #12]	; (a1c <_isr_wrapper+0x3c>)
	bx r1
     a10:	4708      	bx	r1
     a12:	0000      	.short	0x0000
	ldr r2, =_kernel
     a14:	2000065c 	.word	0x2000065c
	ldr r1, =_sw_isr_table
     a18:	000030ac 	.word	0x000030ac
	ldr r1, =z_arm_int_exit
     a1c:	00000909 	.word	0x00000909

00000a20 <z_arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     a20:	4a09      	ldr	r2, [pc, #36]	; (a48 <z_arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
     a22:	490a      	ldr	r1, [pc, #40]	; (a4c <z_arch_swap+0x2c>)
	_current->arch.basepri = key;
     a24:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     a26:	6809      	ldr	r1, [r1, #0]
     a28:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     a2a:	4909      	ldr	r1, [pc, #36]	; (a50 <z_arch_swap+0x30>)
	_current->arch.basepri = key;
     a2c:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     a2e:	684b      	ldr	r3, [r1, #4]
     a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     a34:	604b      	str	r3, [r1, #4]
     a36:	2300      	movs	r3, #0
     a38:	f383 8811 	msr	BASEPRI, r3
     a3c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
     a40:	6893      	ldr	r3, [r2, #8]
}
     a42:	6e98      	ldr	r0, [r3, #104]	; 0x68
     a44:	4770      	bx	lr
     a46:	bf00      	nop
     a48:	2000065c 	.word	0x2000065c
     a4c:	00003388 	.word	0x00003388
     a50:	e000ed00 	.word	0xe000ed00

00000a54 <z_arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     a54:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     a56:	2b00      	cmp	r3, #0
     a58:	db08      	blt.n	a6c <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a5a:	2201      	movs	r2, #1
     a5c:	f000 001f 	and.w	r0, r0, #31
     a60:	fa02 f000 	lsl.w	r0, r2, r0
     a64:	095b      	lsrs	r3, r3, #5
     a66:	4a02      	ldr	r2, [pc, #8]	; (a70 <z_arch_irq_enable+0x1c>)
     a68:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     a6c:	4770      	bx	lr
     a6e:	bf00      	nop
     a70:	e000e100 	.word	0xe000e100

00000a74 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     a74:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
     a76:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     a78:	bfa8      	it	ge
     a7a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     a7e:	f101 0101 	add.w	r1, r1, #1
     a82:	ea4f 1141 	mov.w	r1, r1, lsl #5
     a86:	bfae      	itee	ge
     a88:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     a8c:	f000 000f 	andlt.w	r0, r0, #15
     a90:	4b03      	ldrlt	r3, [pc, #12]	; (aa0 <z_arm_irq_priority_set+0x2c>)
     a92:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     a94:	bfac      	ite	ge
     a96:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     a9a:	5419      	strblt	r1, [r3, r0]
}
     a9c:	4770      	bx	lr
     a9e:	bf00      	nop
     aa0:	e000ed14 	.word	0xe000ed14

00000aa4 <z_arch_new_thread>:
 */
void z_arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		       size_t stackSize, k_thread_entry_t pEntry,
		       void *parameter1, void *parameter2, void *parameter3,
		       int priority, unsigned int options)
{
     aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
     aa8:	188c      	adds	r4, r1, r2
{
     aaa:	4688      	mov	r8, r1
     aac:	4617      	mov	r7, r2
     aae:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
     ab0:	2204      	movs	r2, #4
     ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     ab4:	9909      	ldr	r1, [sp, #36]	; 0x24
     ab6:	4605      	mov	r5, r0
     ab8:	f002 faab 	bl	3012 <z_init_thread_base>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     abc:	f1a4 0320 	sub.w	r3, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
     ac0:	490c      	ldr	r1, [pc, #48]	; (af4 <z_arch_new_thread+0x50>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     ac2:	f023 0307 	bic.w	r3, r3, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
     ac6:	2200      	movs	r2, #0
	pInitCtx->basic.pc &= 0xfffffffe;
     ac8:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
     acc:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
     ad0:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
     ad4:	6199      	str	r1, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
     ad6:	9906      	ldr	r1, [sp, #24]
     ad8:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
     ada:	9907      	ldr	r1, [sp, #28]
     adc:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
     ade:	9908      	ldr	r1, [sp, #32]
     ae0:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
     ae2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
     ae6:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
     ae8:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     aea:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
     aec:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
     aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     af2:	bf00      	nop
     af4:	0000260f 	.word	0x0000260f

00000af8 <z_arch_switch_to_main_thread>:

void z_arch_switch_to_main_thread(struct k_thread *main_thread,
				  k_thread_stack_t *main_stack,
				  size_t main_stack_size,
				  k_thread_entry_t _main)
{
     af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     afa:	4605      	mov	r5, r0
     afc:	460c      	mov	r4, r1
     afe:	4617      	mov	r7, r2
     b00:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
     b02:	f000 f917 	bl	d34 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
     b06:	4b0b      	ldr	r3, [pc, #44]	; (b34 <z_arch_switch_to_main_thread+0x3c>)
	start_of_main_stack =
     b08:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
     b0a:	4628      	mov	r0, r5
	_current = main_thread;
     b0c:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
     b0e:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
     b12:	f001 fff3 	bl	2afc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
     b16:	4630      	mov	r0, r6
     b18:	f384 8809 	msr	PSP, r4
     b1c:	b663      	cpsie	if
     b1e:	f04f 0100 	mov.w	r1, #0
     b22:	f381 8811 	msr	BASEPRI, r1
     b26:	f3bf 8f6f 	isb	sy
     b2a:	2100      	movs	r1, #0
     b2c:	2200      	movs	r2, #0
     b2e:	2300      	movs	r3, #0
     b30:	f001 fd6d 	bl	260e <z_thread_entry>
     b34:	2000065c 	.word	0x2000065c

00000b38 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
     b38:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     b3a:	4b08      	ldr	r3, [pc, #32]	; (b5c <z_arm_prep_c+0x24>)
     b3c:	4a08      	ldr	r2, [pc, #32]	; (b60 <z_arm_prep_c+0x28>)
     b3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     b42:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     b44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     b48:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
     b4c:	f000 fdf6 	bl	173c <z_bss_zero>
	z_data_copy();
     b50:	f000 fdfe 	bl	1750 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
     b54:	f000 f8bc 	bl	cd0 <z_arm_int_lib_init>
	z_cstart();
     b58:	f000 fe2c 	bl	17b4 <z_cstart>
     b5c:	00000000 	.word	0x00000000
     b60:	e000ed00 	.word	0xe000ed00

00000b64 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
     b64:	f001 fef1 	bl	294a <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     b68:	2020      	movs	r0, #32
    msr BASEPRI, r0
     b6a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
     b6e:	4808      	ldr	r0, [pc, #32]	; (b90 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     b70:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     b74:	1840      	adds	r0, r0, r1
    msr PSP, r0
     b76:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
     b7a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
     b7e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
     b80:	4308      	orrs	r0, r1
    msr CONTROL, r0
     b82:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
     b86:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
     b8a:	f7ff ffd5 	bl	b38 <z_arm_prep_c>
     b8e:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
     b90:	20000bf8 	.word	0x20000bf8

00000b94 <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
     b94:	4b0c      	ldr	r3, [pc, #48]	; (bc8 <mem_manage_fault.isra.2+0x34>)
     b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
     b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
     b9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     b9c:	0792      	lsls	r2, r2, #30
     b9e:	d508      	bpl.n	bb2 <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
     ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
     ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     ba4:	0612      	lsls	r2, r2, #24
     ba6:	d504      	bpl.n	bb2 <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
     ba8:	b118      	cbz	r0, bb2 <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
     bb0:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
     bb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
     bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
     bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
     bba:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
     bbc:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
     bc0:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
     bc2:	7008      	strb	r0, [r1, #0]

	return reason;
}
     bc4:	4770      	bx	lr
     bc6:	bf00      	nop
     bc8:	e000ed00 	.word	0xe000ed00

00000bcc <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     bcc:	4b0d      	ldr	r3, [pc, #52]	; (c04 <bus_fault.isra.3+0x38>)
     bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     bd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     bd4:	0592      	lsls	r2, r2, #22
     bd6:	d508      	bpl.n	bea <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
     bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
     bda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     bdc:	0412      	lsls	r2, r2, #16
     bde:	d504      	bpl.n	bea <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
     be0:	b118      	cbz	r0, bea <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     be4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
     be8:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     bea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
     bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     bee:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
     bf0:	4a04      	ldr	r2, [pc, #16]	; (c04 <bus_fault.isra.3+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     bf2:	bf58      	it	pl
     bf4:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
     bf6:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
     bf8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
     bfa:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
     bfe:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
     c00:	7008      	strb	r0, [r1, #0]

	return reason;
}
     c02:	4770      	bx	lr
     c04:	e000ed00 	.word	0xe000ed00

00000c08 <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
     c08:	4b07      	ldr	r3, [pc, #28]	; (c28 <usage_fault.isra.4+0x20>)
     c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
     c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
     c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
     c10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
     c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
     c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c18:	ea6f 4202 	mvn.w	r2, r2, lsl #16
     c1c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
     c20:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
     c22:	2000      	movs	r0, #0
     c24:	4770      	bx	lr
     c26:	bf00      	nop
     c28:	e000ed00 	.word	0xe000ed00

00000c2c <z_arm_fault>:
 * running a Secure Firmware.
 */
void z_arm_fault(z_arch_esf_t *esf, u32_t exc_return)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     c2c:	4a20      	ldr	r2, [pc, #128]	; (cb0 <z_arm_fault+0x84>)
{
     c2e:	b513      	push	{r0, r1, r4, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     c30:	6853      	ldr	r3, [r2, #4]
     c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
	*recoverable = false;
     c36:	2100      	movs	r1, #0
	switch (fault) {
     c38:	3b03      	subs	r3, #3
{
     c3a:	4604      	mov	r4, r0
	*recoverable = false;
     c3c:	f88d 1007 	strb.w	r1, [sp, #7]
	switch (fault) {
     c40:	2b03      	cmp	r3, #3
     c42:	d833      	bhi.n	cac <z_arm_fault+0x80>
     c44:	e8df f003 	tbb	[pc, r3]
     c48:	272e2a02 	.word	0x272e2a02
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
     c4c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     c4e:	079b      	lsls	r3, r3, #30
     c50:	d42c      	bmi.n	cac <z_arm_fault+0x80>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
     c52:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
     c54:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
     c58:	d007      	beq.n	c6a <z_arm_fault+0x3e>
		if (SCB_MMFSR != 0) {
     c5a:	4b16      	ldr	r3, [pc, #88]	; (cb4 <z_arm_fault+0x88>)
     c5c:	781b      	ldrb	r3, [r3, #0]
     c5e:	b163      	cbz	r3, c7a <z_arm_fault+0x4e>
			reason = mem_manage_fault(esf, 1, recoverable);
     c60:	f10d 0107 	add.w	r1, sp, #7
     c64:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
     c66:	f7ff ff95 	bl	b94 <mem_manage_fault.isra.2>
#else
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
     c6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c6e:	b913      	cbnz	r3, c76 <z_arm_fault+0x4a>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
     c70:	4621      	mov	r1, r4
     c72:	f001 ff36 	bl	2ae2 <z_arm_fatal_error>
}
     c76:	b002      	add	sp, #8
     c78:	bd10      	pop	{r4, pc}
		} else if (SCB_BFSR != 0) {
     c7a:	4b0f      	ldr	r3, [pc, #60]	; (cb8 <z_arm_fault+0x8c>)
     c7c:	781b      	ldrb	r3, [r3, #0]
     c7e:	b12b      	cbz	r3, c8c <z_arm_fault+0x60>
			reason = bus_fault(esf, 1, recoverable);
     c80:	f10d 0107 	add.w	r1, sp, #7
     c84:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
     c86:	f7ff ffa1 	bl	bcc <bus_fault.isra.3>
     c8a:	e7ee      	b.n	c6a <z_arm_fault+0x3e>
		} else if (SCB_UFSR != 0) {
     c8c:	4b0b      	ldr	r3, [pc, #44]	; (cbc <z_arm_fault+0x90>)
     c8e:	8818      	ldrh	r0, [r3, #0]
     c90:	b280      	uxth	r0, r0
     c92:	2800      	cmp	r0, #0
     c94:	d0e9      	beq.n	c6a <z_arm_fault+0x3e>
		reason = usage_fault(esf);
     c96:	f7ff ffb7 	bl	c08 <usage_fault.isra.4>
     c9a:	e7e6      	b.n	c6a <z_arm_fault+0x3e>
		reason = mem_manage_fault(esf, 0, recoverable);
     c9c:	f10d 0107 	add.w	r1, sp, #7
     ca0:	2000      	movs	r0, #0
     ca2:	e7e0      	b.n	c66 <z_arm_fault+0x3a>
		reason = bus_fault(esf, 0, recoverable);
     ca4:	f10d 0107 	add.w	r1, sp, #7
     ca8:	2000      	movs	r0, #0
     caa:	e7ec      	b.n	c86 <z_arm_fault+0x5a>
	u32_t reason = K_ERR_CPU_EXCEPTION;
     cac:	2000      	movs	r0, #0
     cae:	e7dc      	b.n	c6a <z_arm_fault+0x3e>
     cb0:	e000ed00 	.word	0xe000ed00
     cb4:	e000ed28 	.word	0xe000ed28
     cb8:	e000ed29 	.word	0xe000ed29
     cbc:	e000ed2a 	.word	0xe000ed2a

00000cc0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     cc0:	4a02      	ldr	r2, [pc, #8]	; (ccc <z_arm_fault_init+0xc>)
     cc2:	6953      	ldr	r3, [r2, #20]
     cc4:	f043 0310 	orr.w	r3, r3, #16
     cc8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
     cca:	4770      	bx	lr
     ccc:	e000ed00 	.word	0xe000ed00

00000cd0 <z_arm_int_lib_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     cd0:	4804      	ldr	r0, [pc, #16]	; (ce4 <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
     cd2:	2300      	movs	r3, #0
     cd4:	2120      	movs	r1, #32
     cd6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     cd8:	3301      	adds	r3, #1
     cda:	2b30      	cmp	r3, #48	; 0x30
     cdc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     ce0:	d1f9      	bne.n	cd6 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     ce2:	4770      	bx	lr
     ce4:	e000e100 	.word	0xe000e100

00000ce8 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
     ce8:	b538      	push	{r3, r4, r5, lr}
     cea:	4605      	mov	r5, r0
	__asm__ volatile(
     cec:	f04f 0320 	mov.w	r3, #32
     cf0:	f3ef 8411 	mrs	r4, BASEPRI
     cf4:	f383 8811 	msr	BASEPRI, r3
     cf8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
     cfc:	f002 f96a 	bl	2fd4 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
     d00:	4b0a      	ldr	r3, [pc, #40]	; (d2c <z_impl_k_thread_abort+0x44>)
     d02:	689b      	ldr	r3, [r3, #8]
     d04:	42ab      	cmp	r3, r5
     d06:	d10b      	bne.n	d20 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     d08:	4b09      	ldr	r3, [pc, #36]	; (d30 <z_impl_k_thread_abort+0x48>)
     d0a:	685a      	ldr	r2, [r3, #4]
     d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
     d10:	b912      	cbnz	r2, d18 <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = z_arch_swap(key);
     d12:	4620      	mov	r0, r4
     d14:	f7ff fe84 	bl	a20 <z_arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     d18:	685a      	ldr	r2, [r3, #4]
     d1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     d1e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
     d20:	4620      	mov	r0, r4
}
     d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
     d26:	f002 b8ce 	b.w	2ec6 <z_reschedule_irqlock>
     d2a:	bf00      	nop
     d2c:	2000065c 	.word	0x2000065c
     d30:	e000ed00 	.word	0xe000ed00

00000d34 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
     d34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
     d36:	4b09      	ldr	r3, [pc, #36]	; (d5c <z_arm_configure_static_mpu_regions+0x28>)
     d38:	9301      	str	r3, [sp, #4]
     d3a:	4b09      	ldr	r3, [pc, #36]	; (d60 <z_arm_configure_static_mpu_regions+0x2c>)
     d3c:	9302      	str	r3, [sp, #8]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
     d3e:	a804      	add	r0, sp, #16
		const struct k_mem_partition ramfunc_region =
     d40:	4b08      	ldr	r3, [pc, #32]	; (d64 <z_arm_configure_static_mpu_regions+0x30>)
     d42:	9303      	str	r3, [sp, #12]
	const struct k_mem_partition *static_regions[] = {
     d44:	ab01      	add	r3, sp, #4
     d46:	f840 3d10 	str.w	r3, [r0, #-16]!
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
     d4a:	4a07      	ldr	r2, [pc, #28]	; (d68 <z_arm_configure_static_mpu_regions+0x34>)
     d4c:	4b07      	ldr	r3, [pc, #28]	; (d6c <z_arm_configure_static_mpu_regions+0x38>)
     d4e:	2101      	movs	r1, #1
     d50:	f000 f876 	bl	e40 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
     d54:	b005      	add	sp, #20
     d56:	f85d fb04 	ldr.w	pc, [sp], #4
     d5a:	bf00      	nop
     d5c:	20000000 	.word	0x20000000
     d60:	00000000 	.word	0x00000000
     d64:	060b0000 	.word	0x060b0000
     d68:	20000000 	.word	0x20000000
     d6c:	20040000 	.word	0x20040000

00000d70 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const u8_t index,
	const struct k_mem_partition *new_region)
{
     d70:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
     d72:	e9d1 4300 	ldrd	r4, r3, [r1]
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
     d76:	2b20      	cmp	r3, #32
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
     d78:	6889      	ldr	r1, [r1, #8]
	if (size <= 32U) {
     d7a:	d917      	bls.n	dac <mpu_configure_region+0x3c>
	if (size > (1UL << 31)) {
     d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     d80:	d816      	bhi.n	db0 <mpu_configure_region+0x40>
	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
     d82:	3b01      	subs	r3, #1
     d84:	fab3 f383 	clz	r3, r3
     d88:	f1c3 031f 	rsb	r3, r3, #31
     d8c:	005b      	lsls	r3, r3, #1
	if (index > (get_num_regions() - 1)) {
     d8e:	2807      	cmp	r0, #7
     d90:	f041 0201 	orr.w	r2, r1, #1
     d94:	d80e      	bhi.n	db4 <mpu_configure_region+0x44>
	MPU->RNR = index;
     d96:	4d09      	ldr	r5, [pc, #36]	; (dbc <mpu_configure_region+0x4c>)
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     d98:	f024 011f 	bic.w	r1, r4, #31
				| MPU_RBAR_VALID_Msk | index;
     d9c:	f040 0410 	orr.w	r4, r0, #16
     da0:	4321      	orrs	r1, r4
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     da2:	4313      	orrs	r3, r2
	MPU->RNR = index;
     da4:	60a8      	str	r0, [r5, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     da6:	60e9      	str	r1, [r5, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     da8:	612b      	str	r3, [r5, #16]
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
     daa:	bd30      	pop	{r4, r5, pc}
		return REGION_32B;
     dac:	2308      	movs	r3, #8
     dae:	e7ee      	b.n	d8e <mpu_configure_region+0x1e>
		return REGION_4G;
     db0:	233e      	movs	r3, #62	; 0x3e
     db2:	e7ec      	b.n	d8e <mpu_configure_region+0x1e>
		return -EINVAL;
     db4:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
     db8:	e7f7      	b.n	daa <mpu_configure_region+0x3a>
     dba:	bf00      	nop
     dbc:	e000ed90 	.word	0xe000ed90

00000dc0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
     dc0:	4b03      	ldr	r3, [pc, #12]	; (dd0 <arm_core_mpu_enable+0x10>)
     dc2:	2205      	movs	r2, #5
     dc4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
     dc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     dca:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
     dce:	4770      	bx	lr
     dd0:	e000ed90 	.word	0xe000ed90

00000dd4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     dd4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
     dd8:	4b01      	ldr	r3, [pc, #4]	; (de0 <arm_core_mpu_disable+0xc>)
     dda:	2200      	movs	r2, #0
     ddc:	605a      	str	r2, [r3, #4]
}
     dde:	4770      	bx	lr
     de0:	e000ed90 	.word	0xe000ed90

00000de4 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
     de4:	4913      	ldr	r1, [pc, #76]	; (e34 <arm_mpu_init+0x50>)
     de6:	6808      	ldr	r0, [r1, #0]
     de8:	2808      	cmp	r0, #8
{
     dea:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
     dec:	d81e      	bhi.n	e2c <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
     dee:	f7ff fff1 	bl	dd4 <arm_core_mpu_disable>
	MPU->RNR = index;
     df2:	4c11      	ldr	r4, [pc, #68]	; (e38 <arm_mpu_init+0x54>)
     df4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
     df6:	2200      	movs	r2, #0
     df8:	4290      	cmp	r0, r2
     dfa:	f101 010c 	add.w	r1, r1, #12
     dfe:	d105      	bne.n	e0c <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
     e00:	4b0e      	ldr	r3, [pc, #56]	; (e3c <arm_mpu_init+0x58>)
     e02:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
     e04:	f7ff ffdc 	bl	dc0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
     e08:	2000      	movs	r0, #0
}
     e0a:	bd10      	pop	{r4, pc}
     e0c:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     e0e:	f851 3c0c 	ldr.w	r3, [r1, #-12]
     e12:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
     e16:	f043 0310 	orr.w	r3, r3, #16
     e1a:	4313      	orrs	r3, r2
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     e1c:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     e1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
     e22:	f043 0301 	orr.w	r3, r3, #1
     e26:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
     e28:	3201      	adds	r2, #1
     e2a:	e7e5      	b.n	df8 <arm_mpu_init+0x14>
		return -1;
     e2c:	f04f 30ff 	mov.w	r0, #4294967295
     e30:	e7eb      	b.n	e0a <arm_mpu_init+0x26>
     e32:	bf00      	nop
     e34:	000032bc 	.word	0x000032bc
     e38:	e000ed90 	.word	0xe000ed90
     e3c:	200006b4 	.word	0x200006b4

00000e40 <arm_core_mpu_configure_static_mpu_regions>:
{
     e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
     e42:	4c10      	ldr	r4, [pc, #64]	; (e84 <arm_core_mpu_configure_static_mpu_regions+0x44>)
     e44:	4607      	mov	r7, r0
	int reg_index = start_reg_index;
     e46:	7820      	ldrb	r0, [r4, #0]
     e48:	460e      	mov	r6, r1
	for (i = 0; i < regions_num; i++) {
     e4a:	2500      	movs	r5, #0
     e4c:	42b5      	cmp	r5, r6
     e4e:	da08      	bge.n	e62 <arm_core_mpu_configure_static_mpu_regions+0x22>
		if (regions[i]->size == 0U) {
     e50:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
     e54:	684b      	ldr	r3, [r1, #4]
     e56:	b193      	cbz	r3, e7e <arm_core_mpu_configure_static_mpu_regions+0x3e>
		((part->size & (part->size - 1)) == 0U)
     e58:	1e5a      	subs	r2, r3, #1
		&&
     e5a:	4213      	tst	r3, r2
     e5c:	d003      	beq.n	e66 <arm_core_mpu_configure_static_mpu_regions+0x26>
			return -EINVAL;
     e5e:	f06f 0015 	mvn.w	r0, #21
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
     e62:	7020      	strb	r0, [r4, #0]
}
     e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
     e66:	2b1f      	cmp	r3, #31
     e68:	d9f9      	bls.n	e5e <arm_core_mpu_configure_static_mpu_regions+0x1e>
		((part->start & (part->size - 1)) == 0U);
     e6a:	680b      	ldr	r3, [r1, #0]
		&&
     e6c:	421a      	tst	r2, r3
     e6e:	d1f6      	bne.n	e5e <arm_core_mpu_configure_static_mpu_regions+0x1e>
		reg_index = mpu_configure_region(reg_index, regions[i]);
     e70:	b2c0      	uxtb	r0, r0
     e72:	f7ff ff7d 	bl	d70 <mpu_configure_region>
		if (reg_index == -EINVAL) {
     e76:	f110 0f16 	cmn.w	r0, #22
     e7a:	d0f0      	beq.n	e5e <arm_core_mpu_configure_static_mpu_regions+0x1e>
		reg_index++;
     e7c:	3001      	adds	r0, #1
	for (i = 0; i < regions_num; i++) {
     e7e:	3501      	adds	r5, #1
     e80:	e7e4      	b.n	e4c <arm_core_mpu_configure_static_mpu_regions+0xc>
     e82:	bf00      	nop
     e84:	200006b4 	.word	0x200006b4

00000e88 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
     e88:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
     e8a:	4b10      	ldr	r3, [pc, #64]	; (ecc <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
     e8c:	4606      	mov	r6, r0
	int reg_index = start_reg_index;
     e8e:	7818      	ldrb	r0, [r3, #0]
     e90:	460d      	mov	r5, r1
	for (i = 0; i < regions_num; i++) {
     e92:	2400      	movs	r4, #0
     e94:	42ac      	cmp	r4, r5
     e96:	db07      	blt.n	ea8 <arm_core_mpu_configure_dynamic_mpu_regions+0x20>
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
     e98:	f110 0f16 	cmn.w	r0, #22
     e9c:	d003      	beq.n	ea6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
     e9e:	4b0c      	ldr	r3, [pc, #48]	; (ed0 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
  MPU->RASR = 0U;
     ea0:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
     ea2:	2807      	cmp	r0, #7
     ea4:	dd0d      	ble.n	ec2 <arm_core_mpu_configure_dynamic_mpu_regions+0x3a>
}
     ea6:	bd70      	pop	{r4, r5, r6, pc}
		if (regions[i]->size == 0U) {
     ea8:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
     eac:	684b      	ldr	r3, [r1, #4]
     eae:	b133      	cbz	r3, ebe <arm_core_mpu_configure_dynamic_mpu_regions+0x36>
		reg_index = mpu_configure_region(reg_index, regions[i]);
     eb0:	b2c0      	uxtb	r0, r0
     eb2:	f7ff ff5d 	bl	d70 <mpu_configure_region>
		if (reg_index == -EINVAL) {
     eb6:	f110 0f16 	cmn.w	r0, #22
     eba:	d0f4      	beq.n	ea6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		reg_index++;
     ebc:	3001      	adds	r0, #1
	for (i = 0; i < regions_num; i++) {
     ebe:	3401      	adds	r4, #1
     ec0:	e7e8      	b.n	e94 <arm_core_mpu_configure_dynamic_mpu_regions+0xc>
  MPU->RNR = rnr;
     ec2:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
     ec4:	611a      	str	r2, [r3, #16]
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
     ec6:	3001      	adds	r0, #1
     ec8:	e7eb      	b.n	ea2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
     eca:	bf00      	nop
     ecc:	200006b4 	.word	0x200006b4
     ed0:	e000ed90 	.word	0xe000ed90

00000ed4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
     ed4:	4b01      	ldr	r3, [pc, #4]	; (edc <__stdout_hook_install+0x8>)
     ed6:	6018      	str	r0, [r3, #0]
}
     ed8:	4770      	bx	lr
     eda:	bf00      	nop
     edc:	2000141c 	.word	0x2000141c

00000ee0 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
     ee0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
     ee2:	4b09      	ldr	r3, [pc, #36]	; (f08 <gpio_nrfx_init+0x28>)
     ee4:	781a      	ldrb	r2, [r3, #0]
     ee6:	b96a      	cbnz	r2, f04 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
     ee8:	2101      	movs	r1, #1
     eea:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
     eec:	2006      	movs	r0, #6
     eee:	2105      	movs	r1, #5
     ef0:	f7ff fdc0 	bl	a74 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
     ef4:	2006      	movs	r0, #6
     ef6:	f7ff fdad 	bl	a54 <z_arch_irq_enable>
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
     efa:	4b04      	ldr	r3, [pc, #16]	; (f0c <gpio_nrfx_init+0x2c>)
     efc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
     f00:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
     f04:	2000      	movs	r0, #0
     f06:	bd08      	pop	{r3, pc}
     f08:	200006b5 	.word	0x200006b5
     f0c:	40006000 	.word	0x40006000

00000f10 <nrf_gpio_cfg_sense_set>:
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
     f10:	281f      	cmp	r0, #31
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
     f12:	bf8a      	itet	hi
     f14:	4b09      	ldrhi	r3, [pc, #36]	; (f3c <nrf_gpio_cfg_sense_set+0x2c>)
        return NRF_P0;
     f16:	f04f 43a0 	movls.w	r3, #1342177280	; 0x50000000
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
     f1a:	f000 001f 	andhi.w	r0, r0, #31
     f1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
__STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
     f22:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
     f26:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
     f2a:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
     f2e:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
     f32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
     f36:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
     f3a:	4770      	bx	lr
     f3c:	50000300 	.word	0x50000300

00000f40 <gpiote_pin_int_cfg>:
{
     f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return port->config->config_info;
     f42:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
     f44:	6886      	ldr	r6, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
     f46:	689b      	ldr	r3, [r3, #8]
     f48:	f001 041f 	and.w	r4, r1, #31
{
     f4c:	460d      	mov	r5, r1
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
     f4e:	494c      	ldr	r1, [pc, #304]	; (1080 <gpiote_pin_int_cfg+0x140>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
     f50:	791b      	ldrb	r3, [r3, #4]
     f52:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
     f56:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
     f5a:	b2d2      	uxtb	r2, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
     f5c:	2300      	movs	r3, #0
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
     f5e:	f503 70a2 	add.w	r0, r3, #324	; 0x144
     f62:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
     f66:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
     f6a:	4284      	cmp	r4, r0
     f6c:	d16c      	bne.n	1048 <gpiote_pin_int_cfg+0x108>
		    && (intenset & BIT(i))) {
     f6e:	fa22 f003 	lsr.w	r0, r2, r3
     f72:	07c0      	lsls	r0, r0, #31
     f74:	d568      	bpl.n	1048 <gpiote_pin_int_cfg+0x108>
     f76:	009a      	lsls	r2, r3, #2
     f78:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     f7c:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
     f80:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
     f84:	f020 0001 	bic.w	r0, r0, #1
     f88:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
     f8c:	2201      	movs	r2, #1
     f8e:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
     f92:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
     f96:	4620      	mov	r0, r4
     f98:	2100      	movs	r1, #0
     f9a:	f7ff ffb9 	bl	f10 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
     f9e:	68b0      	ldr	r0, [r6, #8]
     fa0:	40e8      	lsrs	r0, r5
     fa2:	f010 0001 	ands.w	r0, r0, #1
     fa6:	d04d      	beq.n	1044 <gpiote_pin_int_cfg+0x104>
     fa8:	68f0      	ldr	r0, [r6, #12]
     faa:	40e8      	lsrs	r0, r5
     fac:	f010 0001 	ands.w	r0, r0, #1
     fb0:	d048      	beq.n	1044 <gpiote_pin_int_cfg+0x104>
		if (data->trig_edge & BIT(pin)) {
     fb2:	6970      	ldr	r0, [r6, #20]
     fb4:	40e8      	lsrs	r0, r5
     fb6:	f010 0201 	ands.w	r2, r0, #1
     fba:	d051      	beq.n	1060 <gpiote_pin_int_cfg+0x120>
			if (data->double_edge & BIT(pin)) {
     fbc:	69b3      	ldr	r3, [r6, #24]
     fbe:	40eb      	lsrs	r3, r5
     fc0:	07db      	lsls	r3, r3, #31
     fc2:	d445      	bmi.n	1050 <gpiote_pin_int_cfg+0x110>
			} else if (((data->active_level & BIT(pin)) != 0U)
     fc4:	6933      	ldr	r3, [r6, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
     fc6:	69f2      	ldr	r2, [r6, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
     fc8:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
     fca:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
     fce:	f003 0301 	and.w	r3, r3, #1
     fd2:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
     fd6:	42ab      	cmp	r3, r5
     fd8:	bf0c      	ite	eq
     fda:	2502      	moveq	r5, #2
     fdc:	2501      	movne	r5, #1
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
     fde:	4f28      	ldr	r7, [pc, #160]	; (1080 <gpiote_pin_int_cfg+0x140>)
				pol = NRF_GPIOTE_POLARITY_HITOLO;
     fe0:	2100      	movs	r1, #0
     fe2:	f501 73a2 	add.w	r3, r1, #324	; 0x144
     fe6:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
     fea:	f010 0003 	ands.w	r0, r0, #3
     fee:	d131      	bne.n	1054 <gpiote_pin_int_cfg+0x114>
			nrf_gpiote_events_t evt =
     ff0:	008a      	lsls	r2, r1, #2
     ff2:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
     ff6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
     ffa:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
     ffc:	f8d3 6510 	ldr.w	r6, [r3, #1296]	; 0x510
    1000:	f426 364f 	bic.w	r6, r6, #211968	; 0x33c00
    1004:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    1008:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    100c:	f8d3 6510 	ldr.w	r6, [r3, #1296]	; 0x510
    1010:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
    return ((uint32_t)NRF_GPIOTE + event);
    1014:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1018:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    101c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    1020:	4335      	orrs	r5, r6
    1022:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    1026:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    1028:	6812      	ldr	r2, [r2, #0]
    102a:	9201      	str	r2, [sp, #4]
    (void)dummy;
    102c:	9a01      	ldr	r2, [sp, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    102e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    1032:	f042 0201 	orr.w	r2, r2, #1
    1036:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
    103a:	2301      	movs	r3, #1
    103c:	fa03 f101 	lsl.w	r1, r3, r1
    NRF_GPIOTE->INTENSET = mask;
    1040:	f8c7 1304 	str.w	r1, [r7, #772]	; 0x304
}
    1044:	b003      	add	sp, #12
    1046:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1048:	3301      	adds	r3, #1
    104a:	2b08      	cmp	r3, #8
    104c:	d187      	bne.n	f5e <gpiote_pin_int_cfg+0x1e>
    104e:	e7a2      	b.n	f96 <gpiote_pin_int_cfg+0x56>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    1050:	2503      	movs	r5, #3
    1052:	e7c4      	b.n	fde <gpiote_pin_int_cfg+0x9e>
    1054:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    1056:	2908      	cmp	r1, #8
    1058:	d1c3      	bne.n	fe2 <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
    105a:	f06f 0012 	mvn.w	r0, #18
    105e:	e7f1      	b.n	1044 <gpiote_pin_int_cfg+0x104>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    1060:	69f1      	ldr	r1, [r6, #28]
    1062:	6933      	ldr	r3, [r6, #16]
    1064:	404b      	eors	r3, r1
    1066:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    106a:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    106e:	4620      	mov	r0, r4
    1070:	bf0c      	ite	eq
    1072:	2103      	moveq	r1, #3
    1074:	2102      	movne	r1, #2
    1076:	f7ff ff4b 	bl	f10 <nrf_gpio_cfg_sense_set>
	int res = 0;
    107a:	4610      	mov	r0, r2
    107c:	e7e2      	b.n	1044 <gpiote_pin_int_cfg+0x104>
    107e:	bf00      	nop
    1080:	40006000 	.word	0x40006000

00001084 <gpio_nrfx_config>:
{
    1084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1088:	4607      	mov	r7, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    108a:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    108c:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    1090:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    1094:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    1096:	d047      	beq.n	1128 <gpio_nrfx_config+0xa4>
    1098:	dc2a      	bgt.n	10f0 <gpio_nrfx_config+0x6c>
    109a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    109e:	d03b      	beq.n	1118 <gpio_nrfx_config+0x94>
    10a0:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    10a4:	d03c      	beq.n	1120 <gpio_nrfx_config+0x9c>
    10a6:	bb50      	cbnz	r0, 10fe <gpio_nrfx_config+0x7a>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    10a8:	f406 7840 	and.w	r8, r6, #768	; 0x300
    10ac:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    10b0:	d03c      	beq.n	112c <gpio_nrfx_config+0xa8>
		pull = NRF_GPIO_PIN_PULLUP;
    10b2:	f5a8 7400 	sub.w	r4, r8, #512	; 0x200
    10b6:	4263      	negs	r3, r4
    10b8:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    10ba:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    10be:	ea4f 084c 	mov.w	r8, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
    10c2:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    10c4:	ea48 080c 	orr.w	r8, r8, ip
		from_pin = pin;
    10c8:	bf18      	it	ne
    10ca:	b2d4      	uxtbne	r4, r2
    10cc:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
        return NRF_P1;
    10d0:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 11a8 <gpio_nrfx_config+0x124>
		to_pin   = pin;
    10d4:	bf12      	itee	ne
    10d6:	46a1      	movne	r9, r4
		to_pin   = 31U;
    10d8:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    10dc:	2400      	moveq	r4, #0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    10de:	ea40 0883 	orr.w	r8, r0, r3, lsl #2
    10e2:	f04f 0b01 	mov.w	fp, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    10e6:	45a1      	cmp	r9, r4
    10e8:	d222      	bcs.n	1130 <gpio_nrfx_config+0xac>
	return 0;
    10ea:	2000      	movs	r0, #0
}
    10ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    10f0:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    10f4:	d016      	beq.n	1124 <gpio_nrfx_config+0xa0>
    10f6:	dc05      	bgt.n	1104 <gpio_nrfx_config+0x80>
    10f8:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    10fc:	d00e      	beq.n	111c <gpio_nrfx_config+0x98>
		return -EINVAL;
    10fe:	f06f 0015 	mvn.w	r0, #21
    1102:	e7f3      	b.n	10ec <gpio_nrfx_config+0x68>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    1104:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    1108:	d004      	beq.n	1114 <gpio_nrfx_config+0x90>
    110a:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    110e:	d1f6      	bne.n	10fe <gpio_nrfx_config+0x7a>
		drive = NRF_GPIO_PIN_H0D1;
    1110:	2007      	movs	r0, #7
		break;
    1112:	e7c9      	b.n	10a8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
    1114:	2006      	movs	r0, #6
		break;
    1116:	e7c7      	b.n	10a8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
    1118:	2001      	movs	r0, #1
		break;
    111a:	e7c5      	b.n	10a8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    111c:	2003      	movs	r0, #3
		break;
    111e:	e7c3      	b.n	10a8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
    1120:	2004      	movs	r0, #4
		break;
    1122:	e7c1      	b.n	10a8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
    1124:	2005      	movs	r0, #5
		break;
    1126:	e7bf      	b.n	10a8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
    1128:	2002      	movs	r0, #2
    112a:	e7bd      	b.n	10a8 <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
    112c:	2303      	movs	r3, #3
    112e:	e7c4      	b.n	10ba <gpio_nrfx_config+0x36>
	return port->config->config_info;
    1130:	683b      	ldr	r3, [r7, #0]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    1132:	689b      	ldr	r3, [r3, #8]
    1134:	791a      	ldrb	r2, [r3, #4]
    1136:	f004 031f 	and.w	r3, r4, #31
    113a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    if (*p_pin < P0_PIN_NUM)
    113e:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    1140:	bfc6      	itte	gt
    1142:	f003 031f 	andgt.w	r3, r3, #31
        return NRF_P1;
    1146:	4652      	movgt	r2, sl
        return NRF_P0;
    1148:	f04f 42a0 	movle.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    114c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    1150:	07b1      	lsls	r1, r6, #30
    1152:	f842 8023 	str.w	r8, [r2, r3, lsl #2]
    1156:	68ab      	ldr	r3, [r5, #8]
    1158:	fa0b f204 	lsl.w	r2, fp, r4
    115c:	bf4c      	ite	mi
    115e:	4313      	orrmi	r3, r2
    1160:	4393      	bicpl	r3, r2
    1162:	60ab      	str	r3, [r5, #8]
    1164:	696b      	ldr	r3, [r5, #20]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    1166:	06b0      	lsls	r0, r6, #26
    1168:	bf4c      	ite	mi
    116a:	4313      	orrmi	r3, r2
    116c:	4393      	bicpl	r3, r2
    116e:	616b      	str	r3, [r5, #20]
    1170:	69ab      	ldr	r3, [r5, #24]
		WRITE_BIT(data->double_edge, curr_pin,
    1172:	0671      	lsls	r1, r6, #25
    1174:	bf4c      	ite	mi
    1176:	4313      	orrmi	r3, r2
    1178:	4393      	bicpl	r3, r2
    117a:	61ab      	str	r3, [r5, #24]
    117c:	692b      	ldr	r3, [r5, #16]
		WRITE_BIT(data->active_level, curr_pin,
    117e:	0770      	lsls	r0, r6, #29
    1180:	bf4c      	ite	mi
    1182:	4313      	orrmi	r3, r2
    1184:	4393      	bicpl	r3, r2
    1186:	612b      	str	r3, [r5, #16]
    1188:	69eb      	ldr	r3, [r5, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    118a:	0631      	lsls	r1, r6, #24
    118c:	bf4c      	ite	mi
    118e:	431a      	orrmi	r2, r3
    1190:	ea23 0202 	bicpl.w	r2, r3, r2
    1194:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    1196:	4621      	mov	r1, r4
    1198:	4638      	mov	r0, r7
    119a:	f7ff fed1 	bl	f40 <gpiote_pin_int_cfg>
		if (res != 0) {
    119e:	2800      	cmp	r0, #0
    11a0:	d1a4      	bne.n	10ec <gpio_nrfx_config+0x68>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    11a2:	3401      	adds	r4, #1
    11a4:	b2e4      	uxtb	r4, r4
    11a6:	e79e      	b.n	10e6 <gpio_nrfx_config+0x62>
    11a8:	50000300 	.word	0x50000300

000011ac <gpiote_event_handler>:
{
    11ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t fired_triggers[GPIO_COUNT] = {0};
    11ae:	2600      	movs	r6, #0
{
    11b0:	b085      	sub	sp, #20
	u32_t fired_triggers[GPIO_COUNT] = {0};
    11b2:	e9cd 6602 	strd	r6, r6, [sp, #8]
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    11b6:	4d29      	ldr	r5, [pc, #164]	; (125c <gpiote_event_handler+0xb0>)
    11b8:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
    11ba:	2c01      	cmp	r4, #1
    11bc:	d10b      	bne.n	11d6 <gpiote_event_handler+0x2a>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    11be:	4828      	ldr	r0, [pc, #160]	; (1260 <gpiote_event_handler+0xb4>)
    11c0:	f001 fd78 	bl	2cb4 <check_level_trigger_pins>
		fired_triggers[0] =
    11c4:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
    11c6:	4827      	ldr	r0, [pc, #156]	; (1264 <gpiote_event_handler+0xb8>)
    11c8:	f001 fd74 	bl	2cb4 <check_level_trigger_pins>
		fired_triggers[1] =
    11cc:	9003      	str	r0, [sp, #12]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    11ce:	602e      	str	r6, [r5, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    11d0:	682b      	ldr	r3, [r5, #0]
    11d2:	9300      	str	r3, [sp, #0]
    (void)dummy;
    11d4:	9b00      	ldr	r3, [sp, #0]
    return (NRF_GPIOTE->INTENSET & mask);
    11d6:	4e24      	ldr	r6, [pc, #144]	; (1268 <gpiote_event_handler+0xbc>)
{
    11d8:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    11da:	2701      	movs	r7, #1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    11dc:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
    11de:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
    11e2:	fa07 f103 	lsl.w	r1, r7, r3
    11e6:	4211      	tst	r1, r2
    11e8:	d01e      	beq.n	1228 <gpiote_event_handler+0x7c>
    11ea:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
    11ee:	f502 52c2 	add.w	r2, r2, #6208	; 0x1840
    11f2:	0092      	lsls	r2, r2, #2
    11f4:	6811      	ldr	r1, [r2, #0]
    11f6:	2901      	cmp	r1, #1
    11f8:	d116      	bne.n	1228 <gpiote_event_handler+0x7c>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    11fa:	f503 70a2 	add.w	r0, r3, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    11fe:	f10d 0e10 	add.w	lr, sp, #16
    1202:	f856 5020 	ldr.w	r5, [r6, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    1206:	f8c2 c000 	str.w	ip, [r2]
    120a:	f3c5 3040 	ubfx	r0, r5, #13, #1
    120e:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
    1212:	f3c5 2504 	ubfx	r5, r5, #8, #5
    1216:	40a9      	lsls	r1, r5
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    1218:	6812      	ldr	r2, [r2, #0]
    121a:	f850 5c08 	ldr.w	r5, [r0, #-8]
    121e:	9201      	str	r2, [sp, #4]
    1220:	4329      	orrs	r1, r5
    (void)dummy;
    1222:	9a01      	ldr	r2, [sp, #4]
    1224:	f840 1c08 	str.w	r1, [r0, #-8]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1228:	3301      	adds	r3, #1
    122a:	2b08      	cmp	r3, #8
    122c:	d1d7      	bne.n	11de <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
    122e:	9902      	ldr	r1, [sp, #8]
    1230:	b111      	cbz	r1, 1238 <gpiote_event_handler+0x8c>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p0), fired_triggers[0]);
    1232:	480b      	ldr	r0, [pc, #44]	; (1260 <gpiote_event_handler+0xb4>)
    1234:	f001 fd29 	bl	2c8a <fire_callbacks>
	if (fired_triggers[1]) {
    1238:	9903      	ldr	r1, [sp, #12]
    123a:	b111      	cbz	r1, 1242 <gpiote_event_handler+0x96>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
    123c:	4809      	ldr	r0, [pc, #36]	; (1264 <gpiote_event_handler+0xb8>)
    123e:	f001 fd24 	bl	2c8a <fire_callbacks>
	if (port_event) {
    1242:	2c01      	cmp	r4, #1
    1244:	d108      	bne.n	1258 <gpiote_event_handler+0xac>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    1246:	4806      	ldr	r0, [pc, #24]	; (1260 <gpiote_event_handler+0xb4>)
    1248:	f001 fd5d 	bl	2d06 <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    124c:	4805      	ldr	r0, [pc, #20]	; (1264 <gpiote_event_handler+0xb8>)
}
    124e:	b005      	add	sp, #20
    1250:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    1254:	f001 bd57 	b.w	2d06 <cfg_level_pins>
}
    1258:	b005      	add	sp, #20
    125a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    125c:	4000617c 	.word	0x4000617c
    1260:	200014e0 	.word	0x200014e0
    1264:	200014ec 	.word	0x200014ec
    1268:	40006000 	.word	0x40006000

0000126c <uart_nrfx_err_check>:
#endif
}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    126c:	4b03      	ldr	r3, [pc, #12]	; (127c <uart_nrfx_err_check+0x10>)
    126e:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0U;

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
    1270:	b118      	cbz	r0, 127a <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    1272:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
    1276:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(uart0_addr);
	}

	return error;
}
    127a:	4770      	bx	lr
    127c:	40002124 	.word	0x40002124

00001280 <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
    1280:	b570      	push	{r4, r5, r6, lr}
	nrf_uart_hwfc_t hwfc;
#ifdef UART_CONFIG_STOP_Two
	bool two_stop_bits = false;
#endif

	switch (cfg->stop_bits) {
    1282:	794b      	ldrb	r3, [r1, #5]
    1284:	2b01      	cmp	r3, #1
    1286:	d026      	beq.n	12d6 <uart_nrfx_configure+0x56>
    1288:	2b03      	cmp	r3, #3
    128a:	d121      	bne.n	12d0 <uart_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		break;
#ifdef UART_CONFIG_STOP_Two
	case UART_CFG_STOP_BITS_2:
		two_stop_bits = true;
    128c:	2601      	movs	r6, #1
#endif
	default:
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    128e:	798b      	ldrb	r3, [r1, #6]
    1290:	2b03      	cmp	r3, #3
    1292:	d11d      	bne.n	12d0 <uart_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1294:	79cd      	ldrb	r5, [r1, #7]
    1296:	b12d      	cbz	r5, 12a4 <uart_nrfx_configure+0x24>
    1298:	2d01      	cmp	r5, #1
    129a:	d119      	bne.n	12d0 <uart_nrfx_configure+0x50>
	return dev->config->config_info;
    129c:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UART_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    129e:	689b      	ldr	r3, [r3, #8]
    12a0:	781b      	ldrb	r3, [r3, #0]
    12a2:	b1ab      	cbz	r3, 12d0 <uart_nrfx_configure+0x50>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
    12a4:	790a      	ldrb	r2, [r1, #4]
    12a6:	b112      	cbz	r2, 12ae <uart_nrfx_configure+0x2e>
    12a8:	2a02      	cmp	r2, #2
    12aa:	d111      	bne.n	12d0 <uart_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UART_PARITY_INCLUDED;
    12ac:	220e      	movs	r2, #14
	switch (baudrate) {
    12ae:	680b      	ldr	r3, [r1, #0]
    12b0:	f647 2412 	movw	r4, #31250	; 0x7a12
    12b4:	42a3      	cmp	r3, r4
    12b6:	d075      	beq.n	13a4 <uart_nrfx_configure+0x124>
    12b8:	d829      	bhi.n	130e <uart_nrfx_configure+0x8e>
    12ba:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    12be:	d06a      	beq.n	1396 <uart_nrfx_configure+0x116>
    12c0:	d814      	bhi.n	12ec <uart_nrfx_configure+0x6c>
    12c2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    12c6:	d04e      	beq.n	1366 <uart_nrfx_configure+0xe6>
    12c8:	d807      	bhi.n	12da <uart_nrfx_configure+0x5a>
    12ca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    12ce:	d079      	beq.n	13c4 <uart_nrfx_configure+0x144>
		return -ENOTSUP;
    12d0:	f06f 0022 	mvn.w	r0, #34	; 0x22
    12d4:	e05b      	b.n	138e <uart_nrfx_configure+0x10e>
	bool two_stop_bits = false;
    12d6:	2600      	movs	r6, #0
    12d8:	e7d9      	b.n	128e <uart_nrfx_configure+0xe>
	switch (baudrate) {
    12da:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    12de:	d057      	beq.n	1390 <uart_nrfx_configure+0x110>
    12e0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    12e4:	d1f4      	bne.n	12d0 <uart_nrfx_configure+0x50>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    12e6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    12ea:	e03e      	b.n	136a <uart_nrfx_configure+0xea>
	switch (baudrate) {
    12ec:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    12f0:	d053      	beq.n	139a <uart_nrfx_configure+0x11a>
    12f2:	d804      	bhi.n	12fe <uart_nrfx_configure+0x7e>
    12f4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    12f8:	d1ea      	bne.n	12d0 <uart_nrfx_configure+0x50>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    12fa:	4b34      	ldr	r3, [pc, #208]	; (13cc <uart_nrfx_configure+0x14c>)
    12fc:	e035      	b.n	136a <uart_nrfx_configure+0xea>
	switch (baudrate) {
    12fe:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1302:	d04d      	beq.n	13a0 <uart_nrfx_configure+0x120>
    1304:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    1308:	d1e2      	bne.n	12d0 <uart_nrfx_configure+0x50>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    130a:	4b31      	ldr	r3, [pc, #196]	; (13d0 <uart_nrfx_configure+0x150>)
    130c:	e02d      	b.n	136a <uart_nrfx_configure+0xea>
	switch (baudrate) {
    130e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1312:	d04f      	beq.n	13b4 <uart_nrfx_configure+0x134>
    1314:	d811      	bhi.n	133a <uart_nrfx_configure+0xba>
    1316:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    131a:	42a3      	cmp	r3, r4
    131c:	d045      	beq.n	13aa <uart_nrfx_configure+0x12a>
    131e:	d804      	bhi.n	132a <uart_nrfx_configure+0xaa>
    1320:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    1324:	d1d4      	bne.n	12d0 <uart_nrfx_configure+0x50>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    1326:	4b2b      	ldr	r3, [pc, #172]	; (13d4 <uart_nrfx_configure+0x154>)
    1328:	e01f      	b.n	136a <uart_nrfx_configure+0xea>
	switch (baudrate) {
    132a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    132e:	d03f      	beq.n	13b0 <uart_nrfx_configure+0x130>
    1330:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1334:	d1cc      	bne.n	12d0 <uart_nrfx_configure+0x50>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    1336:	4b28      	ldr	r3, [pc, #160]	; (13d8 <uart_nrfx_configure+0x158>)
    1338:	e017      	b.n	136a <uart_nrfx_configure+0xea>
	switch (baudrate) {
    133a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    133e:	d03d      	beq.n	13bc <uart_nrfx_configure+0x13c>
    1340:	d808      	bhi.n	1354 <uart_nrfx_configure+0xd4>
    1342:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1346:	d037      	beq.n	13b8 <uart_nrfx_configure+0x138>
    1348:	4c24      	ldr	r4, [pc, #144]	; (13dc <uart_nrfx_configure+0x15c>)
    134a:	42a3      	cmp	r3, r4
    134c:	d1c0      	bne.n	12d0 <uart_nrfx_configure+0x50>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    134e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1352:	e00a      	b.n	136a <uart_nrfx_configure+0xea>
	switch (baudrate) {
    1354:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1358:	d032      	beq.n	13c0 <uart_nrfx_configure+0x140>
    135a:	4c21      	ldr	r4, [pc, #132]	; (13e0 <uart_nrfx_configure+0x160>)
    135c:	42a3      	cmp	r3, r4
    135e:	d1b7      	bne.n	12d0 <uart_nrfx_configure+0x50>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    1360:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1364:	e001      	b.n	136a <uart_nrfx_configure+0xea>
		nrf_baudrate = 0x00027000;
    1366:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    136a:	4c1e      	ldr	r4, [pc, #120]	; (13e4 <uart_nrfx_configure+0x164>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    136c:	432a      	orrs	r2, r5
    p_reg->BAUDRATE = baudrate;
    136e:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    1372:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
	}

	nrf_uart_configure(uart0_addr, parity, hwfc);

#ifdef UART_CONFIG_STOP_Two
	if (two_stop_bits) {
    1376:	b12e      	cbz	r6, 1384 <uart_nrfx_configure+0x104>
		/* TODO Change this to nrfx HAL function when available */
		uart0_addr->CONFIG |=
    1378:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
    137c:	f043 0310 	orr.w	r3, r3, #16
    1380:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
			UART_CONFIG_STOP_Two << UART_CONFIG_STOP_Pos;
	}
#endif
	get_dev_data(dev)->uart_config = *cfg;
    1384:	6883      	ldr	r3, [r0, #8]
    1386:	c903      	ldmia	r1, {r0, r1}
    1388:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    138c:	2000      	movs	r0, #0
}
    138e:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    1390:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1394:	e7e9      	b.n	136a <uart_nrfx_configure+0xea>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    1396:	4b14      	ldr	r3, [pc, #80]	; (13e8 <uart_nrfx_configure+0x168>)
    1398:	e7e7      	b.n	136a <uart_nrfx_configure+0xea>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    139a:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    139e:	e7e4      	b.n	136a <uart_nrfx_configure+0xea>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    13a0:	4b12      	ldr	r3, [pc, #72]	; (13ec <uart_nrfx_configure+0x16c>)
    13a2:	e7e2      	b.n	136a <uart_nrfx_configure+0xea>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    13a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    13a8:	e7df      	b.n	136a <uart_nrfx_configure+0xea>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    13aa:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    13ae:	e7dc      	b.n	136a <uart_nrfx_configure+0xea>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    13b0:	4b0f      	ldr	r3, [pc, #60]	; (13f0 <uart_nrfx_configure+0x170>)
    13b2:	e7da      	b.n	136a <uart_nrfx_configure+0xea>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    13b4:	4b0f      	ldr	r3, [pc, #60]	; (13f4 <uart_nrfx_configure+0x174>)
    13b6:	e7d8      	b.n	136a <uart_nrfx_configure+0xea>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    13b8:	4b0f      	ldr	r3, [pc, #60]	; (13f8 <uart_nrfx_configure+0x178>)
    13ba:	e7d6      	b.n	136a <uart_nrfx_configure+0xea>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    13bc:	4b0f      	ldr	r3, [pc, #60]	; (13fc <uart_nrfx_configure+0x17c>)
    13be:	e7d4      	b.n	136a <uart_nrfx_configure+0xea>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    13c0:	4b0f      	ldr	r3, [pc, #60]	; (1400 <uart_nrfx_configure+0x180>)
    13c2:	e7d2      	b.n	136a <uart_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
    13c4:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    13c8:	e7cf      	b.n	136a <uart_nrfx_configure+0xea>
    13ca:	bf00      	nop
    13cc:	00275000 	.word	0x00275000
    13d0:	0075f000 	.word	0x0075f000
    13d4:	009d5000 	.word	0x009d5000
    13d8:	013a9000 	.word	0x013a9000
    13dc:	0003d090 	.word	0x0003d090
    13e0:	000f4240 	.word	0x000f4240
    13e4:	40002000 	.word	0x40002000
    13e8:	0013b000 	.word	0x0013b000
    13ec:	004ea000 	.word	0x004ea000
    13f0:	00ebf000 	.word	0x00ebf000
    13f4:	01d7e000 	.word	0x01d7e000
    13f8:	03afb000 	.word	0x03afb000
    13fc:	075f7000 	.word	0x075f7000
    1400:	0ebed000 	.word	0x0ebed000

00001404 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1404:	4b08      	ldr	r3, [pc, #32]	; (1428 <uart_nrfx_poll_in+0x24>)
    1406:	681a      	ldr	r2, [r3, #0]
{
    1408:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    140a:	b152      	cbz	r2, 1422 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    140c:	2000      	movs	r0, #0
    140e:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1410:	681b      	ldr	r3, [r3, #0]
    1412:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1414:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    1416:	4b05      	ldr	r3, [pc, #20]	; (142c <uart_nrfx_poll_in+0x28>)
    1418:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    141c:	700b      	strb	r3, [r1, #0]
}
    141e:	b002      	add	sp, #8
    1420:	4770      	bx	lr
		return -1;
    1422:	f04f 30ff 	mov.w	r0, #4294967295
    1426:	e7fa      	b.n	141e <uart_nrfx_poll_in+0x1a>
    1428:	40002108 	.word	0x40002108
    142c:	40002000 	.word	0x40002000

00001430 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1430:	4b09      	ldr	r3, [pc, #36]	; (1458 <uart_nrfx_poll_out+0x28>)
    1432:	2200      	movs	r2, #0
    1434:	601a      	str	r2, [r3, #0]
{
    1436:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1438:	681a      	ldr	r2, [r3, #0]
    143a:	9201      	str	r2, [sp, #4]
    (void)dummy;
    143c:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    143e:	4a07      	ldr	r2, [pc, #28]	; (145c <uart_nrfx_poll_out+0x2c>)
    1440:	2001      	movs	r0, #1
    1442:	6010      	str	r0, [r2, #0]
    p_reg->TXD = txd;
    1444:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1448:	681a      	ldr	r2, [r3, #0]
	while (!event_txdrdy_check()) {
    144a:	2a00      	cmp	r2, #0
    144c:	d0fc      	beq.n	1448 <uart_nrfx_poll_out+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    144e:	4b04      	ldr	r3, [pc, #16]	; (1460 <uart_nrfx_poll_out+0x30>)
    1450:	2201      	movs	r2, #1
    1452:	601a      	str	r2, [r3, #0]
}
    1454:	b002      	add	sp, #8
    1456:	4770      	bx	lr
    1458:	4000211c 	.word	0x4000211c
    145c:	40002008 	.word	0x40002008
    1460:	4000200c 	.word	0x4000200c

00001464 <uart_nrfx_init>:
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    1464:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    1468:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSEL.RXD = pselrxd;
    146a:	4c16      	ldr	r4, [pc, #88]	; (14c4 <uart_nrfx_init+0x60>)
    146c:	2240      	movs	r2, #64	; 0x40
    146e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1472:	2103      	movs	r1, #3
    1474:	2200      	movs	r2, #0
    1476:	2508      	movs	r5, #8
    1478:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    147c:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    1480:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
    1484:	2506      	movs	r5, #6
    1486:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    148a:	2520      	movs	r5, #32
    148c:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1490:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    1494:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSEL.RTS = pselrts;
    1498:	2305      	movs	r3, #5
    149a:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    149e:	2307      	movs	r3, #7
    14a0:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    14a4:	6881      	ldr	r1, [r0, #8]
    14a6:	f7ff feeb 	bl	1280 <uart_nrfx_configure>
	if (err) {
    14aa:	b948      	cbnz	r0, 14c0 <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    14ac:	2304      	movs	r3, #4
    14ae:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    14b2:	4b05      	ldr	r3, [pc, #20]	; (14c8 <uart_nrfx_init+0x64>)
    14b4:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    14b6:	681b      	ldr	r3, [r3, #0]
    14b8:	9301      	str	r3, [sp, #4]
    (void)dummy;
    14ba:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    14bc:	2301      	movs	r3, #1
    14be:	6023      	str	r3, [r4, #0]
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    14c0:	b003      	add	sp, #12
    14c2:	bd30      	pop	{r4, r5, pc}
    14c4:	40002000 	.word	0x40002000
    14c8:	40002108 	.word	0x40002108

000014cc <errata_103>:
}


static bool errata_98(void)
{
    if (*(uint32_t *)0x10000130ul == 0x8ul){
    14cc:	4b05      	ldr	r3, [pc, #20]	; (14e4 <errata_103+0x18>)
    14ce:	681b      	ldr	r3, [r3, #0]
    14d0:	2b08      	cmp	r3, #8
        if (*(uint32_t *)0x10000134ul == 0x0ul){
    14d2:	bf01      	itttt	eq
    14d4:	4b04      	ldreq	r3, [pc, #16]	; (14e8 <errata_103+0x1c>)
    14d6:	6818      	ldreq	r0, [r3, #0]
    14d8:	fab0 f080 	clzeq	r0, r0
    14dc:	0940      	lsreq	r0, r0, #5
            return true;
        }
    }
    
    return false;
    14de:	bf18      	it	ne
    14e0:	2000      	movne	r0, #0
}
    14e2:	4770      	bx	lr
    14e4:	10000130 	.word	0x10000130
    14e8:	10000134 	.word	0x10000134

000014ec <SystemInit>:
{
    14ec:	b508      	push	{r3, lr}
        NRF_CLOCK->EVENTS_DONE = 0;
    14ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    14f2:	2200      	movs	r2, #0
    14f4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    14f8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    14fc:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    1500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1504:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
    1508:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    150c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    1510:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    1514:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    1518:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    151c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    1520:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    1524:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    1528:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    152c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    1530:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    1534:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    1538:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    153c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    1540:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    1544:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    1548:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    154c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    1550:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    1554:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    1558:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    155c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    1560:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    1564:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    1568:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    156c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    1570:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    1574:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    1578:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    157c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    1580:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    1584:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    1588:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    158c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_98()){
    1590:	f7ff ff9c 	bl	14cc <errata_103>
    1594:	b110      	cbz	r0, 159c <SystemInit+0xb0>
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    1596:	4b33      	ldr	r3, [pc, #204]	; (1664 <SystemInit+0x178>)
    1598:	4a33      	ldr	r2, [pc, #204]	; (1668 <SystemInit+0x17c>)
    159a:	601a      	str	r2, [r3, #0]
    if (errata_103()){
    159c:	f7ff ff96 	bl	14cc <errata_103>
    15a0:	b118      	cbz	r0, 15aa <SystemInit+0xbe>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
    15a2:	4b32      	ldr	r3, [pc, #200]	; (166c <SystemInit+0x180>)
    15a4:	22fb      	movs	r2, #251	; 0xfb
    15a6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    if (errata_115()){
    15aa:	f7ff ff8f 	bl	14cc <errata_103>
    15ae:	b148      	cbz	r0, 15c4 <SystemInit+0xd8>
        *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    15b0:	492f      	ldr	r1, [pc, #188]	; (1670 <SystemInit+0x184>)
    15b2:	4b30      	ldr	r3, [pc, #192]	; (1674 <SystemInit+0x188>)
    15b4:	680a      	ldr	r2, [r1, #0]
    15b6:	681b      	ldr	r3, [r3, #0]
    15b8:	f022 020f 	bic.w	r2, r2, #15
    15bc:	f003 030f 	and.w	r3, r3, #15
    15c0:	4313      	orrs	r3, r2
    15c2:	600b      	str	r3, [r1, #0]
    if (errata_120()){
    15c4:	f7ff ff82 	bl	14cc <errata_103>
    15c8:	b118      	cbz	r0, 15d2 <SystemInit+0xe6>
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
    15ca:	4b2b      	ldr	r3, [pc, #172]	; (1678 <SystemInit+0x18c>)
    15cc:	f44f 7200 	mov.w	r2, #512	; 0x200
    15d0:	601a      	str	r2, [r3, #0]
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    15d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    15d6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    15da:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    15dc:	bf44      	itt	mi
    15de:	f06f 0201 	mvnmi.w	r2, #1
    15e2:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    15e6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    15ea:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    15ee:	2a00      	cmp	r2, #0
    15f0:	db03      	blt.n	15fa <SystemInit+0x10e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    15f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    15f6:	2b00      	cmp	r3, #0
    15f8:	da2f      	bge.n	165a <SystemInit+0x16e>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    15fa:	4b20      	ldr	r3, [pc, #128]	; (167c <SystemInit+0x190>)
    15fc:	2201      	movs	r2, #1
    15fe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1602:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1606:	2a00      	cmp	r2, #0
    1608:	d0fb      	beq.n	1602 <SystemInit+0x116>
            NRF_UICR->PSELRESET[0] = 18;
    160a:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    160e:	2112      	movs	r1, #18
    1610:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1614:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1618:	2a00      	cmp	r2, #0
    161a:	d0fb      	beq.n	1614 <SystemInit+0x128>
            NRF_UICR->PSELRESET[1] = 18;
    161c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1620:	2212      	movs	r2, #18
    1622:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1626:	4b15      	ldr	r3, [pc, #84]	; (167c <SystemInit+0x190>)
    1628:	461a      	mov	r2, r3
    162a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    162e:	2900      	cmp	r1, #0
    1630:	d0fb      	beq.n	162a <SystemInit+0x13e>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    1632:	2100      	movs	r1, #0
    1634:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1638:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    163c:	2b00      	cmp	r3, #0
    163e:	d0fb      	beq.n	1638 <SystemInit+0x14c>
  __ASM volatile ("dsb 0xF":::"memory");
    1640:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1644:	490e      	ldr	r1, [pc, #56]	; (1680 <SystemInit+0x194>)
    1646:	4b0f      	ldr	r3, [pc, #60]	; (1684 <SystemInit+0x198>)
    1648:	68ca      	ldr	r2, [r1, #12]
    164a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    164e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1650:	60cb      	str	r3, [r1, #12]
    1652:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1656:	bf00      	nop
    1658:	e7fd      	b.n	1656 <SystemInit+0x16a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    165a:	4b0b      	ldr	r3, [pc, #44]	; (1688 <SystemInit+0x19c>)
    165c:	4a0b      	ldr	r2, [pc, #44]	; (168c <SystemInit+0x1a0>)
    165e:	601a      	str	r2, [r3, #0]
}
    1660:	bd08      	pop	{r3, pc}
    1662:	bf00      	nop
    1664:	4000568c 	.word	0x4000568c
    1668:	00038148 	.word	0x00038148
    166c:	4000f000 	.word	0x4000f000
    1670:	40000ee4 	.word	0x40000ee4
    1674:	10000258 	.word	0x10000258
    1678:	40029640 	.word	0x40029640
    167c:	4001e000 	.word	0x4001e000
    1680:	e000ed00 	.word	0xe000ed00
    1684:	05fa0004 	.word	0x05fa0004
    1688:	20001428 	.word	0x20001428
    168c:	03d09000 	.word	0x03d09000

00001690 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    1690:	4b09      	ldr	r3, [pc, #36]	; (16b8 <z_sys_device_do_config_level+0x28>)
{
    1692:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
    1694:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    1698:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    169a:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    169c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    16a0:	42a5      	cmp	r5, r4
    16a2:	d800      	bhi.n	16a6 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    16a4:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    16a6:	6823      	ldr	r3, [r4, #0]
    16a8:	4620      	mov	r0, r4
    16aa:	685b      	ldr	r3, [r3, #4]
    16ac:	4798      	blx	r3
		if (retval != 0) {
    16ae:	b100      	cbz	r0, 16b2 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    16b0:	6066      	str	r6, [r4, #4]
								info++) {
    16b2:	340c      	adds	r4, #12
    16b4:	e7f4      	b.n	16a0 <z_sys_device_do_config_level+0x10>
    16b6:	bf00      	nop
    16b8:	00003374 	.word	0x00003374

000016bc <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    16bc:	4b10      	ldr	r3, [pc, #64]	; (1700 <z_impl_device_get_binding+0x44>)
{
    16be:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    16c0:	4c10      	ldr	r4, [pc, #64]	; (1704 <z_impl_device_get_binding+0x48>)
{
    16c2:	4605      	mov	r5, r0
    16c4:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    16c6:	429c      	cmp	r4, r3
    16c8:	d104      	bne.n	16d4 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    16ca:	4c0e      	ldr	r4, [pc, #56]	; (1704 <z_impl_device_get_binding+0x48>)
    16cc:	42b4      	cmp	r4, r6
    16ce:	d109      	bne.n	16e4 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    16d0:	2400      	movs	r4, #0
    16d2:	e012      	b.n	16fa <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    16d4:	6862      	ldr	r2, [r4, #4]
    16d6:	b11a      	cbz	r2, 16e0 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    16d8:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    16da:	6812      	ldr	r2, [r2, #0]
    16dc:	42aa      	cmp	r2, r5
    16de:	d00c      	beq.n	16fa <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    16e0:	340c      	adds	r4, #12
    16e2:	e7f0      	b.n	16c6 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    16e4:	6863      	ldr	r3, [r4, #4]
    16e6:	b90b      	cbnz	r3, 16ec <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    16e8:	340c      	adds	r4, #12
    16ea:	e7ef      	b.n	16cc <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    16ec:	6823      	ldr	r3, [r4, #0]
    16ee:	4628      	mov	r0, r5
    16f0:	6819      	ldr	r1, [r3, #0]
    16f2:	f001 fa0b 	bl	2b0c <strcmp>
    16f6:	2800      	cmp	r0, #0
    16f8:	d1f6      	bne.n	16e8 <z_impl_device_get_binding+0x2c>
}
    16fa:	4620      	mov	r0, r4
    16fc:	bd70      	pop	{r4, r5, r6, pc}
    16fe:	bf00      	nop
    1700:	20001504 	.word	0x20001504
    1704:	20001474 	.word	0x20001474

00001708 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    1708:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    170a:	4d0b      	ldr	r5, [pc, #44]	; (1738 <idle+0x30>)
    170c:	f04f 0220 	mov.w	r2, #32
    1710:	f3ef 8311 	mrs	r3, BASEPRI
    1714:	f382 8811 	msr	BASEPRI, r2
    1718:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    171c:	f001 fc97 	bl	304e <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1720:	2101      	movs	r1, #1
    1722:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    1724:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1726:	bfd8      	it	le
    1728:	4608      	movle	r0, r1
    172a:	f001 fca0 	bl	306e <z_set_timeout_expiry>
	_kernel.idle = ticks;
    172e:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	z_arch_cpu_idle();
    1730:	f7ff f938 	bl	9a4 <z_arch_cpu_idle>
    1734:	e7ea      	b.n	170c <idle+0x4>
    1736:	bf00      	nop
    1738:	2000065c 	.word	0x2000065c

0000173c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    173c:	4802      	ldr	r0, [pc, #8]	; (1748 <z_bss_zero+0xc>)
    173e:	4a03      	ldr	r2, [pc, #12]	; (174c <z_bss_zero+0x10>)
    1740:	2100      	movs	r1, #0
    1742:	1a12      	subs	r2, r2, r0
    1744:	f001 ba1c 	b.w	2b80 <memset>
    1748:	20000000 	.word	0x20000000
    174c:	200006b8 	.word	0x200006b8

00001750 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    1750:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    1752:	4806      	ldr	r0, [pc, #24]	; (176c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    1754:	4a06      	ldr	r2, [pc, #24]	; (1770 <z_data_copy+0x20>)
    1756:	4907      	ldr	r1, [pc, #28]	; (1774 <z_data_copy+0x24>)
    1758:	1a12      	subs	r2, r2, r0
    175a:	f001 f9e4 	bl	2b26 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    175e:	4a06      	ldr	r2, [pc, #24]	; (1778 <z_data_copy+0x28>)
    1760:	4906      	ldr	r1, [pc, #24]	; (177c <z_data_copy+0x2c>)
    1762:	4807      	ldr	r0, [pc, #28]	; (1780 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    1764:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    1768:	f001 b9dd 	b.w	2b26 <memcpy>
    176c:	200013f8 	.word	0x200013f8
    1770:	20001568 	.word	0x20001568
    1774:	00003510 	.word	0x00003510
    1778:	00000000 	.word	0x00000000
    177c:	00003510 	.word	0x00003510
    1780:	20000000 	.word	0x20000000

00001784 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    1784:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    1786:	2002      	movs	r0, #2
    1788:	f7ff ff82 	bl	1690 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    178c:	4807      	ldr	r0, [pc, #28]	; (17ac <bg_thread_main+0x28>)
    178e:	f001 f8ce 	bl	292e <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    1792:	2003      	movs	r0, #3
    1794:	f7ff ff7c 	bl	1690 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    1798:	f000 fc34 	bl	2004 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    179c:	f7fe fe68 	bl	470 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    17a0:	4a03      	ldr	r2, [pc, #12]	; (17b0 <bg_thread_main+0x2c>)
    17a2:	7b13      	ldrb	r3, [r2, #12]
    17a4:	f023 0301 	bic.w	r3, r3, #1
    17a8:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    17aa:	bd08      	pop	{r3, pc}
    17ac:	000034d0 	.word	0x000034d0
    17b0:	200005f0 	.word	0x200005f0

000017b4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    17b4:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    17b6:	4b36      	ldr	r3, [pc, #216]	; (1890 <z_cstart+0xdc>)
    17b8:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    17ba:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    17be:	4c35      	ldr	r4, [pc, #212]	; (1894 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
    17c0:	4e35      	ldr	r6, [pc, #212]	; (1898 <z_cstart+0xe4>)
    17c2:	6963      	ldr	r3, [r4, #20]
    17c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    17c8:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17ca:	2500      	movs	r5, #0
    17cc:	23e0      	movs	r3, #224	; 0xe0
    17ce:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    17d2:	77e5      	strb	r5, [r4, #31]
    17d4:	7625      	strb	r5, [r4, #24]
    17d6:	7665      	strb	r5, [r4, #25]
    17d8:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    17da:	6a63      	ldr	r3, [r4, #36]	; 0x24
    17dc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    17e0:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void z_arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    17e2:	f7ff fa6d 	bl	cc0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    17e6:	f7ff f8d7 	bl	998 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    17ea:	f04f 33ff 	mov.w	r3, #4294967295
    17ee:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    17f0:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	z_arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    17f2:	ab07      	add	r3, sp, #28
    17f4:	226c      	movs	r2, #108	; 0x6c
    17f6:	4629      	mov	r1, r5
    17f8:	4618      	mov	r0, r3
    17fa:	f001 f9c1 	bl	2b80 <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    17fe:	4c27      	ldr	r4, [pc, #156]	; (189c <z_cstart+0xe8>)
	struct k_thread dummy_thread = {
    1800:	2701      	movs	r7, #1
	_current = &dummy_thread;
    1802:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    1804:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
    1806:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    180a:	f7ff ff41 	bl	1690 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    180e:	4638      	mov	r0, r7
    1810:	f7ff ff3e 	bl	1690 <z_sys_device_do_config_level>
	z_sched_init();
    1814:	f000 fba6 	bl	1f64 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1818:	4b21      	ldr	r3, [pc, #132]	; (18a0 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    181a:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    181c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1820:	e9cd 7304 	strd	r7, r3, [sp, #16]
    1824:	e9cd 5502 	strd	r5, r5, [sp, #8]
    1828:	4b1e      	ldr	r3, [pc, #120]	; (18a4 <z_cstart+0xf0>)
    182a:	491f      	ldr	r1, [pc, #124]	; (18a8 <z_cstart+0xf4>)
    182c:	e9cd 5500 	strd	r5, r5, [sp]
    1830:	4630      	mov	r0, r6
    1832:	f000 fbcd 	bl	1fd0 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1836:	7b73      	ldrb	r3, [r6, #13]
    1838:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    183c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1840:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1842:	d104      	bne.n	184e <z_cstart+0x9a>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    1844:	69b3      	ldr	r3, [r6, #24]
    1846:	b913      	cbnz	r3, 184e <z_cstart+0x9a>
		z_add_thread_to_ready_q(thread);
    1848:	4630      	mov	r0, r6
    184a:	f000 fa1b 	bl	1c84 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    184e:	4b17      	ldr	r3, [pc, #92]	; (18ac <z_cstart+0xf8>)
    1850:	4d17      	ldr	r5, [pc, #92]	; (18b0 <z_cstart+0xfc>)
    1852:	9305      	str	r3, [sp, #20]
    1854:	2201      	movs	r2, #1
    1856:	230f      	movs	r3, #15
    1858:	e9cd 3203 	strd	r3, r2, [sp, #12]
    185c:	2300      	movs	r3, #0
    185e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    1862:	9300      	str	r3, [sp, #0]
    1864:	f44f 72a0 	mov.w	r2, #320	; 0x140
    1868:	4b12      	ldr	r3, [pc, #72]	; (18b4 <z_cstart+0x100>)
    186a:	4913      	ldr	r1, [pc, #76]	; (18b8 <z_cstart+0x104>)
    186c:	4628      	mov	r0, r5
    186e:	f000 fbaf 	bl	1fd0 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1872:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
    1874:	60e5      	str	r5, [r4, #12]
    1876:	f023 0304 	bic.w	r3, r3, #4
    187a:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    187c:	4b0f      	ldr	r3, [pc, #60]	; (18bc <z_cstart+0x108>)
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    187e:	490a      	ldr	r1, [pc, #40]	; (18a8 <z_cstart+0xf4>)
    1880:	4805      	ldr	r0, [pc, #20]	; (1898 <z_cstart+0xe4>)
	list->tail = (sys_dnode_t *)list;
    1882:	e9c4 3306 	strd	r3, r3, [r4, #24]
    1886:	f44f 6280 	mov.w	r2, #1024	; 0x400
    188a:	4b06      	ldr	r3, [pc, #24]	; (18a4 <z_cstart+0xf0>)
    188c:	f7ff f934 	bl	af8 <z_arch_switch_to_main_thread>
    1890:	200013f8 	.word	0x200013f8
    1894:	e000ed00 	.word	0xe000ed00
    1898:	200005f0 	.word	0x200005f0
    189c:	2000065c 	.word	0x2000065c
    18a0:	00003506 	.word	0x00003506
    18a4:	00001785 	.word	0x00001785
    18a8:	200006b8 	.word	0x200006b8
    18ac:	0000350b 	.word	0x0000350b
    18b0:	20000584 	.word	0x20000584
    18b4:	00001709 	.word	0x00001709
    18b8:	20000ab8 	.word	0x20000ab8
    18bc:	20000674 	.word	0x20000674

000018c0 <init_mem_slab_module>:
 */
static int init_mem_slab_module(struct device *dev)
{
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    18c0:	4b0b      	ldr	r3, [pc, #44]	; (18f0 <init_mem_slab_module+0x30>)
    18c2:	480c      	ldr	r0, [pc, #48]	; (18f4 <init_mem_slab_module+0x34>)
{
    18c4:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
    18c6:	2400      	movs	r4, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    18c8:	4283      	cmp	r3, r0
    18ca:	d301      	bcc.n	18d0 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
    18cc:	2000      	movs	r0, #0
    18ce:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
    18d0:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    18d2:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    18d4:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    18d6:	2100      	movs	r1, #0
    18d8:	42a9      	cmp	r1, r5
    18da:	d101      	bne.n	18e0 <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    18dc:	331c      	adds	r3, #28
    18de:	e7f3      	b.n	18c8 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    18e0:	695e      	ldr	r6, [r3, #20]
    18e2:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
    18e4:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
    18e6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    18e8:	3101      	adds	r1, #1
		p += slab->block_size;
    18ea:	4432      	add	r2, r6
    18ec:	e7f4      	b.n	18d8 <init_mem_slab_module+0x18>
    18ee:	bf00      	nop
    18f0:	20001504 	.word	0x20001504
    18f4:	20001504 	.word	0x20001504

000018f8 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
    18f8:	b510      	push	{r4, lr}
    18fa:	4613      	mov	r3, r2
    18fc:	460c      	mov	r4, r1
    18fe:	f04f 0220 	mov.w	r2, #32
    1902:	f3ef 8111 	mrs	r1, BASEPRI
    1906:	f382 8811 	msr	BASEPRI, r2
    190a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    190e:	6942      	ldr	r2, [r0, #20]
    1910:	b162      	cbz	r2, 192c <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    1912:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    1914:	6943      	ldr	r3, [r0, #20]
    1916:	681b      	ldr	r3, [r3, #0]
    1918:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    191a:	6983      	ldr	r3, [r0, #24]
    191c:	3301      	adds	r3, #1
    191e:	6183      	str	r3, [r0, #24]
		result = 0;
    1920:	2000      	movs	r0, #0
	__asm__ volatile(
    1922:	f381 8811 	msr	BASEPRI, r1
    1926:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    192a:	e00d      	b.n	1948 <k_mem_slab_alloc+0x50>
	} else if (timeout == K_NO_WAIT) {
    192c:	b91b      	cbnz	r3, 1936 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    192e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    1930:	f06f 000b 	mvn.w	r0, #11
    1934:	e7f5      	b.n	1922 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    1936:	4602      	mov	r2, r0
    1938:	4804      	ldr	r0, [pc, #16]	; (194c <k_mem_slab_alloc+0x54>)
    193a:	f000 fabd 	bl	1eb8 <z_pend_curr>
		if (result == 0) {
    193e:	b918      	cbnz	r0, 1948 <k_mem_slab_alloc+0x50>
			*mem = _current->base.swap_data;
    1940:	4b03      	ldr	r3, [pc, #12]	; (1950 <k_mem_slab_alloc+0x58>)
    1942:	689b      	ldr	r3, [r3, #8]
    1944:	695b      	ldr	r3, [r3, #20]
    1946:	6023      	str	r3, [r4, #0]
}
    1948:	bd10      	pop	{r4, pc}
    194a:	bf00      	nop
    194c:	200006b6 	.word	0x200006b6
    1950:	2000065c 	.word	0x2000065c

00001954 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    1954:	b570      	push	{r4, r5, r6, lr}
    1956:	4604      	mov	r4, r0
    1958:	460d      	mov	r5, r1
	__asm__ volatile(
    195a:	f04f 0320 	mov.w	r3, #32
    195e:	f3ef 8611 	mrs	r6, BASEPRI
    1962:	f383 8811 	msr	BASEPRI, r3
    1966:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    196a:	f001 fafd 	bl	2f68 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    196e:	b180      	cbz	r0, 1992 <k_mem_slab_free+0x3e>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    1970:	682a      	ldr	r2, [r5, #0]
	thread->base.swap_data = data;
    1972:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1974:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
z_arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    1976:	2100      	movs	r1, #0
    1978:	06d2      	lsls	r2, r2, #27
    197a:	6681      	str	r1, [r0, #104]	; 0x68
    197c:	d103      	bne.n	1986 <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
    197e:	6983      	ldr	r3, [r0, #24]
    1980:	b90b      	cbnz	r3, 1986 <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
    1982:	f000 f97f 	bl	1c84 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
    1986:	4631      	mov	r1, r6
    1988:	4808      	ldr	r0, [pc, #32]	; (19ac <k_mem_slab_free+0x58>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    198a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    198e:	f001 ba8b 	b.w	2ea8 <z_reschedule>
		**(char ***)mem = slab->free_list;
    1992:	682b      	ldr	r3, [r5, #0]
    1994:	6962      	ldr	r2, [r4, #20]
    1996:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    1998:	682b      	ldr	r3, [r5, #0]
    199a:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    199c:	69a3      	ldr	r3, [r4, #24]
    199e:	3b01      	subs	r3, #1
    19a0:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    19a2:	f386 8811 	msr	BASEPRI, r6
    19a6:	f3bf 8f6f 	isb	sy
}
    19aa:	bd70      	pop	{r4, r5, r6, pc}
    19ac:	200006b6 	.word	0x200006b6

000019b0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    19b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19b2:	4604      	mov	r4, r0
    19b4:	460f      	mov	r7, r1
	__asm__ volatile(
    19b6:	f04f 0320 	mov.w	r3, #32
    19ba:	f3ef 8511 	mrs	r5, BASEPRI
    19be:	f383 8811 	msr	BASEPRI, r3
    19c2:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    19c6:	68c2      	ldr	r2, [r0, #12]
    19c8:	4930      	ldr	r1, [pc, #192]	; (1a8c <z_impl_k_mutex_lock+0xdc>)
    19ca:	b15a      	cbz	r2, 19e4 <z_impl_k_mutex_lock+0x34>
    19cc:	6880      	ldr	r0, [r0, #8]
    19ce:	688e      	ldr	r6, [r1, #8]
    19d0:	42b0      	cmp	r0, r6
    19d2:	d015      	beq.n	1a00 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
    19d4:	b9b7      	cbnz	r7, 1a04 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
    19d6:	f385 8811 	msr	BASEPRI, r5
    19da:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    19de:	f06f 000f 	mvn.w	r0, #15
    19e2:	e00c      	b.n	19fe <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
    19e4:	688b      	ldr	r3, [r1, #8]
    19e6:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    19ea:	6123      	str	r3, [r4, #16]
		mutex->lock_count++;
    19ec:	3201      	adds	r2, #1
		mutex->owner = _current;
    19ee:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
    19f0:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
    19f2:	60a3      	str	r3, [r4, #8]
    19f4:	f385 8811 	msr	BASEPRI, r5
    19f8:	f3bf 8f6f 	isb	sy
		return 0;
    19fc:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    19fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
    1a00:	6923      	ldr	r3, [r4, #16]
    1a02:	e7f2      	b.n	19ea <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    1a04:	f990 300e 	ldrsb.w	r3, [r0, #14]
    1a08:	f996 100e 	ldrsb.w	r1, [r6, #14]
    1a0c:	4299      	cmp	r1, r3
    1a0e:	bfa8      	it	ge
    1a10:	4619      	movge	r1, r3
    1a12:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    1a16:	4299      	cmp	r1, r3
    1a18:	da2b      	bge.n	1a72 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
    1a1a:	f000 fa61 	bl	1ee0 <z_set_prio>
    1a1e:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    1a20:	463b      	mov	r3, r7
    1a22:	4622      	mov	r2, r4
    1a24:	4629      	mov	r1, r5
    1a26:	481a      	ldr	r0, [pc, #104]	; (1a90 <z_impl_k_mutex_lock+0xe0>)
    1a28:	f000 fa46 	bl	1eb8 <z_pend_curr>
	if (got_mutex == 0) {
    1a2c:	2800      	cmp	r0, #0
    1a2e:	d0e6      	beq.n	19fe <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
    1a30:	f04f 0320 	mov.w	r3, #32
    1a34:	f3ef 8511 	mrs	r5, BASEPRI
    1a38:	f383 8811 	msr	BASEPRI, r3
    1a3c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    1a40:	6823      	ldr	r3, [r4, #0]
    1a42:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1a44:	429c      	cmp	r4, r3
    1a46:	d007      	beq.n	1a58 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
    1a48:	b133      	cbz	r3, 1a58 <z_impl_k_mutex_lock+0xa8>
    1a4a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    1a4e:	4299      	cmp	r1, r3
    1a50:	bfa8      	it	ge
    1a52:	4619      	movge	r1, r3
    1a54:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    1a58:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    1a5a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    1a5e:	4299      	cmp	r1, r3
    1a60:	d109      	bne.n	1a76 <z_impl_k_mutex_lock+0xc6>
	if (resched) {
    1a62:	b16e      	cbz	r6, 1a80 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
    1a64:	4629      	mov	r1, r5
    1a66:	480a      	ldr	r0, [pc, #40]	; (1a90 <z_impl_k_mutex_lock+0xe0>)
    1a68:	f001 fa1e 	bl	2ea8 <z_reschedule>
	return -EAGAIN;
    1a6c:	f06f 000a 	mvn.w	r0, #10
    1a70:	e7c5      	b.n	19fe <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
    1a72:	2600      	movs	r6, #0
    1a74:	e7d4      	b.n	1a20 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
    1a76:	f000 fa33 	bl	1ee0 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    1a7a:	2800      	cmp	r0, #0
    1a7c:	d1f2      	bne.n	1a64 <z_impl_k_mutex_lock+0xb4>
    1a7e:	e7f0      	b.n	1a62 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
    1a80:	f385 8811 	msr	BASEPRI, r5
    1a84:	f3bf 8f6f 	isb	sy
    1a88:	e7f0      	b.n	1a6c <z_impl_k_mutex_lock+0xbc>
    1a8a:	bf00      	nop
    1a8c:	2000065c 	.word	0x2000065c
    1a90:	200006b6 	.word	0x200006b6

00001a94 <z_impl_k_mutex_unlock>:
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    1a94:	4b1e      	ldr	r3, [pc, #120]	; (1b10 <z_impl_k_mutex_unlock+0x7c>)
    1a96:	689a      	ldr	r2, [r3, #8]
    1a98:	7bd3      	ldrb	r3, [r2, #15]
    1a9a:	3b01      	subs	r3, #1
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    1a9c:	b570      	push	{r4, r5, r6, lr}
    1a9e:	4604      	mov	r4, r0
    1aa0:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
    1aa2:	68c3      	ldr	r3, [r0, #12]
    1aa4:	2b01      	cmp	r3, #1
    1aa6:	d005      	beq.n	1ab4 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
    1aa8:	3b01      	subs	r3, #1
    1aaa:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
    1aac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
    1ab0:	f000 b8cc 	b.w	1c4c <k_sched_unlock>
	__asm__ volatile(
    1ab4:	f04f 0320 	mov.w	r3, #32
    1ab8:	f3ef 8611 	mrs	r6, BASEPRI
    1abc:	f383 8811 	msr	BASEPRI, r3
    1ac0:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    1ac4:	6901      	ldr	r1, [r0, #16]
    1ac6:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    1ac8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    1acc:	4299      	cmp	r1, r3
    1ace:	d001      	beq.n	1ad4 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
    1ad0:	f000 fa06 	bl	1ee0 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    1ad4:	4620      	mov	r0, r4
    1ad6:	f001 fa47 	bl	2f68 <z_unpend_first_thread>
    1ada:	4605      	mov	r5, r0
	mutex->owner = new_owner;
    1adc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    1ade:	b180      	cbz	r0, 1b02 <z_impl_k_mutex_unlock+0x6e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1ae0:	7b43      	ldrb	r3, [r0, #13]
    1ae2:	06db      	lsls	r3, r3, #27
    1ae4:	d103      	bne.n	1aee <z_impl_k_mutex_unlock+0x5a>
	if (z_is_thread_ready(thread)) {
    1ae6:	6983      	ldr	r3, [r0, #24]
    1ae8:	b90b      	cbnz	r3, 1aee <z_impl_k_mutex_unlock+0x5a>
		z_add_thread_to_ready_q(thread);
    1aea:	f000 f8cb 	bl	1c84 <z_add_thread_to_ready_q>
	__asm__ volatile(
    1aee:	f386 8811 	msr	BASEPRI, r6
    1af2:	f3bf 8f6f 	isb	sy
    1af6:	2300      	movs	r3, #0
    1af8:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
    1afa:	f995 300e 	ldrsb.w	r3, [r5, #14]
    1afe:	6123      	str	r3, [r4, #16]
    1b00:	e7d4      	b.n	1aac <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
    1b02:	60e0      	str	r0, [r4, #12]
    1b04:	f386 8811 	msr	BASEPRI, r6
    1b08:	f3bf 8f6f 	isb	sy
    1b0c:	e7ce      	b.n	1aac <z_impl_k_mutex_unlock+0x18>
    1b0e:	bf00      	nop
    1b10:	2000065c 	.word	0x2000065c

00001b14 <resched.part.15>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1b14:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    1b18:	280d      	cmp	r0, #13
    1b1a:	d809      	bhi.n	1b30 <resched.part.15+0x1c>
    1b1c:	b128      	cbz	r0, 1b2a <resched.part.15+0x16>
    1b1e:	4b05      	ldr	r3, [pc, #20]	; (1b34 <resched.part.15+0x20>)
    1b20:	6858      	ldr	r0, [r3, #4]
    1b22:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    1b26:	f3c0 20c0 	ubfx	r0, r0, #11, #1
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
}
    1b2a:	f080 0001 	eor.w	r0, r0, #1
    1b2e:	4770      	bx	lr
    1b30:	2001      	movs	r0, #1
    1b32:	e7fa      	b.n	1b2a <resched.part.15+0x16>
    1b34:	e000ed00 	.word	0xe000ed00

00001b38 <z_reset_time_slice>:
{
    1b38:	b510      	push	{r4, lr}
	if (slice_time != 0) {
    1b3a:	4c08      	ldr	r4, [pc, #32]	; (1b5c <z_reset_time_slice+0x24>)
    1b3c:	6823      	ldr	r3, [r4, #0]
    1b3e:	b15b      	cbz	r3, 1b58 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    1b40:	f7fe fe32 	bl	7a8 <z_clock_elapsed>
    1b44:	6823      	ldr	r3, [r4, #0]
    1b46:	4a06      	ldr	r2, [pc, #24]	; (1b60 <z_reset_time_slice+0x28>)
    1b48:	4418      	add	r0, r3
    1b4a:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    1b4c:	2100      	movs	r1, #0
    1b4e:	4618      	mov	r0, r3
}
    1b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    1b54:	f001 ba8b 	b.w	306e <z_set_timeout_expiry>
}
    1b58:	bd10      	pop	{r4, pc}
    1b5a:	bf00      	nop
    1b5c:	20000694 	.word	0x20000694
    1b60:	2000065c 	.word	0x2000065c

00001b64 <k_sched_time_slice_set>:
{
    1b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b66:	460d      	mov	r5, r1
	__asm__ volatile(
    1b68:	f04f 0320 	mov.w	r3, #32
    1b6c:	f3ef 8411 	mrs	r4, BASEPRI
    1b70:	f383 8811 	msr	BASEPRI, r3
    1b74:	f3bf 8f6f 	isb	sy
		_current_cpu->slice_ticks = 0;
    1b78:	4b0d      	ldr	r3, [pc, #52]	; (1bb0 <k_sched_time_slice_set+0x4c>)

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
    1b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1b7e:	f240 36e7 	movw	r6, #999	; 0x3e7
    1b82:	2700      	movs	r7, #0
    1b84:	fbc1 6700 	smlal	r6, r7, r1, r0
    1b88:	2200      	movs	r2, #0
    1b8a:	611a      	str	r2, [r3, #16]
    1b8c:	4630      	mov	r0, r6
    1b8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1b92:	2300      	movs	r3, #0
    1b94:	4639      	mov	r1, r7
    1b96:	f7fe fab3 	bl	100 <__aeabi_ldivmod>
    1b9a:	4b06      	ldr	r3, [pc, #24]	; (1bb4 <k_sched_time_slice_set+0x50>)
    1b9c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    1b9e:	4b06      	ldr	r3, [pc, #24]	; (1bb8 <k_sched_time_slice_set+0x54>)
    1ba0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    1ba2:	f7ff ffc9 	bl	1b38 <z_reset_time_slice>
	__asm__ volatile(
    1ba6:	f384 8811 	msr	BASEPRI, r4
    1baa:	f3bf 8f6f 	isb	sy
}
    1bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bb0:	2000065c 	.word	0x2000065c
    1bb4:	20000694 	.word	0x20000694
    1bb8:	20000690 	.word	0x20000690

00001bbc <k_sched_lock>:
	__asm__ volatile(
    1bbc:	f04f 0320 	mov.w	r3, #32
    1bc0:	f3ef 8111 	mrs	r1, BASEPRI
    1bc4:	f383 8811 	msr	BASEPRI, r3
    1bc8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    1bcc:	4b04      	ldr	r3, [pc, #16]	; (1be0 <k_sched_lock+0x24>)
    1bce:	689a      	ldr	r2, [r3, #8]
    1bd0:	7bd3      	ldrb	r3, [r2, #15]
    1bd2:	3b01      	subs	r3, #1
    1bd4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    1bd6:	f381 8811 	msr	BASEPRI, r1
    1bda:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    1bde:	4770      	bx	lr
    1be0:	2000065c 	.word	0x2000065c

00001be4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    1be4:	4b09      	ldr	r3, [pc, #36]	; (1c0c <z_priq_dumb_remove+0x28>)
    1be6:	f103 0228 	add.w	r2, r3, #40	; 0x28
    1bea:	4282      	cmp	r2, r0
    1bec:	d105      	bne.n	1bfa <z_priq_dumb_remove+0x16>
    1bee:	689b      	ldr	r3, [r3, #8]
    1bf0:	428b      	cmp	r3, r1
    1bf2:	d102      	bne.n	1bfa <z_priq_dumb_remove+0x16>
    1bf4:	7b4b      	ldrb	r3, [r1, #13]
    1bf6:	06db      	lsls	r3, r3, #27
    1bf8:	d107      	bne.n	1c0a <z_priq_dumb_remove+0x26>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    1bfa:	e9d1 2300 	ldrd	r2, r3, [r1]
    1bfe:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    1c00:	680a      	ldr	r2, [r1, #0]
    1c02:	6053      	str	r3, [r2, #4]
	node->next = NULL;
    1c04:	2300      	movs	r3, #0
	node->prev = NULL;
    1c06:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    1c0a:	4770      	bx	lr
    1c0c:	2000065c 	.word	0x2000065c

00001c10 <update_cache>:
{
    1c10:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    1c12:	4c0d      	ldr	r4, [pc, #52]	; (1c48 <update_cache+0x38>)
{
    1c14:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    1c16:	f104 0028 	add.w	r0, r4, #40	; 0x28
    1c1a:	f001 f96e 	bl	2efa <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    1c1e:	4605      	mov	r5, r0
    1c20:	b900      	cbnz	r0, 1c24 <update_cache+0x14>
    1c22:	68e5      	ldr	r5, [r4, #12]
    1c24:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok != 0) {
    1c26:	b94a      	cbnz	r2, 1c3c <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    1c28:	7b5a      	ldrb	r2, [r3, #13]
    1c2a:	06d2      	lsls	r2, r2, #27
    1c2c:	d106      	bne.n	1c3c <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    1c2e:	69aa      	ldr	r2, [r5, #24]
    1c30:	b922      	cbnz	r2, 1c3c <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    1c32:	89da      	ldrh	r2, [r3, #14]
    1c34:	2a7f      	cmp	r2, #127	; 0x7f
    1c36:	d901      	bls.n	1c3c <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    1c38:	6263      	str	r3, [r4, #36]	; 0x24
}
    1c3a:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    1c3c:	429d      	cmp	r5, r3
    1c3e:	d001      	beq.n	1c44 <update_cache+0x34>
			z_reset_time_slice();
    1c40:	f7ff ff7a 	bl	1b38 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
    1c44:	6265      	str	r5, [r4, #36]	; 0x24
}
    1c46:	e7f8      	b.n	1c3a <update_cache+0x2a>
    1c48:	2000065c 	.word	0x2000065c

00001c4c <k_sched_unlock>:
{
    1c4c:	b510      	push	{r4, lr}
	__asm__ volatile(
    1c4e:	f04f 0320 	mov.w	r3, #32
    1c52:	f3ef 8411 	mrs	r4, BASEPRI
    1c56:	f383 8811 	msr	BASEPRI, r3
    1c5a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    1c5e:	4b08      	ldr	r3, [pc, #32]	; (1c80 <k_sched_unlock+0x34>)
    1c60:	689a      	ldr	r2, [r3, #8]
    1c62:	7bd3      	ldrb	r3, [r2, #15]
    1c64:	3301      	adds	r3, #1
    1c66:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    1c68:	2000      	movs	r0, #0
    1c6a:	f7ff ffd1 	bl	1c10 <update_cache>
	__asm__ volatile(
    1c6e:	f384 8811 	msr	BASEPRI, r4
    1c72:	f3bf 8f6f 	isb	sy
}
    1c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    1c7a:	f001 b934 	b.w	2ee6 <z_reschedule_unlocked>
    1c7e:	bf00      	nop
    1c80:	2000065c 	.word	0x2000065c

00001c84 <z_add_thread_to_ready_q>:
{
    1c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    1c86:	f04f 0320 	mov.w	r3, #32
    1c8a:	f3ef 8411 	mrs	r4, BASEPRI
    1c8e:	f383 8811 	msr	BASEPRI, r3
    1c92:	f3bf 8f6f 	isb	sy
	return list->head == list;
    1c96:	4a16      	ldr	r2, [pc, #88]	; (1cf0 <z_add_thread_to_ready_q+0x6c>)
    1c98:	4611      	mov	r1, r2
    1c9a:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1c9e:	428b      	cmp	r3, r1
    1ca0:	d00c      	beq.n	1cbc <z_add_thread_to_ready_q+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1ca2:	b15b      	cbz	r3, 1cbc <z_add_thread_to_ready_q+0x38>
    1ca4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    1ca6:	f990 500e 	ldrsb.w	r5, [r0, #14]
    1caa:	f993 700e 	ldrsb.w	r7, [r3, #14]
    1cae:	42af      	cmp	r7, r5
    1cb0:	dc0b      	bgt.n	1cca <z_add_thread_to_ready_q+0x46>
	return (node == list->tail) ? NULL : node->next;
    1cb2:	42b3      	cmp	r3, r6
    1cb4:	d002      	beq.n	1cbc <z_add_thread_to_ready_q+0x38>
    1cb6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1cb8:	2b00      	cmp	r3, #0
    1cba:	d1f6      	bne.n	1caa <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    1cbc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1cbe:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    1cc0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    1cc2:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
    1cc4:	6018      	str	r0, [r3, #0]
	list->tail = node;
    1cc6:	62d0      	str	r0, [r2, #44]	; 0x2c
    1cc8:	e005      	b.n	1cd6 <z_add_thread_to_ready_q+0x52>
	node->prev = successor->prev;
    1cca:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    1ccc:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    1cd0:	685a      	ldr	r2, [r3, #4]
    1cd2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    1cd4:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    1cd6:	7b43      	ldrb	r3, [r0, #13]
    1cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1cdc:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    1cde:	2000      	movs	r0, #0
    1ce0:	f7ff ff96 	bl	1c10 <update_cache>
	__asm__ volatile(
    1ce4:	f384 8811 	msr	BASEPRI, r4
    1ce8:	f3bf 8f6f 	isb	sy
}
    1cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1cee:	bf00      	nop
    1cf0:	2000065c 	.word	0x2000065c

00001cf4 <z_move_thread_to_end_of_prio_q>:
{
    1cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cf6:	4604      	mov	r4, r0
	__asm__ volatile(
    1cf8:	f04f 0320 	mov.w	r3, #32
    1cfc:	f3ef 8511 	mrs	r5, BASEPRI
    1d00:	f383 8811 	msr	BASEPRI, r3
    1d04:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    1d08:	7b43      	ldrb	r3, [r0, #13]
    1d0a:	065a      	lsls	r2, r3, #25
    1d0c:	d503      	bpl.n	1d16 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    1d0e:	4601      	mov	r1, r0
    1d10:	4818      	ldr	r0, [pc, #96]	; (1d74 <z_move_thread_to_end_of_prio_q+0x80>)
    1d12:	f7ff ff67 	bl	1be4 <z_priq_dumb_remove>
	return list->head == list;
    1d16:	4a18      	ldr	r2, [pc, #96]	; (1d78 <z_move_thread_to_end_of_prio_q+0x84>)
    1d18:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1d1c:	f102 0128 	add.w	r1, r2, #40	; 0x28
    1d20:	428b      	cmp	r3, r1
    1d22:	d00b      	beq.n	1d3c <z_move_thread_to_end_of_prio_q+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1d24:	b153      	cbz	r3, 1d3c <z_move_thread_to_end_of_prio_q+0x48>
	if (t1->base.prio < t2->base.prio) {
    1d26:	f994 600e 	ldrsb.w	r6, [r4, #14]
    1d2a:	f993 700e 	ldrsb.w	r7, [r3, #14]
    1d2e:	42b7      	cmp	r7, r6
    1d30:	dc0a      	bgt.n	1d48 <z_move_thread_to_end_of_prio_q+0x54>
	return (node == list->tail) ? NULL : node->next;
    1d32:	4283      	cmp	r3, r0
    1d34:	d002      	beq.n	1d3c <z_move_thread_to_end_of_prio_q+0x48>
    1d36:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1d38:	2b00      	cmp	r3, #0
    1d3a:	d1f6      	bne.n	1d2a <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
    1d3c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    1d40:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1d42:	601c      	str	r4, [r3, #0]
	list->tail = node;
    1d44:	62d4      	str	r4, [r2, #44]	; 0x2c
    1d46:	e005      	b.n	1d54 <z_move_thread_to_end_of_prio_q+0x60>
	node->prev = successor->prev;
    1d48:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    1d4a:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    1d4e:	6859      	ldr	r1, [r3, #4]
    1d50:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    1d52:	605c      	str	r4, [r3, #4]
    1d54:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    1d56:	6890      	ldr	r0, [r2, #8]
    1d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d5c:	7363      	strb	r3, [r4, #13]
    1d5e:	1b03      	subs	r3, r0, r4
    1d60:	4258      	negs	r0, r3
    1d62:	4158      	adcs	r0, r3
    1d64:	f7ff ff54 	bl	1c10 <update_cache>
	__asm__ volatile(
    1d68:	f385 8811 	msr	BASEPRI, r5
    1d6c:	f3bf 8f6f 	isb	sy
}
    1d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d72:	bf00      	nop
    1d74:	20000684 	.word	0x20000684
    1d78:	2000065c 	.word	0x2000065c

00001d7c <z_time_slice>:
	if (pending_current == _current) {
    1d7c:	4a15      	ldr	r2, [pc, #84]	; (1dd4 <z_time_slice+0x58>)
    1d7e:	4916      	ldr	r1, [pc, #88]	; (1dd8 <z_time_slice+0x5c>)
{
    1d80:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    1d82:	680c      	ldr	r4, [r1, #0]
    1d84:	6893      	ldr	r3, [r2, #8]
    1d86:	42a3      	cmp	r3, r4
    1d88:	4614      	mov	r4, r2
    1d8a:	d103      	bne.n	1d94 <z_time_slice+0x18>
}
    1d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    1d90:	f7ff bed2 	b.w	1b38 <z_reset_time_slice>
	pending_current = NULL;
    1d94:	2500      	movs	r5, #0
    1d96:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    1d98:	4910      	ldr	r1, [pc, #64]	; (1ddc <z_time_slice+0x60>)
    1d9a:	6809      	ldr	r1, [r1, #0]
    1d9c:	b1b9      	cbz	r1, 1dce <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    1d9e:	89d9      	ldrh	r1, [r3, #14]
    1da0:	297f      	cmp	r1, #127	; 0x7f
    1da2:	d814      	bhi.n	1dce <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    1da4:	490e      	ldr	r1, [pc, #56]	; (1de0 <z_time_slice+0x64>)
    1da6:	f993 500e 	ldrsb.w	r5, [r3, #14]
    1daa:	6809      	ldr	r1, [r1, #0]
    1dac:	428d      	cmp	r5, r1
    1dae:	db0e      	blt.n	1dce <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
    1db0:	490c      	ldr	r1, [pc, #48]	; (1de4 <z_time_slice+0x68>)
    1db2:	428b      	cmp	r3, r1
    1db4:	d00b      	beq.n	1dce <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    1db6:	6999      	ldr	r1, [r3, #24]
    1db8:	b949      	cbnz	r1, 1dce <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    1dba:	6911      	ldr	r1, [r2, #16]
    1dbc:	4281      	cmp	r1, r0
    1dbe:	dc03      	bgt.n	1dc8 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    1dc0:	4618      	mov	r0, r3
    1dc2:	f7ff ff97 	bl	1cf4 <z_move_thread_to_end_of_prio_q>
    1dc6:	e7e1      	b.n	1d8c <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    1dc8:	1a09      	subs	r1, r1, r0
    1dca:	6111      	str	r1, [r2, #16]
}
    1dcc:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    1dce:	2300      	movs	r3, #0
    1dd0:	6123      	str	r3, [r4, #16]
    1dd2:	e7fb      	b.n	1dcc <z_time_slice+0x50>
    1dd4:	2000065c 	.word	0x2000065c
    1dd8:	2000068c 	.word	0x2000068c
    1ddc:	20000694 	.word	0x20000694
    1de0:	20000690 	.word	0x20000690
    1de4:	20000584 	.word	0x20000584

00001de8 <z_remove_thread_from_ready_q>:
{
    1de8:	b538      	push	{r3, r4, r5, lr}
    1dea:	4604      	mov	r4, r0
	__asm__ volatile(
    1dec:	f04f 0320 	mov.w	r3, #32
    1df0:	f3ef 8511 	mrs	r5, BASEPRI
    1df4:	f383 8811 	msr	BASEPRI, r3
    1df8:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    1dfc:	7b43      	ldrb	r3, [r0, #13]
    1dfe:	065a      	lsls	r2, r3, #25
    1e00:	d507      	bpl.n	1e12 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    1e02:	4601      	mov	r1, r0
    1e04:	4809      	ldr	r0, [pc, #36]	; (1e2c <z_remove_thread_from_ready_q+0x44>)
    1e06:	f7ff feed 	bl	1be4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    1e0a:	7b63      	ldrb	r3, [r4, #13]
    1e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    1e10:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    1e12:	4b07      	ldr	r3, [pc, #28]	; (1e30 <z_remove_thread_from_ready_q+0x48>)
    1e14:	6898      	ldr	r0, [r3, #8]
    1e16:	1b03      	subs	r3, r0, r4
    1e18:	4258      	negs	r0, r3
    1e1a:	4158      	adcs	r0, r3
    1e1c:	f7ff fef8 	bl	1c10 <update_cache>
	__asm__ volatile(
    1e20:	f385 8811 	msr	BASEPRI, r5
    1e24:	f3bf 8f6f 	isb	sy
}
    1e28:	bd38      	pop	{r3, r4, r5, pc}
    1e2a:	bf00      	nop
    1e2c:	20000684 	.word	0x20000684
    1e30:	2000065c 	.word	0x2000065c

00001e34 <pend>:
{
    1e34:	b570      	push	{r4, r5, r6, lr}
    1e36:	4604      	mov	r4, r0
    1e38:	460d      	mov	r5, r1
    1e3a:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    1e3c:	f7ff ffd4 	bl	1de8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    1e40:	7b63      	ldrb	r3, [r4, #13]
    1e42:	f043 0302 	orr.w	r3, r3, #2
    1e46:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    1e48:	b1ed      	cbz	r5, 1e86 <pend+0x52>
	return list->head == list;
    1e4a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    1e4c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1e4e:	429d      	cmp	r5, r3
    1e50:	d00c      	beq.n	1e6c <pend+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1e52:	b15b      	cbz	r3, 1e6c <pend+0x38>
	if (t1->base.prio < t2->base.prio) {
    1e54:	f994 200e 	ldrsb.w	r2, [r4, #14]
    1e58:	f993 100e 	ldrsb.w	r1, [r3, #14]
    1e5c:	4291      	cmp	r1, r2
    1e5e:	dc0c      	bgt.n	1e7a <pend+0x46>
	return (node == list->tail) ? NULL : node->next;
    1e60:	6869      	ldr	r1, [r5, #4]
    1e62:	428b      	cmp	r3, r1
    1e64:	d002      	beq.n	1e6c <pend+0x38>
    1e66:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d1f5      	bne.n	1e58 <pend+0x24>
	node->prev = list->tail;
    1e6c:	686b      	ldr	r3, [r5, #4]
    1e6e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    1e70:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    1e72:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    1e74:	601c      	str	r4, [r3, #0]
	list->tail = node;
    1e76:	606c      	str	r4, [r5, #4]
    1e78:	e005      	b.n	1e86 <pend+0x52>
	node->prev = successor->prev;
    1e7a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    1e7c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    1e80:	685a      	ldr	r2, [r3, #4]
    1e82:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    1e84:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    1e86:	1c73      	adds	r3, r6, #1
    1e88:	d013      	beq.n	1eb2 <pend+0x7e>
    1e8a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    1e8e:	f240 30e7 	movw	r0, #999	; 0x3e7
    1e92:	2100      	movs	r1, #0
    1e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1e98:	fbc5 0106 	smlal	r0, r1, r5, r6
    1e9c:	2300      	movs	r3, #0
    1e9e:	f7fe f92f 	bl	100 <__aeabi_ldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    1ea2:	4904      	ldr	r1, [pc, #16]	; (1eb4 <pend+0x80>)
    1ea4:	1c42      	adds	r2, r0, #1
    1ea6:	f104 0018 	add.w	r0, r4, #24
}
    1eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1eae:	f000 b93f 	b.w	2130 <z_add_timeout>
    1eb2:	bd70      	pop	{r4, r5, r6, pc}
    1eb4:	00002f07 	.word	0x00002f07

00001eb8 <z_pend_curr>:
{
    1eb8:	b510      	push	{r4, lr}
    1eba:	460c      	mov	r4, r1
    1ebc:	4611      	mov	r1, r2
	pending_current = _current;
    1ebe:	4a06      	ldr	r2, [pc, #24]	; (1ed8 <z_pend_curr+0x20>)
    1ec0:	6890      	ldr	r0, [r2, #8]
    1ec2:	4a06      	ldr	r2, [pc, #24]	; (1edc <z_pend_curr+0x24>)
    1ec4:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    1ec6:	461a      	mov	r2, r3
    1ec8:	f7ff ffb4 	bl	1e34 <pend>
    1ecc:	4620      	mov	r0, r4
}
    1ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1ed2:	f7fe bda5 	b.w	a20 <z_arch_swap>
    1ed6:	bf00      	nop
    1ed8:	2000065c 	.word	0x2000065c
    1edc:	2000068c 	.word	0x2000068c

00001ee0 <z_set_prio>:
{
    1ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1ee4:	4604      	mov	r4, r0
	__asm__ volatile(
    1ee6:	f04f 0320 	mov.w	r3, #32
    1eea:	f3ef 8911 	mrs	r9, BASEPRI
    1eee:	f383 8811 	msr	BASEPRI, r3
    1ef2:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
    1ef6:	f000 ffb5 	bl	2e64 <z_is_thread_ready>
    1efa:	b24e      	sxtb	r6, r1
		if (need_sched) {
    1efc:	4680      	mov	r8, r0
    1efe:	b368      	cbz	r0, 1f5c <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    1f00:	4d17      	ldr	r5, [pc, #92]	; (1f60 <z_set_prio+0x80>)
    1f02:	f105 0728 	add.w	r7, r5, #40	; 0x28
    1f06:	4621      	mov	r1, r4
    1f08:	4638      	mov	r0, r7
    1f0a:	f7ff fe6b 	bl	1be4 <z_priq_dumb_remove>
	return list->head == list;
    1f0e:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
    1f10:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1f12:	42bb      	cmp	r3, r7
    1f14:	462a      	mov	r2, r5
    1f16:	d00a      	beq.n	1f2e <z_set_prio+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1f18:	b14b      	cbz	r3, 1f2e <z_set_prio+0x4e>
    1f1a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    1f1c:	f993 000e 	ldrsb.w	r0, [r3, #14]
    1f20:	42b0      	cmp	r0, r6
    1f22:	dc0b      	bgt.n	1f3c <z_set_prio+0x5c>
	return (node == list->tail) ? NULL : node->next;
    1f24:	4299      	cmp	r1, r3
    1f26:	d002      	beq.n	1f2e <z_set_prio+0x4e>
    1f28:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	d1f6      	bne.n	1f1c <z_set_prio+0x3c>
	node->prev = list->tail;
    1f2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1f30:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    1f32:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    1f34:	6027      	str	r7, [r4, #0]
	list->tail->next = node;
    1f36:	601c      	str	r4, [r3, #0]
	list->tail = node;
    1f38:	62d4      	str	r4, [r2, #44]	; 0x2c
    1f3a:	e005      	b.n	1f48 <z_set_prio+0x68>
	node->prev = successor->prev;
    1f3c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    1f3e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    1f42:	685a      	ldr	r2, [r3, #4]
    1f44:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    1f46:	605c      	str	r4, [r3, #4]
			update_cache(1);
    1f48:	2001      	movs	r0, #1
    1f4a:	f7ff fe61 	bl	1c10 <update_cache>
	__asm__ volatile(
    1f4e:	f389 8811 	msr	BASEPRI, r9
    1f52:	f3bf 8f6f 	isb	sy
}
    1f56:	4640      	mov	r0, r8
    1f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			thread->base.prio = prio;
    1f5c:	73a6      	strb	r6, [r4, #14]
    1f5e:	e7f6      	b.n	1f4e <z_set_prio+0x6e>
    1f60:	2000065c 	.word	0x2000065c

00001f64 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    1f64:	4b04      	ldr	r3, [pc, #16]	; (1f78 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    1f66:	2100      	movs	r1, #0
    1f68:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    1f6c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    1f70:	4608      	mov	r0, r1
    1f72:	f7ff bdf7 	b.w	1b64 <k_sched_time_slice_set>
    1f76:	bf00      	nop
    1f78:	2000065c 	.word	0x2000065c

00001f7c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    1f7c:	4b01      	ldr	r3, [pc, #4]	; (1f84 <z_impl_k_current_get+0x8>)
    1f7e:	6898      	ldr	r0, [r3, #8]
    1f80:	4770      	bx	lr
    1f82:	bf00      	nop
    1f84:	2000065c 	.word	0x2000065c

00001f88 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    1f88:	b510      	push	{r4, lr}
    1f8a:	4602      	mov	r2, r0
	__asm__ volatile(
    1f8c:	f04f 0320 	mov.w	r3, #32
    1f90:	f3ef 8411 	mrs	r4, BASEPRI
    1f94:	f383 8811 	msr	BASEPRI, r3
    1f98:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    1f9c:	7b43      	ldrb	r3, [r0, #13]
    1f9e:	0759      	lsls	r1, r3, #29
    1fa0:	d404      	bmi.n	1fac <z_impl_k_thread_start+0x24>
	__asm__ volatile(
    1fa2:	f384 8811 	msr	BASEPRI, r4
    1fa6:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    1faa:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1fac:	f023 0304 	bic.w	r3, r3, #4
    1fb0:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    1fb2:	f001 f806 	bl	2fc2 <z_is_thread_ready>
    1fb6:	b110      	cbz	r0, 1fbe <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    1fb8:	4610      	mov	r0, r2
    1fba:	f7ff fe63 	bl	1c84 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    1fbe:	4621      	mov	r1, r4
    1fc0:	4802      	ldr	r0, [pc, #8]	; (1fcc <z_impl_k_thread_start+0x44>)
}
    1fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    1fc6:	f000 bf6f 	b.w	2ea8 <z_reschedule>
    1fca:	bf00      	nop
    1fcc:	200006b6 	.word	0x200006b6

00001fd0 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    1fd0:	b530      	push	{r4, r5, lr}
    1fd2:	b087      	sub	sp, #28
    1fd4:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    1fd6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    1fd8:	9504      	str	r5, [sp, #16]
    1fda:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    1fdc:	9503      	str	r5, [sp, #12]
    1fde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    1fe0:	9502      	str	r5, [sp, #8]
    1fe2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    1fe4:	9501      	str	r5, [sp, #4]
    1fe6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    1fe8:	9500      	str	r5, [sp, #0]
    1fea:	f7fe fd5b 	bl	aa4 <z_arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    1fee:	4b04      	ldr	r3, [pc, #16]	; (2000 <z_setup_new_thread+0x30>)
    1ff0:	689b      	ldr	r3, [r3, #8]
    1ff2:	b913      	cbnz	r3, 1ffa <z_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    1ff4:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    1ff6:	b007      	add	sp, #28
    1ff8:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
    1ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1ffc:	e7fa      	b.n	1ff4 <z_setup_new_thread+0x24>
    1ffe:	bf00      	nop
    2000:	2000065c 	.word	0x2000065c

00002004 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    2004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    2008:	4e28      	ldr	r6, [pc, #160]	; (20ac <z_init_static_threads+0xa8>)
    200a:	4d29      	ldr	r5, [pc, #164]	; (20b0 <z_init_static_threads+0xac>)
{
    200c:	b087      	sub	sp, #28
    200e:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    2010:	42b5      	cmp	r5, r6
    2012:	f105 0430 	add.w	r4, r5, #48	; 0x30
    2016:	d310      	bcc.n	203a <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    2018:	f7ff fdd0 	bl	1bbc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    201c:	4c24      	ldr	r4, [pc, #144]	; (20b0 <z_init_static_threads+0xac>)
    201e:	f8df a094 	ldr.w	sl, [pc, #148]	; 20b4 <z_init_static_threads+0xb0>
    2022:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2026:	f240 36e7 	movw	r6, #999	; 0x3e7
    202a:	2700      	movs	r7, #0
    202c:	4544      	cmp	r4, r8
    202e:	d321      	bcc.n	2074 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    2030:	b007      	add	sp, #28
    2032:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    2036:	f7ff be09 	b.w	1c4c <k_sched_unlock>
		z_setup_new_thread(
    203a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    203e:	9305      	str	r3, [sp, #20]
    2040:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2044:	9304      	str	r3, [sp, #16]
    2046:	f854 3c14 	ldr.w	r3, [r4, #-20]
    204a:	9303      	str	r3, [sp, #12]
    204c:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2050:	9302      	str	r3, [sp, #8]
    2052:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2056:	9301      	str	r3, [sp, #4]
    2058:	f854 3c20 	ldr.w	r3, [r4, #-32]
    205c:	9300      	str	r3, [sp, #0]
    205e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    2062:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    2066:	f7ff ffb3 	bl	1fd0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    206a:	f854 3c30 	ldr.w	r3, [r4, #-48]
    206e:	64dd      	str	r5, [r3, #76]	; 0x4c
    2070:	4625      	mov	r5, r4
    2072:	e7cd      	b.n	2010 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    2074:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2076:	1c4b      	adds	r3, r1, #1
    2078:	d004      	beq.n	2084 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    207a:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    207c:	b921      	cbnz	r1, 2088 <z_init_static_threads+0x84>
	z_impl_k_thread_start(thread);
    207e:	4628      	mov	r0, r5
    2080:	f7ff ff82 	bl	1f88 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2084:	3430      	adds	r4, #48	; 0x30
    2086:	e7d1      	b.n	202c <z_init_static_threads+0x28>
    2088:	46b3      	mov	fp, r6
    208a:	46bc      	mov	ip, r7
    208c:	fbc9 bc01 	smlal	fp, ip, r9, r1
    2090:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2094:	2300      	movs	r3, #0
    2096:	4658      	mov	r0, fp
    2098:	4661      	mov	r1, ip
    209a:	f7fe f831 	bl	100 <__aeabi_ldivmod>
    209e:	4651      	mov	r1, sl
    20a0:	1c42      	adds	r2, r0, #1
    20a2:	f105 0018 	add.w	r0, r5, #24
    20a6:	f000 f843 	bl	2130 <z_add_timeout>
    20aa:	e7eb      	b.n	2084 <z_init_static_threads+0x80>
    20ac:	20001504 	.word	0x20001504
    20b0:	20001504 	.word	0x20001504
    20b4:	00002f07 	.word	0x00002f07

000020b8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    20b8:	4b03      	ldr	r3, [pc, #12]	; (20c8 <elapsed+0x10>)
    20ba:	681b      	ldr	r3, [r3, #0]
    20bc:	b90b      	cbnz	r3, 20c2 <elapsed+0xa>
    20be:	f7fe bb73 	b.w	7a8 <z_clock_elapsed>
}
    20c2:	2000      	movs	r0, #0
    20c4:	4770      	bx	lr
    20c6:	bf00      	nop
    20c8:	20000698 	.word	0x20000698

000020cc <remove_timeout>:
{
    20cc:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    20ce:	b140      	cbz	r0, 20e2 <remove_timeout+0x16>
    20d0:	4a08      	ldr	r2, [pc, #32]	; (20f4 <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
    20d2:	6852      	ldr	r2, [r2, #4]
    20d4:	4290      	cmp	r0, r2
    20d6:	d004      	beq.n	20e2 <remove_timeout+0x16>
	if (next(t) != NULL) {
    20d8:	b11b      	cbz	r3, 20e2 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    20da:	689a      	ldr	r2, [r3, #8]
    20dc:	6881      	ldr	r1, [r0, #8]
    20de:	440a      	add	r2, r1
    20e0:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    20e2:	6842      	ldr	r2, [r0, #4]
    20e4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    20e6:	6803      	ldr	r3, [r0, #0]
    20e8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    20ea:	2300      	movs	r3, #0
	node->prev = NULL;
    20ec:	e9c0 3300 	strd	r3, r3, [r0]
}
    20f0:	4770      	bx	lr
    20f2:	bf00      	nop
    20f4:	2000142c 	.word	0x2000142c

000020f8 <next_timeout>:
	return list->head == list;
    20f8:	4b0b      	ldr	r3, [pc, #44]	; (2128 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    20fa:	b510      	push	{r4, lr}
    20fc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    20fe:	429c      	cmp	r4, r3
    2100:	bf08      	it	eq
    2102:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    2104:	f7ff ffd8 	bl	20b8 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2108:	b154      	cbz	r4, 2120 <next_timeout+0x28>
    210a:	68a3      	ldr	r3, [r4, #8]
    210c:	1a18      	subs	r0, r3, r0
    210e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2112:	4b06      	ldr	r3, [pc, #24]	; (212c <next_timeout+0x34>)
    2114:	691b      	ldr	r3, [r3, #16]
    2116:	b113      	cbz	r3, 211e <next_timeout+0x26>
    2118:	4298      	cmp	r0, r3
    211a:	bfa8      	it	ge
    211c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    211e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2120:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2124:	e7f5      	b.n	2112 <next_timeout+0x1a>
    2126:	bf00      	nop
    2128:	2000142c 	.word	0x2000142c
    212c:	2000065c 	.word	0x2000065c

00002130 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    2130:	b570      	push	{r4, r5, r6, lr}
    2132:	4604      	mov	r4, r0
    2134:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    2136:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    2138:	f04f 0320 	mov.w	r3, #32
    213c:	f3ef 8511 	mrs	r5, BASEPRI
    2140:	f383 8811 	msr	BASEPRI, r3
    2144:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    2148:	f7ff ffb6 	bl	20b8 <elapsed>
	return list->head == list;
    214c:	4b19      	ldr	r3, [pc, #100]	; (21b4 <z_add_timeout+0x84>)
    214e:	681a      	ldr	r2, [r3, #0]
    2150:	2e01      	cmp	r6, #1
    2152:	bfac      	ite	ge
    2154:	1980      	addge	r0, r0, r6
    2156:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2158:	429a      	cmp	r2, r3
    215a:	60a0      	str	r0, [r4, #8]
    215c:	d001      	beq.n	2162 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    215e:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    2160:	b932      	cbnz	r2, 2170 <z_add_timeout+0x40>
	node->prev = list->tail;
    2162:	685a      	ldr	r2, [r3, #4]
    2164:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    2166:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    2168:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
    216a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    216c:	605c      	str	r4, [r3, #4]
    216e:	e00b      	b.n	2188 <z_add_timeout+0x58>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    2170:	6890      	ldr	r0, [r2, #8]
    2172:	68a1      	ldr	r1, [r4, #8]
    2174:	4288      	cmp	r0, r1
    2176:	dd16      	ble.n	21a6 <z_add_timeout+0x76>
				t->dticks -= to->dticks;
    2178:	1a41      	subs	r1, r0, r1
    217a:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    217c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    217e:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    2182:	6851      	ldr	r1, [r2, #4]
    2184:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    2186:	6054      	str	r4, [r2, #4]
	return list->head == list;
    2188:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    218a:	429a      	cmp	r2, r3
    218c:	d006      	beq.n	219c <z_add_timeout+0x6c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    218e:	4294      	cmp	r4, r2
    2190:	d104      	bne.n	219c <z_add_timeout+0x6c>
			z_clock_set_timeout(next_timeout(), false);
    2192:	f7ff ffb1 	bl	20f8 <next_timeout>
    2196:	2100      	movs	r1, #0
    2198:	f7fe fab8 	bl	70c <z_clock_set_timeout>
	__asm__ volatile(
    219c:	f385 8811 	msr	BASEPRI, r5
    21a0:	f3bf 8f6f 	isb	sy
		}
	}
}
    21a4:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    21a6:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    21a8:	4296      	cmp	r6, r2
    21aa:	60a1      	str	r1, [r4, #8]
    21ac:	d0d9      	beq.n	2162 <z_add_timeout+0x32>
    21ae:	6812      	ldr	r2, [r2, #0]
    21b0:	e7d6      	b.n	2160 <z_add_timeout+0x30>
    21b2:	bf00      	nop
    21b4:	2000142c 	.word	0x2000142c

000021b8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    21b8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    21bc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    21be:	f7ff fddd 	bl	1d7c <z_time_slice>
	__asm__ volatile(
    21c2:	f04f 0320 	mov.w	r3, #32
    21c6:	f3ef 8511 	mrs	r5, BASEPRI
    21ca:	f383 8811 	msr	BASEPRI, r3
    21ce:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    21d2:	4e21      	ldr	r6, [pc, #132]	; (2258 <z_clock_announce+0xa0>)
    21d4:	4f21      	ldr	r7, [pc, #132]	; (225c <z_clock_announce+0xa4>)
	return list->head == list;
    21d6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2260 <z_clock_announce+0xa8>
    21da:	6034      	str	r4, [r6, #0]
    21dc:	46b8      	mov	r8, r7
    21de:	f8d9 4000 	ldr.w	r4, [r9]
    21e2:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    21e4:	454c      	cmp	r4, r9
    21e6:	e9d7 bc00 	ldrd	fp, ip, [r7]
    21ea:	d005      	beq.n	21f8 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    21ec:	b124      	cbz	r4, 21f8 <z_clock_announce+0x40>
    21ee:	68a3      	ldr	r3, [r4, #8]
    21f0:	4293      	cmp	r3, r2
    21f2:	dd14      	ble.n	221e <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    21f4:	1a9b      	subs	r3, r3, r2
    21f6:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
    21f8:	eb1b 0002 	adds.w	r0, fp, r2
    21fc:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
    2200:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    2202:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    2206:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    2208:	f7ff ff76 	bl	20f8 <next_timeout>
    220c:	4621      	mov	r1, r4
    220e:	f7fe fa7d 	bl	70c <z_clock_set_timeout>
	__asm__ volatile(
    2212:	f385 8811 	msr	BASEPRI, r5
    2216:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    221a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    221e:	eb1b 0003 	adds.w	r0, fp, r3
    2222:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    2226:	1ad3      	subs	r3, r2, r3
    2228:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    222a:	2300      	movs	r3, #0
		curr_tick += dt;
    222c:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    2230:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    2232:	4620      	mov	r0, r4
    2234:	f7ff ff4a 	bl	20cc <remove_timeout>
    2238:	f385 8811 	msr	BASEPRI, r5
    223c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    2240:	68e3      	ldr	r3, [r4, #12]
    2242:	4798      	blx	r3
	__asm__ volatile(
    2244:	f04f 0320 	mov.w	r3, #32
    2248:	f3ef 8511 	mrs	r5, BASEPRI
    224c:	f383 8811 	msr	BASEPRI, r3
    2250:	f3bf 8f6f 	isb	sy
    2254:	e7c3      	b.n	21de <z_clock_announce+0x26>
    2256:	bf00      	nop
    2258:	20000698 	.word	0x20000698
    225c:	20000000 	.word	0x20000000
    2260:	2000142c 	.word	0x2000142c

00002264 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    2264:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    2266:	4c07      	ldr	r4, [pc, #28]	; (2284 <init_static_pools+0x20>)
    2268:	4d07      	ldr	r5, [pc, #28]	; (2288 <init_static_pools+0x24>)
    226a:	42ac      	cmp	r4, r5
    226c:	d301      	bcc.n	2272 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    226e:	2000      	movs	r0, #0
    2270:	bd38      	pop	{r3, r4, r5, pc}
    2272:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    2276:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    2278:	e9c4 3305 	strd	r3, r3, [r4, #20]
    227c:	f000 f97c 	bl	2578 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    2280:	341c      	adds	r4, #28
    2282:	e7f2      	b.n	226a <init_static_pools+0x6>
    2284:	20001504 	.word	0x20001504
    2288:	20001504 	.word	0x20001504

0000228c <nrf_cc310_platform_init_no_rng>:
    228c:	b510      	push	{r4, lr}
    228e:	4c09      	ldr	r4, [pc, #36]	; (22b4 <nrf_cc310_platform_init_no_rng+0x28>)
    2290:	6823      	ldr	r3, [r4, #0]
    2292:	b11b      	cbz	r3, 229c <nrf_cc310_platform_init_no_rng+0x10>
    2294:	2301      	movs	r3, #1
    2296:	6023      	str	r3, [r4, #0]
    2298:	2000      	movs	r0, #0
    229a:	bd10      	pop	{r4, pc}
    229c:	f000 f880 	bl	23a0 <CC_LibInitNoRng>
    22a0:	2800      	cmp	r0, #0
    22a2:	d0f7      	beq.n	2294 <nrf_cc310_platform_init_no_rng+0x8>
    22a4:	3801      	subs	r0, #1
    22a6:	2806      	cmp	r0, #6
    22a8:	bf96      	itet	ls
    22aa:	4b03      	ldrls	r3, [pc, #12]	; (22b8 <nrf_cc310_platform_init_no_rng+0x2c>)
    22ac:	4803      	ldrhi	r0, [pc, #12]	; (22bc <nrf_cc310_platform_init_no_rng+0x30>)
    22ae:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    22b2:	bd10      	pop	{r4, pc}
    22b4:	2000069c 	.word	0x2000069c
    22b8:	0000338c 	.word	0x0000338c
    22bc:	ffff8ffe 	.word	0xffff8ffe

000022c0 <nrf_cc310_platform_abort>:
    22c0:	f3bf 8f4f 	dsb	sy
    22c4:	4905      	ldr	r1, [pc, #20]	; (22dc <nrf_cc310_platform_abort+0x1c>)
    22c6:	4b06      	ldr	r3, [pc, #24]	; (22e0 <nrf_cc310_platform_abort+0x20>)
    22c8:	68ca      	ldr	r2, [r1, #12]
    22ca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    22ce:	4313      	orrs	r3, r2
    22d0:	60cb      	str	r3, [r1, #12]
    22d2:	f3bf 8f4f 	dsb	sy
    22d6:	bf00      	nop
    22d8:	e7fd      	b.n	22d6 <nrf_cc310_platform_abort+0x16>
    22da:	bf00      	nop
    22dc:	e000ed00 	.word	0xe000ed00
    22e0:	05fa0004 	.word	0x05fa0004

000022e4 <CC_PalAbort>:
    22e4:	4b01      	ldr	r3, [pc, #4]	; (22ec <CC_PalAbort+0x8>)
    22e6:	685b      	ldr	r3, [r3, #4]
    22e8:	4718      	bx	r3
    22ea:	bf00      	nop
    22ec:	20001434 	.word	0x20001434

000022f0 <nrf_cc310_platform_set_abort>:
    22f0:	e9d0 1200 	ldrd	r1, r2, [r0]
    22f4:	4b01      	ldr	r3, [pc, #4]	; (22fc <nrf_cc310_platform_set_abort+0xc>)
    22f6:	e9c3 1200 	strd	r1, r2, [r3]
    22fa:	4770      	bx	lr
    22fc:	20001434 	.word	0x20001434

00002300 <mutex_free>:
    2300:	4770      	bx	lr
    2302:	bf00      	nop

00002304 <mutex_unlock>:
    2304:	b510      	push	{r4, lr}
    2306:	4604      	mov	r4, r0
    2308:	b120      	cbz	r0, 2314 <mutex_unlock+0x10>
    230a:	f3bf 8f5f 	dmb	sy
    230e:	2000      	movs	r0, #0
    2310:	6020      	str	r0, [r4, #0]
    2312:	bd10      	pop	{r4, pc}
    2314:	4803      	ldr	r0, [pc, #12]	; (2324 <mutex_unlock+0x20>)
    2316:	f7ff ffe5 	bl	22e4 <CC_PalAbort>
    231a:	f3bf 8f5f 	dmb	sy
    231e:	2000      	movs	r0, #0
    2320:	6020      	str	r0, [r4, #0]
    2322:	bd10      	pop	{r4, pc}
    2324:	000033cc 	.word	0x000033cc

00002328 <mutex_init>:
    2328:	b510      	push	{r4, lr}
    232a:	4604      	mov	r4, r0
    232c:	b110      	cbz	r0, 2334 <mutex_init+0xc>
    232e:	2300      	movs	r3, #0
    2330:	6023      	str	r3, [r4, #0]
    2332:	bd10      	pop	{r4, pc}
    2334:	4802      	ldr	r0, [pc, #8]	; (2340 <mutex_init+0x18>)
    2336:	f7ff ffd5 	bl	22e4 <CC_PalAbort>
    233a:	2300      	movs	r3, #0
    233c:	6023      	str	r3, [r4, #0]
    233e:	bd10      	pop	{r4, pc}
    2340:	000033a8 	.word	0x000033a8

00002344 <mutex_lock>:
    2344:	b170      	cbz	r0, 2364 <mutex_lock+0x20>
    2346:	2201      	movs	r2, #1
    2348:	f3bf 8f5b 	dmb	ish
    234c:	e850 3f00 	ldrex	r3, [r0]
    2350:	e840 2100 	strex	r1, r2, [r0]
    2354:	2900      	cmp	r1, #0
    2356:	d1f9      	bne.n	234c <mutex_lock+0x8>
    2358:	f3bf 8f5b 	dmb	ish
    235c:	2b01      	cmp	r3, #1
    235e:	d0f3      	beq.n	2348 <mutex_lock+0x4>
    2360:	f3bf 8f5f 	dmb	sy
    2364:	2000      	movs	r0, #0
    2366:	4770      	bx	lr

00002368 <nrf_cc310_platform_set_mutexes>:
    2368:	b470      	push	{r4, r5, r6}
    236a:	e9d0 6500 	ldrd	r6, r5, [r0]
    236e:	e9d0 4202 	ldrd	r4, r2, [r0, #8]
    2372:	4b09      	ldr	r3, [pc, #36]	; (2398 <nrf_cc310_platform_set_mutexes+0x30>)
    2374:	e9c3 4202 	strd	r4, r2, [r3, #8]
    2378:	e9c3 6500 	strd	r6, r5, [r3]
    237c:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
    2380:	e9d1 6500 	ldrd	r6, r5, [r1]
    2384:	4b05      	ldr	r3, [pc, #20]	; (239c <nrf_cc310_platform_set_mutexes+0x34>)
    2386:	690a      	ldr	r2, [r1, #16]
    2388:	611a      	str	r2, [r3, #16]
    238a:	e9c3 6500 	strd	r6, r5, [r3]
    238e:	e9c3 4002 	strd	r4, r0, [r3, #8]
    2392:	bc70      	pop	{r4, r5, r6}
    2394:	4770      	bx	lr
    2396:	bf00      	nop
    2398:	2000143c 	.word	0x2000143c
    239c:	2000144c 	.word	0x2000144c

000023a0 <CC_LibInitNoRng>:
    23a0:	b510      	push	{r4, lr}
    23a2:	f000 f833 	bl	240c <CC_HalInit>
    23a6:	b970      	cbnz	r0, 23c6 <CC_LibInitNoRng+0x26>
    23a8:	f000 f834 	bl	2414 <CC_PalInit>
    23ac:	b980      	cbnz	r0, 23d0 <CC_LibInitNoRng+0x30>
    23ae:	f000 f8af 	bl	2510 <CC_PalPowerSaveModeSelect>
    23b2:	b980      	cbnz	r0, 23d6 <CC_LibInitNoRng+0x36>
    23b4:	4b11      	ldr	r3, [pc, #68]	; (23fc <CC_LibInitNoRng+0x5c>)
    23b6:	681b      	ldr	r3, [r3, #0]
    23b8:	0e1b      	lsrs	r3, r3, #24
    23ba:	2bf0      	cmp	r3, #240	; 0xf0
    23bc:	d00d      	beq.n	23da <CC_LibInitNoRng+0x3a>
    23be:	2406      	movs	r4, #6
    23c0:	f000 f826 	bl	2410 <CC_HalTerminate>
    23c4:	e000      	b.n	23c8 <CC_LibInitNoRng+0x28>
    23c6:	2403      	movs	r4, #3
    23c8:	f000 f852 	bl	2470 <CC_PalTerminate>
    23cc:	4620      	mov	r0, r4
    23ce:	bd10      	pop	{r4, pc}
    23d0:	2404      	movs	r4, #4
    23d2:	4620      	mov	r0, r4
    23d4:	bd10      	pop	{r4, pc}
    23d6:	2400      	movs	r4, #0
    23d8:	e7f2      	b.n	23c0 <CC_LibInitNoRng+0x20>
    23da:	4a09      	ldr	r2, [pc, #36]	; (2400 <CC_LibInitNoRng+0x60>)
    23dc:	4b09      	ldr	r3, [pc, #36]	; (2404 <CC_LibInitNoRng+0x64>)
    23de:	6812      	ldr	r2, [r2, #0]
    23e0:	429a      	cmp	r2, r3
    23e2:	d001      	beq.n	23e8 <CC_LibInitNoRng+0x48>
    23e4:	2407      	movs	r4, #7
    23e6:	e7eb      	b.n	23c0 <CC_LibInitNoRng+0x20>
    23e8:	2001      	movs	r0, #1
    23ea:	f000 f891 	bl	2510 <CC_PalPowerSaveModeSelect>
    23ee:	2800      	cmp	r0, #0
    23f0:	d1f1      	bne.n	23d6 <CC_LibInitNoRng+0x36>
    23f2:	4b05      	ldr	r3, [pc, #20]	; (2408 <CC_LibInitNoRng+0x68>)
    23f4:	4604      	mov	r4, r0
    23f6:	6018      	str	r0, [r3, #0]
    23f8:	e7e8      	b.n	23cc <CC_LibInitNoRng+0x2c>
    23fa:	bf00      	nop
    23fc:	5002b928 	.word	0x5002b928
    2400:	5002ba24 	.word	0x5002ba24
    2404:	20e00000 	.word	0x20e00000
    2408:	5002ba0c 	.word	0x5002ba0c

0000240c <CC_HalInit>:
    240c:	2000      	movs	r0, #0
    240e:	4770      	bx	lr

00002410 <CC_HalTerminate>:
    2410:	2000      	movs	r0, #0
    2412:	4770      	bx	lr

00002414 <CC_PalInit>:
    2414:	b510      	push	{r4, lr}
    2416:	4811      	ldr	r0, [pc, #68]	; (245c <CC_PalInit+0x48>)
    2418:	f000 f848 	bl	24ac <CC_PalMutexCreate>
    241c:	b100      	cbz	r0, 2420 <CC_PalInit+0xc>
    241e:	bd10      	pop	{r4, pc}
    2420:	480f      	ldr	r0, [pc, #60]	; (2460 <CC_PalInit+0x4c>)
    2422:	f000 f843 	bl	24ac <CC_PalMutexCreate>
    2426:	2800      	cmp	r0, #0
    2428:	d1f9      	bne.n	241e <CC_PalInit+0xa>
    242a:	4c0e      	ldr	r4, [pc, #56]	; (2464 <CC_PalInit+0x50>)
    242c:	4620      	mov	r0, r4
    242e:	f000 f83d 	bl	24ac <CC_PalMutexCreate>
    2432:	2800      	cmp	r0, #0
    2434:	d1f3      	bne.n	241e <CC_PalInit+0xa>
    2436:	4b0c      	ldr	r3, [pc, #48]	; (2468 <CC_PalInit+0x54>)
    2438:	480c      	ldr	r0, [pc, #48]	; (246c <CC_PalInit+0x58>)
    243a:	601c      	str	r4, [r3, #0]
    243c:	f000 f836 	bl	24ac <CC_PalMutexCreate>
    2440:	4601      	mov	r1, r0
    2442:	2800      	cmp	r0, #0
    2444:	d1eb      	bne.n	241e <CC_PalInit+0xa>
    2446:	f000 f82d 	bl	24a4 <CC_PalDmaInit>
    244a:	4604      	mov	r4, r0
    244c:	b108      	cbz	r0, 2452 <CC_PalInit+0x3e>
    244e:	4620      	mov	r0, r4
    2450:	bd10      	pop	{r4, pc}
    2452:	f000 f83f 	bl	24d4 <CC_PalPowerSaveModeInit>
    2456:	4620      	mov	r0, r4
    2458:	e7fa      	b.n	2450 <CC_PalInit+0x3c>
    245a:	bf00      	nop
    245c:	2000146c 	.word	0x2000146c
    2460:	20001460 	.word	0x20001460
    2464:	20001468 	.word	0x20001468
    2468:	20001470 	.word	0x20001470
    246c:	20001464 	.word	0x20001464

00002470 <CC_PalTerminate>:
    2470:	b508      	push	{r3, lr}
    2472:	4808      	ldr	r0, [pc, #32]	; (2494 <CC_PalTerminate+0x24>)
    2474:	f000 f824 	bl	24c0 <CC_PalMutexDestroy>
    2478:	4807      	ldr	r0, [pc, #28]	; (2498 <CC_PalTerminate+0x28>)
    247a:	f000 f821 	bl	24c0 <CC_PalMutexDestroy>
    247e:	4807      	ldr	r0, [pc, #28]	; (249c <CC_PalTerminate+0x2c>)
    2480:	f000 f81e 	bl	24c0 <CC_PalMutexDestroy>
    2484:	4806      	ldr	r0, [pc, #24]	; (24a0 <CC_PalTerminate+0x30>)
    2486:	f000 f81b 	bl	24c0 <CC_PalMutexDestroy>
    248a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    248e:	f000 b80b 	b.w	24a8 <CC_PalDmaTerminate>
    2492:	bf00      	nop
    2494:	2000146c 	.word	0x2000146c
    2498:	20001460 	.word	0x20001460
    249c:	20001468 	.word	0x20001468
    24a0:	20001464 	.word	0x20001464

000024a4 <CC_PalDmaInit>:
    24a4:	2000      	movs	r0, #0
    24a6:	4770      	bx	lr

000024a8 <CC_PalDmaTerminate>:
    24a8:	4770      	bx	lr
    24aa:	bf00      	nop

000024ac <CC_PalMutexCreate>:
    24ac:	b508      	push	{r3, lr}
    24ae:	4b03      	ldr	r3, [pc, #12]	; (24bc <CC_PalMutexCreate+0x10>)
    24b0:	6802      	ldr	r2, [r0, #0]
    24b2:	681b      	ldr	r3, [r3, #0]
    24b4:	6810      	ldr	r0, [r2, #0]
    24b6:	4798      	blx	r3
    24b8:	2000      	movs	r0, #0
    24ba:	bd08      	pop	{r3, pc}
    24bc:	2000143c 	.word	0x2000143c

000024c0 <CC_PalMutexDestroy>:
    24c0:	b508      	push	{r3, lr}
    24c2:	4b03      	ldr	r3, [pc, #12]	; (24d0 <CC_PalMutexDestroy+0x10>)
    24c4:	6802      	ldr	r2, [r0, #0]
    24c6:	685b      	ldr	r3, [r3, #4]
    24c8:	6810      	ldr	r0, [r2, #0]
    24ca:	4798      	blx	r3
    24cc:	2000      	movs	r0, #0
    24ce:	bd08      	pop	{r3, pc}
    24d0:	2000143c 	.word	0x2000143c

000024d4 <CC_PalPowerSaveModeInit>:
    24d4:	b570      	push	{r4, r5, r6, lr}
    24d6:	4c09      	ldr	r4, [pc, #36]	; (24fc <CC_PalPowerSaveModeInit+0x28>)
    24d8:	4d09      	ldr	r5, [pc, #36]	; (2500 <CC_PalPowerSaveModeInit+0x2c>)
    24da:	6920      	ldr	r0, [r4, #16]
    24dc:	68ab      	ldr	r3, [r5, #8]
    24de:	4798      	blx	r3
    24e0:	b118      	cbz	r0, 24ea <CC_PalPowerSaveModeInit+0x16>
    24e2:	4b08      	ldr	r3, [pc, #32]	; (2504 <CC_PalPowerSaveModeInit+0x30>)
    24e4:	4808      	ldr	r0, [pc, #32]	; (2508 <CC_PalPowerSaveModeInit+0x34>)
    24e6:	685b      	ldr	r3, [r3, #4]
    24e8:	4798      	blx	r3
    24ea:	4a08      	ldr	r2, [pc, #32]	; (250c <CC_PalPowerSaveModeInit+0x38>)
    24ec:	68eb      	ldr	r3, [r5, #12]
    24ee:	6920      	ldr	r0, [r4, #16]
    24f0:	2100      	movs	r1, #0
    24f2:	6011      	str	r1, [r2, #0]
    24f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    24f8:	4718      	bx	r3
    24fa:	bf00      	nop
    24fc:	2000144c 	.word	0x2000144c
    2500:	2000143c 	.word	0x2000143c
    2504:	20001434 	.word	0x20001434
    2508:	000033ec 	.word	0x000033ec
    250c:	200006b0 	.word	0x200006b0

00002510 <CC_PalPowerSaveModeSelect>:
    2510:	b570      	push	{r4, r5, r6, lr}
    2512:	4c14      	ldr	r4, [pc, #80]	; (2564 <CC_PalPowerSaveModeSelect+0x54>)
    2514:	4d14      	ldr	r5, [pc, #80]	; (2568 <CC_PalPowerSaveModeSelect+0x58>)
    2516:	4606      	mov	r6, r0
    2518:	68ab      	ldr	r3, [r5, #8]
    251a:	6920      	ldr	r0, [r4, #16]
    251c:	4798      	blx	r3
    251e:	b9f0      	cbnz	r0, 255e <CC_PalPowerSaveModeSelect+0x4e>
    2520:	4a12      	ldr	r2, [pc, #72]	; (256c <CC_PalPowerSaveModeSelect+0x5c>)
    2522:	6813      	ldr	r3, [r2, #0]
    2524:	b95e      	cbnz	r6, 253e <CC_PalPowerSaveModeSelect+0x2e>
    2526:	b91b      	cbnz	r3, 2530 <CC_PalPowerSaveModeSelect+0x20>
    2528:	4911      	ldr	r1, [pc, #68]	; (2570 <CC_PalPowerSaveModeSelect+0x60>)
    252a:	2001      	movs	r0, #1
    252c:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
    2530:	3301      	adds	r3, #1
    2532:	6013      	str	r3, [r2, #0]
    2534:	68eb      	ldr	r3, [r5, #12]
    2536:	6920      	ldr	r0, [r4, #16]
    2538:	4798      	blx	r3
    253a:	2000      	movs	r0, #0
    253c:	bd70      	pop	{r4, r5, r6, pc}
    253e:	2b00      	cmp	r3, #0
    2540:	d0f8      	beq.n	2534 <CC_PalPowerSaveModeSelect+0x24>
    2542:	2b01      	cmp	r3, #1
    2544:	bf08      	it	eq
    2546:	490a      	ldreq	r1, [pc, #40]	; (2570 <CC_PalPowerSaveModeSelect+0x60>)
    2548:	f103 33ff 	add.w	r3, r3, #4294967295
    254c:	bf08      	it	eq
    254e:	f8c1 0500 	streq.w	r0, [r1, #1280]	; 0x500
    2552:	6920      	ldr	r0, [r4, #16]
    2554:	6013      	str	r3, [r2, #0]
    2556:	68eb      	ldr	r3, [r5, #12]
    2558:	4798      	blx	r3
    255a:	2000      	movs	r0, #0
    255c:	e7ee      	b.n	253c <CC_PalPowerSaveModeSelect+0x2c>
    255e:	4805      	ldr	r0, [pc, #20]	; (2574 <CC_PalPowerSaveModeSelect+0x64>)
    2560:	bd70      	pop	{r4, r5, r6, pc}
    2562:	bf00      	nop
    2564:	2000144c 	.word	0x2000144c
    2568:	2000143c 	.word	0x2000143c
    256c:	200006b0 	.word	0x200006b0
    2570:	5002a000 	.word	0x5002a000
    2574:	ffff8fe9 	.word	0xffff8fe9

00002578 <z_sys_mem_pool_base_init>:

	return (*word >> (4*(bit / 4))) & 0xf;
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
    2578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    257c:	6845      	ldr	r5, [r0, #4]
    257e:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    2580:	6804      	ldr	r4, [r0, #0]

	p->max_inline_level = -1;
    2582:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2584:	fb05 fc07 	mul.w	ip, r5, r7
	p->max_inline_level = -1;
    2588:	72c3      	strb	r3, [r0, #11]

	for (i = 0; i < p->n_levels; i++) {
    258a:	7a83      	ldrb	r3, [r0, #10]
    258c:	9301      	str	r3, [sp, #4]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    258e:	4464      	add	r4, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2590:	4629      	mov	r1, r5
	for (i = 0; i < p->n_levels; i++) {
    2592:	2200      	movs	r2, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    2594:	f04f 0a0c 	mov.w	sl, #12

		if (nblocks <= sizeof(p->levels[i].bits)*8) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
    2598:	f04f 0b20 	mov.w	fp, #32
	for (i = 0; i < p->n_levels; i++) {
    259c:	9b01      	ldr	r3, [sp, #4]
    259e:	4293      	cmp	r3, r2
    25a0:	dc08      	bgt.n	25b4 <z_sys_mem_pool_base_init+0x3c>
    25a2:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    25a4:	4619      	mov	r1, r3
    25a6:	428f      	cmp	r7, r1
    25a8:	eb05 0c03 	add.w	ip, r5, r3
    25ac:	dc20      	bgt.n	25f0 <z_sys_mem_pool_base_init+0x78>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
    25ae:	b003      	add	sp, #12
    25b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
    25b4:	f8d0 800c 	ldr.w	r8, [r0, #12]
		int nblocks = buflen / sz;
    25b8:	fbbc f3f1 	udiv	r3, ip, r1
		sys_dlist_init(&p->levels[i].free_list);
    25bc:	fb0a fe02 	mul.w	lr, sl, r2
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    25c0:	2b20      	cmp	r3, #32
		sys_dlist_init(&p->levels[i].free_list);
    25c2:	eb08 060e 	add.w	r6, r8, lr
			bits += (nblocks + 31)/32;
    25c6:	bf88      	it	hi
    25c8:	331f      	addhi	r3, #31
		sys_dlist_init(&p->levels[i].free_list);
    25ca:	f106 0904 	add.w	r9, r6, #4
		sz = WB_DN(sz / 4);
    25ce:	ea4f 0191 	mov.w	r1, r1, lsr #2
    25d2:	e9c6 9901 	strd	r9, r9, [r6, #4]
			bits += (nblocks + 31)/32;
    25d6:	bf8a      	itet	hi
    25d8:	fb93 f3fb 	sdivhi	r3, r3, fp
			p->max_inline_level = i;
    25dc:	72c2      	strbls	r2, [r0, #11]
			p->levels[i].bits_p = bits;
    25de:	f848 400e 	strhi.w	r4, [r8, lr]
		sz = WB_DN(sz / 4);
    25e2:	f021 0103 	bic.w	r1, r1, #3
			bits += (nblocks + 31)/32;
    25e6:	bf88      	it	hi
    25e8:	eb04 0483 	addhi.w	r4, r4, r3, lsl #2
	for (i = 0; i < p->n_levels; i++) {
    25ec:	3201      	adds	r2, #1
    25ee:	e7d5      	b.n	259c <z_sys_mem_pool_base_init+0x24>
		sys_dlist_append(&p->levels[0].free_list, block);
    25f0:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
    25f2:	6806      	ldr	r6, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    25f4:	f102 0e04 	add.w	lr, r2, #4
	return (u8_t *)p->buf + lsz * block;
    25f8:	18f4      	adds	r4, r6, r3
	node->next = list;
    25fa:	f846 e003 	str.w	lr, [r6, r3]
	node->prev = list->tail;
    25fe:	6893      	ldr	r3, [r2, #8]
    2600:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    2602:	6893      	ldr	r3, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
    2604:	3101      	adds	r1, #1
    2606:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2608:	6094      	str	r4, [r2, #8]
    260a:	4663      	mov	r3, ip
    260c:	e7cb      	b.n	25a6 <z_sys_mem_pool_base_init+0x2e>

0000260e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    260e:	4604      	mov	r4, r0
    2610:	b508      	push	{r3, lr}
    2612:	4608      	mov	r0, r1
    2614:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    2616:	461a      	mov	r2, r3
    2618:	47a0      	blx	r4
	return z_impl_k_current_get();
    261a:	f7ff fcaf 	bl	1f7c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    261e:	f7fe fb63 	bl	ce8 <z_impl_k_thread_abort>

00002622 <z_arch_printk_char_out>:
}
    2622:	2000      	movs	r0, #0
    2624:	4770      	bx	lr

00002626 <print_err>:
{
    2626:	b570      	push	{r4, r5, r6, lr}
    2628:	4604      	mov	r4, r0
    262a:	460d      	mov	r5, r1
	out('E', ctx);
    262c:	2045      	movs	r0, #69	; 0x45
    262e:	47a0      	blx	r4
	out('R', ctx);
    2630:	4629      	mov	r1, r5
    2632:	2052      	movs	r0, #82	; 0x52
    2634:	47a0      	blx	r4
	out('R', ctx);
    2636:	4629      	mov	r1, r5
    2638:	4623      	mov	r3, r4
    263a:	2052      	movs	r0, #82	; 0x52
}
    263c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    2640:	4718      	bx	r3

00002642 <z_vprintk>:
{
    2642:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    2646:	2700      	movs	r7, #0
{
    2648:	b089      	sub	sp, #36	; 0x24
    264a:	4605      	mov	r5, r0
    264c:	460e      	mov	r6, r1
    264e:	4692      	mov	sl, r2
    2650:	461c      	mov	r4, r3
	int min_width = -1;
    2652:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
    2656:	46b8      	mov	r8, r7
	int might_format = 0; /* 1 if encountered a '%' */
    2658:	46bb      	mov	fp, r7
	while (*fmt) {
    265a:	f89a 0000 	ldrb.w	r0, [sl]
    265e:	b910      	cbnz	r0, 2666 <z_vprintk+0x24>
}
    2660:	b009      	add	sp, #36	; 0x24
    2662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    2666:	f1bb 0f00 	cmp.w	fp, #0
    266a:	d107      	bne.n	267c <z_vprintk+0x3a>
			if (*fmt != '%') {
    266c:	2825      	cmp	r0, #37	; 0x25
    266e:	f000 814e 	beq.w	290e <z_vprintk+0x2cc>
				out((int)*fmt, ctx);
    2672:	4631      	mov	r1, r6
    2674:	47a8      	blx	r5
		++fmt;
    2676:	f10a 0a01 	add.w	sl, sl, #1
    267a:	e7ee      	b.n	265a <z_vprintk+0x18>
			switch (*fmt) {
    267c:	2864      	cmp	r0, #100	; 0x64
    267e:	d068      	beq.n	2752 <z_vprintk+0x110>
    2680:	d81a      	bhi.n	26b8 <z_vprintk+0x76>
    2682:	2839      	cmp	r0, #57	; 0x39
    2684:	d80b      	bhi.n	269e <z_vprintk+0x5c>
    2686:	2831      	cmp	r0, #49	; 0x31
    2688:	d25a      	bcs.n	2740 <z_vprintk+0xfe>
    268a:	282d      	cmp	r0, #45	; 0x2d
    268c:	f000 8146 	beq.w	291c <z_vprintk+0x2da>
    2690:	2830      	cmp	r0, #48	; 0x30
    2692:	d046      	beq.n	2722 <z_vprintk+0xe0>
    2694:	2825      	cmp	r0, #37	; 0x25
    2696:	d108      	bne.n	26aa <z_vprintk+0x68>
				out((int)'%', ctx);
    2698:	4631      	mov	r1, r6
				out((int)*fmt, ctx);
    269a:	47a8      	blx	r5
    269c:	e07a      	b.n	2794 <z_vprintk+0x152>
			switch (*fmt) {
    269e:	2858      	cmp	r0, #88	; 0x58
    26a0:	f000 80b4 	beq.w	280c <z_vprintk+0x1ca>
    26a4:	2863      	cmp	r0, #99	; 0x63
    26a6:	f000 812c 	beq.w	2902 <z_vprintk+0x2c0>
				out((int)'%', ctx);
    26aa:	4631      	mov	r1, r6
    26ac:	2025      	movs	r0, #37	; 0x25
    26ae:	47a8      	blx	r5
				out((int)*fmt, ctx);
    26b0:	4631      	mov	r1, r6
    26b2:	f89a 0000 	ldrb.w	r0, [sl]
    26b6:	e7f0      	b.n	269a <z_vprintk+0x58>
			switch (*fmt) {
    26b8:	2870      	cmp	r0, #112	; 0x70
    26ba:	f000 809d 	beq.w	27f8 <z_vprintk+0x1b6>
    26be:	d80d      	bhi.n	26dc <z_vprintk+0x9a>
    26c0:	2869      	cmp	r0, #105	; 0x69
    26c2:	d046      	beq.n	2752 <z_vprintk+0x110>
    26c4:	286c      	cmp	r0, #108	; 0x6c
    26c6:	d103      	bne.n	26d0 <z_vprintk+0x8e>
				} else if (*fmt == 'l' && length_mod == 'l') {
    26c8:	2f6c      	cmp	r7, #108	; 0x6c
    26ca:	d126      	bne.n	271a <z_vprintk+0xd8>
					length_mod = 'L';
    26cc:	274c      	movs	r7, #76	; 0x4c
    26ce:	e7d2      	b.n	2676 <z_vprintk+0x34>
			switch (*fmt) {
    26d0:	2868      	cmp	r0, #104	; 0x68
    26d2:	d1ea      	bne.n	26aa <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
    26d4:	2f68      	cmp	r7, #104	; 0x68
    26d6:	d120      	bne.n	271a <z_vprintk+0xd8>
					length_mod = 'H';
    26d8:	2748      	movs	r7, #72	; 0x48
    26da:	e7cc      	b.n	2676 <z_vprintk+0x34>
			switch (*fmt) {
    26dc:	2875      	cmp	r0, #117	; 0x75
    26de:	d070      	beq.n	27c2 <z_vprintk+0x180>
    26e0:	d817      	bhi.n	2712 <z_vprintk+0xd0>
    26e2:	2873      	cmp	r0, #115	; 0x73
    26e4:	d1e1      	bne.n	26aa <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    26e6:	6822      	ldr	r2, [r4, #0]
    26e8:	f104 0b04 	add.w	fp, r4, #4
    26ec:	4611      	mov	r1, r2
				while (*s) {
    26ee:	460c      	mov	r4, r1
    26f0:	f814 0b01 	ldrb.w	r0, [r4], #1
    26f4:	2800      	cmp	r0, #0
    26f6:	f040 80f9 	bne.w	28ec <z_vprintk+0x2aa>
				if (padding == PAD_SPACE_AFTER) {
    26fa:	f1b8 0f03 	cmp.w	r8, #3
    26fe:	f040 8113 	bne.w	2928 <z_vprintk+0x2e6>
					int remaining = min_width - (s - start);
    2702:	1a8c      	subs	r4, r1, r2
    2704:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    2708:	2c00      	cmp	r4, #0
    270a:	f300 80f5 	bgt.w	28f8 <z_vprintk+0x2b6>
				int c = va_arg(ap, int);
    270e:	465c      	mov	r4, fp
    2710:	e040      	b.n	2794 <z_vprintk+0x152>
			switch (*fmt) {
    2712:	2878      	cmp	r0, #120	; 0x78
    2714:	d07a      	beq.n	280c <z_vprintk+0x1ca>
    2716:	287a      	cmp	r0, #122	; 0x7a
    2718:	d1c7      	bne.n	26aa <z_vprintk+0x68>
				} else if (length_mod == 0) {
    271a:	2f00      	cmp	r7, #0
    271c:	d1c5      	bne.n	26aa <z_vprintk+0x68>
    271e:	4607      	mov	r7, r0
    2720:	e7a9      	b.n	2676 <z_vprintk+0x34>
				if (min_width < 0 && padding == PAD_NONE) {
    2722:	f1b9 0f00 	cmp.w	r9, #0
    2726:	da0e      	bge.n	2746 <z_vprintk+0x104>
    2728:	f1b8 0f00 	cmp.w	r8, #0
    272c:	f000 80f9 	beq.w	2922 <z_vprintk+0x2e0>
					min_width = *fmt - '0';
    2730:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    2734:	f1b8 0f00 	cmp.w	r8, #0
    2738:	bf08      	it	eq
    273a:	f04f 0802 	moveq.w	r8, #2
    273e:	e79a      	b.n	2676 <z_vprintk+0x34>
				if (min_width < 0) {
    2740:	f1b9 0f00 	cmp.w	r9, #0
    2744:	dbf4      	blt.n	2730 <z_vprintk+0xee>
					min_width = 10 * min_width + *fmt - '0';
    2746:	220a      	movs	r2, #10
    2748:	fb02 0909 	mla	r9, r2, r9, r0
    274c:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    2750:	e7f0      	b.n	2734 <z_vprintk+0xf2>
				if (length_mod == 'z') {
    2752:	2f7a      	cmp	r7, #122	; 0x7a
    2754:	d103      	bne.n	275e <z_vprintk+0x11c>
					d = va_arg(ap, int);
    2756:	f8d4 b000 	ldr.w	fp, [r4]
    275a:	3404      	adds	r4, #4
    275c:	e01e      	b.n	279c <z_vprintk+0x15a>
				} else if (length_mod == 'l') {
    275e:	2f6c      	cmp	r7, #108	; 0x6c
    2760:	d0f9      	beq.n	2756 <z_vprintk+0x114>
				} else if (length_mod == 'L') {
    2762:	2f4c      	cmp	r7, #76	; 0x4c
    2764:	d1f7      	bne.n	2756 <z_vprintk+0x114>
					long long lld = va_arg(ap, long long);
    2766:	3407      	adds	r4, #7
    2768:	f024 0307 	bic.w	r3, r4, #7
    276c:	f103 0408 	add.w	r4, r3, #8
    2770:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > __LONG_MAX__ ||
    2774:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
    2778:	f143 0100 	adc.w	r1, r3, #0
    277c:	f04f 0c00 	mov.w	ip, #0
    2780:	f04f 3bff 	mov.w	fp, #4294967295
    2784:	458c      	cmp	ip, r1
    2786:	bf08      	it	eq
    2788:	4583      	cmpeq	fp, r0
    278a:	d206      	bcs.n	279a <z_vprintk+0x158>
						print_err(out, ctx);
    278c:	4631      	mov	r1, r6
    278e:	4628      	mov	r0, r5
    2790:	f7ff ff49 	bl	2626 <print_err>
			might_format = 0;
    2794:	f04f 0b00 	mov.w	fp, #0
				break;
    2798:	e76d      	b.n	2676 <z_vprintk+0x34>
					d = lld;
    279a:	4693      	mov	fp, r2
				if (d < 0) {
    279c:	f1bb 0f00 	cmp.w	fp, #0
    27a0:	da06      	bge.n	27b0 <z_vprintk+0x16e>
					out((int)'-', ctx);
    27a2:	4631      	mov	r1, r6
    27a4:	202d      	movs	r0, #45	; 0x2d
    27a6:	47a8      	blx	r5
					d = -d;
    27a8:	f1cb 0b00 	rsb	fp, fp, #0
					min_width--;
    27ac:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
    27b0:	f8cd 9000 	str.w	r9, [sp]
    27b4:	4643      	mov	r3, r8
    27b6:	465a      	mov	r2, fp
				_printk_dec_ulong(out, ctx, u, padding,
    27b8:	4631      	mov	r1, r6
    27ba:	4628      	mov	r0, r5
    27bc:	f7fd fe68 	bl	490 <_printk_dec_ulong>
    27c0:	e7e8      	b.n	2794 <z_vprintk+0x152>
				if (length_mod == 'z') {
    27c2:	2f7a      	cmp	r7, #122	; 0x7a
    27c4:	d102      	bne.n	27cc <z_vprintk+0x18a>
					u = va_arg(ap, unsigned int);
    27c6:	6822      	ldr	r2, [r4, #0]
    27c8:	3404      	adds	r4, #4
    27ca:	e011      	b.n	27f0 <z_vprintk+0x1ae>
				} else if (length_mod == 'l') {
    27cc:	2f6c      	cmp	r7, #108	; 0x6c
    27ce:	d0fa      	beq.n	27c6 <z_vprintk+0x184>
				} else if (length_mod == 'L') {
    27d0:	2f4c      	cmp	r7, #76	; 0x4c
    27d2:	d1f8      	bne.n	27c6 <z_vprintk+0x184>
					unsigned long long llu =
    27d4:	3407      	adds	r4, #7
    27d6:	f024 0307 	bic.w	r3, r4, #7
    27da:	f103 0408 	add.w	r4, r3, #8
    27de:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > ~0UL) {
    27e2:	2100      	movs	r1, #0
    27e4:	f04f 30ff 	mov.w	r0, #4294967295
    27e8:	4299      	cmp	r1, r3
    27ea:	bf08      	it	eq
    27ec:	4290      	cmpeq	r0, r2
    27ee:	d3cd      	bcc.n	278c <z_vprintk+0x14a>
				_printk_dec_ulong(out, ctx, u, padding,
    27f0:	f8cd 9000 	str.w	r9, [sp]
    27f4:	4643      	mov	r3, r8
    27f6:	e7df      	b.n	27b8 <z_vprintk+0x176>
				  out('0', ctx);
    27f8:	4631      	mov	r1, r6
    27fa:	2030      	movs	r0, #48	; 0x30
    27fc:	47a8      	blx	r5
				  out('x', ctx);
    27fe:	4631      	mov	r1, r6
    2800:	2078      	movs	r0, #120	; 0x78
    2802:	47a8      	blx	r5
				  min_width = 8;
    2804:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    2808:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
    280c:	f89a 2000 	ldrb.w	r2, [sl]
    2810:	2a70      	cmp	r2, #112	; 0x70
    2812:	d105      	bne.n	2820 <z_vprintk+0x1de>
					x = va_arg(ap, unsigned int);
    2814:	6823      	ldr	r3, [r4, #0]
    2816:	9304      	str	r3, [sp, #16]
    2818:	2300      	movs	r3, #0
    281a:	9302      	str	r3, [sp, #8]
    281c:	3404      	adds	r4, #4
    281e:	e00c      	b.n	283a <z_vprintk+0x1f8>
				} else if (length_mod == 'l') {
    2820:	2f6c      	cmp	r7, #108	; 0x6c
    2822:	d0f7      	beq.n	2814 <z_vprintk+0x1d2>
				} else if (length_mod == 'L') {
    2824:	2f4c      	cmp	r7, #76	; 0x4c
    2826:	d1f5      	bne.n	2814 <z_vprintk+0x1d2>
					x = va_arg(ap, unsigned long long);
    2828:	3407      	adds	r4, #7
    282a:	f024 0207 	bic.w	r2, r4, #7
    282e:	f102 0408 	add.w	r4, r2, #8
    2832:	6813      	ldr	r3, [r2, #0]
    2834:	9304      	str	r3, [sp, #16]
    2836:	6853      	ldr	r3, [r2, #4]
    2838:	9302      	str	r3, [sp, #8]
	int digits = 0;
    283a:	2200      	movs	r2, #0
    283c:	9203      	str	r2, [sp, #12]
	int found_largest_digit = 0;
    283e:	9205      	str	r2, [sp, #20]
	int remaining = 16; /* 16 digits max */
    2840:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
    2842:	2240      	movs	r2, #64	; 0x40
		shift -= 4;
    2844:	3a04      	subs	r2, #4
		nibble = (num >> shift) & 0xf;
    2846:	9902      	ldr	r1, [sp, #8]
    2848:	9804      	ldr	r0, [sp, #16]
    284a:	f1c2 0c20 	rsb	ip, r2, #32
    284e:	f1a2 0e20 	sub.w	lr, r2, #32
    2852:	40d0      	lsrs	r0, r2
    2854:	fa01 fc0c 	lsl.w	ip, r1, ip
    2858:	ea40 000c 	orr.w	r0, r0, ip
    285c:	fa21 fe0e 	lsr.w	lr, r1, lr
    2860:	ea40 000e 	orr.w	r0, r0, lr
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    2864:	f010 000f 	ands.w	r0, r0, #15
    2868:	d108      	bne.n	287c <z_vprintk+0x23a>
    286a:	9905      	ldr	r1, [sp, #20]
    286c:	b901      	cbnz	r1, 2870 <z_vprintk+0x22e>
    286e:	bb42      	cbnz	r2, 28c2 <z_vprintk+0x280>
			nibble += nibble > 9 ? 87 : 48;
    2870:	f04f 0c30 	mov.w	ip, #48	; 0x30
    2874:	e008      	b.n	2888 <z_vprintk+0x246>
			found_largest_digit = 1;
    2876:	f8cd b014 	str.w	fp, [sp, #20]
    287a:	e7e3      	b.n	2844 <z_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
    287c:	2809      	cmp	r0, #9
    287e:	bf8c      	ite	hi
    2880:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    2884:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
    2888:	4631      	mov	r1, r6
    288a:	4460      	add	r0, ip
    288c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    2890:	47a8      	blx	r5
			digits++;
    2892:	9b03      	ldr	r3, [sp, #12]
    2894:	3301      	adds	r3, #1
    2896:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
    2898:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    289c:	2a00      	cmp	r2, #0
    289e:	d1ea      	bne.n	2876 <z_vprintk+0x234>
	if (padding == PAD_SPACE_AFTER) {
    28a0:	f1b8 0f03 	cmp.w	r8, #3
    28a4:	f47f af76 	bne.w	2794 <z_vprintk+0x152>
		remaining = min_width * 2 - digits;
    28a8:	9b03      	ldr	r3, [sp, #12]
    28aa:	ebc3 0b49 	rsb	fp, r3, r9, lsl #1
		while (remaining-- > 0) {
    28ae:	f1bb 0f00 	cmp.w	fp, #0
    28b2:	f77f af6f 	ble.w	2794 <z_vprintk+0x152>
			out(' ', ctx);
    28b6:	4631      	mov	r1, r6
    28b8:	2020      	movs	r0, #32
    28ba:	47a8      	blx	r5
    28bc:	f10b 3bff 	add.w	fp, fp, #4294967295
    28c0:	e7f5      	b.n	28ae <z_vprintk+0x26c>
		if (remaining-- <= min_width) {
    28c2:	1e59      	subs	r1, r3, #1
    28c4:	4599      	cmp	r9, r3
    28c6:	9106      	str	r1, [sp, #24]
    28c8:	db07      	blt.n	28da <z_vprintk+0x298>
			if (padding == PAD_ZERO_BEFORE) {
    28ca:	f1b8 0f01 	cmp.w	r8, #1
    28ce:	d106      	bne.n	28de <z_vprintk+0x29c>
    28d0:	9207      	str	r2, [sp, #28]
				out('0', ctx);
    28d2:	4631      	mov	r1, r6
    28d4:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    28d6:	47a8      	blx	r5
    28d8:	9a07      	ldr	r2, [sp, #28]
					x = va_arg(ap, unsigned int);
    28da:	9b06      	ldr	r3, [sp, #24]
    28dc:	e7b2      	b.n	2844 <z_vprintk+0x202>
			} else if (padding == PAD_SPACE_BEFORE) {
    28de:	f1b8 0f02 	cmp.w	r8, #2
    28e2:	d1fa      	bne.n	28da <z_vprintk+0x298>
    28e4:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
    28e6:	4631      	mov	r1, r6
    28e8:	2020      	movs	r0, #32
    28ea:	e7f4      	b.n	28d6 <z_vprintk+0x294>
					out((int)(*s++), ctx);
    28ec:	4631      	mov	r1, r6
    28ee:	9202      	str	r2, [sp, #8]
    28f0:	47a8      	blx	r5
    28f2:	4621      	mov	r1, r4
    28f4:	9a02      	ldr	r2, [sp, #8]
    28f6:	e6fa      	b.n	26ee <z_vprintk+0xac>
						out(' ', ctx);
    28f8:	4631      	mov	r1, r6
    28fa:	2020      	movs	r0, #32
    28fc:	47a8      	blx	r5
    28fe:	3c01      	subs	r4, #1
    2900:	e702      	b.n	2708 <z_vprintk+0xc6>
				out(c, ctx);
    2902:	4631      	mov	r1, r6
    2904:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    2906:	f104 0b04 	add.w	fp, r4, #4
				out(c, ctx);
    290a:	47a8      	blx	r5
    290c:	e6ff      	b.n	270e <z_vprintk+0xcc>
				length_mod = 0;
    290e:	465f      	mov	r7, fp
				padding = PAD_NONE;
    2910:	46d8      	mov	r8, fp
				min_width = -1;
    2912:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
    2916:	f04f 0b01 	mov.w	fp, #1
    291a:	e6ac      	b.n	2676 <z_vprintk+0x34>
				padding = PAD_SPACE_AFTER;
    291c:	f04f 0803 	mov.w	r8, #3
    2920:	e6a9      	b.n	2676 <z_vprintk+0x34>
					padding = PAD_ZERO_BEFORE;
    2922:	f04f 0801 	mov.w	r8, #1
    2926:	e6a6      	b.n	2676 <z_vprintk+0x34>
				char *s = va_arg(ap, char *);
    2928:	465c      	mov	r4, fp
			might_format = 0;
    292a:	4683      	mov	fp, r0
    292c:	e6a3      	b.n	2676 <z_vprintk+0x34>

0000292e <printk>:
{
    292e:	b40f      	push	{r0, r1, r2, r3}
    2930:	b507      	push	{r0, r1, r2, lr}
    2932:	a904      	add	r1, sp, #16
    2934:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    2938:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    293a:	f7fd fdfb 	bl	534 <vprintk>
}
    293e:	b003      	add	sp, #12
    2940:	f85d eb04 	ldr.w	lr, [sp], #4
    2944:	b004      	add	sp, #16
    2946:	4770      	bx	lr

00002948 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    2948:	4770      	bx	lr

0000294a <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
    294a:	f7fe bdcf 	b.w	14ec <SystemInit>

0000294e <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
    294e:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
    2950:	7a5a      	ldrb	r2, [r3, #9]
    2952:	b932      	cbnz	r2, 2962 <get_status+0x14>
	if (data->ref > 0) {
    2954:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
    2958:	2800      	cmp	r0, #0
    295a:	bfcc      	ite	gt
    295c:	2000      	movgt	r0, #0
    295e:	2001      	movle	r0, #1
    2960:	4770      	bx	lr
    2962:	2002      	movs	r0, #2
}
    2964:	4770      	bx	lr

00002966 <clock_stop>:
	const struct nrf_clock_control_config *config =
    2966:	6802      	ldr	r2, [r0, #0]
{
    2968:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
    296a:	6895      	ldr	r5, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
    296c:	6884      	ldr	r4, [r0, #8]
    296e:	f04f 0320 	mov.w	r3, #32
    2972:	f3ef 8611 	mrs	r6, BASEPRI
    2976:	f383 8811 	msr	BASEPRI, r3
    297a:	f3bf 8f6f 	isb	sy
	data->ref--;
    297e:	7a23      	ldrb	r3, [r4, #8]
    2980:	3b01      	subs	r3, #1
    2982:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
    2984:	2b00      	cmp	r3, #0
	data->ref--;
    2986:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
    2988:	d11c      	bne.n	29c4 <clock_stop+0x5e>
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    298a:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
    298e:	686b      	ldr	r3, [r5, #4]
				config->stop_handler(dev) : true;
    2990:	b9a3      	cbnz	r3, 29bc <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    2992:	7aeb      	ldrb	r3, [r5, #11]
    2994:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2998:	2201      	movs	r2, #1
    299a:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    299c:	892b      	ldrh	r3, [r5, #8]
    299e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    29a2:	2200      	movs	r2, #0
    29a4:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + (uint32_t)event));
    29a6:	681b      	ldr	r3, [r3, #0]
    29a8:	9301      	str	r3, [sp, #4]
    (void)dummy;
    29aa:	9b01      	ldr	r3, [sp, #4]
		data->started = false;
    29ac:	2000      	movs	r0, #0
    29ae:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    29b0:	f386 8811 	msr	BASEPRI, r6
    29b4:	f3bf 8f6f 	isb	sy
}
    29b8:	b002      	add	sp, #8
    29ba:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
    29bc:	4798      	blx	r3
    29be:	2800      	cmp	r0, #0
    29c0:	d1e7      	bne.n	2992 <clock_stop+0x2c>
    29c2:	e7f3      	b.n	29ac <clock_stop+0x46>
    29c4:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
    29c8:	bfbc      	itt	lt
    29ca:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
    29cc:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
    29d0:	e7ee      	b.n	29b0 <clock_stop+0x4a>

000029d2 <clock_async_start>:
{
    29d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
    29d4:	6803      	ldr	r3, [r0, #0]
	struct nrf_clock_control *clk_data = dev->driver_data;
    29d6:	6885      	ldr	r5, [r0, #8]
	const struct nrf_clock_control_config *config =
    29d8:	689f      	ldr	r7, [r3, #8]
{
    29da:	4606      	mov	r6, r0
    29dc:	4614      	mov	r4, r2
	__asm__ volatile(
    29de:	f04f 0320 	mov.w	r3, #32
    29e2:	f3ef 8211 	mrs	r2, BASEPRI
    29e6:	f383 8811 	msr	BASEPRI, r3
    29ea:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    29ee:	7a2b      	ldrb	r3, [r5, #8]
    29f0:	3301      	adds	r3, #1
    29f2:	b25b      	sxtb	r3, r3
    29f4:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
    29f6:	f382 8811 	msr	BASEPRI, r2
    29fa:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
    29fe:	7a6a      	ldrb	r2, [r5, #9]
    2a00:	b132      	cbz	r2, 2a10 <clock_async_start+0x3e>
		if (data) {
    2a02:	b90c      	cbnz	r4, 2a08 <clock_async_start+0x36>
	return 0;
    2a04:	2000      	movs	r0, #0
}
    2a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
    2a08:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    2a0c:	4798      	blx	r3
    2a0e:	e7f9      	b.n	2a04 <clock_async_start+0x32>
		if (ref == 1) {
    2a10:	2b01      	cmp	r3, #1
    2a12:	d106      	bne.n	2a22 <clock_async_start+0x50>
			do_start =  (config->start_handler) ?
    2a14:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
    2a16:	b933      	cbnz	r3, 2a26 <clock_async_start+0x54>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    2a18:	7abb      	ldrb	r3, [r7, #10]
    2a1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2a1e:	2201      	movs	r2, #1
    2a20:	601a      	str	r2, [r3, #0]
		if (data) {
    2a22:	b94c      	cbnz	r4, 2a38 <clock_async_start+0x66>
    2a24:	e7ee      	b.n	2a04 <clock_async_start+0x32>
					config->start_handler(dev) : true;
    2a26:	4798      	blx	r3
    2a28:	2800      	cmp	r0, #0
    2a2a:	d1f5      	bne.n	2a18 <clock_async_start+0x46>
			} else if (data) {
    2a2c:	2c00      	cmp	r4, #0
    2a2e:	d0e9      	beq.n	2a04 <clock_async_start+0x32>
				data->cb(dev, data->user_data);
    2a30:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    2a34:	4630      	mov	r0, r6
    2a36:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
    2a38:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
    2a3a:	429c      	cmp	r4, r3
    2a3c:	d00d      	beq.n	2a5a <clock_async_start+0x88>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    2a3e:	b113      	cbz	r3, 2a46 <clock_async_start+0x74>
	return node->next;
    2a40:	681b      	ldr	r3, [r3, #0]
	} while (item);
    2a42:	2b00      	cmp	r3, #0
    2a44:	d1f9      	bne.n	2a3a <clock_async_start+0x68>
	parent->next = child;
    2a46:	2000      	movs	r0, #0
    2a48:	6020      	str	r0, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    2a4a:	686b      	ldr	r3, [r5, #4]
    2a4c:	b913      	cbnz	r3, 2a54 <clock_async_start+0x82>
	list->head = node;
    2a4e:	e9c5 4400 	strd	r4, r4, [r5]
    2a52:	e7d7      	b.n	2a04 <clock_async_start+0x32>
	parent->next = child;
    2a54:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2a56:	606c      	str	r4, [r5, #4]
    2a58:	e7d5      	b.n	2a06 <clock_async_start+0x34>
				return -EALREADY;
    2a5a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    2a5e:	e7d2      	b.n	2a06 <clock_async_start+0x34>

00002a60 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    2a60:	2200      	movs	r2, #0
    2a62:	f7ff bfb6 	b.w	29d2 <clock_async_start>

00002a66 <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    2a66:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
    2a68:	2000      	movs	r0, #0
	list->tail = NULL;
    2a6a:	e9c3 0000 	strd	r0, r0, [r3]
}
    2a6e:	4770      	bx	lr

00002a70 <hfclk_init>:
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    2a70:	2200      	movs	r2, #0
{
    2a72:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    2a74:	2101      	movs	r1, #1
{
    2a76:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    2a78:	4610      	mov	r0, r2
    2a7a:	f7fd fffb 	bl	a74 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    2a7e:	2000      	movs	r0, #0
    2a80:	f7fd ffe8 	bl	a54 <z_arch_irq_enable>
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
    2a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a88:	2201      	movs	r2, #1
    2a8a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
    2a8e:	2203      	movs	r2, #3
    2a90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    2a94:	68a3      	ldr	r3, [r4, #8]
	list->head = NULL;
    2a96:	2000      	movs	r0, #0
	list->tail = NULL;
    2a98:	e9c3 0000 	strd	r0, r0, [r3]
}
    2a9c:	bd10      	pop	{r4, pc}

00002a9e <clkstarted_handle>:
{
    2a9e:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
    2aa0:	6884      	ldr	r4, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
    2aa2:	6823      	ldr	r3, [r4, #0]
{
    2aa4:	4605      	mov	r5, r0
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    2aa6:	b12b      	cbz	r3, 2ab4 <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2aa8:	6861      	ldr	r1, [r4, #4]
	return node->next;
    2aaa:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    2aac:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2aae:	428b      	cmp	r3, r1
	list->tail = node;
    2ab0:	bf08      	it	eq
    2ab2:	6062      	streq	r2, [r4, #4]
	data->started = true;
    2ab4:	2201      	movs	r2, #1
    2ab6:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
    2ab8:	b903      	cbnz	r3, 2abc <clkstarted_handle+0x1e>
}
    2aba:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
    2abc:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    2ac0:	4628      	mov	r0, r5
    2ac2:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
    2ac4:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	d0f7      	beq.n	2aba <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2aca:	6861      	ldr	r1, [r4, #4]
	return node->next;
    2acc:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    2ace:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2ad0:	428b      	cmp	r3, r1
	list->tail = node;
    2ad2:	bf08      	it	eq
    2ad4:	6062      	streq	r2, [r4, #4]
    2ad6:	e7ef      	b.n	2ab8 <clkstarted_handle+0x1a>

00002ad8 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    2ad8:	4770      	bx	lr

00002ada <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    2ada:	4770      	bx	lr

00002adc <abort_function>:
{
    2adc:	e7fe      	b.n	2adc <abort_function>

00002ade <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
    2ade:	f7fd bf67 	b.w	9b0 <z_arm_bus_fault>

00002ae2 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2ae2:	f000 b996 	b.w	2e12 <z_fatal_error>

00002ae6 <z_do_kernel_oops>:
}

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    2ae6:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    2ae8:	6800      	ldr	r0, [r0, #0]
    2aea:	f000 b992 	b.w	2e12 <z_fatal_error>

00002aee <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    2aee:	b508      	push	{r3, lr}
	handler();
    2af0:	f7fd ff72 	bl	9d8 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
    2af4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
    2af8:	f7fd bf06 	b.w	908 <z_arm_exc_exit>

00002afc <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    2afc:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    2afe:	2100      	movs	r1, #0
    2b00:	a801      	add	r0, sp, #4
    2b02:	f7fe f9c1 	bl	e88 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    2b06:	b003      	add	sp, #12
    2b08:	f85d fb04 	ldr.w	pc, [sp], #4

00002b0c <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    2b0c:	3801      	subs	r0, #1
    2b0e:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    2b10:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    2b14:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    2b18:	4293      	cmp	r3, r2
    2b1a:	d102      	bne.n	2b22 <strcmp+0x16>
    2b1c:	2b00      	cmp	r3, #0
    2b1e:	d1f7      	bne.n	2b10 <strcmp+0x4>
    2b20:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    2b22:	1a98      	subs	r0, r3, r2
    2b24:	4770      	bx	lr

00002b26 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    2b26:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    2b28:	ea81 0400 	eor.w	r4, r1, r0
    2b2c:	07a5      	lsls	r5, r4, #30
    2b2e:	4603      	mov	r3, r0
    2b30:	d00b      	beq.n	2b4a <memcpy+0x24>
    2b32:	3b01      	subs	r3, #1
    2b34:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    2b36:	4291      	cmp	r1, r2
    2b38:	d11d      	bne.n	2b76 <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    2b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    2b3c:	2a00      	cmp	r2, #0
    2b3e:	d0fc      	beq.n	2b3a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    2b40:	f811 4b01 	ldrb.w	r4, [r1], #1
    2b44:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    2b48:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    2b4a:	079c      	lsls	r4, r3, #30
    2b4c:	d1f6      	bne.n	2b3c <memcpy+0x16>
    2b4e:	1f1d      	subs	r5, r3, #4
    2b50:	460c      	mov	r4, r1
    2b52:	188f      	adds	r7, r1, r2
		while (n >= sizeof(mem_word_t)) {
    2b54:	1b3e      	subs	r6, r7, r4
    2b56:	2e03      	cmp	r6, #3
    2b58:	d808      	bhi.n	2b6c <memcpy+0x46>
    2b5a:	0894      	lsrs	r4, r2, #2
    2b5c:	f06f 0503 	mvn.w	r5, #3
    2b60:	fb05 2204 	mla	r2, r5, r4, r2
    2b64:	00a4      	lsls	r4, r4, #2
    2b66:	4423      	add	r3, r4
    2b68:	4421      	add	r1, r4
    2b6a:	e7e2      	b.n	2b32 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    2b6c:	f854 6b04 	ldr.w	r6, [r4], #4
    2b70:	f845 6f04 	str.w	r6, [r5, #4]!
    2b74:	e7ee      	b.n	2b54 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    2b76:	f811 4b01 	ldrb.w	r4, [r1], #1
    2b7a:	f803 4f01 	strb.w	r4, [r3, #1]!
    2b7e:	e7da      	b.n	2b36 <memcpy+0x10>

00002b80 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    2b80:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    2b82:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    2b84:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    2b86:	079c      	lsls	r4, r3, #30
    2b88:	d10f      	bne.n	2baa <memset+0x2a>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    2b8a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    2b8e:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    2b92:	461d      	mov	r5, r3
    2b94:	189f      	adds	r7, r3, r2
    2b96:	1b7e      	subs	r6, r7, r5
    2b98:	2e03      	cmp	r6, #3
    2b9a:	d80c      	bhi.n	2bb6 <memset+0x36>
    2b9c:	0894      	lsrs	r4, r2, #2
    2b9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2ba2:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    2ba4:	429c      	cmp	r4, r3
    2ba6:	d109      	bne.n	2bbc <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    2ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
    2baa:	2a00      	cmp	r2, #0
    2bac:	d0fc      	beq.n	2ba8 <memset+0x28>
		*(d_byte++) = c_byte;
    2bae:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    2bb2:	3a01      	subs	r2, #1
    2bb4:	e7e7      	b.n	2b86 <memset+0x6>
		*(d_word++) = c_word;
    2bb6:	f845 4b04 	str.w	r4, [r5], #4
    2bba:	e7ec      	b.n	2b96 <memset+0x16>
		*(d_byte++) = c_byte;
    2bbc:	f804 1b01 	strb.w	r1, [r4], #1
    2bc0:	e7f0      	b.n	2ba4 <memset+0x24>

00002bc2 <_stdout_hook_default>:
}
    2bc2:	f04f 30ff 	mov.w	r0, #4294967295
    2bc6:	4770      	bx	lr

00002bc8 <gpio_nrfx_write>:
{
    2bc8:	b510      	push	{r4, lr}
	return port->config->config_info;
    2bca:	6804      	ldr	r4, [r0, #0]
    2bcc:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2bce:	68a4      	ldr	r4, [r4, #8]
    2bd0:	69c0      	ldr	r0, [r0, #28]
    2bd2:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2bd4:	2901      	cmp	r1, #1
    2bd6:	d104      	bne.n	2be2 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    2bd8:	4058      	eors	r0, r3
    p_reg->OUT = value;
    2bda:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
    2bde:	2000      	movs	r0, #0
    2be0:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    2be2:	3300      	adds	r3, #0
    2be4:	fa20 f002 	lsr.w	r0, r0, r2
    2be8:	f04f 0101 	mov.w	r1, #1
    2bec:	bf18      	it	ne
    2bee:	2301      	movne	r3, #1
    2bf0:	f000 0001 	and.w	r0, r0, #1
    2bf4:	4091      	lsls	r1, r2
    2bf6:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
    2bf8:	bf14      	ite	ne
    2bfa:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    2bfe:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
    2c02:	e7ec      	b.n	2bde <gpio_nrfx_write+0x16>

00002c04 <gpio_nrfx_read>:
{
    2c04:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    2c06:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    2c08:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2c0a:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    2c0c:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2c0e:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
    2c10:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
    2c14:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
    2c18:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    2c1c:	4060      	eors	r0, r4
    2c1e:	406c      	eors	r4, r5
    2c20:	4034      	ands	r4, r6
    2c22:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2c24:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
    2c26:	bf1c      	itt	ne
    2c28:	40d0      	lsrne	r0, r2
    2c2a:	f000 0001 	andne.w	r0, r0, #1
    2c2e:	6018      	str	r0, [r3, #0]
}
    2c30:	2000      	movs	r0, #0
    2c32:	bd70      	pop	{r4, r5, r6, pc}

00002c34 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2c34:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
    2c36:	6818      	ldr	r0, [r3, #0]
{
    2c38:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    2c3a:	b158      	cbz	r0, 2c54 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2c3c:	2400      	movs	r4, #0
    2c3e:	4281      	cmp	r1, r0
    2c40:	d113      	bne.n	2c6a <gpio_nrfx_manage_callback+0x36>
    2c42:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    2c44:	b95c      	cbnz	r4, 2c5e <gpio_nrfx_manage_callback+0x2a>
    2c46:	685c      	ldr	r4, [r3, #4]
	list->head = node;
    2c48:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    2c4a:	42a1      	cmp	r1, r4
    2c4c:	d100      	bne.n	2c50 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    2c4e:	6058      	str	r0, [r3, #4]
	parent->next = child;
    2c50:	2000      	movs	r0, #0
    2c52:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    2c54:	b972      	cbnz	r2, 2c74 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2c56:	2000      	movs	r0, #0
}
    2c58:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2c5a:	4628      	mov	r0, r5
    2c5c:	e7ef      	b.n	2c3e <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
    2c5e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    2c60:	6858      	ldr	r0, [r3, #4]
    2c62:	4281      	cmp	r1, r0
	list->tail = node;
    2c64:	bf08      	it	eq
    2c66:	605c      	streq	r4, [r3, #4]
    2c68:	e7f2      	b.n	2c50 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    2c6a:	6805      	ldr	r5, [r0, #0]
    2c6c:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2c6e:	2d00      	cmp	r5, #0
    2c70:	d1f3      	bne.n	2c5a <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    2c72:	b13a      	cbz	r2, 2c84 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    2c74:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    2c76:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    2c78:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    2c7a:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    2c7c:	2800      	cmp	r0, #0
    2c7e:	d1ea      	bne.n	2c56 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    2c80:	6059      	str	r1, [r3, #4]
    2c82:	e7e9      	b.n	2c58 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    2c84:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2c88:	e7e6      	b.n	2c58 <gpio_nrfx_manage_callback+0x24>

00002c8a <fire_callbacks>:
{
    2c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    2c8c:	6885      	ldr	r5, [r0, #8]
{
    2c8e:	460f      	mov	r7, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2c90:	6829      	ldr	r1, [r5, #0]
{
    2c92:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2c94:	b169      	cbz	r1, 2cb2 <fire_callbacks+0x28>
	return node->next;
    2c96:	680c      	ldr	r4, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
    2c98:	68eb      	ldr	r3, [r5, #12]
    2c9a:	688a      	ldr	r2, [r1, #8]
    2c9c:	403b      	ands	r3, r7
    2c9e:	4213      	tst	r3, r2
    2ca0:	d003      	beq.n	2caa <fire_callbacks+0x20>
			cb->handler(port, cb, pins);
    2ca2:	684b      	ldr	r3, [r1, #4]
    2ca4:	463a      	mov	r2, r7
    2ca6:	4630      	mov	r0, r6
    2ca8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2caa:	b114      	cbz	r4, 2cb2 <fire_callbacks+0x28>
    2cac:	4621      	mov	r1, r4
    2cae:	6824      	ldr	r4, [r4, #0]
    2cb0:	e7f2      	b.n	2c98 <fire_callbacks+0xe>
}
    2cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002cb4 <check_level_trigger_pins>:
{
    2cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->config->config_info;
    2cb6:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
    2cb8:	6883      	ldr	r3, [r0, #8]
	return port->config->config_info;
    2cba:	6897      	ldr	r7, [r2, #8]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    2cbc:	69dc      	ldr	r4, [r3, #28]
	u32_t out = data->int_en & data->pin_int_en;
    2cbe:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
    2cc2:	400a      	ands	r2, r1
	out &= ~data->trig_edge & ~data->double_edge;
    2cc4:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
    2cc8:	4301      	orrs	r1, r0
    2cca:	ea22 0201 	bic.w	r2, r2, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    2cce:	6839      	ldr	r1, [r7, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    2cd0:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
    2cd2:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    2cd6:	405c      	eors	r4, r3
    2cd8:	404c      	eors	r4, r1
	u32_t out = pin_states & level_pins;
    2cda:	ea22 0404 	bic.w	r4, r2, r4
	u32_t bit = 1U << pin;
    2cde:	2501      	movs	r5, #1
	u32_t pin = 0U;
    2ce0:	2600      	movs	r6, #0
	while (level_pins) {
    2ce2:	b90a      	cbnz	r2, 2ce8 <check_level_trigger_pins+0x34>
}
    2ce4:	4620      	mov	r0, r4
    2ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (level_pins & bit) {
    2ce8:	422a      	tst	r2, r5
    2cea:	d009      	beq.n	2d00 <check_level_trigger_pins+0x4c>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2cec:	793b      	ldrb	r3, [r7, #4]
    2cee:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2cf2:	2100      	movs	r1, #0
    2cf4:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    2cf8:	f7fe f90a 	bl	f10 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    2cfc:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    2d00:	3601      	adds	r6, #1
		bit <<= 1;
    2d02:	006d      	lsls	r5, r5, #1
    2d04:	e7ed      	b.n	2ce2 <check_level_trigger_pins+0x2e>

00002d06 <cfg_level_pins>:
{
    2d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
    2d08:	6884      	ldr	r4, [r0, #8]
	return port->config->config_info;
    2d0a:	6803      	ldr	r3, [r0, #0]
    2d0c:	689d      	ldr	r5, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    2d0e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2d12:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
    2d14:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
    2d18:	430b      	orrs	r3, r1
    2d1a:	ea22 0203 	bic.w	r2, r2, r3
	u32_t bit = 1U << pin;
    2d1e:	2701      	movs	r7, #1
	u32_t pin = 0U;
    2d20:	2600      	movs	r6, #0
	while (level_pins) {
    2d22:	b902      	cbnz	r2, 2d26 <cfg_level_pins+0x20>
}
    2d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (level_pins & bit) {
    2d26:	4217      	tst	r7, r2
    2d28:	d012      	beq.n	2d50 <cfg_level_pins+0x4a>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    2d2a:	69e1      	ldr	r1, [r4, #28]
    2d2c:	6923      	ldr	r3, [r4, #16]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2d2e:	f895 c004 	ldrb.w	ip, [r5, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    2d32:	404b      	eors	r3, r1
    2d34:	40f3      	lsrs	r3, r6
	return NRF_GPIO_PIN_SENSE_LOW;
    2d36:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2d3a:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2d3e:	bf14      	ite	ne
    2d40:	2102      	movne	r1, #2
    2d42:	2103      	moveq	r1, #3
    2d44:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
    2d48:	f7fe f8e2 	bl	f10 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    2d4c:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
    2d50:	3601      	adds	r6, #1
		bit <<= 1;
    2d52:	007f      	lsls	r7, r7, #1
    2d54:	e7e5      	b.n	2d22 <cfg_level_pins+0x1c>

00002d56 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2d56:	2901      	cmp	r1, #1
{
    2d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    2d5c:	bf18      	it	ne
    2d5e:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    2d60:	6887      	ldr	r7, [r0, #8]
{
    2d62:	4606      	mov	r6, r0
		to_pin   = pin;
    2d64:	bf12      	itee	ne
    2d66:	4625      	movne	r5, r4
		to_pin   = 31U;
    2d68:	251f      	moveq	r5, #31
		from_pin = 0U;
    2d6a:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    2d6c:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2d70:	42ac      	cmp	r4, r5
    2d72:	d902      	bls.n	2d7a <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    2d74:	2000      	movs	r0, #0
}
    2d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    2d7a:	68fb      	ldr	r3, [r7, #12]
    2d7c:	fa08 f204 	lsl.w	r2, r8, r4
    2d80:	ea23 0302 	bic.w	r3, r3, r2
    2d84:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    2d86:	4621      	mov	r1, r4
    2d88:	4630      	mov	r0, r6
    2d8a:	f7fe f8d9 	bl	f40 <gpiote_pin_int_cfg>
		if (res != 0) {
    2d8e:	2800      	cmp	r0, #0
    2d90:	d1f1      	bne.n	2d76 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2d92:	3401      	adds	r4, #1
    2d94:	b2e4      	uxtb	r4, r4
    2d96:	e7eb      	b.n	2d70 <gpio_nrfx_pin_disable_callback+0x1a>

00002d98 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2d98:	2901      	cmp	r1, #1
{
    2d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    2d9e:	bf18      	it	ne
    2da0:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    2da2:	6887      	ldr	r7, [r0, #8]
{
    2da4:	4606      	mov	r6, r0
		to_pin   = pin;
    2da6:	bf12      	itee	ne
    2da8:	4625      	movne	r5, r4
		to_pin   = 31U;
    2daa:	251f      	moveq	r5, #31
		from_pin = 0U;
    2dac:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    2dae:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2db2:	42ac      	cmp	r4, r5
    2db4:	d902      	bls.n	2dbc <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    2db6:	2000      	movs	r0, #0
}
    2db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    2dbc:	68fb      	ldr	r3, [r7, #12]
    2dbe:	fa08 f204 	lsl.w	r2, r8, r4
    2dc2:	4313      	orrs	r3, r2
    2dc4:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    2dc6:	4621      	mov	r1, r4
    2dc8:	4630      	mov	r0, r6
    2dca:	f7fe f8b9 	bl	f40 <gpiote_pin_int_cfg>
		if (res != 0) {
    2dce:	2800      	cmp	r0, #0
    2dd0:	d1f2      	bne.n	2db8 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2dd2:	3401      	adds	r4, #1
    2dd4:	b2e4      	uxtb	r4, r4
    2dd6:	e7ec      	b.n	2db2 <gpio_nrfx_pin_enable_callback+0x1a>

00002dd8 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    2dd8:	6882      	ldr	r2, [r0, #8]
{
    2dda:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    2ddc:	e892 0003 	ldmia.w	r2, {r0, r1}
    2de0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    2de4:	2000      	movs	r0, #0
    2de6:	4770      	bx	lr

00002de8 <hw_cc310_init>:
#if CONFIG_HW_CC310

#include "nrf_cc310_platform.h"

static int hw_cc310_init(struct device *dev)
{
    2de8:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
    2dea:	f7fd fcf7 	bl	7dc <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
    2dee:	f7fd fd75 	bl	8dc <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
    2df2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
    2df6:	f7ff ba49 	b.w	228c <nrf_cc310_platform_init_no_rng>

00002dfa <z_arch_system_halt>:
	__asm__ volatile(
    2dfa:	f04f 0220 	mov.w	r2, #32
    2dfe:	f3ef 8311 	mrs	r3, BASEPRI
    2e02:	f382 8811 	msr	BASEPRI, r2
    2e06:	f3bf 8f6f 	isb	sy
    2e0a:	e7fe      	b.n	2e0a <z_arch_system_halt+0x10>

00002e0c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    2e0c:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	z_arch_system_halt(reason);
    2e0e:	f7ff fff4 	bl	2dfa <z_arch_system_halt>

00002e12 <z_fatal_error>:
	z_arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2e12:	b570      	push	{r4, r5, r6, lr}
    2e14:	4605      	mov	r5, r0
    2e16:	460e      	mov	r6, r1
	return z_impl_k_current_get();
    2e18:	f7ff f8b0 	bl	1f7c <z_impl_k_current_get>
	 */

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    2e1c:	4631      	mov	r1, r6
    2e1e:	4604      	mov	r4, r0
    2e20:	4628      	mov	r0, r5
    2e22:	f7ff fff3 	bl	2e0c <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    2e26:	4620      	mov	r0, r4
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
    2e28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2e2c:	f7fd bf5c 	b.w	ce8 <z_impl_k_thread_abort>

00002e30 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    2e30:	f7ff be53 	b.w	2ada <z_clock_idle_exit>

00002e34 <k_mem_slab_init>:
{
    2e34:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    2e36:	2400      	movs	r4, #0
	slab->block_size = block_size;
    2e38:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
    2e3c:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
    2e40:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    2e42:	42a3      	cmp	r3, r4
    2e44:	d102      	bne.n	2e4c <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
    2e46:	e9c0 0000 	strd	r0, r0, [r0]
}
    2e4a:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    2e4c:	6945      	ldr	r5, [r0, #20]
    2e4e:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    2e50:	3401      	adds	r4, #1
		slab->free_list = p;
    2e52:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    2e54:	4411      	add	r1, r2
    2e56:	e7f4      	b.n	2e42 <k_mem_slab_init+0xe>

00002e58 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    2e58:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
    2e5a:	e9c0 3302 	strd	r3, r3, [r0, #8]
    2e5e:	e9c0 0000 	strd	r0, r0, [r0]
}
    2e62:	4770      	bx	lr

00002e64 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2e64:	7b43      	ldrb	r3, [r0, #13]
    2e66:	06db      	lsls	r3, r3, #27
    2e68:	bf03      	ittte	eq
    2e6a:	6980      	ldreq	r0, [r0, #24]
    2e6c:	fab0 f080 	clzeq	r0, r0
    2e70:	0940      	lsreq	r0, r0, #5
    2e72:	2000      	movne	r0, #0
}
    2e74:	4770      	bx	lr

00002e76 <z_unpend_thread_no_timeout>:
{
    2e76:	b538      	push	{r3, r4, r5, lr}
    2e78:	4604      	mov	r4, r0
    2e7a:	f04f 0320 	mov.w	r3, #32
    2e7e:	f3ef 8511 	mrs	r5, BASEPRI
    2e82:	f383 8811 	msr	BASEPRI, r3
    2e86:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    2e8a:	4601      	mov	r1, r0
    2e8c:	6880      	ldr	r0, [r0, #8]
    2e8e:	f7fe fea9 	bl	1be4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    2e92:	7b63      	ldrb	r3, [r4, #13]
    2e94:	f023 0302 	bic.w	r3, r3, #2
    2e98:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    2e9a:	f385 8811 	msr	BASEPRI, r5
    2e9e:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    2ea2:	2300      	movs	r3, #0
    2ea4:	60a3      	str	r3, [r4, #8]
}
    2ea6:	bd38      	pop	{r3, r4, r5, pc}

00002ea8 <z_reschedule>:
{
    2ea8:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
    2eaa:	b939      	cbnz	r1, 2ebc <z_reschedule+0x14>
    2eac:	f7fe fe32 	bl	1b14 <resched.part.15>
	if (resched(key.key)) {
    2eb0:	b120      	cbz	r0, 2ebc <z_reschedule+0x14>
    2eb2:	4608      	mov	r0, r1
}
    2eb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    2eb8:	f7fd bdb2 	b.w	a20 <z_arch_swap>
    2ebc:	f381 8811 	msr	BASEPRI, r1
    2ec0:	f3bf 8f6f 	isb	sy
    2ec4:	bd08      	pop	{r3, pc}

00002ec6 <z_reschedule_irqlock>:
{
    2ec6:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
    2ec8:	4602      	mov	r2, r0
    2eca:	b938      	cbnz	r0, 2edc <z_reschedule_irqlock+0x16>
    2ecc:	f7fe fe22 	bl	1b14 <resched.part.15>
	if (resched(key)) {
    2ed0:	b120      	cbz	r0, 2edc <z_reschedule_irqlock+0x16>
    2ed2:	4610      	mov	r0, r2
}
    2ed4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    2ed8:	f7fd bda2 	b.w	a20 <z_arch_swap>
    2edc:	f382 8811 	msr	BASEPRI, r2
    2ee0:	f3bf 8f6f 	isb	sy
    2ee4:	bd08      	pop	{r3, pc}

00002ee6 <z_reschedule_unlocked>:
	__asm__ volatile(
    2ee6:	f04f 0320 	mov.w	r3, #32
    2eea:	f3ef 8011 	mrs	r0, BASEPRI
    2eee:	f383 8811 	msr	BASEPRI, r3
    2ef2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
    2ef6:	f7ff bfe6 	b.w	2ec6 <z_reschedule_irqlock>

00002efa <z_priq_dumb_best>:
	return list->head == list;
    2efa:	6803      	ldr	r3, [r0, #0]
}
    2efc:	4298      	cmp	r0, r3
    2efe:	bf14      	ite	ne
    2f00:	4618      	movne	r0, r3
    2f02:	2000      	moveq	r0, #0
    2f04:	4770      	bx	lr

00002f06 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
    2f06:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    2f0a:	b570      	push	{r4, r5, r6, lr}
    2f0c:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    2f0e:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    2f12:	b1cb      	cbz	r3, 2f48 <z_thread_timeout+0x42>
    2f14:	f04f 0320 	mov.w	r3, #32
    2f18:	f3ef 8611 	mrs	r6, BASEPRI
    2f1c:	f383 8811 	msr	BASEPRI, r3
    2f20:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    2f24:	4629      	mov	r1, r5
    2f26:	f850 0c10 	ldr.w	r0, [r0, #-16]
    2f2a:	f7fe fe5b 	bl	1be4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    2f2e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    2f32:	f023 0302 	bic.w	r3, r3, #2
    2f36:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    2f3a:	f386 8811 	msr	BASEPRI, r6
    2f3e:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    2f42:	2300      	movs	r3, #0
    2f44:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    2f48:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    2f4c:	f023 0314 	bic.w	r3, r3, #20
    2f50:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    2f54:	4628      	mov	r0, r5
    2f56:	f7ff ff85 	bl	2e64 <z_is_thread_ready>
    2f5a:	b120      	cbz	r0, 2f66 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    2f5c:	4628      	mov	r0, r5
}
    2f5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2f62:	f7fe be8f 	b.w	1c84 <z_add_thread_to_ready_q>
    2f66:	bd70      	pop	{r4, r5, r6, pc}

00002f68 <z_unpend_first_thread>:
{
    2f68:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    2f6a:	f04f 0320 	mov.w	r3, #32
    2f6e:	f3ef 8211 	mrs	r2, BASEPRI
    2f72:	f383 8811 	msr	BASEPRI, r3
    2f76:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    2f7a:	f7ff ffbe 	bl	2efa <z_priq_dumb_best>
    2f7e:	4604      	mov	r4, r0
	__asm__ volatile(
    2f80:	f382 8811 	msr	BASEPRI, r2
    2f84:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    2f88:	b1c8      	cbz	r0, 2fbe <z_unpend_first_thread+0x56>
	__asm__ volatile(
    2f8a:	f04f 0320 	mov.w	r3, #32
    2f8e:	f3ef 8511 	mrs	r5, BASEPRI
    2f92:	f383 8811 	msr	BASEPRI, r3
    2f96:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    2f9a:	4601      	mov	r1, r0
    2f9c:	6880      	ldr	r0, [r0, #8]
    2f9e:	f7fe fe21 	bl	1be4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    2fa2:	7b63      	ldrb	r3, [r4, #13]
    2fa4:	f023 0302 	bic.w	r3, r3, #2
    2fa8:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    2faa:	f385 8811 	msr	BASEPRI, r5
    2fae:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    2fb2:	2300      	movs	r3, #0
    2fb4:	60a3      	str	r3, [r4, #8]
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    2fb6:	f104 0018 	add.w	r0, r4, #24
    2fba:	f000 f832 	bl	3022 <z_abort_timeout>
}
    2fbe:	4620      	mov	r0, r4
    2fc0:	bd38      	pop	{r3, r4, r5, pc}

00002fc2 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2fc2:	7b43      	ldrb	r3, [r0, #13]
    2fc4:	06db      	lsls	r3, r3, #27
    2fc6:	bf03      	ittte	eq
    2fc8:	6980      	ldreq	r0, [r0, #24]
    2fca:	fab0 f080 	clzeq	r0, r0
    2fce:	0940      	lsreq	r0, r0, #5
    2fd0:	2000      	movne	r0, #0
}
    2fd2:	4770      	bx	lr

00002fd4 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    2fd4:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    2fd6:	b510      	push	{r4, lr}
    2fd8:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    2fda:	b103      	cbz	r3, 2fde <z_thread_single_abort+0xa>
		thread->fn_abort();
    2fdc:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
    2fde:	4620      	mov	r0, r4
    2fe0:	f7ff ffef 	bl	2fc2 <z_is_thread_ready>
    2fe4:	b138      	cbz	r0, 2ff6 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
    2fe6:	4620      	mov	r0, r4
    2fe8:	f7fe fefe 	bl	1de8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
    2fec:	7b63      	ldrb	r3, [r4, #13]
    2fee:	f043 0308 	orr.w	r3, r3, #8
    2ff2:	7363      	strb	r3, [r4, #13]
}
    2ff4:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
    2ff6:	7b63      	ldrb	r3, [r4, #13]
    2ff8:	079b      	lsls	r3, r3, #30
    2ffa:	d502      	bpl.n	3002 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
    2ffc:	4620      	mov	r0, r4
    2ffe:	f7ff ff3a 	bl	2e76 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
    3002:	69a3      	ldr	r3, [r4, #24]
    3004:	2b00      	cmp	r3, #0
    3006:	d0f1      	beq.n	2fec <z_thread_single_abort+0x18>
    3008:	f104 0018 	add.w	r0, r4, #24
    300c:	f000 f809 	bl	3022 <z_abort_timeout>
    3010:	e7ec      	b.n	2fec <z_thread_single_abort+0x18>

00003012 <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    3012:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    3014:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    3016:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    3018:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    301a:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
    301c:	e9c0 3306 	strd	r3, r3, [r0, #24]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    3020:	4770      	bx	lr

00003022 <z_abort_timeout>:
{
    3022:	b510      	push	{r4, lr}
	__asm__ volatile(
    3024:	f04f 0220 	mov.w	r2, #32
    3028:	f3ef 8411 	mrs	r4, BASEPRI
    302c:	f382 8811 	msr	BASEPRI, r2
    3030:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    3034:	6803      	ldr	r3, [r0, #0]
    3036:	b13b      	cbz	r3, 3048 <z_abort_timeout+0x26>
			remove_timeout(to);
    3038:	f7ff f848 	bl	20cc <remove_timeout>
			ret = 0;
    303c:	2000      	movs	r0, #0
	__asm__ volatile(
    303e:	f384 8811 	msr	BASEPRI, r4
    3042:	f3bf 8f6f 	isb	sy
}
    3046:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    3048:	f06f 0015 	mvn.w	r0, #21
    304c:	e7f7      	b.n	303e <z_abort_timeout+0x1c>

0000304e <z_get_next_timeout_expiry>:
{
    304e:	b510      	push	{r4, lr}
	__asm__ volatile(
    3050:	f04f 0320 	mov.w	r3, #32
    3054:	f3ef 8411 	mrs	r4, BASEPRI
    3058:	f383 8811 	msr	BASEPRI, r3
    305c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    3060:	f7ff f84a 	bl	20f8 <next_timeout>
	__asm__ volatile(
    3064:	f384 8811 	msr	BASEPRI, r4
    3068:	f3bf 8f6f 	isb	sy
}
    306c:	bd10      	pop	{r4, pc}

0000306e <z_set_timeout_expiry>:
{
    306e:	b570      	push	{r4, r5, r6, lr}
    3070:	4604      	mov	r4, r0
    3072:	460e      	mov	r6, r1
	__asm__ volatile(
    3074:	f04f 0320 	mov.w	r3, #32
    3078:	f3ef 8511 	mrs	r5, BASEPRI
    307c:	f383 8811 	msr	BASEPRI, r3
    3080:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    3084:	f7ff f838 	bl	20f8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    3088:	2801      	cmp	r0, #1
    308a:	dd05      	ble.n	3098 <z_set_timeout_expiry+0x2a>
    308c:	42a0      	cmp	r0, r4
    308e:	dd03      	ble.n	3098 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    3090:	4631      	mov	r1, r6
    3092:	4620      	mov	r0, r4
    3094:	f7fd fb3a 	bl	70c <z_clock_set_timeout>
	__asm__ volatile(
    3098:	f385 8811 	msr	BASEPRI, r5
    309c:	f3bf 8f6f 	isb	sy
}
    30a0:	bd70      	pop	{r4, r5, r6, pc}

000030a2 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    30a2:	4770      	bx	lr
